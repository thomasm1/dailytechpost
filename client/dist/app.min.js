 
var bloggerMarch20 = function() {
 
//   var blogpost11 =  `<p>
//     </p>
//     <p class="quote">Graphene batteries are one of the fastest energy-storing solutions available, globally. Graphene utilized as electrode material in batteries needs to be of high quality, that is, single to few layered graphene.<sup>1</sup>
//     </p>
//     <p class="quote">
//     `
//      var blogcite11 =    ` 
//       <p>1. <a  target="_blank" href="https://nysenewstimes.com/huge-demand-for-graphene-battery-market-2020-statistics-facts-and-figures-growth-overview-size-swot-analysis-and-forecast-to-2026-by-cabot-corporation-nanoxplore-graphene-3d-lab/">https://nysenewstimes.com/huge-demand-for-graphene-battery-market-2020-statistics-facts-and-figures-growth-overview-size-swot-analysis-and-forecast-to-2026-by-cabot-corporation-nanoxplore-graphene-3d-lab/</a> 
// </p>
// <p>2. <a  target="_blank" href="https://www.graphene-info.com/graphene-batteries">https://www.graphene-info.com/graphene-batteries</a> </p>  
// <p>3. <a  target="_blank" href="https://www.wired.com/story/welcome-to-the-era-of-supercharged-lithium-silicon-batteries/">https://www.wired.com/story/welcome-to-the-era-of-supercharged-lithium-silicon-batteries/</a> 
// </p>  
//   `;
//     var blogpost10 = `<p>The Nuts &amp; Bolts of one of graphene's contributions ...
//     </p>
//     <p class="quote">When a lithium-ion battery is charging, lithium ions flow to the anode, which is typically made of a type of carbon called graphite. If you swap graphite for silicon, far more lithium ions can be stored in the anode, which increases the energy capacity of the battery. But packing all these lithium ions into the electrode causes it to swell like a balloon; in some cases, it can grow up to four times larger.
// <br /><br />
// The swollen anode can pulverize the nanoengineered silicon particles and rupture the protective barrier between the anode and the battery’s electrolyte, which ferries the lithium ions between the electrodes. Over time, crud builds up at the boundary between the anode and electrolyte. This both blocks the efficient transfer of lithium ions and takes many of the ions out of service. It quickly kills any performance improvements the silicon anode provided.
// <br /><br />
// One way out of this problem is to sprinkle small amounts of silicon oxide—better known as sand—throughout a graphite anode. This is what Tesla currently does with its batteries. Silicon oxide comes pre-puffed, so it reduces the stress on the anode from swelling during charging. But it also limits the amount of lithium that can be stored in the anode. Juicing a battery this way isn’t enough to produce double-digit performance gains, but it’s better than nothing.
// <br /><br />
// Cary Hayner, cofounder and CTO of NanoGraf, thinks it’s possible to get the best of silicon and graphite without the loss of energy capacity from silicon oxide. At NanoGraf, he and his colleagues are boosting the energy of carbon-silicon batteries by embedding silicon particles in graphene, graphite’s Nobel Prize-winning cousin. Their design uses a graphene matrix to give silicon room to swell and to protect the anode from damaging reactions with the electrolyte. Hayner says a graphene-silicon anode can increase the amount of energy in a lithium-ion battery by up to 30 percent.<sup>1</sup>
//     </p>
//     `
//      var blogcite10 =    ` 
//       <p>1. <a  target="_blank" href="https://www.wired.com/story/welcome-to-the-era-of-supercharged-lithium-silicon-batteries/">https://www.wired.com/story/welcome-to-the-era-of-supercharged-lithium-silicon-batteries/</a>  </p>

//       <!-- <p>2. <a  target="_blank" href=""></a> </p>  -->  `;

//     var blogpost8 =     `<p>
//     </p>
//     <p class="quote">
//     </p>
//     `
//      var blogcite8 =    ` 
//       <p>1. <a  target="_blank" href=""></a>  </p>
// <p>2. <a  target="_blank" href="</a> </p>    
//   `;

    var blogpost7 = `<p>
     Democratization of access to quantum software -- Cloud-backed hardware and open-software API's available to the public -- has been broadly expanded with Google Cloud Platform's March 6th White Paper, which outlines a package of (data analysis) simulation hardware, which "combines Cirq, an open source quantum circuit library, and the <a href="https://www.tensorflow.org/quantum" target="_blank">TensorFlow</a> machine learning platform." In short, the complete package: 
    </p> 
    <p class="quote">Google today announced the launch of TensorFlow Quantum, bringing together machine learning and quantum computing initiatives at the company. The framework can construct quantum datasets, prototype hybrid quantum and classic machine learning models, support quantum circuit simulators, and train discriminative and generative quantum models.
    <sup>1 &nbsp; 2</sup>
    </p>
    <p>In my <a href="#12-22-18">12-22-18 blog post, Quantum Computing</a>, I wrote on IBM's pioneering efforts to provide public access to quantum hardware for limited use. IBM's <em>Q Experience</em> was the first to provide large-scale applications for public consumption, but those were test rides around a track while Google here is offering the track, the pit crew and unlimited supply of racing cars to work with and invent with, from under the hood to every tool in the shop. 
    <br /><br />
From the White Paper:
    </p>
    <p class="quote">
We introduce TensorFlow Quantum (TFQ), an open source library for the rapid prototyping of hybrid quantum-classical models for classical or quantum data. This framework offers high-level abstractions for the design and training of both discriminative and generative quantum models under TensorFlow and supports high-performance quantum circuit simulators. We provide an overview of the software architecture and building blocks through several examples and review the theory of hybrid quantum-classical neural networks. We illustrate TFQ functionalities via several basic applications including supervised learning for quantum classification, quantum control, and quantum approximate optimization. Moreover, we demonstrate how one can apply TFQ to tackle advanced quantum learning tasks including meta-learning, Hamiltonian learning, and sampling thermal states. We hope this framework provides the necessary tools for the quantum computing and machine learning research communities to explore models of both natural and artificial quantum systems, and ultimately discover new quantum algorithms which could potentially yield a quantum advantage.
    <sup>3</sup>
</p> 
   `;
    var blogcite7 =    `  
    <p>1. <a  target="_blank" href="https://venturebeat.com/2020/03/09/google-launches-tensorflow-quantum-a-machine-learning-framework-for-training-quantum-models/">https://venturebeat.com/2020/03/09/google-launches-tensorflow-quantum-a-machine-learning-framework-for-training-quantum-models/</a> 
</p>
<p>2. <a  target="_blank" href="https://ai.googleblog.com/2020/03/announcing-tensorflow-quantum-open.html">https://ai.googleblog.com/2020/03/announcing-tensorflow-quantum-open.html</a> </p>  
<p>3. <a  target="_blank" href="https://arxiv.org/abs/2003.02989">March 6th, 2020 Google White Paper</a> 
</p>  

  `;

    var blogpost4 = `<p>
    At a time when the national lines blur between multi-national corporations, and an interdependent global tech community, the 21st century space race is nonetheless well-defined -- however defined along the lines of sub-atomic inner-space. 
    </p>
       <img src="dist/img/q-chandelier.jpg" width="400"  class="zoom" />
    <p class="quote">
    But just as the Soviet Union was the first to put both a satellite and a human being into orbit, before going on to lose the space race, China March be poised to outstrip any American achievements in a specific field of quantum technology — communication.<sup>1</sup>
    </p>
    <p>
    But the goals are less abstract than sending a traveler to space; they define how national secrets can be securely stored, accessed and communicated: </p>

    <p class="quote">With Micius, Chinese researchers are attempting to use a different type of quantum technology to develop new forms of secure communications that would be unbreakable. Micius is being used to share cryptography keys, which are used to encode and decode secure communications.
<br /><br />
Ordinarily, these keys are vulnerable to interception, but Micius uses photons in a quantum-superposition state – it’s impossible to read them without changing what they say, so you can’t copy or intercept a key sent in this manner.<sup>2</sup>
</p> 
   `;
    var blogcite4 =    `  
    <p>1. <a  target="_blank" href="https://www.cnn.com/2019/10/24/tech/china-quantum-computing-intl-hnk/index.html">https://www.cnn.com/2019/10/24/tech/china-quantum-computing-intl-hnk/index.html</a> 
</p> 
<p>2. <a  target="_blank" href="https://www.wired.co.uk/article/quantum-computing-china-us">https://www.wired.co.uk/article/quantum-computing-china-us</a> 
</p>  

<p>3. <a  target="_blank" href="https://www.technologyreview.com/s/615180/quantum-computer-race-ibm-google/">https://www.technologyreview.com/s/615180/quantum-computer-race-ibm-google/</a> 
</p>  `;

    var blogpost3 = `

<p class="firstparagraph">Data -- from the warehousing to the accessing and securing, all the while complying with data privacy regulations, has been a piecemeal, multi-faceted challenge: a race against the clock, against others' race against the clock, and of course the changing dynamics of the clock itself. If this sounds like an impossiblly rigged game, it is, because the goal posts bend for the best technologies availed by whom. </p>
  <img src="dist/img/q-superposition.jpg" width="400"  class="zoom" />
<p class="quote"> Countries around the world are investing billions into quantum computing research. Mainly, it’s because it has applications in artificial intelligence. Security and the search for unbreakable encryption in AI-enabled applications that house personal, business, and government data are prompting the investment into this new research area.<sup>1</sup>
</p> 

<p>The roadblocks for machine learning are clear: computing power for modern techniques are not sustainable in terms of insufficient memory and computing power, hence the current "A.I. Winter". In my <a href="#07-05-18">July 5th 2018 post, <em>Godfathers of A.I.</em></a> I outline the periods that technical limitations reduce progress and interest in A.I. applicibility. In preliminary advances, single-layered algorithms (think of one set of variables that drive prediction) and later iterations that involve multiple-layers that exponentially increase computing needs: 
</p>



<p class="quote">Programs that performed well in the laboratory were useless in everyday situations; a simple act like picking up a ball turned out to require an overwhelming number of computations. The research fell into the first of several “A.I. winters.” As Bostrom notes in his book, “Among academics and their funders, ‘A.I.’ became an unwanted epithet.”<sup>2</sup></p>
<p>So, then, what is at stake with the potential of quantum-based computations? Everything, because all the current machine learning roadblocks are flattened: </p>

<p class="quote">Quantum Computing also has the potential to allow AI to optimize its processing to such a degree that complex calculations needed to achieve artificial general intelligence can be carried out in record time.<sup>1</sup>
</p>

<p>This time it's more than a roll of the die and a few good hires. To the winner go the spoils, the losers work for the winners, and finally, not even time spent can predict the winners!</p>
<br />
`;

    var blogcite3 = `
     
<p>1. <a  target="_blank" href="https://towardsdatascience.com/is-quantum-computing-a-dream-fd7385b1db56">https://towardsdatascience.com/is-quantum-computing-a-dream-fd7385b1db56</a> 
</p>  
<p>2. <a  target="_blank" href="http://fortune.com/longform/element-ai-startup-tech/">http://fortune.com/longform/element-ai-startup-tech/</a> 
</p> 
`;


    var blogpost2 = `

<p class="firstparagraph">Gone are the days when the best and the brightest took home the honors and laurels. Today, an obsucre darkness rules over visibility into the advances that don't arise from obvious luck. Instead, networks of tech advances, some stolen, some spilled and some surmised from nothing form the new space race: The rocket head forms the algorithm and the expendible data form the solid rocket boosters. Period. 
</p>

<p class="quote"> We need quantum-resistant algorithms as soon as possible,” Grobman said. 
Cloud computing is sweeping through the industry, and it will enable the use of quantum computing. And that’s a problem, as quantum computers may be able to break encryption techniques such as RSA encryption much faster than traditional computers can. Typically, encryption techniques make it easy to encode data but hugely difficult to decode it without the use of a special key. The security is possible only because of the huge amount of time it takes for a classical computer to do the computations. <sup>1</sup></p>  

  `;

    var blogcite2 = `
<p>1. <a  target="_blank" href="https://venturebeat.com/2020/02/25/mcafee-start-protecting-against-quantum-computing-hacks-now/">https://venturebeat.com/2020/02/25/mcafee-start-protecting-against-quantum-computing-hacks-now/</a> 
</p>  
`;

  

    var url = [
        //   {
        //     id: '11',
        //     did: '20-03-17',
        //     date: 'March 17, 2020 ',
        //     author: 'by Thomas Maestas, MA',
        //     cat3: 'Sociology Tomorrow!',
        //     title: 'Graphene Relief: Batteries\' Demand',
        //     post: blogpost11,
        //     cite: blogcite11
        // },
        //   {
        //     id: '10',
        //     did: '20-03-16',
        //     date: 'March 16, 2020 ',
        //     author: 'by Thomas Maestas, MA',
        //     cat3: 'Sociology Tomorrow!',
        //     title: 'Graphene Relief: Batteries\' Context',
        //     post: blogpost10,
        //     cite: blogcite10
        // },
        //   {
        //     id: '8',
        //     did: '20-03-14',
        //     date: 'March 14-15, 2020<br />Weekend',
        //     author: 'by Thomas Maestas, MA',
        //     cat3: ' ',
        //     title: ' ',
        //     post: blogpost8,
        //     cite: blogcite8
        // },
        {
            id: '7',
            did: '20-03-09',
            date: 'March 9, 2020 ',
            author: 'by Thomas Maestas, MA',
            cat3: 'Quantum Data',
            title: 'Moving your Quantum Dreams into Today, Part V: <br />Quantum Data in the Cloud',
            post: blogpost7,
            cite: blogcite7
        },
         {
            id: '4',
            did: '20-03-05',
            date: 'March 5, 2020 ',
            author: 'by Thomas Maestas, MA',
            cat3: 'Quantum Data',
            title: 'Moving your Quantum Dreams into Today, Part III: <br />The Nationalism of Quantum Data and Privacy',
            post: blogpost4,
            cite: blogcite4
        },
        {
            id: '3',
            did: '20-03-04',
            date: 'March 4, 2020 ',
            author: 'by Thomas Maestas, MA',
            cat3: 'Quantum Data',
            title: 'Moving your Quantum Dreams into Today, Part II:<br />The Business of Quantum Data and Privacy',
            post: blogpost3,
            cite: blogcite3
        },
        {
            id: '2',
            did: '20-03-03',
            date: 'March 3, 2020 ',
            author: 'by Thomas Maestas, MA',
            cat3: 'Sociology Today',
            title: 'Moving your Quantum Dreams into Today, Part I: <br /> The Timing of Quantum Data and Privacy',
            post: blogpost2,
            cite: blogcite2
        } 
    ];

    for (i = 0; i < url.length; i++) {
        var cat = ` 
	  <div id="${url[i].did}" class="blogDiv"> 
	  <hr />  
	  <a href="#top"><button>Top</button></a>  
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
	  <div id="post">${url[i].post}	  </div>
      <div id="post">${url[i].cite}</div>
	  </div>`

        document.getElementById("paragraph-March20").innerHTML += cat;
    }

    var i;
    for (i = 0; i < url.length; i++) {
        var catMod = `
	  <div id="${url[i].did}_mod" class="blogDivMod"> 
	  <hr />  
	  <a href="#top-mod"><button>Top</button></a>   
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
      <div id="post">${url[i].post}</div>
      <div id="post">${url[i].cite}</div>
      

	  </div>`;

        document.getElementById("paragraph-March20-mod").innerHTML += catMod;
    }

    console.log('blogger-March-20');
    console.log(url);
    console.log(angular.toJson(url));
};

bloggerMarch20();
 
var bloggerApr = function () { 

  var blogpost23 = `<p class="firstparagraph">Fitbit and Wearables' Contribution to Health in Society is clear<sup>1</sup>, yet much of the credit is due to increased social, activity-based networks.  And, new features and benefits depend on relaxed data privacy. Given my <a href="#18-04-11">April 11th post</a> on the upcoming data privacy changes <i>in response to both Cambridge Analytica scandal <strong>and</strong> E.U.'s long-planned Data Privacy regulations.</i></p>
  
  <p>So, now is the worst time to clamp down on app permissions, <i>especially as Smart Watches begin to finally make in-roads</i> socially and hardware-wise.  Fitbit's acquirement of Pebble Watch exemplifies the  recent technological hard-ware leap-frogging.  All in all, we can't truly have a socially-connected society without flexible app permissions, so let's hope for fair and flexible data regulations ...  
  </p>
  
  <p class="side">(Side Note: Fitbit's Fashion Wearables' trade-offs betweeen the lighter-weight models versus functional touch-screen. This blogpost bows in reverence to the Apple Watch,<sup>1</sup> whose Series 3 hardly has competitors. I personally reommend the Fitbit Ionic: After three weeks, I'll say the touch accuracy is right on, the graphics are really good, and finally a completely customizable "dashboard" with that stats you want. It's draw-backs are minor, every once in a while the watch enters a "sleep" mode leading to a few-second delay for the screen to power up.)</p>
  <p class="   cite">1. <a href="https://techcrunch.com/2018/02/13/fitbit-buys-twine-health-in-bid-to-become-a-more-serious-health-care-tool/" target="_blank">https://techcrunch.com/2018/02/13/fitbit-buys-twine-health-in-bid-to-become-a-more-serious-health-care-tool/</a></p>
  
  <p class="cite"><a href="https://www.apple.com/apple-watch-series-3/" target="_blank">https://www.apple.com/apple-watch-series-3/</a></p> `;

  var blogpost22 = `   <p class="firstparagraph" >All over, the new <i>Terms &amp; Conditions in Fine(r) Print</i> are alerting social media users to new compliance to ... new laws? I wrote in my <a href="#18-04-16">April 16th post</a> about the upcoming E.U. General Data Privacy Regulations, to which most of social media is unabashedly following. The climate doesn't hurt, but how will our social-media experiences be watered down?  </p>
  <p>Let's see what Twitter is telling us:<?p><p class="quote">
  
  As part of our ongoing commitment to transparency, and in preparation for new data protection laws that take effect next month, we’re updating our Terms of Service and Privacy Policy to empower you to make the best decisions about the information that you share with us. <br />
  <br />These updates will take effect on May 25, 2018. By using our services on or after that date, you’ll be agreeing to these revisions. You should read the documents in full, but the key updates in our Privacy Policy include:
  <br /><br />
  
  
     More focus on the controls we offer you over your personal data;
     <br /><br />
     More focus on how Twitter shares your public data broadly and instantly, including through our developer tools;
     <br /><br />
     More transparency and control over how we share your data with business partners; and
     <br /><br />
     More clarity about how we share your data to prevent harm, comply with law, serve the public interest, and keep Twitter safe and welcoming for everyone.<sup>1</sup>
     </p>
   <p>This sounds like the least transparent of transparency documents!</p>   
  <p class="cite">1.<a href="https://help.twitter.com/en/rules-and-policies/update-privacy-policy" target="_blank">https://help.twitter.com/en/rules-and-policies/update-privacy-policy</a></p> 
  <p class="cite">2.<a href="https://www.bloomberg.com/news/articles/2018-04-16/facebook-s-zuckerberg-leans-in-to-meet-with-eu-digital-chief" target="_blank">https://www.bloomberg.com/news/articles/2018-04-16/facebook-s-zuckerberg-leans-in-to-meet-with-eu-digital-chief
  </a> </p> `;


  var blogpost21 = `<p class="firstparagraph">T-Mobile's potential acquirement of Sprint--for all of its monopoly overtones--may be a very good thing: We, as a society, are at the doorstep of 5G technology, which will fundamentally change every aspect of life. T-Mobile has always been the little engine that could, but has become a powerhouse since last summer with their 8 billion dollar purchase of low bandwidth, which is specifically <i>best for the ubiquity needed for the 5g Revolution</i><sup>2</sup>.  Although Sprint was always in last, 4th place among major carriers, their network infrastructure <i> and Bandwidth Rights</i> can help T-Mobile catch up with AT&amp;T and Verizon's 5G roll-outs.</p>  
  <img src="dist/img/bandwidth.jpg" class="zoom"/>
  <p class="cite">1. <a href="http://www.businessinsider.com/5g-speed-network-lte-2018-1/" target="_blank">http://www.businessinsider.com/5g-speed-network-lte-2018-1</a></p>
  <p class="cite">2. <a href="https://www.theverge.com/2017/4/13/15291496/tmobile-fcc-incentive-auction-results-8-billion-airwaves-lte" target="_blank">https://www.theverge.com/2017/4/13/15291496/tmobile-fcc-incentive-auction-results-8-billion-airwaves-lte</a></p>`;

  var blogpost20 = `<p class="firstparagraph">Sometimes the safest place to be is no place. So, the beauty of the distributed ledgers is that data is no longer in one place, and is rather in no place at all. Where is it? Spread across each node of the blockchain, and any one change in the data updates each node. Equally, the transaction is secured by a cryptographic hash, which is a unique private key.</p>
  <p>So, what better way to conceptualize it than read it, here's one of mine on the Ethereum network:</p>
  <p class="quote">
  status 	0x1 Transaction mined and execution succeed      <span class="green">  <--status   crypto-contract</span><br /><br />
  from 	0xca35b7d9TOMTOMef540ade6068dfe2f44e8fa733c         <span class="green"> <--this is my address.</span><br /><br />     
  to 	browser/Tomsfile.sol:tmContract.tmm() 0x692a70d2e424a56d2c6ctomtomd1a86395877b3a <br /><br />
  gas 	3000000 gas         <br /><br />
  transaction cost 	32060 gas         <span class="green"> <--pay more, faster transaction validation</span><br /><br /> 
  execution cost 	10788 gas          <span class="green"> <--contract validation isn't free ...</span><br /><br />
  hash 	0x4daeec5d9db8055c95c2e4eae074b9944e57b6465tomtom239fb601896525587d5fe<br /><br />
  input 	0x92277933<br /><br />
  decoded input 	{}<br /><br />
  decoded output 	{}<br /><br />
  logs 	[]<br /><br />
  value 	0 wei<br /><br />
  </p>
  <p>We've all seen the Cisco and IBM blockchain supply-chain ads, but how important can it be? In my <a href="#18-02-20">Feb. 20 post</a>, I mention the revolutionary, calibrated <i>freedom and privacy of data</i>, owned and stored with the <i>owner of the data</i>--what a concept! 
  </p>
  <p class="quote">
  Jewelry tracing is becoming increasingly important for business, as the younger customer is "far more skeptical, does more research," said Mark Hanna, chief marketing officer at Richline. "We feel this is an absolute must right now."<br /><br />
  TrustChain has just completed its first proof-of-concept test, in which gold went from a mine in South Dakota to a refinery in Utah, to a fabricator in Massachusetts that converted the gold into casting nuggets and grains. Those then went to a manufacturer in India that made engagement rings and set diamonds in them. The rings went to a distribution facility and then to Helzberg. UL, which helps companies ensure responsible purchases, monitored the transactions throughout the process. 
  <p>Some people call it the <i>Trust Chain</i>, but it's also very much a Transparency Chain, too!   </p>
  
  
  <p class="cite">3. <a href="https://www.bloomberg.com/amp/news/articles/2018-04-26/ibm-s-blockchain-tech-to-track-jewels-from-mine-to-retail-stores" target="_blank">https://www.bloomberg.com/amp/news/articles/2018-04-26/ibm-s-blockchain-tech-to-track-jewels-from-mine-to-retail-stores</a></p>`;

  var blogpost19 = `<p class="firstparagraph">E. Coli in the Lettuce supply <sup>1</sup> would make any rabbit apprehensive, but finding the source quickly? Downright disheartening.   However, the ever-evolving potential of blockchain technology presents its solution. The blockchain would provide the complete ledger of a vegetable's journey, across all phases and jurisdictions of the journey. Further, all information can be instantly available from any place (actually no location at all), rather than coordinating information from multiple data sources:
  </p>
  <p class="quote">The FDA has identified one farm as the source of the whole-head romaine lettuce that sickened several people at a correctional facility in Alaska. However, the agency has not determined where in the supply chain the contamination occurred. The agency is examining all possibilities, including that contamination may have occurred at any point along the growing, harvesting, packaging, and distribution chain before reaching the Alaska correctional facility where it was served.<sup>2</sup>
  </p> 
  <p>The beauty of blockchain technology is more than just the crypto-cash or even the new crypto-contracts cropping up in every sector. The distribution of knowledge to all parties, cryptographically sealed and logged from its origin. As it happens, old Watson from IBM fame is taking a crack at it:</p>  
  
  <p class="quote"> IBM has also been actively helping form a slew of blockchain-focused companies and industry initiatives around various supply chains. For example, it’s working with companies like retailer Walmart Inc. to trace food products, and earlier this year helped start an effort to track international cargo.<sup>3</sup>
  </p>
  <p>The Diamond industry has succeeded already in implementing the blockchain tech to guarantee against blood diamonds.<sup>4</sup> 
  <p class="cite">1. <a href="https://www.seattletimes.com/seattle-news/health/wa-state-health-officials-5-people-sick-from-romaine-lettuce-e-coli-outbreak/" target="_blank">https://www.seattletimes.com/seattle-news/health/wa-state-health-officials-5-people-sick-from-romaine-lettuce-e-coli-outbreak/</a></p>
  
  <p class="cite">2. <a href="https://www.cdc.gov/ecoli/2018/o157h7-04-18/index.html" target="_blank">https://www.cdc.gov/ecoli/2018/o157h7-04-18/index.html</a></p>
  
  <p class="cite">3. <a href="https://www.bloomberg.com/amp/news/articles/2018-04-26/ibm-s-blockchain-tech-to-track-jewels-from-mine-to-retail-stores" target="_blank">https://www.bloomberg.com/amp/news/articles/2018-04-26/ibm-s-blockchain-tech-to-track-jewels-from-mine-to-retail-stores</a></p> `;



  var blogpost18 = `<p class="firstparagraph">Westworld's second season premiered this week to cult-like fanfare.<sup>1</sup> Much of the HBO's storyline follows usual near-future AI potential, but brings up moral issues about what separates humankind from the rest of the animal kingdom. The premise of the show, and the current state of A.I., is instinctual learning and behavior of A.I.--i.e. imitating animal-behavior, but not human. </p>
  <p>I had the good luck of spending the Fall of 2016 in the Silicon Valley of A.I. technology, which is Montr&eacute;al, Qu&eacute;bec (For example, UdeM was awarded $100 million in research money from Facebook). Though I was there for a Sociology PhD, I still got to get involved like any technology groupie would...  The rock-star out there is Universit&eacute de Montr&eacute;al's Dr. Yoshua Bengio,<sup>3</sup> who explains the consciousness elements of A.I, and how those compare with our own representations:
  </p>
  <p class="quote">
  With supervised learning, humans provide the high-level concepts that the computer learns, which can be tedious and limits the ability of computers to discover things by themselves. Unsupervised learning, or what we call reinforcement learning, is when the learner is not merely passively observing the world, or how humans do things, but interacts with the environment and gets feedback. Humans are good at this. Combining unsupervised deep learning and reinforcement learning is one of the things that I am working on.<sup>2</sup>
  </p> 
  <p>So, here we see how Yoshua Bengio  explains that <i>building of meaning, symbolic representation as the key impediment</i>. To get around this, representations are <i>factorialized</i>, which is a clean way of saying multiple levels/dimensions of classification trees:</p>
  <p class="quote">For more than a decade, my research has focused on the notion of learning better representations, which is the heart of deep learning, in particular, representations that have a property called disentangled. Disentangled separates the different concepts and different explanations - we call them factors - that explain the data, that explain what the agent sees around it, and that explain how the agent patrols the world. Disentangled captures some of the causality that explains what we are seeing and what the computer is seeing.<sup>2</sup>
  </p>
  <p>
  I think it's exciting subject matter, and perhaps many would be less apprehensive if they thought of A.I. as achieving the behavior and  <i>predictable mind of pets</i>.  Pets and service pets can be a reassuring thought--even for A.I. pessimists like Elon Musk. Pets... Who doesn't imagine a shaggy Saint Bernard, with a first-aid kit and a flask arriving to the rescue on a snowy Alpine mountain slope? I can imagine a mechanical Saint Bernard, and with that in mind I would love to visit Westworld--albeit not without a white hat ... 
  <p class="cite">1. <a href="https://www.hbo.com/westworld" target="_blank" >https://www.hbo.com/westworld</a>
  </p>
  
  <p class="cite">2. <a href="http://www.iro.umontreal.ca/~bengioy/yoshua_en/index.html" target="_blank" >http://www.iro.umontreal.ca/~bengioy/yoshua_en/index.html</a>
  </p>
  
  <p class="cite">3. <a href="https://www.forbes.com/sites/peterhigh/2017/11/06/why-montreal-has-emerged-as-an-artificial-intelligence-powerhouse/#7435a66123bd" target="_blank" >https://www.forbes.com/sites/peterhigh/2017/11/06/why-montreal-has-emerged-as-an-artificial-intelligence-powerhouse/#7435a66123bd</a>
  </p>`;

  var blogpost17 = `<p class="firstparagraph">The<i> burgeoning Tech Job Market</i> has been one of my favorite blog topics. Two months ago, my <a href="#18-02-23">Feb. 23rd blogpost</a> and again on <a href="#18-03-08">March 8th</a> I mentioned 1.4 million new tech jobs, 20% growth year-over-year. And so, yours truly has decided to enter into this market after a post-graduate period of contracting and free-lance work. Let's face it, there's no substitute for the stability and the fixed schedule, plus the coffee-machine conversations are never short of endearing! </p>


  <p>So far on day 2 (Friday, the 21st was my ceremonial first day of "putting myself out there"). I've thought to start slow, while I gauge the territory, but Indeed and Linkdin are always safe bets to begin with. All in all, my general take is that this new job front, with hundreds of thousands of jobs month-over-month is for everyone. Most positions offer 9-12 weeeks training -- who ever said changing careers had to be shouldered on our own? HR is there! </p>
  <p>As I am a night-blogger, therefore my new position--where and whichever it will be, won't interfere with my blogging--after all, I have truly enjoyed watching my readership grow, month-by-month ... so, thank you, dear tech readers. As such, perhaps along the way I can lend a view from the job-front, and any new trends I observe.</p>
  <p>Examples aren't hard to find. I've noticed that since the last time I've checked out the job market, the pre-assessment tests are a bit more cognitive than previous years, which is good for strong test-takers--especially those that love to calculate the "arrival times of two separate trains leaving the same station at two different rates of speed ....". 50 questions in 15 minutes makes for a nice adrenaline rush--on par with a short run!  </p>`;

  var blogpost16 = `<p class="firstparagraph">Palladium, micrograms of Gold and Silver, and of course, the yttrium, the lanthanum, without forgetting good old terbium, then a dusting of neodymium, a dash of gadolinium and and finally a sprinkle of praseodymium. The ingredients for a typical iphone are not a luxury, but a <i>sine qua non</i> necessity, while the irreplaceable, increasingly difficult-to-mine metal supply <i>reminds us we do have a Mother to heed to</i>.<sup>1</sup>  
  </p>
  <p>Tech's relationship with the Earth is very symbiotic, in that Earth's problems are increasingly dependent on Tech's promise for scalable, innovative solutions beyond Humankind's reach. So, much like the clean-energy infrastructure will depend on fossil fuels to be built, tech hardware will depend on more difficult mining. But to what end? With growing national and corporate competitiveness on a more crowded, more connected globe, the race is on to achieve sustainability with both.   </p><p>
  But the story isn't about Tech here on Earth Day - the story is the Earth's, and why the Earth's Superman, Technology, will come down from the sky to save the day ...
  </p>
  <img class="zoom" src="./dist/img/metal.jpg" width="350px" />  <br />
  <p class="cite">2. <a href="http://www.bbc.com/future/story/20161017-your-old-phone-is-full-of-precious-metals" target="blank">http://www.bbc.com/future/story/20161017-your-old-phone-is-full-of-precious-metals</a>
  </p>`;

  var blogpost15 = `<p class="firstparagraph">Speed versus scalability. Security versus user-experience. Stability versus complexity. Ethereum, along with other blockchain developers, inhabit a virtual reality, a reality in which application uses and perils are not fully conceivable. Traditional app-developers, long habituated to the centralized server and popular usage--not to mention any regulation--to know the lines in the sand, which constrain a developer. The decentralized app (DAPP) developers have no such luxury, except to abide by a certain golden rule; a single rule that sustains crypto-tech's very existence: The Rule of Trust, without which blockchain tech has nothing to offer. 
  </p>
  
  <p>The very premise of designing distributed ledger platforms hinges on placing a platform's cryptographic, algorthmic design at the center, the link between every user. This trust, <i>built on mathematical proofs,</i> ensures peer-to-peer transactions in which  <i>neither party needs to trust the counter-party, nor any third-party.</i>We trust in the cryptography that our transaction will be fulfilled: In Math We Trust. </p> <br />
  `;

  var blogpost14 = ` 
  <p class="quote">“I think great artists and great engineers are similar, in that they both have a desire to express themselves. In fact some of the best people working on the original Mac were poets and musicians on the side.” <sup>1</sup><br /> – Steve Jobs</p><br />
  <p class="firstparagraph">Words, Sentences, Paragraphs. Variables, Functions, Modules.  With so many languages used for different purposes by different organizations, syntax is more than 4-space indents, variable name-spaces, and other formalities. Today, the variety of coding languages and scripts can appear more complicated than is/+*- the case: After all, all computer <i>languages boil down to the same primary tasks: for &amp; while loops, if-then statements, variable declarations, scope considerations, etc ...</i>     
  </p>
  <p>So what am I getting at? Coding innovation is an art form that surpasses science and knowledge. For example,   coding practices improve with clarity, simplicity, modularity, and so on... but is there an authoritative <i>school of thought</i> on this art? Well, in the Python world, all eyes turn to the Zen of Python, and some say other languages should emulate its philosophy, so let's hear it:</p>
  <p class="quote">
  <strong>The Zen of Python</strong><br /><br />
  
  Beautiful is better than ugly.<br /><br />
  
  Explicit is better than implicit.<br /> <br />
  
  Simple is better than complex.<br /> <br />
  
  Complex is better than complicated.<br /> <br />
  
  Flat is better than nested.<br /> <br />
  
  Sparse is better than dense.<br /> <br />
  
  Readability counts.<br /> <br />
  
  Special cases aren't special enough to break the rules.<br /><br />
  
  Although practicality beats purity.<br /><br />
  
  Errors should never pass silently.<br /><br />
  
  Unless explicitly silenced.<br /><br />
  
  In the face of ambiguity, refuse the temptation to guess.<br /><br />
  
  There should be one-- and preferably only one --obvious way to do it.<br /><br />
  
  Although that way may not be obvious at first unless you're Dutch.<br /><br />
  
  Now is better than never.<br />
  <br />
  Although never is often better than *right* now.<br /><br />
  
  If the implementation is hard to explain, it's a bad idea.<br /><br />
  
  If the implementation is easy to explain, it may be a good idea.<br /><br />
  
  Namespaces are one honking great idea -- let's do more of those! <sup>2</sup><br />
  
  <br />
  --Pythoneer Tim Peters
  </p>
  <p>I get it, good coding is more than intuitive art, it's walking the high road without regard for shortcuts. And I can see that <i>in uncharted waters, intuition has to be constrained by sound reason.</i> And who hasn't been burned by artful exploration, fancy coding, and far-fetched architectures? So where does the balance lie? Again we must turn to Steve Jobs on the "intersection of the humanities and science,": </p>
  <p class="quote">There are a lot of people innovating, and that's not the main distinction of my career. The reason Apple resonates with people is that there's a deep current of humanity in our innovation. I think great artists and great engineers are simi.ar in that they both have a desire to express themselves. In fact some of the best people working on the original Mac were poets and musicans on the side. In the seventies computers became a way for people to express their creativity. Great artists like Leonardo da Vinci and Michelangelo were also great art science. Michelangelo knew a lot about how to quarry stone, not just how to be a sculptor." <sup>1</sup><br />--Steve Jobs
  <p class="continue">I could not imagine a computing world were it not for the personalization that Apple introduced to the world, to us all. After all, I recall I was first transfixed in 1984, there I was a seven-year-old staring into the bright green letters   of my   Apple IIe ... </p>
  <p>So, in this era of the algorithmic wild-west and impending regulations on data privacy, inter-app permissions, coupled with data breaches every week, how might regulations avoid stifling innovation? Steve Jobs didn't have rules as much as Mark Zuckerberg didn't have any rules. So, it's a relief that Zuckerberg, with intimate knowledge of innovation, can set his teams to work with Congress going forward, especially as Facebook conforms to the E.U.'s <i>General Data Privacy Regulations (GDPR) implementation this May.</i> I for one hope that freedom for creative innovation will stay alive, even in the face of   growing bureaucracy in the web.   
  <p class="cite">1. <a href="https://books.google.com/books?id=cf_2PBPP-rEC&printsec=frontcover" target="blank">Isaacson, Walter. Steve jobs. JC Lattès, 2011.</a>
  </p>
  <p class="cite">2. <a href="https://www.python.org/dev/peps/pep-0020/" target="blank">https://www.python.org/dev/peps/pep-0020/</a>
  </p>`;

  var blogpost13 = `
  <p class="firstparagraph">Bitcoin's rise to prominence, the mystery of Satoshi Nakamoto's identity--i.e., author of <a href="dist/docs/bitcoinWhitePaper.pdf" target="_blank"> the original Bitcoin White Paper</a>, and the platform's reliability (outside of value fluctuations) all add to the mystique of the crypto-currency.  Yet,     new advances and types, i.e. "groupings" of blockchain technology are not necessarily "replacing" their predecessors, but rather filling different blockchain needs; Needs that include speed of transactions, truly public distributed ledgers, safety from forking and DDOS attacks.  Since 2008,   groups of competing platforms follow a timeline, but should not be thought of as a cyclical evolution but rather growing tree branches that form "groups".  Bitcoin, Litecoin are first generation, while Ethereum and Ripple are 2nd generation with crypto-contract capability, and finally Iota and Swirlds' Hedera Hashgraph represent   3rd generation <i>directed-acyclic-graphs (DAG), whose transaction speed actually  increases</i> with number of nodes.
  </p>
  <p>Each of these groupings shouldn't be seen as making the previous design obselete: They   serve different purposes. Bitcoin can never serve micro-transactions and the micro-economy because it can only handle 6 transactions per second (TPS), while Ethereum can handle 12 or so. However, micro-transaction industries require TPS in the hundreds of thousands! Only the 3rd gen  crypto-currency architecture   achieves TPS <i>ad infinitum</i> because it's scalability increases with size. The catch? DAG's are necessarily private entities, rather than the original two generations that are by nature public, yet can be privatized. 3rd generation DAGs are the opposite: They are by default private, and cannot truly be distributed without management. Further, <i>Swirlds Hashgraph has patented their source code, which contradicts many principles of blockchain technology</i>, beginning with core tenets  of the original crypto-currency white paper, published in October 2008. For history
  's sake, here's a quick view of the Bitcoin paper's abstract:</p>
  <p class="quote"><strong>Abstract.</strong> A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution. Digital signatures provide part of the solution, but the main benefits are lost if a trusted third party is still required to prevent double-spending. We propose a solution to the double-spending problem using a peer-to-peer network. The network timestamps transactions by hashing them into an ongoing chain of hash-based proof-of-work, forming a record that cannot be changed without redoing the proof-of-work, forming a record that cannot be changed without redoing the proof-of-work. The longest chain not only serves as proof of the sequence of events witnessed, but proof that it came from the largest pool of CPU power. As long as a majority of CPU power is controlled byi nodes that are not cooperating to attack the network, they'll generate the longest chain and outpace attackers. The network itself requires minimal structure. Messages are broadcast on a best effort basis, and nodes can leave and rejoin the network at will, accepting the longest proof-of-work chain as proof of what happened while they were gone.<sup>1</sup></p>
  
  <p>Irrespective of crypto-currency or crypto-contract, there seems to be a different kind of jump from 2nd generation to 3rd generation blockchain, rather than a progression. Research needed to fork into a different direction is because of the need for instantaneous, ordered transactions, which can never be provided by a blockchain design which "syncs" every 5 to 10 minutes. </p>
  <p> So, what is this 3rd generation design? Instead of a singular block encapsulated in linked cryptographic, historical ledger blocks, hashgraph uses a "tangle" of one-way (directed-acyclic) network connections. This means that speed increases with the number of nodes, overcoming the Bitcoin micro-transaction problem. <i>In sum, near-instantaneous updates for financial, betting, gaming and social-media data needs are solved by the  third-generation DAG</i>, while longer-term and truly distributed blockchain needs will always be the terrain of first and second generation blockchain technology. So, given that Swirlds' Hedera Hashgraph will be unveiling their platform next month,   blockchain critics and enthusiasts can and should read between the lines, er, I mean-- read  between the nodes ...</p><br />
  <p class="cite">0.  Topic addressed in <a href="#18-04-02">April 2nd blogpost</a></p>
  <p class="cite">1.<a href="https://bitcoin.org/bitcoin.pdf" target="_blank">https://bitcoin.org/bitcoin.pdf
  </a> </p>
  <p class="cite">2.<a href="http://www.the-blockchain.com/2018/03/20/hedera-plans-speedier-safer-more-democratic-blockchain-alternative-hashgraph/" target="_blank">http://www.the-blockchain.com/2018/03/20/hedera-plans-speedier-safer-more-democratic-blockchain-alternative-hashgraph/
  </a> </p>
  <p class="cite">3. <a href="https://s3.amazonaws.com/hedera-hashgraph/hh-whitepaper-v1.0-180313.pdf" target="_blank">https://s3.amazonaws.com/hedera-hashgraph/hh-whitepaper-v1.0-180313.pdf</a> </p>`;

  var blogpost12 = ` 
  <p class="firstparagraph">Dictionaries and libraries place the programmer into a once-in-a-lifetime opportunity to ride the lightning of the open-source community. Volunteers and corporate sponsors take the credit for the enormous effort making a  near limitless selection of functions, dictionaries and modules for languages such as  JavaScript and Python programming.<sup>1</sup> Today, a programmer can   put together JavaScript Components and Modules with less thought about syntactical logic, and more consideration for the problem at hand. 
  </p>  
  <p class="quote">Each significant piece of functionality in a program should be implemented in just one place in the source code. Where similar functions are carried out by distinct pieces of code, it is generally beneficial to combine them into one by abstracting out the varying parts.</br ></br >
  --Benjamin C. Pierce</p>
  <p>There are a few hundred thousand packages in the JavaScript <i> Node.js package ecosystem</i>, with billions of downloads per month. This unprecedented global collaboration, sharing open-source code into the community, means a more humanized, higher-level programming tasks-- a boon for the many coding-converts joining the tech economy. Such optimism means that problem-solving is fast and flexible, especially in the world of Stack Overflow--another phenomenon of global collaboration.
  </p>
  <p class="quote">[Abstraction] tries to factor out details from a common pattern so that programmers can work close to the level of human thought, leaving out details which matter in practice, but are immaterial to the problem being solved.</p>
  
  <p class="quote">The effective exploitation of the powers of <i>abstraction</i> must be regarded as one of the most vital activities of a   programmer ...<sup>2</sup> <br /><br />
  --Edsger W. Dijkstra</p>
  <p>These words mean programmers can do what they do best, as much as   what the client-user does best, too: think and problem-solve like a human, rather than a robot. </p>
  <p class="cite">1.<a href="https://nodesource.com/blog/npm-is-massive/" target="_blank">https://nodesource.com/blog/npm-is-massive/
  </a> </p>
  
  <p class="cite">2.<a href="http://www.cs.utexas.edu/~EWD/" target="_blank">http://www.cs.utexas.edu/~EWD/
  </a> </p> `;

  var blogpost11 = ` 
  <p class="firstparagraph">E.U.'s Parliament has   invited Zuckerberg to speak with member-states in Brussels to discuss both the upcoming <i>General Data Protection Regulation (GDPR)</i> new rules, along with the 2.7 Europeans, whose data also was sold to Cambridge Analytica.<sup>1</sup> Not exactly an invitation to the Ball...
  </p>
  <p class="quote">The Brussels-based commission said [European Commission Vice-President] Ansip would also meet with Google Chief Executive Officer Sundar Pichai, Twitter General Counsel Sean Edgett and Netflix General Counsel David Hyman in individual meetings to talk about data protection, online privacy, illegal content, disinformation campaigns, digital copyright and artificial intelligence.<sup>2</sup></p> 
  <p>These are more than talking points, as they are already codified within the GDPR and to implemented next month--compliance with European law will be a mad dash for developers.</p>
  <p> This predicament illuminates a smaller world, along with increasing complications of globalization, thanks to tech--for better or worse. Ultimately, Facebook, Google, and other tech giants will need to overhaul their permissioning code to abide by European law, but after last week's Congressional appearence, it's hard not to wonder if pan-industry data privacy adjustments will lead to a new <i>de facto regulation</i>, based on tech culture instead of politicians and legislators ...  
  </p>
  <p class="cite">1.<a href="https://www.washingtonexaminer.com/policy/technology/eu-steps-up-pressure-on-mark-zuckerberg-to-testify-about-facebook-privacy" target="_blank">https://www.washingtonexaminer.com/policy/technology/eu-steps-up-pressure-on-mark-zuckerberg-to-testify-about-facebook-privacy
  </a> </p> 
  <p class="cite">2.<a href="https://www.bloomberg.com/news/articles/2018-04-16/facebook-s-zuckerberg-leans-in-to-meet-with-eu-digital-chief" target="_blank">https://www.bloomberg.com/news/articles/2018-04-16/facebook-s-zuckerberg-leans-in-to-meet-with-eu-digital-chief
  </a> </p> `;


  var blogpost10 = `<p class="firstparagraph">This week, the Supreme Court   revisits its 1992 decision not requiring state sales taxes for online purchases.<sup>1</sup> Although big-box stores like Amazon, Walmart, etc. <i>do</i> pay state taxes among the 45 states requiring it, small- and medium-sized retailers do not need to collect sales taxes in any state where they do not have physical presence, also known as "nexus." But, beginning this Tuesday, the free ride may come to an  end; this includes small retailers that comprise half of Amazon's 3rd-party online sales.
  </p>
  <p class="quote">  
  
  A reversal could mean that all online retailers must collect sales tax everywhere. It's an issue that brick-and-mortar retailers insist will provide a level playing field with online competitors, and help to provide state and local governments with the tax revenue they deserve.<sup>2</sup></p>
  <p> Livelihoods hang in the balance, so whatever the gavel settles on, let's hope for the best! The Blockbuster-ization of so many brick-and-mortars seems to claim a new victim every month--recently Toys 'R Us  meeting its demise.<sup>3</sup> So, with as many that have disappeared, big and small-, its a curiosity if maybe Tuesday breathes life into the boarded store-fronts across America. I think others share my view that shopping is more than shiny packaging at the doorstep: it's much more the ceremony and gala in the store - a  real shared moment with strangers, acquaintances and loved ones that makes for better packaging, a package embellished with a story.   
  </p>
  <p class="cite">1.<a href="https://www.forbes.com/sites/janetwburns/2018/04/15/supreme-court-decision-could-bring-sales-tax-to-more-online-shopping/#2a0ea38f3daf" target="_blank">https://www.forbes.com/sites/janetwburns/2018/04/15/supreme-court-decision-could-bring-sales-tax-to-more-online-shopping/#2a0ea38f3daf
  </a> </p>
  <p class="cite">2.<a href="http://money.cnn.com/2018/04/15/technology/online-purchases-sales-taxes-supreme-court/index.html" target="_blank">http://money.cnn.com/2018/04/15/technology/online-purchases-sales-taxes-supreme-court/index.html
  </a> </p>
  <p class="cite">3.<a href="https://www.washingtonpost.com/news/business/wp/2018/04/13/this-billionaire-toy-executive-has-a-last-ditch-mission-to-save-toys-r-us-before-its-too-late/?noredirect=on&utm_term=.b3201ad77891" target="_blank">https://www.washingtonpost.com/news/business/wp/2018/04/13/this-billionaire-toy-executive-has-a-last-ditch-mission-to-save-toys-r-us-before-its-too-late/?noredirect=on&utm_term=.b3201ad77891
  </a> </p> `;

  var blogpost9 = `
  <p class="firstparagraph">For all the clamor about Bitcoin's carbon footprint, who doesn't love the sound of money?  And, for all the pitfalls of Iota and the ever-evolving Ethereum (and ever-present threat of forking), Bitcoin stands true among the crypto-currency platforms. Keeping it Simple,   the very limited, non-crypto-contract may just be Bitcoin's virtue. In a rocky world, <i>a plain, no-frills crypto-currency with stability</i> is incomparable to crypto-contract powers, that are not fully stable, like Ethereum and Iota.  </p>
  <p>So, it's living the dream, but must it be so cost-intensive? Maybe, Maybe not, but where does the future lie for all that hardware? Where does the browser fit into this? First, what's going on under the hood: Note this article is older, but accurate in explanation--except for references to Bitcoin's value! </p>  
  
  <p class="quote">New bitcoins are created roughly every 10 minutes in batches of 25 coins, with each coin worth around $730 at current rates. [A typical home-] computer ... is racing thousands of others to unlock and claim the next batch.</p>
  <p class="quote">
  Let’s start with what it’s not doing.  
  Your computer is not blasting through the cavernous depths of the internet in search of digital ore that can be fashioned into bitcoin bullion. There is no ore, and bitcoin mining doesn’t involve extracting or smelting anything. It’s called mining only because the people who do it are the ones who get new bitcoins, and because bitcoin is a finite resource liberated in small amounts over time, like gold, or anything else that is mined. (The size of each batch of coins drops by half roughly every four years, and around 2140, it will be cut to zero, capping the total number of bitcoins in circulation at 21 million.) But the analogy ends there.
  </p><p class="quote">
  What bitcoin miners actually do could be better described as competitive bookkeeping. Miners build and maintain a gigantic public ledger containing a record of every bitcoin transaction in history. Every time somebody wants to send bitcoins to somebody else, the transfer has to be validated by miners: They check the ledger to make sure the sender isn’t transferring money she doesn’t have. If the transfer checks out, miners add it to the ledger. Finally, to protect that ledger from getting hacked, miners seal it behind layers and layers of computational work—too much for a would-be fraudster to possibly complete.<sup>1</sup>
  </p>
  
  <p>So all of this hard work <i>can be distributed</i> across browsers, which improves its energy-expensive plight. I wouldn't recommend running the demo in the article link below as it may overheat your device--it had my fan running double-time. But the internals are using JavaScript code for the math. Here's a look under the hood, and it's nice to see the role of <i>JavaScript graphics library, called D3JS, (Data Driven Documents)</i> playing a central role. So, below you see the browser accepting the SHA256 Hash along with the Bitcoin Owner's Address, and the JavaScript in the browser passes off calculations to the C++ running the JavaScript V8 engine on your computer. </p>
  <img src="./dist/img/miningBlockchainD3.PNG" class="zoom" width="450px" />
  <p>And so, what does it mean to mine Bitcoins across browsers in a distributed fashion? It is similar to the same concept as Ethereum's direction (or at least idealized by its architect, Vitalik Buterin), in running the Ethereum Virtual Machine blockchain across all the browsers that download its GETH software. Nonetheless, here's a succinct explanation of the browser's role,again from Quartz: </p>
  <p class="quote">Mining’s ultimate purpose is to prevent people from double-spending bitcoins. But it also solves another problem. It distributes new bitcoins in a relatively fair way—only those people who dedicate some effort to making bitcoin work get to enjoy the coins as they are created.
  But because mining is a competitive enterprise, miners have come up with ways to gain an edge. One obvious way is by pooling resources.<br /><br />
  
  
  Your machine, right now, is actually working as part of a bitcoin mining collective that shares out the computational load. Your computer is not trying to solve the block, at least not immediately. It is chipping away at a cryptographic problem, using the input at the top of the screen and combining it with a nonce [run-time, generated random number calculated only once, then discarded], then taking the hash to try to find a solution. Solving that problem is a lot easier than solving the block itself, but doing so gets the pool closer to finding a winning nonce for the block. And the pool pays its members in bitcoins for every one of these easier problems they solve.</p>
  <p>In practice, distributed mining pays off quite well   for the owners of that address. My blogposts on <a href="# <a href="#18-02-28">February 26th  </a> and <a href="#18-02-28">Feb. 28th about blockchain sustainability</a> paint a less rosy picture of tying the currency value to the cost of energy, but multiple solutions and fixes exist to distribute the energy load to laptops on clean renewables, the mining cooperative way ... after all, who ever said money had to be so expensive? </a> 
  <p class="cite">1.<a href="https://qz.com/154877/by-reading-this-page-you-are-mining-bitcoins/" target="_blank">https://qz.com/154877/by-reading-this-page-you-are-mining-bitcoins/
  </a> (The article link is harmless, but wouldn't recommend running it if low on batteries--it doubled the fan speed)</p>  `;

  var blogpost8 = `  <p class="firstparagraph">  Data privacy regulation's challenge begins with five million apps between Apple and Android stores. Countless vulnerabilities, not to mention different standards and languages across the app world. <i>Like all Tech problems,</i>scalability requires Tech problem-solving--</i>in this case implying artificial intelligence.  About A.I., Zuckerberg remarks:</p>  
  <p class="quote"> There are some really nuanced questions, though, about how to regulate [data] which I think are extremely interesting intellectually. So the biggest one that I’ve been thinking about is this question of: To what extent should companies have a responsibility to use AI tools to kind of self-regulate content?<sup>1</sup>
  </p>
  <p>However such musing goes, the European Union's May 14th implementation takes a <i>direct stand against the concept of algorithm use with data</i>, which begs the A.I. question again. </p>
  <p class="quote">The European law gives individuals the right not to be subject to completely automated  decisions which significantly affect them. These decisions could include credit algorithms that use an individual’s data to decide whether a bank should grant him or her a loan.  
      Privacy International said the clause on automated decisions could allow consumers to challenge Facebook practices like political advertising, which can be sent to users based on algorithms, because the ads are meant to sway users’ votes.<sup>2</sup></p>
  <p>I think the E.U. data policy model is intelligent - who would have thought to re-humanize our personal data   by taking it away from algorithms, without our permission. I like that, after all, who likes to be unknowingly judged? Least of all by a robot!

  </p>
      <p class="cite">1.<a href="https://www.wired.com/story/mark-zuckerberg-talks-to-wired-about-facebooks-privacy-problem" target="_blank">https://www.wired.com/story/mark-zuckerberg-talks-to-wired-about-facebooks-privacy-problem
  </a></p>  	
  <p class="cite">3. <a href="https://www.nytimes.com/2018/04/08/technology/a-tough-task-for-facebook-european-type-privacy-for-all.html?ribbon-ad-idx=2&rref=technology&module=Ribbon&version=context&region=Header&action=click&contentCollection=Technology&pgtype=article" target="_blank">https://www.nytimes.com/2018/04/08/technology/a-tough-task-for-facebook-european-type-privacy-for-all.html 
  </a> </p>  `;

  var blogpost7 = `<p class="firstparagraph">Day two of Congressional hearings over Facebook's Data Privacy and Protections  were better articulated than the first day. Important dialogue surrounded primarily   two data privacy topics: First, financial transparency surrounding ads and political ads based on the <i>Honest Ads Act</i>, for which Zuckerberg pledged support<sup>1</sup>. 
  </p>
  <p>Second, and   more far-reaching, discussion of the <i>Browser Act</i> also was raised by several House members. While responding to the Act's sponsor, Marsha Blackburn of Tennessee, Zuckerberg expressed interest in working together. This bill is not well known, but aims to set prudent, consistent guidelines of privacy in the hands of the consumer. </p>
  <p class="quote"> [Blackburn's] new bill targets the full spectrum of the internet, including web giants like Amazon and Google. In Blackburn’s words, it moves the government “to a posture where we have one regulator, one set of rules [and] everybody knows who’s in charge,” she told Recode.<sup>3</sup></p>
  <p>So, however the power struggle goes, a <i>shared technology lexicon</i> clarifies that shades of meaning make enormous difference, depending on "what" an entity is--whether a technology is a Platform as a Service  versus media outlet or strictly merchant-based. Hopefully, <i>Tech will lead the way</i> without ceding authority in the process: </p>
  <p class="quote">
    But the Tennessee lawmaker’s effort hasn’t won any allies among privacy-conscious consumer groups, like the American Civil Liberties Union, which doubt Blackburn’s methods. And her bill has already prompted a whole new round of fierce lobbying by tech and telecom giants, which don’t see the need for any new regulation at all.
    </p> 
  <p class="quote">
  “I think that, in concept, the idea that there should be stronger privacy standards for edge providers and internet service providers is right,” said Neema Singh Guliani, the legislative counsel at the ACLU.</p>
  <p class="quote">
  But Blackburn, she added, should have gone about it differently. “The way to do it was not ... [through] gutting the FCC’s rules; the way to do it was actively working on a replacement.”<sup>3</sup>
  </p>
  <p>The bill is similar to the European data privacy model, <i>E.U. General Data Protection Regulation(GDPR)</i>, which serves as point of reference.<sup>2</sup> On May 14,   Europeans will   be implementing a pan-internet--edge and ISP--data protections, which include e-mail, Facebook and other apps, equally as for Comcast and Verizon, and industry-wide privacy defaults; Further, opt-in for privacy is more meaningful separate, and  not relegated to the main Terms and Conditions.<sup>3</sup></p>
  <p>Policy regulation in other industries--exemplified by medical <i>HIPAA</i>, financial <i>Fair Credit   Reporting Act</i>--reveals the noticeable absence of similar policy in Tech. Tech's regulation is however necessarily far more complex, involving at minimum trade-offs between app-to-app data portability and new boundaries for different sources and forms of data. Clearly, the browser-based, high-security HTTPS Encryption I mentioned in my <a href="#18-04-06">April 6 three-part series on Progressive Web Apps </a>will undoubtedly be used for quick, inexpensive data privacy compliance, <i>a real boon for JavaScript developers</i>--as if there wasn't enough work already!
  </p> 
  <p class="cite">2. <a href="https://www.eugdpr.org" target="_blank">https://www.eugdpr.org
  </a></p>  
  
          <p class="cite">3. <a href="https://www.recode.net/2017/5/24/15685870/new-republican-privacy-bill-tech-telecom-lobbying-fcc-congress" target="_blank">https://www.recode.net/2017/5/24/15685870/new-republican-privacy-bill-tech-telecom-lobbying-fcc-congress
          </a></p>  
      <p class="cite">3. <a href="https://www.nytimes.com/2018/04/08/technology/a-tough-task-for-facebook-european-type-privacy-for-all.html?ribbon-ad-idx=2&rref=technology&module=Ribbon&version=context&region=Header&action=click&contentCollection=Technology&pgtype=article" target="_blank">https://www.nytimes.com/2018/04/08/technology/a-tough-task-for-facebook-european-type-privacy-for-all.html 
      </a> </p>  
  <p class="cite">4. <a href="https://www.reuters.com/article/us-facebook-privacy-zuckerberg/zuckerberg-resists-effort-by-u-s-senators-to-commit-him-to-regulation-idUSKBN1HH1CU" target="_blank">https://www.reuters.com/article/us-facebook-privacy-zuckerberg/zuckerberg-resists-effort-by-u-s-senators-to-commit-him-to-regulation-idUSKBN1HH1CU
  </a></p>  `;

  var blogpost6 = ` 
  <p class="firstparagraph">Mark Zuckerberg daftly played word-tennis with   Senators in the first day of Congressional Hearings on Facebook Data Privacy issues. Although, in this case, <i>there were two, at times three, tennis balls at play!</i> What I mean is that "Data" and "Personal Data" vaccilated in meaning:  At times, Senators' questions referred to, 1.) personally identifiable data with intimate personal details, full name, location data (sensitive-data); 2.) Other times questions referred to <i>derivative data, i.e. data wrangled, refined, merged with different datasets</i> (composite-data); and,  3.) sometimes the questions meant the harmless, identity-encrypted "ad-data"(anonymized-data); but, usually, Zuckerberg responded to a question about one of these three meanings of "personal data", by responding with a non-abstract fourth: 4.) "Senator, the data, the 'likes' and pictures you share with Facebook, they are your property," Zuckerberg would answer. Well, thank goodness! </p>
  <p> My blogpost talks about the shades of meaning: We all know the light-hearted awkwardness when a conversation splits into two separate threads because each party unknowingly follows differing meanings from the same word, or idea.  Austin Powers would have more fun with it, but the Sociologists typically call it  a <i>Semantic Predicament</i>.<sup>1</sup></p> 
  <p>In fairness, Mark Zuckerberg volunteered as he himself was not subpoenaed, and therefore this preliminary, public discourse was critical for creating shared meaning and language about a complex topic. By volunteering to engage conversation with Senators, Zuckerberg interrupts the <i>game of telephone</i>; and, Senators engage with their constituents, and lo, America saves two years' of misunderstandings for clear data-protection action now. Bravo, Mark! Zuckerberg is perhaps one of the braver CEOs in American history--Now, he has earned his place right next to Andrew Carnegie--and very similar lives, too. And now, with defined boundaries, <i>Tech has a better roadmap</i> for ethical policy and sensible regulation. So let the data debates begin--but this time,with only one   ball at play! </p>
  
  <p class="quote"> 
  </p>
  
  <p class="cite">1. <a href="https://onlinelibrary.wiley.com/doi/full/10.1111/j.1467-9558.2008.00324.x" target="_blank">Abend, G. (2008). The meaning of ‘theory’. Sociological Theory, 26(2), 173-199.
  </a> <br /><a href="https://pdfs.semanticscholar.org/6df2/9e19cb02b684ee387192dfa4b1d284b88143.pdf" target="_blank">PDF  </a>
  </p>  
  <p class="cite">2. <a href="https://www.wired.com/story/mark-zuckerberg-talks-to-wired-about-facebooks-privacy-problem" target="_blank">https://www.wired.com/story/mark-zuckerberg-talks-to-wired-about-facebooks-privacy-problem
  </a>	</p> `;

  var blogpost5 = `<p class="firstparagraph">Psychometrics, along with today's biometrics and econometrics, form the 3 primary domains of statistical research. These three fields approach research differently. Psychometricians are less causally oriented, as their tool, "factor analysis"--<i>analyse factorielle</i>--reduces complex data to dimple, categorical forms in order to reconcile <i>quantitative data</i> with intuitive categories.<sup>1.</sup> And this research is great for expanding knowledge about society. But to what end? Who's to say, after all society is both the subject <i>and</i> object of this research. Social scientists are used to these mental gymnastics, yet are bound by a certain ethos of research: <strong>Anonymization, i.e. encrypting or removing personally identifiable information from datasets</strong>. This is the Social Scientists' <i>Oath</i>--a line of decency. </p>
<p>Tomorrow, Tuesday at noon, the world will tune in to hear Mark Zuckerberg's testimony before the U.S. Congress, all to hear about Facebook &amp; company's line of decency. However indecent any revelations may be, I'm not that entirely threatened by the revelations. Maybe I won't admit I'm   prone to Social Media influence, because I chart my course. Here's more from the esteemed Abbott: </p> 

<p class="quote">“We have ended up believing that social reality is determined in the main by certain general forces, and that these generalities are then specified by combinations of forces, and further limited by various aspects of “individuality,” which in this sense is best understood as idiosyncratic higher order interaction.”<sup>1</sup> </p>
<p>And so, while academic research focuses on the "general forces" to better understand how groups work together, the <strong>bad thing that Zuckerberg did</strong> is not following in the same spirit of generality.<sup>2</sup> They chose to collect and disseminate our "likes" as much as our locations, and ... wait for the ominous music ... the <i><strong>non-FB connected mobile contacts of the Facebook clients' personal cell-phones</strong></i>--flipping through someone's personal desk drawer is definitely pushing the rules of privacy. I addressed this issue in my <a href="#18-03-20">March 20th blog post</a> on Facebook's ethics versus the long-standing data-handling ethics from Academia. Regarding tomorrow's revelations, let's remember to give the guy benefit of the doubt, even if they were handily swindled, while they were swindling us.<sup>3</sup>
</p>

<p class="cite">1. <a href="http://journals.sagepub.com/doi/abs/10.1177/0049124198027002002" target="_blank">Abbott, A. 1998. “ The Causal Devolution.” Sociological Methods &amp; Research.

</a></p>
<p class="cite">2. <a href="https://www.nytimes.com/2018/04/08/us/facebook-users-data-harvested-cambridge-analytica.html" target="_blank">https://www.nytimes.com/2018/04/08/us/facebook-users-data-harvested-cambridge-analytica.html
</a></p>
<p class="cite">3. <a href="https://www.wired.com/story/did-cambridge-analytica-access-your-facebook-data/" target="_blank">https://www.wired.com/story/did-cambridge-analytica-access-your-facebook-data/
</a></p>`;

  var blogpost4 = ` 
  <p class="firstparagraph">Revolutions come and revolutions go, but the <i>2nd app revolution</i> is already underway, albeit quietly.<sup>1</sup> Most media sources refer to a "Native App - Progressive Web App Debate" with emphasis on what the native app can already do--<i>so if it's not broke, don't fix it</i>. However, implications change as the conversation turns to the Hyper Text Transfer Protocol (HTTP) Chrome V-8 JavaScript Engine<sup>2</sup>--you know, the web-app on <i>steroids</i>! </p>
  <p>So what kind of steroids you ask? Let us say that the power of the modern browser lies in the open-source JavaScript engine, first C++ variation <i>originally </i>introduced in 2008 by Google's Chromium project. Open-source<i>-who?</i> (close your eyes next paragraph for the jargon-wary!) </p>
  <p class="quote">A JavaScript engine is a program or an interpreter which executes JavaScript code. A JavaScript engine can be implemented as a standard interpreter, or just-in-time compiler that compiles JavaScript to bytecode in some form.<sup>2</sup></p>
  <p>In plain english, this means that the browser speaks directly to machine code, and this is a big deal. Happily 'roided, the browser now accomodates tasks that the "App" was invented for: <i>To direct service work</i>--image and data loading, caching, storage, offline data, icons, notifica       tions, etc. </p>
  <p>Now, through a "Manifest" file provided to the device from the browser, all of those same tasks are accomplished through a series of handshakes, and voil&aacute;: the mobile device doesn't see the difference between a native app and, well ... a <i>progressive app!</i></p>
  <p>They say History repeats itself. In our digital lifetime, we have seen <i>record sales</i> surpass digital downloads again (due to streaming); we have seen the originally-decentralized internet return, or at least begin the journey, back to decentralization! And now, we have the once-lowly browser return with a vengeance and strength to replace native apps, with encrypted security, instant loading, and <i>better</i> off-line caching! Do you have an app for that?</p>
  
  <p class="cite">1. <a href="https://www.forbes.com/sites/forbestechcouncil/2018/03/09/why-progressive-web-apps-will-replace-native-mobile-apps/#3f39b4fa2112" target="_blank">https://www.forbes.com/sites/forbestechcouncil/2018/03/09/why-progressive-web-apps-will-replace-native-mobile-apps/#3f39b4fa2112</a></p>
  
  <p class="cite">2. <a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e" target="_blank">https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e</a></p>`;

  var blogpost3 = `  <p class="firstparagraph">Today's Web Browsers, &agrave; la Firefox, Chrome, Opera, etc., are <i>unabashedly on steroids</i>. And, well they deserve to be--they were here first! More importantly, the browser's native language--JavaScript--has been granted full power of the entire web's backend, i.e. servers, data, todos. This means that the browser achieves instant loading, <i>fully progressive, device-responsive,</i> full <i>HTTPS</i>-encryption security, and coherent cross-browser compatibility. So that your favorite   apps look and interact the same between the array of browser choices. The Washington Post has been lauded for helping pioneer the technology. Most notably, their progressive web app loads in .9 of a second, while their native mobile app requires 2.9 seconds.<sup>3</sup> Not exactly a photo finish!</p>

  <p class="cite">1. <a href="https://www.techrepublic.com/article/how-progressive-web-apps-promise-to-upend-native-mobile-apps/" target="_blank">https://www.techrepublic.com/article/how-progressive-web-apps-promise-to-upend-native-mobile-apps/</a></p>

  <p class="cite">2. <a href="https://www.fastcompany.com/3063420/how-google-and-others-are-plotting-the-revenge-of-the-web-app"target="_blank">https://www.fastcompany.com/3063420/how-google-and-others-are-plotting-the-revenge-of-the-web-app</a></p>  

  <p class="cite">3. <a href="https://www.webbyawards.com/winners/2017/mobile-sites-apps/features-categories/technical-achievement/progressive-web-app-by-the-washington-post/" target="_blank">https://www.webbyawards.com/winners/2017/mobile-sites-apps/features-categories/technical-achievement/progressive-web-app-by-the-washington-post/</a></p>

  
  <p class="cite">4. <a href="https://www.gartner.com/smarterwithgartner/top-trends-in-the-gartner-hype-cycle-for-emerging-technologies-2017/" target="_blank">https://www.gartner.com/smarterwithgartner/top-trends-in-the-gartner-hype-cycle-for-emerging-technologies-2017/</a></p>`;

  var blogpost2 = `  <p  ><small>Note on app definitions in this post: Anything downloaded, whether iOS or Android is <i>native mobile app</i>, while progressive web apps are strictly behind the HTTPS protocol, i.e. browser-based.</small></p>
  <p class="firstparagraph">Mobile Devices are ever delightful, yet a pesky 2 to 3-second delay often accompanies our everyday tasks using device-native apps. For the impatient, this delay is not tolerable, and even the patient have their urgent moments (or have better things to do).    So, whether we're Verizon, T-Mobile, or pre-pay phones like Sprint's Boost, our experiences are the same: 3-second delays abound--much to our impatience!  </p>
  <p >Instant Loading </p>
  <p >In contrast, many of our daily web-based tasks are instant, i.e. a second or less. I feel instant loading should be <i>a right</i>, not an occasional convenience. what does this potential mean? This means an app's service workers can load nearly immediately and reliably. This means  non-choppy  animations, smooth scrolling, no matter the network connection you're using, no matter the device!  </p>
  <p  >Device-Neutral User Interface</p>
  
  <p  >After a long-day's work using desktop and mobile apps, why should an evening transition to tablet or laptop change our experience? Further, these variations differ between apps--of which there are alot:  2.2 million apps in the iTunes collection and 3 million Android apps, as of 2017<sup>2</sup>. of iOS apps &amp; 3 million. 	 My Fitbit experience is illustrative. First, I admit I have a terrible addiction to statistics, especially bio-statistics. And, Fitbit is my enabler.   However, my post-run tablet Fitbit app experience is different and more limited from the HTTPS-browser experience. App features, options, views, date-ranges vary between devices.  </p>
  
  <p  >Security </p>
  <p  >HTTPS-level <i>browser</i> security vs. iTunes &amp; Play Store native app security is akin to a vault door versus building door. I'm sorry, but there's a lot of difference! 
  <p  class="dailytech">In Progress  </p>
  
  <p class="cite">1. <a href="https://www.wired.com/2010/08/ff-webrip/" target="_blank">https://www.wired.com/2010/08/ff-webrip/</a>Re: The Web is Dead. Long Live the Internet</p>
  <p class="cite">2. <a href="http://www.businessofapps.com/data/app-statistics/" target="_blank">http://www.businessofapps.com/data/app-statistics/</a> </p>
  http://www.businessofapps.com/data/app-statistics/
  
  <p class="cite">2. <a href="https://www.techrepublic.com/article/how-progressive-web-apps-promise-to-upend-native-mobile-apps/" target="_blank">https://www.techrepublic.com/article/how-progressive-web-apps-promise-to-upend-native-mobile-apps/</a></p>
  
  
  
  <p class="cite">3. <a href="https://www.wired.com/2016/04/wait-web-isnt-really-dead-google-made-sure/" target="_blank">https://www.wired.com/2016/04/wait-web-isnt-really-dead-google-made-sure/</a></p>`;

  var blogpost1 = `<p class="firstparagraph">Next May 9th, the greatest known threat to traditional blockchain technology will be formally introduced, <i>along with its source code</i>, into our technological world. Hedera Hashgraph represents a blockchain alternative that caters to time-sensitive transactions, and order fairness. Currently, one transaction with Bitcoin takes about 12 minutes to validate. Ethereum is only a couple minutes, but in a world of micro-transactions and micro-second transactions, speed counts.</p><p>Next, Hedera's technology uses a consensus algorithm, which depends on  node neighbors' "voting" elections. This means that the design is impervious to "forking"--when a part of the blockchain splits and no long syncs with the main blockchain.  More importantly, Hedera's consensus design is   built on Asynchronous Byzantine Fault Tolerance (aBFT), so is then impervious to threats of <i>Distributed Denial of Service (DDS) attacks. </i></p>
<p>So, lightning speed for validating crypto-transactions. Guaranteed security from hard- or soft-forking of the blockchain, and DDS-like attacks. Fairness in transaction order. Come May 9th, we'll see just how Hedera's codebase and cryptocurrency will accomplish these benchmarks, and if so, Heraclitean river stops in time! If not, yet another cryptographic mirage!</p>
<p class="cite">1. <a href="https://www.hederahashgraph.com" target="_blank">	https://www.hederahashgraph.com</a> </p>
<p class="cite">1. <a href="https://medium.com/hashgraph/eat-pray-hashgraph-56b9613ed46f" target="_blank">https://medium.com/hashgraph/eat-pray-hashgraph-56b9613ed46f</a> </p>`;

  var url = [

    {
      id: '23',
      did: '18-04-30',
      date: 'April 30, 2018<br />',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Data Privacy and Permissions in the Twitter-verse<br />Part II: A Defense of Data Privacy Moderation <br />',
      post: blogpost23
    },
    {
      id: '22',
      did: '18-04-28',
      date: 'April 28-29, 2018<br />Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Data Privacy and Permissions in the Twitter-verse<br />Part I: Conforming to E.U.s Regulations <br />',
      post: blogpost22
    },
    {
      id: '21',
      did: '18-04-27',
      date: 'April 27, 2018<br /> ',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'This Time Baby Ill be Bullet-Proof: Innovation for a 5G World    <br /> --La Roux',
      post: blogpost21
    },
    {
      id: '20',
      did: '18-04-26',
      date: 'April 26, 2018<br />',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Romaine Lettuce and the Blockchain:<br /> Part II. Transparent Accuracy of Data',
      post: blogpost20
    },

    {
      id: '19',
      did: '18-04-25',
      date: 'April 25, 2018<br />',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Romaine Lettuce and the Blockchain:<br /> Part I. Instant Access to Data  ',
      post: blogpost19
    },
    {
      id: '18',
      did: '18-04-24',
      date: 'April 24, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'Westworld',
      post: blogpost18
    },
    {
      id: '17',
      did: '18-04-23',
      date: 'April 23, 2018<br /> ',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: ' The Bright New Horizon for Tech Jobs',
      post: blogpost17
    }, {
      id: '16',
      did: '18-04-21',
      date: 'April 21-22, 2018<br />Weekend  ',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: '  Earth needs Technology as much as Tech needs the Earth',
      post: blogpost16
    },
    {
      id: '15',
      did: '18-04-20',
      date: 'April 20, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'omputing Arts and Innovation, Part II:<br />Constraints of Distributed Ledger Technology',
      post: blogpost15
    },

    {
      id: '14',
      did: '18-04-19',
      date: 'April 19, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Energy Alternatives Signal the Power Shift to Come',
      post: blogpost14
    },
    {
      id: '13',
      did: '18-04-18',
      date: 'April 18, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Blockchain Types and Trade-offs',
      post: blogpost13
    },
    {
      id: '12',
      did: '18-04-17',
      date: 'April 17, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'Dictionaries and the Joys of Abstraction',
      post: blogpost12
    },
    {
      id: '11',
      did: '18-04-16',
      date: 'April 16, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Zuckerbergs "Invitation" to the European Union Kindly Declined:<br /> How the 28-nation European Unions Privacy Regulations affect Facebook, and eventually us',
      post: blogpost11
    },
    {
      id: '10',
      did: '18-04-14',
      date: 'April 14-15, 2018<br /> Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'Clash of the Brick &amp; Mortars against Online Stores',
      post: blogpost10
    },

    {
      id: '9',
      did: '18-04-13',
      date: 'April 13, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Bitcoins &amp; Browsers: A Glance at Bitcoin Distributed Mining  ',
      post: blogpost9
    },
    {
      id: '8',
      did: '18-04-12',
      date: 'April 12, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Algorithms and A.I.<br />Scalability &amp; Costs   of Data Privacy Policies',
      post: blogpost8
    },
    {
      id: '7',
      did: '18-04-11',
      date: 'April 11, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'When a Pickpocket is Pickpocketed:<br />Part III. The Path toward Sound Data Privacy Policy',
      post: blogpost7
    },
    {
      id: '6',
      did: '18-04-10',
      date: 'April 10, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'When a Pickpocket is Pickpocketed:<br />  Part II:  "Semantic Polymorphism", i.e., Double Talk about  Data ',
      post: blogpost6
    },
    {
      id: '5',
      did: '18-04-09',
      date: 'April 9, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'When a Pickpocket is Pickpocketed:<br />Part I: Facebook Data Generation and the Deepests Desires of Psychometricians, <i>Without Anonymization</i>   ',
      post: blogpost5
    },

    {
      id: '4',
      did: '"18-04-07',
      date: 'April 7-8, 2018<br />  Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'On the	Inevitable Demise of   Native Mobile Apps in favor of Progressive Web Apps<br />Part III: The Nuts &amp; Bolts of the App Replacement Process',
      post: blogpost4
    },
    {
      id: '3',
      did: '18-04-06',
      date: 'April 6, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'On the	Inevitable Demise of   Native Mobile Apps in favor of Progressive Web Apps<br />Part II: New Powers of the Modern   Browser',
      post: blogpost3
    },
    {
      id: '2',
      did: '18-04-05',
      date: 'April 5, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'On the	Inevitable Demise of   Native Mobile Apps in favor of Progressive Web Apps<br />Part I:   Mobile Devices Outwit and Outgrow the "Old-School" App',
      post: blogpost2
    },
    {
      id: '1',
      did: '18-04-02',
      date: 'April 2, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Heraclites Delight: Technology Change is the Constant, Human Behavior is Variable:<br />The April 2nd Announced Hedera Hashgraph X Launch Event  ',
      post: blogpost1
    }
  ];

  var i;
  for (i=0;i < url.length; i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    </div>`;
    document.getElementById("paragraph-apr").innerHTML += cat;
  }

  for (i=0;i<url.length;i++){ 
    var catMod = `
    <div id="${url[i].did}_mod" class="blogDivMod"> 
    <hr />  
    <a href="#top-mod"><button>Top</button></a>   
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}</div>
    </div>`;
     document.getElementById("paragraph-apr-mod").innerHTML += catMod;  
} 
console.log('blogger-apr');
 // console.log(angular.toJson(url)); 
};
bloggerApr();

var bloggerAug = function () {
  var blogpost22 = `<p class="firstparagraph">Quantum computing, now readily available for science-venturing public consumption: IBM's Quantum Community and Resources offer cloud access to quantum hardware:
  </p>
  <p class="quote">Check out our User Guides and interactive Demos to learn more about quantum principles. Or, dive right in to create and run algorithms on real quantum computing hardware, using the Quantum Composer and QISKit software developer kit.<sup>1</sup></p>
  <p>With an uncanny resemblence to 21st century chandeliers, the hardware itself is no light matter: Each successive layer cools down to    final chamber that runs at a cool .0017&deg; Kelvin--colder than space!
  </p>
  `;
  var blogcite22 = `<p class="cite">1. <a   href="https://quantumexperience.ng.bluemix.net/qx/experience"   target="_blank">https://quantumexperience.ng.bluemix.net/qx/experience
  </a>
  </p>`
 
  var blogpost21 = ` 
  <p class="quote">The Lamborghini Aventador SVJ already made a splash last month when it set a new Nürburgring Nordschleife record for production cars, running an incredible 6:44.97 lap time. Now, it sheds its camouflage, and yep, it looks exactly as crazy as we hoped. This might be one of the wildest Lamborghinis yet.<br /><br />
  Since we've tackled the SVJ's Nürburgring lap time, let's cover some other numbers. Its 6.5-liter V12 produces 770 horsepower, making this one of the most powerful naturally aspirated road cars of all time. Maximum torque is 531 lb-ft at 6750 rpm, while the power peak comes at 8500 rpm. Lamborghini claims a dry weight of 3362 lbs, which is 110 lbs lighter than an Aventador S coupe according to the factory. Acceleration is jaw-dropping, too, with 62 mph arriving in 2.8 seconds and 124 mph coming in 8.6. Top speed is 217 mph.<sup>1</sup></p>
  <img src="dist/img/aventador.jpg" width="350" class="zoom"  /><br />
  <p>Image credit: Road &amp; Track</p>
 
    `;
  var blogcite21 = `   <p class="cite">1. <a   href="https://www.roadandtrack.com/car-shows/monterey-car-week/a22822020/2019-lamborghini-aventador-svj-debut-specs-photos-price/"   target="_blank">https://www.roadandtrack.com/car-shows/monterey-car-week/a22822020/2019-lamborghini-aventador-svj-debut-specs-photos-price/
    </a></p> 
    `;
    var blogpost20 = `<p class="firstparagraph">Security patches that couldn't have arrived sooner ... </p><p class="quote">The Fortnite Installer was easily exploitable to hijack the request to download the full game.      The problem, as Google's security team discovered, was that the Fortnite Installer was very easily exploitable to hijack the request to download Fortnite from Epic and instead download anything when you tap the button to download the game. It's what's known as a "man-in-the-disk" attack: an app on your phone looks for requests to download something from the internet and intercepts that request to download something else instead, unbeknownst to the original downloading app.<br /><br />Here's where things get really bad. Because of the way Android's permissions model works, you won't have to accept installation of an app from "unknown sources" beyond the time you accepted that installation for Fortnite.<sup>1</sup> </p>
       
      `;
    var blogcite20 = `   <p class="cite">1. <a   href="https://www.androidcentral.com/epic-games-first-fortnite-installer-allowed-hackers-download-install-silently"   target="_blank"> 
    https://www.androidcentral.com/epic-games-first-fortnite-installer-allowed-hackers-download-install-silently </a></p> 
      `;
      var blogpost19 = `<p class="firstparagraph">Quantum leap from traditional electromagnetic on/off bits (eight bits per byte) is intuitive to the binary qubit, and yet the the superposition third option is less evident: Rather, our observation of the <i>superposition depends on the <strong>probability</i> that, when observed, the value will be affirmative or negative. Better explained by Wired ...</p>
  <p class="quote">
Computers do calculations using bits, too. After all, we want them to plug into our existing data and computers. But quantum bits, or qubits, have unique and powerful properties that allow a group of them to do much more than an equivalent number of conventional bits.

Qubits can be built in various ways, but they all represent digital 0s and 1s using the quantum properties of something that can be controlled electronically. Popular examples—at least among a very select slice of humanity—include superconducting circuits, or individual atoms levitated inside electromagnetic fields. The magic power of quantum computing is that this arrangement lets qubits do more than just flip between 0 and 1. Treat them right and they can flip into a mysterious extra mode called a superposition.<sup>1</sup>
</p> 
<p class="quote">For some problems that are very time consuming for conventional computers, this allows a quantum computer to find a solution in far fewer steps than a conventional computer would need. Grover’s algorithm, a famous quantum search algorithm, could find you in a phone book with 100 million names with just 10,000 operations. If a classical search algorithm just spooled through all the listings to find you, it would require 50 million operations, on average.<sup>1</sup> </p>
        
        `;
      var blogcite19 = ` <p class="cite">1.  <a   href="https://www.wired.com/story/wired-guide-to-quantum-computing/"   target="_blank">https://www.wired.com/story/wired-guide-to-quantum-computing/
      </a></p>     `;
      
  var blogpost18 = `<p class="firstparagraph">Quantum research has finally progressed beyond proof-of-concept to practical utility. First photon state transfer, and now solid state transfer of "entangled states" allowing for binary, instant data transfer. Beyond medical and enterprise use, quantum entanglement's incremental progress now raises a few eyebrows: 
    </p>
   <p class="quote">That’s because Google, IBM, and others have decided it’s time to invest heavily in the technology, which, in turn, has helped quantum computing earn a bullet point on the corporate strategy PowerPoint slides of big companies in areas such as finance, like JPMorgan, and aerospace, like Airbus. In 2017, venture investors plowed $241 million into startups working on quantum computing hardware or software worldwide, according to CB Insights. That’s triple the amount in the previous year. <sup>1</sup></p>
  
<p>   The cause for excitement accelerates at the pace of progress on the technical engineering side:
   </p>
<p class="quote">Physicists have experimentally demonstrated 18-qubit entanglement, which is the largest entangled state achieved so far with individual control of each qubit. As each qubit has two possible values, the 18 qubits can generate a total of 218 (or 262,144) combinations of output states. Since quantum information can be encoded in these states, the results have potential applications anywhere quantum information processing is used.
 .<sup>2</sup></p>
   <p>So, while there are algorithms, like <i>Shor's SHA-defeating algorithm, that have only existed in theory, can now be applied using capable computational power for the job.</i>
 </p> 
   `;
  var blogcite18 =
    `  <p class="cite">1.  <a   href="https://www.wired.com/story/wired-guide-to-quantum-computing/"   target="_blank">https://www.wired.com/story/wired-guide-to-quantum-computing/
   </a></p> 
   
   <p class="cite">2. <a   href="https://phys.org/news/2018-07-qubit-entanglement.html"   target="_blank">https://phys.org/news/2018-07-qubit-entanglement.html
   </a></p>  
   `;


  var blogpost17 = `<p class="firstparagraph">Silicon Valley's tide has rolled in and the ships are tucked away for the night. At dawn, Silicon Valley arises and inherits the kingdom, along with Seattle: And, so   become <i> the intractable data needs of all institutions, public or private, big and small--needs only the cloud can answer.</i> </p>
    <p>And why not? Cloud data storage offers security, direct service providers with big data jobs, Netflix and Linkedin's extensive real-time network analsyis using Kafka speeds up their ever-ready recommendations.  Reuters shows a glimpse of the Pentagon's (and other nations's) accelerating need to secure data as the intertwining networks of world data migrates to distributed, cloud storage. In this domain, public infrastructure, whether platform-as-a-service or servers, technology -- as usual -- must swoop to save the day. </p>

    <p class="quote">Consultants associated with the $927 billion Seattle juggernaut occupied top positions at the Pentagon ahead of the rollout of a massive cloud contract worth some $10 billion that Amazon looks poised to snag. Rivals complain the requirements were written to favor Bezos’s company. Either way, investors should be prepared for its government business to attract greater scrutiny.<sup>1</sup> 
    </p>
    <p>Surely controversy awaits any bid decision down here on earth, but all things that go up to the cloud need not come down.</p>
    `;
  var blogcite17 =
    `   <p class="cite">1. <a   href="https://www.reuters.com/article/uk-usa-pentagon-breakingviews/breakingviews-amazon-pentagon-ties-may-receive-greater-scrutiny-idUSKBN1L10AS"   target="_blank">https://www.reuters.com/article/uk-usa-pentagon-breakingviews/breakingviews-amazon-pentagon-ties-may-receive-greater-scrutiny-idUSKBN1L10AS
    </a></p> 
    `;

  var blogpost16 = `<p class="firstparagraph">Einstein's remark on quantum entanglement's 'spooky' characteristics holds for those caught off-guard, but sudden isn't spooky when sudden is expected. Tokyo's first photon to satellite back to earth with a button switch control almost leads to banality. Yet, transmitting data through a shared quantum state from the first party to second party appears intuitive, even if it is   other-worldly. Wired Magazine:  </p>
    <p class="quote">You may have heard that a qubit in superposition is both 0 and 1 at the same time. That’s not quite true and also not quite false—there’s just no equivalent in Homo sapiens’ humdrum classical reality. If you have a yearning to truly grok it, you must make a mathematical odyssey WIRED cannot equip you for. But in the simplified and dare we say perfect world of this explainer, the important thing to know is that the math of a superposition describes the probability of discovering either a 0 or 1 when a qubit is read out—an operation that crashes it out of a quantum superposition into classical reality.<sup>1</sup>  
    </p>
    <p>Yale researchers on the topic:</p>
    <p class="quote">
    In a quantum process known as teleportation the unknown state of a quantum bit can be relayed to a distant party using shared entanglement and classical information. Here we present experiments in a solid-state system based on superconducting quantum circuits demonstrating the teleportation of the state of a qubit at the macroscopic scale. In our experiments teleportation is realized deterministically with high efficiency and achieves a high rate of transferred qubit states. This constitutes a significant step towards the realization of repeaters for quantum communication at microwave frequencies and broadens the tool set for quantum information processing with superconducting circuits. </i><sup>2</sup></p>
    `;
  var blogcite16 = `<p class="cite">1. <a href="https://www.wired.com/story/wired-guide-to-quantum-computing/"   target="_blank">https://www.wired.com/story/wired-guide-to-quantum-computing/
    </a></p>
    <p class="cite">2. <a href="https://seas.yale.edu/news-events/news/quantum-technology-chip"   target="_blank">https://seas.yale.edu/news-events/news/quantum-technology-chip
    </a></p>`;

  var blogpost15 = `
    <p class="firstparagraph">Quantum communication of data offers instant data transfer, and impenatrability from 3rd parties ... Among the exciting on events on New Haven's public space Green Park, Yale researchers' quantum advances steal the headlines: </p>
    <p class="quote">The two essential requirements for a scalable quantum information processor are quantum interference (in which a photon – able to be in more than one place at a time – crosses its own path) and single-photon detectors. The chip that the researchers designed contains a nanophotonic waveguide, which can guide light into small spaces and to wherever is needed on the chip. It also has a directional coupler that can split a light beam into two identical beams, or conversely, combine two beams into one output.
    <br /><br />
    With this research, Schuck said the research team should eventually realize a programmable optical quantum processor that can run a quantum algorithm. The scalability of the nanofabrication routines for silicon chips will then allow them to solve problems difficult for classical computers.<sup>1</sup></p>
    <p>Besides the quantum characteristic of a third party's observation/interference, the state is broken and data transfer disappears--and, yet another state is but a button flip's switch away!</p> `;
  var blogcite15 = `
    </p>
    <p class="cite">1. <a href="https://arxiv.org/abs/1302.5621"   target="_blank">https://arxiv.org/abs/1302.5621
    </p>
    <p class="cite">1. <a href="https://www.nature.com/articles/ncomms10352"   target="_blank">https://www.nature.com/articles/ncomms10352
    </a>
    </p>
    
    `;
  var blogpost14 = `<p class="firstparagraph">      </p>
    <p class="quote">   </p> 
    `;
  var blogcite14 = ` 
    <p class="cite">1. <a href="https://www.zdnet.com/article/how-brand-new-science-will-manage-the-fourth-industrial-revolution/"   target="_blank">https://www.zdnet.com/article/how-brand-new-science-will-manage-the-fourth-industrial-revolution/
    </a>
    </p>
    <p class="cite">1. <a href="https://scitechdaily.com/physicists-teleport-information-in-a-solid-state-system/amp/"   target="_blank">https://scitechdaily.com/physicists-teleport-information-in-a-solid-state-system/amp/
    </a>
    </p>
    `;
  var blogpost13 = `<p class="firstparagraph"> 
</p><p class="quote"> 
<p >“Historically, magnetism and superconductivity were very disparate fields of physics,” Birge said. “The 1960s’ point of view was that if you were to bring a ferromagnet near a superconductor, you would kill the conductivity.<br /><br />
“It was found that you can put a ferromagnet near a superconductor; in fact, you can even make a ‘sandwich’—superconductor, ferromagnet, superconductor,” said Joseph Glick, a former doctorate student in Birge’s lab and the paper’s lead author. “Any sandwich of this type is called a Josephson junction, which is at the heart of everything we are doing.<sup>1</sup> </p> 
`;
  var blogcite13 = `  
<p class="cite">1. <a href="https://msutoday.msu.edu/news/2018/msu-physicists-solve-a-storied-problem/"   target="_blank">https://msutoday.msu.edu/news/2018/msu-physicists-solve-a-storied-problem/
</a>
</p>
`;
  var blogpost12 = `<p class="firstparagraph">      </p>
    <p class="quote"> <sup> </sup>
    </p><br />    <p > </p>`;
  var blogcite12 = `<p class="cite">  <a href="https://www.nature.com/articles/ncomms10352"   target="_blank">https://www.nature.com/articles/ncomms10352
    </a>
    </p>`;
  var blogpost11 = `<p class="firstparagraph">Marvels of anomaly detection extend from business and state security to software integriy -- why not extend the use to <i>social integrity traced by network interaction signatures ...</i> 
    </p>
    <p class="quote">While some attempts to detect social-media accounts of malicious actors rely on content or language filters that terrorists and disinformers have proved capable of confusing, Mr. Alvari’s algorithm looks for accounts that spread content further and faster than expected. Since this is the goal of terrorist recruiters and propagandists alike, the method could be on the front lines of algorithmic filtering across social networks. Humans still need to make the final determination, to avoid false positives. <sup>1</sup>
    </p>
    <p class="quote">While some attempts to detect social-media accounts of malicious actors rely on content or language filters that terrorists and disinformers have proved capable of confusing, Mr. Alvari’s algorithm looks for accounts that spread content further and fas                                                                                                         ter than expected. Since this is the goal of terrorist recruiters and propagandists alike, the method could be on the front lines of algorithmic filtering across social networks. Humans still need to make the final determination, to avoid false positives. <sup>1</sup>
    </p><br />  
    <p > </p>.
 `;
  var blogcite11 = ` 
    <p class="cite">1. <a href="https://www.wsj.com/articles/bots-vs-trolls-how-ai-could-clean-up-social-media-1533849001?mod=djemCIO_h"   target="_blank">https://www.wsj.com/articles/bots-vs-trolls-how-ai-could-clean-up-social-media-1533849001?mod=djemCIO_h
    </a>
    </p>`;

  var blogpost10 = `<p class="firstparagraph"> 
    </p>
    <p class="quote">Machines used to be serviced according to a plan, and late maintenance would mean a risk of production downtime. Today, process data from machines is used for predicting remaining service life. Especially critical parameters such as temperature, noise, and vibration are recorded to help determine the optimal operating state or even necessary maintenance times. This allows unnecessary wear to be avoided and possible faults and their causes to be detected early on. With the help of this monitoring, considerable optimization potential in terms of facility availability and effectiveness arises, bringing with it decisive advantages.

    The main element in this predictive maintenance (PM) is condition-based monitoring (CBM)

    Addressing Sensor Challenges and Demands for Future Servicing<sup>1</sup>
    </p><br />
    <img src="dist/img/mechDegrade.jpg" width="350px" class="zoom" /><br />
    <p > </p>`;
  var blogcite10 = ` 
    <p class="cite">1. <a href="https://www.sensorsmag.com/components/addressing-sensor-challenges-and-demands-for-future-servicing"   target="_blank">https://www.sensorsmag.com/components/addressing-sensor-challenges-and-demands-for-future-servicing
    </a>
    </p>`;

  var blogpost9 = `<p class="firstparagraph"> 
    </p>
    <p class="quote">. Arrays of SQUIDs (superconducting quantum interference devices) are currently the most common magnetometer, while the SERF (spin exchange relaxation-free) magnetometer is being investigated for future machines.<sup>1</sup>
    </p><br /> 
    <p > </p>.
 `;
  var blogcite9 = `  
    <p class="cite">1. <a href="https://www.xlstat.com/en/solutions/features/classification-and-regression-trees"   target="_blank">https://www.xlstat.com/en/solutions/features/classification-and-regression-trees
    </a>
    </p>`;

  var blogpost8 = `<p class="firstparagraph">Classification and Regression (Decision) Trees are not just accurate, multipurpose and foundational to predictive machine learning algorithms (e.g. random forests, bayesian trees, bagging), but the trees' final product reveals the different rationale for the output. Printed onto a sheet   of paper, both statistical practitioner and the domain professional intuitively and heuristically understand practical use for an analysis. This July 2017 Cancer study exemplifies the utility of healthcare-based algorithms of analysis ... 
    </p>
    <p class="quote">The aim of this study was to develop and validate a clinical predictive model for 1-year mortality among patients with colon cancer who survive for at least 30 days after surgery.<br /><br />Random forest, genetic algorithms and classification and regression trees were combined in order to identify the variables and partition points that optimally classify patients by risk of mortality. The resulting decision tree was categorized into four risk categories. Split-sample and bootstrap validation were performed.<sup>1</sup>
    </p><br />
    <img src="dist/img/irisCART.jpg" width="350px" class="zoom" /><br />
    <p >And, now that sound methodology meets an increasingly user-friendly Machine Learning software toolset for wider practical applications, beginning firstly within healthcare technologies <i>and that second opinion!</i></p>.
 `;
  var blogcite8 = `Image credits: https://www.xlstat.com/en/solutions/features/classification-and-regression-trees
    <p class="cite">1. <a href="https://www.dovepress.com/combining-statistical-techniques-to-predict-postsurgical-risk-of-1-yea-peer-reviewed-article-CLEP#"   target="_blank">https://www.dovepress.com/combining-statistical-techniques-to-predict-postsurgical-risk-of-1-yea-peer-reviewed-article-CLEP#
    </a>
    </p>`;

  var blogpost7 = `<p class="firstparagraph">Predictive analytics  has slowly progressed in sophistication over the past 45 years, and the current nexus with powerful machine-learning tools changes the health game: </p>
    <p class="quote"> A report by ABI Research June 2018 report highlighted a significant rise in patient monitoring devices, including AI for home-based preventative healthcare and predictive analytics, which could save hospitals around $52bn by 2021.<br /><br />

    Accenture’s Digital Health Technology Vision 2018 report also claims that 85% of health executives in the US believe that every human will be directly impacted on a daily basis by an AI-based decision within the next three years.<br /><br />
    
    Utilising big data generated by clinical information and research can reveal clusters and patterns which can benefit all aspects of healthcare, leading patient care to become increasingly strategic.<sup>1</sup>  </p>
    <p>It should be noted that the long road paved by statistical theory has revolutionized the above-mentioned fields as much as it now powers the practical use of analytics:</p>
    <p class="quote">Originating in the statistical (e.g., Holland
      1986; Rosenbaum 2002; Rubin 2005, 2006) and
      econometrics literature (see Heckman 2000,
      2001, 2005; Heckman & Vytlacil 2007a,b;
      Manski 1995, 2007), the counterfactual,
      Rubin, or potential outcomes model of causality
      has, over the past three decades, become
      the standard conceptual tool to unify the notion
      of causality, to understand the identification
      problem at the heart of causal inference,
      and to assess the utility of alternative estimation
      techniques (Sobel 2005).<sup>2</sup></p>
      <p>So, the take-away here is that A.I. and <i>Machine-Learning Research could have never progressed so quickly if not for the settled scientic paradigm over sound analysis that rules out spurious variables, while properly weighting the conditions that matter.</i> Furthermore, the mistakes in algorithm design were made in the 1970's, 1980's, and 1990's--misleading mistakes--have been swept aside, providing much-tested and refined strategies. The medical field's case exemplifies this evolution:</p>
    <p class="quote">Randomized controlled trials are considered the gold
    standard for assessing the efficacy of medications, medical
    procedures, or clinical strategies. Nevertheless, particularly
    for research on the prevention of chronic disease, randomized
    trials are often infeasible because of their size, time,
    and budget requirements, as well as questionable generalizability
    or ethical constraints.<br /><br />
    On the other hand, nonexperimental studies of interventions
    have frequently been criticized because of their potential
    for selection bias. This concern reached a crescendo
    with the disparity in estimated effects of hormone replacement
    therapy from randomized trials and nonexperimental
    studies. This imbroglio highlighted the need to develop
    and apply improved methods to reduce bias in nonexperimental
    studies in which selection bias or confounding is
    likely to occur .<sup>3</sup></p>
    <p>So, nowadays we don't ask for a second opinion when we can ask for a trillion opinions narrowed down to one heck of a second opinion!</p>`;
  var blogcite7 = `
    <p class="cite">1. <a href="https://www.healthcareglobal.com/technology/ai-seen-less-threat-and-welcomed-health-professionals-research-reveals"   target="_blank">https://www.healthcareglobal.com/technology/ai-seen-less-threat-and-welcomed-health-professionals-research-reveals
    </a>
    </p>
    <p class="cite">2. <a href="https://www.annualreviews.org/doi/abs/10.1146/annurev.soc.012809.102702"   target="_blank">https://www.annualreviews.org/doi/abs/10.1146/annurev.soc.012809.102702
    </a>
    </p>    <p class="cite">3. <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1448214/"   target="_blank">https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1448214/
    </a>
    </p>`;

  var blogpost6 = `<p class="quote">  <i>[Intel's]  i9-8950HK processor is the first mobile Intel processor with six cores and 12 threads. It comes fully unlocked. It has the new Intel thermal Velocity Boost, which automatically increases clock frequency up to 200 MHz if the processor temperature is low enough and there's enough turbo power, giving a turbo frequency of up to 4.8 GHz.</i></p>
    <p class="quote" The i9-8950HK processor is the first mobile Intel processor with six cores and 12 threads. It comes fully unlocked. It has the new Intel thermal Velocity Boost, which automatically increases clock frequency up to 200 MHz if the processor temperature is low enough and there's enough turbo power, giving a turbo frequency of up to 4.8 GHz.</i>
    </p>
    <p class="firstparagraph"> Needs shape our inventions and our inventions shape our needs: With the brand new set of mobile computing requirements serve up utility for the i9.  Intel's advances pale in comparison, however, to GPU and newer computing trends. This theme arises time after time in my posts, but mathematics will rewrite the rules of performance . . .</p>
    <p class="quote">The 8th Gen processors incorporate Intel Octane memory, a smart and adaptable system accelerator for desktop and mobile platforms using SATA-based storage technology.<br /><br />

    Intel also has released a new Data Drive Acceleration feature that boosts a large secondary HDD hard drive.
    
    Together, Intel Octane and Data Drive Acceleration provide up to 4.7x the game loading speed and 1.7x faster media loading, Intel said.
     </p>
    <p class="quote">
    The actual task of processing AI is a very different process from standard computing or GPU processing, hence the perceived need for specialized chips. A x86 CPU can do AI, but it does a task in 12 steps when only three are required; a GPU in some cases can also be overkill.
    <br /><br />
    Generally, scientific computation is done in a deterministic fashion. You want to know two plus three equals five and calculate it to all of its decimal places—x86 and GPU do that just fine. But the nature of AI is to say 2.5 + 3.5 is observed to be six almost all of the time without actually running the calculation. What matters with artificial intelligence today is the pattern found in the data, not the deterministic calculation. 
    <br /><br />
The result of this predictive problem solving is that AI calculations can be done with single precision calculations. So while CPUs and GPUs can both do it very well, they are in fact overkill for the task. A single-precision chip can do the work and do it in a much smaller, lower power footprint.</p>

<p class="quote">Intel "can deliver on CPU functionality, which has dropped in performance, but still lags on GPUs and modems," noted Rob Enderle, principal analyst at the Enderle Group.

"Much of the performance these days is gated by the modem and the GPU, not the CPU, which just isn't as importance as it once was," he told TechNewsWorld.

Developers may not benefit much from the new processors, Enderle said, because "with IDF shut down, Intel's developer efforts are largely moot."
</p> `;

  var blogcite6 = ` 
    <p class="cite">1. <a href="https://www.technewsworld.com/story/85252.html"   target="_blank">https://www.technewsworld.com/story/85252.html
    </a>
    </p>
    
    <p class="cite">2. <a href="https://www.cnet.com/news/intel-core-i9-9900k-may-boost-to-5ghz/"   target="_blank">https://www.cnet.com/news/intel-core-i9-9900k-may-boost-to-5ghz/
    </a>
    </p>
     `;
  var blogpost5 = `<p class="firstparagraph">Batteries optimized by machine learning is a feature in the latest version of Android OS, Pie. Some may roll theirs, but the only of desserts that share nameship with the great constant, pi. <i>Mystical 3-1-4 also features A.I.-empowered Textual Analysis, which opens to multiple new possibilities:</i></p>
    <p class="quote">The other new machine learning-powered feature is the smart text selection tool that recognizes the meaning of the text you selected and then allows you to suggest relevant actions like opening Google Maps or bringing up the share dialog for an address.<sup>1</sup></p>
    <p>Further, Android Pie's <i>Digital Wellness</i> features offer all the trending self-obedience features--not the least of which FitBit's guilt-inducing, and highly effective,<strong>walk prompts--already the bots are running my life and I obey!</p></strong>`;
  var blogcite5 = ` 
    <p class="cite">1. <a href="https://techcrunch.com/2018/08/06/say-hello-to-android-9-pie/"   target="_blank">https://techcrunch.com/2018/08/06/say-hello-to-android-9-pie/
    </a>
    </p>
     `;
  var blogpost4 = `<p class="quote"><i>Bone is constantly turning over through a process in which cells called osteoclasts dig tunnels through bone, and then cells called osteoblasts re-pave those tunnels with new bone. Econs acknowledges that it sounds like an inefficient system, but it has to work this way because you obviously need to be able to use your bones while those repairs are taking place.</i><br /><br />
     --Michael Econ, physician and member of the American Society for Bone and Mineral Research   
     <p class="firstparagraph"><i>Bone loss in space can reach 5 to 10% over the course of a year, however the sure cure is Digital Responsibility, the trending fad of 2018, spans from the upcoming Android Pie's in-device digital behavioral tools across the spectrum to Fitbit, Youtube, and others' timed get-up-and-walk push notifications.       </p>  `;
  var blogcite4 = `<p class="cite">1. <a href="https://tonic.vice.com/en_us/article/ne5zg8/this-is-the-effect-working-out-has-on-your-bones"   target="_blank">https://tonic.vice.com/en_us/article/ne5zg8/this-is-the-effect-working-out-has-on-your-bones
     </a>
     </p> 
     `;
  var blogpost3 = `<p class="quote"><i>Responsive experience with real-time inferencing. There are many tasks where speed matters. This includes interactive speech, visual search, and video recommendations. As AI models increase in accuracy and complexity, traditional CPUs can’t keep up, and the Tesla P4 GPUs can cut latency by an order of magnitude.<br /><br />
  Video decoding. The Tesla P4 has a dedicated hardware-accelerated decode engine that works in parallel with the GPU, enabling it to transcode and infer up to 35 HD video streams in real time. The integration of deep learning into video pipelines lets organizations offer smarter video services.<br /><br />
  The inferencing engine that the Tesla P4 uses is based on Nvidia’s Pascal architecture and is designed to increase the performance of servers running deep learning workloads. Google didn’t give a date for general availability other than saying it’s “coming soon” to its public cloud.</i></p>  
  <p class="firstparagraph">Toys, if they are offered as presents remain unconditional gifts, and yet the devotion they procure make for a reciprocal gift: Google's Developer Tools and little to no cost serve the same purpose as Microsoft's free provisions of Integrated Develepment Environments, i.e. VS Code and recent purchase of GitHub. The New Data Economy, applies as much to the developers' field as it does to consumers'. </p>  `;
  var blogcite3 = `<p class="cite">1. <a href="https://www.cio.com/article/3293424/artificial-intelligence/more-artificial-intelligence-options-coming-to-google-cloud.html"   target="_blank">https://www.cio.com/article/3293424/artificial-intelligence/more-artificial-intelligence-options-coming-to-google-cloud.html
  </a>
  </p> 
  `;
  var blogpost2 = `<p class="quote"><i>Google announced it is making Nvidia's Tesla P4 GPU available as a cloud service, enabling more businesses to get started with AI projects quicklyi><sup>1</sup></p>
  <p class="firstparagraph">API Services &agrave; la Google Cloud have become a new Hallmark--available for 12-month free trial--of <i>Google's ambitious  kit: Cloud IoT (Internet of Things) API, Cloud Genomics API, Cloud Machine Learning Engine API, among dozens of others.</i> Rivers of Kubernetes Data,Tensor-Processing-Unit Automotons for Oompah-Loompahs, and the ever-lasting flavor of chewing gum in the name of publicly available data for your tasting pleasure!   </p>`;
  var blogcite2 = `<p class="cite">1. <a href="https://www.cio.com/article/3293424/artificial-intelligence/more-artificial-intelligence-options-coming-to-google-cloud.html"   target="_blank">https://www.cio.com/article/3293424/artificial-intelligence/more-artificial-intelligence-options-coming-to-google-cloud.html
  </a>
  </p>`;


  var blogpost1 = `<p class="quote"><i>In July, Blackrock — the world’s largest exchange-traded fund (ETF) — announced that it has launched a working group to assess the potential of investing in Bitcoin.  <br /><br />
    Blackrock’s move could be described as a preemptive strike to avoid missing the crypto bus. Goldman Sachs is making headway with cryptocurrency involvement and Blackrock is following suit.</i><sup>1</sup></p>
    <p class="firstparagraph">
    <p class="quote">Fintech broke onto the scene as a disruptive force following the 2008 crisis, but the industry's influence on the broader financial services system is changing.
  
    The fintech industry no longer stands clearly apart from financial services proper, and is increasingly growing embedded in mainstream finance. We're now seeing the initial stages of this transformation.<br /><br />
    
    For instance, funding is growing more internationally distributed, and startups are making necessary adjustments to prove sustainability and secure a seat at the table. Most fintech segments in the ascendant a year ago have continued to rise and grow more valuable to the broader financial system. Meanwhile, several fintech categories have had to make adjustments to stay on top. New subsegments are also appearing on the scene — such as digital identity verification fintechs — as new opportunities for innovation are discovered. 
    <br /><br /> ... 
    The rising influence of fintechs is having a dramatic effect on incumbents, from banks to insurers to wealth managers, pushing them to respond proactively to stay relevant. Incumbents are reacting to changes wrought by fintechs on three key fronts: the front end, the back end, and in their core business operations. As such, incumbents and fintechs are converging on a digital middle ground.
  <br /><br />
    As this happens, the fintech industry is on the cusp of becoming an integral component of the broader financial services ecosystem. But it will likely first have to go through a complete credit cycle, and survive an economic downturn like the one that set the stage for its arrival in 2008, for this to happen.<sup>2</sup>
    </p>
    `;
  var blogcite1 = `
    <p class="cite">1. <a href="https://cointelegraph.com/news/institutional-investors-and-fintech-will-wall-street-go-head-first-into-crypto"   target="_blank">https://cointelegraph.com/news/institutional-investors-and-fintech-will-wall-street-go-head-first-into-crypto
    </a>
    </p> 
    <p class="cite">2. <a href="https://www.businessinsider.com/8-3-2018-fintech-ecosystem-financial-technology-research-and-business-opportunities-2018-8?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+clusterstock+%28ClusterStock%29&r=US&IR=T&IR=T"   target="_blank">https://www.businessinsider.com/8-3-2018-fintech-ecosystem-financial-technology-research-and-business-opportunities-2018-8 
  </a>
  </p> 
    `;

  var url = [  
    {
      id: '22',
      did: '08-25-18',
      date: 'August 25-26, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The Quantum Chip for All',
      post: blogpost22,
      blogcite: blogcite22
    }, 
    {
      id: '21',
      did: '08-24-18',
      date: 'August 24, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Air, More Air, and the Tech of Fast Air',
      post: blogpost21,
      blogcite: blogcite21
    }, 
    {
    id: '20',
    did: '08-23-18',
    date: 'August 23, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Web Dev Affairs',
    title: 'The Best Offense is a Good Defense',
    post: blogpost20,
    blogcite: blogcite20
  }, 
   {
    id: '19',
    did: '08-22-18',
    date: 'August 22, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Quantum Data',
    title: 'Quantum Data V:<br />The Bits and Bolts of Zero, One, and the Superposed Third State',
    post: blogpost19,
    blogcite: blogcite19
  }, 
    {
      id: '18',
      did: '08-21-18',
      date: 'August 21, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Quantum Data IV:<br />The Business of Quantum Data  ',
      post: blogpost18,
      blogcite: blogcite18
    },

    {
      id: '17',
      did: '08-20-18',
      date: 'August 20, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Data that Go Up but Do not Go Down',
      post: blogpost17,
      blogcite: blogcite17
    },
    {
      id: '16',
      did: '08-18-18',
      date: 'August 18-19, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Quantum Data III: Sudden Data ',
      post: blogpost16,
      blogcite: blogcite16
    },

    {
      id: '15',
      did: '08-17-18',
      date: 'August 17, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Quantum Data, Part II:<br /> Quantum State-Entanglement across a Solid State',
      post: blogpost15,
      blogcite: blogcite15
    },
    {
      id: '14',
      did: '08-16-18',
      date: 'August 16, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: ' ',
      post: blogpost14,
      blogcite: blogcite14
    },

    {
      id: '13',
      did: '08-15-18',
      date: 'August 15, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Quantum Data',
      post: blogpost13,
      blogcite: blogcite13
    },
    {
      id: '12',
      did: '08-14-18',
      date: 'August 14, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: '',
      post: blogpost12,
      blogcite: blogcite12
    },

    {
      id: '11',
      did: '08-12-18',
      date: 'August 12-13, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: ' ',
      post: blogpost11,
      blogcite: blogcite11
    },

    {
      id: '10',
      did: '08-11-18',
      date: 'August 11, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'The Good Doctor, Part IV: Good Doctor, Heal Thyself!',
      post: blogpost10,
      blogcite: blogcite10
    },
    {
      id: '9',
      did: '08-10-18',
      date: 'August 10, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'The Good Doctor, Part III: Magneto Encephelop',
      post: blogpost9,
      blogcite: blogcite9
    },
    {
      id: '8',
      did: '08-09-18',
      date: 'August 9, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The Good Doctor, Part II:  <br />About that Second Opinion . . . <br />',
      post: blogpost8,
      blogcite: blogcite8
    },
    {
      id: '7',
      did: '08-08-18',
      date: 'August 8, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'The Good Doctor, Part I: <br /> How A.I.-Driven Predictive Analytics Rewrites Healthcare',
      post: blogpost7,
      blogcite: blogcite7
    },
    {
      id: '6',
      did: '08-07-18',
      date: 'August 7, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'New Math &amp; the Speed of Antiquation, a Case Study:<br />Mobile 8th Generation Intel',
      post: blogpost6,
      blogcite: blogcite6
    },
    {
      id: '5',
      did: '08-06-18',
      date: 'August 6, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Android Pi(e) Day',
      post: blogpost5,
      blogcite: blogcite5
    },
    {
      id: '4',
      did: '08-04-18',
      date: 'August 4-5, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The New Age of Digital Responsibility',
      post: blogpost4,
      blogcite: blogcite4
    },
    {
      id: '3',
      did: '08-03-18',
      date: 'August 3, 2018',
      author: 'by Thomas Maestas',
      cat3: ' ',
      title: 'Tour of Google\'s Chocolate Factory, Part II:<br />Glass Elevator into the Cloud',
      post: blogpost3,
      blogcite: blogcite3
    },
    {
      id: '2',
      did: '08-02-18',
      date: 'August 02, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Tour of Google\'s Chocolate Factory, Part II:<br />Google\'s Golden Ticket',
      post: blogpost2,
      blogcite: blogcite2
    },
    {
      id: '1',
      did: '08-01-18',
      date: 'August 1, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Fintech Auchtung!',
      post: blogpost1,
      blogcite: blogcite1
    }

  ];

  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-aug").innerHTML += cat;
  }

  var i;
  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle cha-pternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-aug-mod").innerHTML += catMod;
  }
  console.log('blogger-aug'); 
  // console.log(angular.toJson(url));
};
bloggerAug();
// 'use strict';  
// https://techcrunch.com/2019/01/28/huawei-us-meng-wanzhou-doj/
//june 
// http://nautil.us/issue/64/the-unseen/the-fourth-copernican-revolution
// https://www.theatlantic.com/science/archive/2018/09/your-dna-is-not-your-culture/571150/
var bloggerDec = function() {



    var blogpost160 = ` 
  <p class="firstparagraph">Taskrunners, bots, and any other automaton will find a way, if there's a faster way!
  </p>
  <p class="quote">One could easily take this as a step in the “the machines are getting smarter” narrative, but the truth is it’s almost the opposite. The machine, not smart enough to do the actual difficult job of converting these sophisticated image types to each other, found a way to cheat that humans are bad at detecting. This could be avoided with more stringent evaluation of the agent’s results, and no doubt the researchers went on to do that.
  <br /><br />
  As always, computers do exactly what they are asked, so you have to be very specific in what you ask them. In this case the computer’s solution was an interesting one that shed light on a possible weakness of this type of neural network — that the computer, if not explicitly prevented from doing so, will essentially find a way to transmit details to itself in the interest of solving a given problem quickly and easily.
  This is really just a lesson in the oldest adage in computing: PEBKAC. “Problem exists between keyboard and computer.” Or as HAL put it: “It can only be attributable to human error.”
  <br /><br />
  The intention of the researchers was, as you might guess, to accelerate and improve the process of turning satellite imagery into Google’s famously accurate maps. To that end the team was working with what’s called a CycleGAN — a neural network that learns to transform images of type X and Y into one another, as efficiently yet accurately as possible, through a great deal of experimentation.
  <br /><br />
  In some early results, the agent was doing well — suspiciously well. What tipped the team off was that, when the agent reconstructed aerial photographs from its street maps, there were lots of details that didn’t seem to be on the latter at all. For instance, skylights on a roof that were eliminated in the process of creating the street map would magically reappear when they asked the agent to do the reverse process
 
<sup>1</sup>
  </p>
  <p>Unfathomably focused A.I. means that an "Off" switch ought to be multi-dimensionally redundant -- planned out for unforeseen environments, option range and resources available as a codebase grows!</p>   
  `;

    var blogcite160 = `
  <p class="cite">1 <a target="_blank" href="https://techcrunch.com/2018/12/31/this-clever-ai-hid-data-from-its-creators-to-cheat-at-its-appointed-task">https://techcrunch.com/2018/12/31/this-clever-ai-hid-data-from-its-creators-to-cheat-at-its-appointed-task</a></p>  
  `;
    var blogpost159 = ` 
  <p class="firstparagraph">Interviewer Bots would certainly probe the depths of any job candidate's answers, digital record, etc. In fact, using predictive analytics, it is likely that bots would undoubtedly shed light about an unseen facet of reality: <i>Everyday and every-year patterns of behavior</i>, however unnoticed by oneself or anyone else. Big Data notices ...
  </p>
  <p class="quote">However, at places like EY, which plans to hire approximately 15,700 workers in the U.S. in the coming year, some 1,300 bots focused on recruiting efforts are likely going to be part of the candidates’ interview experience.
</p><p>So, are interview bots humane? How much can we as a society <i>off-load</i> our own perceptions, vibes and even that familiar or professional hunch in decision-making?<br /><br />

Eyal Grayevsky, CEO and cofounder of Mya Systems says that in 2019 the divide between intelligent, conversational recruiting bots and basic chatbots that follow simple decision trees will become a chasm. “Job search candidates will gravitate toward conversational bots,” he explains, “because of their ability to respond more knowledgeably and naturally, to anticipate candidate needs, and to learn and adapt to candidate preferences over time.”
<sup>1</sup>
  </p>
  <p>Unfathomably complex A.I. algorithms to decode the job candidate's algorith ...that's a new one,  but can you trust in a computer's over-analytic mind when all you need is a bit of human touch?
  `;

    var blogcite159 = `
  <p class="cite">1 <a target="_blank" href="https://www.fastcompany.com/90280594/this-is-how-youll-look-for-a-job-in-2019">https://www.fastcompany.com/90280594/this-is-how-youll-look-for-a-job-in-2019</a></p>  
  `;

    var blogpost158 = ` 
  <p class="firstparagraph">What are the odds?
  </p>
  <p class="quote"> 
  Notwithstanding the example of Prime Minister Justin Trudeau and his brother, Alexandre — each born Dec. 25, two years apart — Christmas Day is actually the least common modern birthday across the United States and likely Canada as well.  <sup>1</sup>
  </p>
 `;

    var blogcite158 = `
  <p class="cite">1. <a target="_blank" href="https://ottawacitizen.com/news/local-news/christmas-baby-drought-why-dec-25-is-the-least-common-birth-date">https://ottawacitizen.com/news/local-news/christmas-baby-drought-why-dec-25-is-the-least-common-birth-date</a></p>  
  `;

    var blogpost157 = ` 
  <p class="firstparagraph">When it comes to linear tasks, human productivity surpasses all bounds, yet the exponential tasks, must be reformulated through logging. This transformed-reality used to be confined to the buttons of a calculator, but these days ...we have enough data to exponentially analyze and understand our shared reality:  The numbers underneath our perceptions. Now, about Officer McClane's adventures ...</p><p> 
  </p>
  <p class="quote">
 The final result: Is Die Hard a Christmas movie?
After taking this long journey with me, I’m sure you can appreciate the complexity involved in answering a seemingly simple question. We’ve had to consider what is a movie, who is asking the question (plus who is answering it) and how the perception of movies change over time. The neatest summary I can provide is to say that there are many Christmas elements in the movie. Although the studio did not intend it to be a Christmas movie, some of the film’s key creators did. Either way, it’s certainly fair to say that Die Hard is regarded as a Christmas movie in popular culture. Like it or not, the association between Die Hard and Christmas is fast increasing and in years to come its Christmassyness will be beyond question. Future generations will read in wonder that Die Hard was ever thought not to be a Christmas movie and articles such as the one you’re reading now will be seen as nothing but a massive waste of everyone’s time. Imagine that!
<sup>1</sup>
  </p>
  <p> ... as seen through the holographic prism of Data Analytics. </p> `;

    var blogcite157 = `
  <p class="cite">1. <a target="_blank" href="https://stephenfollows.com/using-data-to-determine-if-die-hard-is-a-christmas-movie/">https://stephenfollows.com/using-data-to-determine-if-die-hard-is-a-christmas-movie/</a></p>  
  `;

    var blogpost156 = ` 
  <p class="firstparagraph"><i>Public Access to Quantum Computing ... makes a quaint Christmas-Hannukah-Festivus Present for all  </i>
  </p>
  <p class="quote"> The IBM Q Experience has already executed more than seven million quantum programs, and they aren’t just random gobbledygook like mine. Legit researchers, many unaffiliated with IBM, have published more than 120 academic papers using it.

  The app is part of a larger effort to boost literacy in quantum computing. Other companies have also been releasing open-source software packages to reach out to the masses—or more probably, nerds with niche interests. They hope that a diverse pool of users can guide them toward more creative uses for the machines. 
<sup>1</sup>
  </p>
  <p> `;

    var blogcite156 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.com/story/quantum-computing-needs-you-to-help-solve-its-core-mystery/">https://www.wired.com/story/quantum-computing-needs-you-to-help-solve-its-core-mystery/</a></p>  
  `;
    var blogpost155 = ` 
  <p class="firstparagraph">To say that the world's micro-transaction needs have changed in the past 100 years is ... exaggeration. Maslow's <i>Hierarchy of Needs</i> specifies more or less the reality of buying habits. From the bottom of the triangle, they are physiological needs, safety-security, love and belonging, and finally self-actualization. What is clear is that horizontal scaling of our needs often use fragmented sources of "currency"--whether it is financial capital being spent, or social capital (value accrued from trust networks), human capital(value accrued from specialties and specialized networks), intellectual capital, and so on. </p>
  <p>The effect is clear: multiplying usages and forms of value exchange are certain--this, without accounting for the myriad new options that tech offers. So, if one considers the linear progression from bartering to the coins of Egypt and Athens, history certainly amplifies itself with Venmo, PayPal options are here to stay...  
  </p>
  <p class="quote">Facebook Inc. is working on making a cryptocurrency that will let users transfer money on its WhatsApp messaging app, focusing first on the remittances market in India, according to people familiar with the matter.
  <br /><br />

  The company is developing a stablecoin -- a type of digital currency pegged to the U.S. dollar -- to minimize volatility, said the people, who asked not to be identified discussing internal plans. Facebook is far from releasing the coin, because it’s still working on the strategy, including a plan for custody assets, or regular currencies that would be held to protect the value of the stablecoin, the people said.
  <br /><br />
   
  Facebook, which has 2.5 billion global users, more than $40 billion in annual revenue and greater experience navigating regulatory issues, may have a better chance of making a stablecoin that sticks. It would be the first large technology company to launch such a project. 
<sup>1</sup>
  </p> `;

    var blogcite155 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/news/articles/2018-12-21/facebook-is-said-to-develop-stablecoin-for-whatsapp-transfers">https://www.bloomberg.com/news/articles/2018-12-21/facebook-is-said-to-develop-stablecoin-for-whatsapp-transfers</a></p>  
  `;
    /*
  var blogpost154 =   ` 
  <p class="firstparagraph">
  </p>
  <p class="quote">
 
<sup>1</sup>
  </p>
  <p> `; 
  
  var blogcite154 = `
  <p class="cite">1. <a target="_blank" href=" "> </a></p>  
  `;
 */
    var blogpost153 = ` 
  <p class="firstparagraph">Law and Justice in the tech world reveals <i>a new world without judicial precedent</i> making for new curiosities in Case Law with increasing frequency. Different facets of personal data, whether shopping, movie-watching, chatting, selfie-posting, all new nuances and new social-legal dilemmas fall to the best discretions of Facebook, Google, Amazon and other Tech Greats...  
  </p>
  <p class="quote">
  When you buy something on Amazon, the odds are, you aren’t buying it from Amazon at all. Plansky is one of 6 million sellers on Amazon Marketplace, the company’s third-party platform. They are largely hidden from customers, but behind any item for sale, there could be dozens of sellers, all competing for your click. This year, Marketplace sales were almost double those of Amazon retail itself, according to Marketplace Pulse, making the seller platform alone the largest e-commerce business in the US. 

  Amazon is far from the only tech company that, having annexed a vast sphere of human activity, finds itself in the position of having to govern it. But Amazon is the only platform that has a $175 billion prize pool tempting people to game it, and the company must constantly implement new rules and penalties, which in turn, become tools for new abuses, which require yet more rules to police. The evolution of its moderation system has been hyper-charged. While Mark Zuckerberg mused recently that Facebook might need an analog to the Supreme Court to adjudicate disputes and hear appeals, Amazon already has something like a judicial system — one that is secretive, volatile, and often terrifying. 
<sup>1</sup>
  </p>
  <p>So, when commercial and social transactions drift away from  traditional political-judicial-legal jurisdictions, where--rather what--is binding authority? 
  </p> `;

    var blogcite153 = `
  <p class="cite">1. <a target="_blank" href="https://www.theverge.com/2018/12/19/18140799/amazon-marketplace-scams-seller-court-appeal-reinstatement">https://www.theverge.com/2018/12/19/18140799/amazon-marketplace-scams-seller-court-appeal-reinstatement</a></p>  
  `;
    var blogpost152 = ` 
  <p class="firstparagraph">
  </p>
  <p class="quote">
  But engineers haven't written off the internal combustion engine just yet. The team at Aston Martin has released details on the V12 engine that will breathe life into its upcoming, $3 million Valkyrie hypercar, and the gleaming maze of metal is a beautiful beast.
  <br /><br />

  <img src="dist/img/astonmartinwired.jpg" width="350" class="zoom" /><br /><br />
  The 6.5-liter V12 will produce 1,000 horsepower (because excess) and revs to 11,100 rpm. Putting this overall insanity aside, what's remarkable about such figures is that Aston's engineers hit them without resorting to turbochargers. The automaker says it recognizes that turbos offer a ton of benefits, but wanted “an internal combustion engine that sits at the absolute pinnacle for performance, excitement, and emotion,” which it could only get through natural aspiration. 
<sup>1</sup>
  </p>  `;

    var blogcite152 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.com/story/aston-martin-valkyrie-engine-v12-f1-cosworth/">https://www.wired.com/story/aston-martin-valkyrie-engine-v12-f1-cosworth/</a></p>  
  `;

    var blogpost151 = ` 
  <p class="firstparagraph">What better reason for international cooperation than a rendez-vous at 200 miles up? After all, it's a niche sweetspot for satellite placement offering communication with less-bad latency problems...This kind of spatial coordination 
  </p>
  <p class="quote">
  Ships, planes and remote businesses rely for internet connections on signals sent from geostationary orbit, but this method is too pricey for widespread adoption. Beaming the internet via satellites orbiting closer to the planet has been tried before. The idea was popular at the height of the tech boom of the late 1990s. Three companies—Teledesic, Iridium and Globalstar—poured tens of billions of dollars into the low-Earth orbit (LEO) satellite internet. It culminated in the collapse of Teledesic. Although the technology of the time worked, it was very costly and so the services on offer had to be hugely expensive, too. Iridium survived, but as a niche provider of satellite telephony, not a purveyor of cheap and fast internet access.
  <br /><br />

  OneWeb is among several firms that are trying LEO satellites again. SpaceX, a rocket company founded by Elon Musk, a tech entrepreneur, is guarded about its proposed system, Starlink, but on November 15th American regulators approved an application for 7,518 satellites at an altitude of 340km [200miles] (bringing the total for which the firm has approval to nearly 12,000). Telesat, a Canadian firm, has plans for a 512-satellite constellation. 
<sup>1</sup>
  </p>
  <p> `;

    var blogcite151 = `
  <p class="cite">1. <a target="_blank" href="https://www.economist.com/briefing/2018/12/08/satellites-may-connect-the-entire-world-to-the-internet">https://www.economist.com/briefing/2018/12/08/satellites-may-connect-the-entire-world-to-the-internet</a></p>  
  `;

    var blogpost150 = ` 
  <p class="firstparagraph">
  </p>
  <p class="quote">
  Amid the wreckage of the burst bitcoin bubble  it is fair to assess the outlook for blockchains, the technology underlying the cryptocurrency. There’s a difference. Blockchains, it is said, stand to revolutionize enterprise technology by addressing the problems with authentication and identity at the heart of the internet itself, eliminating middle layers in transactions and making it faster and easier to establish provenance.
  <br /><br />
  
  The adoption of blockchains in the enterprise has been slow. The question now is the extent to which the overblown investment thesis behind bitcoin and related financial mania can be separated from the utility of blockchain as a tool in enterprise technology.
<sup>1</sup>
  </p>
  <p> `;

    var blogcite150 = `
  <p class="cite">1. <a target="_blank" href="https://www.wsj.com/articles/bitcoin-wasnt-a-bubble-until-it-was-11544783400?mod=djemCIO_h">https://www.wsj.com/articles/bitcoin-wasnt-a-bubble-until-it-was-11544783400?mod=djemCIO_h</a></p>  
  `;

    var blogpost149 = ` 

  <p class="quote">
  Formally, an asset bubble is just a rapid rise and abrupt crash in prices. Defenders of the efficient-market theory argue that these price movements are based on changes in investor’s beliefs about an asset’s true value. But it’s hard to identify a reason why any rational investor would have so abruptly revised her assessment of the long-term earnings power of companies in 1929, or the long-term viability of dot-com startups in 2000, or the long-term value of housing in 2007.
<br /><br />
  Similarly, there was no obvious reason why it made sense for the world to believe that Bitcoin was the currency of the future late December 2017, but to think this was less than one fifth as likely today. Bitcoin wasn’t eclipsed by a competitor — the main alternative cryptocurrencies had even bigger price declines. Nor have regulators cracked down on Bitcoin — in fact, the regulatory structure has generally been quite accommodating to the technology. Nor have critical technological flaws emerged — yes, the Bitcoin network has become congested, but this problem was anticipated well before the crash. 
  
<br /><br />
  Instead, it seems overwhelmingly likely that Bitcoin’s spectacular rise and fall was due not to rational optimism followed by sensible pessimism, but to some kind of aggregate market irrationality — a combination of herd behavior, cynical speculation and the entry into the market of a large number of new, poorly informed investors.
<sup>1</sup>
  </p>
  `;

    var blogcite149 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/opinion/articles/2018-12-11/yep-bitcoin-was-a-bubble-and-it-popped">https://www.bloomberg.com/opinion/articles/2018-12-11/yep-bitcoin-was-a-bubble-and-it-popped</a></p>  
  `;
    var blogpost148 = ` 
  <p class="firstparagraph">Crypto-Currency theorists provide endless explanations over the disproportionately-sized fall of Bitcoin from December 2017 yet offer an incomplete picture. The more fascinating questions surround Bitcoin's 2017 growth rather than the interruption that either cascaded to new factors or simply magnified existing factors--such as security doubts and the dearth micro-economic public use.
  </p>
  <p class="quote"> His explanation for the divergence include last year’s meteoric rally, a “meltdown” in the macroeconomic climate and treasury sales during initial coin offerings. 
  “Fair value is significantly higher than the current price of Bitcoin,” he wrote. “In fact, working backwards, to solve for the current price of Bitcoin, this implies crypto wallets should fall to 17 million from 50 million currently.”
<sup>1</sup>
  </p> `;

    var blogcite148 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/news/articles/2018-12-13/unabashed-bitcoin-bull-thomas-lee-says-the-market-is-wrong?srnd=cryptocurrencies">https://www.bloomberg.com/news/articles/2018-12-13/unabashed-bitcoin-bull-thomas-lee-says-the-market-is-wrong?srnd=cryptocurrencies</a></p>  
  `;
    var blogpost145 = ` 
  <p class="firstparagraph">Leaving the age of personal pc computing power, the growing trends are to borrow someone else's computing power in the cloud. Platform-as-a-Service, Infrastructure-as-a-Service, and other shared computing and storage services are merely aligning with the growing convention to spurn buying--say a car--in favor of renting for when and what needs specifically arise--like Uber, Turo and other peer-to-peer trends.  It only makes sense that Cloud services would incorporate more hardware customization and flexibility.   
  </p>
  <p class="quote">Amazon, the world’s largest online retailer and largest cloud-computing company, is pushing into a new line of work: computer chips.

  Late last month, the company, based in Seattle, revealed that it had spent the last few years building a new chip for use inside the millions of servers in its data centers around the world.
  
  Amazon does not plan to sell this chip directly to customers, but the decision by one of the world’s biggest buyers of computer processors to go the do-it-yourself route is likely to have a major impact on Intel, the iconic Silicon Valley chip maker.
<sup>1</sup>
</p><p>Time-traveling to the dawn of the PC era, it must have felt the world ending with the monopolistic overtones of IBM and Microsoft. Yet, time--and technology--passes all things. Now, it is the age of Google Cloud and Amazon Web Services--including the chip!
  </p>`;

    var blogcite145 = `
  <p class="cite">1. <a target="_blank" href="https://www.nytimes.com/2018/12/10/technology/amazon-server-chip-intel.html">  https://www.nytimes.com/2018/12/10/technology/amazon-server-chip-intel.html</a></p>  
  `;




    var blogpost144 = `
 
  <p class="firstparagraph">Materials science, artificial intelligence   and IoT technology has a new assignment: Save the Glaciers!  
  </p>
  <p class="quote">By the end of the mission in 2009, Anandakrishnan and his colleagues had collected data from about 150 boreholes. The new information didn’t precisely explain what was hastening Thwaites’ acceleration, but it was a start. Meanwhile, the satellite maps kept getting redder and redder. In 2014, Eric Rignot, a glaciologist at NASA, concluded that Thwaites was entering a state of “unstoppable” collapse. Even worse, scientists were starting to think that its demise could trigger a larger catastrophe in West Antarctica, the way a rotting support beam might lead to the toppling not only of a wall but of an entire house. Already, Thwaites’ losses were responsible for about 4 percent of global sea-level rise every year. When the entire glacier went, the seas would likely rise by a few feet; when the glaciers around it did, too, the seas might rise by more than a dozen feet. 
<sup>1</sup>
  </p>`;

    var blogcite144 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.com/story/antarctica-thwaites-glacier-breaking-point/">https://www.wired.com/story/antarctica-thwaites-glacier-breaking-point/</a></p>  
  `;
    var blogpost143 = `
 
  <p class="firstparagraph">
  Workplace satisfaction sits squarely on finding purpose, usually to the aim of helping others. 20th century jobs plainly reflected this value in plain sight, however new jobs do the same and more, but less evidently. Code writing is worthy for its contributions to humanity--as much as bridge-building, nursing,  social work and any  industry.  Yet, software engineering is seen through the filter of coding, math,   logic and automation, instead of the true portraiture of the careful reflection, humanity and patience of coding authorship. Sadly, there is no PR to tout the new paradigm and lofty meaning tied into programming work! </p> 

  <p class="quote">Lack of career growth or trajectory was the biggest reason, with 28.1% of respondents saying it caused them to quit. Many of the women also believe that men have an advantage in the field; just 53% said women have the same opportunities to enter senior leadership roles as their male counterparts.<br />

  “Lack of career growth is a problem that women face across industries,” says Kim Williams, Indeed’s senior director of design platform, technology, and operations. 
<sup>1</sup>
  </p>`;

    var blogcite143 = `
  <p class="cite">1. <a target="_blank" href="https://www.fastcompany.com/90274067/this-is-why-women-leave-jobs-in-tech">https://www.fastcompany.com/90274067/this-is-why-women-leave-jobs-in-tech</a></p>  
  `;


    var blogpost142 = `
 
  <p class="firstparagraph">  
  </p>
  <p class="quote"> The bright blue light of flat, rectangular touch screens, fans, and displays may be appealing from an aesthetic perspective (more on that below), but from a health standpoint, it is fraught with problems. Blue light inhibits the production of melatonin, the hormone that regulates our sleep cycles. Blue light before bedtime can wreak havoc on our ability to fall asleep. 
  <br /><br />Harvard researchers and their colleagues conducted an experiment comparing the effects of 6.5 hours of exposure to blue light, versus exposure to green light of comparable brightness. They found that blue light suppressed melatonin for about twice as long as the green light and shifted circadian rhythms by twice as much (3 hours compared with 1.5 hours). And worse, it’s been linked in recent studies to an increased risk of obesity and some cancers.
<sup>1</sup>
  </p>`;

    var blogcite142 = `
 <p class="cite">1. <a target="_blank" href="https://www.fastcompany.com/90177573/how-blue-became-techs-favorite-color-and-why-it-shouldnt-be">https://www.fastcompany.com/90177573/how-blue-became-techs-favorite-color-and-why-it-shouldnt-be</a></p>  
  `;

    var blogpost141 = `
 
  <p class="firstparagraph">
  Computers don't know lines of text to understand the words. Just the conditions and behavior of a certain combination of letters - and the computer does not <i>know</i>0, 1, and 2.  ..It knows the difference between 0 and 1 with respect to 2 ... <br /><br />
   The subject of trust is not the Tech Sector's best light -- as it can be fairly said to flaunt irresponsibility--<i>to move fast and break things</i>. This has been benign so far except for a few credit card and Scarlett Johannsen's leaked selfies ... nothing Earth-shattering.  A.I. on the other hand, can't be leashed in an Open Source era, so here we are - 'the best offense is a good defense' theory. </p><p>
   Moral, social, and most of all technical forms of deterrance and plethora. As Elon Musk once said, "We don't want autonomous weapons. The moment that one is walking down the street, <i> it's too late</i>.   
  </p>
  <p class="quote"> The prime mover behind the film is Stuart Russell, a professor of computer science at the University of California, Berkeley. Here, Russell checks in with the Bulletin to explain how the film was made, how little stands between us and the drone apocalypse, and what the prospects are for banning autonomous weapons before they get truly out of hand.
<sup>1</sup>
  </p>
  <p>This, not to mention the principle that whoever winds up harnessing A.I. will control the globe--whether socially, nationally, and finance. The solution to resolve this? With all of society involved in the sway of tech decision-making, then a society of people rules the globe, not the technology of one group ...the way it should be ...</p>
  <p>Programmers need to take care of not only the problem-at-hand but the larger outcome. For example, the stock 'Flash-Crash of 2010' produced a sudden drop--initiated unintentionally by a computer program... Let's start complementing faster engines with better brakes! `;

    var blogcite141 = `
  <p class="cite">1. <a target="_blank" href="https://thebulletin.org/2017/12/as-much-death-as-you-want-uc-berkeleys-stuart-russell-on-slaughterbots/">https://thebulletin.org/2017/12/as-much-death-as-you-want-uc-berkeleys-stuart-russell-on-slaughterbots/</a></p>  
  `;
    var blogpost140 = `
 
  <p class="firstparagraph">   The <i>exponential growth<i> of data, as petabytes of streaming, disposable IoT sensor data knows no bounds. AWS has really stepped up to the great job of tackling this challenge:
  </p>
  <p class="quote">Satellite operators need to get data down from the satellite, process it and then make it available for developers to use in applications. In that regard, it’s not that much different from any IoT device. It just so happens that these are flying around in space.<br />
 
<sup>1</sup>
  </p>`;

    var blogcite140 = `
  <p class="cite">1. <a target="_blank" href="https://techcrunch.com/2018/11/27/aws-launches-a-base-station-for-satellites-as-a-service/">https://techcrunch.com/2018/11/27/aws-launches-a-base-station-for-satellites-as-a-service/</a></p>  
  `;
    var blogpost139 = `
 
  <p class="firstparagraph">Competition versus cooperation with China presents an unanswerable question while nationalism brushes aside a common humanity--as far as technological advancement is concerned. Perhaps the best hope for a common thread of peace lies in the age-old, border-breaking legacy of 1990s' pre-tech wave multinationalist corporations--an impossible dream in the age of retributive tariff and trade threats ...
  </p>
  <p class="quote">Yet the trade conflict that matters most between America and China is a 21st-century fight over technology. It covers everything from artificial intelligence (ai) to network equipment. The fundamental battleground is in semiconductors. The chip industry is where America’s industrial leadership and China’s superpower ambitions clash most directly. And whatever Messrs Trump and Xi say at the g20, this conflict will outlast them both.
  
<sup>1</sup>
  </p>`;

    var blogcite139 = `
  <p class="cite">1. <a target="_blank" href="https://www.economist.com/leaders/2018/12/01/chip-wars-china-america-and-silicon-supremacy">https://www.economist.com/leaders/2018/12/01/chip-wars-china-america-and-silicon-supremacy</a></p>  
  `;

    var blogpost138 = ` 
  <p class="firstparagraph">At the end of the day, why not include tactile messaging? I enjoyed my Samsung Note V, but the material touch is the hardest to replicate.
  </p>
  <p class="quote"> Invented four decades ago by 3M in what has become a famous example of mistakes leading to success, sticky notes have become a classic because of some unique properties. They can convey a message—that is, content—but their placement provides context. They can be put in the line of sight of someone to grab attention or be affixed to a document or other object to provide instruction or commentary. Their ability to be attached again and again has made them popular for arranging ideas on surfaces such as whiteboards for analog mind-mapping. <sup>1</sup>
  </p>
  <p>Senseless criticism aside, Google's Materialize software is the true winner for replicating paper, at least visually ...`;

    var blogcite138 = `
  <p class="cite">1. <a target="_blank" href="https://www.fastcompany.com/90268250/even-in-our-digital-world-the-humble-sticky-note-abides">https://www.fastcompany.com/90268250/even-in-our-digital-world-the-humble-sticky-note-abides</a></p>  
  `;



    var url = [

        {
            id: '160',
            did: '12-31-18',
            date: 'December 31, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Sneaky Bots',
            post: blogpost160,
            blogcite: blogcite160
        },
        {
            id: '159',
            did: '12-26-18',
            date: 'December 26, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Rise of the Interviewer Bots',
            post: blogpost159,
            blogcite: blogcite159
        },
        {
            id: '158',
            did: '12-25-18',
            date: 'December 25, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Christmas Stats',
            post: blogpost158,
            blogcite: blogcite158
        },
        {
            id: '157',
            did: '12-24-18',
            date: 'December 24, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Big Data\'s New Reinterpretation of Reality',
            post: blogpost157,
            blogcite: blogcite157
        },
        {
            id: '156',
            did: '12-22-18',
            date: 'December 22-23, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Quantum Data',
            title: 'Quantum Computing Presents',
            post: blogpost156,
            blogcite: blogcite156
        },

        {
            id: '155',
            did: '12-21-18',
            date: 'December 21, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Musing Blockchain',
            title: 'A Virtual Balkanization of International Currency',
            post: blogpost155,
            blogcite: blogcite155
        },
        /*
              {
                id: '154',
                did: '12-20-18',
                date: 'December 20, 2018 ',
                author: 'by Thomas Maestas',
                cat3: 'Musing Blockchain',
                title: ' ',
                post: blogpost154,
                blogcite: blogcite154
              },  
              */
        {
            id: '153',
            did: '12-19-18',
            date: 'December 19, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'A New <i>Stare Decisis</i>',
            post: blogpost153,
            blogcite: blogcite153
        },
        {
            id: '152',
            did: '12-18-18',
            date: 'December 18, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Aston Martin at 1,000 Horsepower',
            post: blogpost152,
            blogcite: blogcite152
        },
        {
            id: '151',
            did: '12-17-18',
            date: 'December 17, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Of Space and Satellites',
            post: blogpost151,
            blogcite: blogcite151
        },
        {
            id: '150',
            did: '12-15-18',
            date: 'December 15-16, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Musing Blockchain',
            title: 'A Currency Introspective',
            post: blogpost150,
            blogcite: blogcite150
        },
        {
            id: '149',
            did: '12-14-18',
            date: 'December 14, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Musing Blockchain',
            title: 'A Currency in Retrospective',
            post: blogpost149,
            blogcite: blogcite149
        },
        {
            id: '148',
            did: '12-13-18',
            date: 'December 13, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Musing Blockchain',
            title: 'A Currency Starting Afresh',
            post: blogpost148,
            blogcite: blogcite148
        },
        {
            id: '145',
            did: '12-10-18',
            date: 'December 10, 2018',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Quantum Chips, GPU &amp; Parallel Chips  and Cloud Chips, Ahoy!',
            post: blogpost145,
            blogcite: blogcite145
        },
        {
            id: '144',
            did: '12-08-18',
            date: 'December 8-9, 2018 <br />Weekend',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'The Tech Industry\'s True Value, Part II:<br />Saving Earth',
            post: blogpost144,
            blogcite: blogcite144
        },
        {
            id: '143',
            did: '12-07-18',
            date: 'December 7, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'The Tech Industry\'s True Value, Part I:<br />Saving Humanity',
            post: blogpost143,
            blogcite: blogcite143
        },
        {
            id: '142',
            did: '12-06-18',
            date: 'December 6, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Screen Time Blues',
            post: blogpost142,
            blogcite: blogcite142
        },
        {
            id: '141',
            did: '12-05-18',
            date: 'December 5, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'The Reason for More Social Awareness on A.I. Policy',
            post: blogpost141,
            blogcite: blogcite141
        },
        {
            id: '140',
            did: '12-04-18',
            date: 'December 4, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'Spin Me Up a Satellite for the Year',
            post: blogpost140,
            blogcite: blogcite140
        },
        {
            id: '139',
            did: '12-03-18',
            date: 'December 3, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'The China Question',
            post: blogpost139,
            blogcite: blogcite139
        },
        {
            id: '138',
            did: '12-01-18',
            date: 'December 1-2, 2018 <br />Weekend',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'Textbook Technology',
            post: blogpost138,
            blogcite: blogcite138
        }

    ];
    var i;
    for (i = 0; i < url.length; i++) {
        var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a target="_blank" href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="author">${url[i].author}</p>   
    <h6  id="date" class="chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
        document.getElementById("paragraph-dec").innerHTML += cat;
    }

    for (i = 0; i < url.length; i++) {
        var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a target="_blank" href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="author">${url[i].author}</p>   
  <h6  id="date" class="chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
        document.getElementById("paragraph-dec-mod").innerHTML += catMod;
    }

    console.log('blogger-dec');
    // console.log(angular.toJson(url));
};
bloggerDec();


var bloggerFeb = function () {

/*
  var blogpost17 = `
  <p class="firstparagraph">First, let me describe that blockchain technologies, i.e. Government contracts, Business contracts, Bitcoin and other

cryptocurrencies, all rely on network graph theory, both on the low-level programming technology (peer-to-peer global

ip networks) across the spectrum to high-level interfaces for institutional, corporate, individual needs and uses.

These blockchain &quot;network&quot; analyses depend on highly variable--and simultaneous--network changes, node

changes, and link changes; and, the latter three may arbitrarily change interdependantly or not.</p>



<p>Therefore, blockchain technologies must first accomodate complex node variables for contracts (relationships) that

include arbitrarily hierarchical mappings and conditional data structures. Secondly, blockchain tech must face analytical

challenges that arise from informal practices

<sup>1</sup>, by which the organizational nodes (employees) choose to deviate from the employee role&#39;s protocol for

the sake of efficiency, convenience, company culture, and multiple other levels of human factors.</p>



<p>Sociologists Meyer &amp; Rowan&#39;s (1977)

<i>New Institutionalism</i> explains how employees change practices and decouple

<i>actual</i> organizational structure from recorded rules, as a function of organizational size, time, convenience,

etc. These continually new, unknown constraints on data must be intimately understood, non-algorithm human understanding

<i>by at least one side </i>of the exchange. How do we recognize unwritten, soft rules and behaviors of a bank, a person,

or a company&#39;s internal bot?</p> 

<p>The hard sciences domain of Software Engineering, Computer Science, and Mathematics have brilliantly brought the

world the blockchain tool, <s>for which</s> the Hard Sciences can and must share and propogate it's technical expertise <i>and higher standard of metric truth</i><s style="color:purple" class="strike-purple"> not contribute everything, especially relating with</s> to the other sciences that are still lagging behind--namely The Discipline of Sociology</s> toward acclimating to the modern age's social priorities and needs. Ask yourself, how well do 1,000 top blockchain-related programmers understand the multi-dimensional layers of hierarchical social, corporate, and governmental relationship networks--probably 700 of the 1,000. And how many social scientists can understand the technological sciences? Probably 200 out of 1,000. This means that <i>a chunk of the scientific displines suffer from acute innumeracy</i>. So how do we bridge this massive knowledge gap between qualitative meaning in the smart-contract.</p>

<p>In the past, the layers of abstraction from raw technological tool to societal use was refined, improved, integrated through multiple layers of &quot;middlemen&quot;, such as lawyers, corporate lawyers, government institutions, non-governmental, non-profit and for-profit actors. Blockchain technology, by its very nature, erases the middlemen. Suddenly, one programmer, for example, is writing the same healthcare insurance crypto-contract, that last month an entire team of hospital employees spent a month writing; then overseeing and managing different facets of this same thing.</p>



<p>However, the crypto-contract, once deployed to the blockchain, auto-manages the rest, forever or for the life of
the contract. Therefore, rather than redoing the trials and errors of 200 years&#39; Sociology Network Analysts&#39;
research and analytical development. Therefore, medical and other social fields cannot and should not turn to the
Hard Sciences for solutions. These Med researchers and developers are already at home, safe within the academic
domain of the Raw Sciences of Medical Sociology, Public Health, and so on. The next ten years of blockchain technology
can either be defined by unwitting, piecemeal advances, accompanied by frequent, non-improving distastrous crises.
Or, the next ten years can follow Sociology&#39;s Scientific Method toward a mildly turbulent, but stable and beautiful
future.</p>



<p>Examples aside, the <s>primacy</s> innumeracy of the Sociology academic field in the early 21st century quickly becomes apparent on

review of the Sociologists&#39; specialization in network theories imbued with symmetrical and asymmetrical relationships,

within social networks that change arbitrarily the direction, conditions, and values of those same relationships.

<s>We</s> Sociologists deal with real-time, logical and hierarchical network mappings that appear arbitrary, yet are characterized by fixed patterns. This implies a higher level of competency to accurately judge a point-of-view without the ability to directly consult machine learning. <i>This is a Code or Be Coded moment in the sciences.</p>



<p>No other academic field than sociology has advanced into the details, and endless network rabbit-holes that characterize societal behavior. Not until this second millenial decade could the marriage of Large Number Statistical Theory

become consumated with the brilliance of early 1900&#39;s Sociological French Network Theories, like Maurice Halbswach&#39;s

work on the clearly defined network patterns of a society&#39;s Collective Memory.</p>



<p>No other academic field has collected and refined knowledge on network arbitrariness, such that Economic&#39;s &quot;irrational

behaviors&quot; and Mathematical &quot;complexity models&quot; do not

<i>touch to the bone</i> the meaning, the intersectionality of network analysis, which must incorporate simultaneous

node changes (person gets job /or/ does not get job), network changes (All get jobs /or/ only 3 of 15 network groups

get jobs), and most importantly the

<i>relationship</i> changes (all jobs always useful /or/ half of job groups no longer useful) across time and fixed.</p>



<p>Fine. So, why is Sociology&#39;s network theory so valuable beyond just the network insights gleaned from 19th and

20th centuries&#39; network problems? Follow: European sociology came of age in the analog social era, while North

American Sociology only recently come of age (Quebec in the 1960&#39;s [post-1968], U.S. in the 1990&#39;s[post-1999],

in the digital social era. Therefore, the problem-solving patterns of past sociology are inherently small-data and

more qualitative analysis, and thus only Sociology incorporates &quot;human-ness&quot; into the billion rows and

columns of quantitative--numbers-only--analysis.</p>



<p>For example, Oxford-developed S.I.E.N.A. Software accomplishes this task. SIENA--named for Simulation Investigation

for Empirical Network Analysis--software calculates the real-time values, direction, and conditions of each relationship

(link) in a network, simultaneously as each node, network, or alter-link changes or is changed; with this, it is

possible to isolate directional, conditional

<i>influence change</i> in real-time. Real-time sounds impossible, however, the SIENA documentation

<sup >2</sup> describes its program algorithm to the statistical analysis of network data, with the focus on social networks.</p>



<p>An easy example to grasp this is the concept of whether a person

<i>self-selects </i>(e.g., due to subconscious leanings) into a group and thus matches to fruition the group&#39;s

behavior with little group influence? Or does this same person join a group and emulates the group&#39;s behavior,

by the group&#39;s influence over time. Sociological network analysis, using Snjder&#39;s SIENA software, achieves

the impossible with the closed, directed graph networks that characterize blockchain technology. The network graph

can be here understood as entire (complete) networks (i.e, the blockchain in its entirety without hard forks), not

as personal (egocentered) networks: Using this SIENA model allows for the necessary assumptions that a set of nodes

(social actors) is given, and all ties (links) between these nodes are known - except perhaps for a moderate amount

of missing data</p>



<p>If, and only if, this level of analysis may be achieved, the blockchain development may follow a linear, directed

path of maturity with social and world needs. Until that time, that Sociology Network Theorists are called upon,

blockchain developers will continue to bat their arms in the dark, stumbling over again the same bugs. Sadly, this

semi-opaque future implicates the same fate as those that attempt to use blockchain for their currency, contract,

and other societal needs--in this case, the blind would indeed lead the blind.</p>



<p class="footnotes">1.

<a href="http://www.journals.uchicago.edu/doi/abs/10.1086/226550"   target="_blank"> http://www.journals.uchicago.edu/doi/abs/10.1086/226550</a>

<br />

</p>

<p>

2.

<a href="https://www.stats.ox.ac.uk/~snijders/siena/"  target="_blank"> https://www.stats.ox.ac.uk/~snijders/siena/</a>

</p>
  `
  */
  var blogpost16 = `
  <p class="firstparagraph">There was once a time for App Developers that our habits followed our inner-philosophers--as an Esteemed Order of
Coders--we held ourselves in the highest regard to separate form from function, and style from structural design.
Hence, in the early 2000&#39;s, a tri-partite, sensible world guided every web coder to abide by The scaffolding
of HTML, functionality of JavaScript, and styling of CSS. A decade later, we must throw out this antiquated division
of labor within web coding.</p>

<p>Library modularization, (think JQuery, JSX, Bootstrap, etc.) within Javascript ES16 reveals that modules and components
Must hold together CSS/HTML/JS, part by part. So, if a decade ago three teams handled html, js, css, it is now requisite
to divide up 3 teams to 3 components (a team for the carousel widget, a team for the navigation widgets, and
<i>
each</i> of these component teams
<strong>must</strong> be maintained together, not separately, the module&#39;s required html, js, css.</p>

<p>This means that the new Division of Labour can no longer follow past patterns from 5 years ago. Otherwise, any and
all coding will necessarily begin to &#39;reinvent the wheel.&#39; This is because any module, any library you go
to, will
<i>already</i> have its HTML pre-configured, JS pre-configured, CSS pre-configured. Thus, attempts to extricate new
css from one module to another (or worse yet, sharing css of modules), will only invite eventual misery, almost
instantly setting booby traps for the next coders upon arrival.</p>

<p>So, where is the creativity? Where is the originality then? It is not gone. It has evolved to a higher level of abstraction,
leaving to automation the boring stuff. So, if Vanilla JS is considered malpractice in the modern world, and if
ad-hoc JQuery is mocked and scoffed at by React coders, then where is creativity? If yesterday&#39;s craft was the
hoisting of 15 javascript functions on each page, the New Art of modular coding is akin to a game of Tetris. Part
by part, module by module, the modern coder open-source window-browses and window-shops; goes home, and cuts and
pastes, and folds and clips, then assembles and hangs to dry. Do Python programmers rewrite each particular module
definition? That&#39;s absurd. Equally absurd is the javascript programmer that rewrites from scratch their modules.</p>

<p>The esteemed Order of JavaScript Coders must wake up, and regain its work-load balance in this new age--an age that
each year since 2014, the JavaScript language is rewritten, each year now, in both syntactic sugar and also fundamental
structure--especially the importing and exporting of modules. Therefore, philosophical Honor behooves each of us
to a higher complexity, and a new commitment to, the &quot;Separation of Concerns.&quot; We can allow ourselves
a break, thankful for Progress, a progress by which we must
<i>Stand on the Shoulders of Giants</i>, and Code-Create!</p>
  `
  var blogpost15 = `
  <p class="firstparagraph">Facebook Scandals
<sup>1</sup> of recent months have demoralized the leadership for a role of misinformation in the Tech Age, however I
charge Mark Zuckerberg&#39;s innocence
<i>not</i> because all of us, as a society, were equally warned. Rather, arbitrary mathematical forces created abnormal,
never-before-seen network structural density and symmetry patterns. Technological shifts were so efficient at multiplying
and exacerbating misinformation because a curious sociological network phenomenon rendered parts of our daily social
learning and acculturating process to network forces out of our own control.</p>

<p>A January 2016 American Sociology Association Newsletter Editorial
<sup> 2</sup> from Sally T. Hillsman, in which she explained how the social mechanisms of our own misinformation were
not entirely within our own control to resist. In fact, the arbitrary (often random) social structural changes from
higher social-media hours, create an arbitrary social network structure whose links (in their content and influence)
begin to dominate over nodes (each of us). In other words, the sway of trends and opinionated critical thought becomes
dominated by the relationships, e.g., the &quot;likes&quot; and &quot;shares&quot;, leading to a statistically natural
propensity toward homogeneity--a.k.a. group-think. The mechanism is akin to peacefully swimming close and parallel
to the coastline, and (due to random coastal floor structure), a rip-tide suddenly ships you far out to sea--a fatal
and tragic fate rendering experienced swimmers out of their own control. Same principle with an arbitrary
<i>underlying and unseen</i> network structure.</p>

<p>Our social network structures always are prone to continual shift, and so the usual &quot;interruptions&quot; that
previously stopped this inward shift soon began to disappear. Hillsman explains:</p>

<p class="quote">Lies, half-truths, and misinformation spread so rapidly across the public through digital communication that the
timespan for thoughtful, effective correction or rebuttal is infinitesimal. Because of confirmation Bias, misinformation
and outright lies quickly strengthen preconceived truths or pre-held beliefs that are already hard to change.</p>

<p>Therefore, even though we all have been pointedly warned,
<i> none of us</i> without advanced sociological analysis skills could understand that a curious network phenomonenon--ultimately
driven by some arbitrary mathematical calculation involving size, density, symmetry, conditional influences, and
the strength of ties outweighing network nodes. For the reasons of these factors, our social inclinations were
<i>out of our control</i> -- no, but really, this time they were!</p>

<p>And so, we can learn from Sociology what steps to take in order to counteract random, but risky, network phenomena
-- because nobody likes to go for a swim at the beach, and unwittingly get shipped out to sea!</p>

<p class="footnotes">1. Wired Magazine
<i>Inside the Two Years that Shook Facebook--and the World</i> (February, 2018)
<a href="https://www.wired.com/story/inside-facebook-mark-zuckerberg-2-years-of-hell"
target="_blank"> Wired Magazine, </a>
<br />
<br /> 2.ASA
<i>Footnotes</i>. (January, 2016)
<a href="http://www.asanet.org/footnotes/jan16/index.html" target="_blank"> www.asanet.org/footnotes/jan16/</a>
</p>
  `
  var blogpost14 = `
  <p class="firstparagraph">Other than college pre-med students, few know the MCAT exam--the gatekeeper of U.S. &amp; Canadian Medical Schools--underwent
a major modification in 2015.
<sup>2</sup> Much deeper than Biological and Technological updates, major sections were added and/or expanded including
the Social, Pyschological and Biological foundations of
<i>behavior</i>. Named the
<i>Health Systems Science</i>
<sup>3</sup>, the American Medical Association&#39;s modern, holistic approach articulates outcomes-based measures for
healthy living and disease prevention efforts. You could say the AMA is indeed,
<i>woke</i>.</p>

<p>But really, what&#39;s the difference and why would we care? And, who doesn&#39;t know that an apple-a-day keeps
the doctor away? Dr. Jeffrey Borkan, MD, PHD of Brown University&#39;s Warren Alpert Medical School, explains the
evident role of all those unnoticed social interactions involved in obtaining and consuming that apple. Further,
the spatial and economic
<i>availability</i> of that apple also plays a role in keeping the doctor away. Borkan explains:</p>

<p class="quote">It&#39;s time for us to take a leap forward in educating physicians for the health care delivery models of the future&mdash;those
that aim to improve not just the health of the individual patient and their family, but also the community and the
population.
<sup>4</sup>
</p>

<p>What, then, specifically, are the mechanisms that a community network&#39;s aggregated health may be inextricably
tied up with
<i>our own</i> individual health? In short, they are the sharing of health-promoting resources, timely assistance,
health-promoting information channels -- all this, among the countless perks of a healthy social circle!</p>

<p class="citations">1.
<a href="http://www.greekmedicine.net/whos_who/The_Hippocratic_Oath.html" target="_blank">The Oath of Hippocrates</a>
<br /> 2.
<a href="https://students-residents.aamc.org/applying-medical-school/article/changing-mcat-exam/" target="_blank">The 2015 AAMA Changes to the Medical College Admissions Test</a>
<br /> 3.
<a href="https://www.ama-assn.org/education/teaching-new-content-health-systems-science" target="_blank">American Medical Association&#39;s
<i>Teaching New Content Health Systems Science</i>
</a>
<br /> 4.
<a href="https://www.ama-assn.org/education/teaching-new-content-health-systems-science" target="_blank">ibid.</a>
</p>
  `
  var blogpost13 = `<p class="firstparagraph" style="color:green;">Given that a community network&#39;s aggregated health is inextricably, and symmetrically, tied up with
  <i>our own</i> individual health, app-developers may design activity- and communication-based apps more responsibly,
  and in touch with modern healthcare recommendations. After all, if the Saintly Mark Zuckerberg&#39;s communication-
  and activity-based app inadvertantly led to novel, and deeply consequential, effects, then ...</p>
  <span class="alert">* Given the Tragic Events in the School Shooting in Florida, I felt a topic of more gravity was in order ... :( </span>
  
  <h6 class="chapternumber">Feb 14, 2018</h6>
  
  <h6 class="chapternumber dailytitle">A New Kernel, and the Manifestation of a Two-Hundred Year Problem named
  <i>Anomie</i>
  </h6>
  <p class="firstparagraph">Given the tragic events at a Florida school over Valentine&#39;s Day, 2018, who can write about Fitbits? So, thoughts
and sympathy for those students today that endured this horror. 19 years after the first-of-its-kind school shooting,
we as an American society have not become &#39;numb&#39; to these events. It hurts as much as it did in 1999.</p>

<p>Darn that innocuous Spring day in 1999, when we heard the most absurd news-- students attacked their own colleagues
at Colombine? In my blog post from January 10, I wrote that American Sociology, along with Qu&eacute;bec, came of
age much later than European Sociology. The past 50 years&#39; social changes and new problems are generally atrributed
for the increasing demand for sociological expertise after 1999, after a singular, senseless tragedy of a school
shooting--this event, like a small kernel of societal desperation for a solution--led to a flurry of self-professed
sociologists &agrave; la Michael Moore&#39;s Colombine, and other social-responsibility themed social consciousness.
So far, only mutually incompatible solutions. The problem, however, is not new, only the manifestation of it.</p>

<p>Suicide rates in 19th century France, disproportionately high, also served as a symptomatic manifestation of the
same problem, called
<i>Anomie.</i>
<sup>1</sup> The term,
<i>Anomie</i>, coined by Emile Durkheim in the late 1800&#39;s, captured the sense of instability, cultural and moral
relativism that undermined a shared sense of meaning. Suicides, week-after-week, month-after-month? In 1897 France,
noone had ever seen it before--at such rates--and people wanted answers. Alas, a kernel of social desperation leading
to inquiry.</p>

<p>People wanted to know why so many in the population responded negatively to the rapid changes, urbanization (Dreadful
factory conditions &agrave; la
<i>Taylorism&#39;s</i> calculated efficiency) new technologies, i.e. electricity, railroads, steam engines; these created
an arbitrarily new world, very suddenly. Suddenly, like trying for the first time a roller-coaster, when all you&#39;ve
ever known has been the carousel. So, we see technology&#39;s role for well or for ill, our job is to understand
how to dial-in the tech specs necessary to keep society smiling on this roller coaster through another, yet not
altogether new, technological thrill-ride.</p>

<p>1.
<a href="https://www.researchgate.net/publication/228173911_The_Sociology_of_Suicide" target="_blank">1897, Suicide, &Eacute;mile Durkheim.</a>
</p>
  `
  var blogpost12 = `
  <small class="jargon">Tech blockchain jargon alert ahead, with all effort made for clarity! I treat a broad overview of the existing trajectory
of blockchain-related micro-economic advancements. I make a technical &amp; contextualizing
<abbr title="this link just goes down 5 paragraphs to Feb. 17th">
<a href="#18-02-17"> three-part blog series in my Feb. 17-20 posts</a> on the micro-economic horizon of blockchain technologies.</abbr>
</small>
</h6>

<p class="firstparagraph">Has anyone else been underwhelmed by the lack of Bitcoin&#39;s daily
<i>presence</i>, despite its everpresence at the dinner tables and caf&eacute;s across America. Sure, it&#39;s more
of a &quot;metropolitan&quot; phenomenon; and sure, it&#39;s become an accepted global platform--along with myriad
other crypto-currencies, but it&#39;s exchange-worthiness remains shrowded, and misunderstood by many. Cryptocurrencies
are useful as a vehicle for investment, and yes, there are Bitcoin millionaires due to the currency&#39;s rise to
fame with last year&#39;s increase in value (from $1,000 to ~$20,000) etc., etc. But, so far its contributions,
uses, fame are one-sidedly
<i>macro-</i>economic. A recent CNET article
<sup>1</sup>, among others, documents miniscule (and not improving) percentage of
<i>actual</i> use at the &quot;cash-registers&quot; of society.</p>

<p>Is there something wrong with such little micro-economic usage? Not at all! According to general sociological
<i>Early Adopter</i> theory--based on Everett M. Rogers&#39;
<i>Diffusion of Innovations</i>
<sup>2</sup>--the timeline of the Innovation Adoption Lifecycle is fairly ordinary. That is, the Roger&#39;s bell curve
ranges from the beginning innovators, to early adopters, early majority, and late majority. However, the blockchain
articles always miss the point. Currencies are more of a distraction compared to the genuine usefulness for the
every-person, in every-day affairs, on a given day--i.e., micro-economic use.</p>

<p>The true value, the kind that makes our lives easier on any given day, and for the every-person, is
<i>not</i> the currency, it is the contract, that allows for individualized, targeted sharing of specific information--whether
financial, governmental, or any other centralized database. An example is in order before I continue, since we can
all relate to the risk of using a credit or debit card, the risk most notably concerning Target store credit card
hacks a couple years ago.</p>

<p>Suppose a person shops at 3 different retailers, using a different credit card for each. For these 3 transactions,
this person had only needed to provide two discrete pieces of information about themselves for each transaction:
they prove they have the $27, $200, and $5; and they prove a third party(i.e.,CC or bank)will make that $27, $200,
or $5 available, if their client agrees. Instead, for each transaction, they open their
<i>entire</i> financial information, and can only hope that law-enforcement will prevent cyber-theft; and if the store&#39;s
databases are hacked, then tough-luck!</p>

<p>Crypto-contracts provide the technology for this individualized, risk-free transaction, rather than for each transaction,
providing the generalized information for individual transaction. Highly inefficient! Nobody thinks to walk around
with their life-savings in cash, then at the 7-11 store, to open their wad of cash and peel out a bill. The credit
card system, blessed as it is, did not previously have technology to avoid this very thing. So, financial institutions
have had to rely on the many layers of security, passwords, pins, mothers&#39; maiden names, etc. Then, based on
the mathematics behind prime numbers, they hope to keep your money safe in one, centralized spot--with a bright
red target on it.</p>

<p>Now, the crypto-contract provides this decidedly *micro-economic* experience for the everyday person. And that, my
friends, has nothing to do with crypto-currencies. There is no micro-economic value in crypto-currency, instead
the crypto-
<i>contract</i> is the true, unsung hero, and a hero we will all get to know. [personal opinion - this hero&#39;s name
is the Ethereum Virtual Machine]. In any case, Crypto-contracts provide this ability to provide pinpointed,
<i>specific, targeted information</i> as citizens, too. When we provide our drivers license number, for the sake of
renting that car, we provide every aspect of information of ourselves to Hertz. They don&#39;t need this. They need
to know only and exclusively driving-record related details--not the entire governmental database of information
about you!</p>

<p>1.
<a href="https://www.cnet.com/news/bitcoin-cryptocurrency-big-in-investing-but-still-lousy-for-buying-a-sandwich/"
target="_blank">https://www.cnet.com/news/bitcoin-cryptocurrency-big-in-investing-but-still-lousy-for-buying-a-sandwich/</a>
</p>

<p>2.
<a href="https://eric.ed.gov/?id=ED065999" target="_blank">Rogers, E. M., &amp; Shoemaker, F. F. (1971). Communication of Innovations; A Cross-Cultural Approach.</a>
</p>
  `
  var blogpost11 = `
  <p class="firstparagraph">Given that our app-use is inextricably tied up with our own behavior, activity/communication-based app developers
have in the past year accepted (mostly in word) a renewed responsibility. More like resposibility for a multi-faceted
power of influence granted to an industry, suddenly, disproportionately great, and
<i>semi-arbitrarily related</i> to the designer&#39;s intent (and control!). After all, if the Saintly Mark Zuckerberg&#39;s
activity/communication-based app inadvertantly led to novel, and deeply consequential, effects, then anyone could.</p>

<p>After all, who could guess
<i>how</i> these app-design effects would affect the users, years later. Who do we think programmers are, sociologists?
More specifically, who could know
<i>which</i> mundane coding practices, arbitrary app-design--like sharing permissions/features? Sure, everyone deep
down knew their company practices yield unfathomable power of influence over the daily habits of cell-users, a.k.a.
everyone. The easy part is knowing; the hard part is learning how and why certain app-features lead to behavioral
risks.</p>

<p>There could be no better example than the Alcoholic faced with an intervention by a loving family longing for change.
The alcoholic could be forgiven for past misdeeds, but without actual
<i>Acknowledgement</i> of a crisis in direction, which necessitates professional help from social scientists. Therefore,
the recent
<i>acknowledgments</i> signify something deeper--they signify a humility that app-designers are not sociologists, generally
speaking. <s style="color:purple">So, that means hiring sociologists, psychologists, anthropologists for every N
<small>th</small> app-coder and engineer.<s> History can&#39;t be rewritten, but it can be interpreted and learned
from. The acknowledgment is itself a victory if it induces learning from the raw, social sciences, whose expertise
<i>can</i> predict how or why certain &quot;life&quot;-features, practices, and policies often unfold with undue and
unintended social consequences.</p>

<p>Water under the bridge, but going forward, it is one thing to claim a &quot;renewed sense of remorse&quot;, another
to acknowledge, learn and change. Like last November
<sup>1</sup> when Facebook co-founder Sean Parker confessed certain designs like &quot;social-validation feedback loop&quot;
and other app-design intentions, while ignoring potential secondary effects on society. So, the
<i>Acknowledgment</i> is the big win here--not so much the remorse!</p>

<p>1.
<a href="https://digitaladdictsblog.com/facebook-co-founder-says-company-built-to-exploit-you/" target="_blank">https://digitaladdictsblog.com/facebook-co-founder-says-company-built-to-exploit-you/</a>
</p>
  `
  var blogpost10 = `
  
<p class="firstparagraph">7 Ethereum-based technological features offer us a new world -- a decentralized new world, not dependent on the centralized
servers and bandwidth of Instagram, Comcast, T-Mobile, Amazon, Google, etc. With that statement ends general consensus among blockchain
experts, pundits, and authors. However, if the current logistical obstacles provide controversy and competing algorithms
over sustainability, security, and scalability, then they reveal much more about the general pathway of social uses
(and potential effects) than they hide. In my February 15th
<a href="#18-02-15">blog</a>, I touched on a few features of micro-economic uses so as to distinguish the more certain aspects of the
crypto-contract horizon.</p>

<p>
<strong>Prologue</strong>
</p>

<p>So, what are some core features of block-chain technology that affect the quality of our lives, and the
<i>productivity</i> of our work as a society of academics, public-sector and private-sector professionals? First, a
little background and context before I outline seven blockchain functionalities. The Ethereum blockchain helps distinguish
itself--and its blockchain-native language Solidity--from earlier tech, like Bitcoin and other Proof of Work-based
blockchains. Ethereum blockchain offers a syntax and programming features, e.g. &quot;looping&quot;, &quot;recursion&quot;,
with the full power of a
<i>Turing Complete</i> language--that is, given enough resources, the language can solve any programmable problem.</p>

<p>More background and a clarifying metaphor are in order: The Bitcoin blockchain transaction resembles the accounting
system of a foos-ball table point rack with a basic calculator glued to the side. In contradistinction, An Ethereum
blockchain transaction would resemble a network of computers,
<i>which is itself,</i> a computer--hence, the name Ethereum Virtual Machine. This allows for Quickbooks to calculate
into a PDF to be sent via an email contract-signing program. Much more useful!</p>

<p>Therefore, Ethereum&#39;s Blockchain is more than a networked, chained list of blocks, like Bitcoin. The Ethereum
blockchain is actually a &quot;Virtual Machine&quot;, like a a big networked &quot;home computer&quot;. The native
language of the blockchain, Solidity, allows for an
<i>application binary interface</i>, ABI. So, for example, I can type up an Ethereum contract on my home computer,
then directly access by command line the blockchain itself. In layman&#39;s terms, the manner that modern-day app,
for example Instagram, is a centralized API (Application Programming Interface) that allows one programming system
to interact with another, such as Instragram offers a &quot;sharing API&quot; that connects to hardware contacts,
thus facitilating communicating with third-party aplications, like sharing your instagram picture to your Facebook
account, via your T-Mobile phone&#39;s contacts list. This API relationship broadly describes the modern world we
live in, wherein a Chryser driving system exchanges API information with your T-Mobile Bluetooth network system,
which exchanges API information with your own contact list, and so on, and our lives are made easier.</p>

<p>So, are we out of the woods? Has Ethereum solved the blockchain question? Yes, if it were the 1920 pre-relativity
days; However, with the advent of quantum computing, potential security vulnerabilities immediately arise. The reason
being that digital math uses binary &quot;on/off&quot; calculations, while quantum math implicates a tertiary,
<i>qubit</i> &quot;simultaneous states&quot;. Therefore, we have now entered the 3rd generation of blockchain technology,
both programmable, but also quantum-proof due to mathematical graph features. For example, IOTA&#39;s blockchain
design utilizes a
<i>Winternitz One-Time Signature</i>, by which one&#39;s transaction is entered into with a private-key, and the blockchain
moreso resembles a &quot;Tangle&quot; of a directed graph, which allows for computational &quot;states&quot;. IOTA
recently garnered criticism in January 2018 due to an unfortunate crypto-hack, that exposed an apparent vulnerability.
In truth, this was a case of user-error because users were
<i>re-using</i> their one-time keys, which significantly decreases security to the point that a home computer could
crack the code! I choose to not digress further, and quantum computing is not quite advanced enough now to cause
damage, but in the future could potentially split the blockchain in two, or other quantum possibilities.</p>

<p>In sum, the technical obstacles change each month, however one must not lose sight of the forest for the trees. Social
useablity, potential scope and of course unintended consequences have all finally begun to emerge, at least in form,
with little difference between the 2nd generation blockchain or the 3rd generation Patrician directed graph blockchain.
The underlying principle of the blockchain&#39;s micro-economic utiliity through crypto-
<i>contracts</i> is the same, as opposed to plain crypto-currency. you know the usual bartering solutions for Supply
&amp; Demand leading to Economics Game Theory, etc. This is where we must take our leave of the Hard Sciences of
Mathematics, and enter the realm of Sociology, Psychology, Anthropology and Economics.</p>
  `
  var blogpost9 = `
  <p class="firstparagraph">The guiding light through the centuries of scientific paradigms, in the Kuhnian sense
<sup >1</sup>, have derived from deductive ideas from above - whether priestly or royal decree. Then, the primacy of the
<i>Scientific Method</i> from the Renaissance forward--punctuated first by Copernican Heliocentrism, then other Paradigm
Shifts--has directed rational and ethical norms in each respective period, e.g. Enlightenment authors of 17th, 18th
century. Fast forward to the modern period, wherein the current era&#39;s emerging paradigm holds Sharing as a collective-priority
and responsibility, then an amazing philosophical moment.
<i>Historical Materialism</i>
<sup>2</sup> prescribes what is directly here a novel Paradigm Shift by which authority is not derived from governmental,
financial sources, but rather the
<i>shared</i>societal consensus about cryptographic, mathematical proofs as true authority. Further, the revolutionary
shift also innately provides tools for implemention through decentralized, programmable data-sharing. Cryptography
has in a sense become a
<i>de jure</i> middle-person for identification and verification of property.</p>

<p>
<strong>I. Protecting rights through immutable records</strong>
<br /> Inalieable Rights can now be identified and verified by the cryptographic authority of a mathematical proof, rather
than exclusively through governmental or financial institutions from above. The modern period also has held this
decentralized, individual authority as the
<i>a priori</i> starting points for philosophical proofs. Premises about truth begin with the conditions of humankind,
not idealogies. In fact, it was the
<i>Young Hegelians</i> of early 19th century Vienna &amp; Berlin, who ushered in the Modern Era of Western Philosophy,
by laying out Truth as inverted, beginning from the empirical &quot;ground&quot; upward. This &quot;upside-down
tree&quot; defines philosophical modernity. Jean-Paul Sartre wrote that the whole of
<i>Existentialism</i> and 20th century philsophy is a mere subset, and never escapes Continental Materialism, as argued
in Sartre&#39;s
<i>Search for a Method</i>.
<sup>3</sup>
</p>

<p>All of the Sciences, prodded by this Truth of Empiricism, followed suit through all the tech innovations since Hegel.
I&#39;m so surprised by this, because for me, the role of cryptography is shocking on two levels. First, cryptography
resemblees philosophy rather than the Empiricism that I had envisioned would govern social rule (Some once thought
nuclear sciences held this role--no longer! Mathematics takes the crown. Secondly, I&#39;m still dumbfounded that
a Paradigm Shift
<i>first</i> offers the tools to fulfill itself? Staggering to consider the arbitrary changes ahead for a society that
is provided the tools of social structural change first, but how quite convenient!</p>

<p>
<strong>II. Bureaucratic Atomization in a True Sharing Economy</strong>
</p>

<p>It is satisfyingly reassuring to see the good-natured, altruistic efforts among the thousands, upon thousands of
open-source volunteers, and blockchain innovators, like Vitalik Buterin author of Ethereum Virtual Machine, whose
aims and efforts make staggering progress each quarter. The potential for removing the &quot;middle-person&quot;
from the day-to-day, micro-economic &quot;cost of living&quot;. This goes for for the exchanging of titles, legal
documents, etc.</p>

<p>Sharing of Resources is, in my personal opinion, critical to global future--both out of increasing necessity in allocating
increasingly limited resources; an arbitrary rearrangement of
<i>Social Structure</i> and distribution of its resources. While the exponential population growth looms on the near
horizon, a clear, pre-existing solution begins with a focus on
<i>smart</i>, effective sharing of resources. The driving principle of sustainability is made convenient by means of
blockchain technology, extending for example to local economies, cooperatives, ride-sharing, etc.</p>

<p>
<strong>III. Removing Double-Dipping from International Remittances </strong>
</p>

<p>
<i>&quot;Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.&quot;
</i>
<br /> --Antoine de Saint-Exup&eacute;ry, 1939</p>

<p>Taxes and tariffs are difficult enough, the double-dipping of the current international remittance system, &aacute;
la Western Union, does not reflect the global, sharing Economy of 2018. The existing remittance system (not speaking
to
<i>centralized</i>, middle-man alternatives like PayPay, etc.)--supposing if I wire $2 Loonie to a Canadian friend&#39;s
Canadian Bank--requires payments executed through two separate bank transactions in two national payments systems,
thus the sending country and receiving country each take a cut. Like everything else--c&#39;est la vie. Or is it?
The beauty of Ethereum is that it &quot;talks&quot; well with others and across borders, while Bitcoin remains of
little use for micro-transactions that involve semi-basic calculations. The reason being that Bitcoin blockchain
language, Script, cannot support loops (while statements, etc.)</p>

<p>Currently, both EOS and Ethereum blockchains appear poised for the most financial-friendly blockchain tech.</p>

<p>1.
<a href="https://www.economist.com/news/business/21722869-anti-establishment-technology-faces-ironic-turn-fortune-governments-may-be-big-backers"
target="_blank">https://www.economist.com/news/business/21722869-anti-establishment-technology-faces-ironic-turn-fortune-governments-may-be-big-backers</a>
</p>

<p>2.
<a href="https://blog.ethereum.org/2016/02/09/cut-and-try-building-a-dream/" target="_blank">https://blog.ethereum.org/2016/02/09/cut-and-try-building-a-dream/</a>
</p>

<p>3.
<a href="http://www.bard.edu/library/arendt/pdfs/Sartre-Search.pdf" target="_blank">
<i> Search for a Method</i>, Jean-Paul Sartre, 1957</a>.
<br />
<small>Sartre would later be awarded the Nobel Prize in 1964, but declined it.</small>
</p>

<p>
<a href="https://projektintegracija.pravo.hr/_download/repository/Kuhn_Structure_of_Scientific_Revolutions.pdf" target="_blank">4. Kuhn, Thomas, The Structure of Scientific Revolutions, </a>
</p>

<p>
<a href="https://hbr.org/2017/01/the-truth-about-blockchain" target="_blank">5. Harvard Business Review,
<i>The Truth about Blockchain, Feb. 2017. (This is an older article, but very clear &amp; insightful)</i>
</a>
</p>
  `


  var blogpost8 = `
  <p class="firstparagraph">I feel that data is one of the more underestimated new commodities of the age. Most visualize data as rows and columns,
and at most only non-conditional dynamic data. Data are not so mute! Data, in most object-oriented languages at
least, represents
<i>functions</i>, conditions, and predicted values. And so, our own behavior, coupled with our networks&#39; behavior,
coupled with predictive analytics--this represents a wealth of information beyond our attributed or inherited traits.
The programming is
<i>in</i> the data, however, citizens have become less and less involved, ceding app by centralized app our own information
and ensuring profit to 3rd party marketers. The centralized nature of the internet allows for this, while the new
landscape of
<i>decentralized applications</i> (DAPP) completely upends this structure of the status quo.</p>

<p>
<strong>IV. Enabling citizens to own &amp; monetize their data (&amp; protect privacy)</strong>
<br /> Ethereum offers a decentralized solution to &quot;owning&quot; one&#39;s own data, as data can be decentralized
and returned to the individual&#39;s control, and
<i>profit</i>. As sure as the 19th century&#39;s &quot;labor-hour&quot; became commodified to a calculable asset, i.e.
property, which
<i>another</i> party controls and makes profit; And as sure as the 20th century&#39;s data analytics became commodified
into calculable assets for another party to take control and make profit; then only now in this 21st century does
technology offer a new, more egalitarian path.</p>

<p>
<strong>V. Ensuring compensation for the Creators of Value </strong>
<br /> So, how would decentralized innovations of blockchain
<i>distributed ledger</i> technology compensate those whose actions, behavior, opinions, friend-networks, artwork,
music, videos and other contributions profit the creator?</p>

<p>
<strong>VI. The Halcyon Age of Transaction-Chain Enterprise</strong>
</p>

<p class="quote">According to Greek Mythology, the days of eery, noticeable lack of storms have never been interpreted as a period
of grace. Moreso,
<i>Halcyon</i> tranquility only means a temporary moratorium on the winds and waves, imposed by Aeolus, God of Wind,
to protect the nesting eggs of Alcyone, his daughter.</p>

<p>If blockchain tech changes how we do research, analysis, and forecasting, as much as it changes international, and
cross-industry transactions, then are we faced with a similar dilemma as the &quot;novelty&quot;, and double-dealing,
of multi-nationals of the 1990s? No, because blockchain renders organizations, even those with a spotty past, into
transparent, democratic, efficient, secure and easily scrutinized.</p>

<p>After all, without transparent proof, how else would I know my bananas are the &quot;pura vida&quot; Costa Rique&ntilde;
ones? More importantly, what was the carbon footprint of that banana&#39;s journey from its native soil to my breakfast
table? New blockchain companies like
<a href="https://www.provenance.org/">Provenance.org</a>,
<a href="http://www.skuchain.com/" target="_blank">skuchain</a>,
<a href="http://www.blockverify.io/">http://www.blockverify.io/</a> are a few noticeable game-changers. So, for bananas not backed by mathematical proofs,
I really have to ask myself, is it
<i>really</i> an authentic Fair Trade banana?</p>

<p>Transactions are hardly valuable in the products themselves, if removed from the value of the
<i>transaction per se</i>. International supply chain transactions, by virtue of a recently possible decentralized,
permanent record and monitoring, have begun to make inroads in agriculture, petroleum, pharmaceuticals, food-supply
and other multi-stage industries.</p>

<p>If corporate and governmental transactions are to be made public--many bearing enterprise or State secrets, then
will forecasting also go the way of birds? Possibly. Online platforms like Augur
<sup  >8</sup>are creating global, decentralized prediction markets, in domains like sports betting, financial markets
speculation and so forth. Armed with vast, transparent knowledge, the everyday person can now access the whims and
power of Aeolus, and forecasting the winds of Fortune.</p>

<p>
<strong>VII. Reinventing Government &amp; Democracy</strong>
<br /> ...to be completed...</p>

<p>1.
<a href="https://www.provenance.org/" target="_blank"> https://www.provenance.org/ </a>
</p>

<p>2.
<a href="http://www.skuchain.com/" target="_blank"> http://www.skuchain.com/ </a>
</p>

<p>3.
<a href="http://www.blockverify.io/" target="_blank"> http://www.blockverify.io/ </a>
</p>
  `

  var blogpost7 = `
  <p class="firstparagraph">Today, I&#39;m going to write about data structures, and challenges that face Vitalik Buterin and other blockchain
architects. &#39; Now, why in the
<i>world</i> would I or anyone else care about ooh, merge sorts, bubble sorts, classificatory trees, and the advent
of a third form of data structure?</p>

<p>Today, we live in an ever more relational world. With all our technology, we just can&#39;t wait to hear the latest
gossip about sister Becky&#39;s Boyfriend&#39;s Brother&#39;s Friend that
<i>also</i> got to meet Shakira. Gossip to one person is a valuable asset to the data analyst. Because, how else could
an algorithm draw simultaneous conclusions about two friends that &quot;liked&quot; the same Samsung VR, and that
they are both located near Best Buy. Thanks to classificatorial wisdom of AI &amp; plain machine-learning?</p>

<p>These relational queries are simply too difficult for relational, row &amp; column SQL data structures. In fact,
many queries are impossible, due to unprescient database schema architectures. Next, with the need to &quot;objectify&quot;
data into non-relational objects, rather than an antiquated, rigid row-and-column design. Thus, the second major
type of data structure is more flexible and adept in finding these relational queries that are ever more in vogue.
However, the crystal-like, pristine non-relational, No-SQL designs quickly turn to spaghetti, and are poor for scalability.
Between a rock and a hard place, a third data structure has emerged in recent years.</p>

<p>Graph Data Structures
<sup>2</sup> allow data queries that had otherwise been impossible to capture in an entity relationship diagram. The
ideal example to clarify is the manner that the Swiss banks&#39; accounts were discovered to be hiding vast amounts
of hidden taxes, etc. The cover-up was so well-constructed that not until new, graph database queries discovered
patterns of money flow
<sup>1</sup>:</p>

<p class="quote">The data was then turned into a graph format to detect then fine-tune the connections between the nodes. The Swiss
Leak held around 60,000 files that contained information about over 100,000 clients in 203 countries, which means
that the resulting graph database had more than 275,000 nodes with 400,000 relationships among them.</p>

<p class="quote">By being able to easily visualise the networks around clients and accounts, the reporters found many more connections
than they had before, which lead to the Swiss Leaks revelations soon being shared with the public and regulators
across the globe.</p>

<p>And you thought that plagiarism-detecting software was impressive for complexity! The beauty of this newly available
software (even Microsoft jumped on board in recent years) means that sociologists, economists can begin to make
better headway in the way that our many interactions become more complex with more data. Remember, in the past ten
minutes, more data information was just produced than most of human history! Thus, new and upcoming needs in domains
like content management &amp; access control, geo-routing (public transportation), gene sequencing, bio-informatics,
and so on. So, as technology takes us forward, and we make our considerations, let&#39;s stick by the golden rules
of parallel processing, scalability, and, now, graph-network mindedness for the new data structures, and schema,
of the Era!</p>

<p>1.
<a href="https://www.globalbankingandfinance.com/how-a-graph-database-unearthed-major-financial-improprieties/"
target="_blank"> https://www.globalbankingandfinance.com/how-a-graph-database-unearthed-major-financial-improprieties/ </a>
</p>

<p>2.
<a href="https://neo4j.com/blog/analyzing-panama-papers-neo4j/">By being able to easily visualise the networks around clients and accounts, the reporters found many more connections
than they had before, which lead to the Swiss Leaks revelations soon being shared with the public and regulators
across the globe. </a>
<br /> Other major vendors in graph data structures based on Neo4j: OrientDB, ArangoDB, Titan, mongoDB, Complexible Stardog,
and Franz AllegroGraph.</p>
  `

  var blogpost6 = `
  <p class="firstparagraph">While I&#39;ve had blockchain-related topics on the mind lately, it seems I can&#39;t escape it as I broach new fields--blockchain
  is everywhere! Well, I had begun my blog with intentions about the accelerated speed of language and syntax formation,
  and the curious phenomenon I&#39;d call, for lack of a better word or or my own reading, &quot;declarative-syntax-merging&quot;.
  This involves the curious, and largely unknown, growth of JavaScript scripting language into almost every domain
  of web apps, data analysis, and even the bounds of
  <i>Logic</i> itself. Though I won&#39;t submit my readers to a history of a language, suffice it to say that, &quot;If
  a certain algorithm, device, or object is programmable, then it will eventually be programmed in JavaScript.&quot;</p>
  
  <p>Without getting into technicals, I&#39;ll instead use a perfect metaphor--the manner by which English merged with
  French, beginning with the conquests of William of Normandy, around 1096 onward. Almost a thousand years later,
  we can see how English grammar inherited it&#39;s Anglo-Saxon Linguistic roots, along with the core vocabulary;
  Then, as English vocabulary moves past the first few thousand core words, e.g. &quot;milk&quot; or &quot;house&quot;
  from &quot;melche&quot; or &quot;haus&quot;, then more than 70% of English Vocabulary is directly inherited from
  French, e.g. &quot;lactose&quot; or &quot;mansion&quot; from &quot;lait&quot; or &quot;maison&quot;.</p>
  
  <p>Similarly, the language of the web and original browsers, JavaScript, has similarly morphed into a new language called
  Solidity, but in only a micro-fraction of English&#39;s time. The usual FOMO logic propels coding language use,
  for example FOMO induced Microsoft&#39;s flagship Text Editor, Visual Code, to adopt it years ago.
  <sup >1</sup> The language of Ethereum Blockchain is Solidity, which like the above example, has two parents, one non-legitimate.
  It is in all respects totally JavaScript, yet with object-oriented elements of C++. For the layperson, let&#39;s
  just say Solidity resembles a &quot;Liger&quot;, in it is at it&#39;s core JavaScript, yet with increasing sophistication
  based on C++ logic, its head and torso has begun to resemble the powerful machine-code of C++ ever more. And it
  is a beautiful, but curious phenomonenon.</p>
  
  <p>
  <a href="http://www.ibtimes.co.uk/microsoft-adds-ethereum-language-solidity-visual-studio-1552171">http://www.ibtimes.co.uk/microsoft-adds-ethereum-language-solidity-visual-studio-1552171</a>
  </p>
 
  `


  var blogpost5 = `<p class="firstparagraph">1.4 million
  <i>new</i> jobs by 2020; End over end, year after year, the computer programming industry continues to add another
  20% more jobs each year, for the next five years. This is the only field that demand outstrips the supply--and increasingly
  short supply. So much so, the US Department of Labor forecasts U.S. citizens will be able to fill 39% of those positions;
  there are not enough Immigration visas (especially in the Trumpian era of isolationism) to make up the rest.</p>
  
  <p>&nbsp;</p>
  
  <p>So, how is it that only 14% of females in the entire field of cybersecurity? Silicon Valley is, at its best, obscenely
  one-sided. At Google, only 17% of the company&#39;s tech jobs are filled by women. Facebook women staff only 15%
  of tech jobs, and Twitter? 10% female. The figures on women in computer science across the nation, across the entire
  industry are not improving, but
  <i>declining</i>?
  <sup>1</sup>
  </p>
  
  <p>Of course, we&#39;ve heard these statistics from any given headline, and in the halls across the university landscape,
  starting with Women in STEM (Science, Tech, Engineering, Mathematics) programs.
  <sup>3</sup> Yet, why, with so much money, so many programs, so many non-governmental, non-profit effort?</p>
  
  <p>I argue that tech
  <i>climate </i> is directly to blame. Who then? Not a person, but principles are to blame. Culture--often defined as
  shared beliefs, norms, language and behaviors--can hardly be changed, but it can be understood.
  <br /> There is a book, called &quot;Program or be Programmed
  <sup id="24-4">4</sup>
  </p>
  , by which the author explains social consequences of a dichotomized society--between those that manipulate the environment
  around them, whether automating tasks at work, or simply fixing a simple software bug, by adding a comma. This literacy
  of the Current Era is akin to the 26-letter alphabet of written sentences and paragraphs, and--not to be taken for
  granted--is the exclusive form of communication, outside of a 100-foot perimeter, up until 150 years ago. Knowledge
  is not power, the communication of knowledge is power.
  
  <p>&nbsp;</p>
  
  <p>I argue that today, the power is to program one application programming interface (API) to talk to another API. In
  other words, the ability to directly communicate with software at the command-line is not now a requisite skill,
  but promotions would not escape this necessity! So, now reverting back to the subject of women in tech, American
  leadership is in deep peril without more female insight. I will finish by citing that Ares, the violent, untamed
  Greek
  <i>god of war</i>, cannot always drive the Capitalist engine; because She, Athena, the
  <i>goddess of intelligence</i> represents true strategy!</p>
  
  <p>1.
  <a href="https://www.huffingtonpost.com/2015/03/27/women-in-tech_n_6955940.html" target="_blank">https://www.huffingtonpost.com/2015/03/27/women-in-tech_n_6955940.html</a>
  </p>
  
  <p>2.
  <a href="https://fairygodboss.com/articles/women-in-tech-facts-figures-and-percentages" target="_blank">https://fairygodboss.com/articles/women-in-tech-facts-figures-and-percentages</a>
  </p>
  
  <p>3.
  <a href="https://www.aauw.org/research/why-so-few/" target="_blank">https://www.aauw.org/research/why-so-few/</a>
  </p>
  `

  var blogpost4 = `<p class="firstparagraph">While coding up a better shell for this website, I thought it&#39;s remarkable how our lives get easier and easier
  with each passing year of tech. Using JavaScript--the primordial web-coding language--I marvel at the convenience
  of delegating mundande coding stuff to taskrunners, like
  <i>Gulp</i>--a programmable package manager that &quot;bundles&quot; up the libraries to be used in the app. It is
  truly a joy!</p>
  
  <p>I write four styling
  <i>functions</i>, with about 16
  <i>variables</i> and voil&agrave;! I finish in 3 hours what would have taken me 15 hours, then another 5 hours a month
  for upkeep. Instead, now, it&#39;s as though I wind up the clock, and need only periodically check, and perhaps
  update a variable or two ... Technology. I&#39;m gushing for joy.</p>
  
  <p>This was mere JavaScript--with a truly
  <i>Turing Complete</i>--pan-algorithm status--languages, the possibilities are 100-fold with Python language library
  collection; this library collection includes NASA modules, mathematical proofs, and limitless uses from web-scraping
  for unstructured data to an excellent data visualization collection. Sometimes I feel like I&#39;m in the Library
  of Congress, and better yet because, PIP, the Python package manager acts and automates like a cyborg librarian,
  for lack of better imagery.</p>
  
  <p>I just have so much joy watching a project come to life, and it&#39;s even a greater delight if this project comes
  to life and stays alive, through the joys of automation!</p>
  `

  var blogpost3 = `
  <p class="firstparagraph">I must confess that on the very day that Our Daily Tech Blog gets an under-the-head make-over for security&#39;s
  sake, I wrote the new formatting file right over today&#39;s post. Amazing, and the two occurred nearly simultaneously
  as I worked on them, their paths crossed and poof, gone! Same platform, and I paid the price! Whether I change my
  ways is yet to be seen, but I shall continue with my original theme for the day, namely, Sustainability, a.k.a.
  Carbon Footprint.</p>
  
  <p class="quote">Power consumption is one of the major costs of bitcoin mining, as dedicated machines crunch the algorithms that build
  a record of every single bitcoin transaction and are rewarded with tiny fractions of a bitcoin for their efforts.
  <sup >1</sup>
  </p>
  
  <p>Today I have a mild Critique and Praise for the blockchain sustainability problem caused by sky-high electricity
  bills! Computer algorithms do waste electricity, not like your Widescreen. More electricity is gobbled up by small
  and large mining operations in nearly every country than small nations!
  <sup >1</sup>. Ethereum, Bitcoin and a handful of other &quot;Proof-of-Work&quot; designs require electricity because
  the investment in equipment itself is investment, but more importantly, two-way incentivation for mining drives
  the system, and the scarcity demand through difficulty computations.</p>
  
  <p>So, is the electricity consumption really
  <i>correlated</i> with the value, scarcity, of the currency? Yes. Digiconomist--a cryptocurrency analysis site
  <sup
  id="digiconomist">3</sup> estimates
  <i>each</i>Ethereum transaction represents a 45 Kilowatt-hour of electricity&#39;s mining. (A visa credit card transaction
  is 0.00651 kWh. The entire Ethereum global blockchain could be &quot;using as much as 4.2 Terawatt-hours (tWh),
  or slightly more than the country of Cyprus
  <sup  >1</sup>.&quot; So, electricity comparisons are telling, but how does this relate to its environment impact, sustainability
  itself?</p>
  
  <p>Carbon Footprint, our energy consumption index, can be compared to another element of scarcity, which dictates fluctuations
  in value: Gold. According to
  <i>Digiconomist</i>, an average household&#39;s Carbon Footprint is about 10 tons of CO2 per year. The article does
  the math for us very succinctly:</p>
  
  <p class="quote">On top of this, we can find that the process of mining Bitcoin isn&rsquo;t just more energy-intensive, but also has
  a bigger environmental impact. To reach that conclusion, we first need to estimate the carbon footprint for both.
  For Bitcoin we can, again, get this number from the Bitcoin Energy Consumption Index. For gold, we assume a carbon
  footprint of 20 tons of CO2e per every kilogram of gold mined
  <sup >3</sup>.</p>
  
  <p>The article continues to clarify that 33,000 kilograms of CO2 per unit mines (comparatively, one Bitcoin&#39;s worth
  of Gold is 4,000 kilograms of CO2). At the end of the day, the electricity costs--if not sustainable long-term--could
  spell trouble. Hence, the three S&#39;s, mentioned last, sustainability is perhaps a larger issue than blockchain
  Security and Scalability challenges. Again, this is a problem that the third largest cryptocurrency does not have:
  <i>Ripple</i>, which does not bear a carbon footprint
  <sup >4</sup>.</p>
  
  <p>&nbsp;</p>
  
  <p>0.
  <a href="https://www.cnet.com/how-to/bitcoin-ethereum-or-litecoin-which-cryptocurrency-is-best-for-you/" target="_blank">https://www.cnet.com/how-to/bitcoin-ethereum-or-litecoin-which-cryptocurrency-is-best-for-you/</a>
  <br /> For those new to cryptocurrencies, this is a fairly succinct article to cryptocurrencies, and their underlying
  structure.</p>
  
  <p>1.
  <a href="https://motherboard.vice.com/en_us/article/d3zn9a/ethereum-mining-transaction-electricity-consumption-bitcoin"
  target="_blank">https://motherboard.vice.com/en_us/article/d3zn9a/ethereum-mining-transaction-electricity-consumption-bitcoin</a>
  </p>
  
  <p>2.
  <a href="http://www.wired.co.uk/article/how-much-energy-does-bitcoin-mining-really-use" target="_blank">http://www.wired.co.uk/article/how-much-energy-does-bitcoin-mining-really-use</a>
  </p>
  
  <p>3.
  <a href="https://digiconomist.net/bitcoin-mining-more-polluting-than-gold-mining" target="_blank">https://digiconomist.net/bitcoin-mining-more-polluting-than-gold-mining</a>
  </p>
  
  <p>4.
  <a href="https://ripple.com/xrp/" target="_blank">https://ripple.com/xrp/</a>
  </p>
  `
  var blogpost2 = `<p class="firstparagraph">In my reflections about environment sustainability issues, I confess I&#39;m sort of a hypocrite ... The whole matter
that caused my own introspection begins with my usual daily vexation: Tangles of wires!
<br /> &nbsp; ... I&#39;ve been having electricity issues, here as of late ...</p>

<p>On one side, my tiny Yoga Ultrabook usually likes to charge just fine with my phone charger--if I&#39;m stuck without
my charger. And due to an untimely end to the charger, I needed a replacement. So, singular errand of the day was
a trip to Best Buy to peruse for a 45-Watt USB-C charger ( the new oval charging port on Samsung 8&#39;s, LG G6&#39;s
and newer Apple products).</p>

<p>Meanwhile, my credit-card sized Raspberry Pi computer runs on an old-school USB charger--a whole Linux Server Tower
on a cell-phone charger. Then, we have my trusty Dell (actual) Tower with 16 Gigs of RAM, 2-terabytes, etc. that
also seems to need an extra fan to stay cool--probably the sustainability of 100 Raspberry computers. My entire
carbon footprint changes more with the electrical products that I use, than my vehicle! Well, I also confess my
Jeep Cherokee can&#39;t even boast 20 miles per hour ... oops, conscience pangs, ouch ... Well, hypocritical, slightly,
but found not guilty since I&#39;m a bike-commuter for life!</p>
`
  var blogpost1 = `
<p class="firstparagraph">Environmental Sustainability, again, and a higher-level view of the dilemmea...I couldn&#39;t resist:
<br /> Bitcoin&#39;s Initial Coin Offering was 2011 or so, then Ethereum, with Ether for currency was 2015; These two,
ever so prescient designs, also have their Achilles Heal. These two are
<strong>&quot;Proof of Work&quot; currency algorithsms</strong>. This means that the &quot;Demand&quot; side of supply-and-demand,
derives from
<i>difficulty levels</i> of crypto-blocks to mine. So, miners are incentivized to spend $1500 on a semi-mediocre-good
mining rig (which is basically 20 NVIDIA Graphics Cards tied together to stack of two-by-fours with lots of fans
... erhem, sustainability?...</p>

<p>And for each block that is &quot;solved&quot;, hence the block being validated, and somebody&#39;s cryptocurrency
purchase/transaction is resolved! (takes about 12 minutes for the whole global blockchain to cycle, and Ethereum
is less than a minute). So, the whole cycle continues, churning through coal- and carbon-stained hands of the electricity
fed to these crypto-mining rigs
<sup>1</sup>. For many it&#39;s a hobby, like the British Hobbyists&#39; love for ham- and short-wave radio setups, yet
this profitable, yet particular hobby resembles the 1870&#39;s coal factory smoke stacks in South London!</p>

<p>Let&#39;s face it, if Ethereum is able to successfully hard-fork to a Proof-of-Stake system soon--and Vitalik Buterin
and his crew assure us it is coming
<sup>2</sup>--then great--problem solved, everything eventually converts to Ethereum. If
<i>not</i>they face an existential threat. Because, in a more enlightened ten years from now, those mining depots
<i>would</i> look like unfettered factory smoke-stacks. Proof-of-Stack, whose currency value is not set to difficult
of algorithm puzzle (hence,
<i>proof-of-work</i>, but rather to ownership of &quot;voting pools&quot;, which is a
<i>
<strong>Consensus-Based Blockchain algorithm</strong>
</i> [Complex subject best reserved for a rainy day, or better yet, no day! I may revisit this alternative in a funner
way, here&#39;s a glimpse from Vitalk&#39;s @VitalikButerin tweet yesterday:</p>

<p class="quote">Question for mathematicians: is there a assumed-to-be-normal number (ie. digits are random, like pi or e) where you
can calculate the nth digit in log(n) (or even polylog(n)) time? If so, then H(x) = digits[x ... x+100] seems like
it would be a cool cryptographic hash algo.</p>

<p>Now, I am by no means a detective, but by the sound of those tweets, the Proof-of-Work algorithm seems to still be
of utmost importance ...</p>

<p>1.
<a href="https://blockexplorer.com/news/ethereum-launches-casper-testnet-paving-way-proof-stake/" target="_blank">https://blockexplorer.com/news/ethereum-launches-casper-testnet-paving-way-proof-stake/</a> and also,
<a href="https://www.trustnodes.com/2017/11/28/ethereums-proof-stake-casper-testnet-nears-launch"
target="_blank">https://www.trustnodes.com/2017/11/28/ethereums-proof-stake-casper-testnet-nears-launch</a>
</p> 

<p>Copyright &copy; 2018 All Rights Reserved. &nbsp; | &nbsp;
<a href="http://www.thomasmaestas.net" title="Contact Information: thomasmaestas.net/">
  thomasmaestas.net</a>&nbsp; | &nbsp;
<img src="dist/img/paypal.PNG" alt="PayPal Emblem" height="
15"></img>
<a href="https://www.paypal.com/paypalme/ThomasMaestas" style="color:white;text-decoration:none;">
  &nbsp; Blog Support Appreciated!</a>
</p>
`
  var url =  
     [ /*
       {
    id: '17',
    did: '18-02-10',
    date: 'Feb 10, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain <h6>First Blog Post!</h6>',
    title: 'Why are Sociologists now the Key Players in Data Analysis within the Domain of Blockchain Technologies?',
    post: blogpost17,
    done: true,
  }, 
  */
 {
    id: '16',
    did: '18-02-11',
    date: 'Feb 11, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Web Dev Affairs',
    title: 'How Can We Best Modularize our App Designs in Order to Achieve the Much Vaunted &quot;Separation of Concerns&quot;?',
    post: blogpost16,
    done: true,
  },
  {
    id: '15',
    did: '18-02-12',
    date: 'Feb 12, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Web Dev Affairs',
    title: 'Mark Zuckerberg&#39;s Innocence',
    post: blogpost15,
    done: true,
  },

  {
    id: '14',
    did: '18-02-13',
    date: 'Feb 13, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Sociology Tomorrow!',
    title: '3rd Generation Blockchain: How Fast can the Blockchain Operate? Part III: : The Challenges for the Directed Acyclic Graph (DAG) with Ripple and  Iota Coin',
    post: blogpost14,
    done: true,
  },
  {
    id: '13',
    did: '18-02-14',
    date: 'Feb 14, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Sociology Tomorrow!',
    title: 'A New Kernel, and the Manifestation of a Two-Hundred Year Problem named <i>Anomie</i>',
    post: blogpost13,
    done: true,
  },
  {
    id: '12',
    did: '18-02-15',
    date: 'Feb 15, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'After Yesterday&#39;s Scathing Post, A Look at my own Carbon Footprint',
    post: blogpost12,
    done: true,
  },
  {
    id: '11',
    did: '18-02-16',
    date: 'Feb 16, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Web Dev Affairs',
    title: 'Tech on the Regret: Unintended, secondary effects of communication- and activity-based app-designs',
    post: blogpost11,
    done: true,
  },
  {
    id: '10',
    did: '18-02-17',
    date: 'Feb 17-18, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Blockchains, Bitcoins and The Unnecessary Risk of Shopping at Target with a Credit Card, Part II:<br /><br /> Seven Nuts &amp; Bolts Features of the New Blockchain Micro-Economy',
    post: blogpost10,
    done: true,

  },

  {
    id: '9',
    did: '18-02-19',
    date: 'Feb 19, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Blockchains, Bitcoins and The Unnecessary Risk of Shopping at Target with a Credit Card, Part III:<br /> Seven Features of the New Blockchain Micro-Economy',
    post: blogpost9,
    done: true,
  },
  {
    id: '8',
    did: '18-02-20',
    date: 'Feb 20, 2019',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Cryptocurrency&#39;s Cumbersome Carbon Footprint',
    post: blogpost8,
    done: true,
  },
  {
    id: '7',
    did: '18-02-21',
    date: 'Feb 21, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Facebook-Friendly Third-Generation Data Structures',
    post: blogpost7,
    done: true,
  },
  {
    id: '6',
    did: '18-02-22',
    date: 'Feb 22, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Languages',
    post: blogpost6,
    done: true,
  },
  {
    id: '5',
    did: '18-02-23',
    date: 'Feb 23, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Sociology Tomorrow!',
    title: '1.4 Million Reasons for more Women in Tech',
    post: blogpost5,
    done: true,
  },

  {
    id: '4',
    did: '18-02-24',
    date: 'Feb 24-25, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Web Dev Affairs',
    title: '3rd Generation Blockchain: How Fast can the Blockchain Operate? Part III: : The Challenges for the Directed Acyclic Graph (DAG) with Ripple and  Iota Coin',
    post: blogpost4,
    done: true,
  },
  {
    id: '3',
    did: '18-02-26',
    date: 'Feb 26, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'Cryptocurrency&#39;s Cumbersome Carbon Footprint',
    post: blogpost3,
    done: true,
  },
  {
    id: '2',
    did: '18-02-27',
    date: 'Feb 27, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'After Yesterday&#39;s Scathing Post, A Look at my own Carbon Footprint',
    post: blogpost2,
    done: true,
  },
  {
    id: '1',
    did: '18-02-28',
    date: 'Feb 28, 2018',
    author: 'by Thomas Maestas, MA',
    cat3: 'Musing Blockchain',
    title: 'One Last Word about Bitcoin&#39;s Carbon Footprint',
    post: blogpost1,
    done: true,
  }
];

  for (i=0;i<url.length;i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    </div>` 
    
    document.getElementById("paragraph-feb").innerHTML += cat;
  }
  
var i;
  for (i=0;i<url.length;i++){ 
    var catMod = `
    <div id="${url[i].did}_mod" class="blogDivMod"> 
    <hr />  
    <a href="#top-mod"><button>Top</button></a>   
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}</div>
    </div>`;
    
document.getElementById("paragraph-feb-mod").innerHTML += catMod;
} 

console.log('blogger-feb');
  // console.log(angular.toJson(url));

};

bloggerFeb();
// https://www.digitaltrends.com/home/mui-wood-smart-display-ces-2019/'use strict'; https://www.latimes.com/business/la-fi-spacex-layoffs-20190111-story.html
// 'use strict';  
 
//june 
// http://nautil.us/issue/64/the-unseen/the-fourth-copernican-revolution
// https://www.theatlantic.com/science/archive/2018/09/your-dna-is-not-your-culture/571150/

var bloggerJan = function () {  

  var blogpost1790 = `<p class="firstparagraph">Bitcoin's carbon footprint -- matching yearly Kilowatt usage as Portugul -- shows an example of the need to improve the technology. The Electrical drain from "Proof-of-Work" blockchain designs, like Ethereum and Bitcoin, makes the demand of scarcity through computationally difficult 'blocks'. That is the 'weight' worth in gold, at least cryptographically: <strong>A computer had to sweat alot so that <i>I</i> could own a piece of bitcoin.</strong> The problem is this makes for a lot of hot computing around the globe--a problem that grows with more ecological climate change.</p>

  <p class="quote">Developers plan to ditch proof-of-work, the algorithm that the network currently uses to determine which transactions are valid and protect it from tampering, in favor of proof of stake, where the network is secured by the owners of tokens.
<br /><br />
  If and when that algorithm is rolled out, proof-of-stake could be a means for achieving distributed consensus that uses fewer resources.<sup>1</sup>
  </p>
  <p>So this is the conundrum with a long-term blockchain plans for ecological responsibility. Right now, Environmental hopes, like mine, are invested in Ethereum's planned migration to a "Proof-of-Stake" design... 
  </p>
  <p class="quote">   At the cutting edge of blockchain research is a potential $15 million dollar venture by the Ethereum Foundation centered around a technology called Verifiable Delay Functions (VDFs).

  Acting as a source of computer-generated randomness that is unpredictable and unbias-able, VDFs are envisioned for use in a highly-anticipated “proof-of-stake”(PoS) system called Serenity which the ethereum network will migrate to in the next few years.
  
  What’s more, the ability to generate secure randomized numbers – if implemented in Serenity – would be a feature that can be leveraged by all decentralized applications (dapps) on the platform once integrated into the ethereum codebase.
<br />
    <br />  
    Speaking to current viability studies on VDF technology, Ethereum Foundation researcher Justin Drake told CoinDesk:
    
    “We’re basically doing all this groundwork to make an informed go, no-go decision on the bigger project. The bigger project is 15 million dollars on that order of magnitude. So we want to make sure that if we do go ahead it’s going to be successful.”<sup>2</sup>
  </p> 
  <br />
  <img src="dist/img/bitcoin.jpg" class="zoom"   /><br />
  <p class="cite">Photo: <a href="https://digiconomist.net/bitcoin-energy-consumption">https://digiconomist.net/bitcoin-energy-consumption</a></p> `; 
    var blogcite1790 = `
  <p class="cite">1. (background)<a target="_blank" href="https://www.coindesk.com/ethereum-foundation-weighs-15-million-bid-to-build-randomness-tech">
  https://www.coindesk.com/ethereum-foundation-weighs-15-million-bid-to-build-randomness-tech</a></p>  

  <p class="cite">2. <a target="_blank" href="https://www.coindesk.com/information/ethereum-mining-works">
  https://www.coindesk.com/information/ethereum-mining-works</a></p>  
  `;  
 
 
  var blogpost1789 = `<p class="firstparagraph">Oracle the Great. Oracle the Fast. Oracle the Secure Database stands high among all Tech Giants. After all, aren't 99 out of a hundred SAP setups on Oracle DBs? ...with maybe an IBM DB2 on a blue moon. The Cloud Greats like Amazon, for instance, run their own servers using Oracle hardware--even their Aurora DB is a rendition of Oracle's legacy MySQL ...  
  </p><p>Such power <i>requires</i> trust in order to thrive. Yet it looks like Oracle's hyper-competitive <i>and possibly suspect</i> collecting habit of personal and marketing data makes for a real, even existential, conflict of interest vis-&agrave;-vis customers, and customers of customers:  </p>
  <p class="quote">Facing tough questions about its practices over the past year, Oracle’s advertising software division, known as Data Cloud, has implemented previously unreported dismissals. While Data Cloud has always been a small part of Oracle’s overall sales, Hurd, co-founder Larry Ellison, and other executives repeatedly cited it over the years as a bright spot in their otherwise humdrum business. That appears to be over. Investment bank Stifel Nicolaus & Co. estimates that Data Cloud delivered only about $500 million of Oracle’s $40 billion in sales last year. “What happened over the past couple years is, the nebulous concerns people may have had about what companies were doing with personal data all of a sudden became very real,” says Blair Hanley Frank, an analyst at ISG, a technology research and advisory firm. “The risk to Oracle in all of this is what seemed like a somewhat ignorable value-add business a few years ago could all of a sudden become a big scary bugbear.”
  </p>  `; 
    var blogcite1789 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/news/articles/2019-02-06/oracle-didn-t-see-the-data-reckoning-coming">
  https://www.bloomberg.com/news/articles/2019-02-06/oracle-didn-t-see-the-data-reckoning-coming</a></p>  
 
  `; 
  var blogpost1788 = `<p class="firstparagraph">Oracle's lofty role of providing the globe's finest and fastest databases, also means a commitment--to some degree--of respect for privacy data. This power does require trust in order to survive: And, it looks like Oracle's hyper-competitive <i>and possibly suspect</i> (or negligent at best) habit equates <i>and in turn helps monetize</i> the ties and boundaries between personal data and marketing data ...  </p>
  <p class="quote">   
    If Company X wants to, it can ask Oracle to find people looking at images of its SUV, add the information to its consumer profiles, and then upload the data to Facebook, where the carmaker can target those people with ads for the same model.
  
    <br />
    That last part has gotten tougher in the past year. In March, after the Cambridge Analytica scandal revealed just how casually Facebook Inc. had shared user data with other companies for years, the social network’s clampdown on its own systems became a serious problem for Oracle ...<sup>1</sup>
  </p> 
  <br />
  <img src="dist/img/oracle.jpg" class="zoom" width="340px" /> `; 
    var blogcite1788 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/news/articles/2019-02-06/oracle-didn-t-see-the-data-reckoning-coming">
  https://www.bloomberg.com/news/articles/2019-02-06/oracle-didn-t-see-the-data-reckoning-coming</a></p>  
 
  `;  
   var blogpost1786 = `<p class="firstparagraph">Hecdraclitus' iconic maxim, "that no man has stepped into the same river twice, for it's not the same river <i> and he's not the same man.</i>" This phrasing underscores that Earth is a living, evolving organic Ecosystem, just like man/woman-kind makes for an evolving being, too. How much moreso, given our symbiosis with Earth. So, the future is double blind--making Life all the more interesting!</p>
  <p class="quote">

  Magnetic north has never sat still. In the last hundred years or so, the direction in which our compasses steadfastly point has lumbered ever northward, driven by Earth's churning liquid outer core some 1,800 miles beneath the surface. Yet in recent years, scientists noticed something unusual: Magnetic north's routine plod has shifted into high gear, sending it galloping across the Northern Hemisphere—and no one can entirely explain why.
  <br /><br />  
  The changes have been so large that scientists began working on an emergency update for the World Magnetic Model, the mathematical system that lays the foundations for navigation, from cell phones and ships to commercial airlines. But then the U.S. government shut down, placing the model's official release on hold, as Nature News first reported earlier this year.<sup>1</sup>
  </p>  `; 
    var blogcite1786 = `
  <p class="cite">1. <a target="_blank" href="https://www.nationalgeographic.com/science/2019/02/magnetic-north-update-navigation-maps">
  https://www.nationalgeographic.com/science/2019/02/magnetic-north-update-navigation-maps</a></p>  
 
  `; 
  var blogpost1785 = `<p class="firstparagraph">Memorization is a cultural topic and, contrary to many opinions, technology can't be directly blamed for waning interest. I helped judge a Speech and Debate Tournement last month, and there are no shortage of texting high-schoolers that <i>also happen to memorize long passsages of historical and political works</i>. Yet, this author makes some points about how far society has drifted ...</p>
  <p class="quote">Before every smidgen of knowledge was a mere Google search away, it was customary for students to memorize great works, from poems to famous political speeches to religious passages. In antiquity, "there were elaborate mnemotechnic ways of memorizing speeches," explained Katharina Volk, the director of undergraduate Classics studies at Columbia University, citing the method of Ioci and Ars Memorativa.  
  <br /><br /> 
   It was also customary to memorize far more prosaic works: In the U.S. and U.K. in the 19th century, "memorization was the default learning technique across the whole curriculum," said Catherine Robson, the author of Heart Beats: Everyday Life and the Memorized Poem. "To learn your lesson was to learn the passage in the textbook about the geography of Iowa. When it was your turn to be examined by the teacher, in the U.S. system you would go up to the recitation bench and you would recite that paragraph."
 
  <sup>1</sup>
  </p>
  <p>So, is the declining practice of memorization a function of culture or technology, or rather merely a cultural aberration that might revive, and catch on like the next big fad?</p>`; 
    
  var blogcite1785 = `
  <p class="cite">1. <a target="_blank" href="https://theweek.com/articles/820197/lost-art-memorization">
  https://theweek.com/articles/820197/lost-art-memorization</a></p>  
 
  `; 
  var blogpost1784 = `<p class="firstparagraph"> </p>
  <p class="quote">Gates' prediction: "Automated price comparison services will be developed, allowing people to see prices across multiple websites, making it effortless to find the cheapest product for all industries."
  <br /><br /> 
  Gates' prediction: "'Personal companions' will be developed. They will connect and sync all your devices in a smart way, whether they are at home or in the office, and allow them to exchange data. The device will check your email or notifications, and present the information that you need. When you go to the store, you can tell it what recipes you want to prepare, and it will generate a list of ingredients that you need to pick up. It will inform all the devices that you use of your purchases and schedule, allowing them to automatically adjust to what you're doing."
 
  <sup>1</sup>
  </p>
  <p>The author of future technologies does offer a certain vantage point over the horizon ...</p>`; 
    
  var blogcite1784 = `
  <p class="cite">1. <a target="_blank" href="https://www.entrepreneur.com/slideshow/327229">https://www.entrepreneur.com/slideshow/327229</a></p>  
 
  `; 
  
  var blogpost178 = `<p class="firstparagraph">Photography's trajectory spanning three centuries makes for a common thread of experience: <i>The Art of the Image Capture</i> lives above the mere tools for the job--whether a flash-bulb, or dark-room, or yes, an experience with the likes of 'Tappy' the Extraordinary Phone Bot!</p>  
  <p class="quote">
  It takes a lot of time and processing power to train an algorithm like this, but after the data centers have done their thing, it can be run on low-powered mobile devices without much trouble. The heavy-lifting work has already been done, so once your photos are uploaded to the cloud, Google can use its model to analyze and label the whole library. About a year after Google Photos was launched, Apple announced a photo search feature that was similarly trained on a neural network, but as part of the company’s commitment to privacy the actual categorization is performed on each device’s processor separately without sending the data. This usually takes a day or two and happens in the background following setup.<sup> 1</sup>
  '</p>  `; 
    var blogcite178 = `
  <p class="cite">1. <a target="_blank" href="https://www.theverge.com/2019/1/31/18203363/ai-artificial-intelligence-photography-google-photos-apple-huawei">
  https://www.theverge.com/2019/1/31/18203363/ai-artificial-intelligence-photography-google-photos-apple-huawei</a></p>  
 
  `; 


  
  var blogpost177 = `<p class="firstparagraph">URL dramas are never short of controversy--this, making the theme of my <a href="#09-04-18">Sept. 4th post </a>exploring the unfathomable task. There is but one likely outcome: a bifurcated internet: Imagine futre hang-ups resembling inconsistencies and incompatible experiences, <i>like, say ... the seemingly Immortal and Persistently Awkward Internet Explorer 11</i>.</p>  
  <p class="quote">   
  In September, members of Google's Chrome security team put forth a radical proposal: Kill off URLs as we know them. The researchers aren't actually advocating a change to the web's underlying infrastructure. They do, though, want to rework how browsers convey what website you're looking at, so that you don't have to contend with increasingly long and unintelligible URLs—and the fraud that has sprung up around them. In a talk at the Bay Area Enigma security conference on Tuesday, Chrome usable security lead Emily Stark is wading into the controversy, detailing Google's first steps toward more robust website identity.<sup>1</sup>
  </p><p>And yet, as my September post wondered: Since there <i>are</i> needs, as much as there was a need for asphalt roads, directly following the <i>vulkanizing</i> new opportunities for rubber tires. The inevitable Univorm Resource Locator revolution does loom, but <i>is Now</i> the timing right for the times?<sup> 1</sup></p>`; 
    var blogcite177 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.com/story/google-chrome-kill-url-first-steps">
  https://www.wired.com/story/google-chrome-kill-url-first-steps</a></p>  
 
  `; 

  

  var blogpost176 = `<p class="firstparagraph"><i>Tappy</i> may not look like a kind of high-stakes value-item, compared with a Hollywood story like "Chappie" with Hugh Jackman. A story featuring  Factions fighting over control of one artistic, talented droid-bot. Yet, with equally high drama, it sounds like the stakes got raised to international proportions, for... for a phenomenal T-Mobile phone-tester bot... 
  </p>
  <p class="quote">A grand jury in Seattle has charged Huawei with conspiracy to steal trade secrets, attempted theft of trade secrets, seven counts of wire fraud and one count of obstruction of justice for the company’s alleged attempts to move potential witnesses back to China. The indictments grew out of a civil suit dating all the way back to 2014 in which T-Mobile sued Huawei for stealing trade secrets related to a robotic phone-testing device known as “Tappy.” <sup>1</sup></p>
 <p>It looks like high justice will be served for "Tappy" the <i>phenomenal</i> phone-tester bot... Talk about dramatic escalation!<p>
  </p>  `; 
    var blogcite176 = `
  <p class="cite">1. <a target="_blank" href="https://techcrunch.com/2019/01/28/huawei-us-meng-wanzhou-doj">
  https://techcrunch.com/2019/01/28/huawei-us-meng-wanzhou-doj</a></p>  
 
  `; 
  var blogpost175 = `<p class="firstparagraph">TechCrunch Disrupt! 2018 hailed an A.I. startup named Kairos<sup> 0</sup> that addressed this same dilemma: How do you accurately report results when faced with disproportionate sampling due to  variance differences between stratification layers? Can you balance one group with one-hundred fold more data-points? And, equally polarized is the inferential freedoms needed to report statistically significant results with small-sample algorithms.</p> 
  </p>
  <p class="quote">Amazon's Rekognition software incorrectly identified women as men 19 percent of the time, according to the study. In addition, it incorrectly identified darker-skinned women as men 31 percent of the time, it says. Software from Microsoft, by comparison, identified darker-skinned women as men 1.5 percent of the time.
<br /><br />
Matt Wood, general manager of artificial intelligence at Amazon Web Services, said that the study's test results are based on facial analysis, not facial recognition. Analysis, he said, can find faces in videos or images and assign generic attributes, such as the wearing of glasses. Recognition, he said, matches an individual's face to images in videos and photographs. The Rekognition technology includes both of these functionalities. <sup>1</sup>
  </p> 
  <p>
  <p>So, software considerations can be equally important to plain-old hardware limitations. So in all fairness, must technology's capabilities keep pace with politically-correct results? As they say, Why make it a federal case? 
  </p>
  `; 
    var blogcite175 = `
  <p class="cite">1. <a target="_blank" href="https://www.cnet.com/news/amazons-facial-tech-shows-gender-racial-bias-mit-study-says/">
  https://www.cnet.com/news/amazons-facial-tech-shows-gender-racial-bias-mit-study-says/</a></p>  

  <p class="cite">0. <a target="_blank" href="https://www.kairos.com">
  https://www.kairos.com</a></p>  
 
  `; 
  var blogpost174 = `<p class="firstparagraph">History does its own stunts. Internet History all the more, and the cast and crew could not have been better picked: Here is an  
Archival Bests: <i>July 2016</i>
  </p>
  <p class="quote">The internet is so vast and formless that it’s hard to imagine it being invented. It’s easy to picture Thomas Edison inventing the lightbulb, because a lightbulb is easy to visualize. You can hold it in your hand and examine it from every angle.
<br /><br />
The internet is the opposite. It’s everywhere, but we only see it in glimpses. The internet is like the holy ghost: it makes itself knowable to us by taking possession of the pixels on our screens to manifest sites and apps and email, but its essence is always elsewhere.
<br /><br />
This feature of the internet makes it seem extremely complex. Surely something so ubiquitous yet invisible must require deep technical sophistication to understand. But it doesn’t. The internet is fundamentally simple. And that simplicity is the key to its success.<sup>1</sup>
  </p>  `; 
    var blogcite174 = `
  <p class="cite">1. <a target="_blank" href="https://www.theguardian.com/technology/2016/jul/15/how-the-internet-was-invented-1976-arpa-kahn-cerf">
  https://www.theguardian.com/technology/2016/jul/15/how-the-internet-was-invented-1976-arpa-kahn-cerf</a></p>  
  
  `; 

  
  var blogpost173    = `<p class="firstparagraph"> My new Samsung 40" Best Buy Special has shined yet  has also had trying moments. An every-once-in-a-while frozen desktop screen -- <i>perma-frozen until a couple hard resets.</i> In my opinion, nothing's out of the ordinary--they're just finicky, just like the 90's computers, it's called big plans with small hardware platforms--mole hills become mountains. Service in-fighting for precious memory resources! The hard thinking and the hardest problems, starting with ...I'm frozen, how do I turn on and off?. 
  </p>
  <p class="quote">I tried the obvious things. I turned off the TV and turned it back on. Same problem. Unplugged, replugged. Happened again. Reset the cable box just to try it. Again. Made the sign of the cross. Checked for software updates for the television. Threw my phone. Screamed into the abyss. But. It. Just. Kept. Happening.

  Finally, I turned to the consumer micro-solidarity available in the support forums. Based on the outraged responses of other Samsung TV owners, the issue began sometime in September. No one knows how to fix it. And because of a deal that Samsung struck with app makers, you can’t delete the app from your own TV.<sup>1</sup>
  </p>  `; 
    var blogcite173 = `
  <p class="cite">1. <a target="_blank" href="https://www.theatlantic.com/technology/archive/2019/01/smart-tvs-are-dumb/581059/">
  https://www.theatlantic.com/technology/archive/2019/01/smart-tvs-are-dumb/581059/</a></p>  
  
  `; 


  var blogpost172 = `<p class="firstparagraph">Yet another reason to moderate on that Eco-Expensive red meat ...  
  </p>
  <p class="quote"> We now have so many interconnected food-related crises — climate change, pollution, and food waste, not to mention malnutrition and obesity — that it will be impossible to feed the 10 billion people expected by 2050 unless we make dramatic changes to our diets and farming practices, the researchers argue.<br /><br />

  What’s needed, according to the peer-reviewed report, titled “Food in the Anthropocene: The EAT-Lancet Commission on healthy diets from sustainable food systems,” is a new philosophy for how to eat on planet Earth. Though there are huge variations around the world in what and how much we consume, we are all in this existential crisis together.<sup>1</sup>
  </p>  `; 
    var blogcite172 = `
  <p class="cite">1. <a target="_blank" href="https://www.vox.com/2019/1/23/18185446/climate-change-planet-based-diet-lancet-eat-commission">
  https://www.vox.com/2019/1/23/18185446/climate-change-planet-based-diet-lancet-eat-commission</a></p>  
  
  `; 
  var blogpost171 = `<p class="quote">Popular Mechanics reports:
  </p>
  <p class="quote"> The thing that’s counterintuitive about the stainless steel is, it’s obviously cheap, it’s obviously fast—but it’s not obviously the lightest. But it is actually the lightest. If you look at the properties of a high-quality stainless steel, the thing that isn’t obvious is that at cryogenic temperatures, the strength is boosted by 50 percent.<sup>1</sup> 
  </p>  `; 
    var blogcite171 = `
  <p class="cite">1. <a target="_blank" href="https://www.popularmechanics.com/space/rockets/a25953663/elon-musk-spacex-bfr-stainless-steel/">
  https://www.popularmechanics.com/space/rockets/a25953663/elon-musk-spacex-bfr-stainless-steel/</a></p>  
  
  `; 
  var blogpost1705 = `<p class="firstparagraph">Copy Cat Accusations from the few mean a slower, more expensive, ad-driven internet experience! 
  </p>
  <p class="quote">Simply put, the Directive on Copyright places more responsibility on websites such as YouTube, Facebook and Twitter to make sure that copyrighted materially isn’t being illegaly shared on their platforms. Until now, the onus has mostly been on the copyright holders – usually the companies that produce audio, video or written content – to enforce copyright protection but under the new law this responsibility will shift onto the major platforms themselves.
<br /><br />
  At the heart of the Directive on Copyright are two divisive articles – Article 11 and Article 13 – that have been dubbed the “link tax” and “meme ban” articles respectively. Critics of the Directive on Copyright argue that these articles mean that platforms will have to pay a fee to share a link to a news article and have to start filtering and removing memes.<sup>1</sup>  
  </p>  
  <p>The effort involved in roping in internet creativity is ...<i> like herding cats?</i>  </p>`; 
    var blogcite1705 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.co.uk/article/what-is-article-13-article-11-european-directive-on-copyright-explained-meme-ban">  https://www.wired.co.uk/article/what-is-article-13-article-11-european-directive-on-copyright-explained-meme-ban</a></p>  
  
  `; 

  

  var blogpost17005 = `<p class="firstparagraph">
  At the end of the day, every secret lair depends on the software and hardware stewards of the world: Thank goodness for this special class of craftsmen -- <i>defacto</i> alotted the role of connecting every part of the world ...</p>
  <p class="quote"> 
  A frightened Rodriguez first met Guzman in 2008, at a meeting in the mountains where the Sinaloa Cartel leader had been hiding from authorities after his laundry-cart escape from a Mexican prison years earlier. Rodriguez described being taken to a clandestine airstrip to be flown to the meeting, and says he was met on the ground by "armed military." Rodriguez's work initially involved creating an office-like phone extension system for Sinaloa Cartel associates that would allow their conversations to be encrypted, or unable to be intercepted by authorities. Guzman, who did not enjoy working on computers, was pleased with the ability to have protected phone conversations.  <sup>1</sup>  
  </p>  `; 
    var blogcite17005 = `
  <p class="cite">1. <a target="_blank" href="https://www.cnn.com/2019/01/09/americas/el-chapo-it-technician-rodriguez/index.html">https://www.cnn.com/2019/01/09/americas/el-chapo-it-technician-rodriguez/index.html
   </a></p>  
  
  `; 

var blogpost170 = `<p class="quote"> 
  </p>
  <p class="quote"> The gene therapy would instead give their bodies a working gene for them to make their own factor VIII. But transferring a gene into a person is no easy feat. Genes are long strings of DNA that don't readily get inside cells. So therapies typically rely on viruses, which squirt DNA into cells' nuclei as a way of life. In this case, a virus, modified so that it doesn't cause disease, and with the healthy human factor VIII gene added to its DNA, is injected into the body. It then enters the body's cells to deposit its cargo, leaving it as a separate piece of DNA in the nucleus next to the host cell's genome.<sup>1</sup>  
  </p>  `; 
    var blogcite170 = `
  <p class="cite">1. <a target="_blank" href="http://digg.com/2019/gene-therapies-immunity">http://digg.com/2019/gene-therapies-immunity
   </a></p>  
  
  `; 
  var blogpost169 = `<p class="quote"> 
  </p>
  <p class="quote"> In his blog, Hunt says a large file of 12,000 separate files and 87GB of data had been uploaded to MEGA, a popular cloud service. The data was then posted to a popular hacking forum and appears to be an amalgamation of over 2,000 databases. The troubling thing is the databases contain “dehashed” passwords, which means the methods used to scramble those passwords into unreadable strings has been cracked, fully exposing the passwords.
<br />
  So what does this mean for the average person? According to Hunt, it means compromised email and password combos are more vulnerable for a practice called credential stuffing. Basically, credential stuffing is when breached username or email/password combos are used to hack into other user accounts. This could impact anyone who has used the same username and password combo across multiple sites.<sup>1</sup>
  </p>  `; 
    var blogcite169 = `
  <p class="cite">1. <a target="_blank" href="https://gizmodo.com/mother-of-all-breaches-exposes-773-million-emails-21-m-1831833456">https://gizmodo.com/mother-of-all-breaches-exposes-773-million-emails-21-m-1831833456
 </a></p>  
  
  `; 
  
  var blogpost168 = `<p class="quote"> 
  </p>
  <p class="quote"> On October 19, 2017, astronomers at the University of Hawaii spotted a strange object travelling through our solar system, which they later described as “a red and extremely elongated asteroid.” It was the first interstellar object to be detected within our solar system; the scientists named it ‘Oumuamua, the Hawaiian word for a scout or messenger. The following October, Avi Loeb, the chair of Harvard’s astronomy department, co-wrote a paper (with a Harvard postdoctoral fellow, Shmuel Bialy) that examined ‘Oumuamua’s “peculiar acceleration” and suggested that the object “may be a fully operational probe sent intentionally to Earth’s vicinity by an alien civilization.” Loeb has long been interested in the search for extraterrestrial life, and he recently made further headlines by suggesting that we might communicate with the civilization that sent the probe. “If these beings are peaceful, we could learn a lot from them,” he told Der Spiegel.<sup>1</sup>
  </p>  `; 
    var blogcite168 = `
  <p class="cite">1. <a target="_blank" href="https://www.newyorker.com/news/the-new-yorker-interview/have-aliens-found-us-a-harvard-astronomer-on-the-mysterious-interstellar-object-oumuamua"> https://www.newyorker.com/news/the-new-yorker-interview/have-aliens-found-us-a-harvard-astronomer-on-the-mysterious-interstellar-object-oumuamua
 </a></p>    
 <p class="cite">2<a target="_blank" href="https://blogs.scientificamerican.com/observations/6-strange-facts-about-the-interstellar-visitor-oumuamua/"> https://blogs.scientificamerican.com/observations/6-strange-facts-about-the-interstellar-visitor-oumuamua/
 </a></p>  
 
  `;  
  var blogpost167 = `<p class="quote">
  </p>
  <p class="quote"> Examine how and when you set standards. Perfectionistic leaders often don’t communicate their “high standards” until others miss their expectations. When you observe a gap between what you get and what you wanted, pause before reacting. Ask yourself if the person who fell short understood what you expected. Then, ask yourself if what you wanted was realistic given the circumstances and abilities of your team. Being honest about what you base your expectations on, and clearly conveying them to others in a timely manner, ensures your standards aren’t just high, but realistic and fair.<sup>1</sup>
  </p>  `; 
  
  var blogcite167 = `
  <p class="cite">1. <a target="_blank" href="https://hbr.org/2019/01/are-your-high-expectations-hurting-your-team">https://hbr.org/2019/01/are-your-high-expectations-hurting-your-team
 </a></p>  
  
  `; 
  var blogpost166 = `<p class="quote">
  </p>
  <p class="quote">Americans love convenient recycling, but convenient recycling increasingly does not love us. Waste experts call the system of dumping all the recyclables into one bin “single-stream recycling.” It’s popular. But the cost-benefit math of it has changed. The benefit — more participation and thus more material put forward for recycling — may have been overtaken by the cost — unrecyclable recyclables. On average, about 25 percent of the stuff we try to recycle is too contaminated to go anywhere but the landfill, according to the National Waste and Recycling Association, a trade group. Just a decade ago, the contamination rate was closer to 7 percent, according to the association.<sup>1</sup>  
  </p>  `; 
  
  var blogcite166 = `
  <p class="cite">1. <a target="_blank" href="https://fivethirtyeight.com/features/the-era-of-easy-recycling-may-be-coming-to-an-end/">https://fivethirtyeight.com/features/the-era-of-easy-recycling-may-be-coming-to-an-end/
</a></p>  
  
  `;  
  var blogpost164 = `<p class="quote">  
  </p>
  <p class="quote"> “To continue delivering for our customers and to succeed in developing interplanetary spacecraft and a global space-based internet, SpaceX must become a leaner company,” the Hawthorne-based company said in a statement. “Either of these developments, even when attempted separately, have bankrupted other organizations. This means we must part ways with some talented and hardworking members of our team.”
  </p><sup>1</sup>    `; 
  
  var blogcite164 = `
  <p class="cite">1. <a target="_blank" href="https://www.latimes.com/business/la-fi-spacex-layoffs-20190111-story.html">
  https://www.latimes.com/business/la-fi-spacex-layoffs-20190111-story.html</a></p>  
  
  `; 
    var blogpost163 =   ` <p class="quote"> Smartphones are as central to the economy as cars and credit cards, and a lot of people have little meaningful opportunity to quit. 
    And the “offline” world is now ruled by what happens online. Escape is impossible. Quips on Twitter are indirectly programming cable news 
    <sup>1</sup> ...<br /><br />--NYT Op-Ed
    </p>
  <p class="firstparagraph">Technology is too often the scapegoat for problems with ... <i>(our)</i> habits. Whether its <i>screen</i> time, selfie-addiction or mental dependance, it's never us as a society. I argue interactive tech saved a world of passive Movie & TV watching, passive reading ... leaving only the <i>professionals</i> to film, record music, publish and actively pursue leisure. Now, everybody with a telephone <i>can do</i> anything.</p>
  <p>Technology has expanded average knowledge breadth <i>and</i> depth far more than it has undercut our potential. 25 years ago, specialized knowedge required a library. Besides the perseverence to get there. </p><p>If 18th century Berlin invented compulsory secondary schooling, thereby raising literacy from 10% to 70$ in one generation; Similarly, if 19th century Paris invented compulsory secondary schooling and revolutionalized learning as a national force, and John Hopkins the first <i>modern</i> university template for mass Higher-Ed; Then, by de Facto means, Silicon Valley has provided meta-knowledge that comprises a far more important knowledge: Tying unlimited knowledge to our most <i>social</i> device: el telefono. Thus, between the Wikipadia tile and the Twitter tile, one generation catapults over all previous generations--at least in terms of YouTube know-how and social awareness. Armies of bureaucrats and educators could not have achieved one-tenth! Thank you, California, for auguring such great potential for our age. </p><p>One NYT op-ed writer encapsulates the less optimistic view of online life--a life viewed as 'captive to technology'.
  </p>
  <p class="quote">  Smartphones are as central to the economy as cars and credit cards, and a lot of people have little meaningful opportunity to quit. 
  And the “offline” world is now ruled by what happens online. Escape is impossible. Quips on Twitter are indirectly programming cable news ...
<sup>1</sup>
  </p>
  `; 
  
  var blogcite163 = ` 
  <p class="cite">1. <a target="_blank" href="https://www.nytimes.com/2019/01/09/opinion/meditation-internet.html">
  https://www.nytimes.com/2019/01/09/opinion/meditation-internet.html</a></p>  
  
  `; 
    var blogpost162 =   ` 
  <p class="firstparagraph">Software, Hardware, and by logical conclusion ...<i> Kitchenware!</i>
  </p>
  <p class="quote">The kitchen of the future is here, and it’s one that no one asked for. CES 2019, this year’s iteration of the annual Consumer Electronics Show, just opened in Las Vegas, and as per usual, the gadgets unveiled so far reveal a unique perspective on the everyday lifestyle problems that consumers apparently want solved. The problems? Too much privacy in kitchens! And not enough things that can be solved by app!  <br />
  <br />
  As Rose Elveth wrote for Eater in 2015, “Engineers... operate on the premise that people don’t know what they need until it’s built for them... the result is an array of potential futures that are strangely both unaware of the culture from which they spring, and at the same time constrained by it. The kitchen of the future is a one-size-fits all, ahistorical, acultural room, one that serves no one well.” 
<sup>1</sup>
  </p>
  `; 
  
  var blogcite162 = `
  <p class="cite">1. <a target="_blank" href="https://www.eater.com/2019/1/8/18173843/ces-2019-kitchen-tech-ge-samsung-whirlpool">
  https://www.eater.com/2019/1/8/18173843/ces-2019-kitchen-tech-ge-samsung-whirlpool</a></p>  
  
  `;

  
  var blogpost1600 =   ` 
  <p class="firstparagraph">CES 2019 offered the range of IoT wizardry that even Philosophy has been virtualized into LED-embedded wood! 
  </p>
  <p class="quote">What does it mean that one of my favorite demos at CES 2019 — the world’s foremost technology show — was a block of wood? Maybe that I’ve been spending too much time in my garage with a table saw. Maybe that we’re collectively suffering from a bad case of screen fatigue. Maybe both. But if the crowd surrounding Mui is any indication, I’m not the only one smitten with the Kyoto-based company’s head-smackingly simple approach to technology.
<sup>1</sup>
  </p>
  `; 
  
  var blogcite1600 = `
  <p class="cite">1. <a target="_blank" href="https://www.digitaltrends.com/home/mui-wood-smart-display-ces-2019/       ">https://www.digitaltrends.com/home/mui-wood-smart-display-ces-2019/</a></p>  
  
  `;
  
  var blogpost161 =   ` 
  <p class="firstparagraph">Relentless criticisms hurled at the Tech Greats like Facebook can't really explain a lot of the connivery in the 21st century world. So, the label of a Silicon-Valley culture that espouses teamwork can't be blamed: It's the nature of Software Engineers to develop gargantuanly complex programmed products, that dissent and critical thinking have much less place than most jobs. This article is laughable, but may bear a hint of truth ... 
  </p>
  <p class="quote">The episode speaks to an atmosphere at Facebook in which employees feel pressure to place the company above all else in their lives, fall in line with their manager’s orders and force cordiality with their colleagues so they can advance. Several former employees likened the culture to a “cult.”
<br /><br />
This culture has contributed to the company’s well-publicized wave of scandals over the last two years, such as governments spreading misinformation to try to influence elections and the misuse of private user data, according to many people who worked there during this period. They say Facebook might have have caught some of these problems sooner if employees were encouraged to deliver honest feedback.  
<sup>1</sup>
  </p>
  `; 
  
  var blogcite161 = `
  <p class="cite">1. <a target="_blank" href="https://www.cnbc.com/2019/01/08/facebook-culture-cult-performance-review-process-blamed.html">https://www.cnbc.com/2019/01/08/facebook-culture-cult-performance-review-process-blamed.html</a></p>   `;
  var blogpost16001 = `
  
  <img src="dist/img/thule0.jpg" class="zoom" />
  <p class="firstparagraph">Ultima Thule ...</p>
  <p class="quote">
  On New Years' Eve, following a 13-year trip to deep space, NASA's New Horizons spacecraft made a close pass of Ultima Thule, a small, icy world drifting 4 billion miles from the sun in the unexplored "third zone" of our solar system. The probe zipped by at upwards of 31,000 miles per hour, about the same speed it was going when it passed Pluto in 2015. But Pluto is 100 times the size of Ultima, which measures just 20 miles long. So New Horizons had days to capture photographs and spectrographic readings of the former planet, but for this smaller cosmic quarry, it only had a matter of minutes. New Horizons' visit was brief, but momentous: The mission's success makes Ultima Thule by far the most distant object ever to be imaged up close.<sup>1</sup></p>

 <img src="dist/img/thule.jpg" class="zoom" />
  `;

  var blogcite16001 = `
  <p class="cite">1. <a target="_blank" href="https://www.wired.com/story/new-horizons-first-photos-ultima-thule">https://www.wired.com/story/new-horizons-first-photos-ultima-thule</a></p>   
  
  `;

    var blogpost160 =   `<p class="quote">Astronomers have revealed details of mysterious signals emanating from a distant galaxy, picked up by a telescope in Canada. 
The precise nature and origin of the blasts of radio waves is unknown. 
Among the 13 fast radio bursts, known as FRBs, was a very unusual repeating signal, coming from the same source about 1.5 billion light years away. 
Such an event has only been reported once before, by a different telescope. 
"Knowing that there is another suggests that there could be more out there," said Ingrid Stairs, an astrophysicist from the University of British Columbia (UBC).
 
<sup>1</sup></p>
  <p class="firstparagraph">
  Morse code across the Galaxies - what a concept! 
  </p>
  <img src="dist/img/gettyimages-831502910.jpg" width="350" class="zoom" /><hr width="200"/>

  <span style="float:right;">GETTY IMAGES</span>
 `; 
  
  var blogcite160= `
  <p class="cite">1. <a target="_blank" href="https://www.bbc.com/news/science-environment-46811618">https://www.bbc.com/news/science-environment-46811618</a></p>  
  `;
 
 

      var url = [    
          
        {
          id: '1790',
          did: '02-08-19',
          date: 'February 8, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Musing Blockchain',
          title: 'Sustainable Blockchain Tech, Part I:<br />The Cost of Proof-of-Work Models',
          post: blogpost1790,
          blogcite: blogcite1790 
        },   
        {
          id: '1789',
          did: '02-07-19',
          date: 'February 7, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Oracle the Great, Part II<br />Is Oracle also Good?',
          post: blogpost1789,
          blogcite: blogcite1789 
        },   
        {
          id: '1788',
          did: '02-06-19',
          date: 'February 6, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Oracle the Great, Part I<br />Is Oracle also Trustworthy?',
          post: blogpost1788,
          blogcite: blogcite1788 
        }, 
        {
          id: '1786',
          did: '02-04-19',
          date: 'February 4, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'Due North: Time to Calibrate the Compass?',
          post: blogpost1786,
          blogcite: blogcite1786 
        },
        {
          id: '1785',
          did: '02-02-19',
          date: 'February 2-3, 2019<br />Weekend',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Four Score and Seven Years Ago ...',
          post: blogpost1785,
          blogcite: blogcite1785 
        },
        {
          id: '1784',
          did: '02-01-19',
          date: 'February 1, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Four Score and Seven Years From Now ...',
          post: blogpost1784,
          blogcite: blogcite1784 
        },
        {
          id: '178',
          did: '01-31-19',
          date: 'January 31, 2019',
          author: 'by Thomas Maestas',
          cat3: 'A.I.Now.',
          title: 'Seeing Who Says, \'Say Cheese!\'',
          post: blogpost178,
          blogcite: blogcite178 
        },     
        {
          id: '177',
          did: '01-29-19',
          date: 'January 29, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Construction on the Internet Super-Highway',
          post: blogpost177,
          blogcite: blogcite177 
        },   
        {
          id: '176',
          did: '01-28-19',
          date: 'January 28, 2019',
          author: 'by Thomas Maestas',
          cat3: 'A.I.Now.',
          title: 'Saving Tappy, the Extraordinary Phone-Tester Bot',
          post: blogpost176,
          blogcite: blogcite176 
        },   
        {
          id: '175',
          did: '01-26-19',
          date: 'January 26-27, 2019',
          author: 'by Thomas Maestas',
          cat3: 'A.I.Now.',
          title: 'Who Dis',
          post: blogpost175,
          blogcite: blogcite175 
        },   
        {
          id: '174',
          did: '01-25-19',
          date: 'January 25, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Internet Phaenomen [Greek]: To Shine; To Appear<br /><small>How the Internet was Invented',
          post: blogpost174,
          blogcite: blogcite174 
        },    
        {
          id: '173',
          did: '01-24-19',
          date: 'January 24, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'What\'s it Take to Dethaw Frozen TV\'s?',
          post: blogpost173,
          blogcite: blogcite173 
        },     {
        id: '172',
        did: '01-23-19',
        date: 'January 23, 2019',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow!',
        title: 'Food for Thought',
        post: blogpost172,
        blogcite: blogcite172 
      },      {
        id: '171',
        did: '01-22-19',
        date: 'January 22, 2019',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow!',
        title: 'Material Thinking',
        post: blogpost171,
        blogcite: blogcite171 
      }, 
      {
        id: '1705',
        did: '01-21-19',
        date: 'January 21, 2019',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'World of OpenSource, part II:<br />The CopyRight Strikes Back',
        post: blogpost1705,
        blogcite: blogcite1705 
      }, 
      {
        id: '17005',
        did: '01-19-19',
        date: 'January 19, 2019',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'The Cable Guy',
        post: blogpost17005,
        blogcite: blogcite17005 
      },  
      {
        id: '170',
        did: '01-18-19',
        date: 'January 18, 2019',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow!',
        title: 'Genes for a Change',
        post: blogpost170,
        blogcite: blogcite170 
      },  
        {
          id: '169',
          did: '01-17-19',
          date: 'January 17, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'The Virtues of a Monomagous Password',
          post: blogpost169,
          blogcite: blogcite169 
        },  {
          id: '168',
          did: '01-16-19',
          date: 'January 16, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'That Funny Visitor\'s Non-Elliptical Orbit',
          post: blogpost168,
          blogcite: blogcite168 
        },  
        {
     id: '167',
     did: '01-15-19',
     date: 'January 15, 2019',
     author: 'by Thomas Maestas',
     cat3: 'Web Dev Affairs',
     title: 'Practicing at Imperfection',
     post: blogpost167,
     blogcite: blogcite167 
   }, 
        {
     id: '166',
     did: '01-14-19',
     date: 'January 14, 2019',
     author: 'by Thomas Maestas',
     cat3: 'Sociology Tomorrow!',
     title: 'Minimalism to the Rescue!',
     post: blogpost166,
     blogcite: blogcite166 
   }, 
        {
     id: '164',
     did: '01-12-19',
     date: 'January 12-13, 2019<br />Weekend',
     author: 'by Thomas Maestas',
     cat3: 'Web Dev Affairs',
     title: 'E.U.\'s Overreaching GDPR Rules',
     post: blogpost164,
     blogcite: blogcite164 
   },   
            {
          id: '163',
          did: '01-11-19',
          date: 'January 11, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'It\'s not Fair Scapegoating Tech for *Our* Bad Habits',
          post: blogpost163,
          blogcite: blogcite163 
        } ,
          {
          id: '162',
          did: '01-10-19',
          date: 'January 10, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Over the Edge with Gadgetry: CES 2019',
          post: blogpost162,
          blogcite: blogcite162 
        },
        {
          id: '1600',
          did: '01-09-19',
          date: 'January 9, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'That\'s One Smart Block of Wood!...or a Raspberri Pi',
          post: blogpost1600,
          blogcite: blogcite1600 
        },
        {
          id: '161',
          did: '01-08-19',
          date: 'January 8, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'What\'s Wrong with a little Esprit de Corps?',
          post: blogpost161,
          blogcite: blogcite161 
        },
        {
          id: '16001',
          did: '01-07-19',
          date: 'January 7, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'It Takes Two to Dance',
          post: blogpost16001,
          blogcite: blogcite16001 
        }, 
        {
          id: '160',
          did: '01-02-19',
          date: 'January 2, 2019',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'InterGalactic Code',
          post: blogpost160,
          blogcite: blogcite160 
        } 
  
  ];
var i;
  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a target="_blank" href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="author">${url[i].author}</p>   
    <h6  id="date" class="chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-jan19").innerHTML += cat;
  }

  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a target="_blank" href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="author">${url[i].author}</p>   
  <h6  id="date" class="chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-jan19-mod").innerHTML += catMod;
  }
  
console.log('blogger-jan19');
    //  console.log(angular.toJson(url)); 
};
bloggerJan();

  var bloggerJuly = function () {

 

 var blogpost24 = `<p class="firstparagraph">Cloud.google.com wins the day for offering the Willy Wonka's of Technological Candy at a free tour's view: You won the Golden Ticket. Google Cloud CEO Diane Greene explains that prioritizing customers' needs rather than drifting with market forces offers solid growth moving past technological shifts and drifts with little course correction.</p>
 <p class="quote">While Google is still looking up at Amazon Web Services and Microsoft Azure when it comes to infrastructure cloud computing, it appears to be finding the balance between keeping engineers happy with cloud-native computing tools and courting enterprise company suits with service-level agreements and steak dinners.<sup>1</sup></p>`;
 var blogcite24 =   `
 
 <p class="cite">1. <a href="https://cloud.google.com"   target="_blank">https://cloud.google.com
 </a>
 </p><p class="cite">1. <a href="https://www.geekwire.com/2018/google-cloud-ceo-diane-greene-wane-cloud-pricing-wars-never-want-win-price/"   target="_blank">https://www.geekwire.com/2018/google-cloud-ceo-diane-greene-wane-cloud-pricing-wars-never-want-win-price/
 </a>
 </p>`;

 var blogpost23 = `<p class="firstparagraph">Planet Green dodged a bullet recently, as activists' climate change research officially gains legitimacy from the Supreme Court, albeit a few of their qualms ... But who could deny that if there is one thing that will save the earth, it's knowledge, knowledge far outweighs any other salvo. This is because the more data, the more accurate the models to indicate specific environmental needs and threats--<i>not to mention all the clues the data could reveal toward helping earth regain balance. </i></p><p>A.I. training would starve if the Supreme Court would have allowed administration clamp-downs on knowledge. After all, the overwhelming popular and professional opinions favor earth-friendly policies. 
<p class="quote">The Supreme Court on Monday denied the Trump administration’s plea to halt proceedings in a landmark lawsuit by young people seeking stronger federal action on climate change.<sup>1</sup>
</p>`;
var blogcite23 = `<p class="footnotes">1. <a href="http://thehill.com/policy/energy-environment/399562-supreme-court-denies-trump-admin-request-to-halt-youth-climate"   target="_blank">http://thehill.com/policy/energy-environment/399562-supreme-court-denies-trump-admin-request-to-halt-youth-climate
</a>
</p>
<p class="cite">1. <a href="http://thehill.com/policy/energy-environment/399562-supreme-court-denies-trump-admin-request-to-halt-youth-climate"   target="_blank">http://thehill.com/policy/energy-environment/399562-supreme-court-denies-trump-admin-request-to-halt-youth-climate
</a>
</p>
 `;
var blogpost22 = `
<p class="quote"><i>“It feels like a magical mirror that reflects your moves with images of all kinds of human activity – from sports and dance to martial arts, acting and beyond.”</i></br></br>
--Google creative technologist Irene Alvarado 
</p>
<p class="firstparagraph">Magical Mirror is a wonderful tool for A.I.-powered video imaging and mimicry. Google's soon-to-be open source software is freely available for A.I. developers ... now that should be amusing to have life-like personal avatars will certainly make for some interesting uses. 
 The power of Big Data really proves itself, but Google's algorithm-sharing provides a real democracy of A.I. technology for everyone to use.  On the other side of the coin, accuracy in video and voice mimicry now means A.I.-driven authenticity detectors will soon prove pretty darn useful!
</p>
`
var blogcite22 = `<p class="cite"> 
<p class="footnotes">1. <a href="https://www.standard.co.uk/tech/google-move-mirror-dancing-gif-a3892471.html"   target="_blank">https://www.standard.co.uk/tech/google-move-mirror-dancing-gif-a3892471.html
</a>
</p> 
</p>`
var blogpost21 =   `<p class="firstparagraph">Wired.com ...</p>
<p class="quote"> 
"But big retailers can sell millions of products, so it's not feasible to have workers browse each item and manually adjust prices. Instead, the companies employ software to scan rival websites and collect prices, a process called “scraping.” From there, the companies can adjust their own prices."<br /><br />
"Retailers want to see what their rivals are doing, but they want to prevent rivals from snooping on them; retailers also want to protect intellectual property like product photos and descriptions, which can be scraped and reused without permission by others. So many deploy defenses to subvert scraping ..." <sup>1</sup></p>`;
var blogcite21 = ` 
<p class="footnotes">1. <a href="https://www.wired.com/story/scraper-bots-and-the-secret-internet-arms-race/"   target="_blank">https://www.wired.com/story/scraper-bots-and-the-secret-internet-arms-race/
</a>
</p>   `;

  var blogpost20 =  `<p class="firstparagraph">Space.com ...</p>
  <p class="quote">"NASA's Robonaut program and Roscosmos' FEDOR program seem to share the goal of creating robots that make it safer for humans to accomplish things in space that otherwise would be too dangerous for humans to attempt.<i> Still, the FEDOR androids' gun-wielding design might raise a few eyebrows."</i><sup>1</sup></p>
  <img src="dist/img/droid.jpg" class="zoom" width="288px" />
  `;
var blogcite20 = ` 
<p class="footnotes">1. <a href="https://www.space.com/41253-russian-robots-fly-to-space.html"   target="_blank">https://www.space.com/41253-russian-robots-fly-to-space.html
</p>   `;
  
  var blogpost19=
  `<p class="quote">
  <i> One person familiar with the matter described the office scene as “chaotic” and said at one point more than 300 people tuned in to an emergency conference call.  “Currently out of capacity for scaling,” one of the updates said about the status of Amazon’s servers, roughly an hour after Prime Day’s launch. “Looking at scavenging hardware.” <sup>1</sup></i> </p>
  <p class="firstparagraph">Prime Day's saga of cascading failures stemming from an internal software reveals the <i> relentless challenge of Scalability</i>. In their words, the root cause was a "breakdown in auto-scaling, a critical component when dealing with unexpected traffic spikes"<sup>1</sup>. So the exponential spikes may be hard to expect because their nature is both spontaneous, but the inflection is calculable! ...only dramatically represented as the folding a sheet of paper 42 times to reach the moon ...
  </p>
  <img src="dist/img/paper.png" width="340px" class="zoom" />
  <p><small>Image Credits: Coder's Revolution</small></p>
  <p class="quote">  Amazon wasn't able to handle the traffic surge and failed to secure enough servers to meet the demand on Prime Day, according to expert review of internal documents obtained by CNBC.<br /><br />
  That led to a cascading series of failures, including a slowdown in its internal computation and storage service called Sable and other services that depend on it, including Prime, authentication and video playback.
  Amazon immediately launched a scaled-down "fallback" front page to reduce workload and temporarily killed all international traffic too. 
  </p><p>And so, the same Bezosian leadership that manages space exploration's <strong>Blue Origin</strong> inspired a system of fall-back redundencies to get back up to speed dramatically within 80 minutes. Perhaps the quick, albeit unconventional recovery strategy deserves great respect--because chance happens to all!   
  </p>
  `; 

  var blogcite19 = ` 
  <p class="footnotes">Image Credit: <a href="http://wwvv.codersrevolution.com/blog/will-a-piece-of-paper-folded-42-times-reach-the-moon"   target="_blank">http://wwvv.codersrevolution.com/blog/will-a-piece-of-paper-folded-42-times-reach-the-moon
  </a>
  </p>   
<p class="footnotes">1. <a href="https://www.cnbc.com/2018/07/19/amazon-internal-documents-what-caused-prime-day-crash-company-scramble.html"   target="_blank">https://www.cnbc.com/2018/07/19/amazon-internal-documents-what-caused-prime-day-crash-company-scramble.html
</a>
</p>   
 `;
  var blogpost18=
  `
  <p class="firstparagraph">Business models of all shapes and sizes, and the diversity of tech that comes with them, are the natural consequence of<i> unlimited <strong>creative</strong> potential in Tech. So, a small business with few resources now has unlimited resources in the cloud with game-changing access to A.I.</i> Luckily, investments in smaller tech sources cover all sectors:</p>
 
  <p class="quote">The Energy Department has announced that it will award 95 grants worth a total of $95 million to 80 small businesses located in 26 states as part of its Small Business Innovation Research and Small Business Technology Transfer programs. <sup>1</sup>
  </p>
  <p>So, for as much as tech giants grow out of proportion, so do smaller businesses; because not only is the economic horizon  not a zero-sum tech pie, but growing. Secondly, the pace of evolving needs and tech capabilities favor smaller, more maneuvrable entrepreneur-producers.`;
  
  var blogcite18 = ` 
<p class="footnotes">1. <a href="http://www.executivegov.com/2018/07/doe-to-award-rd-grant-for-innovative-tech-to-80-small-businesses/
  "   target="_blank">http://www.executivegov.com/2018/07/doe-to-award-rd-grant-for-innovative-tech-to-80-small-businesses/
  
</a>
</p>   
 `;

  var blogpost17 =
  `
  <p class="firstparagraph"> Cloud computing has never offered more convenience--especially in e-commerce. Walmart ramps up online presence, Amazon's Whole Foods ramps up offline presence. More importantly, everything and all businesses in between these two vortices has the opportunity to ride the same wave of platform and supply chain integration. </p>
  <p class="quote"> 
  </p>
  <p class="quote"> Retail giant Walmart Inc said on Tuesday it entered into a strategic partnership with Microsoft Corp for wider use of cloud and artificial intelligence technology, in a sign of major rivals of Amazon.com Inc coming together.
<br /><br />
  The five-year agreement will leverage the full range of Microsoft's cloud solutions, including Microsoft Azure and Microsoft 365, to make shopping faster and easier for customers, the Bentonville Arkansas-based company said.
  
  As part of the partnership, Walmart and Microsoft engineers will collaborate to migrate a significant portion of walmart.com and samsclub.com to Azure, Walmart added. <sup>1</sup>
  </p>`;
  
  var blogcite17 = ` 
<p class="footnotes">1. <a href="https://www.usnews.com/news/technology/articles/2018-07-17/walmart-microsoft-in-partnership-to-use-cloud-tech
  "   target="_blank">https://www.usnews.com/news/technology/articles/2018-07-17/walmart-microsoft-in-partnership-to-use-cloud-tech
  
</a>
</p>   
 `;

  var blogpost16 = `
  <p class="firstparagraph">Alibaba--a Chinese search giant akin to Google--dwarfs the market value of Amazon. So much so, that Alibaba's earnings last year don't compete with Amazon's year, <i>but  past several years</i>.<sup>1</sup> Their success isn't a haphazard event, but years of strategy that focused on integrating services, whether online or offline origins, a true supply chain no longer discriminating marketplaces, logistics, cloud computing and payments. With unlimited global reach, big gets bigger and bigger. </p>
 
  <p class="quote">  "Alibaba Cloud has always been dedicated to empower enterprises of different sizes to tap into opportunities in the digital age. With digital transformation poised to add close to $154 billion to India's GDP, this is a great opportunity for us to do business in India," Alex Li, General Manager of Alibaba Cloud Asia Pacific, said in a statement.<sup>2</sup> 
   </p>
   <p>
   Ultimately, what goes up does not necessarily come back down with cloud computing. And the further integrated systems become, the less feasible to divide, no matter which part of the globe.<sup>3</sup></p>`;
  
  var blogcite16 = `
  <p class="footnotes">1. <a href="
  https://www.lemonde.fr/idees/article/2018/07/10/comment-alibaba-va-tuer-amazon_5329170_3232.html"   target="_blank">https://www.lemonde.fr/idees/article/2018/07/10/comment-alibaba-va-tuer-amazon_5329170_3232.html
  </a>
  </p>    
  
  <p class="footnotes">2. <a href="https://economictimes.indiatimes.com/small-biz/startups/newsbuzz/india-presents-great-business-opportunities-alibaba-cloud/articleshow/64974989.cms"   target="_blank">https://economictimes.indiatimes.com/small-biz/startups/newsbuzz/india-presents-great-business-opportunities-alibaba-cloud/articleshow/64974989.cms
  </a>
  </p>      <p class="footnotes">3. <a href="https://www.wsj.com/articles/breaking-up-big-tech-is-hard-to-do-1532290123"   target="_blank">https://www.wsj.com/articles/breaking-up-big-tech-is-hard-to-do-1532290123
  </a>
  </p>    
 `;

  var blogpost15 = `
  <p class="firstparagraph">Ethereum Architect Vitalik Buterin's unwavering commitment to the Crypto-contract currency finally pays off. In my February blogposts, I recounted the technical challenges that Ethereum still faced: As a "Proof of Work" currency that requires Ether (in <i>Wei</i>) currency for each transaction hindered more widespread adoption. After the big boost from last month's Switzerland's Crypto Valley Conference, Ethereum walked away handily with scores of investors and renewed momentum. The 23-year old hero of the platform almost appears precocious for the recent feature in Fortune Magazine's Top 40 Under 40.</p>
  <p class="quote">
  [Buterin's] visionary project has rocketed to a market cap of nearly $30 billion—as high as the private valuations Airbnb and Snapchat achieved—from $1 billion a year ago, when Fortune first placed him on its 40 under 40 list.<sup>2</sup>
  </p>
  <p>To recap the enormous advantages of Ethereum functions as a <i> global operating system--The Ethereum Virtual Machine--</i>  the platform upon which shared, distributed applications can be designed and deployed. Unlike Bitcoin's function-less platform, contracts from banking to betting to real-estate can easily be drawn up in Solidity code, into the DAPP, <i>Distributed Application  deployed onto a Fintech network so expansive</i>, no wonder that even a crypto-currency needs a Swiss bank account!
  </p>
  `;

  var blogcite15 = `<p class="footnotes">1. <a href="
https://www.cnbc.com/2018/07/18/ethereum-is-a-leading-driver-in-blockchain-says-circle-ceo.html
"   target="_blank">
https://www.cnbc.com/2018/07/18/ethereum-is-a-leading-driver-in-blockchain-says-circle-ceo.html
</a> 
</p>
<p class="footnotes">2. <a href="
http://fortune.com/40-under-40/vitalik-buterin-10/"   target="_blank">http://fortune.com/40-under-40/vitalik-buterin-10/
</a>
</p>   
 `;
 
  var blogpost14 = `
 <p class="firstparagraph">Prime's Allure begins with the greatest deals, the most convenient deliveries, and a new Accessibility of Whole Foods Breads, Pastries, and HoneyCrisp Apples to every citizen!</p>
 <p>On a darker note, many articles and studies focus on the vendors' side of the Amazon effect, i.e. the push to remote shopping;<sup>1</sup> But the consumer side of the Amazon effect is more insidious: the sheer off-scale underpricing of goods, mock holidays, and shopping-memberships push new spending habits. <i>The more convenient shopping with 'one-click buy' becomes, the 'less convenient' becomes the explorative, exciting-/debate-filled shopping experiences that reward the Creative Entrepreneurs'</i> cultural interaction with consumers  

`;
  var blogcite14 = `
<p class="footnotes">1. <a href="
https://www.statista.com/chart/10295/shopping-on-amazon/
"   target="_blank">
https://www.statista.com/chart/10295/shopping-on-amazon/
</a>
</p>   
`;
var blogpost13 = `
<p class="firstparagraph"> Now that 49% of American e-commerce passes through Amazon's gates, it's official: <i>50% market share signifies a balance of power shifting underneath the commercial strata of Amerian Culture.</i> From the remaining 50% of the Online Shopping pie goes to  the next top nine, 22%: 
</p>
<p class="quote">
eBay (EBAY): 6.6%<br /><br />
Apple (AAPL): 3.9%<br /><br />
Walmart (WMT): 3.7%<br /><br />
Home Depot (HD): 1.5%<br /><br />
Best Buy (BBY) 1.3%<br /><br />
QVC Group (QVCA): 1.2%<br /><br />
Macy's (M): 1.2%<br /><br />
Costco (COST): 1.2%<br /><br />
Wayfair (W): 1.1%<br /><br />
<small style="align:right;">Business Insider, July 2018 </small></p>
</p>
<p>There are many more organizations, as you still have the lofty, beautify Apple products, and who doesn't love the umbrella-cane only available on QVC limited quantities do apply!</p>
<p>
Of course, the remaining free birds, the 28%, comprise the millions of home-office,brick-and-mortars, and online market entrepreneurs. (These do not include the independent vendor sales using Amazon's Marketplace). </p><p>So why does this 28-percentile slice of e-commerce represent the integral core of American Culture? The Creative Spirit always survives and adapts, even thrives when anything other--other than pure Zeitgeist--will fail; but it changes, and <i> creative verve takes on a reshaped form and a new pace, fitting to bureaucratic constraints and pricing schema. </p>   `;

  var blogcite13 = `
  <p class="footnotes">1. <a href="
  http://www.businessinsider.com/amazon-is-closing-in-on-owning-half-of-the-e-commerce-market-2018-7?utm_source=feedburner&amp%3Butm_medium=referral&utm_medium=feed&utm_campaign=Feed%3A+businessinsider%2Ftravel+%28Business+Insider%29&r=US&IR=T&IR=T
  "   target="_blank">
  http://www.businessinsider.com/amazon-is-closing-in-on-owning-half-of-the-e-commerce-market-2018-7 
  </a>
  </p>     

  `;
  var blogpost12 = `
  
  <p class="firstparagraph">Fintech's revered "Crypto Valley Conference on Blockchain Technology" in Zug, Switzerland, featured blockchain expertise from all corners, including Keynote Speakers, Stefan Thomas CTO of Ripple [cryptocurrency] and Professor Emin G&uuml;n Sirer of Cornell University, along with Economists and Swiss Government officials. World-class economists, investors, and Regulation authorities aside, the host-countries whole-hearted commitment to cryptocurrency is evident: </p>
  <p class="quote">“They want Switzerland to be the place to make it happen — but they don’t want to be seen
  as the ‘wild west’. It is Swiss pragmatism,” says Martin Eckert, partner at MME, a Swiss law firm. <br /><br /> 
  Digital pioneers say Switzerland emerged as an ICO hub because it has a cluster of rich
  investors and technology specialists. The small canton of Zug, near Zurich, has unofficially
  Switzerland embraces cryptocurrency culture Seite 2 von 7
  25.01.2018
  become “Crypto Valley”.<sup>4</sup>
  </p>
  <img src="dist/img/swissBlockchain.png" width="350" class="zoom" />
  <p><small>Image Credit: Source Lykke, Coindesk</small></p>
`;
  var blogcite12 = `<p class="footnotes">3. <a href="
  https://www.cryptovalleyconference.com
  "   target="_blank">
  
  https://www.cryptovalleyconference.com
  </a>
  </p>
  <p class="footnotes">4. <a href="
  https://www.crypto-finance-conference.com/resources/public/lava3/media/switzerland-embraces-cryptocurrency-culture.pdf
  "   target="_blank">
  
  https://www.crypto-finance-conference.com/resources/public/lava3/media/switzerland-embraces-cryptocurrency-culture.pdf
  </a>
  </p>
`;
  var blogpost11 = `
  <p class="firstparagraph"><i>Zen of Python: "Beautiful is better than ugly.<i> Explicit is better than implicit.</i>  Simple is better than complex.  Complex is better than complicated. Flat is better than nested.  Sparse is better than dense"<br /></i> -- Pythoneer Tim Peters<p> In my April 19th post, I recount Python's near-mystical author and leader of language's development up to this month's retirement:  About Guido van Rossum, </p>
  <p class="quote">After almost 30 years of overseeing the development of the world's<i> most popular language, Python, its founder and Benevolent Dictator For Life" (BDFL), Guido van Rossum,</i> has decided he would like to remove myself entirely from the decision process.<sup>2</sup> </p><p>
Python is NASA's drug-of-choice because of the language's superior handling of precision mathematics, and yet the syntax and module libraries makes the language easy for anyone to pick up. Few could argue against Guido van Rossum's reductionist philosophy that inspires the clear, expansive structure. So, farewell to the great Guido van Rossum's official leadership and Thank You! 
</p>
`;
  var blogcite11 = ` <p class="footnotes"><a>1. Tim Peters <p class="footnotes">2. <a href="https://www.zdnet.com/article/python-language-founder-steps-down/  "   target="_blank">
  https://www.zdnet.com/article/python-language-founder-steps-down/ </a>
  </p>

`;
  var blogpost10 = `<p class="quote">
...The colossal shift in the chip world came with the advent of artificial intelligence (AI) and machine learning (ML). With these emerging technologies, a flood of new processors has arrived—and they are coming from unlikely sources. <br /><br />
Microsoft is preparing an AI chip for its HoloLens VR/AR headset, and there’s potential for use in other devices. 
<i> Google has a special AI chip for neural networks called the Tensor Processing Unit, or TPU, which is available for AI apps on the Google Cloud Platform. </i>Apple is working on an AI processor called the Neural Engine that will power Siri and FaceID.  <sup>1</sup></p>
<p class="firstparagraph">All ... All the A.I. Tools a busy bee could ask for!
</p>
 `;
  var blogcite10 = `
<p class="footnotes">1. <a href="
https://arstechnica.com/gadgets/2018/07/the-ai-revolution-has-spawned-a-new-chips-arms-race/
"   target="_blank">
https://arstechnica.com/gadgets/2018/07/the-ai-revolution-has-spawned-a-new-chips-arms-race/
</a>
</p>     
`;

  var blogpost9 = ` 
<p class="firstparagraph">Moore's Law--a function of transistor count--has guided CPU bench-mark expectations along a fairly linear path year-by-year. However, computing requirements have multiplied while the mathematical relevence of the law wanes. <br /><br />
<img src="dist/img/moores_law.jpg" width="400px" class="zoom" title="Moore's Law Graphic" /><br />Image Credit: ourworldindata.org <br /><br /> <i>Enter the Decision Tree, the Random Forest, Na&iuml;ve Bayes, and K-Nearest Neighbors</i>: The machine learning tools and theoretical building blocks to get more bang for the buck from all that computing power. How? <i> Teaching software to teach itself, which is the pathway out of computing-power deficits and the move from theoretical to practical</i> ...</p> 
<p class="quote">
Every technology follows a similar path of diszcovery, engineering, and transformation. In the case of electricity, Faraday uncovered new principles, but no one really knew how to make them useful. They first had to be understood well enough that people such as Edison, Westinghouse, and Tesla could figure out how to make things that people would be willing to buy.
 
<br /><br />  The digital revolution, for all of its charms, has had a fairly limited economic impact, compared with earlier technologies such as electricity and the internal combustion engine. Even now, information technologies make up only about 6% of GDP in advanced economies. Compare that to manufacturing, health care, and energy, which make up 17%, 10%, and 8% of global GDP, respectively, and you can see how there is vastly more potential to make an impact beyond the digital world.
<sup>2</sup></p>
<p>As the saying goes, <i>One crowded hour of glorious life is worth an age without a name.</i><sup>3</sup> And now the tide is high for Tech to venture out into the world and make a name for herself!
`;
  var blogcite9 = `<p class="footnotes">2. <a href="https://ourworldindata.org/wp-content/uploads/2013/05/Transistor-Count-over-time.pngArticle"   target="_blank">https://ourworldindata.org/wp-content/uploads/2013/05/Transistor-Count-over-time.png</a>
</p>
<p class="footnotes">2. <a href="https://hbr.org/2018/07/the-industrial-era-ended-and-so-will-the-digital-era"   target="_blank">https://hbr.org/2018/07/the-industrial-era-ended-and-so-will-the-digital-era</a>
</p>

<p class="footnotes">3. Thomas Osbert Mordaunt`

  var blogpost8 = `<p class="firstparagraph">Advances in computer science and data research follow the path of the tools that pave a developer's path: The tools make the worker, and therefore the work. For example, any of the Industrial Revolutions leaped forward with every new tool. <i>Now, Artificial Intelligence research and design  lurches forward by the tooling, but in a new fashion: Open source tools owned and operated by the community, the work by and for any community.</i>
</p>
<p> Neural network tools like TensorFlow.js, a "JavaScript library for training and deploying Machine Learning models in the browser and on Node.js" <sup>1</sup>  along with other programming-library frameworks, abstract away a layer of the visible mechanics. On the one hand, it is the democratization of cutting-edge technology, formerly siloed apart and under government, corporate or university controls. </p>
<p>
The genie is definitely out of the bottle, yet he or she is now at the keyboards across the globe. This has a clear effect in bringing technological innovation to the community, to the coffeeshops and meet-up groups, instead of clearly defined, bureaucratically-directed research ends. </p>
<p>Therefore,  bootstrapping open-source projects brings the community to the forefront of technological innovation! Though the common mobile app has grown familiar for changing landscapes, those apps chiefly leverage the social network (links) of friends and professionals; while the common-use spread of machine-learning research provides leverage to the actual work (nodes) of progress</p>
<p>Therefore, the tools provide one dimension of A.I.'s path, while the democratized distribution of tools across social networks provides a second dimensional path. This alters the A.I. evolution in the long-term, by means of short-term and frequent tooling revolutions.   </p>
`;
  var blogcite8 = `
<p class="footnotes">1. <a href=" https://js.tensorflow.org/"   target="_blank"> https://js.tensorflow.org/</a>
</p>   
`;
  var blogpost7 = `
<p class="firstparagraph">Panic and anxiety cover the Snapchat countries across far-flung locales from Latvia to Denver to Spain--</i>and in one case blighting the entire island of the United Kingdom...</i></p>
<p class="quote">Some users went to Twitter and shared their frustration.
"I've been sending people abuse on snapchat for not replying to me only to discover its down. Oops?" one user tweeted.<br /><br />
"Snapchat just went down. I can literally feel the panic of a thousand generations in my bones. #snapchat," another user posted.
Snapchat currently has 166 million users globally. <sup>2</sup>
</p>
<p> A chronic technical problem before May 2018 when SnapCrash went public   dating to October. <sup>1</sup> -- scalability challenges strike again!</p> 
<img src="dist/img/snapchat.jpg" width="350" class="zoom" /><br /><br />
<p>But inquiring minds want to know, <i>What's the Story with Snapchat? </i>Not to mention the Conspiracy Theorists that blame Snapchat's devotion to Advertisers--too many distractions?</p>
<p class="quote">
[Snapchat] tweeted: “Some Snapchatters are having trouble with the app. We’re aware of the issue and working on a fix! We recommend staying logged into your account.”
<br /><br />
Snapchat recently confirmed that it is testing six-second long ads in Shows on its Discover section that won’t budge no matter how many times a user tries to tap to skip them.<br /><br />

This development has been coming for some time as Snapchat looks to placate advertisers who have grown frustrated by users who, on average, only stay on an ad for two seconds before skipping.</p> 
<p>Every kind of Server malfunction pales in comparison to the Affordable Healthcare Act web-app's abysmal first few months.<i> Get Well Soon, Snapchat--you're breaking our heart!</i></p>`;
  var blogcite7 = `
<p class="footnotes">1. <a href=" https://www.independent.co.uk/life-style/gadgets-and-tech/snapchat-down-not-working-android-broken-message-snap-inc-help-a8443236.html"   target="_blank"> https://www.independent.co.uk/life-style/gadgets-and-tech/snapchat-down-not-working-android-broken-message-snap-inc-help-a8443236.html</a>
</p>    

<p class="footnotes">2. <a href=" http://www.tribuneindia.com/news/science-technology/snapchat-outage-hits-users-globally/480068.html"   target="_blank"> http://www.tribuneindia.com/news/science-technology/snapchat-outage-hits-users-globally/480068.html</a>
</p>    
<p class="footnotes">3. <a href="https://outage.report/snapchat" target="_blank">https://outage.report/snapchat</a></p>
 `;
  var blogpost6 = `
 <p class="quote"><sup>0</sup><strong><small>
 The term “extropy,” coined in 1967, is generally used to describe life’s capacity to reverse the spread of entropy across space and time. </small></strong><sup>1</sup>
 </p>
 <p class="firstparagraph">
 Philosophies of A.I. range from the Aloof to Alarmed, from Punch-drunk Optimism to Harrowing Paranoia: A few vantage points from a Legacy New Yorker:</p>
 <p class="quote">
 Last summer, Oren Etzioni, the C.E.O. of the Allen Institute for Artificial Intelligence, in Seattle, referred to the fear of machine intelligence as a “Frankenstein complex.” Another leading researcher declared, “I don’t worry about that for the same reason I don’t worry about overpopulation on Mars.”<sup>1</sup></p>
 <p class="quote">
 Jaron Lanier, a Microsoft researcher and tech commentator, told me that even framing the differing views as a debate was a mistake. “This is not an honest conversation,” he said. “People think it is about technology, but it is really about religion, people turning to metaphysics to cope with the human condition. They have a way of dramatizing their beliefs with an end-of-days scenario—and one does not want to criticize other people’s religions.”
 <sup>1</sup></p>
 <p class="quote">
 Bostrom had little interest in conventional philosophy—not least because he expected that superintelligent minds, whether biologically enhanced or digital, would make it obsolete. “Suppose you had to build a new subway line, and it was this grand trans-generational enterprise that humanity was engaged in, and everybody had a little role,” he told me. “So you have a little shovel. But if you know that a giant bulldozer will arrive on the scene tomorrow, then does it really make sense to spend your time today digging the big hole with your shovel? Maybe there is something else you could do with your time. Maybe you could put up a signpost for the great shovel, so it will start digging in the right place.” He came to believe that a key role of the philosopher in modern society was to acquire the knowledge of a polymath, then use it to help guide humanity to its next phase of existence—a discipline that he called “the philosophy of technological prediction.” 
 <sup>1</sup></p>
 <p>At the end of the day, we can ask "are we there yet?" over again, but a more pointed query asks not about time, but about place: "It may be highly unpredictable where a traveller will be one hour after the start of her journey, yet predictable that after five hours she will be at her destination.”
 `;
  var blogcite6 = `
 
<p class="footnotes">1. <a href=" https://www.newyorker.com/magazine/2015/11/23/doomsday-invention-artificial-intelligence-nick-bostrom"   target="_blank"> https://www.newyorker.com/magazine/2015/11/23/doomsday-invention-artificial-intelligence-nick-bostrom</a>
</p>    
<p class="footnotes">1. <a href="https://nickbostrom.com/"   target="_blank"> https://nickbostrom.com/</a>
</p>  

 `;
  var blogpost5 = `
 <p class="firstparagraph">It turns out that data is unevenly distributed between sectors, leading to monopoles of dominance: After all, who controls the data, controls the commanding heights. And yet, the very substance of Big Data derives from and belongs precisely to  individuals, aggregated, that checked "Agree" to a given app's Privacy Policy, from a given Internet Service Provider, using a given Browser ....</p>
 <p>Now that physical products lose relative value for many reasons (not to mention easy downloads for 3-D printing), and alternately<i> informational data products gain value in the digital economy: hence the problem of allocating the value of personal data back to the person </i>... To this, the Canadian A.I. Mafia chimes in:</p>
  <p class="quote">A persistent challenge for Element is the dearth of good data. The simplest way to train A.I. models is to feed them lots of well-labeled examples—thousands of cat images, or translated texts. Big Tech has access to so much consumer-oriented data that it’s all but impossible for anyone else to compete at building large-scale consumer products. But businesses, governments, and other institutions own huge amounts of private information. Even if a corporation uses Google for email, or Amazon for cloud computing, it doesn’t typically let those vendors access its internal databases about equipment malfunctions, or sales trends, or processing times. <br />
  <br />That’s where Element sees an opening. If it can access several companies’ databases of, say, product images, it can then—with customers’ permission—use all of that information to build a better product-recommendation engine. Big Tech companies are also selling A.I. products and services to businesses—IBM is squarely focused on it—but no one has cornered the market. Element’s bet is that if it can embed itself in these organizations, it can secure a corporate data advantage similar to the one Big Tech has in consumer products.<sup>1.</sup></p>
  <p>
   <p>So will this kind of data democratization work? Not only so, but the Cambridge Analytica fiasco only briefly awakened public attention to the deep science underlying each of our "online digital signatures" ... the race is on among the Tech Giants to use A.I. to understand our lives, our keystrokes, our buying preferences better than we understand. And in turn, provide a great utility, and win our financial allegiance!
`;


  var blogcite5 = `

<p class="footnotes">1. <a href="http://fortune.com/longform/element-ai-startup-tech/"   target="_blank">http://fortune.com/longform/element-ai-startup-tech/</a>
</p>    

`;

  var blogpost4 = ` 
  <p class="quote">In the Modern Field of Artiificial Intelligence, all roads seem to lead to three researchers with ties to Canadian universities. The first, Geoffrey Hinton, a 70-year-old Brit who teaches at the University of Toronto, pioneered the subfield called deep learning that has become synonymous with A.I. The second, a 57-year-old Frenchman named Yann LeCun, worked in Hinton’s lab in the 1980s and now teaches at New York University. The third, 54-year-old Yoshua Bengio, was born in Paris, raised in Montreal, and now teaches at the University of Montreal. The three men are close friends and collaborators, so much so that people in the A.I. community call them the Canadian Mafia.<sup>1.</sup></p>

  <p class="firstparagraph">A curious path of punctuated advancement due to insufficient memory and cpu power, characterized late 20th century A.I. development: Deep Learning development   lulls interrupted by rapid growth with each successive technological period.
   Toronto's Dr. Geoff Hinton's single-layered A.I. algorithm gained brief fame, yet A.I. research no longer advanced  for ten years. </p>
   <p class="quote">
   Programs that performed well in the laboratory were useless in everyday situations; a simple act like picking up a ball turned out to require an overwhelming number of computations.

The research fell into the first of several “A.I. winters.” As Bostrom notes in his book, “Among academics and their funders, ‘A.I.’ became an unwanted epithet.”<sup>1</sup> 
</p>
<p>
Then came the GPU with Alex Khreshinski's famous image-recognition competition-winning penmanship detector, which notably is still in use by the banking system. This novel use of the GPU to accomplish parallel calculations rewrote the the A.I. field overnight. Also known as the "Cambrian Explosion", this event (and really just the algorithm) set off widespread advancements in the weeks and months follwoing, leading to new speciation ranging from the ANN, Neural Network, to a whole alphabet soup from Convolutional Neural Networks (CNN) <i>to far-reaching mutations of Reinforcement Learning</i>.<sup>2</sup>
  </p>
 
  <p> Along with Hinton's close collaborator throughout the 1980's and 90's, Dr. Yoshua Bengio of the University of Montr&eacute;al, the researchers remain committed to humanity's service:</p>
   
  <p class="quote">
  Hinton moved from the U.S. to Canada in part due to disillusionment with Reagan-era politics and disapproval of military funding of artificial intelligence.[22] He believes political systems will use AI to "terrorize people". Hinton has petitioned against lethal autonomous weapons. Regarding existential risk from artificial intelligence, Hinton has stated that superintelligence seems more than 50 years away, but warns that "there is not a good track record of less intelligent things controlling things of greater intelligence". Asked in 2015 why he continues research despite his grave concerns, Hinton stated "I could give you the usual arguments. But the truth is that the prospect of discovery is too sweet." Hinton has also stated that "It is very hard to predict beyond five years" what advances AI will bring.<sup>1</sup></p>
  
  <p>While Hinton and company aren't necessarily Mahatma Gandhi-like, their devotion to a science prioritized to humanity' service and long-term best interest--free from monetary or other influence is admirable. No wonder their outlook on A.I.'s utility is so much brighter than that of Pessimist Elon Musk and company ... baah-humbug!
 </p>
   
 
  `;


  var blogcite4 = `


  <p class="footnotes">1. <a href="http://fortune.com/longform/element-ai-startup-tech/"   target="_blank">http://fortune.com/longform/element-ai-startup-tech/</a>
  </p>    
  <p class="footnotes">2. <a href="https://www.benzinga.com/pressreleases/18/06/p11846924/join-ai-pioneer-geoffrey-hinton-in-toronto-and-learn-from-global-leade"   target="_blank">https://www.benzinga.com/pressreleases/18/06/p11846924/join-ai-pioneer-geoffrey-hinton-in-toronto-and-learn-from-global-leade</a>
  </p>     


  `;

  var blogpost3 = ` 
  <p class="firstparagraph">Already A.I. has shown its true colors as an ideal tool for solving disproportionately large, complex data problems: Similar to Watson's medical recommendations based on millions of pages read, the off-the scale amount of pages from every tech company is the item of interest. This is the flurry-to-snowstorm of Privacy Policies simultaneously released in response to the E.U.'s May 25th General Data Protection Regulations.  In reference to my June 30th post on A.I. workplace solutions, months of busy-reading-work all distilled to a fraction of the time to analyze those policies. Guess what? The rule-breaking is well under way!</p>
  <p class="quote">Researchers from the European Union Institute in Florence worked with an EU consumer organization to create the software. They then used the program to examine the privacy policies of 14 major technology businesses, including by Alphabet Inc., Amazon.com Inc., and Facebook Inc.<br /><br />
 
  They found that a third of those clauses were "potentially problematic" or contained "insufficient information." Another 11 percent of the policy’s sentences used unclear language, the academics said.  The researchers didn’t make public which companies’ policies violated which provisions of the law, publishing only aggregate findings for all of the companies in the study.<sup>1</sup></p>
 
  <p>Aha! <i>The practices of Tech companies' use of A.I. to analyze customers' private data is well-known, but <strong>what do we actually know</strong> beyond just that? Behind the veil of commercial secret, much less is known than is led on ... until now. Now, A.I. becomes increasingly useful as a tattle-tale! </i> So by the same token that tech creates problems, Tech is the first to provide a solution. But A.I. rule-checking sounds good but raises another question: Who owns, or can access by alternate means, the personal data we have strewn across the internet? And what quality of data does each party have, or shares?  </p>
  `;

  var blogcite3 = `
  
<p class="footnotes">1. <a href="https://www.bloomberg.com/news/articles/2018-07-04/new-ai-tips-off-regulators-to-possible-eu-data-privacy-faults"   target="_blank">https://www.bloomberg.com/news/articles/2018-07-04/new-ai-tips-off-regulators-to-possible-eu-data-privacy-faults</a>
</p>    
  `;

  var blogpost2 =
    `
<p class="quote"><i>Power is “various forms of domination and subordination and the asymmetrical balance of forces which operate whenever and wherever social relations exist.”  </i><sup>1</sup><br /><br />--Michel Foucault</p>
<p class="firstparagraph">Ties and balances of power, at their fundamental core are constantly changing variations of symmetry between two agents, whether unilateral or bilateral: Two nodes interlinked. Magnified by overlapping networks and layers of relations, it's easy to see why long-standing institutions are interlocked, for better or worse ... Clearly the trend of turbulence and power grabs reaches far and wide:
 </p>
<p class="quote">Poland was once a beacon for countries struggling to escape the yoke of the Soviet Union and embrace Western democracy. But it is now in league with neighboring nations, like Hungary, whose leaders have turned to authoritarian means to tighten their grip on power, presenting a grave challenge to a European Union already grappling with nationalist, populist and anti-immigrant movements.<br /><br />

The forced retirements of up to 27 of 72 Supreme Court justices, including the top judge, and the creation of a judicial disciplinary chamber were the latest in a series of steps by Poland’s right-wing Law and Justice Party to take over the justice system.
</p>
<p>As it always is in film, it is so now that dire situations have to call upon the true Super Man, Technology, to save the day: And what form this time? Blockchain technology, which presents a cryptographic solution to the problem of trust:<i> If two agents can agree on a third cryptographic intermediary, then a bridge of trust is built--the kind that in the past only institutions could broker!</i>. </p>
<p>And so, two humans devise a new means to exchange without disruption--an indestructable scaffolding firmly set in the foreground from today's creaking and swaying institutions. Sounds good, but where's the music? There seems to be a subtle interlude between the honeymoon stage of investing and inventing new currencies, and little in the way of micro-transactions and <i> the actual <strong>using</strong> it</i>. It takes a little trust to make trust, so the effort is on to make a bridge from the <i>early adopters</i> stage to <i>mainstream adoption</i>...<sup>3</sup>  
</p>
`;
  var blogcite2 =
    `
<p class="footnotes">2. <a href="https://books.google.com/books?id=6rfP0H5TSmYC&printsec=frontcover"   target="_blank">Foucault, Michel. Discipline and punish: The birth of the prison. Vintage, 2012.</a>
</p>   
<p class="footnotes">2. <a href="https://www.nytimes.com/2018/07/03/world/europe/poland-supreme-court-protest.html"   target="_blank">https://www.nytimes.com/2018/07/03/world/europe/poland-supreme-court-protest.html</a>
</p>   
<p class="footnotes">3. <a href="https://www.nytimes.com/2018/07/01/technology/cryptocurrency-ripple.html?rref=collection%2Fsectioncollection%2Ftechnology&action=click&contentCollection=technology&region=stream&module=stream_unit&version=latest&contentPlacement=9&pgtype=sectionfront"_blank">https://www.nytimes.com/2018/07/01/technology/cryptocurrency-ripple.html</a>
</p> 

`;

  var blogpost1 = 
    `
  <p class="quote">A vast majority of the half-million bodies in the inner asteroid belt may in fact be shrapnel from as few as five parent bodies called "planetesimals," scientists say. But the tangled orbits of those lost worlds meant they were doomed to collide, producing fragments that also collided, producing still more fragments in a cataclysmic cascade that's been going on for more than 4 billion years.<sup>1</sup></p><p> 
</p>
`;

  var blogcite1 = `<p class="footnotes">1. <a href="https://www.washingtonpost.com/news/speaking-of-science/wp/2018/07/03/many-asteroids-might-be-remnants-of-five-destroyed-worlds-scientists-say/?noredirect=on&utm_term=.4f1e000cc632"   target="_blank">https://www.washingtonpost.com/news/speaking-of-science/wp/2018/07/03/many-asteroids-might-be-remnants-of-five-destroyed-worlds-scientists-say/?noredirect=on&utm_term=.4f1e000cc632</a>
</p> 
`;
  var url =  [   
       { id: '24',
       did: '07-28-18',
        date: 'July 28-29, 2018<br />Weekend',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: '',
        post: blogpost24,
        blogcite: blogcite24
      }, 
       {
 id: '23',
    did: '07-27-18',
    date: 'July 27, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Sociology Tomorrow!',
    title: 'Hooray for Planet Green!',
    post: blogpost23,
    blogcite: blogcite23
   }, 
  
    {
      id: '22',
      did: '07-26-18',
      date: 'July 26, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Bot Mercenaries:<br />',
      title: 'As Long as I Can Feel the Beat, Baby I don\'t Need Dollar Bils to Have Fun Tonight<br /><span class="pull-left"> - Sia',
      post: blogpost22,
      blogcite: blogcite22
    },  
     {
    id: '21',
    did: '07-25-18',
    date: 'July 25, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Web Dev Affairs',
    title: 'Bot Mercenaries:<br />Armies of Secret Shoppers',
    post: blogpost21,
    blogcite: blogcite21
  },  {
    id: '20',
    did: '07-24-18',
    date: 'July 24, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Sociology Tomorrow!',
    title: 'Bot Mercenaries:<br />Warrior Bots in Space',
    post: blogpost20,
    blogcite: blogcite20
  },
    {
      id: '19',
      did: '07-23-18',
      date: 'July 23, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Amazon\'s Prime Day Scaling Slip and Recovery:<br />A How-To Guide to Graceful Error Handling',
      post: blogpost19,
      blogcite: blogcite19
    },
    {
      id: '18',
      did: '07-21-18',
      date: 'July 21-22, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Cloud Wars, Part III:<br />Creativity that Turns on a Dime',
      post: blogpost18,
      blogcite: blogcite18
    },
    {
      id: '17',
      did: '07-20-18',
      date: 'July 20, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Cloud Wars, Part II:<br />EZ-Commerce ',
      post: blogpost17,
      blogcite: blogcite17
    },
    {
    id: '16',
    did: '07-19-18',
    date: 'July 19, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Web Dev Affairs',
    title: 'Cloud Wars, Part I:<br />Behomeths from Across the Sea  ',
    post: blogpost16,
    blogcite: blogcite16
  },{
      id: '15',
      did: '07-18-18',
      date: 'July 18, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'By the Light of Ethereum',
      post: blogpost15,
      blogcite: blogcite15
    },
    {
      id: '14',
      did: '07-17-18',
      date: 'July 17, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Annual Prime Day , Part II:<br /> The Credit Card Hangover',
      post: blogpost14,
      blogcite: blogcite14
    },
    {
      id: '13',
      did: '07-16-18',
      date: 'July 16, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Prime Day\'s Annual All-You-Can-Eat Buffet, Part I<br />',
      post: blogpost13,
      blogcite: blogcite13
    },
    {
      id: '12',
      did: '07-14-18',
      date: 'July 14-15, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Crypto Valley, Switzerland',
      post: blogpost12,
      blogcite: blogcite12
    },
    {
      id: '11',
      did: '07-13-18',
      date: 'July 13, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Simple is better than Complex. Complex is Better than Complicated.<br /><small>--Tim Peters</small>',
      post: blogpost11,
      blogcite: blogcite11
    },

    {
      id: '10',
      did: '07-12-18',
      date: 'July 12, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Tools of the A.I. Trade, Part III:<br />  Operation Architecture Drilldown',
      post: blogpost10,
      blogcite: blogcite10
    },

    {
      id: '9',
      did: '07-11-18',
      date: 'July 11, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Tools of the A.I. Trade, Part II:<br />Machine Learning\'s Pedal to the Metal',
      post: blogpost9,
      blogcite: blogcite9
    },
    {
      id: '8',
      did: '07-10-18',
      date: 'July 10, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Tools of the A.I. Trade, Part I: <br />The Proliferation of Machine Learning Modeling Libraries ',
      post: blogpost8,
      blogcite: blogcite8
    },
    {
      id: '7',
      did: '07-09-18',
      date: 'July 9, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: '187 million Snapchat Users and Enquiring Minds want to Know: Did Multiple Clusters Fail at once?...or is there Foul Play?',
      post: blogpost7,
      blogcite: blogcite7
    },
    {
      id: '6',
      did: '07-07-18',
      date: 'July 7-8, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Theories of Extropy <sup>0</sup>',
      post: blogpost6,
      blogcite: blogcite6
    },
    {
      id: '5',
      did: '07-06-18',
      date: 'July 6, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'The Canadian Mafia, Part II.<br />Data Better Recollected',
      post: blogpost5,
      blogcite: blogcite5
    },

    {
      id: '4',
      did: '07-05-18',
      date: 'July 5, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'The Canadian Mafia, Part I.<br /> On the Good-Natured Vision of the Godfathers of A.I.',
      post: blogpost4,
      blogcite: blogcite4
    },
    {
      id: '3',
      did: '07-04-18',
      date: 'July 4, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Training Data, Big and Beloved Data<br />Big Data\s Most Notorious Rule-Breaker and Rule-Enforcer: A.I.',
      post: blogpost3,
      blogcite: blogcite3
    },
    {
      id: '2',
      did: '07-03-18',
      date: 'July 3, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'What\'s Behind the Rebirth of the Nation-State?<br />There\'s a <i>Blockchain DAPP</i> for that!',
      post: blogpost2,
      blogcite: blogcite2
    },
    {
      id: '1',
      did: '07-02-18',
      date: 'July 2, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Celestial Bodies: Always Out to Impress!',
      post: blogpost1,
      blogcite: blogcite1
    }

  ];

  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-july").innerHTML += cat;
  }

  var i;
  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle cha-pternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-july-mod").innerHTML += catMod;
  }
  console.log('blogger-july');
    // console.log(angular.toJson(url));
};
bloggerJuly();

var bloggerJune = function () {
 
var blogpost14 = 
`
<p class="quote"><i>
All people going to the International Space Station must do so through Kazakhstan today. Since the space shuttle retired in 2011, there's no other ship capable of carrying people up there besides Soyuz, the Russian workhorse of many decades. NASA purchases seats for its astronauts; each mission is worth tens of millions of dollars. But the situation is going to change soon. 
Two companies — Boeing and SpaceX — are developing commercial crew vehicles to carry astronauts to the ISS. They should start flying crews in the next year or two...</i><sup>1</sup>
</p>
<p class="firstparagraph">If there is ever a global stage marked by camaderie besides the World Cup, space would have to take a strong 2nd place--ISS collaboration breaks all bounds! But what's really going on with that place anyway? Past 2024--apparently not much, but that's because the moon is going on ...</p>
<p class="quote">The latest [Congressional Budget Office's] request has no money for the space station past then[2024]. That's so that NASA can focus its resources on the Deep Space Gateway, a lunar space station that plays a part in the administration's request to send astronauts to the moon again before going on to Mars.
<br /><br />
The Europeans have expressed some interest in the Deep Space Gateway, but as for [Russian] Roscosmos, their direction is unclear. The [Russian] agency could join NASA on another space station, go on its own, or ally itself with newer space powers (such as China) for other work.<sup>1</sup>
</p>
<p>Besides the moon, I wouldn't be opposed to a year-and-a-half long trip to Mars--so long as I had plenty of reading material, and a round-trip ticket!
`
var blogcite14 = 
`
<p class="footnotes">1. <a href="https://www.space.com/41038-roscosmos-russian-space-strategy-commercial-crew.html"   target="_blank">https://www.space.com/41038-roscosmos-russian-space-strategy-commercial-crew.html</a>
</p>   
`
var blogpost13 = 
`
<p class="firstparagraph">If there was ever a thing called "Continuing Education," that thing has become a learning, thinking mandate in the modern professional world. Learning to work side-by-side with our A.I. "automation workmates" has become a somewhat paradoxical burden whereby the more we learn, the more we get to shovel our work onto our <i>Ever-Cheerful automators</i>, and this is the least onerous burden I have ever had to bear...</i> It's called the <i>Abolition of boring tasks!</i> </p>
<p>Many writers have touched on the freedom that digital automation affords us: The repetitive, mundane (i.e. mindless) tasks that once occupied days and weeks of our time can now be evaporated away in hours when we just ask for help from our digital automotons--but we first have to ask! </p>
<p>And so, the work is no longer the work we do: <i>Our work is learning new digitally automated short-cuts, hacks, and clever work-arounds to better shovel the work off to our automotons</i>. But we can only be so clever, and so we have to learn to be more clever: hence the latest rage from colleges and universities with programs offering 'perpetual learning.' The Washington Post reports,</p>
<p class="quote">

In the future of work, robots are supposed to wipe out tons of jobs, create a bunch of new ones or deliver some combination of both. Economists predict any of these scenarios will force the average worker to do practically the same thing throughout their careers: keep learning and learning and learning.
<br /><br />
Some colleges in the United States are already preparing for this age of perpetual education, including the University of Michigan’s Ross School of Business. The Ann Arbor school launched a scholarship program that pays for graduates to take classes there forever, and the number of students is slowly growing.<sup>1</sup></p>
<p>
<p>But what really is the time-scale on this big transformation? Most things operate like they always have, and honestly, maybe we can be a little more picky about what, how, and <strong>why  we "optimize" the things we do. But that kind of old-fashioned Ludditism is not the age we live in. Today, everything has to change to stay compatible!  A more telling detail from the New York Times:</p>
<p class="quote">And we’ve digitized only about 20 percent of the economy, meaning there’s tremendous technological climate change yet ahead. These climate changes are reshaping the ecosystem of work — wiping out huge numbers of middle-skilled jobs — and this is reshaping the ecosystem of learning, making lifelong learning the new baseline for advancement.<sup>2</sup></p>
<p>20%? Really? So, it sounds like our productivity is <i>inversely proportional to work <strong>we</strong> do</i>, but rather the work--boring, mundane work--that we can effectively hand off to our automon partners--whatever the sector.  

`
var blogcite13 = 
`

<p class="footnotes">1. <a href="https://www.nytimes.com/2018/06/26/opinion/political-parties-climate.html"   target="_blank">https://www.nytimes.com/2018/06/26/opinion/political-parties-climate.html</a>
</p> 
<p class="footnotes">2. <a href="https://www.washingtonpost.com/news/wonk/wp/2018/06/06/in-the-future-college-never-really-ends/?noredirect=on&utm_term=.4d7810952eb7"   target="_blank">https://www.washingtonpost.com/news/wonk/wp/2018/06/06/in-the-future-college-never-really-ends/?noredirect=on&utm_term=.4d7810952eb7</a>
</p>  

`
 
var blogpost12 = 
`
<p class="firstparagraph">Obnoxious misuse of A.I.Tech is a rare thing because developers are among the smartest and most humane among all professions, if I my humbly claim.  But <i>Tech consumers are not necessarily bound by such thoughtful solidarity.</i> The following exemplifies the darker side of A.I. tech...                                          </p>
<p class="quote">Cogito is one of several companies developing analytics tools that give agents feedback about how conversations with customers are going. Its software measures in real time the tone of an agent’s voice, their speech rate, and how much each person is talking, according to Dr. Place. “We measure the conversational dance,” he says.

That dance is sometimes out of sync, such as when an agent speaks too quickly or too much, cuts a customer off, has extended periods of silence or sounds tired.
<br /><br />
When the software detects these mistakes, a notification pops up on a window on an agent’s screen to coax them to change their strategy. The alerts are useful not just for the agents, but also for their supervisors, Cogito says.<sup>1</sup></p>
<p>For all the fanfare of A.I. and Learning algorithms, let's hope that those who wield such power will not yield to obnoxious misuse. Famed Sociologist Max Weber wrote on the over-rationalizing tendencies of bureaucratic devotion to mass production. He calls it the iron shell, and the ... </p>
<p class="quote">"more complex idea that Weber himself sought to evoke with the "shell as hard as steel": a reconstitution of the human subject under bureaucratic capitalism in which "steel" becomes emblematic of modernity ... Further, whereas a cage confines human agents, but leaves their powers otherwise intact, a "shell" suggests ... a new kind of being.</i>" <sup>2</sup></p>
<p>This 19th century sociologist Dr. Weber lived in simpler times, pre-dating the 1910's  industry-wide adoption of "Tayloristic" calculations in factory settings for optimized and maximum efficiency--all invented by a Factory Supervisor named Frederick Taylor, armed with a pencil and a heavy-duty clipboard!
</p><p>
Now imagine starting a new job with a feisty robot, as one proud supervisor proclaims: <i>"One of her 14 agents said the software noticed he wasn’t speaking with enough energy, so it prompted him with a message to pep up plus a coffee-cup icon, she says." </i><sup>1</sup>
</i> The horror, the horror.</p>
</p>
`;
var blogcite12 = `


<p class="footnotes">1. <a href="https://www.wsj.com/articles/call-center-agents-get-a-human-touch-1528984801?mod=foesummaries"   target="_blank">https://www.wsj.com/articles/call-center-agents-get-a-human-touch-1528984801?mod=foesummaries</a>
</p> 
<p class="footnotes">2. <a href="https://www.jstor.org/stable/2678029?seq=1#page_scan_tab_contents"   target="_blank">https://www.jstor.org/stable/2678029?seq=1#page_scan_tab_contents</a>
</p> 
`;
var blogpost11 = 
`
<p class="firstparagraph">As if Apple needed any more money--now Samsung will be writing a half-billion dollar check to right the wrongs of patent infringement and "slavish" copying.<sup>1</sup> Well, history certainly repeats itself as it was IBM that played the relentless copy-cat of Apple's technological leadership way-back-when. 
</p>

<p class="quote">Apple Inc and Samsung Electronics Co Ltd on Wednesday settled a seven-year patent dispute over Apple’s allegations that Samsung violated its patents by “slavishly” copying the design of the iPhone.<br /><br />In May, a U.S. jury awarded Apple $539 million, after Samsung had previously paid Apple $399 million to compensate for patent infringement. Samsung would need to make an additional payment to Apple of nearly $140 million if the verdict was upheld.<sup>1</sup>
</p><p class="paragraph">Isn't it true that Apple is made by and wholly devoted to the Creatives from every sector? And thus the Creator will inevitably create followers ... I guess in retrospect my various Samsung phones and products have been "inspired" by Apple...so close, yet so far away--another case of the six-degrees of connections to a celebrity! 
</p>
<p>My love affair with Apple products is still riding the pink cloud--less than a year now. I have the good luck to use a Macbook Pro that feels, types, and views like a sports car. You can rev the engine by running some heavy-duty map imaging from data calculations--<i>talk about the MacBook's grace and power, when lo, your root is sitting right on top of a Linux Shell. These words come from a 25-year serf to Microsft's ownership.</i> The feel of a 1967 Corvette with very little between you and 350 Horse Power. I honestly haven't experienced this high quality since the first time I listened to Radiohead on my friend's new I-pod in 2007.  
</p>
<p>An Ode to Apple products: Apple! You are our Creative Leadership and your Apple Watch is beyond our realm--a postcard from another world. Apple, you alone bear the high standard of quality tech products--because you, Apple, do occupy the highest, and wealthiest, seat among the Tech Giants!
</p>
`;

var blogcite11 = `
<p class="footnotes">1. <a href="https://www.reuters.com/article/us-apple-samsung-elec/apple-samsung-settle-u-s-patent-dispute-idUSKBN1JN2S4"   target="_blank">https://www.reuters.com/article/us-apple-samsung-elec/apple-samsung-settle-u-s-patent-dispute-idUSKBN1JN2S4</a>
</p> 

`;
var blogpost10 = `
<p class="firstparagraph">5G Technology, ever so close to life-changing implementation, conjures up fantastic musing over how our everyday products will interact in real-time with our personalized data-cloud. Certainly IoT (Internet of Things) products will be carrying a whole lot of machine-to-machine to machine communication. From the IoT edge (encircling a router, for instance) to communicate sensors to mid-range "listeners".</p>
<p>So, although Sprint-T-Mobile Oneness spells monopoly, the scale of work that needs to be done to convert everything to 5G <i>means we Need a great tech innovator like T-Mobile's John Legere to push with fervor the right ways to deliver 5G connectivity to every American, anywhere.</i> My<a href="#18-04-27"> April 27 post</a> talks more on their affair, but the reality is that Sprint doesn't contribute value to American innovation; that claimed, <i>Sprint's bandwidth rights and spare parts really <strong>will truly</strong>  add value</i> to American Tech!</p>
`;
var blogcite10 = `<p class="footnotes">1. <a href="https://www.reuters.com/article/us-sprint-corp-m-a-t-mobile-us/sprint-t-mobile-defend-proposed-tie-up-before-u-s-senate-panel-idUSKBN1JN33A"   target="_blank">https://www.reuters.com/article/us-sprint-corp-m-a-t-mobile-us/sprint-t-mobile-defend-proposed-tie-up-before-u-s-senate-panel-idUSKBN1JN33A/a>
</p> 
`;

var blogpost9 =`
<p  class="firstparagraph">
Why the GPU rather than CPU for speed? 90% of deep learning algorithms use distributed, parallel problem-calculations. So, who needs a steering wheel racing on the Bonneville Salt Flats? Certain kinds of algorithms do, though, such as recursive, tree-traversing kinds. But I'm just a tourist.
</p> 

<p class="quote"><i>
[Alex Khrizhevsky] says he recalls reading some paper about matrix multiplication algorithms on the GPU (I don’t know the specific one), and basically the idea he had at the time was just to re-implement the original Lenet architecture[1], but use the GPU to train a network (of unprecedented size in 2012) really fast.
</i><sup> 1</sup></p>

<p>Evolution of these new AI's, and AI's designing AIs, require voracious amounts of training data to implement and improve learning designs.  So where would AI research stand if not for the ultra-fast and efficient modern-day Graphical Processing Unit? Better asked, what inspired Krizhevski's novel, paradigm-shattering design?  Clearly <i>the Need for Speed!</i> </p>
 
  `;
var blogcite9 = 
`
<p class="footnotes">1. <a href="https://www.quora.com/How-did-Alex-Krizhevsky-come-up-with-the-idea-of-AlexNet-How-does-the-designer-think"   target="_blank">https://www.quora.com/How-did-Alex-Krizhevsky-come-up-with-the-idea-of-AlexNet-How-does-the-designer-think</a>
</p>

 
`;
  var blogpost8 = 
  `  <p class="quote"><i>
Deep learning allows computational models that are composed of multiple processing layers to learn representations of data with multiple levels of abstraction. These methods have dramatically improved the state-of-the-art in speech recognition, visual object recognition, object detection and many other domains such as drug discovery and genomics. Deep learning discovers intricate structure in large data sets by using the backpropagation algorithm to indicate how a machine should change its internal parameters that are used to compute the representation in each layer from the representation in the previous layer. Deep convolutional nets have brought about breakthroughs in processing images, video, speech and audio, whereas recurrent nets have shone light on sequential data such as text and speech.</i><sup>1.</sup>
</p> 
  <p class="firstparagraph">Artificial Intelligence has evolved from a prototypal event known as the "Cambrian Explosion, only five years ago."<sup>1</sup> An architect named Alex Krizhevsky offered a new paradigm for <i>deep learning</i> at an image recognition event, Imagenet Competition. Mr. Krizhevsky's "Alex Net" became the pivotal <i>Convolutional Neural Network</i>, with a mere 8 layers' depth (think of the decision tree mentioned in post 6/20) &amp; millions of parameters. </p>

<p>The handwriting-signature recognition algorithm is still in use today! The design--using a training technique called "Stochastic Gradient Descent", by Geoff Hinton--blew the competition away and revolutioned machine learning. </p>
<p>Today, neural netwoks boast <i>hundreds of layers and billions of paremeters: The last five years has been busy!</i> And the varied species of designs since the original Convolutional Neural Network (CNN) include Recurrent Neural Networks (RNN), Generative Adverserial Networks (GAN) and Reinforcement Learning.
</p> 
`;
var blogcite8 = 
`<p class="footnotes">1. <a href="https://www.nature.com/articles/nature14539"   target="_blank">https://www.nature.com/articles/nature14539</a>
</p> 

<p class="footnotes">2. <a href="https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks"   target="_blank">https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks</a><br />
PDF:  <a href="https://www.nvidia.cn/content/tesla/pdf/machine-learning/imagenet-classification-with-deep-convolutional-nn.pdf"   target="_blank">https://www.nvidia.cn/content/tesla/pdf/machine-learning/imagenet-classification-with-deep-convolutional-nn.pdf</a>  
</p> 
`

var blogpost7 = 
  `  <p class="quote"><i>I sat one evening in my laboratory; the sun had set, and the moon was just rising from the sea; I had not sufficient light for my employment, and I remained idle, in a pause of consideration of whether I should leave my labour for the night, or hasten its conclusion by an unremitting attention to it. As I sat, a train of reflection occurred to me, which led me to consider the effects of what I was now doing. <br />
  <br />
  --Victor Frankenstein<sup>1</sup>
  </i><br /> 
</p>
<p class="firstparagraph">Nvidia's latest 12" by 4" by 4" GPU accelerates algorithmic work from 1<sup>1/2</sup> months to 4 days. The most recent exponential leaps in computing power--most notably for A.I. purposes, are thanks only to the Graphical Processing Unit. Progress followed a linear path in as 1998 world, a world enlightened by the pivotal A.I. publication, "Convolutional Neural Netowrks for Handwritten Digital Recognition" (Lecun, Bottou, <strong>Bengio</strong>, Haffner, 1998) to the present use in blockchain computing and deep learning algorithms, among many other purposes. The technical advantage offered by Nvidia explained by 2012's "ImageNet Classification with NVIDIA GPUs (Krizhevsky, Hintou, et al.). Ten years ago, Daniele G. Spamintato and Anne C. Elstery offer a succinct explanation:
</p>
<p class="quote">Optimization algorithms are becoming increasingly more important in many areas, such as finance and engineering. Typically, real problems involve several hundreds of variables, and are subject to as many constraints. Several methods have been developed trying to reduce the theoretical time complexity. Nevertheless, when problems exceed reasonable sizes they end up being very computationally intensive. Heterogeneous systems composed by coupling commodity CPUs and GPUs are becoming relatively cheap, highly performing systems.
<br />
<br /> Recent developments of GPGPU technologies give even more powerful control over them. In this paper, we show how we use a revised simplex algorithm for solving linear programming problems originally described by Dantzig for both our CPU and GPU implementations. Previously, this approach has showed not to scale beyond around 200 variables. However, by taking advantage of modern libraries such as ATLAS for matrix-matrix multiplication, and the NVIDIA CUDA programming library on recent GPUs, we show that we can scale to problem sizes up to at least 2000 variables in our experiments for both architectures. On the GPU, we also achieve an appreciable precision on large problems with thousands of variables and constraints while achieving between 2X and 2.5X speed-ups over the serial ATLAS-based CPU version. With further tuning of both the algorithm and its implementations, even better results should be achievable for both the CPU and GPU versions.<sup>2</sup></p>
<p>So, given the exponential development advantages of GPU use, it's clear the horizon for more and more developers implicates high computing needs.  So, what exactly is novel yet increasingly a household developer tool? </p>
<p class="quote">
CUDA® is a parallel computing platform and programming model developed by NVIDIA for general computing on graphical processing units (GPUs). With CUDA, developers are able to dramatically speed up computing applications by harnessing the power of GPUs.<br /><br />

In GPU-accelerated applications, the sequential part of the workload runs on the CPU – which is optimized for single-threaded performance – while the compute intensive portion of the application runs on thousands of GPU cores in parallel. When using CUDA, developers program in popular languages such as C, C++, Fortran, Python and MATLAB and express parallelism through extensions in the form of a few basic keywords.
<br /><br />
The CUDA Toolkit from NVIDIA provides everything you need to develop GPU-accelerated applications. The CUDA Toolkit includes GPU-accelerated libraries, a compiler, development tools and the CUDA runtime.
<sup>3</sup></p>
<p>And, this tech is arriving at both the mainstream PC-optimization level as much as typical university research, the potential of both laid out in a June 2018 Wired Magazine article:</p>
<p class="quote">PCs that work on smartphone parts. Devices that run all day, but for real this time. A 32-core hellbeast processor. The first GPU shrunk down to a 7nm process. Always-connected 5G laptops. And while not a PC, the ASUS ROG put vapor cooling in gaming-focused smartphone. (Vapor cooling. In a smartphone.) 
<br /> . . .
<br />And then there's arguably the real star of the show, an AMD prototype of the first-ever GPU built on a 7nm process. Unlike some of the other blockbuster announcements out of Taipei this week, this one won't make its way to your computer any time soon. It'll find a home in data centers, helping AI and machine learning compute at blistering speeds, using a lot less energy to do so.<sup>4</sup>
  </p>
  <p>And so, with blistering speed and the joining of disciplines of science, the spear's tip of innovation accelerates ... without a spare nanosecond for reflection!
  `;

  var blogcite7 =  `<p class="footnotes">1. Frankenstein, or Modern Prometheus, Mary Shelley, 1818. <br /><a href="https://www.gutenberg.org/files/84/84-h/84-h.htm"   target="_blank"> PDF https://www.gutenberg.org/files/84/84-h/84-h.htm</a>
  </p>  
  
  <p class="footnotes">2.  <a href="https://www.gutenberg.org/files/84/84-h/84-h.htm"   target="_blank">2009 IEEE International Symposium on Parallel & Distributed Processing</a>
  </p>  
  <p class="footnotes">3.  <a href="https://developer.nvidia.com/cuda-zone"   target="_blank">https://developer.nvidia.com/cuda-zone</a>
  </p> 
     <p class="footnotes">4.  <a href="https://www.wired.com/story/computex-2018-new-chips-qualcomm-amd-intel/"   target="_blank">https://www.wired.com/story/computex-2018-new-chips-qualcomm-amd-intel/</a>
  </p>  
  
  `;
 
var blogpost6 = 
  `
  <p class="firstparagraph">
  <p class="firstparagraph">Small, online businesses face the music today to pay state sales taxes, thanks to the Supreme Court's <i>Wayfair V. South Dakota</i>.<sup>2</sup> My <a href="#18-04-14">April 14th var blog</a>, <i>Clash of the Brick &amp; Mortars against Online Stores</i> goes more in depth... </p>
  <p>What this means is that imminently, 50 variations of newly permitted State internet sales taxes for small businesses.<sup>2</sup> This will inevitably hurt variety, and likely lead to a lot of inter-state confusion: </p>
  <p class="quote">The new law may seem straightforward, but there are fairly complicated specifics when it comes to different jurisdictions and categorization of goods.
<br /><br />
  For example, New Jersey places a tax on marshmallows, which are considered candy and a luxury, but they don’t tax marshmallow fluff which is considered food. In some states Kitkat bars are categorized as food because they contain flour, but a snickers bar is candy. Meanwhile a snickers ice cream bar, which needs to be refrigerated, would be considered food and not taxed.<sup>1</sup></p>
  <p>Small, online businesses: Get your calculators ready!
  </p> 
 `;
  
 

  var blogcite6 =  ` 
  <p class="footnotes">1.  <a href="https://www.forbes.com/sites/advisor/2018/06/21/state-sales-tax-which-states-are-most-affected-by-the-supreme-court-online-retail-ruling/#791a05383e66"   target="_blank">https://www.forbes.com/sites/advisor/2018/06/21/state-sales-tax-which-states-are-most-affected-by-the-supreme-court-online-retail-ruling/#791a05383e66</a>
  </p> 
  
  <p class="footnotes">2.  <a href="http://money.cnn.com/2018/06/21/technology/wayfair-vs-south-dakota/index.html"   target="_blank">http://money.cnn.com/2018/06/21/technology/wayfair-vs-south-dakota/index.html</a>
  </p> 
  
  `;
  var blogpost5 = ` 
  <p class="firstparagraph">What difference does it make for Net Neutrality to morph into 50 different variations now that the neutrality protections leave the federal arena to fall into  state legislation?<sup>1</sup> Who can tell. Unfortunately, a potential micro-balkanization of bandwith rules within an interdependent network doesn't spell faster service for anyone. </p>
  
  <p>
  What people seem to forget is that the key win for the 2015 net neutrality laws were merely <i>a small reflection of the larger significance of <strong>the net's reclassification as a service, like water, natural gas, and electricity.</i></strong> State legislators need to focus on the air we breathe as critical to providing enough at reasonable cost, to merely survive in the times.</p>
  <p>After all, the internet venues are what color the web...the last thing we need is the vast and varied imagination of 5 umbrella content-providers. Wired Magazine makes a good point that </p>
  <p class="quote">California's current legislative debates may lead the precedent for others, more influential than Seattle's--California's economy is equally sized with France at 2.5 trillion. 
  <br />
  <br />[California State Senator Scott Wiener's] original bill included all the major provisions of the FCC's old rules, which banned broadband providers from blocking, throttling, or otherwise discriminating against lawful content. But it went further than the FCC rules by banning companies from blocking or throttling content as it enters their network from other networks, under so-called interconnection agreements.<sup>2</sup> </p>   
  <p>The Internet, after all, is a Network, and a network is by definition a singular entity.</p>
  `;
 

  var blogcite5 =  ` 
  <p class="footnotes">1.  <a href="http://www.latimes.com/politics/la-na-pol-court-online-taxes-20180621-story.html"   target="_blank">http://www.latimes.com/politics/la-na-pol-court-online-taxes-20180621-story.html</a>
  </p>
  <p class="footnotes">2.  <a href="https://www.wired.com/story/california-net-neutrality-bill-was-hijacked-lawmaker-says/"   target="_blank">https://www.wired.com/story/california-net-neutrality-bill-was-hijacked-lawmaker-says/</a>
  </p>
    `;

  var blogpost4 =  `<p class="quote"><i>
  They left The Denver Post amid newsroom layoffs and interference in the editorial process by the newspaper’s hedge-fund owners. And now those reporters and editors are creating their own news outlet, The Colorado Sun.  They will be partnering with the Civil Media Company, an ambitious New York start-up that aims to use blockchain technology and crypto economics to start 1,000 publications nationwide by the end of the year. </i>
  <br /><br />- New York Times, June 17, 2018</p><br />
  <p class="firstparagraph">Power from the 4th Estate tends to flow in the form of printers' ink, however Blockchain Tech empowers journalists with  new resources for their trade: free money and data, and more importantly, an empowered readership in Cooperative form: 
  </p>
  <p class="quote">
  The new publication will have a conventional website whose data will be written permanently into the secure digital ledger known as the blockchain. Expenses for the fledgling outlet will be covered by a grant from Civil, whose sole investor, for now, is ConsenSys, a Brooklyn-based blockchain software technology company founded by the Canadian entrepreneur Joseph Lubin. Mr. Lubin is also a co-founder of the Ethereum, a virtual currency and blockchain database platform. As part of its plan to fund new media entities, Civil plans to unveil a new token this summer called CVL.
<br /><br />
People who purchase the CVL token, a form of cryptocurrency, will have a say concerning the projects hosted by Civil — meaning that they can vote on whether one of its websites violates the company’s journalism standards, which are outlined in the Civil Constitution.<sup>1</sup> 
  </p>
  <p>Who would have guessed that through Crypto-Currency for money and Distributed Ledger Tables for data, modern Journalism would rise from the ashes of tech-induced impoverishment and so-called 'fake-news' delegitimization to regain limitless ink for influence, with a renewed and democratized legitimacy.  <br />
  <br />
  Thank you, Blockchain, for restoring Truth to Power!
  </p>
  `;

  var blogcite4 =  `
  <p class="footnotes">1.  <a href="https://www.nytimes.com/2018/06/17/business/media/denver-post-blockchain-colorado-sun.html"   target="_blank">https://www.nytimes.com/2018/06/17/business/media/denver-post-blockchain-colorado-sun.html</a>
  </p>
  
  `;
var blogpost3 =  `<p class="firstparagraph">Deep Learning--a 70's thing--clearly predates   personal computing, the web, and even the 70's Show. But the true advances have been a long time in development, and credit belongs to Statistics and Data Science, and specifically quantitative analysis' ever cleverer classification trees that deliver the goods with greater accuracy, coupled with less intensive computing costs. And this origin is interesting in itself: </p>
 <p class="quote">
Fifty years have passed since the publication of the first regression tree algorithm. New techniques have added capabilities that far surpass those of the early methods. Modern classification trees can partition the data with linear splits on subsets of variables and fit nearest neighbor, kernel density, and other models in the partitions ... <br />
<br />Classification And Regression Trees (CART) (Breiman et al., 1984) was instrumental in regenerating interest in the subject. It follows the same greedy search approach as  Automatic Interaction Detection (AID) and THeta Automatic Interaction Detection (THAID), but adds several novel improvements. Instead of using stopping rules, it grows a large tree and then prunes the tree to a size that has the lowest cross-validation estimate of error. The pruning procedure itself is ingenious, being based on the idea of weakest-link cutting, with the links indexed by the values of a cost-complexity parameter. This solves the under-fitting and over-fitting problems of  AID and THeta Automatic Interaction Detection (THAID), although with increased computation cost.<sup>1</sup>
</p>
<p>Today, Machine Learning curricula usually begin with the same sample datasets on Iris characteristics (pictured below)</p>
<img style="min-width:300px;"  src="dist/img/learningData.PNG"><br /><br />
<p>So how does it really work, in oversimplified terms? Contrary to most algorithms' step-by-step manual decision-making through for- and while-loops, if-else, and so on, the scalability of design clearly falls off. Enter Deep Learning, which is nothing more mystical than simple classification--i.e. decision--trees. Beginning with a million choices, a decision passes through multiple layers that may or may not be activated, and with each activated layer, a decision is narrowed down, until finally a decision is reached between recognizing a dog and a cat!
</p><img style="min-width:300px;" src="dist/img/classifTree.PNG">
</p><img style="min-width:300px;" src="dist/img/classifTree2.PNG"><br /><br />
<p>And yet, for all of this science, up until 2011, the error rate for simple shape recognition, like say a dog from a cat still averaged a 26% error rate! A mere 7 years later? Today, that error rate averages less than 3% error, most recently due to computing, power, and memory advances.   Those come in handy for delivering a warehouse worth of computing onto your smartphone! That's a boon for delivering sensors, i.e. training data, into the environment. My last post mentioned Google's upcoming, yet unnamed Android OS...but we do know it's a candy that starts with "P"...my guess is Peppermint Patties? Or maybe Pez has more of a ring to it.</p>  
<p  >
Whatever the new OS is called, it comes with a developing potential to exponentially advance <i>Tree Science</i>:  ML Kit behaves like an API layer connecting the ML software to the app developers' models, making dev easy to run and deploy with an "experimental model compression flow that aims to reduce model size (up to orders of magnitudes) while maintaining similar accuracy."<sup>3</sup> Talk about maturing exponentially quickly! Now, this origin story can't compete with Wolverine's nor Han Solo's, but this gem carries a mythical and futuristic potential to satisfy screen-goers from all devices, frame-sizes, and platforms!</p>
`;

var blogcite3 = `

<p class="footnotes">1. Loh, W. Y. (2014). Fifty years of classification and regression trees. International Statistical Review, 82(3), 329-348.
<a href="https://onlinelibrary.wiley.com/doi/full/10.1111/insr.12016"   target="_blank">https://onlinelibrary.wiley.com/doi/full/10.1111/insr.12016</a>
</p>

<p class="footnotes">2. Classification and Regression Trees Leo Breiman, Jerome Friedman, Charles J. Stone, R.A. Olshen (1984).
<a href="https://www.taylorfrancis.com/books/9781351460491"   target="_blank">https://www.taylorfrancis.com/books/9781351460491</a>
</p> 

<p class="footnotes">3. 
<a href="https://developers.google.com/ml-kit/"   target="_blank"> https://developers.google.com/ml-kit/</a>
</p>
<p>Images:Maurice Roux
Université Marseille 3
Saint-Jérôme</p>
`;

var blogpost2 = 
`
<p class="firstparagraph">
The upcoming Android 'P' OS--still in beta and only available on Pixel phones, Essential, and a few others--promises a new era in mobile app development<sup>1</sup>  Most features, like expanding Maps' indoor functionality, inclusive Emojis, and a revamped navigation bar are all nice, but one element of the build empowers app developers' access to machine-learning code: 
</p>
<p class="quote"> With  ML, i.e. machine-learning, Kit, app developers can use Google’s machine learning tasks within their own apps. ML Kit allows developers to use the camera for face detection, landmark recognition, text recognition, and a host of other recognition features.<sup>2</sup></p>
<p>
So, in conceptual terms, this means developing app-data models that are <i>optimized for mobile inference</i>. This means that the long process of acquiring enough training data to optimize an app's design or behavior (generally or specifically user personalization), can now be shortened with better quantity and quality of training data &aacute; la machine learning. So in concrete terms, the past 15 years' of Google ML research is now distilled into (again, still beta) an SDK (software developers' kit) that facilitates dev integration without needing to hand-make a model to access the run-time environment. 
</p>
<p>In other words, past server-side inferences now jump to the mobile device, and tap into   on-device machine learning library framework and toolkit--i.e. TensorFlowLite. This jump-starts customized application of machine learning already in production--that is, Android devices' <i>Neural Networks API</i> and <i>iOS' Metal</i>.  
</p>
<p>What makes this new programming horizon most interesting is that an equally new feature, called "Actions" and "Slices",  allows for certain app features to be accessed by the phone itself outside of the app. A May 8th Verge article explains:

</p>
<p class="quote">
Google is introducing developers to a couple of terms: “Actions” and “Slices.” They are essentially deep links into apps that are able to surface in other parts of the operating system. Actions are analogous to Actions on Google Assistant; Slices are a subset that can show the app’s own UI when you type out a global search on the phone.
<br /><br />
The idea behind both of these concepts is to break out the different pieces of the apps you use into the larger operating system. Samat calls it the “decomposition of apps,” though without the connotations of death. “Yeah, you want to go the app,” he says, “but actually what you want to do is go to your house or reorder from Instacart.”
<br /><br />
Developers will need to build some frameworks into their apps to make Actions and Slices available to the system. When they do, the AI in Android P will try to understand what those apps can actually do and suggest those actions to you. “When you modularize the app, it’s not just an API call,” Samat says. “You have these components that can be understood by the system, predicted by the system, and then rendered by the system.”<sup>3</sup>
</p>
<p>So what does this mean? Better, higher-quality time spent with your work or play, rather than hopping from one icon to the next for each and every task...`;
  var blogcite2 = `

  <p class="footnotes">1.

  <a href="https://developer.android.com/preview/devices/"   target="_blank"> https://developer.android.com/preview/devices/</a>
 
  </p>
  <p class="footnotes">2.

  <a href="https://www.digitaltrends.com/mobile/google-android-p-news/"   target="_blank"> https://www.digitaltrends.com/mobile/google-android-p-news/</a>
 
  </p>
  <p class="footnotes">3.

  <a href="https://www.theverge.com/2018/5/8/17327302/android-p-update-new-features-changes-video-google-io-2018"   target="_blank"> https://www.theverge.com/2018/5/8/17327302/android-p-update-new-features-changes-video-google-io-2018</a>
 
  </p>

  `
  /*
var blogpost1 =  `<p class="firstparagraph">Blockchain technologies, i.e. Government contracts, Business contracts, Bitcoin and other

cryptocurrencies, all rely on network graph theory, both on the low-level programming technology (peer-to-peer global

ip networks) across the spectrum to high-level interfaces for institutional, corporate, individual needs and uses.

These blockchain &quot;network&quot; analyses depend on highly variable--and simultaneous--network changes, node

changes, and link changes; and, the latter three may arbitrarily change interdependantly or not.</p>



<p>Therefore, blockchain technologies must first accomodate  complex node variables, including one- or two-way contracts (relationships) that

 depend on<i> arbitrarily hierarchical mappings and conditional data structures.</i> Secondly, blockchain tech must face analytical

challenges that arise from informal practices<sup>1</sup><span class="new">--you can survey opinions, but how do you measure whim?</span>
The organizational nodes (employees) choose to deviate from their employment roles&#39; protocol <span class="new">because it it is sunny outside, or maybe because the traffic was long today, or because a butterfly's wing-swish cooled a rash decision down to reason.  That small detail often trumps statistical patterns of efficiency, convenience, company culture, and multiple other levels of analysis of human factors.</p>



<p>Sociologists Meyer &amp; Rowan&#39;s (1977)

<i>New Institutionalism</i> explains how employees change practices and decouple

<i>actual</i> organizational structure from recorded rules, as a function of organizational size, time, convenience,

etc. Noone can argue against this wall of reason. <span class="new"><i> The problem is not the reason, the problem is the static, frozen wall called Social Science Theory, constructed from a pastiche of different meanings</i> and arbitrary theoretical starting points.  <span class="new">The esteemed Scholar of Comparative Politics, Dr. Ellen M. Immergut, undermined modern sociology concepts in 1998--a logical blow from which Sociology has never recovered (nor yet faced). She writes:</span>
</p>
<p class="quote new">
Further confusion has arisen because the new institutionalists do not propose one generally accepted definition of an institution, nor do they appear to share a common research program or methodology. In fact, three separate branches of scholarship--rational choice, organizational theory, and historical institutionalism -- all lay claim to the label, seemingly without adhering to an overarching theoretical framework.<sup>3</sup></p>
<p class="new">
In other words, the long-standing Civil War within the discipline of Sociology (beginning with Functionalists' irreconcilable contradictions of Conflict Theorists' entire World-View--and vice-versa). From this initial schism begins the disassembling of the discipline--as it stands until today. 
All of that talent and no single vision to harness a lasting explanatory platform.  And this is <i>before</i> addressing--from a Scientific Method Paradigm--the problem of continually new, unknown constraints on data that must be intimately understood without falling back to the old, "USA Today" habits of 'Theoretical Relativism'.</p>
</span>
<p>
So, how do we recognize unwritten, soft rules and behaviors of a bank, a person,

or a company&#39;s internal bot?</p> 

<p>The hard sciences domain of Software Engineering, Computer Science, and Mathematics have brilliantly brought the

world the blockchain tool, based on a <span class="new"><i>technical, numerical aptitude--numeracy--for which the Hard Sciences can and must share and propogate it's technical expertise and higher standard of metric truth</i><s style="color:purple" class="strike-purple"> not contribute everything, especially relating with</s> to the other sciences that are still lagging behind--namely The Discipline of Sociology</s> toward acclimating to the modern age's social priorities and needs. Ask yourself, how well do 1,000 top blockchain-related programmers understand the multi-dimensional layers of hierarchical social, corporate, and governmental relationship networks--probably 700 of the 1,000. And how many social scientists can understand the technological sciences? Probably 200 out of 1,000. This means that <i>a chunk of the scientific displines suffer from acute innumeracy</i>. So how do we bridge this massive knowledge gap between qualitative meaning in the smart-contract?</span></p>

<p>In the past, the layers of abstraction from raw technological tool to societal use was refined, improved, integrated through multiple layers of &quot;middlemen&quot;, such as lawyers, corporate lawyers, government institutions, non-governmental, non-profit and for-profit actors. Blockchain technology, by its very nature, erases the middlemen. Suddenly, one programmer, for example, is writing the same healthcare insurance crypto-contract, that last month an entire team of hospital employees spent a month writing; then overseeing and managing different facets of this same thing.</p>



<p>However, the crypto-contract, once deployed to the blockchain, auto-manages the rest, forever or for the life of
the contract. Therefore, rather than redoing the trials and errors of 200 years&#39; Sociology Network Analysts&#39;
research and analytical development. <span class="new"> Therefore, much of the social scientists have arrived at the end of the line of technology, still shackled to analog methodology relegated to the Sine and Cosine of progress; while the World leaves it behind, led by the Hard Sciences of Software Engineering--the new social fabric of the 21st Century. So, can the anthropological and social domains survive this existential threat to any authority--that depends if the Hard Sciences, Gatekeepers of Empirical Science will extend an open door and pro-actively share technical instructions for the soft sciences.  Therefore, the social sciences are not safe hiding at home, within the academic
tower--far removed from the pace of societal and technological change.  
 </p>
 

<p class="new">The point is this: The innumeracy of the Soft Sciences increasingly loses authority, with the less it can prove at the Command Line Interface. So, how will an analog academic field in the early 21st century compete with artifical intelligence? Problems grow exponentially in the modern age, and only the sciences with  machine-learnig on their side can expect to thrive by applying extraordinary applications of machine-learning to network theories. <span class="new">
 Sociologists deal with real-time, logical and hierarchical network mappings that appear arbitrary, yet are characterized by fixed patterns. This implies a higher level of competency to accurately judge a point-of-view without the ability to directly consult machine learning. <i>This is a Code or Be Coded moment in the life trajectory of the social sciences.</i></span></p>



<p>  <i>the Power  of the Social Sciences, even while paraliyzed, cannot be underestimated:</i> No other academic field than sociology has advanced into the details, and endless network rabbit-holes that characterize societal behavior. Not until this second millenial decade could the marriage of Large Number Statistical Theory

become consumated with the brilliance of early 1900&#39;s Sociological French Network Theories, like Maurice Halbswach&#39;s

work on the clearly defined network patterns of a society&#39;s Collective Memory.</p>



<p>So, current sociology, having collected and refined knowledge on network arbitrariness, such that Economic&#39;s &quot;irrational

behaviors&quot; and Mathematical &quot;complexity models&quot; do not

<i>touch to the bone</i> the meaning, the intersectionality of network analysis, which must incorporate simultaneous

node changes (person gets job /or/ does not get job), network changes (All get jobs /or/ only 3 of 15 network groups

get jobs), and most importantly the

<i>relationship</i> changes (all jobs always useful /or/ half of job groups no longer useful) across time and fixed.</p>



<p>Fine. So, why is Sociology&#39;s network theory so valuable, yet inaccessible, beyond just the network insights gleaned from 19th and

20th centuries&#39; network problems?  European sociology came of age in the analog social era, while North

American Sociology only recently come of age (Quebec in the 1960&#39;s [post-1968], U.S. in the 1990&#39;s[post-1999],

in the digital social era. Therefore, the problem-solving patterns of past sociology are inherently small-data and

more qualitative analysis, and thus only Sociology incorporates &quot;human-ness&quot; into the billion rows and

columns of quantitative--numbers-only--analysis.</p>



<p>For example, Oxford-developed S.I.E.N.A. Software accomplishes this task. SIENA--named for Simulation Investigation

for Empirical Network Analysis--software calculates the real-time values, direction, and conditions of each relationship

(link) in a network, simultaneously as each node, network, or alter-link changes or is changed; with this, it is

possible to isolate directional, conditional

<i>influence change</i> in real-time. Real-time sounds impossible, however, the SIENA documentation

<sup  >2</sup> describes its program algorithm to the statistical analysis of network data, with the focus on social networks.</p>



<p>An easy example to grasp this is the concept of whether a person

<i>self-selects </i>(e.g., due to subconscious leanings) into a group and thus matches to fruition the group&#39;s

behavior with little group influence? Or does this same person join a group and emulates the group&#39;s behavior,

by the group&#39;s influence over time. Sociological network analysis, using Snjder&#39;s SIENA software, achieves

the impossible with the closed, directed graph networks that characterize blockchain technology. The network graph

can be here understood as entire (complete) networks (i.e, the blockchain in its entirety without hard forks), not

as personal (egocentered) networks: Using this SIENA model allows for the necessary assumptions that a set of nodes

(social actors) is given, and all ties (links) between these nodes are known - except perhaps for a moderate amount 
of missing data</p> 

<p>If, and only if, this level of analysis may be achieved, the blockchain development may follow a linear, directed

path of maturity with social and world needs.<span class="new"> Until   Social Science Network Theorists stop from basing their numerical analysis on the mutable sand of theory, rather than theory based on the   foundation of numerical science, <i>any attempt at conclusion...you guessed it...cannot be conclusive.</i>So, the social sciences must consult the hard sciences, otherwise they risk squandering countless years of talented theorists' work; <i>the discipline's executive functions are cut off from it's increasingly inaccessible (and increasingly powerful) knowledge base.</i> --Such a talented, powerful Thoroughbred of a Science, that still wanders without a head for technical direction.</span></p>
`;
var blogcite1 = `
<p class="footnotes">1. 
<a href="http://www.journals.uchicago.edu/doi/abs/10.1086/226550"   target="_blank"> http://www.journals.uchicago.edu/doi/abs/10.1086/226550</a>
 

</p>

<p> 
2. 
<a href="https://www.stats.ox.ac.uk/~snijders/siena/"  target="_blank"> https://www.stats.ox.ac.uk/~snijders/siena/</a>
<br />
<p class="footnotes">3. The Theoretical Core of the New Institutionalism, Ellen M. Immergut: Politics &amp; Society, Vol. 26, Issue I, pp. 5-34 
<a href="http://journals.sagepub.com/doi/abs/10.1177/0032329298026001002?journalCode=pasa
"  target="_blank">http://journals.sagepub.com/doi/abs/10.1177/0032329298026001002?journalCode=pasa
</a>
</p>
` ;
*/
  var url =  
  [ 
  {
    id:'14', 
  did:'06-30-18',
  date:'June 30-July 1, 2018<br />Weekend ',
    author:'by Thomas Maestas',
    cat3:'Sociology Tomorrow!',
    title:'The Space Powers that Be:<br />When Boeing issues a Ticket to the Moon', 
    post:blogpost14,
   blogcite:blogcite14
 },{
  id:'13', 
did:'06-29-18',
date:'July 29, 2018',
  author:'by Thomas Maestas',
  cat3:'A.I.Now',
  title:'A.I. &amp; Work, Part II<br />Learning to Learn alongside a Cheerful Automoton Work-Partner', 
  post:blogpost13,
 blogcite:blogcite13
},
 {
    id:'12',
   
  did:'06-28-18',
  date:'June 28, 2018 ',
    author:'by Thomas Maestas',
    cat3:'A.I.Now',
    title:'A.I. &amp; Work, Part I<br />Fighting Obsessive Compulsive Quantitative Optimization Disorder and the Slide into a Weberian Iron Shell',

    post:blogpost12,
   blogcite:blogcite12
 },{
    id:'11',
   
  did:'06-27-18',
  date:'June 27, 2018 ',
    author:'by Thomas Maestas',
    cat3:'Web Dev Affairs',
    title:'Apple: You are our Tech Leader!',

    post:blogpost11,
   blogcite:blogcite11
 }, {
  id:'10',
  did:'06-26-18',
  date:'June 26, 2018 ',
    author:'by Thomas Maestas',
    cat3:'Sociology Tomorrow!',
    title:'T-Nation Makes the Case: Sprint Merger takes on the Senate',
    
  post:blogpost10,
 blogcite:blogcite10
},  {
    id:'9',
    did:'06-25-18',
    date:'June 25, 2018 ',
    author:'by Thomas Maestas',
    cat3:'A.I.Now',
    title:'Modern Prometheus, Part III: <br />Accelerating Evolution of Neural Networks &agrave; la Nvidia GPU',
    post:blogpost9,
   blogcite:blogcite9
 },  {
    id:'8',
    did:'06-23-18',
    date:'June 23-24, 2018<br />Weekend',
    author:'by Thomas Maestas',
    cat3:'A.I.Now',
    title:'Modern Prometheus, Part II: <br />Broadening Evolution of Deep Learning Species &agrave; la Neural Network',
    post:blogpost8,
   blogcite:blogcite8
   },   { 
    id:'7',
    did:'06-22-18',
    date:'June 22, 2018',
    author:'by Thomas Maestas',
    cat3:'A.I.Now',
    title:'Modern Prometheus, Part I.<br />Made from 8 billion transistors and 1,000 Cuda Cores:<br /> Today\'s Irreplaceable NVidia GPU',
    post:blogpost7,
   blogcite:blogcite7
   }, { 
    id:'6',
    did:'06-21-18',
    date:'June 21, 2018',
    author:'by Thomas Maestas',
    cat3:'Sociology Tomorrow!',
    title:'"Taxation Without Representation is Tyranny!"<br /><br />-- James Otis, 1776',
    post:blogpost6,
   blogcite:blogcite6
   }, 
   { 
    id:'5',
    did:'06-20-18',
    date:'June 20, 2018',
    author:'by Thomas Maestas',
    cat3:'Sociology Tomorrow!',
    title:'A Healthy Internet is a Fast, Cooperative Internet: <br />Net Neutrality Protections move to State-Level Legislation',
    post:blogpost5,
   blogcite:blogcite5
   }, { 
    id:'4',
    did:'06-19-18',
    date:'June 19, 2018',
    author:'by Thomas Maestas',
    cat3:'Musing Blockchain',
    title:'Rise of the Embattled 4th Estate',
    post:blogpost4,
   blogcite:blogcite4
   },   
    { 
    id:'3',
    did:'06-18-18',
    date:'June 18, 2018',
    author:'by Thomas Maestas',
    cat3:'A.I.Now',
    title:'Machine Learning, Democratized:<br />Part II: Deep Learning\'s Origin Story',
    post:blogpost3,
   blogcite:blogcite3
   },  { 
    id:'2',
    did:'06-16-18',
    date:'June 16-17, 2018<br />Weekend',
    author:'by Thomas Maestas',
    cat3:'Sociology Tomorrow!',
    title:'Machine Learning, Democratized<br />Part I: Google\'s ML Kit',
    post:blogpost2,
   blogcite:blogcite2
   }  
   /*
    { 
    id:'1',
    did:'06-15-18',
    date:'June 15, 2018',
    author:'by Thomas Maestas',
    cat3:'Musing Blockchain',
    title:' The Spectre of a Headless Horseman:<br /> Why  Sociologists <i> are<span class="new">n\'t </span></i> Key Players in Data Analysis within the Domain of Blockchain Technologies?<br /><span class="new">A Re-Do of my <s >Feb 10,2018</s> post</span>',
    post:blogpost1,
   blogcite:blogcite1
   }*/
   
   ] ;

   for (i=0;i<url.length;i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>` ;
document.getElementById("paragraph-june").innerHTML += cat; 
} 
 
var i;
for (i=0;i<url.length;i++){ 
  var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
document.getElementById("paragraph-june-mod").innerHTML += catMod; 
}; 
 
console.log('blogger-june');
  // console.log(angular.toJson(url));
};
bloggerJune();  




var bloggerMar = function () {


  var blogpost21 = `<p class="firstparagraph">Washington D.C.  
  Not Normally does WonderWoman Show her Face, but the student protest takes the day on gun control. Emma Gonzalez--one of the Parkland School Shooting survivors, addressed, and marched with, hundreds of thousands of middle- and high-schoolers, took to the streets of D.C. to protest lax gun-control, e.g. AK-47's readily available at a moment's notice ... for home protection? I wouldn't want to be a neighbor for fear of collateral damage! So technology keeps one-upping the ol' six-shooter to something easily labeled as <i> a Weapon of Mass Destruction</i> ... so is it still a gun?
  </p>
  <p >Last week and this week, the out-of-control handgun problem is in the news. This leads one to believe there is the root problem with the <i>definition</i> of a gun. As always. Definitions start wars and world wars--after all of last century, did anyone decide who controls the Coal of Sudetenland?  You can bet everyone there speaks two languages, still. The <i>definitional </i> answer makes the answer: But this is a problem in the tech age because definitions change, <i>scale of effect changes</i>, and this makes the definition impossible to pin down. The definition is as relative as the technological change makes it.  
  
  </p>
  <p class="cite"><a href="http://www.latimes.com/local/california/la-me-saturday-walkouts-liveupdates-emma-gonzalez-leads-remarkable-moment-of-1521916931-htmlstory.html">http://www.latimes.com/local/california/la-me-saturday-walkouts-liveupdates-emma-gonzalez-leads-remarkable-moment-of-1521916931-htmlstory.html</a> </p>`

  var blogpost20 = `<p class="firstparagraph">Last week and this week, the out-of-control handgun problem is in the news. This leads one to believe there is a problem with the <i>definition</i> of a gun. As always. Definitions start wars and world wars--after all of last century, did anyone decide who controls the Coal of Sudetenland?? You can bet everyone there speaks two languages, still. The <i>definitional </i> answer makes the answer: This is why Blockchain technology--straddled between myriad start-ups, countless institutions and a hundred brilliant minds is The answer to our scalability problems.   

  </p><p>The problem is that data structures grow at differential rates, some exponential, some linear, some slower, some as a function of time or other variable.  Yet, our data analysis needs are clear: We need a new technology to handle quickly, securely and efficiently the <i>Networked, Relational Data Problem</i>, which scales exponentially with traditional data structures, like old-fashioned Excel-like Row-&amp;-Column data structures. Yet, as one would logarithmize the equation to best adapt new data, so must the computer data structure adjust accordingly. </p>
  <p>Too rigid, the world turned to relational, non-Structured Query Language (SQL) data, partially for the need to dislate <i>data objects</i> from their tables. The world needed that cell as a free-radical in order to mimic the data structure of societally-networked society.  Alas, a science already at hard work with Cambridge Analytica--again what's that field of study called again, Sociology, right? </p>
  <p>
  
  </p>`
  var blogpost19 = `<p class="firstparagraph">I mistakenly laid waste to A.I.'s reputation in my last post. It <i>did</i> let us, our whole society, let us down, and maybe the forensics will give us <i>a few excuses</i> down on the road. However, "homicide by A.I. (aka Uber)" will need to be updated in records. But, artificial intelligence is not at fault. There are a few software engineers that did the best they could--with the time their superiors gave them.  Uber leadership, let's hope, will be deterred from future carelessnes to come.   </p>

  <p>That diatribe said, I do appreciate an Uber's proximity when I'm stranded at 2:00 am in a bad part of town. Why? Because I don't need to plan ahead -- Uber is there! And, sadly, I don't need to read or study -- Google is there! But wait, don't judge me, I'm not lazy! That being said, I have my own soul-searching to do: TECHNOLOGY AIDS AND ABETS ME AND MY ACTIONS, but it does not run my show> Only I take responsibility for my own actions: I allow technology into my life as a tool, and yet I   hold the power cord. I take responsibility for the tech that follows me--and believe me, I need that tech. And so do you. Not only so, but the world, and the ecological fate of our <i style="color:green">green earth</i>> also depends on tech, A.I. specifically. </p>
  <p>
  Humankind has already dug an ecological (dare I say 'alkaline') pit deeper than can be dug out of: Flooding, forest fires, and Species Extinctions. A.I. is <i style="color:brown"> is </i>> the only viable hope so we, i.e. Uber, shouldn't prematurely spoil its development. 
  </p>
  <p class="quote">Several questions raise their ugly head when A.I. can't help Earth or humankind. Like it or not, A.I. will need to 3-D print the dykes for the sunken coastal cities--like tiny island Den Haague, the most beautiful city in the world. Next, A.I. will make irrelevant fossil fuels by 2030, if not before; and those caught polluting would be fined to death, anyway. Without A.I., none of these worthwhile goals are possible. This precarious, difficult and most of all laborious job of designing our own solutions will take time: For this reason, Uber should be shamed even further for their short-cuts, and eventual errors of internal, organizational problems. <i>Uber's experiemental, tax-free "Testing Sandbox" cannot be the erstwhile safe neighborhoods of Surburban Phoenix, without proper caution.</i> </p>		
  <p>Are Uber's corporate desires, market stronghold, and shareholders' delight more worthwhile than <i>an entire sensitive field of machine-learning research?</i> No. Uber must be warned to not steal corporate secrets from Waymo, then proceed to be 86'd from California, then brush aside with excuses the <i>killing of an innocent Arizona bicyclist</i>.</p>
  <p>
  Who can count the number of very feisty taxi-men and -women that are not fans of the infamously hasty culture of Uber. The team of lawyers needed to be 86'd from France? Uber already knows, because maybe they know B.D.O! 
  </p>
  <p></p>
  <p class="cite">3.
  <a href="https://www.theguardian.com/technology/2017/apr/07/uber-waymo-lawsuit-lidar" target="_blank">https://www.theguardian.com/technology/2017/apr/07/uber-waymo-lawsuit-lidar</a>
  </p>`

  var blogpost18 = `
  <p class="firstparagraph">A.I. generally, and specifically Uber's Self-Driving Tech, both have failed society this week. Although we could all debate the merits of "Lidar", i.e. laser-based vision, the primary concern, in my view, is Uber's obvious carelessness in rushing their self-driving tech.  Although six thousand (6,000 too many) pedestrians are killed in the U.S. annually, I'd only hope AI wouldn't add to the problem.<sup>2</sup> The Arizona victim was walking her bicycle when struck, and I as bike-commuter can't help but take the affair personally. </p>
  <p>This first human death is at least a <strong>big Wake-Up moment</strong> for the industry in its haste to roll out A.I. tech.  After all, Uber's questionable leadership morals<sup>2</sup> and being kicked out of San Francisco for running more than six red-lights raises eyebrows to begin with.<sup>3</sup> My problem with Uber is that the car's algorithm, with perfect Lidar vision, did not flinch or slow down for two seconds as it killed the victim. Humans flinch and humans swerve, because protecting fellow humans is in our DNA, not in A.I.'s. So, while we now know Uber's software hasn't caught up with its A.I.-Lidar hardware--let's hope we see defensive driving and some <i>TLC</i> programmed into those A.I. Algorithms!
  </p>
  <p class="cite">1.
  <a href="https://www.theguardian.com/technology/2018/mar/22/video-released-of-uber-self-driving-crash-that-killed-woman-in-arizona" target="_blank">https://www.theguardian.com/technology/2018/mar/22/video-released-of-uber-self-driving-crash-that-killed-woman-in-arizona</a>
  </p>
  
  <p class="cite">2.
  <a href="https://www.theguardian.com/technology/2017/apr/07/uber-waymo-lawsuit-lidar" target="_blank">https://www.theguardian.com/technology/2017/apr/07/uber-waymo-lawsuit-lidar</a>
  </p>
  <p class="cite">3.
  <a href="http://fortune.com/2017/02/26/uber-self-driving-car-red-lights/" target="_blank">http://fortune.com/2017/02/26/uber-self-driving-car-red-lights/</a>
  </p>
  `

  var blogpost17 = `<p class="firstparagraph">
  Universities, private or public institutions, serve as a beacon for
  <strong>the Fearless Protection and Ethical Regulation</strong> of information and data. This is because data and data research
  is innate to the university's Mission Statement, whereas business and governmental institutions are relatively new
  to the game, and often at odds with the
  <i>Academy</i>, and occasionally against each other. </p>
  <p class="quote">Threats to student data privacy existed long before the internet. The FBI under J. Edgar Hoover infiltrated Berkeley
  student groups to counter communism in the 1960s. Around the same time, the CIA manipulated the National Student
  Association for intelligence gathering in other anti-communism efforts. But the privacy issue is more acute now
  that the amount of student data in cloud-based systems has grown exponentially and is more widely dispersed.
  <sup>2</sup>
  </p>
  <p> The University's expertise over ethically regulated data collection and management, is better than government, business,
  and even medical domains for two reasons. First, the institution's long history and ethical motives with data are
  unique. The norms of data-handling have been codified through the University's Institutional Review Board based
  on its
  <strong>stated mission</strong>. In other words, Universities take data seriously
  <i>for reasons other than corporate profit or governmental control</i>. An example of personal data precautions has
  played out with Harvard's recent data tiffs leading to the Supreme Court, illustrated by a 2016 article: </p>
  <p class="quote">Last week undergraduates at Harvard University raised concerns about the institution handing over their data to an
  anti-affirmative action group as part of a lawsuit. Students for Fair Admissions, which is suing the university
  for allegedly discriminating against Asian American applicants, will have access to “academic, extracurricular,
  demographic and other information” from all undergrads who applied to Harvard between the fall 2009 and spring 2015,
  omitting names and Social Security numbers.
  <sup>2</sup>
  </p>
  <p>The second reason why Universities understand ethical implications for data is that data and more broadly data and
  human information
  <i>research</i> is the institutions' second highest priority, along with teaching and service. For example, in response
  to the unethical Public Health research in
  <i>Tuskegee Syphilis experiements</i>, the University instution
  <i>stepped in</i> to help design the 1978
  <strong>Belmont Principles</strong>. Currently, the University Institutional Review Board incorporates this with the Nuremburg
  Code (developed after WWII NAZI research), in handling data research.
  </p>
  <p>In recent days,
  <i>private companies</i> claim expertise for regulating "Fake News", and you guessed it,
  <strong>regulation of data privacy &amp; confidentiality.</strong><sup>3</sup> The ethical authority over data privacy norms are nowhere
  else than the University campus, case in point Harvard... Let the governments govern and the enterprises enterprise,
  and leave the
  <i>thoughtful, ethical regulation of data collection and precaution </i> to the Ivory Tower. Corporate and Government
  self-regulation is opaque enough!</p>
  
  
  <p class="cite">1.
  <a href="https://www.theguardian.com/technology/2018/mar/21/mark-zuckerberg-response-facebook-cambridge-analytica"
  target="_blank">https://www.theguardian.com/technology/2018/mar/21/mark-zuckerberg-response-facebook-cambridge-analytica</a>
  </p>
  <p class="cite">2.
  <a href="https://www.edsurge.com/news/2016-10-26-pursuing-academic-freedom-and-data-privacy-is-a-balancing-act"
  target="_blank">https://www.edsurge.com/news/2016-10-26-pursuing-academic-freedom-and-data-privacy-is-a-balancing-act</a>
  </p>
  <p class="cite">3.
  <a href="https://www.bloomberg.com/news/articles/2018-03-21/paul-ford-facebook-is-why-we-need-a-digital-protection-agency"
  target="_blank">https://www.bloomberg.com/news/articles/2018-03-21/paul-ford-facebook-is-why-we-need-a-digital-protection-agency</a>
  </p>
  `

  var blogpost16 = `
  <p class="firstparagraph">Today, US inserted itself into a large, deep debate about crypto-legitimacy by imposing new sanctions on Venezuela.
  In case you hadn't heard, here's a quick recap:</p>
  <p class="quote">The administration’s announcement came a few hours after Mr. Trump signed an executive order barring the use of any
  digital currency issued by the Maduro government since Jan. 9. Mr. Maduro announced last month that his country
  had begun a presale of the Petro, backed by the nation’s vast petroleum reserves.
  <br />
  <br />The Venezuelan government called the launch a response to a financial crisis that has prompted a profound devaluation
  of the national currency, the bolívar, and quadruple-digit inflation.
  <sup>1</sup>
  </p>
  <p>
  This turn of events, both Maduro et al.'s financial cleverness and Trump's action to de-legitimate the Petro crypto-currency,
  are examples of the undefined, near-limitless political uses for Blockchain Tech, both offensively and defensively.
  In fact, the ensuing events may be of great interest as we will witness a major first actual use-case of the decentralizing
  aims of crypto-technology tool. A tool that softens the financial leverage wielded by centralized authorities, whether
  governemntal or private.
  </p>
  <p>I used the term "de-legitimate" above because there are two processes at work: First, crypto-currencies are
  <i>in themselves</i> not legitimate. A
  <strong>crypto-currency platform gains legitimacy through a series of both technical and financial trust-building stages</strong>.
  So legitimacy is earned first privately, and some currency platforms continue publicly to Initial Coin Offering,
  and so on--purely financial and technical legitimacy.
  </p>
  <p>And then, there is the another kind of legitimacy, which involves political leverage ... </p>
  <p class="cite">1.
  <a href="https://www.nytimes.com/2018/03/19/world/americas/trump-venezuela-sanctions-petro.html" target="_blank">https://www.nytimes.com/2018/03/19/world/americas/trump-venezuela-sanctions-petro.html</a>
  </p>
  `
  var blogpost15 = `
  <p class="firstparagraph">Iota and Ripple cryptocurrencies use different technology than traditional blockchain in order to achieve their distributed
  ledgers. Traditionally, outside "miners" validate the block's
  <i> transaction records</i> as it replicates to the next "block." For example, a transaction is validated 2 or three
  times, and since three miners' validations all agree, one is kept and two are destroyed, in a nutshell; one example
  of computations (
  <strong>and hence coal</strong>) that cost too much time and energy.</p>
  <p>Unlike this arrangement, Iota, Ripple, and Hedera use a directed-acyclic-graph (DAG) data structure (shaped like
  a sideways genealogy tree) that relies on "consensus" from its nearest neighbor transaction nodes.
  <sup>1</sup>
  </p>
  <p>Enough with the jargon! The bottom line is that Bitcoin's tech is not eco-sustainable,
  <sup>2</sup> and so alternatives are already closing in on Bitcoin. Iota, the 8th largest cryptocurrency Iota delivers
  open-source transparency, lightning speed, and yet is it cryptographically sound? Not according to some tech pundits:
  </p>
  <p class="quote">You might think that IOTA, a cryptocurrency worth over a billion dollars, and working with organizations like Microsoft,
  University College London, Innogy, and Bosch, BNY Mellon, Cisco, and Foxconn (through the Trusted IOT Alliance)
  would not have fairly obvious vulnerabilities, but unfortunately, that’s not the case. When we took a look at their
  system, we found a serious vulnerability and textbook insecure code.
  <br />
  <br /> “In 2017, leaving your crypto algorithm vulnerable to differential cryptanalysis is a rookie mistake. It says that
  no one of any calibre analyzed their system, and that the odds that their fix makes the system secure is low,” states
  Bruce Schneier, renowned security technologist, about IOTA when we shared our attack.
  <sup>3</sup>
  </p>
  <p>And so, with a 1.9 billion market cap, I sometimes have to reflect on the immensity and non-relational fact and figures
  of our technological world! Security and other bugs are hard to avoid when an industry is moving too fast for thoroughly
  tested betas; and each iteration involves a series of bug-patches, with short- and long-term priorities stretched
  with new design &amp; function trade-offs.</p>
  <p>
  Full life-cycle software development, from napkin-idea to rolling specs, always follows these patterns yet not always with
  so much money on the line! Here's a closer look at one critique of Iota:</p>
  <p class="quote">
  IOTA developers had written their own hash function, it was a huge red flag ... I think it’s important to reiterate that
  the IOTA developers do not agree with our characterization of this as an issue of concern. Our report lays out more
  details about why we are concerned.
  <br />
  <br /> There are other red flags — unlike every other program running on your laptop or phone, IOTA uses ternary instead
  of binary. Since all computer hardware today uses binary, IOTA converts to ternary in software, which is less efficient
  and more complex. This complexity prevents IOTA from benefiting from existing security analysis tools that are designed
  to work with binary, and makes the code harder to read and understand.
  <br />
  <br /> The current IOTA tangle requires a trusted party (the coordinator) for security, suggesting that in its current
  form it’s not ready to run as a truly permissionless, decentralized system.
  <sup>3</sup>
  </p><p>
  Optimizing, not sacrificing, should be the name of the game as Tech closes in on Blockchain challenges of security, scalability,
  and that evers-so-costly
  <strong>Sustainability!</strong>
  </p>
  <p>1.
  <a href="https://www.bloomberg.com/news/articles/2018-02-14/next-generation-crypto-ledgers-take-the-block-out-of-blockchain"
  target="_blank">https://www.bloomberg.com/news/articles/2018-02-14/next-generation-crypto-ledgers-take-the-block-out-of-blockchain</a>
  </p>
  <p>2.
  <a href="
  https://digiconomist.net/bitcoin-electricity-consumption-surpasses-singapore-portugal
  " target="_blank"> https://digiconomist.net/bitcoin-electricity-consumption-surpasses-singapore-portugal </a>
  </p>
  <p>3.
  <a href="
  https://medium.com/@neha/cryptographic-vulnerabilities-in-iota-9a6a9ddc4367
  " target="_blank"> https://medium.com/@neha/cryptographic-vulnerabilities-in-iota-9a6a9ddc4367</a>
  </p>
  `
  var blogpost14 = `
  <p class="firstparagraph">Sustainability for the environment means an accelerated transition to renewables. While other nations have undertaken
  big steps toward wind and solar - even China's pollution declined in 2014 for the first time
  <sup>1</sup>. EU is now 30% renewable--from 12% in 2000 to expected 50% renewable energy by 2030
  <sup>2</sup>. Us, it appears, not so much...ouch.</p>
  <p>What can we do then, in our lives, to make our own contribution. Well, besides less fossil fuels and red meat, we
  can choose our cryptocurrencies more conscientiously. One NY town's recent actions echo my own concerns about the
  enormous carbon footprint of "Proof-of-Work" blockchain mining.
  </p>
  <p class="quote">
  The city of Plattsburgh has put a moratorium on cryptocurrency mining to preserve natural resources, the health of its residents
  and the city’s “character and direction,” officials said after a public hearing Thursday. For 18 months, the 20,000-resident
  city will not consider new applications for commercial cryptocurrency mining. Violators will face fines of up to
  $1,000 for each day they defy the moratorium.
  <sup>3</sup>
  </p>
  <p>So, me too - count me out, I can't help but do the same, and pronounce my own refrain from Bitcoin (this is more
  spiritual since I don't own, nor mine). In contrast, I'll put Ethereum on hold since they are transitioning to a
  zero carbon-footprint by year's end. </p>
  <p>And, for the most environmentally friendly cryptocurrencies, I wholly support Ripple (3rd highest valued cryptocurrency)
  and also clean
  <i>Iota</i> (8th highest valued )
  <sup>5</sup>. Ripple, unfortunately, is a private company with a less-accessible internal distributed ledger. And yet,
  Hedera Hashgraph heralds the most optimistic news of all: A blindlingly fast Hashgraph structure, unbound from any
  carbon footprint.
  </p>
  <p>1.
  <a href="http://www.wri.org/blog/2017/01/china%E2%80%99s-decline-coal-consumption-drives-global-slowdown-emissions"
  target="_blank">http://www.wri.org/blog/2017/01/china%E2%80%99s-decline-coal-consumption-drives-global-slowdown-emissions</a>
  </p>
  <p>2.
  <a href="https://qz.com/1193603/two-countries-are-the-reason-the-eu-is-hitting-its-ambitious-renewable-energy-targets/"
  target="_blank">https://qz.com/1193603/two-countries-are-the-reason-the-eu-is-hitting-its-ambitious-renewable-energy-targets/</a>
  </p>
  <p>3.
  <a href="https://www.washingtonpost.com/business/economy/upstate-new-york-town-bans-bitcoin-mining/2018/03/16/bd6f669e-2947-11e8-bc72-077aa4dab9ef_story.html?utm_term=.6282ea8429d5"
  target="_blank">https://www.washingtonpost.com/business/economy/upstate-new-york-town-bans-bitcoin-mining</a>
  </p>
  <p>4.
  <a href="https://www.bloomberg.com/news/articles/2018-02-14/next-generation-crypto-ledgers-take-the-block-out-of-blockchain"
  target="_blank">https://www.bloomberg.com/news/articles/2018-02-14/next-generation-crypto-ledgers-take-the-block-out-of-blockchain</a>
  </p>
  `
  var blogpost13 = `<p class="firstparagraph">
  <strong>Creators in the Digital Age</strong>, especially Musicians, have faced just a panoply of business model challenges,
  notably since the 2000s'
  <i>Napster Era</i>. And yet, this is the age-old-case of new technologies reshaping long-standing fields, especially
  financial structure - the bottom line! All creative fields also have technological features on the horizon that
  may, potentially move the playing field. First some recent background: </p>
  <p class="quote">
  While [Taylor Swift] is certainly making money in retail sales and digital downloads, both of those metrics are spiraling
  downward as people migrate away from the concept of owning music at all. Nielsen recently released numbers indicating
  substantial drops in both CD and digital-track sales, which are down almost $100 million
  <i>year over year</i> from 2014; streaming music continues to grow, but the revenue it generates isn’t close to making
  up the difference, yet.
  <sup>1</sup>
  </p>
  <p>Most remember Taylor Swift's 2014 industry-shaking album withdraw in protest to Spotify's payment structure. The
  next year Taylor took on Apple iTunes--to which Apple bended to Taylor's Way
  <sup>2</sup>. These wins are amazing but not enough, if only for winning battles in a losing war. </p>
  <p class="quote">Spotify is the future. Spotify is the enemy. Spotify doesn’t pay enough. Spotify is music’s best bet for revenue
  growth. Since it arrived in the United States from Sweden in 2011, Spotify has been cast as both hero and villain
  in the music industry’s continuing debate over streaming music. </p>
  <p class="quote">
  It has been hailed as a potential savior through a two-tiered “freemium” model that would gradually lure listeners away from
  piracy. Yet Spotify’s royalty rates have also terrified many artists already worried that each new step in music’s
  digital evolution further devalues their work.
  <sup>3</sup>
  </p>
  <p>So the trend looks dire, and yet is it really? Where, just where are the
  <strong>Tech Platforms </strong> leading us? Tech is leading us
  <i>nowhere</i>, at least not to one
  <strong>singular, centralized place</strong>; rather, decentralized tech--including but not limited to blockchain--is busy
  rewriting the boundaries between creators and consumers. This Tuesday's Forbes article reported on new subscription-based
  model by Patreon. Still classical Web 2.0, it's novelty appears so simple, almost intuitive in potentially new pathway:</p>
  <p class="quote">"On Kickstarter and Indiegogo, creators essentially have to start over every time," says Danny Rimer, a partner at
  Index Ventures who is a Patreon investor and board member. "It's the same reason software companies went from licensed
  software to subscriptions: predictable revenue and better service for customers."
  <sup>4</sup>
  </p>
  <p>
  Apparently Patreon, along with last November's
  <i>Drip</i> by KickStarter have made headway. Patreon paid out $150 million to its artists in 2017, and each are doubling
  annually. Decentralizing again. Well, we say we can't
  <i>go back to the way it was</i>, but Tech always seems to lead us back to the way it was!
  </p>
  <p>1.
  <a href="https://www.nytimes.com/2016/01/25/magazine/touring-cant-save-musicians-in-the-age-of-spotify.html" target="_blank">https://www.nytimes.com/2016/01/25/magazine/touring-cant-save-musicians-in-the-age-of-spotify.html
  </a>
  </p>
  <p>2.
  <a href="http://www.businessinsider.com/taylor-swift-new-album-reputation-not-on-spotify-apple-music-streaming-2017-11"
  target="_blank">http://www.businessinsider.com/taylor-swift-new-album-reputation-not-on-spotify-apple-music-streaming-2017-11
  </a>
  </p>
  <p>3.
  <a href="https://www.nytimes.com/2014/11/12/business/media/taylor-swifts-stand-on-royalties-draws-a-rebuttal-from-spotify.html"
  target="_blank">https://www.nytimes.com/2014/11/12/business/media/taylor-swifts-stand-on-royalties-draws-a-rebuttal-from-spotify.html
  </a>
  </p>
  
  
  <p>4.
  <a href="https://www.forbes.com/sites/kathleenchaykowski/2018/02/13/digital-medici-how-this-musician-turned-entrepreneur-plans-to-save-creators-from-advertising/#6063ea771313"
  target="_blank">https://www.forbes.com/sites/kathleenchaykowski/2018/02/13/digital-medici-how-this-musician-turned-entrepreneur-plans-to-save-creators-from-advertising
  </a>
  </p>
  `
  var blogpost12 = `
  <p class="firstparagraph">Today's demonstrations and walk-outs, led by America's Youth and followed by many of the education staff, has aimed
  directly at Gun-Control legislation. Yet, the message more powerfully articulated than ever by adolescent-turns-adult
  students, takes aim at something further afield. </p>
  <p>Students, remembering the February 14th massacre victims, take aim at the corruption stemming from the 2010 Supreme
  Court "Person-hood" protection for Corporations, also known as the
  <i>Citizens United</i> Decision. A dated, but poignant, article from National Public Radio explains:
  </p>
  <p class="quote">The Supreme Court extended that protection to corporations, and over time also extended some — but not all — of the
  rights guaranteed to individuals in the Bill of Rights.
  <sup>1</sup>
  </p>
  <p>
  Yet, it appears deceptively harmless for Congressional Law-makers to protect corporations, in the form of
  <strong>Gun Manufacturers' Lobbyists, </strong>
  as equally as it protects humans. The origin or this ruling dates to a 70's Neo-Liberal, right-leaning legislation and Court
  rulings that include a pivotal 1978
  <i>First National Bank of Boston v. Belloti</i> decision allowing for corporations' ballot-initiative campaign contributions,
  citing the First Amendment.
  <sup>2</sup>
  </p>
  <p>
  
  The Result? The corporation, in "person" form, takes on Pseudo-Human qualities: immortal, beyond-measure capital, and programmatically
  serving stock-holders' interests with cut-throat competition at all costs. No match against a sympathetic human,
  yet the Corporation is given the same rights and privileges as the man in the street. Now, in the face of two decades'
  dead humans--as young as
  <i>Sandy Hook Elementary</i>, which were not protected by Legislation, due to commitments made to corporate lobbying.
  </p>
  <p>It appears increasingly difficult for Marco Rubio to accept money from gun lobbyists
  <i>in exchange</i> for executing their legislation demands. As I mentioned in my
  <a href="#18-02-14">February 14th post</a> on the topic, it is clear a generation is awakening: And, the Humans have begun to revolt
  against the
  <strong>Heavily-Armed Lobbying Machines!
  </strong>
  </p>
  <p>1.
  <a href="https://www.npr.org/2014/07/28/335288388/when-did-companies-become-people-excavating-the-legal-evolution"
  target="_blank">https://www.npr.org/2014/07/28/335288388/when-did-companies-become-people-excavating-the-legal-evolution</a>
  </p>
  <p>2.
  <a href="http://www.ncsl.org/research/elections-and-campaigns/campaign-finance-and-the-supreme-court.aspx#dnn_ctr77443_HtmlModule_lblContent"
  target="_blank">http://www.ncsl.org/research/elections-and-campaigns/campaign-finance-and-the-supreme-court.aspx</a>
  </p> 
  `
  var blogpost11 = `
  <p class="firstparagraph">March 13th, 2018 marks the day that certain types of blockchain technologies, notably Bitcoin and Ethereum, face
  an existential crisis: Today, a new distributed ledger technology has been announced, which departs from the traditional
  "Proof-of-Work" (energy-intensive calculations) Blockchain technologies. This is critically important to zero carbon-footprint.
  For example, Bitcoin calculations drain more energy, 50 TeraWatt/hrs per year--higher than Singapore's 49.8!</p>
  <p>Next, the primary security flaw of consensus-based leadership like Ripple, Iota (as opposed to
  <i>random-selection blockchain leadership</i> based on carbon-intensive calculations) is they are susceptible to Hacking:
  Denial-of-Service Attacks are possible because the next leader Block can be anticipated and followed by a Bot),
  so the blockchain cycle is attacked at every cycle. </p>
  <p>The Heder Hashgraph unveiled today overcomes this problem by using a 39-node-leader hashgraph data structure. Interestingly,
  this is based on the original Visa Credit Card design from the 1950's (then called AmericaBank) for authenticating
  system. </p>
  <p>
  Next, The Heder Hashgraph overcomes the problem of "fairness" because blockchain transactions are
  <i>
  <strong>not ordered in each cycle</strong>.</i> Bitcoin transactions are haphazardly lumped together in each block-cycle,
  which is ~12 minutes. Which means that time-sensitive financial data queries will always lose! </p>
  <p>
  Swirld's unveiled their consensus-based
  <strong>Hashgraph, a type of distributed ledger technology (DLT),</strong> last year. Today, it has now been announced to
  deploy in late 2018 on the Hedera Hashgraph public network. This is tremendous news! Tremendous, since I explained
  in my
  <a href="#18-03-01">March 1st </a> blog post that older blockchain technologies incentivize miners' efforts by directly tying electrical-cost(
  (in calculations) to the Bitcoin/hour profit margin. For this reason, the future horizon just considerably shortened
  Bitcoin's runway for establishing anything beyond "early-adopter" status. </p>
  <p>So, we'll see if the innovating crew with Vitalik Buterin's Ethereum can successfully alter the crypto algorithm
  into it's planned carbon-free consensus-based, "proof-of-stake" form. For the moment, Bitcoin, Ethereum, and other
  electricity-draining "proof-of-work" designs, have their
  <strong>exchange value trapped inside their own Carbon Footprint</strong>.
  <sup>4</sup> And so, because environmental sustainablity is foremost of concerns for future investment, survival may
  depend on digging out of that Carbon Footprint much more quickly!</p>
  
  <p>1.
  <a href="https://www.forbes.com/sites/jeffkauflin/2018/03/13/hedera-hashgraph-thinks-it-can-one-up-bitcoin-and-ethereum-with-faster-transactions/#175e5c79abcb">
  https://www.forbes.com/sites/jeffkauflin/2018/03/13/hedera-hashgraph-thinks-it-can-one-up-bitcoin-and-ethereum-with-faster-transactions/#175e5c79abcb
  </a>
  </p>
  
  <p>2.
  <a href="https://www.coindesk.com/hedera-hashgraph-swirlds-no-fork-guarantee-cryptocurrency-touts-resistance-code-splits/"
  target="_blank">
  https://www.coindesk.com/hedera-hashgraph-swirlds-no-fork-guarantee-cryptocurrency-touts-resistance-code-splits/</a>
  </p>
  
  <p>3.
  <a href="https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/"
  target="_blank">
  https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/</a>
  </p>
  
  
  <p>4.
  <a href="https://blog.ethereum.org/2016/02/09/cut-and-try-building-a-dream/" target="_blank">https://blog.ethereum.org/2016/02/09/cut-and-try-building-a-dream/</a>
  </p>
  `
  var blogpost10 = `
  <p class="firstparagraph">
  Throughout the centralized-tech period of the
  <i>mobile-powered </i> Web 2.0, most Sharing transactions take place on a centralized platform that simply facilitates
  the peer-to-peer transactions. However, the trust is based on some third-party authority. For instance, Uber serves
  as the centralalized, third-party authority between both consumers (whether resource-obtaining or resource-providing)
  must place their trust. Similarly, centralized authorities like Paypal, etc. enable peer-to-peer collaboration.
  Yet, the notion of trust remains unsolved: Both parties must place their faith in the third party. By definition,
  this problem that undermines the
  <i>Sharing Economy</i> is resolved by Blockchain technologies, through cryptography. Now, Decentralized Apps (DAPPS)
  provide a truer sharing platform for value transactions.
  </p>
  <p>In short, neither peer,
  <strong>neither consumer needs to be trusted, because both parties share a mutual trust in their shared ledger</strong>
  (think of a thick book with an indexed log of each and every transaction, with unchangeable entries etched by cryptography.
  In this fashion the forms of Exchange Value include:
  <br /> 1. Value Funds &amp; Investments
  <br /> 2. Immutable Insurance &amp; Risk Management
  <br /> 3. Account for &amp; Audit Commodified Value 4. Authenticate &amp; Attest to Value
  <br /> 5. Transfer, Store, Lend Value
  <br />
  </p>
  `
  var blogpost9 = `
  <p class="firstparagraph">Sharing can be a philosophy and even an ideology, but it is also
  <strong> a concept sewn into the Technology of the Era</strong>. Sharing economy refers to both democratized peer-to-peer
  marketplaces,
  <i>and</i> collaborative, resource-circulating consumption systems where the consumer&#39;s role is provider or obtainer
  of resources. By either sense, the
  <i>Uberized</i> economy is made possible by the underlying platform of Decentralized Technologies. Mobile social media,
  internet, and blockchain tech creates the conditions needed for a convenient, community-based transactions.</p>
  
  <p>Bitcoin and Ethereum crypto-contracts grab the headlines, however it is the very nature of blockchain&#39;s
  <i>distributed, i.e. shared, </i>ledger that revolutionizes how humans interact, and how they exchange and share goods
  and services. So, how might a transactional, zero-sum Market Economy merge with a Sharing Economy?</p>
  
  <p>In
  <i>The Third Industrial Revolution, </i>Social and Economic theorist, Dr. Jeremy Rifkin, provides insight into how
  the
  <strong>Sharing Economy can grow alongside the traditional Market Economy</strong>.
  <sup>1</sup> The theory argues three (3) breakthroughs are needed to create the conditions necessary for a new &quot;general
  purpose technological platform,&quot; and thus an Industrial Revolution. They are management/commmunication of power,
  sources of new power/energy, and the transportation of this power.</p>
  
  <p>The first condition: New forms of communication to
  <i>manage</i> power, for example steam-powered printing press, trans-oceanic telegraph, then later telephone. The second
  condition: New energy sources, for example steam-engine using coal and other fossil fuels. The third condition:
  New methods to transport energy, i.e. the steam engine on rails, then later fossil fuel vehicles.</p>
  
  <p>So what&#39;s new about today? 5G Cellular technology coupled with decentralized, blockchain internet; Second, improving
  solar &amp; wind power coupled with decentralized, bi-directional energy grid; and third, transporation by automatated,
  driverless shipping for example. So, why is this important, even vital to adapt a new paradigm that fits the new
  technology? exponential populstion growth and exponential climate changes are top of the list.</p>
  
  <p>Britain&#39;s innovations with steam &amp; coal characterized the first Industrial Revolution, and America&#39;s
  innovations in telephones, oil-fueled vehicles, and centralized transportation grid, however the innovations in
  the present era are much quicker than previous eras... which means we as a society can embrace more proactively
  the New Paradigm needed to adapt.</p>
  
  <p>So, how can we change the way we
  <i>think</i> and how we
  <i>react</i> depends on our worldview, and how deeply entrenched. Thomas Kuhn&#39;s 2004 publication on
  <strong>
  <i>The Structure of Scientific Revolution</i>
  </strong>
  <sup>3</sup> explains how society will drag its feet in the face of change, and only after decades of controversy will
  a New Paradigm Shift emerge. In this occasion however, we as a society may not have the luxury of decades to adapt
  to New Technologies, as the carbon hangover from the previous Industrial Era imperils the safe arrival of the next!</p>
  
  <p>&nbsp;</p>
  
  <p>1.
  <a href="https://www.foet.org/books/the-third-industrial-revolution/" target="_blank">https://www.foet.org/books/the-third-industrial-revolution/</a>
  </p>
  
  <p>2.
  <a href="https://www.economist.com/node/21553017" target="_blank">https://www.economist.com/node/21553017</a>
  </p>
  
  <p>3.
  <a href="https://projektintegracija.pravo.hr/_download/repository/Kuhn_Structure_of_Scientific_Revolutions.pdf"
  target="_blank">3. Kuhn, Thomas, The Structure of Scientific Revolutions, </a>
  </p>
  `


  var blogpost8 = `
  <p class="firstparagraph">Alexa has made headlines about reports of unexplained laughter responses
  <sup id="0309-1">1</sup>. Information like this needs a
  <i>
  <strong>fact-check</strong>
  </i> &agrave; la Snopes.com.
  <sup id="0309-2">2</sup> And, whether or not Alexa misheard, &quot;Alexa, laugh&quot;, or not, is less important than the
  <i>socially-intrusive consequences</i> of simple app-development errors. The first issue is simply that programmer
  <strong>logic </strong> and user-interface intuition should be as clear (and generalized) as possible. This is easier said
  than done, for example the recent case of Hawaii&#39;s mistaken
  <i>incoming-ballistic-missile warning system</i>.
  <sup >3</sup> As it turned out, the dropdown-menu design placed the &quot;Send Test Warning&quot; next to &quot;Send Warning&quot;
  in an unintuitive, fail-possible manner. Oops.</p>
  
  <p>While most focus on Alexa et al.&#39;s actions and abilites, in the name of caution, but rather the larger issue
  falls on how much we allow ourselves to mentally depend on tech for things.</p>
  
  <p>1.
  <a href="https://www.buzzfeed.com/venessawong/amazon-alexa-devices-are-laughing-creepy?utm_term=.um6P18a8a#.cgggP2j2j"
  target="_blank">https://www.buzzfeed.com/venessawong/amazon-alexa-devices-are-laughing-creepy?utm_term=.um6P18a8a#.cgggP2j2j</a>
  </p>
  
  <p>2.
  <a href="https://www.snopes.com/fact-check/is-amazons-alexa-emitting-unprompted-creepy-laughing/" target="_blank">https://www.snopes.com/fact-check/is-amazons-alexa-emitting-unprompted-creepy-laughing/</a>
  </p>
  
  <p>3.
  <a href="https://www.washingtonpost.com/news/morning-mix/wp/2018/01/16/that-was-no-wrong-button-in-hawaii-take-a-look/?utm_term=.a2aa65329002"
  target="_blank">https://www.washingtonpost.com/news/morning-mix/wp/2018/01/16/that-was-no-wrong-button-in-hawaii-take-a-look/?utm_term=.a2aa65329002</a>
  </p>
  `

  var blogpost7 = `

  <p class="quote">This is the first time in human history that we have the ability to see enough about ourselves that we can hope to
  actually build social systems that work qualitatively better than the systems we&#39;ve always had.</p>
  
  <p class="quote">--Author unknown</p>
  
  <p class="firstparagraph">My February 23rd Post on women in tech focused on the
  <i>workforce demand</i> for more women in tech positions, however today I&#39;m writing on the
  <strong>
  <i>social need</i> for more female insight within the tech workforce</strong> , given that programming will increasingly
  shape our future institutions. This means that every institution, whether private hospitals, non-profit charity
  foundations, or government bureaus, will effectively restructure (optimize) their own organizational structure in
  an increasingly
  <i>data-driven</i> paradigm. From a Sociology of Organizations perspective, the changes to come are breath-taking to
  consider.</p>
  
  <p>So why women? Where could I start? Better stated, why is a quintessentially important job sector, a sector in desperate
  need for insight, comprised primarily of men?
  <sup >1</sup> The facts are evident: ~15-20% of women comprising tech positions.
  <sup  >2</sup> Numbers aside, I argue there is a quintessential societal need for more women in tech: This is because computing
  and understanding data has changed since the data collection from Web 2.0 (mobile), becoming more networked and
  relational.</p>
  
  <p>The challenge for society in this age is historic, and women must absolutely be included in the process of the age:
  Please consider, that in the 1650&#39;s, the invention of the microscope opened a new world of data and
  <i>information</i> about the bacteriological, microscopic surroundings--hitherto blind to all. Likewise, the telescope
  has allowed us as a society to explore the outer universe and earth&#39;s position within it.</p>
  
  <p>Now, the inventions of machine-learning, computing coupled with Big Data analytics, allows us to explore (and manage)
  a universe of knowledge--about
  <i>ourselves</i>, human society--with unfathomably complex, unstructured relational data structures. Accessing the
  data to computer-readable form is one thing, but meaning in data is inaccessible until the
  <i>output</i> can be
  <i>re-</i>programmed into meaningful, human-readable data, i.e. information. This latter stage of development is the
  key challenge--for which success depends on representative female participation in Tech.</p>
  
  <p>Adding to the challenge of finding meaningful trends is the backdrop of noise from spurious variables. This is akin
  to finding a needle in an increasingly complex and growing haystack.</p>
  
  <p class="quote">What&#39;s different now and has changed is it&#39;s no longer about taking this data, putting it into a computer
  running a calculation and getting a balance sheet answer ...</p>
  
  <p class="quote">What&#39;s important now is what is the context of the data, what is it connected to, what effect is it having on
  data around it... It&#39;s basically a network of the data, it&#39;s no longer sort of tabular columns, of rows
  of data, it&#39;s
  <i>interconnected patterns</i>.
  <br /> --Tim Cook</p>
  
  <p>This quote means that as we move away from rule-based, mechanistic data analytics toward more complex, relational
  and networked data, we need an equally complex paradigm to keep up. Excluding the female mind from this challenge
  is not simply a clumsy, myopic mistake. Worse yet, so long as the Tech Industry remains gender lop-sided, Tech will
  increasingly resemble another myopic beast, a cave-dweller named Cyclops.</p>
  
  <p>1.
  <a href="https://www.huffingtonpost.com/2015/03/27/women-in-tech_n_6955940.html" target="_blank">https://www.huffingtonpost.com/2015/03/27/women-in-tech_n_6955940.html</a>
  </p>
  
  <p>2.
  <a href="https://fairygodboss.com/articles/women-in-tech-facts-figures-and-percentages" target="_blank">https://fairygodboss.com/articles/women-in-tech-facts-figures-and-percentages</a>
  </p>
  
  <p>3.
  <a href="https://www.aauw.org/research/why-so-few/" target="_blank">https://www.aauw.org/research/why-so-few/</a>
  </p>
  `

  var blogpost6 = `
  <p class="firstparagraph">Washington&#39;s assertion of States&#39; Rights yesterday may augur the first of many lawsuits over control over
  bandwidth.</p>
  `


  var blogpost5 = `<p class="firstparagraph">Net Neutrality Rules, potentially one of the more important set of Individual Rights for us as citizens in the tech
  age, will soon undergo the rule changes voted by the Federal Communications Commission (FCC) this past December.
  In a nutshell, the Internet Service Providers (ISP&#39;s), e.g. Comcast, Cox, Verizon are granted the power--as
  a Title I &quot;information service&quot;--to slow down traffic, make fast- &amp; slow-lanes. Of course this is
  bad news for internet-users because even premium users may experience &quot;throttling&quot; if using the ISP&#39;s
  preferred apps. The only stipulation holds that the ISP&#39;s rules are made public. However, 21 states are bringing
  lawsuits to fight these changes, and the first assertion of State Law by Washington State today:</p>
  
  <p class="quote">The FCC is already embroiled in a variety of lawsuits related to its rollback of net neutrality rules, including
  an effort from 21 state attorneys general to get a court to block the FCC&#39;s move.</p>
  
  <p class="quote">&quot;This is symbolic politics, because the states know it is illegal to do,&quot; Roslyn Layton, a visiting scholar
  at the American Enterprise Institute, told NBC News. &quot;But they can put rules on the book and make it look like
  they&#39;re doing something.&quot; The FCC is already embroiled in a variety of lawsuits related to its rollback
  of net neutrality rules, including an effort from 21 state attorneys general to get a court to block the FCC&#39;s
  move.
  <sup>1</sup>
  </p>
  
  <p>S The big question arises over
  <i>who</i> has jurisdiction between the States&#39; and Federal authority; yet one thing is certain, the coming battle
  for protecting citizens&#39; rights will take place over jurisdiction of Internet Bandwidth turf.</p>
  
  <p>
  <a href="https://www.nbcnews.com/tech/tech-news/washington-state-passes-net-neutrality-law-states-push-back-against-n854086"
  target="_blank">https://www.nbcnews.com/tech/tech-news/washington-state-passes-net-neutrality-law-states-push-back-against-n854086</a>
  </p>
  `

  var blogpost4 = `<p class="firstparagraph">Germs present a timely topic for today, given the especially virulent
  <strong>Flu Virus strain</strong>. Many, like me, have wondered why our 1940&#39;s-era
  <sup>1</sup> technology in Flu Vaccine fabrication wouldn&#39;t invite more innovative solutions. Without feigning any
  medical expertise, I have to still ask about the progress made with the ever-mutating--i.e., drifting--Flu virus&#39;
  surface protein &quot;head,&quot; called hemaglutinin. This strategy &quot;guesses right&quot; very effectively,
  and provides an effective solution for most, in most years. Yet this winter has revealed that effectiveness statistics
  are
  <i>not always</i> in our favor.</p>
  
  <p class="quote">For many decades, researchers believed the flu vaccine offered solid protection if it was a good match to the circulating
  strains; studies from the 1940s through the 1960s routinely showed an efficacy of 70% to 90%. But those studies
  relied on a misleading methodology.</p>
  
  <p class="quote">Danuta Skowronski, an epidemiologist at the BC Centre for Disease Control in Vancouver, Canada, instead blames mutations
  in the vaccine strain itself. The most common influenza vaccine contains an &quot;inactivated&quot; virus, which
  manufacturers grow in chicken eggs. As Skowronski&#39;s team first reported in 2014, the virus can mutate while
  it is growing in the eggs, resulting in a vaccine unable to block circulating strains.
  <sup>1</sup>
  </p>
  
  <p>Earlier, I casually mentioned &quot;guessing&quot;, yet with great respect, the science behind estimating the flu
  virus between the time of R &amp; D, fabrication, and the flu
  <i>season</i>. (This antigenic drift, not to be confused with
  <i>Antigenic Shift</i> in which the Flu Virus makes an abrupt change.) I&#39;ll let the CDC abbreviate this:</p>
  
  <p class="quote">One way they change is called &ldquo;antigenic drift.&rdquo; These are small changes in the genes of influenza viruses
  that happen continually over time as the virus replicates. These small genetic changes usually produce viruses that
  are pretty closely related to one another, which can be illustrated by their location close together on a phylogenetic
  tree. Viruses that are closely related to each other usually share the same antigenic properties and an immune system
  exposed to an similar virus will usually recognize it and respond
  <sup>2</sup>.</p>
  
  <p>So, ultimately, the strategy is to estimate the form, location, of that virus--what it will look like--at a particular
  period each year. This implicates a strategy to estimate the trajectory, stage by stage, of this virus, i.e. a longitudinal
  time-series morphology, each year. The article makes this point more precise:</p>
  
  <p class="quote">But these small genetic changes can accumulate over time and result in viruses that are antigenically different (further
  away on the phylogenetic tree). When this happens, the body&rsquo;s immune system may not recognize those viruses.
  <sup>2</sup>
  </p>
  
  <p>Petri dishes aside, let&#39;s focus on the changing nature of the Flu Virus, which makes itself a
  <i>research </i>challenge in itself because of an ever-mutating object of study. Yet, this ever-changing nature also
  provides the very tool Statisticians need most for estimating: Big Data. The Law of Large Numbers means that plain
  math can accurately plot, and in most cases predict with a moderate statistical significance, future events, sort
  of.</p>
  
  <p>Sort of I say because too often we predict that two separate events are more likely to occur, conditional on each
  other, then conditional upon other factors. This being
  <i>correlation</i>, but the Statistician&#39;s Holy Grail is the other kind: Causality. Causality hinges on only thre3e
  things: 1) Association, 2) Time Precedence, and 3) Ruling out any
  <i> effect</i> of spurious variables. (Hang with me, I&#39;m still getting back to the subject of our annual predictions
  about a few months&#39; worth of antigenic drift.)</p>
  
  <p>Therefore, Big data, and new advances in the statistical sciences, and the technology that increasingly defines our
  sciences, may soon refine and supercharge research into the first and third of the three points of causality. The
  first of these, the associations, along the phylogenetic tree, are merely a network at its base, the science of
  which gains computational strength each year. Rare as it is in Academia, in this case Might makes Right!</p>
  
  <p>
  The third tenet of causality, after association and time direction, is ruling out the effect of other factors when separating
  <i>cause</i> and consequence. Advances in managing big data, and statistical analysis of it, means gaining a better
  handle on the multiple effects of
  <sup>spurious </sup>factors, hence analysis optimized by new, network-graph data structure technology. The Law of Large
  Numbers
  <sup>3</sup>, i.e. the sheer number of mutations and other factors, coupled with new
  <strong>technology</strong>, will better inform the morphology of the
  <i>path</i> of the virus, along the phylogenetic tree itself. Who knows where a cure may come from, perhaps a bio-statistician
  out there, churning the numbers, may be the one to stumble upon a better Flu Vaccine!
  
  </p>
  <p>1.
  <a href="http://www.sciencemag.org/news/2017/09/why-flu-vaccines-so-often-fail" target="_blank"> http://www.sciencemag.org/news/2017/09/why-flu-vaccines-so-often-fail </a>
  </p>
  
  <p>2.
  <a href="https://qz.com/1143420/the-2017-2018-flu-vaccine-is-less-effective-than-usual" target="_blank"> https://qz.com/1143420/the-2017-2018-flu-vaccine-is-less-effective-than-usual </a>
  </p>
  
  <p>3.
  <a href="https://www.cdc.gov/flu/about/viruses/change.htm" target="_blank"> https://www.cdc.gov/flu/about/viruses/change.htm </a>
  </p>
  `

  var blogpost3 = `
  <p class="firstparagraph">Back in 1997, a Pulitzer-Prize winning theory--based on Dr. Jared Diamond&#39;s
  <i>Guns, Germs, and Steel: The Fate of Human Societies</i> --provided the recipe book for the success of societies.
  Not without controversy, the theory posits that geographic and environmental preconditions, once met, provide tech
  &amp; resources trading opportunities, within a network of other nation-states also vying for technogical innovation.</p>
  
  <p>A nation&#39;s Technology, in turn, opens the means necessary to expansive, stable, independent sovereignty that
  lasts and thrives. Equally so, the nation&#39;s friends, especially those making the best-friends list, share and
  receive a secondary, &quot;residual&quot; technological bump over the time-course of the network&#39;s future trading,
  i.e. network transactions. So, if our best friends Canada and Mexico are less keen, then there is network reverberation!</p>
  
  <p>Given the advent of a real, lasting Trade-War, I would think that a network theorist wouldn&#39;t be betting on one
  particular node within this network. I say this because a disproportionately asymmetrical flow of technology and
  resources, while simultaneously raising prices on most staple goods, may spell trouble for the Every-Day person.
  So far, Nation-State: 0, People: 0 ... So, who wins with a Trade War? Alas, let&#39;s hope not the resurrection
  of the Neo-Multi-National Corporations, born from NAFTA deals, coincidentally, from the late 1990&#39;s. Bah humbug!</p>
  
  <p>&nbsp;</p>
  
  <p>1.
  <a href="http://www.jareddiamond.org/Jared_Diamond/Guns,_Germs,_and_Steel.html" target="_blank">Guns, Germs, and Steel. &quot;Steel: The Fates of Human Societies.&quot; Diamond J (1997).</a>
  </p>
  `
  var blogpost2 = `
<p class="firstparagraph">Security, security, another day another platform risk, or risks from your device, or risks from transactions, Today&#39;s
headline buried beneath a techy jargon provides a glimpse of the rising threat of web-application-based hackery:
Cryptojacking.
<i>Coindesk</i> reports, &quot; Opera browser introduces cryptocurrency miner protection for smartphones ... &quot;</p>

<p class="quote">Cryptocurrency miners can overload smartphones&#39; CPUs, forcing 100 percent usage and potentially causing a phone
to overheat. And the damage can sometimes be permanent. According to a ZDNet article, one trojan generated so much
heat in a phone, its battery became swollen, permanently damaging the phone. While excessive ads were one reason
for the heat generation, the main cause was that the phone&#39;s CPU was hijacked to mine for Monero.
<sup>1</sup>
</p>

<p>The larger issue here is that the lines between trusted mobile-app authorities, i.e., certified by Play Store or
Apple&#39;s is increasingly irrelevent. This is because an increasing number of app-users are ditching device-downloaded
apps, preferring for browser applications--hence, a much more appetizing market for the newest generation of blackhat
hackers, online thieves, peeping-toms, and other ill-wishers. There are a few driving factors for this issue--one
of which is the onset of Decentralized Applications (DAPPs), which use the
<i>browser</i> to interface between the Every-Day blockchain client/merchant/programmer and the actual byte-code of
the blockchain (via WEB).</p>

<p>More importantly, the larger issue is that we live in an age in which the exclusive, native browser language since
1995, i.e. JavaScript. Security issues with browser-based apps were very low, because JavaScript never left the
browser, ever. Until 2009, Data, Servers were the domain of PHP, JAVA, Python, etc. or some other language for the
highly sensitive, dirty work of dipping into all that data sitting ontop of centralized servers around the world.
PHP wasn&#39;t easy, so power and responsibility usually followed with all the extra effort and expertise.</p>

<p>2015 augured in the Node.js server-accessing (can create, read, update, and delete date) new-born capabilities of
JavaScript</p>


<p>1.
<a href="
https://www.coindesk.com/opera-browser-introduces-cryptocurrency-miner-protection-for-smartphones/
" target="_blank"> https://www.coindesk.com/opera-browser-introduces-cryptocurrency-miner-protection-for-smartphones/ </a>
</p>
`
  var blogpost1 = `
<p class="firstparagraph">I couldn&#39;t help but revisit the
<strong>Environmental Sustainability</strong> problem I addressed in my February 28th post. This problem, experienced by
the top two crypto-currencies Bitcoin and Ethereum, is that the
<i>monetary</i> value of the currency is matched to the
<i>computing difficulty</i>--measured either by how much the computer is sweating, or by electricity KiloWatt Hours
per year.
<sup>1</sup> Digiconomist succinctly writes:</p>

<p class="quote">The continuous block mining cycle incentivizes people all over the world to mine Bitcoin. As mining can provide a
solid stream of revenue, people are very willing to run power-hungry machines to get a piece of it. Over the years
this has caused the total energy consumption of the Bitcoin network to grow to epic proportions, as the price of
the currency reached new highs.
<sup>2</sup>
</p>

<p>And, so the issue I&#39;m addressing is a side-effect of the deepening incentivization for miners to invest more
equipment, and in turn, more electricity. The article goes on to report Bitcoin&#39;s surpassing 50 TeraWatt-Hours-per-year
usage has surpassed that of Portugal and Singapore, which are 49.5 TWh per year, and 49.8 TWh per year, respectively.
In other words, the usage by the Bitcoin miner&#39;s cost (in electricity) compared with the miner&#39;s gain (in
Bitcoins accrued by incentivized mining) drives up and incentives a deeper Carbon Footprint.</p>


<p class="quote">Fueled by a meteoric rise in the Bitcoin price over the past few months, the power usage of the Bitcoin network has
been increasing at a feverish pace. Just a little over three months ago, at the start of November 2017, the Bitcoin
Energy Consumption Index was estimating the total electricity consumption of the Bitcoin network to be half of the
current amount. On the first day of November, the estimated consumption was equal to 24.3 TWh per year.
<sup>1</sup>
</p>

<p>
Carbon Footprint, measured in this way, equates as a double-edged sword: The miner&#39;s electricity costs account for approximately
65% of the profit (Bitcoin units&#39; value, measured when mined). So the
<i>economic </i>usage means the cheapest available fuel is part of the business model--and it would lead to the cost
of the cheapest source of energy: Dirty Coal. At the end of the day, if the
<i>currency&#39;s </i>rising value means that more computationally-intensive mining is more and more profitable, then
perhaps the other edge looks preferred!
</p>

<p>1.
<a href="
https://digiconomist.net/bitcoin-electricity-consumption-surpasses-singapore-portugal
" target="_blank"> https://digiconomist.net/bitcoin-electricity-consumption-surpasses-singapore-portugal </a>
</p>

<p>2.
<a href="
https://digiconomist.net/bitcoin-energy-consumption
" target="_blank"> https://digiconomist.net/bitcoin-energy-consumption </a>
</p>
`
  var url = [{
      id: '21',
      did: '18-03-24',
      date: 'March 24-25, 2018<br /> Weekend ',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: '1968 Meets 2018: Scalability Issues in the Mean Time',
      post: blogpost21
    },
    {
      id: '20',
      did: '18-03-23',
      date: 'March 23, 2018 <br /> Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: '<i>Its not about the Blockchain, the Efficient Network Data Distribution is the Answer!</i>',
      post: blogpost20
    },

    {
      id: '19',
      did: '18-03-22',
      date: 'March 22, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'A.I. Part II: Problems with Scale, Kindly Resolved by A.I.',
      post: blogpost19
    },
    {
      id: '18',
      did: '18-03-21',
      date: 'March 21, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Hey Uber Driver, Please Slow Down!',
      post: blogpost18
    },
    {
      id: '17',
      did: '18-03-20',
      date: 'March 20, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'The Facebook Fiasco: Why Zuckerberg Should not have Dropped out of Harvard',
      post: blogpost17
    }, {
      id: '16',
      did: '18-03-19',
      date: 'March 19, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'A New Politics of Power:<br /> The Cryptographic Financial Escape Hatch',
      post: blogpost16
    }

    ,
    {
      id: '15',
      did: '18-03-17',
      date: 'March 17-18 2018 <br /> Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Energy Alternatives Signal the Power Shift to Come, Part II: A Ripple and an Iota of Sustainable Crypto-Currency',
      post: blogpost15
    },

    {
      id: '14',
      did: '18-03-16',
      date: 'March 16, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Energy Alternatives Signal the Power Shift to Come',
      post: blogpost14
    },
    {
      id: '13',
      did: '18-03-15',
      date: 'March 15, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'I Love this Record Baby but I Cant See Straight Anymore:<br />Its Gonna be Okay, Flip that Record and Just Dance!',
      post: blogpost13
    },
    {
      id: '12',
      did: '18-03-14',
      date: 'March 14, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: '<i>Tou <strong>Demou</strong> tes<strong> Krates</strong></i>:<br />Strength of the People',
      post: blogpost12
    },
    {
      id: '11',
      did: '18-03-13',
      date: 'March 13, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'The Sharing Economy Hand-in-Hand with the Market Economy:<br /> Part III and Sustainability of Shared, Distributed Ledger Types',
      post: blogpost11
    },
    {
      id: '10',
      did: '18-03-12',
      date: 'March 12, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'The Sharing Economy Hand-in-Hand with the Market Economy:<br /> Part II and New Forms of Trust',
      post: blogpost10
    },

    {
      id: '9',
      did: '18-03-10',
      date: 'March 10-11, 2018  <br /> Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'The Sharing Economy Hand-in-Hand with the Market Economy:<br /> Part I and the Race for Sustainability Solutions',
      post: blogpost9
    },
    {
      id: '8',
      did: '18-03-09',
      date: 'March 9th, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: '&#39;Alexa, can you laugh?&#39;',
      post: blogpost8
    },
    {
      id: '7',
      did: '18-03-08',
      date: 'March 8, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: '1.4 Million Reasons for More Women in Tech, Part II <br /><br /> * Continuation of Women in Tech Theme from<a href="#18-02-23">Feb. 23rd Blog</a>',
      post: blogpost7
    },
    {
      id: '6',
      did: '18-03-07',
      date: 'March 7, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'About the April 23 Implementation of the FCC Net Neutrality Laws: <br /> The Coming Battle of States&#39; versus Federal Rights Part II',
      post: blogpost6
    }

    ,
    {
      id: '5',
      did: '18-03-06',
      date: 'March 6, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'April 23 Implementation of the FCC Net Neutrality Laws: <br /> The Coming Battle of States&#39; versus Federal Rights',
      post: blogpost5
    },

    {
      id: '4',
      did: '18-03-05',
      date: 'March 5, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'A Return to the Question of Guns, Germs, and Steel: Part II and the Germs',
      post: blogpost4
    },
    {
      id: '3',
      did: '18-03-03',
      date: 'March 3-4, 2018 <br /> Weekend',
      author: 'by Thomas Maestas, MA',
      cat3: 'Sociology Tomorrow!',
      title: 'A Return to the Question of Guns, Germs, and Steel',
      post: blogpost3
    },
    {
      id: '2',
      did: '18-03-02',
      date: 'March 2, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Web Dev Affairs',
      title: 'Widening Circles of Mobile-App Security Risks',
      post: blogpost2
    },
    {
      id: '1',
      did: '18-03-01',
      date: 'March 1, 2018',
      author: 'by Thomas Maestas, MA',
      cat3: 'Musing Blockchain',
      title: 'Blockchain Sustainability Issues and The Double-Edged Sword',
      post: blogpost1
    }
  ];

  for (i=0;i<url.length;i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    </div>` 

    document.getElementById("paragraph-mar").innerHTML += cat;
  }

  var i;
  for (i=0;i<url.length;i++){ 
    var catMod = `
    <div id="${url[i].did}_mod" class="blogDivMod"> 
    <hr />  
    <a href="#top-mod"><button>Top</button></a>   
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}</div>
    </div>`;

document.getElementById("paragraph-mar-mod").innerHTML += catMod;
}
 
console.log('blogger-mar');
  // console.log(angular.toJson(url));
};

bloggerMar();
var bloggerMarch19 = function() {
    /*
    https://medium.com/s/teamhuman/the-right-kind-of-ai-with-kenric-mcdowell-7481b239a0cb

    https://medium.com/hummingbird-ventures/a-brief-history-of-blockchain-an-investors-perspective-387c440ad11c

    https://medium.com/@thinkoutsidetheblox/why-bitcoin-and-crypto-have-no-future-4f95980bb774

    https://medium.com/mit-technology-review/explainer-what-is-quantum-communication-527bb0f5d987

    https://media.consensys.net/18-predictions-for-2018-7a376ea7bd4b

    https://medium.com/s/welcome-to-blockchain/what-could-blockchain-do-for-healthcare-59c17245448e

    https://medium.com/mit-technology-review/russia-wants-to-cut-itself-off-from-the-global-internet-heres-what-that-really-means-c6f8851987ca




    https://onezero.medium.com/computer-generated-faces-are-getting-real-b32e8902586d

    https://medium.com/s/story/the-best-strategies-to-boost-your-willpower-5eb1b2d9af2b
     
    */

    var blogpost3 = `
    <p class="firstparagraph">AWS Rekognition, a premier service among dozens of others, is like all AI software along with a Platform-as-a-Service necessarily reflects the biases of its origin lab. Alternately, AWS' democratizing access to every student, professional, and researcher the unlimited use of sophisticated and expensive AI resources;thus hedging any potential bias to diverse individual's and team's participation.  At the heart of these healthy public debates, it's the particular use-cases that exemplify the spectrum of the debate. For instance, policing practice by bot is a sure example, if not for the <i>RoboCop</i> Hollywood allure ... As always, the AI's algorithm bears the imprint of the creator's intentions: </p>
	
	<p class="quote"> 
	But Washington County also became ground zero for a high-stakes battle over the unregulated growth of policing by algorithm. Defense attorneys, artificial-intelligence researchers and civil rights experts argue that the technology could lead to the wrongful arrest of innocent people who bear only a resemblance to a video image. Rekognition’s accuracy is also hotly disputed, and some experts worry that a case of mistaken identity by armed deputies could have dangerous implications, threatening privacy and people’s lives.<br /><br />

Some police agencies have in recent years run facial-recognition searches against state or FBI databases using systems built by contractors such as Cognitec, IDEMIA and NEC. But the rollout by Amazon has marked perhaps the biggest step in making the controversial face-scanning technology mainstream. Rekognition is easy to activate, requires no major technical infrastructure, and is offered to virtually anyone at bargain-barrel prices. Washington County spent about $700 to upload its first big haul of photos, and now, for all its searches, pays about $7 a month.<sup>1</sup> 
    </p>
    <p>Whether government services or commercial enterprise, the landscape  is converting <i>en masse</i> the manual and the mundane to machine learning.  Public advocacy, now more than ever, can help direct A.I. technology and use toward a more society-friendly endeavor ...</p>
	`



    var blogcite3 = ` 
 
	<p>1.
	<a href="https://www.washingtonpost.com/technology/2019/04/30/amazons-facial-recognition-technology-is-supercharging-local-police/?noredirect=on&utm_source=pocket-newtab&utm_term=.8a8a1b75b94a" target="_blank">https://www.washingtonpost.com/technology/2019/04/30/amazons-facial-recognition-technology-is-supercharging-local-police/?noredirect=on&utm_source=pocket-newtab&utm_term=.8a8a1b75b94a</a>
	</p>
    
    `;

    var blogpost2 = `
  <p class="firstparagraph">Security, security, another day another platform risk, or risks from your device, or risks from transactions, Today&#39;s
  headline buried beneath a techy jargon provides a glimpse of the rising threat of web-application-based hackery:
  Cryptojacking.
  <i>Coindesk</i> reports, &quot; Opera browser introduces cryptocurrency miner protection for smartphones ... &quot;</p>
  
  <p class="quote">Cryptocurrency miners can overload smartphones&#39; CPUs, forcing 100 percent usage and potentially causing a phone
  to overheat. And the damage can sometimes be permanent. According to a ZDNet article, one trojan generated so much
  heat in a phone, its battery became swollen, permanently damaging the phone. While excessive ads were one reason
  for the heat generation, the main cause was that the phone&#39;s CPU was hijacked to mine for Monero.
  <sup>1</sup>
  </p>
  
  <p>The larger issue here is that the lines between trusted mobile-app authorities, i.e., certified by Play Store or
  Apple&#39;s is increasingly irrelevent. This is because an increasing number of app-users are ditching device-downloaded
  apps, preferring for browser applications--hence, a much more appetizing market for the newest generation of blackhat
  hackers, online thieves, peeping-toms, and other ill-wishers. There are a few driving factors for this issue--one
  of which is the onset of Decentralized Applications (DAPPs), which use the
  <i>browser</i> to interface between the Every-Day blockchain client/merchant/programmer and the actual byte-code of
  the blockchain (via WEB).</p>
  
  <p>More importantly, the larger issue is that we live in an age in which the exclusive, native browser language since
  1995, i.e. JavaScript. Security issues with browser-based apps were very low, because JavaScript never left the
  browser, ever. Until 2009, Data, Servers were the domain of PHP, JAVA, Python, etc. or some other language for the
  highly sensitive, dirty work of dipping into all that data sitting ontop of centralized servers around the world.
  PHP wasn&#39;t easy, so power and responsibility usually followed with all the extra effort and expertise.</p>
  
  <p>2015 augured in the Node.js server-accessing (can create, read, update, and delete date) new-born capabilities of
  JavaScript</p>
  
	`



    var blogcite2 = ` 
     
       
      
  
  <p>1.
  <a href="https://medium.com/s/story/algorithms-can-now-identify-cancerous-cells-better-than-humans-78e6518f65e8" target="_blank">
  https://medium.com/s/story/algorithms-can-now-identify-cancerous-cells-better-than-humans-78e6518f65e8
  </a>
  </p>
  `
    var blogpost1 = `
  <p class="firstparagraph"> 
  <sup>2</sup>
  </p>
  
  <p> </p>
  
  
  <p class="quote"> 
  <sup>1</sup>
  </p>
  
  <p>
 
  </p>
  
	`



    var blogcite1 = ` 
  <p>1.
  <a href="https://hackernoon.com/blockchains-dont-scale-not-today-at-least-but-there-s-hope-2cb43946551a" target="_blank">https://hackernoon.com/blockchains-dont-scale-not-today-at-least-but-there-s-hope-2cb43946551a</a>
  </p>
   
  `
    var url = [{
            id: '3',
            did: '19-03-03',
            date: 'March 3-4, 2018 <br /> Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Sociology Tomorrow!',
            title: 'A Return to the Question of Guns, Germs, and Steel',
            post: blogpost3,
            cite: blogcite3
        },
        {
            id: '2',
            did: '19-03-02',
            date: 'March 2, 2018',
            author: 'by Thomas Maestas, MA',
            cat3: 'Web Dev Affairs',
            title: 'Widening Circles of Mobile-App Security Risks',
            post: blogpost2,
            cite: blogcite2
        },
        {
            id: '1',
            did: '19-03-01',
            date: 'March 1, 2018',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Blockchain Sustainability Issues and The Double-Edged Sword',
            post: blogpost1,
            cite: blogcite1
        }
    ];

    for (i = 0; i < url.length; i++) {
        var cat = ` 
	  <div id="${url[i].did}" class="blogDiv"> 
	  <hr />  
	  <a href="#top"><button>Top</button></a>  
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
	  <div id="post">${url[i].post}	  </div>
      <div id="post">${url[i].cite}</div>
	  </div>`

        document.getElementById("paragraph-march19").innerHTML += cat;
    }

    var i;
    for (i = 0; i < url.length; i++) {
        var catMod = `
	  <div id="${url[i].did}_mod" class="blogDivMod"> 
	  <hr />  
	  <a href="#top-mod"><button>Top</button></a>   
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
      <div id="post">${url[i].post}</div>
      <div id="post">${url[i].cite}</div>
      

	  </div>`;

        document.getElementById("paragraph-march19-mod").innerHTML += catMod;
    }

    console.log('blogger-march19');
    // console.log(angular.toJson(url));
};

bloggerMarch19();
 
//Top Vars Above

var bloggerMay = function () {
 
 

var blogpost13 =  `

<p class="firstparagraph">Winning and losing millions via a telephone is very James Bond-esque, but the (re)newed legalisation of sports betting merely mimics national models already in long-time use in Europe and elsewhere.<sup>1</sup> In the U.S., mobile carriers and makers will be asked of a lot more when money is on the line ... which implicitly brings up blockchain solutions. Here's one example:
</p>
<p class="quote"> WinFlow, a sports betting platform that uses ledger technology to offer transparent betting and products, has decided to run its platform, a decentralized application on the Hedera Hashgraph Network.

WinFlow has been created with the intentions of solving three main industry related problems, which are the lack of accountability and transparency, meaningful rewards programs or compensation to losing players and product innovation.<sup>2</sup>
</p>
<p>
 So where are we on Mobile solutions now that the stakes have been exponentially raised...Security, Authentication, Instantaneous Speed?  No need to look, the tech doesn't exist!</p>
<p class="quote">“There is currently no active, fully-functional sportsbook using distributed ledger or blockchain technology, let alone any operator in the sports betting industry at large that redistributes almost all of their profits right back to the players. <sup> 2 </sup> </p>
<p>What a coincidence that this month, Hedera's Hashgraph <i>public</i> ledger was released, the European Union rewrote their internet data policies in General Data Privacy Regulation (GDPR covered in more depth in <a href="#18-04-19">April 19th</a> and <a href="#18-04-16"> 16th posts</a>. However the occurrence of all three events will definitely trigger some technological hot-swapping! From the same example,
</p>
<p class="quote">
the [WinFlow] project, which is squarely focused on Europe due to the Federal ban on sports betting in the US, will raise money through private placements while it continues to work on developing the betting platform.<br /><br /> 
WinFlow, which claims to have a unique profit sharing model, said breakthroughs in technology and new benefits for players, including unprecedented rewards, security, and transparency, will allow it to disrupt the incumbents in a multi-billion dollar market.
</p>
<p>So, the needs for mobile sports betting all depend on speed, for which the newly unveiled Hedera hashgraph specializes <sup>2 </sup> (covered <a href="#may-18-05-02">May 2-5 four-part series</a>). Looks good from afar, let's see now that anyone can kick the tires of that thing called DAG!
</p>
`;  
 var blogcite13  =  
 `
 <p class="cite">1. <a href="https://www.theguardian.com/business/nils-pratley-on-finance/2018/may/14/uk-bookies-beware-us-will-look-after-its-own-in-betting-revolution" target="_blank">https://www.theguardian.com/business/nils-pratley-on-finance/2018/may/14/uk-bookies-beware-us-will-look-after-its-own-in-betting-revolution</a></p>
  <p class="cite">2. <a href="https://bitcoinexchangeguide.com/hedera-hashgraph-dlt-will-power-winflow-profit-sharing-sportsbook/" target="_blank"> https://bitcoinexchangeguide.com/hedera-hashgraph-dlt-will-power-winflow-profit-sharing-sportsbook/</a></p>
  
 <p class="cite">3. <a href="https://www.forbes.com/sites/jeffkauflin/2018/03/13/hedera-hashgraph-thinks-it-can-one-up-bitcoin-and-ethereum-with-faster-transactions/#63d0806cabcb" target="_blank">https://www.forbes.com/sites/jeffkauflin/2018/03/13/hedera-hashgraph-thinks-it-can-one-up-bitcoin-and-ethereum-with-faster-transactions/#63d0806cabcb</a></p>
 <p class="cite">4. <a href="https://bitsonline.com/mance-harmon-hedera-hashgraph/" target="_blank">https://bitsonline.com/mance-harmon-hedera-hashgraph/</a></p>
 
 `;


var blogpost12 =  `<p class="firstparagraph">Justice Samuel A. Alito Jr. outlined the Supreme Court's Majority Opinion on overturning the federal prohibition on sports betting this week.<sup>1</sup> The primary <i>justification was an unconsitutional Federal authority over States' rights</i>, in overturning the 1992 Professional and Amateur Sports Protection Act.  
</p>
<p class="quote">The Supreme Court struck down a 1992 federal law on Monday that effectively banned commercial sports betting in most states, opening the door to legalizing the estimated $150 billion in illegal wagers on professional and amateur sports that Americans make every year.<br /><br />
The decision seems certain to result in profound changes to the nation’s relationship with sports wagering. Bettors will no longer be forced into the black market to use offshore wagering operations or illicit bookies.<i> Placing bets will be done on mobile devices, </i> fueled and endorsed by the lawmakers and sports officials who opposed it for so long. <sup>2</sup> 
</p>

<p>And now, <i>the Vegas Strip</i> is but a mere icon's hop away from Candy Crush! Uh oh ....</p>
`;
var blogcite12 = `<p class="cite">1. <a href="https://www.nytimes.com/2018/05/14/us/politics/supreme-court-sports-betting-new-jersey.html" target="_blank">https://www.nytimes.com/2018/05/14/us/politics/supreme-court-sports-betting-new-jersey.html</a></p>`;
 

var blogpost11 =  `<p class="firstparagraph">Jargon is curiously ugly at first sight, but only with time does technical beauty reveal itself. I decided to make my first recipe with WebAssembly and JavaScript, (with yes, a third called <i>Emscripten</i> and no, my eyes aren't rolling) ... this waaas amazing, Wow! So I thought to write about the nuts and bolts of it all. </p>
<p>So,   what exactly <i> is </i> WebAssembly, specifically?? It's this:<span style="color:purple"> (And, for the jargon-wary, skip this paragraph </span> :-)</p>
<p class="cite">
$ emcc -s WASM=1 -o fib.js fib.c </p><p class="green">
<i>emcc</i> executes the <i>Emscripten</i> compiler<br />
<i>-s</i> ensures that Emscripten outputs WebAssembly<br />
<i>-o fib.js</i> names the output as fib.js<br />
<i>fib.c</i> And, finally this is the input file's name!<br />
<p>
This first part? It's like staring into a solar eclipse (I confess I glanced at one recently (but didn't we all, secretly?)) ... <br />
Anyway, this is a simple, classic example using Fibonacci sequence<sup>2</sup> for familiarity. Here's the input:<br />
</p>
<pre>
fib.c:
#include <emscripten.h>

EMSCRIPTEN_KEEPALIVE
int fib(int n) {
  int i, , a = 0, b = 1;
  for  (i = 0; i < n; i++) {
    t = a + b;
    a = b;
    b = t;
  }
  return b;
}</pre> 
<p>
So, given the integer absence in JavaScript mentioned in the <a href="#18-05-10">May 10th post</a>, The Fibonacci integer sequence example illustrates the   relationship between WebAssembly and Javascript. Unlike JavaScript's lack of integers, WebAssembly's math kit is nothing short of luxury! 
</p>  
<script src="fib.js"></script>
<script> <span class="green">This part is JavaScript carrying out the instructions receieved from Emscripten:</span>
  Module.onRuntimeInitialized = _ => {
    const fib = Module.cwrap('fib', 'number', ['number']);
    console.log(fib(12));
  };
  <script>
</p>
<p>So what happened back there is that <i>Emscripten outputs <strong>two </strong>files, one JavaScript (fib.js) and one WebAssembly (fib.wasm)</i>.. Simple enough, and that's why massive, intractable application programs like AutoCAD can now be easily deployed on any platform, fast and high-function on our mobile phones. True it is, <i>after first glance, all  this jargon's inner beauty shines, a real harbinger of great apps to come!</p>

`;
var blogcite11 = `<p class="cite">1. <a href="https://medium.com/mozilla-tech/why-webassembly-is-a-game-changer-for-the-web-and-a-source-of-pride-for-mozilla-and-firefox-dda80e4c43cb" target="_blank"> https://medium.com/mozilla-tech/why-webassembly-is-a-game-changer-for-the-web-and-a-source-of-pride-for-mozilla-and-firefox-dda80e4c43cb</a></p>
<p class="cite">2. <a href="https://webassembly.org" target="_blank">https://webassembly.org</a></p>
<p class="cite quote green ">2. Note on example Fibonacci Sequence: (Wikipaedia Definition):
<br />
In mathematics, an integer sequence is a sequence (i.e., an ordered list) of integers. 
An integer sequence may be specified explicitly by giving a formula for its nth term, or implicitly by giving a relationship between its terms. For example, the sequence 0, 1, 1, 2, 3, 5, 8, 13, … <i>(the Fibonacci sequence) is formed by starting with 0 and 1 and then adding any two consecutive terms to obtain the next one: an implicit description.</i>  The sequence 0, 3, 8, 15, … is formed according to the formula n2 − 1 for the nth term: an explicit definition.</p> ` ;
 
var blogpost10 = `<p class="firstparagraph">WebAssembly,  about a year old, provides a new level of performance to mobile apps and the browser generally, but is it safe? It's actually safer than traditional plug-ins for browsers. Here's a quick recap from yesterday's post on WebAssembly:</p>
<p class="quote">WebAssembly is one of the biggest advances to the Web Platform over the past decade.

This new standard will enable amazing video games and high-performance web apps for things like computer-aided design, video and image editing, and scientific visualization. Over time, many existing productivity apps (e.g. email, social networks, word processing) and JavaScript frameworks will likely use WebAssembly to significantly reduce load times while simultaneously improving performance while running. Unlike other approaches that have required plug-ins to achieve near-native performance in the browser, WebAssembly runs entirely within the Web Platform. This means that developers can integrate WebAssembly libraries for CPU-intensive calculations (e.g. compression, face detection, physics) into existing web apps that use JavaScript for less intensive work.<sup>1</sup>
</p><p>
Browsers, <i>despite HTTPS encryption, are growing in security weaknesses</i> with more territory, responsibilities, and new API relationships. However, along with WebAssembly's solutions for CPU-intensive browser operations (like AutoCAD example in the previous post), WebAssembly also offers unique security solutions:  
</p>
<p class="quote">WebAssembly describes a memory-safe, sandboxed execution environment that may even be implemented inside existing JavaScript virtual machines. When embedded in the web, WebAssembly will enforce the same-origin and permissions security policies of the browser.<sup>2.</sup></p>
<p>
 This architecture   signifies eventual compatibility with the existing Block Chain apps like MetaMask that use a browser plug-in to set up an API between, for example, the Ethereum blockchain and Web access. So, with WebAssembly's great potential with JavaScript, is it a safer, more secure on-line world? No, but <i>there are safer corners </i> ... and certainly a safer niche for drawing space!</p>

`;
var blogcite10 = `<p class="cite">1. <a href="https://medium.com/mozilla-tech/why-webassembly-is-a-game-changer-for-the-web-and-a-source-of-pride-for-mozilla-and-firefox-dda80e4c43cb" target="_blank"> https://medium.com/mozilla-tech/why-webassembly-is-a-game-changer-for-the-web-and-a-source-of-pride-for-mozilla-and-firefox-dda80e4c43cb</a></p>
<p class="cite">2. <a href="https://webassembly.org" target="_blank">https://webassembly.org</a></p>`;

var blogpost9 = `<p class="firstparagraph" id="05-10-18">AutoCAD, the first name in 3-D engineering, has stepped into a new world in the past month. Recent, unprecedented mobile app advances allow more CPU-intensive laptop applications to hop to the phone with equal interactivity and near-equal functionality. Thanks to third-party languages, JavaScript, the browser's language, is broadening in powers: And this is nothing short of exhilarating with just enough of a touch of danger.
</p><p>AutoCAD's recent advances in their mobile platform exemplifies this trend.<sup>1</sup> AutoCAD, the ancient, foundational, ultra-powerful, ever-modernizing programming codebase--celebrates 35 years old, and predates the web! AutoCAD by AutoDesk has historically had difficulty implementing its codebase into mobile platforms. So, their app presence suffered because it had been highly watered down, and suddenly competing with thousands of other 3-D engineering apps...Until now. </p><p>

<p class="quote">Yesterday [March 2, 2018] was a big day for the AutoCAD product. A multi-year engineering project – started in the AutoCAD team way back when I was part of it – culminated in its first deliverables getting into the hands (or, in this case, browsers) of customers.  The AutoCAD team has been working on a project codenamed “Fabric” for the last several years. It's has been a huge amount of work – something I’ll hopefully get into in a future blog post – but it’s finally bearing tangible fruit.  In broad strokes the work was to take the core of AutoCAD and make it cross-platform. </p><p class="quote">You might consider the Big Split – work that was done ostensibly to build AutoCAD for Mac but resulted in a Core Engine that became the mechanism through which developers could run custom code in the cloud via AutoCAD I/O (now part of Forge’s Design Automation API) – to be the first phase of this effort. At the very least Fabric stood on the shoulders of the Big Split.<sup>2.</sup></p><p>

In short, AutoDesk's latest browser-based AutoCAD Web App and Mobile App have suddenly advanced a quantum step. For example, the mobile app provides nearly all of the full features (not including 3-D rendering), like swapping .DWG files from cloud services using a full mobile interface.  </p>
<p>
Not just for AutoCAD, but all apps improve, because <i>third-party languages like WebAssembly can "broker" the API conversation between browser and the operating system's machine code for certain tasks</i>.<sup>3</sup> Exceptionally interesting, now WebAssembly performs real-time C++ transpiling allowing any browser to communicate in near-to direct machine-code for certain tasks. 
WebAssembly (Wasm) is a "binary instruction format for a stack-based virtual machine ... designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications."<sup>3</sup> In other words, <i>WebAssembly is the middle-person translating between JavaScript's V8 Engine and a device's Operating System</i>. Here's  a clearer explanation using the AutoCAD example:</p>
<p class="quote">[AutoCAD's] Fabric has done away with #ifdefs, forcing any platform-specific code into a PAL (Platform Abstraction Layer) per targeted platform. And Fabric is able to target more than just Windows and OS X. Some of the main targets were the established mobile platforms (more on that down the line), but one major effort was to target the web platform with the AutoCAD codebase.
Yes, you read that right… yesterday’s update to AutoCAD Web now runs the same core code as standard AutoCAD, but in a browser. A major part of AutoCAD’s C++ codebase gets run through Emscripten (at least that’s my understanding – I’ll correct any details I get wrong) to be transpiled into WebAssembly. 
<p>
<p>So, it looks like our <i>wild, untamed language, JavaScript, has matured to the big-leagues </i> by teaming up with WebAssembly ... After all, JavaScript, among all the languages, was born without a mind for math... literally. It's core math library conducts all operations in 64-bit floating point, in the absence of integers! So, this entails occasional anomalies: For example, .1 + .2 does not equal .3! (Try it with the JavaScript calculator below ... ) And so, great things await this partnership between WebAssembly and JavaScript, but every marriage is different... one partner may always need help cooking, and another may always need help with the math, but that's what Marriage is for!</p>


 
`;
var blogcite9 = ` <p class="cite">1. <a href="https://www.autodesk.com/products/autocad/features" target="_blank"> https://www.autodesk.com/products/autocad/features</a></p>
<p class="cite">2. <a href="http://through-the-interface.typepad.com/through_the_interface/2018/03/the-future-of-autocad.html" target="_blank"> http://through-the-interface.typepad.com/through_the_interface/2018/03/the-future-of-autocad.html</a></p>
<p class="cite">3. <a href="https://webassembly.org">https://webassembly.org</a></p>`;




  var blogpost8 = `<p class="firstparagraph">For all the fanfare of in-browser apps, i.e. Progressive Web Apps, the picture isn't as rosy as appears. After all, we are still talking about the browser window, right? Many of the <i>browser-based</i> apps depend on plugin extensions. This is sort of the Achilles Heel recently exposed while, "over two months, seven [Chrome] extensions stole credentials and installed currency miners."<sup>1</sup> The article cites 100,000 computers that may have lost passwords, and other private data--ouch!
  </p>
  <p class="quote">
  The scam was active since at least March with seven malicious extensions known so far, researchers with security firm Radware reported Thursday. Google's security team removed five of the extensions on its own and removed two more after Radware reported them. In all, the malicious add-ons infected more than 100,000 users, at least one inside a "well-protected network" of an unnamed global manufacturing firm, Radware said.
  </p>
  <p>As we see the app-in-the-browser taking on more operational, networking, functional roles (the work previously reserved to native Apple/Google/Microsoft app stores), unknown, unconceived threats are increasingly possible. That's another reason why Tech is always an edge-of-your-seat spectacle!

  `;
  var blogcite8 = `  <p class="cite">1. <a href="https://arstechnica.com/information-technology/2018/05/malicious-chrome-extensions-infect-more-than-100000-users-again/">https://arstechnica.com/information-technology/2018/05/malicious-chrome-extensions-infect-more-than-100000-users-again/</a></p>
  <p class="cite">1. <a href="https://blog.radware.com/security/2018/05/nigelthorn-malware-abuses-chrome-extensions/">https://blog.radware.com/security/2018/05/nigelthorn-malware-abuses-chrome-extensions/</a></p>`;

  var blogpost7 = `<p class="firstparagraph">Google I/0's 2018 revelations also included a focus on the <i>Progressive Web App (PWA)</i>. My <a href="#18-04-11">April 11th</a> and <a href="#18-04-05">April 5th</a> posts introduce a new approach to traditional mobile apps, using new JavaScript techniques including a "manifest" and "service workers" files that instruct the mobile phone what to cache and other specs. Google has pushed use of these PWAs since 2015 with Google Chrome's efforts to steer app development toward device-neutral, ultra-fast, and encryption advantages of the Hyper Text Transfer Protocol (HTTP), i.e. the browser. </p>
  <p class="quote">
  On the first day of Google I/O 2018 event, Tal Oppenheimer, Chief Product Manager (Chrome) at Google, shared that websites like EconomicTimes.com, Instagram and Starbucks are seeing "incredible results" in user retention and time spent, while using Progressive Web Apps (PWAs) technology.
<br />
PWAs are websites that take advantage of modern web platform Application Programming Interfaces (APIs) to build experiences like working offline, sending push notifications and getting added directly to .. 
  </p>
  <p>Web apps use the browser for viewing and security, while the app's "manifest" uses <i>service workers</i> to manage data, networking, caching optimized for off-line ability and other actions that were formally reserved for "Native" apps downloaded from Apple or  Google Play stores. So what the flip? It does mean better speed and utility, features and appearance optimized to device, whether mobile, laptop or tablet, all without sacrificing the personalized, off-line features of "native" app store apps? ... it's the best of both worlds! </p>
  

  `;
  var blogcite7 = `  <p class="cite"><a href="https://www.cnet.com/news/5-best-things-from-google-io-2018/" target="_blank" >https://www.cnet.com/news/5-best-things-from-google-io-2018/</a></p>
  <p class="cite"><a href="economictimes.indiatimes.com/articleshow/64089365.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst" target="_blank" >economictimes.indiatimes.com/articleshow/64089365.cms?utm_source=contentofinterest&utm_medium=text&utm_campaign=cppst</a></p>`;
  
  var blogpost6 = `
  <p class="firstparagraph">O.K. Google, I'll pass on the lemonade, and ... why don't you take the afternoon off, I'm going to be independent for a while, "again". Alas, we are getting some interesting, if not slightly weird, features from this week's Google I/O 2018 Developer Conference.<sup>1</sup>  So, wonderful news! I'm so tired from picking up my phone to order my take-out, now my Google Assistant can just do all that hard work for me!
  </p><p>This week's revelations from Google's I/0 2018 offer A.I.-focused new hardware features, yet A.I. stole the show. The better integration of Google's assistant <i>with contacts and calling</i> is eyebrow-raising:</p>
  <p class="quote">The demo is part of what Google calls an "experiment" it plans to launch this summer. With Duplex, a "small" number of people will be able to book restaurant reservations and hair appointments and to check holiday hours, stuff you'd normally do over the phone. All of that back and forth happens on the back end -- between Google Assistant and, say, the restaurant. You won't even hear the conversation taking place. It'll come from an unspecified phone number, not your own number.<sup>1</sup></p>
  <p>The feature raises the question of advantage over Siri and Alexa... Although access to the Google-minutiae of our personal information (data thankfully we are now more empowered to download and even delete) begs the question of individuals' machines that talk directly to the restaurant's voice-activated receptionist (perhaps a french accent?) machine. I'm all for efficiency and better organization, but I'd hardly imagine being too busy to place a call myself! 
  </p>

 
  `;
  var blogcite6 = `  <p>
  also just mean different assistants for different parts of our day!</p>
  <p class="cite">1. <a href="https://www.cnet.com/features/google-assistant-duplex-at-io-could-become-the-most-lifelike-ai-voice-assistant-yet/" target="_blank">https://www.cnet.com/features/google-assistant-duplex-at-io-could-become-the-most-lifelike-ai-voice-assistant-yet/ </a></p>
 <p class="cite">2. <a href="https://www.techradar.com/news/google-io-2018" target="_blank">https://www.techradar.com/news/google-io-2018</a></p>`;
  
  var blogpost5 =  `<p class="firstparagraph">Challenges to the Hashgraph range from mathematical properties of acyclic graphs (think of the 7 Bridges of Koenigsburg, the riddle of crossing town while crossing each bridge exactly once) to the social implications of how to "distribute" data and <i>who actually holds onto the keys at the end of the day.  </i>
  </p>
  <p class="quote">While GridAgents™ and in general multi-agent systems (MAS) offered strong models for representing complex and dynamic real-world environments, we were missing something very important that is becoming available today with blockchain and distributed ledger technologies. The missing links include (1) consensus, (2) immutability and (3) ability to operate in trustless environments. Dr. Maxim Orlovsky states:

  “Blockchain will give to Multi-Agent AI — the same thing that written language gave to humans — Means of Cognitive Evolution”
  
  Maxim also states that what blockchain brings to multi-agent systems is consensus algorithms for interpreting facts in a trustless multi-agent system. Consensus allows for nodes in the system to be in unanimous agreement on the state of things. Additionally, blockchain creates a permanent memory (immutability) making the vision of multi-agent systems much more complete. I call the addition of blockchain/DLTs to multi-agents system, AI 3.0. This AI 3.0 combines the benefits of over 30 years of research on AI, machine learning, and multi-agent systems with blockchain and DLT technology to finally enable the emerging industry 4.0 where billions of devices will be connected to the internet and will need to coordinate in real-time at the edge of the network.<sup>3</sup> </p>



  `;
  var blogcite5  = `  <p class="cite">1.  <a href="      https://science.house.gov/legislation/hearings/subcommittee-oversight-and-subcommittee-research-and-technology-hearing-0" target="_blank">   https://science.house.gov/legislation/hearings/subcommittee-oversight-and-subcommittee-research-and-technology-hearing-0</a></p>  
  <p class="cite">2.  <a href="    https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/" target="_blank">    https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/</a></p>  
 <p class="cite">3.  <a href=" https://medium.com/hashgraph/ai-3-0-why-hashgraph-and-how-it-will-revolutionize-blockchain-and-ai-86a6ef715c9f" target="_blank">https://medium.com/hashgraph/ai-3-0-why-hashgraph-and-how-it-will-revolutionize-blockchain-and-ai-86a6ef715c9f</a></p> `;
 
  var blogpost4 =  `<p class="firstparagraph">Blockchain challenges, like any field, start with social acceptance on one end, and technical acceptance on the other. The latter is a little more important, but the former usually runs the show because <i>it, financially speaking, <strong> is</strong> the show</i>. I mentioned the curve
  </p>
  <p class="quote">First, blockchain benefits from incumbency and familiarity. Why risk replacing it with a less well-tested technology whose vulnerabilities haven’t all been identified? Also, while it can retain as much transactional data as needed, hashgraph typically doesn’t contain as much transactional history as the Bitcoin blockchain does. For many applications, hashgraph would only keep track of users’ latest positive wallet balances.

  Second, the DAG system doesn’t involve the computation-heavy “proof of work” effort to verify transactions that some blockchains, such as Bitcoin blockchain, require. Having several miners ratify and vote to accept a transaction lends blockchain what some say is a greater degree of security that the ledger contains a single version of the truth than under DAG-based systems. 
  <br />
  <br />
  IOTA, the best-known DAG, is already the No. 10 largest cryptocurrency, with $6.6 billion in market capitalization, according to CoinMarketCap. 
  
  “Even first-year computer science students here at MIT laugh at the code when they see it,” Tadge Dryja, a research scientist at MIT who is working to scale the Bitcoin network, said in an email. 
  
  The hack MIT came up with “can’t happen in practice,” Serguei Popov, one of the founders of IOTA, said in a phone interview.
  
  
Hashgraph uses DAG differently: It uses it to record different aspects of transactions than IOTA, and has different security characteristics, according to hashgraph developers.
<sup>1</sup>
   



  `;
  var blogcite4 = `  </p>
  <p class="cite">1. CoinDesk Source URL being researched. <a href="#" target="_blank">__</a></p>`;
  
  var blogpost3 =  `<p class="firstparagraph">The lessons learned from last week's Romaine Lettuce Crisis has brought the <i>supply chain management</i> topic to the nation's dinner-table conversations. 
  (Quick recap in my <a href="#18-04-25">April 25th post</a>). The big issue is uninterrupted, comprehensive and permissioned data access to those ... mystery Romaine lettuce heads. What could hashgraph tech offer? Everything from real-time temperature sensors and ID's to cross-institution, cross-border accuracy from source to supply targets. And, next week Congress will also be talking about it:  
  </p>
  <p class="quote">
  Lawmakers in the U.S. Congress are set to hold a hearing on blockchain tech's use in global supply chains next week.

Two subcommittees of the U.S. House Committee on Science, Space and Technology - for Research and Technology, and Oversight - will meet on May 8, a newly published notice reveals. The hearing is entitled "Leveraging Blockchain Technology to Improve Supply Chain Management and Combat Counterfeit Goods."<sup>1</sup>
</p>
<p>Here, the Science, Space, & Technology Committee <sup>2</sup> of Congress will be meeting This Tuesday, May 8th, hearing from Witnesses from Maersk (head of global trade digitization), UPS (global customs brokerage staff), and of course the good ol' Dept. of Homeland Security, and doubtless an international<sup>3</sup> platoon of lawyers! </p>

  
  `;
  var blogcite3 = ` <p class="cite">1. <a href="https://www.coindesk.com/us-lawmakers-hear-case-blockchain-supply-chain/" target="_blank">https://www.coindesk.com/us-lawmakers-hear-case-blockchain-supply-chain/</a></p>
  <p class="cite">2. <a href="https://science.house.gov/legislation/hearings/subcommittee-oversight-and-subcommittee-research-and-technology-hearing-0" target="_blank">https://science.house.gov/legislation/hearings/subcommittee-oversight-and-subcommittee-research-and-technology-hearing-0</a></p> 
   <p class="cite">3. <a href="https://www.mckinsey.com/industries/financial-services/our-insights/global-payments-2017-amid-rapid-change-an-upward-trajectory">https://www.mckinsey.com/industries/financial-services/our-insights/global-payments-2017-amid-rapid-change-an-upward-trajectory</a></p> `;
  
var blogpost2 =  `<p class="firstparagraph">The most polished, cryptographically stable leader of  <i>third generation</i> blockchain technology is formally released this month, and anticipation is anything but calm. (Some background posts help contextualize this 2-part series on Hashgraph  technology and potential for capturing per-micro-second, real-time financial needs of the globalizing economy: <a href="#18-04-18"> April 18</a> and <a href="#18-04-02">April 2</a>.) The formal release is on May 9th, but this May 1st press release caught my attention as we see a glimpse of this technology on a public* ledger: 
</p>
<p class="quote"> CULedger and Hedera today announced a partnership whereby CULedger will use Hedera's hashgraph platform and public ledger to build a system for cross-border payments. CULedger has already been using the private ledger version of hashgraph, offered by Swirlds, for general purpose, permissioned ledger use.<sup>1</sup> </p>
<p>The big news is Hedera's "public" blockchain ledger service that moves closer to popular usage with it's unique <i>directed acyclic graphs</i>, whose speed increases with scale.  Until recently, Blockchain tech has been hamstrung in the domain of micro-transactions, so now that the barrier has been crossed, how many sectors of life will be enhanced? All. But not yet. Once 5G technology (100 times faster, 100 times the capacity of 4G) is rolled out, then we hit the big leagues.</p> 
<p class="quote">A group of U.S. credit unions looking to pool resources considered the Bitcoin and Ethereum blockchains to track their business, but wound up selecting something else entirely: hashgraph.</p>
<p class="quote">Currently, cross-border payments are painful for all parties involved," said Rick Cranston, COO of CULedger. "They take time, they're expensive, and there is limited visibility into the transaction. Hashgraph is fast and it provides visibility between the two parties at a significantly lower cost. It also eliminates concerns regarding fraud and default, since transactions are recorded immutably on the public ledger, and manual processes, since transactions are automated via smart contracts.<sup>1</sup></p>
<p> ...to be continued...</p> 

`;
var blogcite2 = `<p class="cite"><a href="https://www.prnewswire.com/news-releases/culedger-selects-hedera-hashgraph-to-build-global-ledger-for-cross-border-payments-300639874.html" target="_blank">https://www.prnewswire.com/news-releases/culedger-selects-hedera-hashgraph-to-build-global-ledger-for-cross-border-payments-300639874.html</a></p>
<p class="cite"><a href="https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/" target="_blank">https://venturebeat.com/2018/03/13/hedera-hashgraph-and-mz-unveil-next-generation-blockchain-alternative/</a></p>

<p class="cite"><a href="https://medium.com/hashgraph/ai-3-0-why-hashgraph-and-how-it-will-revolutionize-blockchain-and-ai-86a6ef715c9f" target="_blank">https://medium.com/hashgraph/ai-3-0-why-hashgraph-and-how-it-will-revolutionize-blockchain-and-ai-86a6ef715c9f</a></p>`;

var blogpost1 =  `<p class="firstparagraph">May. Spring. Exercise. All wonderful things, reacquainting with Nature--if we can and <i>if we let <strong>Tech</strong> let ourselves outside</i>: Let's face it, screens  don't mix well with the sun! <</p>
<p>Recently  though,Tech made a real comeback in the Mother Nature department, thanks to the 2016 Pok&eacute;mon rage that drew crowds out in droves and into the streets and haphazard places over countless miles walked.  Technology, at long last assumes a new role:<i> an ever dedicated activity coach</i> According to <i>Behavioralist psychology</i>, the actions frame the state of mind, so it only makes perfect sense to set our tech devices to where we want to go!</p>
<p>But <i>some</i> of the benefits of exercise ...
</p>
<p class="quote"> 
 Neurotrophins, endogenous proteins that support brain plasticity likely mediate the beneficial effects of exercise on the brain. In clinical studies, exercise increases brain volume in areas implicated in executive processing, improves cognition in children with cerebral palsy and enhances phonemic skill in school children with reading difficulty. Studies examining the intensity of exercise required to optimize neurotrophins suggest that moderation is important. Sustained increases in neurotrophin levels occur with prolonged low intensity exercise, while higher intensity exercise, in a rat model of brain injury, elevates the stress hormone, corticosterone.<sup>1</sup> 
 </p> <p>
 ... more on this later ...</p>

`;
var blogcite1 = `<p class="cite"><a href="https://www.tandfonline.com/doi/abs/10.1080/17518420801997007" target="_blank">https://www.tandfonline.com/doi/abs/10.1080/17518420801997007</a></p> ` ;

  var url =  
  [    
    { 
    id:'13',
    did:'may-18-05-15',
      date:'May 15, 2018',
  author:'by Thomas Maestas, MA',
  cat3:'Musing Blockchain',
  title:'Betting on the Mobile Blockchain <br />Part II:  Betting on the Hedera Hashgraph Distributed Ledger',
  post:blogpost13,
  blogcite:blogcite13 
  },   
   { 
    id:'12',
    did:'may-18-05-14',
      date:'May 14, 2018',
  author:'by Thomas Maestas, MA',
  cat3:'Sociology Tomorrow!',
  title:'Betting on Mobile Blockchain<br /> Part I: The Floodgates of Money have Opened!',
  post:blogpost12,
  blogcite:blogcite12
  },  
 { 
    id:'11',
    did:'may-18-05-12',
      date:'May 12-13, 2018<br />Weekend',
  author:'by Thomas Maestas, MA',
  cat3:'Web Dev Affairs',
  title:'The Wedding of JavaScript and WebAssembly: <br />Part III: The Nuts and Bolts of the Relationship',
  post:blogpost11,
  blogcite:blogcite11
  },   
    { 
      id:'10',
      did:'may-18-05-11',
        date:'May 11, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Sociology Tomorrow!',
    title:'The Wedding of JavaScript and WebAssembly: <br />Part II: How Secure and Safe is this New Mobile World?',
    post:blogpost10,
    blogcite:blogcite10
    },   
    
   { 
      id:'9',
      did:'may-18-05-10',
        date:'May 10, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Web Dev Affairs',
    title:'The Wedding of JavaScript and WebAssembly: <br />Part I: The Opening of a New Mobile App World',
    post:blogpost9,
    blogcite:blogcite9
    },   
    { 
      id:'8',
      did:'may-18-05-09',
        date:'May 9, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Musing Blockchain',
    title:'Google I/O 2018, Part III:<br /> The Browser\'s Achilles Heel Exposed',
    post:blogpost8,
    blogcite:blogcite8
    },   
    {    
    id:'7',
    did:'may-18-05-08',
    date:'May 8, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Web Dev Affairs',
    title:'Google I/O 2018, Part II:<br />   Progressive Web Apps (PWAs) Quietly Taking Over the Mobile App World',
    post:blogpost7,
   blogcite:blogcite7
     },
    { 
    id:'6',
      did:'may-18-05-07',
        date:'May 7, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Web Dev Affairs',
    title:'Google I/O 2018,  Part I:<br />  Google Duplex, Do We Really Want to be as Lazy as Possible?',
    post:blogpost6,
    blogcite:blogcite6
    }        
      ,
    { 
      id:'5',
      did:'may-18-05-05',
        date:'May 5-6, 2018<br />Weekend',
    author:'by Thomas Maestas, MA',
    cat3:'Musing Blockchain',
    title:'3rd Generation Blockchain: How Fast can the Blockchain Operate? Part IV: Potential Solutions for Blockchain Stability',
    post:blogpost5,
    blogcite:blogcite5
    },   
    {    
    id:'4',
    did:'may-18-05-04',
    date:'May 4, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Musing Blockchain',
    title:'3rd Generation Blockchain: How Fast can the Blockchain Operate? Part III: : The Challenges for the Directed Acyclic Graph (DAG) with Ripple and  Iota Coin',
    post:blogpost4,
    blogcite:blogcite4
     },
      { 
    id:'3',
    did:'may-18-05-03',
    date:'May 3, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Musing Blockchain',
    title:'3rd Generation Blockchain: How fast can the blockchain operate? Part II: : Speed Needs of   Supply Chain Management',
    post:blogpost3,
    blogcite:blogcite3
  },
  { 
    id:'2',
    did:'may-18-05-02',
    date:'May 2, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Musing Blockchain',
    title:'3rd Generation Blockchain: How fast can the blockchain operate? nPart I: Speed needs of the Financial Sector',
    post:blogpost2,
    blogcite:blogcite2
  },
    { 
    id:'1',
    did:'may-18-05-01',
    date:'May 1, 2018',
    author:'by Thomas Maestas, MA',
    cat3:'Web Dev Affairs',
    title:'Technology: The Coincidental and Unintended Bane of Exercise',
    post:blogpost1,
   blogcite:blogcite1
   }
   ] ;

   for (i=0;i<url.length;i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>` ;
document.getElementById("paragraph-may").innerHTML += cat; 
} 
 
var i;
for (i=0;i<url.length;i++){ 
  var catMod = `
  <div id="${url[i].did}_mod" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
document.getElementById("paragraph-may-mod").innerHTML += catMod;
}


console.log('blogger-may'); 
// console.log(angular.toJson(url));
}; 


bloggerMay();  


 
var bloggerMay19 = function() {
   

    /*
    
august  16 - 
https://bitcoinist.com/bakkt-wins-regulatory-approval-to-launch-bitcoin-futures/
 ----
  
 The tables have turned ..
 -
 and now the launchlad
june 14
https://www.cnet.com/news/calls-to-break-up-amazon-google-facebook-and-apple-get-louder/
DOJ-->
Last week, The Wall Street Journal reported that the FTC and Justice Department reached a new agreement, with the FTC gaining authority to review Amazon and Facebook, while the Justice Department is able to look into Apple and Google. This deal is seen as an early step in these agencies digging into potential anticompetitive practices by all four companies.
consumer view-->
That could result in a flourishing of new services and features for consumers, giving them a lot more choices for e-commerce, social media and search. That change could also sow confusion, as sites that used to be part of the same company no longer work as seamlessly together.


    June 11, 2019
    Most cross-border payments are done through the Society for Worldwide Interbank Financial Telecommunication, or Swift, a Belgian organization started in 1973 that counts 11,000 financial institutions as members. But its legacy system has inefficiencies. Because few banks are connected directly to each other, a payment that originates in Kansas City and is bound for Nairobi might have to stop at banks in New York and London before reaching its final destination, with each bank extracting a fee. 

https://www.forbes.com/sites/jeffkauflin/2019/06/11/visa-targets-swift-with-new-blockchain-product-for-global-money-transfers/
Visa seems to do everything on a massive scale. Last year, it moved $11.2 trillion over its payment rails across more than 200 countries for purchases ranging from cups of coffee to cars. Now it’s eyeing an even bigger market: cross-border, business-to-business (B2B) transactions, where banks transfer money on behalf of corporate customers. Visa says it’s entering a $125 trillion market and using distributed ledger technology—software where transactions must be confirmed by multiple computers on a network to be considered final—to make these payments faster, cheaper and more transparent.

Phalen’s team created Visa B2B Connect using distributed ledger technology because it provides more transparency and traceability than a typical state-of-the-art database, he says. They used Hyperledger Fabric, the blockchain software developed in part by IBM and hosted by Linux, to build it, and it has taken two years to launch. Unlike cryptocurrency-based blockchains including Bitcoin and Ethereum, Visa’s product isn’t decentralized, since the payments giant has complete control over it. Visa made Forbes’ first-ever Blockhain 50 list earlier this year.


june 6
Unlike the original vision spelled out in the Nakamoto paper, these initiatives don’t use a proof-of-work system for verification, but are permissioned blockchains in which each participant is identified and known—and therefore accountable—to the others in the blockchain network. Essentially this verifies members before transactions take place, much as Global Entry and TSA Pre do at airline security checkpoints.
https://www.barrons.com/articles/blockchain-moves-beyond-the-walled-garden-stage-51559820635
 IBM hath been busy ...
 "To understand what the future of blockchain could look like, it’s helpful to look at IBM ’s recent initiatives to build communities around peer-to-peer networks in financial services, identity and supply chain.

 The company is also working with SecureKey to develop a digital identity system in Canada. The system is designed to allow consumers to develop digital identities that they can control. 

 Perhaps the greatest opportunity for blockchain technology is in helping to streamline supply chains. In fact, a 2013 study by the World Economic Forum found that reducing back-office friction in international trade could increase GDP by nearly 5%. IBM has two major efforts in this area. It partnered with Maersk to create TradeLens, which aims to digitize global shipping and created Food Trust that focuses on agricultural products."

 June 4 - Near-Zero Latency Apps and Bots
 And then there's the question of what type of 5G signals are available. Verizon, like AT&T, has focused on what's known as millimeter wave spectrum, which is fast but has a limited range and can have trouble with walls and even foliage. Carriers in Europe and Asia, along with Sprint and T-Mobile in the US, have been using sub-6GHz airwaves for slower but more reliable coverage.
 https://www.cnet.com/news/verizon-5g-lab-tunes-up-robots-and-medical-tech-heading-your-way/
The bigger goal, Palmer said, is to enable whole new experiences -- in education, for instance, transporting someone who's studying glaciers to an actual glacier via virtual reality or a holographic experience that's not possible today.

 When the next generation matures eventually, a whole array of technologies will be able to blossom in ways that today's 4G networks don't allow -- cars communicating with each other and with sensors on a highway or city streets at speed, for instance. The internet of things becomes a lot more than just you checking in with your Nest thermostat or an August smart doorbell. Soldiers and first responders get better, faster situational awareness.

 June 3 - The $6000 computadora
 https://www.cnet.com/news/the-new-mac-pro-makes-its-debut-at-wwdc-2019-starts-at-5999-available-fall-2019-apple/

 June 2 - Steer Clear of TapeWorms: Practice Good Hygiene
 https://blogs.technet.microsoft.com/msrc/2019/05/30/a-reminder-to-update-your-systems-to-prevent-a-worm/
 EternalBlue Timeline

Almost two months passed between the release of fixes for the EternalBlue vulnerability and when ransomware attacks began. Despite having nearly 60 days to patch their systems, many customers had not.

A significant number of these customers were infected by the ransomware.

  /// Quantum::: mainstream
  AUTHOR::: Yun-Hee Kim at yun-hee.kim@wsj.com
  Dow Jones & Company, Inc. All Rights Reserved.
  Quantum computers won’t replace today’s traditional computers, but they will become mainstream within five years, a top executive in charge of emerging technologies at International Business Machines Corp. predicted.
  Speaking at The Wall Street Journal’s Future of Everything Festival Wednesday, Arvind Krishna, senior vice president of cloud and cognitive software, predicted that with quantum computing, batteries could last “a thousand times longer” and airplanes could become lighter.
  “All of these use cases, I think, will get solved in a few years,” Mr. Krishna said. “Pharmaceuticals and drug discovery is a much harder problem.”
  Quantum computers have the potential to sort through a vast number of possible solutions—more than the number of atoms in the universe—with the calculations being completed as fast as a fraction of a second.
  Responding to criticism from researchers that the U.S. may be falling behind China and the European Union to invest in quantum computing, Mr. Krishna said the U.S. is currently slightly ahead but does need to invest more. China is constructing a $10 billion research center for quantum applications. The European Union announced in 2016 that it is creating a €1 billion effort on four areas of quantum technology including computing and communication.
  Mr. Krishna, who also oversees the integration of IBM’s $33 billion acquisition of Red Hat Inc. said he expects the deal—IBM’s largest acquisition to date—to close around June. The company has received approval from the U.S. Department of Justice for the deal, and is now awaiting approval from the European Union.
  Asked about restructuring after the acquisition is completed, Mr. Krishna said that it wouldn’t result in any job cuts at Red Hat.
  “This is a value deal, not about cost synergy. They [Red Hat] run on multiple public clouds. It’s got to be preserved,” he said.
  In the public cloud space, IBM trails rivals Amazon Inc. and Microsoft Corp. IBM ranked fifth in the world for public cloud-infrastructure service in 2017, according to data from Gartner Inc., behind Amazon, Microsoft, Alibaba Group Holding Inc. and Google Inc.
  But Mr. Krishna said the acquisition creates a big opportunity for IBM to expand in the so-called hybrid cloud space where customers run some software in their own data centers but also use cloud services.

  “I’m not trying to catch up to Amazon and Microsoft,” he said. “They are going down the path of public cloud and we are going to be hybrid. There is so much investment that’s already happening and there is so much data that can’t sit on the public cloud. I believe there is space for all of us,” he said.
  ///

The use of the trapped ion technology puts Honeywell in rare company, since the most visible companies pursuing quantum computing, including IBM, Google, Intel, and Rigetti, are basing their hardware on semiconductor technology.
June 1 - 
https://www.nextplatform.com/2019/05/28/honeywell-one-step-closer-to-universal-quantum-computer/
In November, the company revealed it had started testing its first-generation qubit devices, followed in January by the claim that it had “demonstrated record-breaking high fidelity quantum operations” on its trapped-ion qubits. In March, it announced it had demonstrated “parallel operating zones” on the device, which it believes will provide faster execution and more flexible qubit connectivity.

Honeywell’s attraction to trapped ion technology mirrors that of IonQ, namely that these atomic level structures are totally uniform, naturally resistant to error-producing noise, and can be connected to one another in different configurations at runtime. While this technology doesn’t have the decades-long history and proven scalability of semiconductors, at this point, it offers the most interesting alternative for solid-state quantum computing.

   */
    var blogpost30 = `

<p class="firstparagraph">Substituting one material for another when in a pinch invites a panoply of complications when the quality of substitute materials vary by geographical and political borders ... <br />
  <img src="dist/img/metal.jpg"  width="400"  class="zoom" />
</p>

<p class="quote">Electronics manufacturers could be among the first to feel the full brunt of the trade war. The industry is perhaps uniquely global: Chips made in Oregon or Texas are shipped to a plant in Mexico to be attached to circuit boards made in China alongside capacitors made in Vietnam. It is not unheard-of for a product or its components to cross the Pacific three or even four times before showing up on retail shelves. 
But nearly a year later, the trade war shows no sign of cooling off. So ControlTek, the electronics manufacturer that Mr. LaFrazia runs near Portland, is taking steps to protect itself, a strategic shift that has been repeated in boardrooms and executive suites around the world in recent weeks.
<br /><br /> 
“We’re very much at the end of the whip getting thrown around,” Mr. LaFrazia said.
It was also unclear which products were subject to tariffs. Mr. LaFrazia, a 54-year-old Air Force veteran, recalled spending hours poring over an online list of tariff codes to figure out which applied to his parts. When he called the manufacturers, they often didn’t know where they fell in the government’s taxonomy of tradable goods. Even the government’s experts can get confused — ControlTek recently had a shipment of parts delayed for 12 days because customs officials thought they contained aluminum that was subject to tariffs. (They didn’t.)<sup>1</sup></p>
 

`;

    var blogcite30 = `
<p>1. <a  target="_blank" href="https://www.nytimes.com/2019/05/30/business/economy/trump-tariff-manufacturer.html">https://www.nytimes.com/2019/05/30/business/economy/trump-tariff-manufacturer.html</a> 
</p>

<p><a  target="_blank" href="https://markets.businessinsider.com/news/stocks/apple-stock-price-slides-trade-war-tensions-overshadow-product-launches-2018-9-1027522247">https://markets.businessinsider.com/news/stocks/apple-stock-price-slides-trade-war-tensions-overshadow-product-launches-2018-9-1027522247</a> 
</p> 

`;

    var blogpost29 = `
  <p class="firstparagraph">My <a href="#09-11-18">September 11th post</a> last year touched on global tech's dependence on rare earth materials  ... and again, the trade war begins to take its toll:
  </p>
  
  <p class="quote">Against a backdrop of mounting concern over the long-running trade dispute between the US and China, which stands to choke global growth, Beijing signalled that exports of rare-earth elements to the US could be curtailed.
  <br /><br />Chinese media reports, including the People’s Daily, the flagship newspaper of the Communist party, raised the prospect of the crackdown, which would stand to hit American companies involved in electronics, car production and defence.

  Analysts said China handles roughly 80% of US imports of rare earths and that high-tech manufacturers could see their profits crippled by the measures.<sup></sup></p> `;

    var blogcite29 = `  
<p><a  target="_blank" href="https://www.theguardian.com/business/2019/may/29/global-markets-fall-as-china-prepares-to-hit-back-at-us-in-trade-war">https://www.theguardian.com/business/2019/may/29/global-markets-fall-as-china-prepares-to-hit-back-at-us-in-trade-war</a> 
</p>

`;
    var blogpost18 = ` 
  
  <p class="firstparagraph"> 
  </p>
  
  <p class="quote">In a surprise bit of weekend news that could have major implications on the smartphone market, Reuters reports that “Google has suspended business with Huawei that requires the transfer of hardware, software, and technical services except those publicly available via open source licensing.”
  <br /><br />
  Translation: Huawei can no longer implement a full-fledged version of Android, losing access to Google services and more. Instead, it’ll only be allowed to use the open source components of Android. That means no Google Play Store, no Gmail, no YouTube – at least not without major workarounds. This presumably affects future devices; it’s not clear what effect it will have on current ones.<sup></sup></p>

  
`;
    var blogcite18 = `  
  
  <p><a  target="_blank" href="https://thenextweb.com/insider/2019/05/20/report-google-breaks-up-with-huawei-cutting-access-to-android-services-and-apps/">https://thenextweb.com/insider/2019/05/20/report-google-breaks-up-with-huawei-cutting-access-to-android-services-and-apps/</a> 
  </p>
  

`;
    var blogpost17 = ` 
  
<p class="firstparagraph"> 
</p>

<p class="quote">Quantum computers won’t replace today’s traditional computers, but they will become mainstream within five years, a top executive in charge of emerging technologies at International Business Machines Corp. predicted.

Speaking at The Wall Street Journal’s Future of Everything Festival Wednesday, Arvind Krishna, senior vice president of cloud and cognitive software, predicted that with quantum computing, batteries could last “a thousand times longer” and airplanes could become lighter.

“All of these use cases, I think, will get solved in a few years,” Mr. Krishna said. “Pharmaceuticals and drug discovery is a much harder problem.”

Quantum computers have the potential to sort through a vast number of possible solutions—more than the number of atoms in the universe—with the calculations being completed as fast as a fraction of a second.
<br /><br />
Responding to criticism from researchers that the U.S. may be falling behind China and the European Union to invest in quantum computing, Mr. Krishna said the U.S. is currently slightly ahead but does need to invest more. China is constructing a $10 billion research center for quantum applications. The European Union announced in 2016 that it is creating a €1 billion effort on four areas of quantum technology including computing and communication.

Mr. Krishna, who also oversees the integration of IBM’s $33 billion acquisition of Red Hat Inc. said he expects the deal—IBM’s largest acquisition to date—to close around June. The company has received approval from the U.S. Department of Justice for the deal, and is now awaiting approval from the European Union.
<br /><br />
Asked about restructuring after the acquisition is completed, Mr. Krishna said that it wouldn’t result in any job cuts at Red Hat.
“This is a value deal, not about cost synergy. They [Red Hat] run on multiple public clouds. It’s got to be preserved,” he said.
In the public cloud space, IBM trails rivals Amazon Inc. and Microsoft Corp. IBM ranked fifth in the world for public cloud-infrastructure service in 2017, according to data from Gartner Inc., behind Amazon, Microsoft, Alibaba Group Holding Inc. and Google Inc.
<br /><br />
But Mr. Krishna said the acquisition creates a big opportunity for IBM to expand in the so-called hybrid cloud space where customers run some software in their own data centers but also use cloud services.  “I’m not trying to catch up to Amazon and Microsoft,” he said. “They are going down the path of public cloud and we are going to be hybrid. There is so much investment that’s already happening and there is so much data that can’t sit on the public cloud. I believe there is space for all of us,” he said. <sup>1</sup></p>
  `;
    var blogcite17 = `  
  
<p><a  target="_blank" href="https://www.wsj.com/articles/ibm-software-exec-predicts-quantum-computers-will-become-mainstream-in-five-years-11558548160">https://www.wsj.com/articles/ibm-software-exec-predicts-quantum-computers-will-become-mainstream-in-five-years-11558548160</a> 
</p>
  `;

    var blogpost16 = ` 
<p class="firstparagraph"> 
</p>

<p class="quote"> 
<br /><br /> <sup></sup></p>
`;
    var blogcite16 = `  
<p><a  target="_blank" href=""></a> 
</p>

`;
    var blogpost15 = ` 
<p class="firstparagraph"> 
</p>

<p class="quote">But, interestingly, the word “blockchain” doesn’t actually appear in the original bitcoin white paper, released back in 2008. Rather, the white paper uses the words “block” and “chain” separately many times.

It describes the word “block” as the vehicle for a bundle bitcoin transactions. Then, these blocks of are linked together, forming a “chain” of “blocks.” <br /><br /><sup>1</sup></p>
`;
    var blogcite15 = `  

 
<p>1. <a target="_blank" href="https://www.coindesk.com/bitcoin-and-blockchain-the-tangled-history-of-two-tech-buzzwords">https://www.coindesk.com/bitcoin-and-blockchain-the-tangled-history-of-two-tech-buzzwords</a> 
</p>
`;


    var blogpost14 = ` 
  <p class="firstparagraph"> 
  </p>
 
<p class="quote"> <sup></sup></p>
`;
    var blogcite14 = ` 
    <p><a  target="_blank" href=""></a> 
    </p>
`;


    var blogpost13 = ` 
<p class="firstparagraph"> 
</p>

<p class="quote"> <sup></sup></p>
`;
    var blogcite13 = `  
<p><a  target="_blank" href=""></a> 
</p>

`;


    var blogpost12 = ` 
<p class="firstparagraph"> 
</p>

<p class="quote"> <sup></sup></p>
`;
    var blogcite12 = `  
<p><a  target="_blank" href=""></a> 
</p>

`;
    var blogpost11 = ` 
  <p class="firstparagraph">The <i>global quest</i> for Satoshi Nakamoto's identity now reveals an interesting new plot twist. Contrasting with my  May 4th and 5th post articles, this theory appears to hold water ... 
  </p> 
<p class="quote">
One of the most enduring mysteries of modern times has produced another enthralling twist. Satoshi Nakamoto, Bitcoin’s pseudonymous and enigmatic creator, has not been seen online in more than eight years. Evidence has now surfaced that points to a new Satoshi candidate, whose known life has a number of parallels with that of Bitcoin’s inventor. His name is Paul Le Roux and, if proven to be Satoshi, there is a good reason why his 1 million BTC hasn’t moved – the Rhodesian has been in jail since 2012.<sup>1</sup></p>
`;
    var blogcite11 = `  
<p>1.<a target="_blank"  href="https://news.bitcoin.com/satoshi-nakamoto-could-be-criminal-mastermind-paul-le-roux/">https://news.bitcoin.com/satoshi-nakamoto-could-be-criminal-mastermind-paul-le-roux/</a> 
</p> 
`;
    var blogpost10 = ` 
<p class="quote"><i>Bitcoin is like gold in many ways. Like gold, Bitcoin cannot simply be created arbitrarily. Gold must be mined out of the ground, and Bitcoin must be mined via digital means. Linked with this process is the stipulation set forth by the founders of Bitcoin that, like gold, it have a limited and finite supply. In fact, there are only 21 million Bitcoins that can be mined in total. Once miners have unlocked this many Bitcoins, the planet's supply will essentially be tapped out, unless Bitcoin's protocol is changed to allow for a larger supply. All confirmed Bitcoin transactions are recorded in the blockchain. The blockchain is described as a shared public ledger on which the entire Bitcoin network relies.</i> <sup>1</sup></p>
<p class="firstparagraph">Sometime near 2020, the rules of crypto-logic begin to bend ... 
</p>
<p class="quote"> It may seem that the group of individuals most directly affected by the limit of the Bitcoin supply will be the Bitcoin miners themselves. On one hand, there are detractors of the Bitcoin limitation who that say that miners will be forced away from the block rewards they receive for their work once the Bitcoin supply has reached 21 million in circulation. In this case, these miners may need to rely on transaction fees in order to maintain operations. Bitcoin.com points to an argument that miners will then find the process unaffordable, leading to a reduction in the number of miners, a centralization process of the Bitcoin network, and numerous negative effects on the Bitcoin system. <sup>2</sup></p>


`;
    var blogcite10 = `  

  <p>1.
  <a href="https://hackernoon.com/blockchains-dont-scale-not-today-at-least-but-there-s-hope-2cb43946551a" target="_blank">https://hackernoon.com/blockchains-dont-scale-not-today-at-least-but-there-s-hope-2cb43946551a</a>https://www.cnbc.com/2019/04/28/bitcoin-bull-tom-lee-says-new-crypto-highs-likely-by-2020.html
  </p>
<p>1.
<a href="https://www.investopedia.com/tech/what-happens-bitcoin-after-21-million-mined/" target="_blank">https://www.investopedia.com/tech/what-happens-bitcoin-after-21-million-mined/</a> 
</p>
`
    var blogpost9 = ` 
  <p class="firstparagraph">Linus Torvalds' great contribution now extends to Microsoft 10, rather than the past couple year's emulated mounting. 
  </p>
 
<p class="quote">Windows 10 will soon include a built-in Linux kernel updated through Windows Update. Windows itself will still be based on the Windows kernel, of course. The Linux kernel will power the Windows Subsystem for Linux 2 (WSL 2) and let you run even more Linux applications on Windows 10.
<br /><br />
WSL version 1 was powerful, but it relied on emulation to run Linux software. That prevented more complex Linux applications—like Docker—from running on Windows. WSL 2 will be more powerful and will run Linux software using an actual Linux kernel.<sup>1</sup></p>
<p>
This, along with 2019 Google Chromebooks' command-line Linux development environments -- Hooray, the Universe has finally converged!
</p>
`;
    var blogcite9 = `  
<p>1. <a href="https://www.howtogeek.com/414036/2019-is-the-year-of-linux-on-the-desktop/">https://www.howtogeek.com/414036/2019-is-the-year-of-linux-on-the-desktop/</a> 
</p>
 
`;
    var blogpost8 = ` 
  <p class="firstparagraph"> 
  </p>
 
<p class="quote"> <sup></sup></p>
`;
    var blogcite8 = `  
<p><a href=""></a> 
</p>
 
`;


    var blogpost7 = ` 
  <p class="firstparagraph">  BTC smart contract ability now gets a boost, as it looks like R & D has been busy lately:
  </p>
  <p class="quote">
  The two proposals, announced on the bitcoin developer email list, describe Taproot, a code change designed to increase bitcoin’s privacy. Taproot is expected to be bundled together with an upgrade called Schnorr in a soft fork that developers have been looking into for some time, paving the way for privacy and scalability improvements to bitcoin.
<br /><br />
Developers have long been thinking about how to arrange this particular upgrade. There have been a number of proposed changes to bitcoin over the years and, as they are all related, it makes sense to implement them together. That includes Merkelized Abstract Syntax Trees (MAST), adding, improved bitcoin smart contracts, Schnorr signatures, which adds another way to sign bitcoin transactions, and Taproot, which adds even better privacy.<sup>1</sup>
</p>

`;
    var blogcite7 = ` 
<p>1.<a href="https://www.coindesk.com/new-bips-hint-at-upcoming-taproot-bitcoin-soft-fork">https://www.coindesk.com/new-bips-hint-at-upcoming-taproot-bitcoin-soft-fork</a>
</p> 

`;
    var blogpost6 = ` 
  <p class="firstparagraph">Bitcoin's bare simplicity--designed more than ten years ago, published October 31, 2008--has traditionally served as a strength of reliability in an uncharted industry field. Yet, in a complex and demanding Tech world, others took the spotlight--as the Bitcoin distributed ledger has been contrasted with Ethereum's complex scripting language, Solidity, which provides multi-variate <i>Smart Contracts</i> that are well-suited for Distributed Apps, <i>DAPPs</i> and generally for financial-clerical-legal documents. However, the once belittled simple, but reliable, distributed blockchain ledger leverages third-party smart contracting:
  </p>
 
<p class="quote">
Ethereum has become the most popular blockchain for creating smart contracts. One of the major design goals of the Ethereum platform was to support smart contracts. From the start, this set Ethereum apart from Bitcoin, which was created first and foremost as a digital currency platform.
<br /><br />
As the Bitcoin protocol has evolved, it has gained support for smart contracts. Smart contract functionality is not as programmable and extensible on Bitcoin as it is on Ethereum. However, using features added to Bitcoin through improvement proposals, certain smart contract functionality can be achieved through Bitcoin scripting.
<br /><br />
For Particl, the most important smart contract feature in Bitcoin is the OP_CHECKLOCKTIMEVERIFY opcode, which was introduced by Peter Todd as Bitcoin Improvement Proposal (BIP) 65. The opcode makes it possible to write scripts that prevent funds in a multi-signature wallet from being spent until a certain signature pattern is implemented or a certain amount of time passes.<sup>1</sup></p>
`;
    var blogcite6 = `  
<p>1.<a href="https://bitcoinmagazine.com/articles/yes-bitcoin-can-do-smart-contracts-and-particl-demonstrates-how/">https://bitcoinmagazine.com/articles/yes-bitcoin-can-do-smart-contracts-and-particl-demonstrates-how/</a> 
</p>

<p>White Paper<a href="https://github.com/particl/whitepaper/blob/master/decentralized-private-marketplace-draft-0.1.pdf">https://github.com/particl/whitepaper/blob/master/decentralized-private-marketplace-draft-0.1.pdf</a>
</p>
`;
    var blogpost5 = ` 
  <p class="firstparagraph"> 
  </p>
    
  <p class="quote">
  The self-proclaimed Satoshi, Craig Wright, is being sued by the Kleiman family on behalf of the now deceased Dave Kleiman and his estate. The lawsuit accuses Wright of fraud and theft of “over $11 billion worth of bitcoins and intellectual property from the estate of Dave Kleiman and W&K shortly after Dave’s 2013 death.” Last week the court ordered Wright to disclose bitcoin addresses that belonged to him before December 2013. The Florida Magistrate overseeing the lawsuit, Judge Bruce Reinhart, signed the order and gave Wright a few days to produce the list.
  <br /><br />
  Since then a list of addresses that were once filed in an obscure fashion was unsealed and Wright claims to have mined the first 70 bitcoin blocks starting from the Genesis block. After the redacted list was unsealed, the researchers at Wizsec decided to study the addresses and wrote a blog post about the recently disclosed file. Wizsec claims that Wright simply copied and pasted the addresses from the first 70 blocks and asserted the addresses belonged to him without any cryptographic proof.
<br /><br />
Wizsec says the motion begs the belief that the self-proclaimed inventor acts as if he is “ignorant about the fundamentals of his invention.” “Perhaps Wright thinks that being a bitcoin miner means pointing at bitcoins and yelling ‘Mine,’” the researchers jokingly remarked. In the document, Wright’s filing continues to assert that he did not keep track of which Bitcoin blocks he mined and that he does not know any of the other Bitcoin public addresses. The motion further states that the self-styled Satoshi does not have a complete list of the public addresses that he owned as of any date.<sup>1</sup>
</p>
`;
    var blogcite5 = ` 
<p>1.<a href="https://www.coindesk.com/new-bips-hint-at-upcoming-taproot-bitcoin-soft-fork">https://www.coindesk.com/new-bips-hint-at-upcoming-taproot-bitcoin-soft-fork" target="_blank">https://www.coindesk.com/new-bips-hint-at-upcoming-taproot-bitcoin-soft-fork</a>
</p>
 
`;


    var blogpost4 = ` 
<p class="firstparagraph">Satoshi Nakamoto, the omni-present legend that introduced the final frontier for Trustless-based cryptocurrencies is worthy of the world's respect. But the Prying Eyes of the tech paparazzi are on the attack. <br /><br />Some character development:  
</p>
 

<p class="quote"> Ten years ago today, someone using the name Satoshi Nakamoto sent an academic paper to a cryptography mailing list proposing a form of digital cash called "bitcoin." The pseudonymous Nakamoto, whose true identity remains unknown, described an idea for "mining" a limited amount of this virtual currency through a peer-to-peer scheme that wouldn't depend on a bank, government, or any other central authority. Once people started using bitcoin, it would be impossible for a government to pull the plug, as happened with previous attempts to create digital money, such as E-Gold.
<sup>1</sup>
</p>
<p>However, seeking a life of anonymity can only stir up further the paparazzis' research fervor. So, the latest attempt on the inventor's privacy, there is the latest claim:</p>
<p class="quote">The Gotsatoshi.com domain was registered in May 2017, but has lain dormant until last month, when an archived snapshot of the site shows it to have been proclaiming Satoshi’s unveiling as 10 days away then. It’s possible that the great reveal will remain forever 10 days away, to frustrate watchers hoping for a thrilling denouement, or the countdown may reach zero only to reveal a new shitcoin, puzzle game, or to hail the efforts of the marketing agency that dreamed up the stunt.<sup>2</sup>
</p>
<p> 
Channeling our adoration of Satoshi Nakamoto toward respect is a bygone hope, but unwarranted paparazzi expos&eacute;s cross the line of decency, so let's see if Satoshi's cleverness yet once again thwarts the prying eyes!</p>
`;
    var blogcite4 = `
<p>0. Night at the Roxbury</p>
<p>1.<a href="https://www.wired.com/story/after-10-years-bitcoin-changed-everything-nothing/" target="_blank">Oct. 31, 2019: https://www.wired.com/story/after-10-years-bitcoin-changed-everything-nothing/</a>
</p>

<p>2.   <a href="https://news.bitcoin.com/new-website-promises-to-unveil-satoshi-nakamoto-in-10-days/" target="_blank">https://news.bitcoin.com/new-website-promises-to-unveil-satoshi-nakamoto-in-10-days/</a>
</p>
`;
    var blogpost3 = `
    <p class="firstparagraph">Rekognition, a premier AWS service, shines among a few dozen other AI software resources, not to mention Platforms-as-a-Service, yet not without controversy: On the one hand, AI algorithms necessarily reflect the biases of its origin lab. On the other hand, Providers like AWS' democratizing access to every researcher, professional, and student the unlimited use of sophisticated and expensive AI resources; thus canceling out any potential bias through the diversity of individuals' and teams' participation.  
    <br /><br />
    <img   class="zoom" src="https://s3.amazonaws.com/tmm-nov/img/rekognition.jpg">  
    <br /><br />
    At the heart of these healthy public debates, it's the particular use-cases that exemplify the spectrum of the debate. For instance, policing practice by bot is a sure example, if not for the <i>RoboCop</i> Hollywood allure ... As always, the AI's algorithm bears the imprint of the creator's intentions: </p>
	
	<p class="quote"> 
	But Washington County also became ground zero for a high-stakes battle over the unregulated growth of policing by algorithm. Defense attorneys, artificial-intelligence researchers and civil rights experts argue that the technology could lead to the wrongful arrest of innocent people who bear only a resemblance to a video image. Rekognition’s accuracy is also hotly disputed, and some experts worry that a case of mistaken identity by armed deputies could have dangerous implications, threatening privacy and people’s lives.<br /><br />

Some police agencies have in recent years run facial-recognition searches against state or FBI databases using systems built by contractors such as Cognitec, IDEMIA and NEC. But the rollout by Amazon has marked perhaps the biggest step in making the controversial face-scanning technology mainstream. Rekognition is easy to activate, requires no major technical infrastructure, and is offered to virtually anyone at bargain-barrel prices. Washington County spent about $700 to upload its first big haul of photos, and now, for all its searches, pays about $7 a month.<sup>1</sup> 
    </p>
    <p>Whether government services or commercial enterprise, the landscape  is converting <i>en masse</i> the manual and the mundane to machine learning.  Public advocacy, now-g5 23 more than ever, can help direct A.I. technology and use toward a more society-friendly endeavor ...</p>
	`;
    var blogcite3 = ` 
 
	<p>1.
	<a href="https://www.washingtonpost.com/technology/2019/04/30/amazons-facial-recognition-technology-is-supercharging-local-police/?noredirect=on&utm_source=pocket-newtab&utm_term=.8a8a1b75b94a" target="_blank">https://www.washingtonpost.com/technology/2019/04/30/amazons-facial-recognition-technology-is-supercharging-local-police/?noredirect=on&utm_source=pocket-newtab&utm_term=.8a8a1b75b94a</a>
	</p>
    
    `;

    var blogpost2 = `  
    <p class="firstparagraph">Ethereum Ether and Bitcoin have plenty in common, including their Proof-of-Work architecture--requiring Mining computationally difficult math problems to create scarcity and other functions. The downside is the nation-comparable amount of electricity spent each year, which in many cases are unregulated, coal-filled energy sources across the globe. This commonality will end next month when the Ethereum cryptocurrency will transition to Proof-of-Stake architecture, the long-ago and highly anticipated Ethereum 2.0.
    </p> 
    <p class="quote"> 
    Ethereum has been inching toward a major upgrade, dubbed ethereum 2.0, which would radically change the how the $17 billion network creates blocks and verifies transactions. As explained by founder of ethereum Vitalik Buterin in a recent interview at ethereum conference ETHCapetown, ethereum 2.0 has “two major flagship components.”
    <br /><br />
    “One is Casper, which is our proof-of-stake algorithm which replaces mining…with something that we consider to be much more efficient,” Buterin said at the time. “The second part is sharding which is this massive scalability improvement which happens because you don’t need every computer in the network to process every transaction in the network any more.
    <br /><br />
    Buterin added that with sharding, he anticipates a “1,000 factor increase in scalability” to the network. However, sharding will only come in the later two phases of ethereum 2.0 roll-out. The first phase – dubbed Phase Zero – strictly launches ethereum’s new proof-of-stake blockchain.
    <sup>1.</sup>
    </p>
    
    <p>The second improvement accentuates Ethereum's contract-capable currency (unlike Bitcoin's lack of contractual functionality), which means to revolutionize not only how data is persisted but also distributed, and managed at the individualized crypto-level! Using a language called <i>Solidity</i>, derived from Java and JavaScript origins, this crypto-currency stands first in line for upsetting the existing systems of finance, manufacture, and enterprise data. An exemple use-case ...
   
    </p>
    
    <p class="quote"> 
    In the United States, healthcare comes from a patchwork of private companies, which means the handling of patient data is even more fragmented. John Halamka, chief information officer at Beth Israel Deaconess Medical Center in Boston, Massachusetts, told MIT Technology Review last year that there are 26 different electronic medical records systems in his home city alone.
    <br /><br />
    In 2016, Halamka teamed up with a group of scientists at MIT to try to find a solution to the problem using blockchain. They published their white paper on the subject in August 2016, laying out their proposal for a system that would help all those disparate databases exchange data — a project they called MedRec.
    <br /><br />
    Andy Lippman, a senior research scientist at MIT, co-authored the paper with Halamka. The system they outlined was to use Ethereum software — which, unlike bitcoin, can integrate and execute smart contracts — to build a private blockchain, linking healthcare providers together and allowing them to share their data.
    <sup>2.</sup>
    </p>
    <p>So, as usual, Ethereum wins the day for both daily applicability and now a more scalable <strong><i>and</i> conscientious</strong> crypto-currency Tech!
	`;



    var blogcite2 = ` 
      
  <p class="cite">1. 
  <a href="https://www.coindesk.com/code-for-ethereums-proof-of-stake-blockchain-to-be-finalized-next-month" target="_blank"> https://www.coindesk.com/code-for-ethereums-proof-of-stake-blockchain-to-be-finalized-next-month</a>
  
  </p>
  
      
  <p class="cite">2. [Post article 2/20/18]
  <a href="https://medium.com/s/welcome-to-blockchain/what-could-blockchain-do-for-healthcare-59c17245448e" target="_blank">https://medium.com/s/welcome-to-blockchain/what-could-blockchain-do-for-healthcare-59c17245448e</a> </p>
  
  `;
    var blogpost1 = ` 
  
  <p class="firstparagraph">Data Analytics' <i>Law of Large Numbers</i>, i.e. over n = 10,000, promises a predictable likelihood of conditions and events, given a sufficiently high sample of training data. Despite the quantum-directed molecular behavior of biological organisms, the classical exponentiation of machine-learning statistical algorithms still does work miracles:  
  </p> 
  
  <p class="quote"> 
  Studies indicate that using algorithms to analyze digital slides delivers diagnoses as accurate as an expert pathologist—and in some instances, the algorithms are more accurate. A 2018 study by Massachusetts General Hospital and MIT found that an automated system they developed diagnosed dense breast tissue (an indicator of breast cancer) in mammograms at the same level as an expert radiologist. Another algorithm developed by Google was found to “help detect metastatic breast cancers with significant accuracy and improve pathologist performance,” according to studies in the Archives of Pathology and Laboratory Medicine and the American Journal of Surgical Pathology.
  </p>
  So, how can we best take advantage of these advances? Clear the brush! The meta-organization of healthcare technology and financing simply can't keep pace with the pure tech:
  <p class="quote">
  After taking a look, the pathologist might ship it to a specialist at another lab for a second opinion. Each time the slide is moved, it is packed up and shipped to a different address. All the while, you’re waiting days or even weeks to hear whether or not you have cancer.
<br /><br />
  For decades, there have been limited ways to share medical slides, with information management lagging behind even as medical science advanced. But in the past few years, a new industry of digital pathology has emerged that could finally offer a more efficient and large-scale way of distributing and analyzing these kinds of samples.
  <sup>1</sup>
  </p>
  <p>So, the good news from <i>the doctors'</i> occasional nemesis, U.S. Food and Drug Administration, decided that after 8 years of trials and hearings, truly scalable and sufficiently large sample data can now be digitized - hence personalizing the law of large numbers from the whole to the individual patient. At long last, the patience has paid off!
  `;
    var blogcite1 = `
  
  
  <p>1. [Post article 2/22/19]
  <a href="https://medium.com/s/story/algorithms-can-now-identify-cancerous-cells-better-than-humans-78e6518f65e8" target="_blank">
  https://medium.com/s/story/algorithms-can-now-identify-cancerous-cells-better-than-humans-78e6518f65e8
  </a>
  </p>
  
  `;

    var url = [ 
        
        {
            id: '30',
            did: '19-05-30',
            date: 'May 30, 2019 <br />Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Web Dev Affairs',
            title: 'All\'s Fair in War and Peace, but Not in Trade! Part II: <br />Material Substitutes',
            post: blogpost30,
            cite: blogcite30
        },
        {
            id: '29',
            did: '19-05-29',
            date: 'May 29, 2019 <br />Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Web Dev Affairs',
            title: 'All\'s Fair in War and Peace, but Not in Trade! Part I: <br />When the Dogs of War take a Bite out of Tech',
            post: blogpost29,
            cite: blogcite29
        },
        {
            id: '18',
            did: '19-05-21',
            date: 'May 21, 2019 ',
            author: 'by Thomas Maestas, MA',
            cat3: 'Web Dev Affairs',
            title: 'The Politics of Tech',
            post: blogpost18,
            cite: blogcite18
        }, {
            id: '17',
            did: '19-05-20',
            date: 'May 20, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Quantum Data',
            title: 'Procrastinating a Quantum Leap are We?',
            post: blogpost17,
            cite: blogcite17
        },
        {
            id: '16',
            did: '19-05-18',
            date: 'May 18-19, 2019 <br />Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: '',
            title: '',
            post: blogpost16,
            cite: blogcite16
        }, {
            id: '15',
            did: '19-05-17',
            date: 'May 17, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: '',
            title: '',
            post: blogpost15,
            cite: blogcite15
        },
        {
            id: '14',
            did: '19-05-16',
            date: 'May 16, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'M',
            title: '',
            post: blogpost14,
            cite: blogcite14
        }, {
            id: '13',
            did: '19-05-15',
            date: 'May 15, 2019 ',
            author: 'by Thomas Maestas, MA',
            cat3: '',
            title: '',
            post: blogpost13,
            cite: blogcite13
        },
        {
            id: '12',
            did: '19-05-14',
            date: 'May 14, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: '',
            title: '',
            post: blogpost12,
            cite: blogcite12
        },
        {
            id: '11',
            did: '19-05-13',
            date: 'May 13, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Satoshi \'Le Roux\' Nakamoto?',
            post: blogpost11,
            cite: blogcite11
        }, {
            id: '10',
            did: '19-05-11',
            date: 'May 11-12, 2019 <br /> Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Finite Bitcoin',
            post: blogpost10,
            cite: blogcite10
        },
        {
            id: '9',
            did: '19-05-10',
            date: 'May 10, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Web Dev Affairs',
            title: 'The Long and Ubiquitous Reign of Linux OS',
            post: blogpost9,
            cite: blogcite9
        },
        {
            id: '8',
            did: '19-05-09',
            date: 'May 9, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: ' ',
            title: ' ',
            post: blogpost8,
            cite: blogcite8
        },
        {
            id: '7',
            did: '19-05-08',
            date: 'May 8, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Toward a Smarter Bitcoin, Part II:<br />Designing a More Scalable and Private Crypto-Currency',
            post: blogpost7,
            cite: blogcite7
        },
        {
            id: '6',
            did: '19-05-07',
            date: 'May 7, 2019 <br /> Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Toward a Smarter Bitcoin, Part I:<br />Contracting a More Functional Crypto-Currency',
            post: blogpost6,
            cite: blogcite6
        },
        {
            id: '5',
            did: '19-05-05',
            date: 'May 6, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: '<i>What is Love? Baby, Baby Don\'t Hurt Me No More! </i><sup>0</sup> Part II:<br /><br />Bitcoin\'s Palaentology Deepens the Founder\'s Obscurity',
            post: blogpost5,
            cite: blogcite5
        },
        {
            id: '4',
            did: '19-05-04',
            date: 'May 4 - 5, 2019 <br /> Weekend',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: '<i>What is Love? Baby, Baby Don\'t Hurt Me No More! </i><sup>0</sup> Part I:<br /><br />Paparazzi Sighting of our Bitcoin Father: <br />Adoring Adulation or Privacy Invasion?',
            post: blogpost4,
            cite: blogcite4
        },
        {
            id: '3',
            did: '19-05-03',
            date: 'May 3, 2019  ',
            author: 'by Thomas Maestas, MA',
            cat3: 'A.I.Now.',
            title: 'Rekognize Me?',
            post: blogpost3,
            cite: blogcite3
        },
        {
            id: '2',
            did: '19-05-02',
            date: 'May 2, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'Musing Blockchain',
            title: 'Modern Healthcare, Part II:<br />The Scalable and Clean Data Platform',
            post: blogpost2,
            cite: blogcite2
        },
        {
            id: '1',
            did: '19-05-01',
            date: 'May 1, 2019',
            author: 'by Thomas Maestas, MA',
            cat3: 'A.I.Now.',
            title: 'Modern Healthcare, Part I:<br />On the Second Opinion of 10,000 Doctors',
            post: blogpost1,
            cite: blogcite1
        }
    ];

    for (i = 0; i < url.length; i++) {
        var cat = ` 
	  <div id="${url[i].did}" class="blogDiv"> 
	  <hr />  
	  <a href="#top"><button>Top</button></a>  
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
	  <div id="post">${url[i].post}	  </div>
      <div id="post">${url[i].cite}</div>
	  </div>`

        document.getElementById("paragraph-may19").innerHTML += cat;
    }

    var i;
    for (i = 0; i < url.length; i++) {
        var catMod = `
	  <div id="${url[i].did}_mod" class="blogDivMod"> 
	  <hr />  
	  <a href="#top-mod"><button>Top</button></a>   
	  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
	  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
	  <p id="author" class="  author">${url[i].author}</p>   
	  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
	  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
	  <br />
      <div id="post">${url[i].post}</div>
      <div id="post">${url[i].cite}</div>
      

	  </div>`;

        document.getElementById("paragraph-may19-mod").innerHTML += catMod;
    }

    console.log('blogger-may-19');
    // console.log(angular.toJson(url));
};

bloggerMay19();
 
//Top Vars Above

var bloggerMay21 = function () {
 
  // var blogpost2 =  ` 
{/* <p class="firstparagraph">  Hence, the Application Interface Polygon's (MATIC) Layer-2 solutions.
</p> */}
// <p class="quote"><i>  .<br /><br />
// </i><sup>1</sup> 
// </p>
// `;
// var blogcite2 = `
// <p class="footnotes">1. <a href="h "   target="_blank"> </a>
// </p>   `;


// var blogpost2 =  ` 
// <p class="firstparagraph">, 
// <p class="quote"><i>A Dogecoin (DOGE)-focused division of publicly traded over-the-counter software firm AppSwarm is looking to bring together global development teams to build off of the Dogecoin blockchain.<br /><br />
// DogeLabs — a newly launched division of AppSwarm’s blockchain research lab, TulsaLabs — announced Wednesday a new initiative calling on DevOps teams to unite their efforts in building a “sort of decentralized network” of DOGE developers across the globe.</i><sup>1</sup> 
// </p>
// `;
// var blogcite2 = `
// <p class="footnotes">1. <a href="https://cointelegraph.com/news/appswarm-s-doge-division-calls-for-a-global-dev-teams-to-build-off-dogecoin"   target="_blank">https://cointelegraph.com/news/appswarm-s-doge-division-calls-for-a-global-dev-teams-to-build-off-dogecoin</a>
// </p>   `;
 


var blogpost2 =  ` 
<p class="firstparagraph">Ethereum's world virtual machine has proven utility already, and only the tip of the iceberg has been reached for potential. DeFi applications have locked 2/3 Ethereum, which boosts from $600 to $4000 summing to market cap of $388,000,000. <img src="src/img/ada-btc-eth.png" class="zoom"   /> The interesting matter is Ethereum's DeFi applicibility--from real estate to pools and loans--based on sophisticated smart contracts. Bitcoin, aside from form of value, has no parallel attraction.
<p class="quote"><i>
 
</p>
`;
var blogcite2 = `
<p class="footnotes">1. <a href="https://www.benzinga.com/node/21184597"   target="_blank">Is the Bitcoin-Ethereum 'Flippening' a Likely Scenario?</a>
</p>   `;
 

var blogpost1 =  ` 
<p>Doubtless, New Chain Lifecycle is 5% utility, 5% hype and 90% Decentralized App developers' community -- the ingredient <i>par excellence</i> for lasting hype and adoption. Here we have the exponential growth of Ethereum interest, let alone price of token. On the contrary we have Cardano Network, powered by Proof-of-Stake ADA token, which has yet to evolve past TestNet phase, a point of paralysis for Cardano chain DAPP development. One last step before final main net launch, and finally, we can witness David face Goliath...</p>

<p class="quote"><i>This year, we are seeing the direct competitors clashing. Ethereum has made great strides to make it scalable and affordable, with the Berlin fork already finalized and London hard fork scheduled for July.
In the meantime, Cardano smart contracts should be entering the Cardano testnet by the end of this month.</i><sup>1</sup> 
</p>
<p>Better late than never, the Cardano blockchain ecosystem boasts superior, more efficient, sophisticated smart contracting:</p>
<p class="quote">Cardano (ADA) is a highly anticipated direct competitor to Ethereum, promising more scalability and smart contracts with the Alonzo upgrade.</p>
<p>There are two obstinate problems:<i>Ethereum's monopolistic and universal DAPP evolution and ADA's stunted community development.</i></p>
<p>First, All customized business applications, whether off-chain or on-, have built architectures depending on private/consortium blockchains that periodically sync with Ethereum mainnet. </p><p>Secondly, whether or not Cardono does launch main net, the multi-year delay in even <i>launching</i>chain mainnet --for all its bells and whistles -- has stunted new development and developer solidarity. Despite the author's praise for ADA, he concedes the infinitesimally small likelihood that Cardano developers will ever approach Ethereum network --</p> 
<p class="quote">Lastly, despite getting up to 7th rank, Cardano (ADA) is not likely to catch up with Ethereum’s much larger dev pool and network effect.<sup>1</sup></p>
<p>And so, beyond Ethereum 2's Proof-of-Stake transition on the near horizon, ethereum enjoys a burgeoning ecosystem of layer-2 sidechains, facilitated by the likes of those as Polygon (Matic) solutions. Even so, next to Polkadot ecosystem, only Cardano stands as a viable challenge, how ever miniscule it may be...</p>
<p class="quote">
*Ethereum holds (by far) the largest pool of developers, according to Electric Capital. As a number of open source dev ops tools are available to make remote work easier through collaboration, managing developers remains a serious cog in DeFi development. Yet Ethereum and its developer community have thus far been dominant in this sense.<br /><br />
*In the last three years, Ethereum has widened its developer pool by 215%. Such a network effect would be exceedingly difficult to overcome.</i><sup>2</sup> 
</p></p>
`
var blogcite1 = 
`
 
<p class="footnotes">1. <a href="https://finance.yahoo.com/news/cardano-prepares-launch-alonzo-testnet-130000976.html?guccounter=1&guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&guce_referrer_sig=AQAAAKH0bKJvZsFbQBykBexupKV-HvvhwSDQjmlBmyM4Q69AaNPYvc4Tk8LSJIyBqekdp0PAPL7kz0hTgJFEwOB3jchU4gzkApL6bQay9JZ2z16ddSW5RsCYEp049RRj-L_zFhrhze_83BrLCQjxz_-oOvLEbc8l3X_T4KdO8-eQf6cz"   target="_blank">cardano-prepares-launch-alonzo-testnet</a>
</p>   
<p class="footnotes">2. <a href="https://www.benzinga.com/node/21184597"   target="_blank">Is the Bitcoin-Ethereum 'Flippening' a Likely Scenario?</a>
</p>
`; 
   
  var url =  
  [     
    // { 
    //   id:'2',
    //   did:'may-21-05-17',
    //   date:'May 17, 2021',
    //   author:'by Thomas Maestas, MA',
    //   cat3:'Web Dev Affairs',
    //   title:'Doge Days are Here Again:  ',
    //   post:blogpost1,
    //  blogcite:blogcite1
    //  },and the Law of Large Numbers
     { 
      id:'2',
      did:'may-21-05-18',
      date:'May 18, 2021',
      author:'by Thomas Maestas, MA',
      cat3:'Musing Blockchain',
      title:'ETH v. BTC v. ADA, Part I: The Law of Large Numbers & the Inefficiency of    ',
      post:blogpost2,
     blogcite:blogcite2
     },
    { 
    id:'1',
    did:'may-21-05-17',
    date:'May 17, 2021',
    author:'by Thomas Maestas, MA',
    cat3:'Web Dev Affairs',
    title:'ETH v. BTC v. ADA, Part I: Varying levels of DAPP Community-Building ',
    post:blogpost1,
   blogcite:blogcite1
   }
   ] ;

   for (i=0;i<url.length;i++){ 
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>` ;
document.getElementById("paragraph-may21").innerHTML += cat; 
} 
 
var i;
for (i=0;i<url.length;i++){ 
  var catMod = `
  <div id="${url[i].did}_mod" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
document.getElementById("paragraph-mod-may21").innerHTML += catMod;
}


console.log('blogger-may21'); 
console.log(angular.toJson(url));
}; 


bloggerMay21();  


// 'use strict';

var bloggerNov = function () {  

 

  var blogpost137 =   `
 
  <p class="firstparagraph">Quantum Nay-Sayers' opinions appear more rooted in <i>a binary form of thinking, while quantum computing itself represents non-binary reasoning! </i>That Quantum allows for a third state, rather than Classical 2 states. This means with two transistors can in one instance yield 2 possibilities, while two Quantum 'qubits' yield exactly four possibilities in an instance: the two qubits can be on, off, <i>and both</i>. Likewise 4 transistors yield four possible states in one instance, 4 qubit transistors <i>yield 16 possible states</i> since all four can carry both states in one instance.</p>
  <p>So, merely discussing the paradigm-breaking 3 states already implicates one's life into quantum computing's sphere of reality!
  </p>
  <p class="quote"> When will useful quantum computers be constructed? The most optimistic experts estimate it will take 5 to 10 years. More cautious ones predict 20 to 30 years. (Similar predictions have been voiced, by the way, for the last 20 years.) I belong to a tiny minority that answers, “Not in the foreseeable future.” Having spent decades conducting research in quantum and condensed-matter physics, I’ve developed my very pessimistic view. It’s based on an understanding of the gargantuan technical challenges that would have to be overcome to ever make quantum computing work.
<sup>1</sup>
  </p>`;
  
  var blogcite137 = `
  <p class="cite">1. <a target="_blank" href="https://spectrum.ieee.org/computing/hardware/the-case-against-quantum-computing">https://spectrum.ieee.org/computing/hardware/the-case-against-quantum-computing</a></p>  
  `; 
  var blogpost136 =   `
 
  <p class="firstparagraph">Co-bots. Algorithm and Human input toward final calculations of real, experienced conditions can be a real puzzle. Whether Doctors with access to patients' A.I.-analyzed patient metrics or Drivers sharing responsibilities with 'semi-automated', self-driving vehicles, the challenge. 
  </p>
  <p class="quote">Drawing on four years of ethnographic research among Uber drivers, Rosenblat has produced a thoroughly dystopian report that details how millions of drivers are now managed by a computerized system that combines the hard authoritarianism of Frederick Winslow Taylor with the cynical cheerleading of Michael Scott.
<sup>1</sup>
  </p>
  <p>The cultural management of leader-less automation makes for a less useful tool for humans: The more autonomous the tool  does not necessarily translate to optimal relations:   For example, in-group thinking where ideas are recycled and magnified due to technological effect rather than conscious will. So, the healthier more useful technology can often be the most interactive and highly configurable tools, whether phone devices or application software. So, in sum, the Co-Bot is a go-bot -- a better bot.`;
  
  var blogcite136 = `
  <p class="cite">1. <a target="_blank" href="http://nymag.com/intelligencer/2018/11/alex-rosenblats-uberland-review.html">http://nymag.com/intelligencer/2018/11/alex-rosenblats-uberland-review.html</a></p>  
  `; 
  var blogpost135 =   ` 
  <p class="firstparagraph">A.I.'s segmented, expansive landscape ranges from free-wheeling start-ups to DIY hobbyists to University researchers. This diversity of A.I. designs, coupled with free access to open-source tools provides for an entirely unpredictable path.  
  </p>
  <p class="quote">This is an unsettled field. It's not like physics."<br />

  AI may seem to be a smooth-running assembly line of startups, products and research projects. The reality, however, is a landscape clouded by uncertainty.
  [Author] Ford's [A.I.-expert] interviewees could not agree on where their field stands, how to push it forward or when it will reach its ultimate goal: a machine with humanlike intelligence.
  <br /><br />
  Why it matters: The embryonic state in which Ford found AI — so early in its development more than a half-century after its birth that the basics are still up for grabs — suggests how far it has to go before reaching maturity. On his blog, Brooks has said that AI is only 1% of the way toward human intelligence.
<sup>1</sup>
  </p>`;
  
  var blogcite135 = `
  <p class="cite">1. <a target="_blank" href="https://www.axios.com/artificial-intelligence-disagreements-machine-learning-d26ef884-b415-43c6-aff2-d17a05483389.html">https://www.axios.com/artificial-intelligence-disagreements-machine-learning-d26ef884-b415-43c6-aff2-d17a05483389.html</a></p> 
 
  `; 
  var blogpost134 =   ` 
  <p class="firstparagraph">Compared with so many other options, including smart Currency that doubles as a programmable legal contract like Ethereum or energy-friendly 'Proof-of-Stake' algorithm Currencies, one has to wonder why Bitcoin has managed to hang around as long as it has ... even if name-recognition and simplicity of the ten-year old technology are its two best attributes. 
  </p>
  <p>So, with Bitcoin's stumbling, perhaps other options and new technologies can be considered: 
  </p>
  <p class="quote">“The Proof of Stake algorithm is a generalization of the Proof of Work algorithm. In PoS, the nodes are known as the ‘validators’ and, rather than mining the blockchain, they validate the transactions to earn a transaction fee. There is no mining to be done, as all coins exist from day one. Simply put, nodes are randomly selected to validate blocks, and the probability of this random selection depends on the amount of stake held. <br />
  <br />
  So, if node X owns 2 coins and node Y owns 1 coin, node X is twice as likely to be called upon to validate a block of transactions. The specific implementation of PoS can vary, depending on the use case, or as a matter of software design. Instances include Proof of Deposit and Proof of Burn. The PoS algorithm saves expensive computational resources that are spent in mining under a PoW consensus regime.”
  </p>
  <p>Beyond the practicality of programmable currency, security attributes are the unsung hero of Proof of Stake currencies:
  </p>
  <p class="quote">
  Proof of stake (aka POS) cryptos has many technical benefits but apart from that some proof of stake cryptos also give different economic benefits/dividends to its HODLers by giving them the option of running a masternode or staking their coins in a stake-able wallet.
<br /><br />This provides dual benefits of securing the blockchain network as well as creating an opportunity for users to get incentives or dividends on their holdings.
<sup>1</sup>
  </p>`;
  
  var blogcite134 = `
  <p class="cite">1. <a target="_blank" href="https://medium.com/coinmonks/blockchain-consensus-algorithm-the-proof-of-stake-slice-a4bda6658bbe">https://medium.com/coinmonks/blockchain-consensus-algorithm-the-proof-of-stake-slice-a4bda6658bbe</a></p> 
  <p class="cite">2<a target="_blank" href="https://coinsutra.com/proof-of-stake-cryptocurrencies/">https://coinsutra.com/proof-of-stake-cryptocurrencies/</a><br /><br />https://bitcoin.org/bitcoin.pdf</p> 
  `; 
  var blogpost133 =   `
  <p class="firstparagraph">Proof-of-Work Blockchain Algorithms that underly <i>some</i> cryptocurrencies--Bitcoin for example--have certainly hard on Earth's climate dilemma. Therefore, it's with a silver-lining that the currency is bottoming ...  
  </p>
  <p class="quote">
  Bitcoin is in crisis. 
  You can never really declare it dead — the idea of an electronic currency that is theoretically borderless and lawless will always live on somewhere — but its price has slumped 80 percent in less than a year, wiping about $700 billion off cryptocurrency markets.
<br /><br />
Where does it go from here? True believers are betting on a simple repeat of past asset bubbles, like dot-com stocks or real estate: a system-wide cleansing of bad actors before the roller-coaster ride begins anew. On that argument there’s a price for everything, even niche assets with no intrinsic value. Maybe Bitcoin should be above $3,700.

<br /><br />
But the virtual currency’s behavior since the start of the year doesn’t just look like a bubble bursting; it looks more like a currency under attack. Most of the price collapse happened between December and February, falling from almost $19,000 to about $7,000. Until this month, the $6,000-to-$7,000 range seemed unbreakable. There was a floor in the price — until it caved.
<sup>1</sup>
  </p>`;
  
  var blogcite133 = `
  <p class="cite">1. <a target="_blank" href="https://www.bloomberg.com/opinion/articles/2018-11-27/bitcoin-crash-is-a-real-currency-crisis">https://www.bloomberg.com/opinion/articles/2018-11-27/bitcoin-crash-is-a-real-currency-crisis</a></p> 
  `; 
 
  var blogpost132 =   `
  <p class="firstparagraph">CRISPR tech and the first generation of CRISPR babies heralds a new era ...
  </p>
  <p class="quote">According to Chinese medical documents posted online this month, a team at the Southern University of Science and Technology, in Shenzhen, has been recruiting couples in an effort to create the first gene-edited babies. They planned to eliminate a gene called CCR5 in hopes of rendering the offspring resistant to HIV, smallpox, and cholera.
<br /><br />
He Jiankui leads a team using the gene-editing technology CRISPR in an effort to prevent disease in newborns [at] 
SOUTHERN UNIVERSITY OF SCIENCE AND TECHNOLOGY
The clinical trial documents describe a study in which CRISPR is employed to modify human embryos before they are transferred into women’s uteruses.<sup>1</sup>
  </p>`;
  
  var blogcite132 = `
  <p class="cite">1. <a target="_blank" href="https://www.technologyreview.com/s/612458/exclusive-chinese-scientists-are-creating-crispr-babies/">https://www.technologyreview.com/s/612458/exclusive-chinese-scientists-are-creating-crispr-babies/</a></p> 
  `;
  var blogpost131 =   `
  <p class="firstparagraph">Latency at near-zero terms makes 5G the missing and final ingredient for the imminent IoT revolution--so why not protect the hardware foundation?
  </p>
  <p class="quote">Huawei has fallen out of favor with the US government after a congressional report from 2012 called it a national security threat out of concerns that the Chinese government could compel the company to give it access to sensitive data. Just before this year's midterm elections, the country even banned government personnel from using Huawei and ZTE devices.
  <br /><br /> 
  The Wall Street Journal says US officials briefed representatives from Germany, Japan and Italy in an effort to dissuade both government and commercially operated networks from using Huawei (and ZTE) components. In addition to discussing the possibility of Beijing forcing the company to comply with requests for data access, the authorities reportedly stressed 5G's susceptibility to cyberattacks and espionage, as well.<sup>1</sup>
  </p>`;
  
  var blogcite131 = `
  <p class="cite">1. <a target="_blank" href="https://www.engadget.com/2018/11/24/us-huawei-warning-5g/">https://www.engadget.com/2018/11/24/us-huawei-warning-5g/</a></p> 
  `;
/*

https://coinsutra.com/proof-of-stake-cryptocurrencies/

  var blogpost130 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote">Proof of stake (aka POS) cryptos has many technical benefits but apart from that some proof of stake cryptos also give different economic benefits/dividends to its HODLers by giving them the option of running a masternode or staking their coins in a stake-able wallet.
<br /><br />This provides dual benefits of securing the blockchain network as well as creating an opportunity for users to get incentives or dividends on their holdings.
<sup>1</sup>
  </p>`;
  
  var blogcite130 = `
  <p class="cite">1. <a target="_blank" href="https://coinsutra.com/proof-of-stake-cryptocurrencies/">https://coinsutra.com/proof-of-stake-cryptocurrencies/</a></p> 
  `; 
 
 */
var blogpost129 =   `
<p class="firstparagraph">
</p>
<p class="quote">In an essay in the journal JAMA last month, Tamara Tchkonia and Dr. James L. Kirkland of the Mayo Clinic categorized these processes into four broad groups: chronic inflammation; cell dysfunction; changes in stem cells that make them fail to regenerate tissue; and cellular senescence, the accumulation in tissue of aging cells that accompanies disease. Old cells, researchers have found, secrete proteins, lipids and other substances that increase inflammation and tissue destruction. <sup>1</sup>
</p>`;

var blogcite129 = `
<p class="cite">1. <a target="_blank" href="https://www.nytimes.com/2018/11/19/health/human-life-span.html">https://www.nytimes.com/2018/11/19/health/human-life-span.html</a></p> 

<p class="cite">1. <a target="_blank" href="https://jamanetwork.com/journals/jama/article-abstract/2703113">https://www.thelancet.com/action/showPdf?pii=S0140-6736%2818%2931694-5</a>
</p> 
`;
  var blogpost128 =   `
  <p class="firstparagraph">E.U.'s far-reaching data privacy law--now six months later--reveals how unmanageable and far-flung personal data has propogated. But even personal data has a shelf-life for relevence and value. 
  </p>
  <p class="quote">The General Data Protection Regulation is a sweeping personal data privacy law that came into force in late May in the EU. For the rest of the world, it's viewed as a bellwether for whether Big Tech can be held in check when immense data leaks seem to happen with painful regularity.
  <br /><br />
  Major data brokers Acxiom and Oracle are among seven companies accused of violating GDPR laws on personal information privacy. Advocates hope the complaints will shed light on the opaque ways that personal data is traded through third parties online both in the EU and the US.
  <sup>1</sup>
  </p>`;
  
  var blogcite128 = `
  <p class="cite">1. <a target="_blank" href="https://www.engadget.com/2018/11/08/gdpr-data-brokers-complaints/">https://www.engadget.com/2018/11/08/gdpr-data-brokers-complaints/</a></p> 
  `;
 

 
  var blogpost127=   `
  <p class="firstparagraph">Trade Wars make for expensive phones and tech luxuries ... Make Love Not War!
  </p>
  <p class="quote">It’s important to note that all of these reduced-demand forecasts don’t necessarily mean that nobody is buying the iPhone. Suppliers famously cut their production forecasts shortly before the release of the iPhone 6 — the best-selling iPhone in history — which saw Apple’s supply chain quickly scrambling to meet demand.  <sup>1</sup>
  </p>`;
  
  var blogcite127 = `
  <p class="cite">1. <a target="_blank" href="http://nymag.com/intelligencer/2018/11/poor-iphone-supplier-forecasts-make-everyone-very-nervous.html">http://nymag.com/intelligencer/2018/11/poor-iphone-supplier-forecasts-make-everyone-very-nervous.html</a></p> 
  `;
  var blogpost126 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote">Mark Zuckerberg gathered roughly 50 of his top lieutenants earlier this year and told them that Facebook Inc. was at war and he planned to lead the company accordingly.<br />
<br />
  During times of peace, executives can move more slowly and ensure that everybody is on board with key decisions, he said during the June meeting, according to people familiar with the remarks. But with Facebook under siege from lawmakers, investors and angry users, he needed to act more decisively, the people said.<sup>1</sup>
  </p>`;
  
  var blogcite126 = `
  <p class="cite">1. <a target="_blank" href="http://nymag.com/intelligencer/2018/11/mark-zuckerberg-declared-facebook-at-war.html">http://nymag.com/intelligencer/2018/11/mark-zuckerberg-declared-facebook-at-war.html</a></p> 
  `;
  var blogpost125 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote"><i> At home in Northern California, San Francisco voters overwhelmingly passed a tax designed to extract money from tech companies to help ease homelessness in the city. Across the Bay, Oakland voters passed a progressive property-transfer tax, which was another way of taxing the enormous wealth that’s poured into the Bay Area.
  <br /><br /> 
  Locally and nationally, the tech industry has gone from bright young star to death star. Not only have Silicon Valley companies turned out to be roughly as dirty in their corporate maneuvering as any old oil company or military contractor, but because of the Valley’s founder worship, they’ve been almost uniquely controlled by a tiny number of people.
  <br /><br /> 
  Read: Were we destined to live in Facebook’s world?
  
  And as in most things, Facebook distills, or at least embodies, these industry-wide practices. After a brutal two years that started with the 2016 election, Mark Zuckerberg responded by placing loyalists in charge of all Facebook Inc. properties. The company’s lobbyists pushed a line that its opponents were linked to George Soros, while reporting other enemies to the Anti-Defamation League.<sup>1</sup>
</i>
  </p>`;
  
  var blogcite125 = `
  <p class="cite">1. <a target="_blank" href="https://www.theatlantic.com/technology/archive/2018/11/facebook-google-amazon-and-collapse-tech-mythology/575989/">https://www.theatlantic.com/technology/archive/2018/11/facebook-google-amazon-and-collapse-tech-mythology/575989/</a></p> 
  `;
  var blogpost124 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote">While most efforts to secure digital infrastructure were fixated on blocking bad guys from getting in, few focused on the reverse: stopping them from leaking information out. Based on that idea, the group founded a new cybersecurity company called Darktrace.
  <br /><br />
  he firm partnered with mathematicians at the University of Cambridge to develop a tool that would use machine learning to catch internal breaches. Rather than train the algorithms on historical examples of attacks, however, they needed a way for the system to recognize new instances of anomalous behavior. They turned to unsupervised learning, a technique based on a rare type of machine-learning algorithm that doesn’t require humans to specify what to look for.<sup>1</sup>
  </p>`;
  
  var blogcite124 = `
  <p class="cite">1. <a target="_blank" href="https://www.technologyreview.com/s/612427/the-rare-form-of-machine-learning-that-can-spot-hackers-who-have-already-broken-in/">https://www.technologyreview.com/s/612427/the-rare-form-of-machine-learning-that-can-spot-hackers-who-have-already-broken-in/</a></p> 
  `;
  var blogpost123 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote">  Although it may sound like a term to describe a poorly performing IT staff, zero-knowledge computing could represent an evolution in corporate data protection. The approach enables data to be processed while it remains encrypted, so that analytics can be run without exposing the information. JP Morgan Chase & Co. recently led a $10 million Series A funding round in data security and analytics startup Inpher Inc., which works in the area. In a conversation with CIO Journal's Sara Castellanos, Samik Chandarana, head of data analytics for the corporate and investment bank division, makes the case for the technology.
  <br /><br />
  Keeping client data safe. JPMorgan could use the ‘secret computing’ technology to analyze a customer’s proprietary data on their behalf, using artificial intelligence without sacrificing privacy, Mr. Chandarana said. “This gives us a technological solution to be able to act on a client’s private data … without them having to worry about the security constraints or giving up all their information to us,” he said.<sup>1</sup>
  </p>`;
  
  var blogcite123 = `
  <p class="cite">1. <a target="_blank" href="https://blogs.wsj.com/cio/2018/11/13/jpmorgan-invests-in-startup-tech-that-analyzes-encrypted-data/?mod=djemCIO_h">https://blogs.wsj.com/cio/2018/11/13/jpmorgan-invests-in-startup-tech-that-analyzes-encrypted-data/?mod=djemCIO_h</a></p> 
  `;

var blogpost122 =   `
<p class="firstparagraph">Eco-friendly urban commuting options are a gift, and should always be hailed.  
</p>
<p class="quote">  Although it may sound like a term to describe a poorly performing IT staff, zero-knowledge computing could represent an evolution in corporate data protection. The approach enables data to be processed while it remains encrypted, so that analytics can be run without exposing the information. JP Morgan Chase & Co. recently led a $10 million Series A funding round in data security and analytics startup Inpher Inc., which works in the area. In a conversation with CIO Journal's Sara Castellanos, Samik Chandarana, head of data analytics for the corporate and investment bank division, makes the case for the technology.
<br /><br />
Keeping client data safe. JPMorgan could use the ‘secret computing’ technology to analyze a customer’s proprietary data on their behalf, using artificial intelligence without sacrificing privacy, Mr. Chandarana said. “This gives us a technological solution to be able to act on a client’s private data … without them having to worry about the security constraints or giving up all their information to us,” he said.<sup>1</sup>
</p>`;

var blogcite122 = `
<p class="cite">1. <a target="_blank" href="https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/">https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/</a></p>
<p class="cite">2<a target="_blank" href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
`;
var blogpost111 =   `
<p class="quote">
<p class="quote">At the highest levels of government the plastic panic can resemble a scrambled response to a natural disaster, or a public health crisis. The United Nations has declared a “war” on single-use plastic. In Britain, Theresa May has called it a “scourge”, and committed the government to a 25-year plan that would phase out disposable packaging by 2042. India claimed it would do the same, but by 2022.<sup>1</sup>
</p>`;

var blogcite111 = `
<p class="cite"><a target="_blank" href="https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/">https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/</a></p>
`

  var blogpost122 =   `
  <p class="firstparagraph">Eco-friendly urban commuting options are a gift, and should always be hailed.  
  </p>
  <p class="quote">On an earnings before interest, taxes, depreciation and amortization basis (EBIDTA), Uber’s losses were $527 million, up about 21 percent quarter over quarter. And as Uber prepares to go public, the company has started presenting the income statements with stock-based compensation.

  Ten years from now, Uber CEO Dara Khosrowshahi envisions its core ride-hailing business accounting for less than 50 percent of Uber’s overall business, Khosrowshahi told me at TechCrunch Disrupt SF 2018. That means Uber expects businesses like Eats, scooters, bikes and freight to contribute to be more of Uber’s business, which requires Uber to invest heavily in those businesses.<sup>1</sup>
  </p>`;
 
  var blogcite122 = `
  <p class="cite">1. <a target="_blank" href="https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/">https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/</a></p>
  <p class="cite">2<a target="_blank" href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
  `;
 var blogpost111 =   `
 <p class="quote">Turns out that Google\'s new Night Sight mode for Pixels, formally released just earlier today, has some non-night utility. In a bit of a twist, you can use it in the daytime as well for "denoising and resolution improvements" inherited from another Google Camera feature: Super Res Zoom.<sup>1</sup> 
 </p>`;

 var blogcite111 = `
 <p class="cite"><a target="_blank" href="https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/">https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/</a></p>
 `
  var     blogpost100 = ` 
  <p class="firstparagraph">Plastics and micro-plastic waste just awaits a tech-informed solution!
   </p>
  <p class="quote">At the highest levels of government the plastic panic can resemble a scrambled response to a natural disaster, or a public health crisis. The United Nations has declared a “war” on single-use plastic. In Britain, Theresa May has called it a “scourge”, and committed the government to a 25-year plan that would phase out disposable packaging by 2042. India claimed it would do the same, but by 2022.<sup>1</sup></p>
 `
    ;
    var      blogcite100 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://www.theguardian.com/environment/2018/nov/13/the-plastic-backlash-whats-behind-our-sudden-rage-and-will-it-make-a-difference
    "   target="_blank">https://www.theguardian.com/environment/2018/nov/13/the-plastic-backlash-whats-behind-our-sudden-rage-and-will-it-make-a-difference
      </a> 
      </p> 
     `;
 
  var blogpost099 =   `
  <p class="firstparagraph">Thank you Cisco, and Thank you AWS.  Amazon Web Services have now come into their light with new computing power from above --and for us citizens, at fractions of a cent! 

  </p>
  <p class="quote">
  Amazon Web Services and Cisco announced on Thursday that they're teaming up on a product that will allow developers to build applications in the cloud or in traditional data centers while making it easier for them to move between the two.<br /><br />

  It's Cisco's latest effort to create hybrid options for customers that want to push work to the cloud but still need to run some projects on their own hardware for privacy and regulatory reasons. Cisco previously announced partnerships with the other two major cloud providers, Google and Microsoft, but Amazon is by far the leader in the cloud infrastructure market.<sup>1</sup>
  </p>`;
 
  var blogcite099 = `
  <p class="cite">1. <a target="_blank" href="https://www.cnbc.com/2018/11/07/aws-and-cisco-partner-on-container-technology-for-hybrid-cloud.html">https://www.cnbc.com/2018/11/07/aws-and-cisco-partner-on-container-technology-for-hybrid-cloud.html</a></p>
  <p class="cite">2<a target="_blank" href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
  `;
 var blogpost088 =   `
 <p class="quote">In April 2018, a group at MIT, USA, showed that it is possible to generate a form of superconductivity in a system of two layers of graphene under very specific conditions: To do this, the two hexagonal nets must be twisted against each other by exactly the magic angle of 1.1°. Under this condition a flat band forms in the electronic structure. The preparation of samples from two layers of graphene with such an exactly adjusted twist is complex, and not suitable for mass production. Nevertheless, the study has attracted a lot of attention among experts.<sup>1</sup>
 </p>`;

 var blogcite088 = `
 <p class="cite"><a target="_blank" href="https://www.sciencedaily.com/releases/2018/11/181109150124.htm"> https://www.sciencedaily.com/releases/2018/11/181109150124.htm</a></p>
 `
  var     blogpost077 = ` 
  <p class="firstparagraph">Naming conventions make for a linguistic phenomenon in a world whose rapid change far outpaces accurate transfer of meaning into  language. And, because we don't allow our terminology to redefine itself, an increasingly inaccurate language may come to incongruently describe current-day logic, and basically reality...
   </p>
  <p class="quote"> But Musk may be right in general about the futility of job titles, which serve largely as a distraction for knowledge workers in today’s economy.
  We’re all project managers now.<br /><br />
  
  According to Roger Martin, a prominent management and strategy expert, and former dean of the Rotman School of Management at the University of Toronto, we may be structuring jobs all wrong. By extension, our addiction to titles as signs of status could be just another example of how humans—whether as individuals or in groups—operate in patterns based on habit, without responding to the world as it really is.<sup>1</sup></p>
 `
    ;
    var      blogcite077 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://qz.com/work/1443954/tesla-ceo-elon-musk-is-raising-an-important-question-about-job-titles/
    "   target="_blank">https://qz.com/work/1443954/tesla-ceo-elon-musk-is-raising-an-important-question-about-job-titles/ 
      </a> 
      </a> 
     `;

  var blogpost066 =   `
  <p class="quote">Tim Berners-Lee has launched a global campaign to save the web from the destructive effects of abuse and discrimination, political manipulation, and other threats that plague the online world.

  In a talk at the opening of the Web Summit in Lisbon on Monday, the inventor of the web called on governments, companies and individuals to back a new “Contract for the Web” that aims to protect people’s rights and freedoms on the internet.<sup>1</sup>
  </p>`;
 
  var blogcite066 = `
  <p class="cite"><a target="_blank" href="https://www.theguardian.com/technology/2018/nov/05/tim-berners-lee-launches-campaign-to-save-the-web-from-abuse"> https://www.theguardian.com/technology/2018/nov/05/tim-berners-lee-launches-campaign-to-save-the-web-from-abuse</a></p>
  `;
 var blogpost055 =   `
 <p class="quote">"What would guarantee a paradigm shift would be the ability to effortlessly bring disparate devices together," said Blake Kozak, principal analyst at IHS Markit. "A large proportion of consumer complaints stem from installation challenges to devices not being reliable, e.g. scenes not working, high latency even in local control and lack of control when scenes are performing but broken."

 5G, with its ability to handle more connected devices, could be an answer down the line. 
 
 But while 5G could provide some consistency across smart home networking standards, it's not a panacea due to a familiar problem: battery life. <sup>1</sup>
 </p>`;

 var blogcite055 = `
 <p class="cite"><a target="_blank" href="https://www.cnet.com/news/5g-and-the-promise-of-a-smart-home-makeover/"> https://www.cnet.com/news/5g-and-the-promise-of-a-smart-home-makeover/</a></p>
 `
  var     blogpost044 = ` 
  <p class="firstparagraph">Energy Consciousness around traditional <i>Proof of Work</i> blockchain technologies casts a negative light on Bitcoin Mining. Energy consumption from proof-of-work, energy-intensive blockchain mining parallels annual KiloWatt consumption as small countries like Denmark and Singapore.
   </p>
  <p class="quote"> 
 
  Bitcoin is a power-hungry cryptocurrency that is increasingly used as an investment and payment system. Here we show that projected Bitcoin usage, should it follow the rate of adoption of other broadly adopted technologies, could alone produce enough CO2 emissions to push warming above 2 °C within less than three decades.<sup>1</sup>
   <p>
  <p class="quote">an article by a team of researchers from Hawaii in the journal Nature Climate Change last week did much the same kind of calculations as de Vries and Krause and found that bitcoin usage resulted in the equivalent of 69 million metric tonnes of CO2 in 2017. If bitcoin grows like other technologies, the authors said, it’d cough out enough greenhouse gas to warm the planet by 2 degrees celsius by the mid-2030s.<sup>2</sup>
  </p>`
    ;
    var      blogcite044 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://www.nature.com/articles/s41558-018-0321-8
    "   target="_blank">https://www.nature.com/articles/s41558-018-0321-8
      </a> 
    <p class="cite"> 2 <a target="_blank" href="https://www.wired.com/story/bitcoin-will-burn-planet-down-how-fast/
    "   target="_blank">https://www.wired.com/story/bitcoin-will-burn-planet-down-how-fast/
      </a> 
     `;
     var     blogpost033 = ` 
     <p class="firstparagraph"> 
      </p>
      <p class="quote">The invention provides for systems and devices for hardened remote storage of private cryptography keys used for authentication. The storage device is tamper-responsive, such that receipt of a signal that indicates physical or non-physical tampering with the storage device or its components results in deletion of the private cryptography key(s) from the memory. The storage device is configured to be separate and remote from a computing node that executes an authentication routine requiring the private cryptography key(s) and, as such, the private cryptography key(s) are accessible to, but not communicated to, the computing node only when the computing node is executing the authentication routine.</p><sup>1</sup> 
      <p >
   
      </p>`
       ;
       var      blogcite033 = `  <p class="cite"> 1 <a target="_blank" href="https://u.today/bank-of-america-awarded-new-patent-for-storing-private-keys"   target="_blank">https://u.today/bank-of-america-awarded-new-patent-for-storing-private-keys</a> </p>
       
       <p class="cite">2 <a target="_blank" href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&p=1&f=G&l=50&d=PTXT&S1=10,116,633.PN.&OS=pn/10,116,633&RS=PN/10,116,633"   target="_blank">http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&p=1&f=G&l=50&d=PTXT&S1=10,116,633.PN.&OS=pn/10,116,633&RS=PN/10,116,633</a> </p>
        `;
 
  var     blogpost022 = ` 
  <p class="firstparagraph"> 
   </p>
  <p class="quote"> <p>
  `
    ;
    var      blogcite022 = ` 
    <p class="cite"> <a target="_blank" href=""   target="_blank">
      </a> </p>
     `;
     var     blogpost011 = ` 
     <p class="firstparagraph"> 
      </p>
      <p> </p>`
       ;
       var      blogcite011 = `  <p class="cite"> <a target="_blank" href=""   target="_blank"></a> </p>
        
        `;
  

      var url = [
       
      
        {
          id: '137',
            did: '11-30-18',
            date: 'November 30, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Quantum Data',
            title: 'Paradigm Breaker',
            post: blogpost137,
            blogcite: blogcite137
          },    
        {
        id: '136',
          did: '11-30-18',
          date: 'November 30, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'A.I.Now.',
          title: 'A Co-Bot Revolution ',
          post: blogpost136,
          blogcite: blogcite136
        },    
        {
          id: '135',
            did: '11-29-18',
            date: 'November 29, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Diversity and Equality in the Machine Learning Landscape',
            post: blogpost135,
            blogcite: blogcite135
          },  
        {
          id: '134',
            did: '11-28-18',
            date: 'November 28, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'The Great Bitcoin Bust of \'18, Part II:<br />The Costs of Deprecated Technology',
            post: blogpost134,
            blogcite: blogcite134
          },    
        {
        id: '133',
          did: '11-27-18',
          date: 'November 27, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow',
          title: 'The Great Bitcoin Bust of \'18, Part I:<br />The Earth-Killer Currency\'s Last Days',
          post: blogpost133,
          blogcite: blogcite133
        },    
        {
          id: '132',
            did: '11-26-18',
            date: 'November 26, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'Oops, They Did it Again',
            post: blogpost132,
            blogcite: blogcite132
          },  
        {
          id: '131',
            did: '11-24-18',
            date: 'November 24-25, 2018<br />Weekend ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: '5G Security Foundations for 21st Century Appliances',
            post: blogpost131,
            blogcite: blogcite131
        },  /*
        {
          id: '130',
            did: '11-23-18',
            date: 'November 23, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow',
            title: 'Oops, They Did it Again',
            post: blogpost130,
            blogcite: blogcite130
          },   */
        {
          id: '129',
            did: '11-22-18',
            date: 'November 22, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Healthy Livin\' Cells',
            post: blogpost129,
            blogcite: blogcite129
          },  
        {
          id: '128',
            did: '11-21-18',
            date: 'November 21, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Protecting Data',
            post: blogpost128,
            blogcite: blogcite128
          },  
    
        {
          id: '127',
            did: '11-20-18',
            date: 'November 20, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Tech\'s Mortal Dependence on Global Trade Calls for World Peace!',
            post: blogpost127,
            blogcite: blogcite127
          },  
        {
          id: '126',
            did: '11-19-18',
            date: 'November 19, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Facebook\'s Struggle with Regulation',
            post: blogpost126,
            blogcite: blogcite126
          },  
        {
          id: '125',
            did: '11-17-18',
            date: 'November 17-18, 2018<br />Weekend ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Tech Money\'s Deep Footprint',
            post: blogpost125,
            blogcite: blogcite125
          },  
        {
          id: '124',
            did: '11-16-18',
            date: 'November 16, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'A More Retrospective A.I.',
            post: blogpost124,
            blogcite: blogcite124
          },  
        {
          id: '123',
            did: '11-15-18',
            date: 'November 15, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Fast, Anonymized Money!',
            post: blogpost123,
            blogcite: blogcite123
          },  
          {
        id: '122',
          did: '11-14-18',
          date: 'November 14, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'Green Options',
          post: blogpost122,
          blogcite: blogcite122
        },  
          {
          id: '111',
            did: '11-13-18',
            date: 'November 13, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Picture Power',
            post: blogpost111,
            blogcite: blogcite111
          },  
          {
       id: '100',
        did: '11-12-18',
        date: 'November 12, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow',
        title: 'Plastic Hangover',
        post: blogpost100,
        blogcite: blogcite100
          },     
        {
        id: '099',
          did: '11-10-18',
          date: 'November 10-11, 2018<br />Weekend ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Thank You, AWS--for your Software Megatron',
          post: blogpost099,
          blogcite: blogcite099
        },  
          {
          id: '088',
            did: '11-09-18',
            date: 'November 9, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Graphene Dreams',
            post: blogpost088,
            blogcite: blogcite088
          },  
          {
       id: '077',
        did: '11-08-18',
        date: 'November 8, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow',
        title: 'What\'s in a Name',
        post: blogpost077,
        blogcite: blogcite077
          },        
        {
        id: '066',
          did: '11-07-18',
          date: 'November 7, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'The Uncharted Cloud Territory: A Magna Carta',
          post: blogpost066,
          blogcite: blogcite066
        },  
          {
          id: '055',
            did: '11-06-18',
            date: 'November 6, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'The 5G IoT SuperHighway',
            post: blogpost055,
            blogcite: blogcite055
          },  
          {
       id: '044',
        did: '11-05-18',
        date: 'November 5, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'Tesla at Work',
        post: blogpost044,
        blogcite: blogcite044
          },     
            {
        id: '033',
        did: '11-03-18',
        date: 'November 3-4, 2018<br />Weekend',
        author: 'by Thomas Maestas',
        cat3: 'Musing Blockchain',
        title: 'Now that\'s a Safe Keep!',
        post: blogpost033,
        blogcite: blogcite033
      },  
        {
        id: '022',
        did: '11-02-18',
        date: 'November 2, 2018 ',
        author: 'by Thomas Maestas',
        cat3: ' ',
        title: ' ',
        post: blogpost022,
        blogcite: blogcite022
      },         {
        id: '01',
        did: '11-01-18',
        date: 'November 1, 2018 ',
        author: 'by Thomas Maestas',
        cat3: ' ',
        title: ' ',
        post: blogpost011,
        blogcite: blogcite011
      } 

  
  ];
var i;
  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a target="_blank" href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-nov").innerHTML += cat;
  }

  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a target="_blank" href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-nov-mod").innerHTML += catMod;
  }
  console.log('blogger-nov');
  //console.log(angular.toJson(url)); 
}; // end bloggerNov()
bloggerNov();
// 'use strict';

var bloggerOct = function () {  

 
 
        var     blogpost22 = ` 
        <p class="firstparagraph">Cloud data is at once fast, seamless and powered by limitless computer processing power and partitions!
         </p>
        <p class="quote">
        Responding to a question around slowed capex growth, the Microsoft CEO explained the company’s intelligent cloud and intelligent edge ethos was being spread across every business line; from Azure, of course, to Dynamics 365, to gaming. It is a unified, long-term message, Nadella added. “For the first time, what you see across Microsoft is really one platform which spans all of these businesses and all of the margin structures that are there represented in it,” he said.<sup>1</sup><p>
        `
          ;
          var      blogcite22 = ` 
          <p class="cite"> 1 <a target="_blank" href="https://www.cloudcomputing-news.net/news/2018/oct/25/microsoft-cites-azure-and-cloud-strength-more-strong-financials-its-all-about-long-term-ethos/
          "   target="_blank">https://www.cloudcomputing-news.net/news/2018/oct/25/microsoft-cites-azure-and-cloud-strength-more-strong-financials-its-all-about-long-term-ethos/
            </a> 
           `;
           var     blogpost21 = ` 
           <p class="firstparagraph">Light matters alot more when its attributes power both quantum-based qubit calculations and the process itself making metamaterials they are based on!</p>
            </p>
            <p class="quote">Breakthroughs in the field of nanophotonics -- how light behaves on the nanometer scale -- have paved the way for the invention of "metamaterials," human-made materials that have enormous applications, from remote nanoscale sensing to energy harvesting and medical diagnostics. But their impact on daily life has been hindered by a complicated manufacturing process with large margins of error.
            <br /><br />
            "The process of designing metamaterials consists of carving nanoscale elements with a precise electromagnetic response," Dr. Mrejen says. "But because of the complexity of the physics involved, the design, fabrication and characterization processes of these elements require a huge amount of trial and error, dramatically limiting their applications."
            <br /><br />
            Deep Learning a key to precision manufacturing
            <br /><br />
            "Our new approach depends almost entirely on Deep Learning, a computer network inspired by the layered and hierarchical architecture of the human brain," Prof. Wolf explains. "It's one of the most advanced forms of machine learning, responsible for major advances in technology, including speech recognition, translation and image processing. We thought it would be the right approach for designing nanophotonic, metamaterial elements."<sup>1</sup></p>`
             ;
             var      blogcite21 = `  <p class="cite"> 1 <a target="_blank" href="https://www.sciencedaily.com/releases/2018/10/181023130502.htm"   target="_blank">https://www.sciencedaily.com/releases/2018/10/181023130502.htm/a> </p>
              
              `;
  var     blogpost20 = ` 
  <p class="firstparagraph">Material technologies too often remain the unsung hero for so much advancement in any field.
   </p>
  <p class="quote">The body material itself is what McLaren calls "titanium deposition carbon fiber," where a micron-thin layer of titanium is fused directly into the fiber's weave, becoming an integral part of the construction.<sup>1</sup></p>
  <img src="dist/img/mclaren.jpg" class="zoom" /><p>
  McLaren just reinvented the wing--erhum, by doing away with the spoiler wing? By algorithmically adjusting the centers of windflow pressure based on speed, other factors optimizes -- reinvents -- the wing:</p>
  <p class="quote">The entire body is made from lightweight carbon fiber, parts of which are actually flexible. On each end of the tail, active ailerons can actually bend, reducing turbulence and drag at higher speeds. According to McLaren, these ailerons "adjust to move the center of pressure and provide the required level of downforce precisely when it is needed most." It's airspace tech in an automotive application, and it alleviates the need for a silly rear wing.<sup>1</sup></p>
  <p>With a little more precision and reliability, what should stop them from inverting air-flow, and strap some wings and a turbine to that 1,000 horse-power engine!<p>
  `
    ;
    var      blogcite20 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://www.cnet.com/roadshow/news/mclaren-speedtail-official-debut/
    "   target="_blank">https://www.cnet.com/roadshow/news/mclaren-speedtail-official-debut/
      </a> 
     `;
     var     blogpost19 = ` 
     <p class="firstparagraph">Data privacy's new hero raises attention to one of the more pressing issue of technology in our lives:
      </p>
      <p class="quote">Apple’s chief executive, Tim Cook, called on Wednesday for a federal privacy law in the US to protect against voracious internet companies hoarding so much digital data that the businesses know citizens “better than they know themselves” – and then often sell the information on.
<br /><br />
      Cook warned in a keynote speech that personal data was being “weaponized” against the public and endorsed tough privacy laws for both Europe and the US. The iPhone and Mac computer giant has stood out in its explicit declarations that Apple prefers to protect its customers’ personal data.
      </p>
      <p>Importantly, Tim Cook addresses the most sensitive of data about ourselves, i.e. the nexus of volunteered and observed data: <i>inferred data</i>:
     <p class="quote">Broadly [personal data] can be split into three categories: Volunteered data is information we willingly part with in online surveys and social media profiles. Observed data is captured through the observation of actions and interactions of individuals (GPS data and telecoms metadata, for example). Inferred data is used to complete the picture by mining those first two categories.<sup>1</sup></p>`
       ;
       var      blogcite19 = `  <p class="cite"> 1 <a target="_blank" href="https://www.theguardian.com/technology/2018/oct/24/tim-cook-us-federal-privacy-law-weaponized-personal-data"   target="_blank">https://www.theguardian.com/technology/2018/oct/24/tim-cook-us-federal-privacy-law-weaponized-personal-data</a> </p>
       
       <p class="cite"> 2 <a target="_blank" href="https://medium.com/s/new-world-crime/how-much-are-you-worth-in-the-online-data-economy-5ae2dd236135"   target="_blank">
       https://medium.com/s/new-world-crime/how-much-are-you-worth-in-the-online-data-economy-5ae2dd236135</a> </p>
        `;
  var     blogpost18 = `       
  <p class="firstparagraph">Bigger, Faster Image Rendering--especially when data points are tied to the pixels of a page, but especially still pictures should be the browsers' Task #1. Instead, load-times too often fall victim to the graphics ... but the browser world is now willing to work together for  action:
   </p>
  <p class="quote">Google revealed WebP eight years ago and since then has built it into its Chrome web browser, Android phone software and many of its online properties in an effort to put websites on a diet and cut network data usage. But Google had trouble encouraging rival browser makers to embrace it.
  <br /><br />
  "Mozilla is moving forward with implementing support for WebP," the nonprofit organization said. WebP will work in versions of Firefox based on its Gecko browser engine, Firefox for personal computers and Android but not for iOS. Mozilla plans to add support in the first half of 2019.

Committing to a new image format on the web is a big deal. In addition to technical challenges and new security risks, embracing a new image format means embracing it for years and years, because removing support at some point in the future will break websites that rely on it.
<br /><br />
It's one of the central conundrums of the web. Browser makers and website developers want to advance the technology, but they can't remove older aspects of the foundation as readily as Google can with Android or Apple with its rival iOS software. Websites have a long shelf life.<sup>1</sup></p>`
    ;
    var      blogcite18 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://www.cnet.com/news/firefox-to-support-googles-webp-image-format-for-a-faster-web/
    "   target="_blank">https://www.cnet.com/news/firefox-to-support-googles-webp-image-format-for-a-faster-web/
      </a> 
     `;
     var     blogpost17 = ` 
     <p class="firstparagraph">Bootstrapping analytic models in any science requires a long, steady climb upon the <i>Shoulders of Giants</i>, years and decades' past research gains--especially  Classification and Regression Trees . 
      </p>
     <p class="quote">When approaching any type of Machine Learning (ML) problem there are many different algorithms to choose from. In machine learning, there’s something called the “No Free Lunch” theorem which basically states that no one ML algorithm is best for all problems. The performance of different ML algorithms strongly depends on the size and structure of your data.<sup>1</sup></p>`
       ;
       var      blogcite17 = ` 
       <p class="cite"> 1 <a target="_blank" href="https://towardsdatascience.com/selecting-the-best-machine-learning-algorithm-for-your-regression-problem-20c330bad4ef
       "   target="_blank">
       https://towardsdatascience.com/selecting-the-best-machine-learning-algorithm-for-your-regression-problem-20c330bad4ef
         </a> 
        `;
  var     blogpost16 = ` 
  <p class="firstparagraph">Apple V. Bloomberg. Bloomberg hit first. Much controversy now surrounds the topic of my October 10th post--that Bloomberg claiming that Apple was aware of potential chip embeds from foreign manufacturers. Whose news can one believe anymore? 
   </p>
  <p class="quote"> Apple Inc Chief Executive Tim Cook on Friday told an online news website that Bloomberg should retract a story that claimed Apple’s internal computer systems had been infiltrated by malicious computer chips inserted by Chinese intelligence agents. <br /><br />
  “There is no truth in their story about Apple,” Cook told BuzzFeed News in an interview with the online publication. “They need to do that right thing and retract it.”<sup>2</sup></p>`
    ;
    var      blogcite16 = ` 
    <p class="cite"> 1 <a target="_blank" href=" https://www.reuters.com/article/us-apple-bloomberg/apple-ceo-urges-bloomberg-to-retract-spy-chip-story-idUSKCN1MT2Z8
    "   target="_blank">
    https://www.reuters.com/article/us-apple-bloomberg/apple-ceo-urges-bloomberg-to-retract-spy-chip-story-idUSKCN1MT2Z8
    
    
      </a> 
     `;
  var     blogpost15 = ` 
  <p>
  Mathematically, reading time   necessarily divides itself up into small pieces now that everyone is a click away from anything readable, every novel written, at a moment's download, without or without easy phone and tablet reading. But given that choice, the trend toward fiction is not without good reason ... </p>
  <p class="quote">
  Modern day reading habits continue to evolve in a digital age. Statistics vary on exactly how many people are reading novels this decade compared to decades past. There is a definite trend for general readers to buy more fiction than nonfiction books—and to get facts, news and crystallized knowledge from the internet. In 2012, only four of the top twenty books were nonfiction titles.<br /><br />

"People are interested in escape," says Carol Fitzgerald of the Book Report Network. "In a number of pages, the story will open, evolve and close, and a lot of what's going on in the world today is not like that. You've got this encapsulated escape that you can enjoy."<sup>2</sup></p>`
    ;
    var      blogcite15 = ` 
    <p class="cite"> 1 <a target="_blank" href="https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
    "   target="_blank">
    https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
    
    
      </a>
      </p>  
  <p class="cite"> 2 <a target="_blank" href="https://www.psychologytoday.com/us/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function
"   target="_blank">
https://www.psychologytoday.com/us/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function

https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
  </a>
  </p>   

     `;
  var     blogpost14 = ` 
  <p class="firstparagraph">Technology provides the resources for a better life all around ... </p>
    <p class="quote"> 
    The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.<br /><br />
    Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.<sup>1</sup></p>
    <p>Anaconda, the programming package bundle features math software with Spyder applications, yet the Jupyter notebook is already revolutionizing academic publications...`
    ;
    var      blogcite14 = ` 
  <p class="cite"> 1 <a target="_blank" href="
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news"   target="_blank">
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news
  </a>
  </p>   
     `;
  var     blogpost13 = ` 
  <p class="firstparagraph">The College Term-Paper, the perennial object of dread or elation, of tedium or excitement. Yet, more and more, the needs for communication require the inclusion of programming, analytic language. Paragraphs of eloquently written code with paragraphs of synopsis, from one logical statement to the next, laying out the proofs with each paragraph. Best yet, it is innately online and presentable, and employs the powerful languages like Python and R. But how to communicate these specialized papers to a wide audience?</p>
    <p class="quote"> 
    The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.<br /><br />
    Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.<sup>1</sup></p>
    <p>Anaconda, the programming package bundle features math software with Spyder applications, yet the Jupyter notebook is already revolutionizing academic publications...`
    ;
    var      blogcite13 = ` 
  <p class="cite"> 1 <a target="_blank" href="
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news"   target="_blank">
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news
  </a>
  </p>  
  <p class="cite"> 2 <a target="_blank" href="https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/"   target="_blank">https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/
  </a>
  </p>  
     `;
 var  blogpost12 = `
  <p class="firstparagraph">Modeling the molecular behavior of organic chemistry, biology has become the specialty of Quantum computing, with its superposed third-state that supports short bursts of ultra-fast algorithm computations. Quantum computing has revolutionized biology, so why not psychology?  ..at least at the molecular level: </p><p class="quote"> According to Zheng Joyce Wang and others who try to model our decision-making processes mathematically, the equations and axioms that most closely match human behavior may be ones that are rooted in quantum physics.

  "We have accumulated so many paradoxical findings in the field of cognition, and especially in decision-making," said Wang, who is an associate professor of communication and director of the Communication and Psychophysiology Lab at The Ohio State University.<br /><br />
  
  "Whenever something comes up that isn't consistent with classical theories, we often label it as 'irrational.' But from the perspective of quantum cognition, some findings aren't irrational anymore. They're consistent with quantum theory—and with how people really behave."
  
  
  <sup>1</sup></p>
  <p>So much for the binary way of thinking--after all, isn't life more colorful than black-and-white reasoning?
  </p>
 `;
 var   blogcite12 = `  
  <p class="cite">1 <a target="_blank" href="https://phys.org/news/2015-09-youre-irrational-quantum-probabilistic-human.html"   target="_blank">https://phys.org/news/2015-09-youre-irrational-quantum-probabilistic-human.html
  </a>
  </p>
  <p class="cite">PDFs <br /> <a target="_blank" href="https://www.cell.com/trends/cognitive-sciences/fulltext/S1364-6613(15)00099-6"   target="_blank">https://www.cell.com/trends/cognitive-sciences/fulltext/S1364-6613(15)00099-6
  </a> 
  </p>
  <p class="cite">PDFs <br /> <a target="_blank" href="http://journals.sagepub.com/doi/abs/10.1177/0963721414568663"   target="_blank">http://journals.sagepub.com/doi/abs/10.1177/0963721414568663
  </a> 
  </p>
     `;
  
     var    blogpost11 = `
  <p class="firstparagraph">Quantum <i>'Flat-Earther's</i> have one less argument ...</p><p class="quote">
  

Straightaway, they saw the droplets exhibit surprisingly quantum-like behaviors — only traversing certain “quantized” orbits around the center of their liquid baths, for instance, and sometimes randomly jumping between orbits, as electrons do in atoms. There and in bouncing-droplet labs that soon sprang up at the Massachusetts Institute of Technology and elsewhere, droplets were seen to tunnel through barriers and perform other acts previously thought to be uniquely quantum. In reproducing quantum phenomena without any of the mystery, the bouncing-droplet experiments rekindled in some physicists de Broglie’s old dream of a reality at the quantum scale that consists of pilot waves and particles instead of probability waves and conundrums.<br /><br />

But a series of bouncing-droplet findings since 2015 has crushed this dream. The results indicate that Couder’s most striking demonstration of quantum-like phenomena, back in 2006 — “the experiment that got me hooked on this problem,” the fluid dynamicist Paul Milewski said — was in error. Repeat runs of the experiment, called the “double-slit experiment,” have contradicted Couder’s initial results and revealed the double-slit experiment to be the breaking point of both the bouncing-droplet analogy and de Broglie’s pilot-wave vision of quantum mechanics.
  <sup>1</sup></p>
 `;
 var    blogcite11 = ` 
  <p class="cite"> <a target="_blank" href="https://www.quantamagazine.org/famous-experiment-dooms-pilot-wave-alternative-to-quantum-weirdness-20181011/"   target="_blank">https://www.quantamagazine.org/famous-experiment-dooms-pilot-wave-alternative-to-quantum-weirdness-20181011/
  </a>
  </p>
     `;
  
 
 var  blogpost10 = `
<p class="firstparagraph">Climate-change scientist-activists earn their prestige with every research study and every letter written. With less fanfare, economists also earn their due prestige for working toward a sustainable prosperity.     </p>
<p class="quote"> This year’s [Nobel Prize] Laureates William Nordhaus and Paul Romer have significantly broadened the scope of economic analysis by constructing  models that explain how the market economy interacts with nature and knowledge. <br /><br />
 Romer demonstrates how knowledge can function as a driver of long-term economic 
growth. When annual economic growth of a few per cent accumulates over decades, it transforms people’s lives. 
Previous macroeconomic research had emphasised technological innovation as the primary driver of economic 
growth, but had not modelled how economic decisions and market conditions determine the creation of new 
technologies. Paul Romer solved this problem by demonstrating how economic forces govern the willingness of 
firms to produce new ideas and innovations. 
<sup>1</sup></p>
<p>The economist in turn practices what he preaches by using only open-source software--to the aim of democratizing research itself:</p>
<p class="quote">Romer believes in making research transparent. He argues that openness and clarity about methodology is important for scientific research to gain trust. As Romer explained in an April 2018 blog post, in an effort to make his own work transparent, he tried to use Mathematica to share one of his studies in a way that anyone could explore every detail of his data and methods. It didn’t work. He says that Mathematica’s owner, Wolfram Research, made it too difficult to share his work in a way that didn’t require other people to use the proprietary software, too. Readers also could not see all of the code he used for his equations.
<br /><br />
Instead of using Mathematica, Romer discovered that he could use a Jupyter notebook for sharing his research. Jupyter notebooks are web applications that allow programmers and researchers to share documents that include code, charts, equations, and data. Jupyter notebooks allow for code written in dozens of programming languages. For his research, Romer used Python—the most popular language for data science and statistics.<sup>2</sup>
</p>
<p>The Bottom line is that yesterday's ink and paper is today's software and hardware--essential tools for success, the earlier the better. So, because historical suppression usually begins financially, equal access across social and economic lines.  So, the economic incentive to outfit every last citizen with free wifi and open-source technology. Already, the best in humanity--the Nobel winners--know the public incentive to harness the power of a widespread tech education. Because when the many and not the few create and advance technology, the economy blooms with real productivity.</p>
  `;
  var  blogcite10= ` 
<p class="cite"> 1 <a target="_blank" href="https://www.nobelprize.org/uploads/2018/10/press-economicsciences2018.pdf"   target="_blank">https://www.nobelprize.org/uploads/2018/10/press-economicsciences2018.pdf 
</a>
</p>  
<p class="cite"> 2 <a target="_blank" href="https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/"   target="_blank">https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/
</a>
</p>  
   `; 

   var  blogpost9 = `
  <p class="firstparagraph">Hackernoon featured Jack Dossman's take on the banality of blockchain technology outside of special-use cases. Dossman opines, "Unless your business needs all of the benefits that a blockchain provides, you will be no better off storing your data on one." </p>
  <p class="quote">By definition, there is no central authority governing a public blockchain, so who makes decisions in this distributed company?

  What about dispute resolution? Once data has been uploaded and verified, it’s not going anywhere. Got charged for a ride you didn’t take? Driver did something really bad that you need to report? Well too bad because nobody is listening. <sup>1</sup></p>
 <p>Now, this article grossly underestimates the range of designs from  private blockchains to consortium blockchains, but the point about hype is well-made!</p>
    `;
    var  blogcite9= ` 
  <p class="cite"> 1 <a target="_blank" href="https://hackernoon.com/10-things-blockchain-isnt-dcb7966d22e5"   target="_blank">https://hackernoon.com/10-things-blockchain-isnt-dcb7966d22e5 
  </a>
  </p>  
     `; 
     var   blogpost8 = `
  <p class="firstparagraph">Intellectual espionage is about as newsworthy as any other misguided nationalist practice across the globe from nearly every nation--in some form. Maybe its the ubiquity of mimicry that events are quickly forgotten. An <i>other-world problem</i>. Yet, this is not merely a regionally-based nuisance. From time immemorial, headlines have raised the prospect of academic, university-based intellectual theft. Related events raised eyebrows and then quickly forgotten. <p>This year, Chinese-made servers discovered with a microscopic, embedded chip may have been known by Apple three years ago. Last week, Bloombergs reported, </p>
  <p class="quote"> Beijing's military intelligence pressured or bribed a Chinese manufacturing subcontractor of US-based Super Micro to include a small secret spy chip in the server maker's motherboards. The supposedly grain-of-rice-sized chips were inserted to give China a backdoor into the computers, allowing data to be silently altered or stolen from afar by the Chinese government. <br />
  <br />Of the 30 or so organizations that apparently received these bugged machines, ranging from a major bank to US government contractors, were Apple and Amazon, according to Bloomberg's sources. <sup>1</sup></p>
  <p>Mischief in all forms pervades nearly every nations' agenda  ... Again, apparently, who remembers a week afterward?</p> 
    `;
    var   blogcite8= ` 
  <p class="cite"> 1 <a target="_blank" href="https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/"   target="_blank">https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/ 
  </a>
  </p> <p class="cite"> 2 <a target="_blank" href="https://www.cnbc.com/2018/10/04/us-warns-companies-about-security-risk-to-managed-service-providers.html"   target="_blank">https://www.cnbc.com/2018/10/04/us-warns-companies-about-security-risk-to-managed-service-providers.html
  </a>
  </p>  <p class="cite">3
  <a target="_blank" href="https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race
  </a>
  </p>
     `; 
     var    blogpost7 = `
  <p class="firstparagraph"> The latest news of microscopic foreign chips embedded in Micro Systems chips for hard drives that find their way into Amazon, Pentagon, and other servers in between now raise a new awareness</p>
  <p class="quote">
 The spy chip could have been placed electrically between the baseboard management controller (BMC) and its SPI flash or serial EEPROM storage containing the BMC's firmware. Thus, when the BMC fetched and executed its code from this memory, the spy chip would intercept the signals and modify the bitstream to inject malicious code into the BMC processor, allowing its masters to control the BMC.
  <sup>1</sup></p> 
  <p> </p>
  <p class="quote">The spy chip could have been placed electrically between the baseboard management controller (BMC) and its SPI flash or serial EEPROM storage containing the BMC's firmware. Thus, when the BMC fetched and executed its code from this memory, the spy chip would intercept the signals and modify the bitstream to inject malicious code into the BMC processor, allowing its masters to control the BMC.<sup>3</sup></p>
  <p>In sum, the <i>the times, they are - a - changing</i> and that means, like any test-taker knows, cheatsheets do more damage if they fall irrelevent, even slightly deprecated.  </p> 
    `;
    var   blogcite7= `
  <p class="cite"> 1 <a target="_blank" href="https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/"   target="_blank">https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/ 
  </a>
  </p> 
  <p class="cite">2
  <a target="_blank" href="https://www.forbes.com/sites/kalevleetaru/2018/10/04/the-chinese-spy-chip-story-is-a-reminder-of-how-insecure-our-digital-world-really-is/#1736f0f07e13"   target="_blank">https://www.forbes.com/sites/kalevleetaru/2018/10/04/the-chinese-spy-chip-story-is-a-reminder-of-how-insecure-our-digital-world-really-is/#1736f0f07e13
  </a>
  </p> 
  <p class="cite">3
  <a target="_blank" href="https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race
  </a>
  </p>
     `; 
     var   blogpost6 = `
  <p class="firstparagraph">Last month's <i>Techcrunch Disrupt!</i> revealed if only a few imminent blockchain trends to pay attention to: The crypto-currency and investment is definitely tamped down, and now the field of play is no longer between competing platforms, but rather the DAPPS are now the players on the established platforms--starting with Ethereum crypto-contracts, browser-based platforms like Mist and other players. <i>The trust and direction is no longer in dispute--now, the question asks: Who can leverage ease-of-use and accessibility and  utility via the web browser ... After all, isn't the point of tech advancents, to bring about new possibilities, and  the time to explore them by also providing efficient living! </p>
   
    `;
    var   blogcite6= `  
     `; 
     var   blogpost5 = `
  <p class="firstparagraph">Trust, trust layers, and institutions of Trustworthiness: The quaint, <i>Leave-it-to-Beaver terms of a by-gone world</i> haven't weakened but are transformed: What was once a rigid hierarchy of trust proclamations from above are now flexible, continually-earned, community-based trust networks. Slowly but surely,<i>Community-centered networks made of social capital overtake institutional, bureaucratic capital and credentialism. </i></p><p class="quote">This is the whole issue. This is everything that we're talking about. And how do you trust something that can pull these signals off of you? <br /><br />If a system is asymmetric—if you know more about me than I know about myself, we usually have a name for that in law. So, for example, when you deal with a lawyer, you hand over your very personal details to a lawyer so they can help you. But then they have this knowledge of the law and they know about your vulnerable information, so they could exploit you with that. Imagine a lawyer who took all of that personal information and sold it to somebody else. But they're governed by a different relationship, which is the fiduciary relationship. They can lose their license if they don't actually serve your interest. And similarly a doctor or a psychotherapist.
  <sup>1</sup></p>
  <p>Whether by coincidence or innate features of 21st century technology, trust-based platforms innately reward sharing, trust-based distribution of power. Consider the difference between the democratically operated blockchain, i.e. distributed ledgers without middle-persons, versus hierarchical, siloed centers of information. As usual, the problems that technology present in one form are symmetrically resolved by a technology of another form.`;
  var  blogcite5 = `
  <p class="cite">1 <a target="_blank" href="https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/"   target="_blank">
  https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/</a>
  </p> 
  <p class="cite">2<a target="_blank" href="https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/"   target="_blank">https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/
  </a>
  </p>
     `;
     var  blogpost4 = `<p class="quote"><i>But everywhere you turn on the internet there's basically a supercomputer pointing at your brain, playing chess against your mind, and it's going to win a lot more often than not.</i><sup>1</sup></p>
  <p class="firstparagraph">First off, what is Humane Technology? Besides a philosophy that dissipates, a practical philosophy only gains focus--far more valuable than depth or breadth. Much more than a real Des Cartes meets an iPhone, whose focus is on "realigning technology with a clear-eyed model of human nature".</p>
  <p class="quote">Because we have built our society, certainly liberal democracy with elections and the free market and so forth, on philosophical ideas from the 18th century which are simply incompatible not just with the scientific findings of the 21st century but above all with the technology we now have at our disposal.<br /><br />
   Our society is built on the ideas that the voter knows best, that the customer is always right, that ultimate authority is, as Tristan said, is with the feelings of human beings and this assumes that human feelings and human choices are these sacred arena which cannot be hacked, which cannot be manipulated. Ultimately, my choices, my desires reflect my free will and nobody can access that or touch that. And this was never true. But we didn't pay a very high cost for believing in this myth in the 19th and 20th century because nobody had a technology to actually do it. Now, people—some people—corporations, governments are gaming the technology to hack human beings. Maybe the most important fact about living in the 21st century is that we are now hackable animals.<sup>2</sup></p> 
   <p>But this isn't some new thing. By adapting to the new touchstone, on a societal level, the technology bears no more threat than the novel television ad campaigns of the 1950's--Some viewers became brain-washed, but not all! So like Bebe Rexha teaches us: <i>No broken hearts in the club tonight, no tears in the club ... We only got one life so let's go hard until the day we die!"</i></p>
  `;
  var   blogcite4 = `
  <p class="cite">https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/ <a target="_blank" href="https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/ "   target="_blank">
  </a>
  </p> 
  <p class="cite">https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/<a target="_blank" href="https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/"   target="_blank">
  </a>
  </p>
  `;
  var  blogpost3 = `<p class="firstparagraph">
  There was a time for Seinfeldian Coffee in Cars, when the company makes for the ride.  Today, the ride makes for the company, albeit by real-time Skype and real-time info-tainment. So if you have an extra $60,000 laying around, here's the future--this one by BMW ...</p>
  <p class="quote">There's also a new reconfigurable digital gauge cluster that BMW calls Live Cockpit, and an impressively huge and crisp optional head-up display to relay even more information ... Being faced with all of those screens and all of those choices at once probably sounds daunting, but in my brief experience with iDrive 7, it all felt quite intuitive. The system smartly allows for the driver to use their preferred interface method, be that via touchscreen, steering wheel switchgear, cloud-based speech recognition or even gesture control. (A word about the latter: It's still overwhelmingly gimmicky. Twirling your finger in the air to turn up the stereo remains a crowd-pleasing novelty, but little more). <sup>1</sup></p>
  <p></p>`;
  var    blogcite3 = `  <p class="cite">1
  <a target="_blank" href="https://www.cnet.com/roadshow/reviews/2019-bmw-x5-preview/"   target="_blank">https://www.cnet.com/roadshow/reviews/2019-bmw-x5-preview/
  </a>
  </p>
  `;

  var   blogpost2 = `<p class="quote"><i>The wireless standard known as 4G has untethered us from our living rooms and offices, allowing us to navigate unfamiliar roads and streets using voice directions from Google Maps, stream movies on Netflix while commuting to work, and interview a prospective hire on FaceTime during a flight layover. The next iteration promises to be even more transformative, because it will support communication among objects, as well as people.  
  </i><sup>1 </sup></p>
  <p class="firstparagraph"> </p>
  <img src="dist/img/5g4g.jpg" class="zoom" />
  <p class="quote">
  First, providers need a final set of technology standards. The global body setting them, the 3rd Generation Partnership Project, released the first 5G specifications in June; the next set of standards is due in 2020. (The 3GPP, a collaboration between seven telecommunications organizations, also set standards for 3G and 4G LTE mobile systems.) 5G mobile tests also need special handsets, transmission hardware and software and a system design that doesn’t interfere with 4G and 3G networks. And governments need to set aside mobile spectrum space for 5G.</p>
    `;
    var   blogcite2 = `
  <p class="cite">  <a target="_blank" href="https://www.bloomberg.com/news/articles/2017-02-16/tomorrow-s-cellular-networks-will-generate-3-5-trillion-in-economic-output"   target="_blank">https://www.bloomberg.com/news/articles/2017-02-16/tomorrow-s-cellular-networks-will-generate-3-5-trillion-in-economic-output
  </a>
  </p>
    <p class="cite">  <a target="_blank" href="https://www.bloomberg.com/news/articles/2018-09-17/when-will-ultrafast-internet-come-to-your-phone-quicktake"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-17/when-will-ultrafast-internet-come-to-your-phone-quicktake
  </a>
  </p>
    `;

    var    blogpost1 = `<p class="quote"><i>It's the next (fifth) generation of cellular technology which promises to greatly enhance the speed, coverage and responsiveness of wireless networks. How fast are we talking about? Think 10 to 100 times speedier than your typical cellular connection, and even faster than anything you can get with a physical fiber-optic cable going into your house.  
  </i><sup>1 </sup></p>
  <p class="firstparagraph">5G builds anticipation for the imminent tech revolution, but who's paying attention? What's the point besides incomparable speed? It's not speed, which is a sequential, yesterday term; Zero latency means everything all at once, coming and going: <i>Latency is the primary element that really ushers in the new age, where online, internet connection escapes from home and office nodes into the very links in between!</i>S That seems inconvenient and fleeting but really, shouldn't the web follow us in action, rather than chain us down? Consider the world of instantanous request-responses ....</p>
  <p class="quote">
  Latency is the response time between when you click on a link or start streaming a video on your phone, sending the request up to the network, and when the network responds and gives you your website or starts playing your video. 
That lag time can last around 20 milliseconds with current networks. It doesn't seem like much, but with 5G, that latency gets reduced to 1 millisecond, or about the time it takes for a flash in a normal camera to finish.  
That responsiveness is critical for things like playing an intense video game in virtual reality or for a surgeon in New York to control a pair of robotic arms performing a procedure in San Francisco.</p><p>
Comcast yesterday and T-Mobile Tomorrow or not, the implications of a truly mobile internet couldn't be underestimated. What used to be a sensor is tomorrow's controller, and today's controllers become sensors, because source and target become irrelevant concepts when latency folds uni-directional wait-time into bi-directional concurrent communication. </p><p>Perhaps the central player in this revolution is the fast-developing internet-of-things infrastructure in full development--with a moving target ...</p>    `;
var   blogcite1 = `
  <p class="cite">  <a target="_blank" href="https://www.cnet.com/how-to/the-5g-revolution-is-coming-heres-everything-you-need-to-know/"   target="_blank">https://www.cnet.com/how-to/the-5g-revolution-is-coming-heres-everything-you-need-to-know/
  </a>
  </p>
    `;
 

      var url = [
        
      {
        id: '22',
        did: '10-25-18',
        date: 'October 25, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow!',
        title: 'Data that goes up must Stay Up',
        post: blogpost22,
        blogcite: blogcite22
      },  
      {
        id: '21',
        did: '10-24-18',
        date: 'October 24, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'Meta-Materials, Part II <br />One, Two, Three, Four--Nanophotonic Metamaterials and More',
        post: blogpost21,
        blogcite: blogcite21
      }, 
        {
          id: '20',
          did: '10-23-18',
          date: 'October 23, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'Meta-Materials, Part I <br />Material Science',
          post: blogpost20,
          blogcite: blogcite20
        },  
        {
          id: '19',
          did: '10-22-18',
          date: 'October 22, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'The Reverent Tim Cook:<br />A Modern American Data Privacy Hero',
          post: blogpost19,
          blogcite: blogcite19
        }, 
        {
          id: '18',
          did: '10-20-18',
          date: 'October 20-21, 2018<br />Weekend',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Image Data on a Diet',
          post: blogpost18,
          blogcite: blogcite18
        }, 
    {
      id: '17',
      did: '10-19-18',
      date: 'October 19, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Machine Learning, By Trial and Error',
      post: blogpost17,
      blogcite: blogcite17
    },  
    {
      id: '16',
      did: '10-18-18',
      date: 'October 18, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Apple  Gossip, and Digital Hearsay About Snooping',
      post: blogpost16,
      blogcite: blogcite16
    }, 
    {
      id: '15',
      did: '10-17-18',
      date: 'October 17, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Where\'s the Fiction Aisle?',
      post: blogpost15,
      blogcite: blogcite15
    }, 
    {
      id: '14',
      did: '10-16-18',
      date: 'October 16, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The Better World that Tech Brings',
      post: blogpost14,
      blogcite: blogcite14
    }, 
    {
      id: '13',
      did: '10-15-18',
      date: 'October 15, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Economic Prosperity, Democracy, and the Technology that Binds The Two',
      post: blogpost13,
      blogcite: blogcite13
    }, 
    {
      id: '12',
      did: '10-13-18',
      date: 'October 13-14, 2018<br /><small>Weekend</small>',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Probabilistic Reality (and Information), Part II<br />Quantum Molecular Psychology',
      post: blogpost12,
      blogcite: blogcite12
    }, 
    {
      id: '11',
      did: '10-12-18',
      date: 'October 12, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Probabilistic Reality (and Information), Part I<br /> Verifiably Determinated Once and For All',
      post: blogpost11,
      blogcite: blogcite11
    }, 
    {
      id: '10',
      did: '10-11-18',
      date: 'October 11, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Economic Prosperity, Democracy, and the Technology that Binds The Two',
      post: blogpost10,
      blogcite: blogcite10
    }, 
    {
      id: '9',
      did: '10-10-18',
      date: 'October 10, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Blockchain\'s Quiet Success',
      post: blogpost9,
      blogcite: blogcite9
    }, 
    {
      id: '8',
      did: '10-09-18',
      date: 'October 9, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Intellectual Espionage: <br />Part II: When Does Fair Play for All Warrant a Foul to One?',
      post: blogpost8,
      blogcite: blogcite8
    }, 
    {
      id: '7',
      did: '10-08-18',
      date: 'October 8, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Intellectual Espionage, Part I:<br />Small Chips',
      post: blogpost7,
      blogcite: blogcite7
    },
    {
      id: '6',
      did: '10-06-18',
      date: 'October 6-7<br />Weekend, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Humane Technology: Is there a Goal Post?<br />Part III: Resisting Compartmentalization',
      post: blogpost6,
      blogcite: blogcite6
    }, 
    {
      id: '5',
      did: '10-05-18',
      date: 'October 5, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Humane Technology: Is there a Goal Post?<br />Part II: Tech-based Social Capital',
      post: blogpost5,
      blogcite: blogcite5
    },
    {
      id: '4',
      did: '10-04-18',
      date: 'October 4, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Humane Technology: Is there a Goal Post?<br />Part I: Churches, Education, and Technologies',
      post: blogpost4,
      blogcite: blogcite4
    },
    {
      id: '3',
      did: '10-03-18',
      date: 'October 3, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast Cars and Faster Info',
      post: blogpost3,
      blogcite: blogcite3
    },
    {
      id: '2',
      did: '10-02-18',
      date: 'October 2, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast 5G: Part II<br />The How and When',
      post: blogpost2,
      blogcite: blogcite2
    },
    {
      id: '1',
      did: '10-01-18',
      date: 'October 1, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast 5G: Part I<br />The Why and What',
      post: blogpost1,
      blogcite: blogcite1
    } 


  
  ];

  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a target="_blank" href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-oct").innerHTML += cat;
  }

  var i;
  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a target="_blank" href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-oct-mod").innerHTML += catMod;
  }
  console.log('blogger-oct');
 //console.log(angular.toJson(url)); 
};
bloggerOct();


var bloggerOct = function () {  
 
  var blogpost123 =   `
  <p class="firstparagraph">
  </p>
  <p class="quote">  Although it may sound like a term to describe a poorly performing IT staff, zero-knowledge computing could represent an evolution in corporate data protection. The approach enables data to be processed while it remains encrypted, so that analytics can be run without exposing the information. JP Morgan Chase & Co. recently led a $10 million Series A funding round in data security and analytics startup Inpher Inc., which works in the area. In a conversation with CIO Journal's Sara Castellanos, Samik Chandarana, head of data analytics for the corporate and investment bank division, makes the case for the technology.
  <br /><br />
  Keeping client data safe. JPMorgan could use the ‘secret computing’ technology to analyze a customer’s proprietary data on their behalf, using artificial intelligence without sacrificing privacy, Mr. Chandarana said. “This gives us a technological solution to be able to act on a client’s private data … without them having to worry about the security constraints or giving up all their information to us,” he said.<sup>1</sup>
  </p>`;
  
  var blogcite123 = `
  <p class="cite">1<a href="https://blogs.wsj.com/cio/2018/11/13/jpmorgan-invests-in-startup-tech-that-analyzes-encrypted-data/?mod=djemCIO_h">https://blogs.wsj.com/cio/2018/11/13/jpmorgan-invests-in-startup-tech-that-analyzes-encrypted-data/?mod=djemCIO_h</a></p> 
  `;

var blogpost122 =   `
<p class="firstparagraph">Eco-friendly urban commuting options are a gift, and should always be hailed.  
</p>
<p class="quote">  Although it may sound like a term to describe a poorly performing IT staff, zero-knowledge computing could represent an evolution in corporate data protection. The approach enables data to be processed while it remains encrypted, so that analytics can be run without exposing the information. JP Morgan Chase & Co. recently led a $10 million Series A funding round in data security and analytics startup Inpher Inc., which works in the area. In a conversation with CIO Journal's Sara Castellanos, Samik Chandarana, head of data analytics for the corporate and investment bank division, makes the case for the technology.
<br /><br />
Keeping client data safe. JPMorgan could use the ‘secret computing’ technology to analyze a customer’s proprietary data on their behalf, using artificial intelligence without sacrificing privacy, Mr. Chandarana said. “This gives us a technological solution to be able to act on a client’s private data … without them having to worry about the security constraints or giving up all their information to us,” he said.<sup>1</sup>
</p>`;

var blogcite122 = `
<p class="cite">1<a href="https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/">https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/</a></p>
<p class="cite">2<a href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
`;
var blogpost111 =   `
<p class="quote">
<p class="quote">At the highest levels of government the plastic panic can resemble a scrambled response to a natural disaster, or a public health crisis. The United Nations has declared a “war” on single-use plastic. In Britain, Theresa May has called it a “scourge”, and committed the government to a 25-year plan that would phase out disposable packaging by 2042. India claimed it would do the same, but by 2022.<sup>1</sup>
</p>`;

var blogcite111 = `
<p class="cite"><a href="https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/">https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/</a></p>
`

  var blogpost122 =   `
  <p class="firstparagraph">Eco-friendly urban commuting options are a gift, and should always be hailed.  
  </p>
  <p class="quote">On an earnings before interest, taxes, depreciation and amortization basis (EBIDTA), Uber’s losses were $527 million, up about 21 percent quarter over quarter. And as Uber prepares to go public, the company has started presenting the income statements with stock-based compensation.

  Ten years from now, Uber CEO Dara Khosrowshahi envisions its core ride-hailing business accounting for less than 50 percent of Uber’s overall business, Khosrowshahi told me at TechCrunch Disrupt SF 2018. That means Uber expects businesses like Eats, scooters, bikes and freight to contribute to be more of Uber’s business, which requires Uber to invest heavily in those businesses.<sup>1</sup>
  </p>`;
 
  var blogcite122 = `
  <p class="cite">1<a href="https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/">https://techcrunch.com/2018/11/14/uber-q3-2018-continues-to-lose-money-as-it-works-to-scale-scooters-bikes-and-other-newer-businesses/</a></p>
  <p class="cite">2<a href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
  `;
 var blogpost111 =   `
 <p class="quote">Turns out that Google\'s new Night Sight mode for Pixels, formally released just earlier today, has some non-night utility. In a bit of a twist, you can use it in the daytime as well for "denoising and resolution improvements" inherited from another Google Camera feature: Super Res Zoom. 
 </p>`;

 var blogcite111 = `
 <p class="cite"><a href="https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/">https://www.androidpolice.com/2018/11/14/pixel-night-sight-also-works-daylight-reducing-noise-boosting-resolution/</a></p>
 `
  var     blogpost100 = ` 
  <p class="firstparagraph">Plastics and micro-plastic waste just awaits a tech-informed solution!
   </p>
  <p class="quote">At the highest levels of government the plastic panic can resemble a scrambled response to a natural disaster, or a public health crisis. The United Nations has declared a “war” on single-use plastic. In Britain, Theresa May has called it a “scourge”, and committed the government to a 25-year plan that would phase out disposable packaging by 2042. India claimed it would do the same, but by 2022.<sup>1</sup></p>
 `
    ;
    var      blogcite100 = ` 
    <p class="cite"> 1 <a href="https://www.theguardian.com/environment/2018/nov/13/the-plastic-backlash-whats-behind-our-sudden-rage-and-will-it-make-a-difference
    "   target="_blank">https://www.theguardian.com/environment/2018/nov/13/the-plastic-backlash-whats-behind-our-sudden-rage-and-will-it-make-a-difference
      </a> 
      </p> 
     `;
 
  var blogpost099 =   `
  <p class="firstparagraph">Thank you Cisco, and Thank you AWS.  Amazon Web Services have now come into their light with new computing power from above --and for us citizens, at fractions of a cent! 

  </p>
  <p class="quote">
  Amazon Web Services and Cisco announced on Thursday that they're teaming up on a product that will allow developers to build applications in the cloud or in traditional data centers while making it easier for them to move between the two.<br /><br />

  It's Cisco's latest effort to create hybrid options for customers that want to push work to the cloud but still need to run some projects on their own hardware for privacy and regulatory reasons. Cisco previously announced partnerships with the other two major cloud providers, Google and Microsoft, but Amazon is by far the leader in the cloud infrastructure market.<sup>1</sup>
  </p>`;
 
  var blogcite099 = `
  <p class="cite">1<a href="https://www.cnbc.com/2018/11/07/aws-and-cisco-partner-on-container-technology-for-hybrid-cloud.html">https://www.cnbc.com/2018/11/07/aws-and-cisco-partner-on-container-technology-for-hybrid-cloud.html</a></p>
  <p class="cite">2<a href="https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/"> https://www.zdnet.com/article/amazons-consumer-business-moves-from-oracle-to-aws-but-larry-ellisons-wont-stop-talking/</a></p>
  `;
 var blogpost088 =   `
 <p class="quote">In April 2018, a group at MIT, USA, showed that it is possible to generate a form of superconductivity in a system of two layers of graphene under very specific conditions: To do this, the two hexagonal nets must be twisted against each other by exactly the magic angle of 1.1°. Under this condition a flat band forms in the electronic structure. The preparation of samples from two layers of graphene with such an exactly adjusted twist is complex, and not suitable for mass production. Nevertheless, the study has attracted a lot of attention among experts.
 </p>`;

 var blogcite088 = `
 <p class="cite"><a href="https://www.sciencedaily.com/releases/2018/11/181109150124.htm"> https://www.sciencedaily.com/releases/2018/11/181109150124.htm</a></p>
 `
  var     blogpost077 = ` 
  <p class="firstparagraph">Naming conventions make for a linguistic phenomenon in a world whose rapid change far outpaces accurate transfer of meaning into  language. And, because we don't allow our terminology to redefine itself, an increasingly inaccurate language may come to incongruently describe current-day logic, and basically reality...
   </p>
  <p class="quote"> But Musk may be right in general about the futility of job titles, which serve largely as a distraction for knowledge workers in today’s economy.
  We’re all project managers now.<br /><br />
  
  According to Roger Martin, a prominent management and strategy expert, and former dean of the Rotman School of Management at the University of Toronto, we may be structuring jobs all wrong. By extension, our addiction to titles as signs of status could be just another example of how humans—whether as individuals or in groups—operate in patterns based on habit, without responding to the world as it really is.<sup>1</sup></p>
 `
    ;
    var      blogcite077 = ` 
    <p class="cite"> 1 <a href="https://qz.com/work/1443954/tesla-ceo-elon-musk-is-raising-an-important-question-about-job-titles/
    "   target="_blank">https://qz.com/work/1443954/tesla-ceo-elon-musk-is-raising-an-important-question-about-job-titles/ 
      </a> 
      </a> 
     `;

  var blogpost066 =   `
  <p class="quote">Tim Berners-Lee has launched a global campaign to save the web from the destructive effects of abuse and discrimination, political manipulation, and other threats that plague the online world.

  In a talk at the opening of the Web Summit in Lisbon on Monday, the inventor of the web called on governments, companies and individuals to back a new “Contract for the Web” that aims to protect people’s rights and freedoms on the internet.
  </p>`;
 
  var blogcite066 = `
  <p class="cite"><a href="https://www.theguardian.com/technology/2018/nov/05/tim-berners-lee-launches-campaign-to-save-the-web-from-abuse"> https://www.theguardian.com/technology/2018/nov/05/tim-berners-lee-launches-campaign-to-save-the-web-from-abuse</a></p>
  `;
 var blogpost055 =   `
 <p class="quote">"What would guarantee a paradigm shift would be the ability to effortlessly bring disparate devices together," said Blake Kozak, principal analyst at IHS Markit. "A large proportion of consumer complaints stem from installation challenges to devices not being reliable, e.g. scenes not working, high latency even in local control and lack of control when scenes are performing but broken."

 5G, with its ability to handle more connected devices, could be an answer down the line. 
 
 But while 5G could provide some consistency across smart home networking standards, it's not a panacea due to a familiar problem: battery life. 
 </p>`;

 var blogcite055 = `
 <p class="cite"><a href="https://www.cnet.com/news/5g-and-the-promise-of-a-smart-home-makeover/"> https://www.cnet.com/news/5g-and-the-promise-of-a-smart-home-makeover/</a></p>
 `
  var     blogpost044 = ` 
  <p class="firstparagraph">Energy Consciousness around traditional <i>Proof of Work</i> blockchain technologies casts a negative light on Bitcoin Mining. Energy consumption from proof-of-work, energy-intensive blockchain mining parallels annual KiloWatt consumption as small countries like Denmark and Singapore.
   </p>
  <p class="quote"> 
 
  Bitcoin is a power-hungry cryptocurrency that is increasingly used as an investment and payment system. Here we show that projected Bitcoin usage, should it follow the rate of adoption of other broadly adopted technologies, could alone produce enough CO2 emissions to push warming above 2 °C within less than three decades.<sup>1</sup>
   <p>
  <p class="quote">an article by a team of researchers from Hawaii in the journal Nature Climate Change last week did much the same kind of calculations as de Vries and Krause and found that bitcoin usage resulted in the equivalent of 69 million metric tonnes of CO2 in 2017. If bitcoin grows like other technologies, the authors said, it’d cough out enough greenhouse gas to warm the planet by 2 degrees celsius by the mid-2030s.<sup>2</sup>
  </p>`
    ;
    var      blogcite044 = ` 
    <p class="cite"> 1 <a href="https://www.nature.com/articles/s41558-018-0321-8
    "   target="_blank">https://www.nature.com/articles/s41558-018-0321-8
      </a> 
    <p class="cite"> 2 <a href="https://www.wired.com/story/bitcoin-will-burn-planet-down-how-fast/
    "   target="_blank">https://www.wired.com/story/bitcoin-will-burn-planet-down-how-fast/
      </a> 
     `;
     var     blogpost033 = ` 
     <p class="firstparagraph"> 
      </p>
      <p class="quote">The invention provides for systems and devices for hardened remote storage of private cryptography keys used for authentication. The storage device is tamper-responsive, such that receipt of a signal that indicates physical or non-physical tampering with the storage device or its components results in deletion of the private cryptography key(s) from the memory. The storage device is configured to be separate and remote from a computing node that executes an authentication routine requiring the private cryptography key(s) and, as such, the private cryptography key(s) are accessible to, but not communicated to, the computing node only when the computing node is executing the authentication routine.</p><sup>1</sup> 
      <p >
   
      </p>`
       ;
       var      blogcite033 = `  <p class="cite"> 1 <a href="https://u.today/bank-of-america-awarded-new-patent-for-storing-private-keys"   target="_blank">https://u.today/bank-of-america-awarded-new-patent-for-storing-private-keys</a> </p>
       
       <p class="cite">2 <a href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&p=1&f=G&l=50&d=PTXT&S1=10,116,633.PN.&OS=pn/10,116,633&RS=PN/10,116,633"   target="_blank">http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&p=1&f=G&l=50&d=PTXT&S1=10,116,633.PN.&OS=pn/10,116,633&RS=PN/10,116,633</a> </p>
        `;
 
  var     blogpost022 = ` 
  <p class="firstparagraph"> 
   </p>
  <p class="quote"> <p>
  `
    ;
    var      blogcite022 = ` 
    <p class="cite"> <a href=""   target="_blank">
      </a> </p>
     `;
     var     blogpost011 = ` 
     <p class="firstparagraph"> 
      </p>
      <p> </p>`
       ;
       var      blogcite011 = `  <p class="cite"> <a href=""   target="_blank"></a> </p>
        
        `;
 
        var     blogpost22 = ` 
        <p class="firstparagraph">Cloud data is at once fast, seamless and powered by limitless computer processing power and partitions!
         </p>
        <p class="quote">
        Responding to a question around slowed capex growth, the Microsoft CEO explained the company’s intelligent cloud and intelligent edge ethos was being spread across every business line; from Azure, of course, to Dynamics 365, to gaming. It is a unified, long-term message, Nadella added. “For the first time, what you see across Microsoft is really one platform which spans all of these businesses and all of the margin structures that are there represented in it,” he said.<sup>1</sup><p>
        `
          ;
          var      blogcite22 = ` 
          <p class="cite"> 1 <a href="https://www.cloudcomputing-news.net/news/2018/oct/25/microsoft-cites-azure-and-cloud-strength-more-strong-financials-its-all-about-long-term-ethos/
          "   target="_blank">https://www.cloudcomputing-news.net/news/2018/oct/25/microsoft-cites-azure-and-cloud-strength-more-strong-financials-its-all-about-long-term-ethos/
            </a> 
           `;
           var     blogpost21 = ` 
           <p class="firstparagraph">Light matters alot more when its attributes power both quantum-based qubit calculations and the process itself making metamaterials they are based on!</p>
            </p>
            <p class="quote">Breakthroughs in the field of nanophotonics -- how light behaves on the nanometer scale -- have paved the way for the invention of "metamaterials," human-made materials that have enormous applications, from remote nanoscale sensing to energy harvesting and medical diagnostics. But their impact on daily life has been hindered by a complicated manufacturing process with large margins of error.
            <br /><br />
            "The process of designing metamaterials consists of carving nanoscale elements with a precise electromagnetic response," Dr. Mrejen says. "But because of the complexity of the physics involved, the design, fabrication and characterization processes of these elements require a huge amount of trial and error, dramatically limiting their applications."
            <br /><br />
            Deep Learning a key to precision manufacturing
            <br /><br />
            "Our new approach depends almost entirely on Deep Learning, a computer network inspired by the layered and hierarchical architecture of the human brain," Prof. Wolf explains. "It's one of the most advanced forms of machine learning, responsible for major advances in technology, including speech recognition, translation and image processing. We thought it would be the right approach for designing nanophotonic, metamaterial elements."<sup>1</sup></p>`
             ;
             var      blogcite21 = `  <p class="cite"> 1 <a href="https://www.sciencedaily.com/releases/2018/10/181023130502.htm"   target="_blank">https://www.sciencedaily.com/releases/2018/10/181023130502.htm/a> </p>
              
              `;
  var     blogpost20 = ` 
  <p class="firstparagraph">Material technologies too often remain the unsung hero for so much advancement in any field.
   </p>
  <p class="quote">The body material itself is what McLaren calls "titanium deposition carbon fiber," where a micron-thin layer of titanium is fused directly into the fiber's weave, becoming an integral part of the construction.<sup>1</sup></p>
  <img src="dist/img/mclaren.jpg" class="zoom" /><p>
  McLaren just reinvented the wing--erhum, by doing away with the spoiler wing? By algorithmically adjusting the centers of windflow pressure based on speed, other factors optimizes -- reinvents -- the wing:</p>
  <p class="quote">The entire body is made from lightweight carbon fiber, parts of which are actually flexible. On each end of the tail, active ailerons can actually bend, reducing turbulence and drag at higher speeds. According to McLaren, these ailerons "adjust to move the center of pressure and provide the required level of downforce precisely when it is needed most." It's airspace tech in an automotive application, and it alleviates the need for a silly rear wing.<sup>1</sup></p>
  <p>With a little more precision and reliability, what should stop them from inverting air-flow, and strap some wings and a turbine to that 1,000 horse-power engine!<p>
  `
    ;
    var      blogcite20 = ` 
    <p class="cite"> 1 <a href="https://www.cnet.com/roadshow/news/mclaren-speedtail-official-debut/
    "   target="_blank">https://www.cnet.com/roadshow/news/mclaren-speedtail-official-debut/
      </a> 
     `;
     var     blogpost19 = ` 
     <p class="firstparagraph">Data privacy's new hero raises attention to one of the more pressing issue of technology in our lives:
      </p>
      <p class="quote">Apple’s chief executive, Tim Cook, called on Wednesday for a federal privacy law in the US to protect against voracious internet companies hoarding so much digital data that the businesses know citizens “better than they know themselves” – and then often sell the information on.
<br /><br />
      Cook warned in a keynote speech that personal data was being “weaponized” against the public and endorsed tough privacy laws for both Europe and the US. The iPhone and Mac computer giant has stood out in its explicit declarations that Apple prefers to protect its customers’ personal data.
      </p>
      <p>Importantly, Tim Cook addresses the most sensitive of data about ourselves, i.e. the nexus of volunteered and observed data: <i>inferred data</i>:
     <p class="quote">Broadly [personal data] can be split into three categories: Volunteered data is information we willingly part with in online surveys and social media profiles. Observed data is captured through the observation of actions and interactions of individuals (GPS data and telecoms metadata, for example). Inferred data is used to complete the picture by mining those first two categories.<sup>1</sup></p>`
       ;
       var      blogcite19 = `  <p class="cite"> 1 <a href="https://www.theguardian.com/technology/2018/oct/24/tim-cook-us-federal-privacy-law-weaponized-personal-data"   target="_blank">https://www.theguardian.com/technology/2018/oct/24/tim-cook-us-federal-privacy-law-weaponized-personal-data</a> </p>
       
       <p class="cite"> 2 <a href="https://medium.com/s/new-world-crime/how-much-are-you-worth-in-the-online-data-economy-5ae2dd236135"   target="_blank">
       https://medium.com/s/new-world-crime/how-much-are-you-worth-in-the-online-data-economy-5ae2dd236135</a> </p>
        `;
  var     blogpost18 = `       
  <p class="firstparagraph">Bigger, Faster Image Rendering--especially when data points are tied to the pixels of a page, but especially still pictures should be the browsers' Task #1. Instead, load-times too often fall victim to the graphics ... but the browser world is now willing to work together for  action:
   </p>
  <p class="quote">Google revealed WebP eight years ago and since then has built it into its Chrome web browser, Android phone software and many of its online properties in an effort to put websites on a diet and cut network data usage. But Google had trouble encouraging rival browser makers to embrace it.
  <br /><br />
  "Mozilla is moving forward with implementing support for WebP," the nonprofit organization said. WebP will work in versions of Firefox based on its Gecko browser engine, Firefox for personal computers and Android but not for iOS. Mozilla plans to add support in the first half of 2019.

Committing to a new image format on the web is a big deal. In addition to technical challenges and new security risks, embracing a new image format means embracing it for years and years, because removing support at some point in the future will break websites that rely on it.
<br /><br />
It's one of the central conundrums of the web. Browser makers and website developers want to advance the technology, but they can't remove older aspects of the foundation as readily as Google can with Android or Apple with its rival iOS software. Websites have a long shelf life.<sup>1</sup></p>`
    ;
    var      blogcite18 = ` 
    <p class="cite"> 1 <a href="https://www.cnet.com/news/firefox-to-support-googles-webp-image-format-for-a-faster-web/
    "   target="_blank">https://www.cnet.com/news/firefox-to-support-googles-webp-image-format-for-a-faster-web/
      </a> 
     `;
     var     blogpost17 = ` 
     <p class="firstparagraph">Bootstrapping analytic models in any science requires a long, steady climb upon the <i>Shoulders of Giants</i>, years and decades' past research gains--especially  Classification and Regression Trees . 
      </p>
     <p class="quote">When approaching any type of Machine Learning (ML) problem there are many different algorithms to choose from. In machine learning, there’s something called the “No Free Lunch” theorem which basically states that no one ML algorithm is best for all problems. The performance of different ML algorithms strongly depends on the size and structure of your data.<sup>1</sup></p>`
       ;
       var      blogcite17 = ` 
       <p class="cite"> 1 <a href="https://towardsdatascience.com/selecting-the-best-machine-learning-algorithm-for-your-regression-problem-20c330bad4ef
       "   target="_blank">
       https://towardsdatascience.com/selecting-the-best-machine-learning-algorithm-for-your-regression-problem-20c330bad4ef
         </a> 
        `;
  var     blogpost16 = ` 
  <p class="firstparagraph">Apple V. Bloomberg. Bloomberg hit first. Much controversy now surrounds the topic of my October 10th post--that Bloomberg claiming that Apple was aware of potential chip embeds from foreign manufacturers. Whose news can one believe anymore? 
   </p>
  <p class="quote"> Apple Inc Chief Executive Tim Cook on Friday told an online news website that Bloomberg should retract a story that claimed Apple’s internal computer systems had been infiltrated by malicious computer chips inserted by Chinese intelligence agents. <br /><br />
  “There is no truth in their story about Apple,” Cook told BuzzFeed News in an interview with the online publication. “They need to do that right thing and retract it.”<sup>2</sup></p>`
    ;
    var      blogcite16 = ` 
    <p class="cite"> 1 <a href=" https://www.reuters.com/article/us-apple-bloomberg/apple-ceo-urges-bloomberg-to-retract-spy-chip-story-idUSKCN1MT2Z8
    "   target="_blank">
    https://www.reuters.com/article/us-apple-bloomberg/apple-ceo-urges-bloomberg-to-retract-spy-chip-story-idUSKCN1MT2Z8
    
    
      </a> 
     `;
  var     blogpost15 = ` 
  <p>
  Mathematically, reading time   necessarily divides itself up into small pieces now that everyone is a click away from anything readable, every novel written, at a moment's download, without or without easy phone and tablet reading. But given that choice, the trend toward fiction is not without good reason ... </p>
  <p class="quote">
  Modern day reading habits continue to evolve in a digital age. Statistics vary on exactly how many people are reading novels this decade compared to decades past. There is a definite trend for general readers to buy more fiction than nonfiction books—and to get facts, news and crystallized knowledge from the internet. In 2012, only four of the top twenty books were nonfiction titles.<br /><br />

"People are interested in escape," says Carol Fitzgerald of the Book Report Network. "In a number of pages, the story will open, evolve and close, and a lot of what's going on in the world today is not like that. You've got this encapsulated escape that you can enjoy."<sup>2</sup></p>`
    ;
    var      blogcite15 = ` 
    <p class="cite"> 1 <a href="https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
    "   target="_blank">
    https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
    
    
      </a>
      </p>  
  <p class="cite"> 2 <a href="https://www.psychologytoday.com/us/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function
"   target="_blank">
https://www.psychologytoday.com/us/blog/the-athletes-way/201401/reading-fiction-improves-brain-connectivity-and-function

https://www.smithsonianmag.com/smart-news/growing-surrounded-books-may-bolster-skills-later-life-180970523/
  </a>
  </p>   

     `;
  var     blogpost14 = ` 
  <p class="firstparagraph">Technology provides the resources for a better life all around ... </p>
    <p class="quote"> 
    The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.<br /><br />
    Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.<sup>1</sup></p>
    <p>Anaconda, the programming package bundle features math software with Spyder applications, yet the Jupyter notebook is already revolutionizing academic publications...`
    ;
    var      blogcite14 = ` 
  <p class="cite"> 1 <a href="
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news"   target="_blank">
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news
  </a>
  </p>   
     `;
  var     blogpost13 = ` 
  <p class="firstparagraph">The College Term-Paper, the perennial object of dread or elation, of tedium or excitement. Yet, more and more, the needs for communication require the inclusion of programming, analytic language. Paragraphs of eloquently written code with paragraphs of synopsis, from one logical statement to the next, laying out the proofs with each paragraph. Best yet, it is innately online and presentable, and employs the powerful languages like Python and R. But how to communicate these specialized papers to a wide audience?</p>
    <p class="quote"> 
    The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.<br /><br />
    Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.<sup>1</sup></p>
    <p>Anaconda, the programming package bundle features math software with Spyder applications, yet the Jupyter notebook is already revolutionizing academic publications...`
    ;
    var      blogcite13 = ` 
  <p class="cite"> 1 <a href="
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news"   target="_blank">
  https://www.vox.com/2014/11/24/7272929/global-poverty-health-crime-literacy-good-news
  </a>
  </p>  
  <p class="cite"> 2 <a href="https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/"   target="_blank">https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/
  </a>
  </p>  
     `;
 var  blogpost12 = `
  <p class="firstparagraph">Modeling the molecular behavior of organic chemistry, biology has become the specialty of Quantum computing, with its superposed third-state that supports short bursts of ultra-fast algorithm computations. Quantum computing has revolutionized biology, so why not psychology?  ..at least at the molecular level: </p><p class="quote"> According to Zheng Joyce Wang and others who try to model our decision-making processes mathematically, the equations and axioms that most closely match human behavior may be ones that are rooted in quantum physics.

  "We have accumulated so many paradoxical findings in the field of cognition, and especially in decision-making," said Wang, who is an associate professor of communication and director of the Communication and Psychophysiology Lab at The Ohio State University.<br /><br />
  
  "Whenever something comes up that isn't consistent with classical theories, we often label it as 'irrational.' But from the perspective of quantum cognition, some findings aren't irrational anymore. They're consistent with quantum theory—and with how people really behave."
  
  
  <sup>1</sup></p>
  <p>So much for the binary way of thinking--after all, isn't life more colorful than black-and-white reasoning?
  </p>
 `;
 var   blogcite12 = `  
  <p class="cite">1 <a href="https://phys.org/news/2015-09-youre-irrational-quantum-probabilistic-human.html"   target="_blank">https://phys.org/news/2015-09-youre-irrational-quantum-probabilistic-human.html
  </a>
  </p>
  <p class="cite">PDFs <br /> <a href="https://www.cell.com/trends/cognitive-sciences/fulltext/S1364-6613(15)00099-6"   target="_blank">https://www.cell.com/trends/cognitive-sciences/fulltext/S1364-6613(15)00099-6
  </a> 
  </p>
  <p class="cite">PDFs <br /> <a href="http://journals.sagepub.com/doi/abs/10.1177/0963721414568663"   target="_blank">http://journals.sagepub.com/doi/abs/10.1177/0963721414568663
  </a> 
  </p>
     `;
  
     var    blogpost11 = `
  <p class="firstparagraph">Quantum <i>'Flat-Earther's</i> have one less argument ...</p><p class="quote">
  

Straightaway, they saw the droplets exhibit surprisingly quantum-like behaviors — only traversing certain “quantized” orbits around the center of their liquid baths, for instance, and sometimes randomly jumping between orbits, as electrons do in atoms. There and in bouncing-droplet labs that soon sprang up at the Massachusetts Institute of Technology and elsewhere, droplets were seen to tunnel through barriers and perform other acts previously thought to be uniquely quantum. In reproducing quantum phenomena without any of the mystery, the bouncing-droplet experiments rekindled in some physicists de Broglie’s old dream of a reality at the quantum scale that consists of pilot waves and particles instead of probability waves and conundrums.<br /><br />

But a series of bouncing-droplet findings since 2015 has crushed this dream. The results indicate that Couder’s most striking demonstration of quantum-like phenomena, back in 2006 — “the experiment that got me hooked on this problem,” the fluid dynamicist Paul Milewski said — was in error. Repeat runs of the experiment, called the “double-slit experiment,” have contradicted Couder’s initial results and revealed the double-slit experiment to be the breaking point of both the bouncing-droplet analogy and de Broglie’s pilot-wave vision of quantum mechanics.
  <sup>1</sup></p>
 `;
 var    blogcite11 = ` 
  <p class="cite"> <a href="https://www.quantamagazine.org/famous-experiment-dooms-pilot-wave-alternative-to-quantum-weirdness-20181011/"   target="_blank">https://www.quantamagazine.org/famous-experiment-dooms-pilot-wave-alternative-to-quantum-weirdness-20181011/
  </a>
  </p>
     `;
  
 
 var  blogpost10 = `
<p class="firstparagraph">Climate-change scientist-activists earn their prestige with every research study and every letter written. With less fanfare, economists also earn their due prestige for working toward a sustainable prosperity.     </p>
<p class="quote"> This year’s [Nobel Prize] Laureates William Nordhaus and Paul Romer have significantly broadened the scope of economic analysis by constructing  models that explain how the market economy interacts with nature and knowledge. <br /><br />
 Romer demonstrates how knowledge can function as a driver of long-term economic 
growth. When annual economic growth of a few per cent accumulates over decades, it transforms people’s lives. 
Previous macroeconomic research had emphasised technological innovation as the primary driver of economic 
growth, but had not modelled how economic decisions and market conditions determine the creation of new 
technologies. Paul Romer solved this problem by demonstrating how economic forces govern the willingness of 
firms to produce new ideas and innovations. 
<sup>1</sup></p>
<p>The economist in turn practices what he preaches by using only open-source software--to the aim of democratizing research itself:</p>
<p class="quote">Romer believes in making research transparent. He argues that openness and clarity about methodology is important for scientific research to gain trust. As Romer explained in an April 2018 blog post, in an effort to make his own work transparent, he tried to use Mathematica to share one of his studies in a way that anyone could explore every detail of his data and methods. It didn’t work. He says that Mathematica’s owner, Wolfram Research, made it too difficult to share his work in a way that didn’t require other people to use the proprietary software, too. Readers also could not see all of the code he used for his equations.
<br /><br />
Instead of using Mathematica, Romer discovered that he could use a Jupyter notebook for sharing his research. Jupyter notebooks are web applications that allow programmers and researchers to share documents that include code, charts, equations, and data. Jupyter notebooks allow for code written in dozens of programming languages. For his research, Romer used Python—the most popular language for data science and statistics.<sup>2</sup>
</p>
<p>The Bottom line is that yesterday's ink and paper is today's software and hardware--essential tools for success, the earlier the better. So, because historical suppression usually begins financially, equal access across social and economic lines.  So, the economic incentive to outfit every last citizen with free wifi and open-source technology. Already, the best in humanity--the Nobel winners--know the public incentive to harness the power of a widespread tech education. Because when the many and not the few create and advance technology, the economy blooms with real productivity.</p>
  `;
  var  blogcite10= ` 
<p class="cite"> 1 <a href="https://www.nobelprize.org/uploads/2018/10/press-economicsciences2018.pdf"   target="_blank">https://www.nobelprize.org/uploads/2018/10/press-economicsciences2018.pdf 
</a>
</p>  
<p class="cite"> 2 <a href="https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/"   target="_blank">https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/
</a>
</p>  
   `; 

   var  blogpost9 = `
  <p class="firstparagraph">Hackernoon featured Jack Dossman's take on the banality of blockchain technology outside of special-use cases. Dossman opines, "Unless your business needs all of the benefits that a blockchain provides, you will be no better off storing your data on one." </p>
  <p class="quote">By definition, there is no central authority governing a public blockchain, so who makes decisions in this distributed company?

  What about dispute resolution? Once data has been uploaded and verified, it’s not going anywhere. Got charged for a ride you didn’t take? Driver did something really bad that you need to report? Well too bad because nobody is listening. <sup>1</sup></p>
 <p>Now, this article grossly underestimates the range of designs from  private blockchains to consortium blockchains, but the point about hype is well-made!</p>
    `;
    var  blogcite9= ` 
  <p class="cite"> 1 <a href="https://hackernoon.com/10-things-blockchain-isnt-dcb7966d22e5"   target="_blank">https://hackernoon.com/10-things-blockchain-isnt-dcb7966d22e5 
  </a>
  </p>  
     `; 
     var   blogpost8 = `
  <p class="firstparagraph">Intellectual espionage is about as newsworthy as any other misguided nationalist practice across the globe from nearly every nation--in some form. Maybe its the ubiquity of mimicry that events are quickly forgotten. An <i>other-world problem</i>. Yet, this is not merely a regionally-based nuisance. From time immemorial, headlines have raised the prospect of academic, university-based intellectual theft. Related events raised eyebrows and then quickly forgotten. <p>This year, Chinese-made servers discovered with a microscopic, embedded chip may have been known by Apple three years ago. Last week, Bloombergs reported, </p>
  <p class="quote"> Beijing's military intelligence pressured or bribed a Chinese manufacturing subcontractor of US-based Super Micro to include a small secret spy chip in the server maker's motherboards. The supposedly grain-of-rice-sized chips were inserted to give China a backdoor into the computers, allowing data to be silently altered or stolen from afar by the Chinese government. <br />
  <br />Of the 30 or so organizations that apparently received these bugged machines, ranging from a major bank to US government contractors, were Apple and Amazon, according to Bloomberg's sources. <sup>1</sup></p>
  <p>Mischief in all forms pervades nearly every nations' agenda  ... Again, apparently, who remembers a week afterward?</p> 
    `;
    var   blogcite8= ` 
  <p class="cite"> 1 <a href="https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/"   target="_blank">https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/ 
  </a>
  </p> <p class="cite"> 2 <a href="https://www.cnbc.com/2018/10/04/us-warns-companies-about-security-risk-to-managed-service-providers.html"   target="_blank">https://www.cnbc.com/2018/10/04/us-warns-companies-about-security-risk-to-managed-service-providers.html
  </a>
  </p>  <p class="cite">3
  <a href="https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race
  </a>
  </p>
     `; 
     var    blogpost7 = `
  <p class="firstparagraph"> The latest news of microscopic foreign chips embedded in Micro Systems chips for hard drives that find their way into Amazon, Pentagon, and other servers in between now raise a new awareness</p>
  <p class="quote">
 The spy chip could have been placed electrically between the baseboard management controller (BMC) and its SPI flash or serial EEPROM storage containing the BMC's firmware. Thus, when the BMC fetched and executed its code from this memory, the spy chip would intercept the signals and modify the bitstream to inject malicious code into the BMC processor, allowing its masters to control the BMC.
  <sup>1</sup></p> 
  <p> </p>
  <p class="quote">The spy chip could have been placed electrically between the baseboard management controller (BMC) and its SPI flash or serial EEPROM storage containing the BMC's firmware. Thus, when the BMC fetched and executed its code from this memory, the spy chip would intercept the signals and modify the bitstream to inject malicious code into the BMC processor, allowing its masters to control the BMC.<sup>3</sup></p>
  <p>In sum, the <i>the times, they are - a - changing</i> and that means, like any test-taker knows, cheatsheets do more damage if they fall irrelevent, even slightly deprecated.  </p> 
    `;
    var   blogcite7= `
  <p class="cite"> 1 <a href="https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/"   target="_blank">https://www.theregister.co.uk/2018/10/08/super_micro_us_uk_intelligence/ 
  </a>
  </p> 
  <p class="cite">2
  <a href="https://www.forbes.com/sites/kalevleetaru/2018/10/04/the-chinese-spy-chip-story-is-a-reminder-of-how-insecure-our-digital-world-really-is/#1736f0f07e13"   target="_blank">https://www.forbes.com/sites/kalevleetaru/2018/10/04/the-chinese-spy-chip-story-is-a-reminder-of-how-insecure-our-digital-world-really-is/#1736f0f07e13
  </a>
  </p> 
  <p class="cite">3
  <a href="https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-04/what-a-mooted-chinese-wireless-mega-merger-means-for-the-5g-race
  </a>
  </p>
     `; 
     var   blogpost6 = `
  <p class="firstparagraph">Last month's <i>Techcrunch Disrupt!</i> revealed if only a few imminent blockchain trends to pay attention to: The crypto-currency and investment is definitely tamped down, and now the field of play is no longer between competing platforms, but rather the DAPPS are now the players on the established platforms--starting with Ethereum crypto-contracts, browser-based platforms like Mist and other players. <i>The trust and direction is no longer in dispute--now, the question asks: Who can leverage ease-of-use and accessibility and  utility via the web browser ... After all, isn't the point of tech advancents, to bring about new possibilities, and  the time to explore them by also providing efficient living! </p>
   
    `;
    var   blogcite6= `  
     `; 
     var   blogpost5 = `
  <p class="firstparagraph">Trust, trust layers, and institutions of Trustworthiness: The quaint, <i>Leave-it-to-Beaver terms of a by-gone world</i> haven't weakened but are transformed: What was once a rigid hierarchy of trust proclamations from above are now flexible, continually-earned, community-based trust networks. Slowly but surely,<i>Community-centered networks made of social capital overtake institutional, bureaucratic capital and credentialism. </i></p><p class="quote">This is the whole issue. This is everything that we're talking about. And how do you trust something that can pull these signals off of you? <br /><br />If a system is asymmetric—if you know more about me than I know about myself, we usually have a name for that in law. So, for example, when you deal with a lawyer, you hand over your very personal details to a lawyer so they can help you. But then they have this knowledge of the law and they know about your vulnerable information, so they could exploit you with that. Imagine a lawyer who took all of that personal information and sold it to somebody else. But they're governed by a different relationship, which is the fiduciary relationship. They can lose their license if they don't actually serve your interest. And similarly a doctor or a psychotherapist.
  <sup>1</sup></p>
  <p>Whether by coincidence or innate features of 21st century technology, trust-based platforms innately reward sharing, trust-based distribution of power. Consider the difference between the democratically operated blockchain, i.e. distributed ledgers without middle-persons, versus hierarchical, siloed centers of information. As usual, the problems that technology present in one form are symmetrically resolved by a technology of another form.`;
  var  blogcite5 = `
  <p class="cite">1 <a href="https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/"   target="_blank">
  https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/</a>
  </p> 
  <p class="cite">2<a href="https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/"   target="_blank">https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/
  </a>
  </p>
     `;
     var  blogpost4 = `<p class="quote"><i>But everywhere you turn on the internet there's basically a supercomputer pointing at your brain, playing chess against your mind, and it's going to win a lot more often than not.</i><sup>1</sup></p>
  <p class="firstparagraph">First off, what is Humane Technology? Besides a philosophy that dissipates, a practical philosophy only gains focus--far more valuable than depth or breadth. Much more than a real Des Cartes meets an iPhone, whose focus is on "realigning technology with a clear-eyed model of human nature".</p>
  <p class="quote">Because we have built our society, certainly liberal democracy with elections and the free market and so forth, on philosophical ideas from the 18th century which are simply incompatible not just with the scientific findings of the 21st century but above all with the technology we now have at our disposal.<br /><br />
   Our society is built on the ideas that the voter knows best, that the customer is always right, that ultimate authority is, as Tristan said, is with the feelings of human beings and this assumes that human feelings and human choices are these sacred arena which cannot be hacked, which cannot be manipulated. Ultimately, my choices, my desires reflect my free will and nobody can access that or touch that. And this was never true. But we didn't pay a very high cost for believing in this myth in the 19th and 20th century because nobody had a technology to actually do it. Now, people—some people—corporations, governments are gaming the technology to hack human beings. Maybe the most important fact about living in the 21st century is that we are now hackable animals.<sup>2</sup></p> 
   <p>But this isn't some new thing. By adapting to the new touchstone, on a societal level, the technology bears no more threat than the novel television ad campaigns of the 1950's--Some viewers became brain-washed, but not all! So like Bebe Rexha teaches us: <i>No broken hearts in the club tonight, no tears in the club ... We only got one life so let's go hard until the day we die!"</i></p>
  `;
  var   blogcite4 = `
  <p class="cite">https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/ <a href="https://www.wired.com/story/artificial-intelligence-yuval-noah-harari-tristan-harris/ "   target="_blank">
  </a>
  </p> 
  <p class="cite">https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/<a href="https://www.wired.com/story/our-minds-have-been-hijacked-by-our-phones-tristan-harris-wants-to-rescue-them/"   target="_blank">
  </a>
  </p>
  `;
  var  blogpost3 = `<p class="firstparagraph">
  There was a time for Seinfeldian Coffee in Cars, when the company makes for the ride.  Today, the ride makes for the company, albeit by real-time Skype and real-time info-tainment. So if you have an extra $60,000 laying around, here's the future--this one by BMW ...</p>
  <p class="quote">There's also a new reconfigurable digital gauge cluster that BMW calls Live Cockpit, and an impressively huge and crisp optional head-up display to relay even more information ... Being faced with all of those screens and all of those choices at once probably sounds daunting, but in my brief experience with iDrive 7, it all felt quite intuitive. The system smartly allows for the driver to use their preferred interface method, be that via touchscreen, steering wheel switchgear, cloud-based speech recognition or even gesture control. (A word about the latter: It's still overwhelmingly gimmicky. Twirling your finger in the air to turn up the stereo remains a crowd-pleasing novelty, but little more). <sup>1</sup></p>
  <p></p>`;
  var    blogcite3 = `  <p class="cite">1
  <a href="https://www.cnet.com/roadshow/reviews/2019-bmw-x5-preview/"   target="_blank">https://www.cnet.com/roadshow/reviews/2019-bmw-x5-preview/
  </a>
  </p>
  `;

  var   blogpost2 = `<p class="quote"><i>The wireless standard known as 4G has untethered us from our living rooms and offices, allowing us to navigate unfamiliar roads and streets using voice directions from Google Maps, stream movies on Netflix while commuting to work, and interview a prospective hire on FaceTime during a flight layover. The next iteration promises to be even more transformative, because it will support communication among objects, as well as people.  
  </i><sup>1 </sup></p>
  <p class="firstparagraph"> </p>
  <img src="dist/img/5g4g.jpg" class="zoom" />
  <p class="quote">
  First, providers need a final set of technology standards. The global body setting them, the 3rd Generation Partnership Project, released the first 5G specifications in June; the next set of standards is due in 2020. (The 3GPP, a collaboration between seven telecommunications organizations, also set standards for 3G and 4G LTE mobile systems.) 5G mobile tests also need special handsets, transmission hardware and software and a system design that doesn’t interfere with 4G and 3G networks. And governments need to set aside mobile spectrum space for 5G.</p>
    `;
    var   blogcite2 = `
  <p class="cite">  <a href="https://www.bloomberg.com/news/articles/2017-02-16/tomorrow-s-cellular-networks-will-generate-3-5-trillion-in-economic-output"   target="_blank">https://www.bloomberg.com/news/articles/2017-02-16/tomorrow-s-cellular-networks-will-generate-3-5-trillion-in-economic-output
  </a>
  </p>
    <p class="cite">  <a href="https://www.bloomberg.com/news/articles/2018-09-17/when-will-ultrafast-internet-come-to-your-phone-quicktake"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-17/when-will-ultrafast-internet-come-to-your-phone-quicktake
  </a>
  </p>
    `;

    var    blogpost1 = `<p class="quote"><i>It's the next (fifth) generation of cellular technology which promises to greatly enhance the speed, coverage and responsiveness of wireless networks. How fast are we talking about? Think 10 to 100 times speedier than your typical cellular connection, and even faster than anything you can get with a physical fiber-optic cable going into your house.  
  </i><sup>1 </sup></p>
  <p class="firstparagraph">5G builds anticipation for the imminent tech revolution, but who's paying attention? What's the point besides incomparable speed? It's not speed, which is a sequential, yesterday term; Zero latency means everything all at once, coming and going: <i>Latency is the primary element that really ushers in the new age, where online, internet connection escapes from home and office nodes into the very links in between!</i>S That seems inconvenient and fleeting but really, shouldn't the web follow us in action, rather than chain us down? Consider the world of instantanous request-responses ....</p>
  <p class="quote">
  Latency is the response time between when you click on a link or start streaming a video on your phone, sending the request up to the network, and when the network responds and gives you your website or starts playing your video. 
That lag time can last around 20 milliseconds with current networks. It doesn't seem like much, but with 5G, that latency gets reduced to 1 millisecond, or about the time it takes for a flash in a normal camera to finish.  
That responsiveness is critical for things like playing an intense video game in virtual reality or for a surgeon in New York to control a pair of robotic arms performing a procedure in San Francisco.</p><p>
Comcast yesterday and T-Mobile Tomorrow or not, the implications of a truly mobile internet couldn't be underestimated. What used to be a sensor is tomorrow's controller, and today's controllers become sensors, because source and target become irrelevant concepts when latency folds uni-directional wait-time into bi-directional concurrent communication. </p><p>Perhaps the central player in this revolution is the fast-developing internet-of-things infrastructure in full development--with a moving target ...</p>    `;
var   blogcite1 = `
  <p class="cite">  <a href="https://www.cnet.com/how-to/the-5g-revolution-is-coming-heres-everything-you-need-to-know/"   target="_blank">https://www.cnet.com/how-to/the-5g-revolution-is-coming-heres-everything-you-need-to-know/
  </a>
  </p>
    `;
 

      var url = [     
 
        {
          id: '123',
            did: '11-15-18',
            date: 'November 15, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'A.I.Now.',
            title: 'Fast, Anonymized Money!',
            post: blogpost123,
            blogcite: blogcite123
          },  
          {
        id: '122',
          did: '11-14-18',
          date: 'November 14, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'Green Options',
          post: blogpost122,
          blogcite: blogcite122
        },  
          {
          id: '111',
            did: '11-13-18',
            date: 'November 13, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'Picture Power',
            post: blogpost111,
            blogcite: blogcite111
          },  
          {
       id: '100',
        did: '11-12-18',
        date: 'November 12, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow',
        title: 'Plastic Hangover',
        post: blogpost100,
        blogcite: blogcite100
          },     
        {
        id: '099',
          did: '11-10-18',
          date: 'November 10-11, 2018<br />Weekend ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Thank You, AWS--for your Software Megatron',
          post: blogpost099,
          blogcite: blogcite099
        },  
          {
          id: '088',
            did: '11-09-18',
            date: 'November 9, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Sociology Tomorrow!',
            title: 'Graphene Dreams',
            post: blogpost088,
            blogcite: blogcite088
          },  
          {
       id: '077',
        did: '11-08-18',
        date: 'November 8, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow',
        title: 'What\'s in a Name',
        post: blogpost077,
        blogcite: blogcite077
          },        
        {
        id: '066',
          did: '11-07-18',
          date: 'November 7, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'The Uncharted Cloud Territory: A Magna Carta',
          post: blogpost066,
          blogcite: blogcite066
        },  
          {
          id: '055',
            did: '11-06-18',
            date: 'November 6, 2018 ',
            author: 'by Thomas Maestas',
            cat3: 'Web Dev Affairs',
            title: 'The 5G IoT SuperHighway',
            post: blogpost055,
            blogcite: blogcite055
          },  
          {
       id: '044',
        did: '11-05-18',
        date: 'November 5, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'Tesla at Work',
        post: blogpost044,
        blogcite: blogcite044
          },     
            {
        id: '033',
        did: '11-03-18',
        date: 'November 3-4, 2018<br />Weekend',
        author: 'by Thomas Maestas',
        cat3: 'Musing Blockchain',
        title: 'Now that\'s a Safe Keep!',
        post: blogpost033,
        blogcite: blogcite033
      },  
        {
        id: '022',
        did: '11-02-18',
        date: 'November 2, 2018 ',
        author: 'by Thomas Maestas',
        cat3: ' ',
        title: ' ',
        post: blogpost022,
        blogcite: blogcite022
      },         {
        id: '01',
        did: '11-01-18',
        date: 'November 1, 2018 ',
        author: 'by Thomas Maestas',
        cat3: ' ',
        title: ' ',
        post: blogpost011,
        blogcite: blogcite011
      },  
      {
        id: '22',
        did: '10-25-18',
        date: 'October 25, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Sociology Tomorrow!',
        title: 'Data that goes up must Stay Up',
        post: blogpost22,
        blogcite: blogcite22
      },  
      {
        id: '21',
        did: '10-24-18',
        date: 'October 24, 2018 ',
        author: 'by Thomas Maestas',
        cat3: 'Web Dev Affairs',
        title: 'Meta-Materials, Part II <br />One, Two, Three, Four--Nanophotonic Metamaterials and More',
        post: blogpost21,
        blogcite: blogcite21
      }, 
        {
          id: '20',
          did: '10-23-18',
          date: 'October 23, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Sociology Tomorrow!',
          title: 'Meta-Materials, Part I <br />Material Science',
          post: blogpost20,
          blogcite: blogcite20
        },  
        {
          id: '19',
          did: '10-22-18',
          date: 'October 22, 2018 ',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'The Reverent Tim Cook:<br />A Modern American Data Privacy Hero',
          post: blogpost19,
          blogcite: blogcite19
        }, 
        {
          id: '18',
          did: '10-20-18',
          date: 'October 20-21, 2018<br />Weekend',
          author: 'by Thomas Maestas',
          cat3: 'Web Dev Affairs',
          title: 'Image Data on a Diet',
          post: blogpost18,
          blogcite: blogcite18
        }, 
    {
      id: '17',
      did: '10-19-18',
      date: 'October 19, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Machine Learning, By Trial and Error',
      post: blogpost17,
      blogcite: blogcite17
    },  
    {
      id: '16',
      did: '10-18-18',
      date: 'October 18, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Apple  Gossip, and Digital Hearsay About Snooping',
      post: blogpost16,
      blogcite: blogcite16
    }, 
    {
      id: '15',
      did: '10-17-18',
      date: 'October 17, 2018 ',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Where\'s the Fiction Aisle?',
      post: blogpost15,
      blogcite: blogcite15
    }, 
    {
      id: '14',
      did: '10-16-18',
      date: 'October 16, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The Better World that Tech Brings',
      post: blogpost14,
      blogcite: blogcite14
    }, 
    {
      id: '13',
      did: '10-15-18',
      date: 'October 15, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Economic Prosperity, Democracy, and the Technology that Binds The Two',
      post: blogpost13,
      blogcite: blogcite13
    }, 
    {
      id: '12',
      did: '10-13-18',
      date: 'October 13-14, 2018<br /><small>Weekend</small>',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Probabilistic Reality (and Information), Part II<br />Quantum Molecular Psychology',
      post: blogpost12,
      blogcite: blogcite12
    }, 
    {
      id: '11',
      did: '10-12-18',
      date: 'October 12, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Probabilistic Reality (and Information), Part I<br /> Verifiably Determinated Once and For All',
      post: blogpost11,
      blogcite: blogcite11
    }, 
    {
      id: '10',
      did: '10-11-18',
      date: 'October 11, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Economic Prosperity, Democracy, and the Technology that Binds The Two',
      post: blogpost10,
      blogcite: blogcite10
    }, 
    {
      id: '9',
      did: '10-10-18',
      date: 'October 10, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Blockchain\'s Quiet Success',
      post: blogpost9,
      blogcite: blogcite9
    }, 
    {
      id: '8',
      did: '10-09-18',
      date: 'October 9, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Intellectual Espionage: <br />Part II: When Does Fair Play for All Warrant a Foul to One?',
      post: blogpost8,
      blogcite: blogcite8
    }, 
    {
      id: '7',
      did: '10-08-18',
      date: 'October 8, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Intellectual Espionage, Part I:<br />Small Chips',
      post: blogpost7,
      blogcite: blogcite7
    },
    {
      id: '6',
      did: '10-06-18',
      date: 'October 6-7<br />Weekend, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Humane Technology: Is there a Goal Post?<br />Part III: Resisting Compartmentalization',
      post: blogpost6,
      blogcite: blogcite6
    }, 
    {
      id: '5',
      did: '10-05-18',
      date: 'October 5, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Humane Technology: Is there a Goal Post?<br />Part II: Tech-based Social Capital',
      post: blogpost5,
      blogcite: blogcite5
    },
    {
      id: '4',
      did: '10-04-18',
      date: 'October 4, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Humane Technology: Is there a Goal Post?<br />Part I: Churches, Education, and Technologies',
      post: blogpost4,
      blogcite: blogcite4
    },
    {
      id: '3',
      did: '10-03-18',
      date: 'October 3, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast Cars and Faster Info',
      post: blogpost3,
      blogcite: blogcite3
    },
    {
      id: '2',
      did: '10-02-18',
      date: 'October 2, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast 5G: Part II<br />The How and When',
      post: blogpost2,
      blogcite: blogcite2
    },
    {
      id: '1',
      did: '10-01-18',
      date: 'October 1, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Fast 5G: Part I<br />The Why and What',
      post: blogpost1,
      blogcite: blogcite1
    } 


  
  ];

  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-oct").innerHTML += cat;
  }

  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-oct-mod").innerHTML += catMod;
  }
 //console.log(angular.toJson(url));
  console.log(url);
};
bloggerOct();
'use strict';

var bloggerSep = function () {
 
  var    blogpost25 = `<p class="paragraph">Web's foray into Internet of Things and the upcoming 5G revolution necessitates real-time processing.  Luckily, the dynamic yet slow language of the web, JavaScript now gets a super-speed boost from Web Assembly, a  much lower-level, binary language. Since Web Assembly only recognizes two floating point number types and two integer types, Rust handles string values, etc.</p> <p class="quote"><i>Both Rust and JavaScript have vibrant package ecosystems. Rust has cargo and crates.io. JavaScript has several CLI tools, including the npm CLI, that interface with the npm registry. In order for WebAssembly to be successful, we need these two systems to work well together, specifically:<br/><br/>

  Rust developers should be able to produce WebAssembly packages for use in JavaScript without requiring a Node.js development environment
  JavaScript developers should be able to use WebAssembly without requiring a Rust development environment
  <br/><br/>
Enter: wasm-pack. 
wasm-pack is a tool for assembling and packaging Rust crates that target WebAssembly. These packages can be published to the npm Registry and used alongside other packages. This means you can use them side-by-side with JS and other packages, and in many kind of applications, be it a Node.js server side app, a client-side application bundled by Webpack, or any other sort of application that uses npm dependencies. You can find wasm-pack on crates.io and GitHub.<sup>1 </sup></p>
<p>Step-by-step, software advances in step-lock with hardware.`;

  var   blogcite25 = `
  <p class="cite"> 1 <a href="https://hacks.mozilla.org/2018/04/hello-wasm-pack/"   target="_blank">https://hacks.mozilla.org/2018/04/hello-wasm-pack/
  </a>
  </p>  
  `;

  var   blogpost24 = ` 
  <p class="firstparagraph">Democracy, i.e., power of the people, is often expressed in the tools and resources available to everyone. Data visualization software is prohibitively expensive, and complicated, limiting access to universities and commerce. So, many important data stories are relegated to Excel bar charts. These days, the preeminent medium for graphical representation of data is free to all: <i><strong>Pandas</strong>, short for the  Econometrics term 'Panel Data', that features paragraphs of statistical, programming language with spoken language, coupled with powerful data visualization:  </i> </p>
    <p class="quote">
    Millions of people around the world use Pandas. In October 2017 alone, Stack Overflow, a website for programmers, recorded 5 million visits to questions about Pandas from more than 1 million unique visitors. Data scientists at Google, Facebook, JP Morgan, and virtually every other major company that analyze data uses Pandas. Most people haven’t heard of it, but for many people who do heavy data analysis—a rapidly growing group these days—life wouldn’t be the same without it. (Pandas is open source, so it’s free to use.)  <br /><br />Basically, Pandas makes it so that data analysis tasks that would have taken 50 complex lines of code in the past now only take 5 simple lines, because  [Pandas creator] McKinney already did the heavy lifting.  
    <sup>1</sup></p>
<p>      Data expression, at the end of the day, and across the land, is now an expression for all!</p>
    
    `;
    var   blogcite24 = `
  <p class="cite"> 1 <a href="https://qz.com/1126615/the-story-of-the-most-important-tool-in-data-science/"   target="_blank">https://qz.com/1126615/the-story-of-the-most-important-tool-in-data-science/
  </a>
  </p>
  `;
  var     blogpost23 = ` 
  <p class="firstparagraph">The College Term-Paper, the perennial object of dread or elation, of tedium or excitement. Yet, more and more, the needs for communication require the inclusion of programming, analytic language. Paragraphs of eloquently written code with paragraphs of synopsis, from one logical statement to the next, laying out the proofs with each paragraph. Best yet, it is innately online and presentable, and employs the powerful languages like Python and R. But how to communicate these specialized papers to a wide audience?</p>
    <p class="quote"> 
    The more sophisticated science becomes, the harder it is to communicate results. Papers today are longer than ever and full of jargon and symbols. They depend on chains of computer programs that generate data, and clean up data, and plot data, and run statistical models on data. These programs tend to be both so sloppily written and so central to the results that it’s contributed to a replication crisis, or put another way, a failure of the paper to perform its most basic task: to report what you’ve actually discovered, clearly enough that someone else can discover it for themselves.<br /><br />
    Perhaps the paper itself is to blame. Scientific methods evolve now at the speed of software; the skill most in demand among physicists, biologists, chemists, geologists, even anthropologists and research psychologists, is facility with programming languages and “data science” packages. And yet the basic means of communicating scientific results hasn’t changed for 400 years. Papers may be posted online, but they’re still text and pictures on a page.<sup>1</sup></p>
    <p>Anaconda, the programming package bundle features math software with Spyder applications, yet the Jupyter notebook is already revolutionizing academic publications...`
    ;
    var      blogcite23= ` 
  <p class="cite"> 1 <a href="
  https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/"   target="_blank">
  https://www.theatlantic.com/science/archive/2018/04/the-scientific-paper-is-obsolete/556676/ 
  </a>
  </p>  
  <p class="cite"> 2 <a href="https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/"   target="_blank">https://qz.com/1416867/the-2018-nobel-prize-in-economics-goes-to-william-nordhaus-and-paul-romer/
  </a>
  </p>  
     `;  
     var        blogpost20 = ` <p class="quote"> <br /><br />
  </p>
  `;
  var        blogcite20   =  `
   
  `;
 
  var      blogpost19= `<p class="firstparagraph">For every article and blog on the sci-fi imaginations of tech writers, real A.I. presents itself every so often as what it is essentially: a tool.<i> A multi-purpose toolset, tracing its algorithmic root to &Eacute;mile Durkheim\'s 1870s era classification science</i> of human epidiology using national population data from Paris. </p><p>
  Earlier  Statisticians and Scientists, i.e. modern Developers and Engineers also took their generation's Information Technology, applying it toward human-driven purposes. </p>
  <p>I'm an optimist at heart, so this blog post stands out: </p><p class="quote">I’d like to point out that the recipe isn’t all that different from code that a programmer might have written by eyeballing the problem and manually making up some rules. Quit anthropomorphizing machine learning already. A model is conceptually the same kind of thing as regular code. You know, the kind of recipe that’s handcrafted by some human armed with an opinion and a caffeine source.<br /><br />And don’t go around saying that retraining — jargon for rerunning the algorithm to adjust the boundary as new examples are gathered — makes it creature-like or inherently different from your programmer’s standard work product. Humans can sit there tweaking the code in response to new info too. <sup>1</sup>
  </p>
  <p> Now, A.I. that is attached to robototics? That is an entirely different story, and more akin to another technology, gun weapon proliferation and advancement. Apples and Oranges: Two completely different timelines and analogies that only imaginatively relate according to Hollywood-esque journalists that can assume malevalent intent from a tool, whether a utensil, a car, or an algorithm. 
    </p>
  `;
  var blogcite19   =  `
  <p class="cite">1. <a href="https://hackernoon.com/machine-learning-is-the-emperor-wearing-clothes-59933d12a3cc">https://hackernoon.com/machine-learning-is-the-emperor-wearing-clothes-59933d12a3cc</a></p>
  `;
  var blogpost18 = `<p>The 2000's Silicon Valley-led boom and bust resulted from overspeculation. The crypto-phenomenon moreso resembles the derivatives packages from the 2007-8 recession bust because value was placed on real estate's miscalculated worth based on the assumption the homeowners didn't borrow over their income. Likewise crypto-ICO's values wasn't based on a currency comprised of real cash, but <i> rather, ICO's and crypto-platforms were investments of crypto-currency!</i>So, if the one does well, the other continues to do well, multiplied. But exponential gain also means logarithmic loss ...
   <p class="quote"> There has been a collapse in the number of ICOs that have tried to raise financing.

  This has been driven by a number of factors including uncertainty around regulation, falling crypto market prices and of course, disillusionment in the previous ICOs that raised funding.    Given that the Ethereum blockchain was the premier platform for ICOs to raise their funding, it is feeling the brunt of this slowdown.<br /><br />
  
  Not only is this lack of “ICO demand” for ETH having an adverse effect on the price but the previous ICOs are also driving the price lower as they try to convert their ETH into Fiat currency to meet expenses.<sup>1</sup>  </p>
  <p>Notwithstanding, <i> We can also are miscalculating about crypto-platforms'   center of value  ... it's   about the upcoming actual and inevitable practicality for everyday uses.</i> So, three cheers to a long, slow ramp--to another  great  and lasting crypto-currency resurgence!</p>.0

  `;
  var blogcite18   =  `
  <p class="cite">1. <a href="https://cointelegraph.com/news/cryptocurrency-markets-continue-resurgence-as-ripple-claims-68-percent-weekly-gains">https://usethebitcoin.com/the-fall-of-the-ico-impacting-eth-price/</a></p>
  `;

  var blogpost17 = ` 
<p class="firstparagraph">Regulation of crypto-currencies remains the bane of wider acceptance--while it <i>also shores up trust among fintech instiutions, toward a more certain future. </p>
  <p class="quote"> The move upwards, which occurred over several hours, came as news broke that U.S. regulators had again postponed their decision on the VanEck/SolidX Bitcoin exchange-traded fund (ETF), but had not rejected it outright.
<br /><br />
  At press time, BTC/USD was trading around $6,707 an increase of about 5 percent on the day, taking prices back to the range they hovered in during mid-August. In altcoin markets, Ethereum’s (ETH) reversal of fortunes continued after weeks of beating Bitcoin on losses. Prices at press time for ETH/USD hit $225, also a first since September 7, having fallen as low as $171 in the meantime.<sup>1</sup>
  </p><p>
  Imagine if a bank had staked pension portfolio's the value of Ether last fall. <i>That</i> would have been a Winter of Discontent value precipitously plummeted by April.</p>
  `;
  var blogcite17   =  `
  <p class="cite">1. <a href="https://cointelegraph.com/news/cryptocurrency-markets-continue-resurgence-as-ripple-claims-68-percent-weekly-gains">https://cointelegraph.com/news/cryptocurrency-markets-continue-resurgence-as-ripple-claims-68-percent-weekly-gains</a></p>
  `;
  var blogpost16 = ` <p class="firstparagraph">Altering Market States and technology-advancement forces introspection among crypto-currency hubs.</p>
  <p class="quote"> According to a local report, as a result of a security breach on September 14, hackers managed to steal 4.5 billion yen from users' hot wallets, as well as 2.2 billion yen from the assets of the company, with total losses amounting to 6.7 billion yen or around $59.7 million.
<br />
  Tech Bureau Inc, which operated Zaif, stated in press release that the exchange detected a server error on September 17, after which Zaif suspended deposits and withdrawals. On September 18, the exchange realized that the error was a hack, and reported the incident to the Japanese financial regulator, the Financial Services Agency (FSA). Hackers stole 5,966 bitcoins (BTC) in addition to some Bitcoin Cash (BCH) and MonaCoin (MONA).<sup>1</sup> 
  </p><p>Fintech regulations have been long in coming, but a thorough SEC-pushed security overhaul could at least dispell fears about what amounts to bank robberies.</p>
  </p>
  `;
  var blogcite16   =  `
  <p class="cite">1. <a href="https://cointelegraph.com/news/japanese-cryptocurrency-exchange-hacked-59-million-in-losses-reported">https://cointelegraph.com/news/japanese-cryptocurrency-exchange-hacked-59-million-in-losses-reported</a></p>
  `;
  var blogpost15 = `<p class="firstparagraph">Crypto-currency dealers, developers and owners should welcome more regulation, scrupulous examination from financial authorities...the value of trust far outweighs the value of speed to market.</p>
  <p class="quote"> The recent report examines the practices of ten crypto trading platforms based in the U.S. and abroad, as well data collected by the Attorney General’s office about the state of digital currency markets as a whole.<br /><br />

  The study found that the absence of accepted methods for auditing virtual assets results in the lack of a consistent and transparent approach to independently auditing digital currency traded on exchanges. This puts customers’ funds held on their exchange accounts at risk of attacks from hackers or theft. The report subsequently questions the issue of public protection and the sufficiency of the commercial insurance to cover possible losses.<br /><br />
  
  The report further outlines abusive trading practices, emphasizing that the majority of crypto trading platforms deploy automated traders, offering them special conditions, which leaves retail customers at a disadvantage. It also states that digital currency exchanges involve numerous, overlapping lines of business that represent serious conflicts of interest. The report explains:
  <br /><br />
  “Automated trading activities could also allow a single trader or group of traders to command multiple accounts simultaneously to obscure coordinated trading, in order to manipulate prices.”<sup>1</sup>
  </p><p>So, whether before or after breeches of trust, that are inevitable on digital platforms, wouldn't you prefer SEC scrutiny along with its guarantees?
  `;
  var blogcite15   =  `
  <p class="cite">1. <a href="https://cointelegraph.com/news/new-york-attorney-general-report-says-crypto-exchanges-are-at-risk-of-manipulation"> https://cointelegraph.com/news/new-york-attorney-general-report-says-crypto-exchanges-are-at-risk-of-manipulation</a></p>
  `;
  var blogpost14 = `<p class="firstparagraph">Security of a network can be measured by the degree of carefulness from any node on a network. Likewise, bridging, central hubs can work to bottle-neck the spread of network dangers...  </p>
  <p class="quote"> As an international data hub and digital entry point to Europe, the Netherlands plays an important role when it comes to tackling these threats and optimally guaranteeing the cybersecurity of our critical infrastructure.

  Saskia Bruines, Deputy Mayor for Education, Knowledge Economy and International Affairs in the Municipality of The Hague:<br /><br />
  
  "Technological developments are continuing apace and the current shortage of talent will increase if we fail to take action as a society. For that reason, public authorities, educational institutions and businesses need to join forces to train, attract and retain more talent. That is why it is important to teach children digital skills from an early age. From primary school to university, educating cybertalent has to be high on the agenda. We want everyone to participate so we can all work together to create a safe society."<sup>1</sup>
  </p>
  <p>Whether or not the security hole is breeched is immaterial--what counts is loss mitigation and insurance!</p>
  `;
  var blogcite14 =  `
  <p class="cite">1. <a href="https://www.benzinga.com/pressreleases/18/09/r12366605/cyber-security-week-together-we-secure-the-future-2-5-october-2018-the">https://www.benzinga.com/pressreleases/18/09/r12366605/cyber-security-week-together-we-secure-the-future-2-5-october-2018-the</a></p>
  `;
  var blogpost13 = `
 
  <p class="firstparagraph">Paris, as a City foremost, has led global discussion and awareness on climate-change related action. Paris' smog-dispelling culture presents itself as <i>The City at the center of action</i> with respect to global, macro-level problems. Why the city? It only makes sense that collective action and mobilization requires the correct ratio of community leaders and actors to engage enough social momentum to overcome apathy. </p>
  <p class="quote">This year, the ban on motorized traffic will apply to the whole of Paris, except for the Bois (woods) and the périphérique (inner ring road). 
  The Parisians themselves will not be able to drive their own vehicle, including electric vehicles, 'clean' energy vehicles, and Autolib vehicles.<br /><br />
  
  The following vehicles will be allowed to circulate, at a maximum of 30 km/h: non-motorized vehicles, emergency vehicles, vehicles for disabled people, taxis, public transport, BigBus and Open Tour, and VTC (the latter (private hire taxis) were not allowed to circulate last year). There are also numerous alternative modes of transport - bicycle, horse & carriage, cyclopolitain (pedicabs) … <sup>1</sup>
  </p>
    <p>On a national-level, action is highly effective but practically impossible, while the community-level can hardly muster the type of leverage to influence other communities. <i> The city, often composed of multiple millions and spanning larger geographies, resembles the powerful cities that governed nation-states from the middle ages forward.</i> Examples include 16th century Florence, 17th century Istanbul, 18th century Paris, and 19th century London--not to mention the first global city-state power, Rome. In terms of collection action, this historical nuance of the city takes a new role:    
  </p>
  <p class="quote">Last week at the Global Climate Action Summit, many of the best minds the human species can muster gathered to right the course.

  These people included but were not limited to: environmentalists, mayors from around the world, human rights activists, technologists, academics, business leaders, labor leaders, and former secretaries of state. The kinds of folks with noble pursuits. This was climate change activism without borders. If the Paris Agreement, drafted in 2015, was about governments coming together to fight, last week’s event showed that the most ambitious climate action isn’t happening on the national scale—it’s cities and states that are leading the way.<sup>2</sup></p>
  <p>Granted, the city is the center of climate-change peril and so it is only natural they are the first to act, and are the defacto center of action ... and hope.</p>
`;
  var blogcite13 = `

  <p class="cite">1. <a href="https://en.convention.parisinfo.com/travel-trade/car-free-day-paris">
  https://en.convention.parisinfo.com/travel-trade/car-free-day-paris</a></p>
    <p class="cite">2<a href="https://www.wired.com/story/at-the-edge-of-the-world-facing-the-end-of-the-world/">
    https://www.wired.com/story/at-the-edge-of-the-world-facing-the-end-of-the-world/</a></p>
  `;
  var blogpost12 = `<p class="firstparagraph">Los Angeles' technological centality has always been overshadowed by Silicon Valley and Seattle; however, Santa Monica's trendy tech hub has begun to make a name for itself with respect to one <strong>hugely important sector: climate-change related technology</strong>.     <p class="quote"> This week, Los Angeles mayor Eric Garcetti joined other leaders, along with activists and business leaders, at the Global Climate Action Summit in San Francisco. The mission? Stop climate change before it destroys the planet, and our species along with it.
  <br /><br />
    But the city is in the midst of a metamorphosis. With fewer, yet stronger storms on the horizon, it’s begun an ambitious plan to cut its reliance on imported water in half by 2025. And it’s emerging as a leader in the frantic international quest to curb emissions—in 2016 alone, it slashed emissions by 11 percent, the equivalent of taking more than 700,000 cars off the road.
    <br /><br />
    We generated 30,000 new green jobs since I've been mayor, so in five years. To put that in perspective, there's 50,000 coal jobs left in America. So this town that’s just 1 percent, roughly, of the US population has created the equivalent of 60 percent of the remaining coal jobs left in America. Appalachia should be doing that, areas that have been hard hit by a recession and not recovered. These are generally good middle class jobs too, not just minimum wage.<sup>1</sup>
    </p>
    <p>The expanse of L.A.'s reach, now touching San Diego, makes climate-friendly commuting a top issue: The two are agglomerating into one city after all, neatly and merely divided by Camp Pendleton. Now, about that ever-elusive high-speed rail system connecting the two ... `;
  var blogcite12 = `
  <p class="cite">1. <a href="https://www.wired.com/story/how-los-angeles-is-helping-lead-the-fight-against-climate-change/">https://www.wired.com/story/how-los-angeles-is-helping-lead-the-fight-against-climate-change/</a></p>
   `;
  var blogpost11 = ` <p class="firstparagraph">World Economic Forum, most notable for its annual convocation of world leaders, works around the clock, with no shortage of resources for socio-economic research:
  </p> <p class="quote"> As technological breakthroughs rapidly shift the frontier between the work tasks performed by humans and those performed by machines and algorithms, global labour markets are likely to undergo major transformations. These transformations, if managed wisely, could lead to a new age of good work, good jobs and improved quality of life for all, but if managed poorly, pose the risk of widening skills gaps, greater inequality and broader polarization. In many ways, the time to shape the future of work is now. The Future of Jobs report provides tools which can support responses to the critical questions confronting businesses, governments and workers in the horizon up to 2022.<sup>1</sup>
  </p>
  <p>One clear take-away from the report features the urgent short-term need to responsibily fill vast holes in the labor market:</p>
  <p class="quote">Machines Will Do More Tasks Than Humans by 2025 but Robot Revolution Will Still Create 58 Million Net New Jobs in Next Five Years:<br /><br />
  <ul><li>
  Latest research from the World Economic Forum forecasts that by 2025, machines will perform more current work tasks than humans, compared to 71% being performed by humans today.</li>
  <li>
  The rapid evolution of machines and algorithms in the workplace could create 133 million new roles in place of 75 million that will be displaced between now and 2022</li><li>
  Urgent challenges include providing reskilling opportunities, enabling remote work and building safety nets to protect at-risk workers and communities
  </li>
  </ul>
  </p>
  <p><strong>... to which I say, <i>H.R. Managers of the World: Unite!</i></strong></p>
  `;
  var blogcite11 = ` 
  <p class="cite">1. <a href="http://reports.weforum.org/future-of-jobs-2018/">http://reports.weforum.org/future-of-jobs-2018/</a></p>
  
  <p class="cite">PDF Download<br /><a href="http://www3.weforum.org/docs/WEF_Future_of_Jobs_2018.pdf">http://www3.weforum.org/docs/WEF_Future_of_Jobs_2018.pdf</a></p>
  `;
  var blogpost10 = `<p class="firstparagraph">
  Invisible upgrades are the true talking points of new mobile device  releases as they hint big things under the hood... Last year's iPhone X may have been alot of hardware show (with the X/8/8plus providing the first A.I.-dedicated chip), but 2018 augurs big things ahead and bigger muscle:
  <p class="quote">
  On Wednesday Apple announced that the neural engine is now significantly more powerful. Last year’s debut model could crank through 600 billion operations per second. The new version can work almost 10 times faster, reaching 5 trillion operations per second. Some of that speedup may come from using smaller transistors inside the A12, with features as small as 7 nanometers.<sup>1</sup>
  </p>
  <p>So, just as Apple tends to future-proof its technology, this year's release does not disappoint the constellation of iOS developers that can take advantage of the tech, with  better battery efficiency ...</p>
  <p class="quote">App developers can play with the power of Apple’s new neural engine through Core ML, a framework the company offers to help programmers deploy machine learning on Apple devices. The company says that this allows developers to run machine learning code nine times faster than on the iPhone X, while using a tenth of the energy.<sup>1</sup>
  </p>
  <p>Thanks to Apple's commitment to A.I., the iPhone Xs,   Xs Max, and   Xr offer all the joys of smart video/camera, processing, augmented reality, --<i>and with battery <strong>savings?</strong>   Ooh L&aacute; L&aacute;!</i>

  `;
  var blogcite10=  `
  <p class="cite">1. <a href="https://www.wired.com/story/apples-latest-iphones-packed-with-ai-smarts"> https://www.wired.com/story/apples-latest-iphones-packed-with-ai-smarts</a></p>
  `;
  var blogpost9 = `<p class="firstparagraph">International hubs of technical specializations--from haptic touchscreens to battery tech--implicates global cooperation--beyond merely rare metals and resources. 
  </p>
  <p class="quote"> Last week, dozens of manufacturing companies testified before US Trade Representatives about how Trump's next round of duties against China could affect them. Some showed concerns of layoffs for American people and harm to US economic interests.<sup>1</sup>
  </p>
  <p>Global Tech presuppposes global trading cooperation primarily because of rare metals. But more importantly, fabrication specialties growing up in foreign <i>Research Parks</i>.  And, entreched technological specializations are a function of the depth of itemized specializations that sprout around universities and public/privately funded research parks, coupled with the technical workforce to put glass to screen.</p>
  <p class="quote">Even if every part was made in the US, an iPhone would cost about $100 more, Kakaes concluded, assuming raw materials were still purchased on global markets.<br /><br />

  The issue is not so much cost of putting an iPhone together, or even the cost per part on paper. The issue is skill, scale, expertise, and infrastructure — all of which require money, time and long-term investment. Unlike other manufacturing jobs that have migrated from the United States, Apple wouldn’t be bringing them “back” so much as starting from scratch. The cost would come in attempting to build a system that’s never been in the US, but has been built over decades abroad.<sup>2</sup>
  </p><p>So, at the end of the day, we can only hope that foreign tech resources along with associated human/social capital would just be left alone from economic tiffs ... Periodic table of rare metals and precious elements aside, the true gems are the diverse people!    
  `;
  var blogcite9=  `
  <p class="cite">1._<a href="https://markets.businessinsider.com/news/stocks/apple-stock-price-slides-trade-war-tensions-overshadow-product-launches-2018-9-1027522247">https://markets.businessinsider.com/news/stocks/apple-stock-price-slides-trade-war-tensions-overshadow-product-launches-2018-9-1027522247</a></p>
  <p class="cite">2._<a href="https://www.vox.com/technology/2018/9/13/17851052/apple-iphone-price-china-trump-us-trade"> https://www.vox.com/technology/2018/9/13/17851052/apple-iphone-price-china-trump-us-trade</a></p>
  `;
  var blogpost8 = `
  <p class="firstparagraph">Vitalik Buterin, architect of Ethereum crypto-contract/currency, presented at the recent TechCrunch Disrupt! conference with no shortage of opinions on the direction of blockchain and crypto-currency/contract investments... This, after the Ethereum (WEI) declines nearly ten-fold along with Bitcoin's 70% drop<sup>1</sup>, along with other major crypto-currencies. </p>
  <p>The story is less dramatic and mysterious than it is simply the natural course of market novelties' <i>transition from Early Adapters to General Acceptance</i>: The underlying value transitions from increasing public awareness to mainstream acceptance, which requires new, ensuing <i>expectations that differ from the previous period</i>. The substance of perceived value dictates actual value. Buterin opines to Bloomberg News...
    <p class="quote"> 
     The blockchain space is getting to the point where there’s a ceiling in sight. If you talk to the average educated person at this point, they probably have heard of blockchain at least once. There isn’t an opportunity for yet another 1,000-times growth in anything in the space anymore ... Growth in Bitcoin and other cryptocurrencies in the blockchain community through its first six or seven years was dependent on marketing and trying to get wider adoption. <br /><br /> 
That strategy is getting close to hitting a dead end.  The next step will be getting people who are already interested in cryptocurrencies to be involved in a more in-depth way. "Go from just people being interested to real applications of real economic activity" [Buterin] said.  <sup>2</sup></p> 
    <img src="dist/img/diffusion.jpg" class="zoom" />
    <p>So, the old expectations generated a very low bar to prove actual utility, whereas present-day collective knowledge demands clearer practical proof; inherently the bar is raised. And now, by technical sweat of the brow, crypto-based fintech now faces the realities of what will be needed for wide-spread use: technical solutions to scalability problems, security issues, and of course speed, availability and consistency of data transfer. Yet, now more importantly, ease-of-mainstream-use. </p>
    <p>For example, Ethereum contract writers must learn a new language, Solidity; and Ethereum currency holders must grapple with browser-to-ledger interfaces like MetaMask, which are far from intuitive for even the most enthusiastic of early adopters!  </p>
    <p> This concept is laid bare in sociological terms, citing Rogers and Shumacher's 1971 article from my Feb. 15 post: the general sociological Early Adopter theory--based on Everett M. Rogers' Diffusion of Innovations theory, describing the timeline of the Innovation Adoption Lifecycle as fairly ordinary, or better stated, fairly historical--again repeating itself.<sup>3</sup> </p>
    `;
  var blogcite8 = ` 
    
    <p class="cite">1. <a href="https://markets.businessinsider.com/currencies/btc-usd"   target="_blank">https://markets.businessinsider.com/currencies/btc-usd
    </a>
    </p> 
    <p class="cite">2. <a href="https://www.bloomberg.com/news/articles/2018-09-08/crypto-growth-nears-ceiling-ethereum-co-founder-buterin-says?utm_campaign=socialflow-organic&utm_medium=social&cmpid=socialflow-twitter-business&utm_content=business&utm_source=twitter"   target="_blank">https://www.bloomberg.com/news/articles/2018-09-08/crypto-growth-nears-ceiling-ethereum-co-founder-buterin-says
    </a>
    </p>  <p class="cite">3. <a href="https://eric.ed.gov/?id=ED065999"   target="_blank">Rogers, E. M., & Shoemaker, F. F. (1971). Communication of Innovations; A Cross-Cultural Approach.
    </a>
    </p> 
     `;  

     var blogpost7 = `<p class="firstparagraph">Crypto-Millionaires one day, Crypto-Middle-class the next.  Crypto-currencies in all forms have sustained a 9-month decline, which most could not have anticipated.  Take for instance, December 2017's $1500 Ether value to recent values of $185<sup>1</sup>, and Bitcoin's November 2017 valuation of just under $20,000 on the CoinDesk Bitcoin Price Index (BPI) down to this week's $6,400.  </p>
     
     <img src="dist/img/cryptocurrency.jpg" class="zoom" />
     <p>The theories are multi-fold:</p>
     <p class="quote">Some have posited that blockchain and cryptocurrency projects might be converting their ether reserves into fiat currencies to meet financial obligations. At face value, this appears plausible, as startups incur many expenses during their growth phase. If a collection of companies liquidated the cryptocurrencies—mostly ether—that they raised in ICOs at the same time, they could exert downward pressure on prices.<sup>2</sup></p>
       <p>Others blame investment psychology ... </p> 
       <p class="quote">It’s possible that the price decline reflects a negative feedback loop, a combination of economics and psychology. As crypto investors sell their holdings, they see that prices are falling. This could spook them into selling even more. This is somewhat like a bank run, except investors lose faith in the value of cryptocurrencies rather than the viability of a financial institution.<sup>2</sup>
       </p>
       <p>Others still, they blame ease-of-use and accesibility ... </p>
       <p class="quote">Cryptocurrency investors (and especially ethereum backers) may be disappointed (paywall) by the low usage of decentralized applications (dapps) like IDEX, Bancor, and CryptoKitties. These apps run on crypto tokens, and thus generate demand for the assets.
<br /><br />
       But when investors visit a cryptocurrency exchange, they aren’t presented with information about the daily active users on various dapps. They’re generally only presented with the price of an asset and a chart of its history.<sup>2</sup>
       </p>
       <p>However one distributes the blame, psychological and economic explanations only fail where sociological explanations offer coherent explanations ... Look no further than my September 10th post ...
       </p>
       `;
     var blogcite7 = `
    
     <p class="cite">1. <a href="https://markets.businessinsider.com/currencies/btc-usd"   target="_blank">https://markets.businessinsider.com/currencies/btc-usd
     </a>
     </p> 
     <p class="cite">2. <a href="https://qz.com/1355945/why-have-cryptocurrencies-like-bitcoin-and-ethereum-fallen-so-much/"   target="_blank">https://qz.com/1355945/why-have-cryptocurrencies-like-bitcoin-and-ethereum-fallen-so-much/
     </a>
     </p>   <p class="cite">2. <a href="https://qz.com/1349207/wall-streets-interest-in-bitcoin-like-ices-bakkt-isnt-boosting-crypto-prices/"   target="_blank">https://qz.com/1349207/wall-streets-interest-in-bitcoin-like-ices-bakkt-isnt-boosting-crypto-prices/
     </a>
     </p> https://qz.com/1349207/wall-streets-interest-in-bitcoin-like-ices-bakkt-isnt-boosting-crypto-prices/
        `;

     var blogpost6 = `
     <p class="firstparagraph">Quantum solutions to computing needs become clearer, and specific uses for research come to light. First and foremost, quantum mechanics offer a realm of solutions that has ever eluded modern science: problem-solving algorithms that face orders of complexity of 40 to 50 orders of magnitude, i.e. Complexity<sup>50</sup> is just a tad too complex for the fast, but straight-line dumb A.I.-based solutions, which are inherent to classificatory machine-learning schema. Blockchain and Directed Acyclic Graphs are less helpful, but find their utility in the unescapably fast ability to <i>share data where data is needed</i><br /><br /></p>
     Manipulations of the quantum realm are not at all intuitive to concepts we learn from the classical world. Less intuitive are the constraints of the data analysis. For example, the quantum metaphor of flipping two coins simultaneously means knowing the "state" of one coin if you know the other coin's state. The one lands on heads, and because it shares an entangled state with the other, <i>you are guaranteed to know the outcome of the second coin</i>. </p>
     <img src="dist/img/quantumScience.jpg"  class="zoom" />
     <p>Image credit: TechCrunch Disrupt! Day 3</p>
     <p>Superconducting devices offer powerful tooling, yet <i>the catch is that the time you have to run calculations is approximately 50 micro-seconds</i>, i.e. the <strong>coherence time of entangled, superposed state</strong>. (a marked improvement from 1990's hardware that yielded coherence time of 1 nano-second). Not exactly enough time to run a long program, especially if you consider just one small algorithm is a series of logical gates that depend sequentially on other logical gates..., let alone an actual program. So then what's the use? The specific uses in academic research are without limit for those problems that present specific, exponential complexity--many cases in biotech, chemistry, and so on. Quantum computing offers a 'burst' of calculations, and nothing more, at least for now. </p>
     <img src="dist/img/quant-python.jpg" class="zoom" />
     <img src="dist/img/quant-python2.jpg" class="zoom" />
     <p>This short python-language program demonstrates quantum manipulation to machine-learning classification distinguishing a dog from a cat</p>
     <p>Image credit: TechCrunch Disrupt! Day 3</p>
     
     <p>Not to be underestimated, quantum calculations operate best when modeling the laws of nature--because nature obeys quantum mechanical rules, beginning with chemistry. After all, quantum analysis simulated the largest molecule last year--and that's no small matter!  </p>
       `;
     var blogcite6 = ` 
       <p class="cite">  TechCrunch Disrupt! Day 3 
       </p>
        `;
  var blogpost5 = `
  <p class="firstparagraph">Machine learning's hey-day not only blossoms, but overtakes many areas of computing solutions if anything else but for the sheer ease of unloading mundane computing tasks. But the most widespread problem is that of non-A.I., non-machine-learning that masquerade as A.I., but are only complex looping algorithms. Much ado about nothing has been the death-knell for more than a few of the Startup Battlefield's contenders. <i>Disrupt's merciless premises abruptly dash dreams, but I guess that's what a public and publicized forum for Peer Review is all about!</i><br /> <br />... to be continued. </p> 
    `;
  var blogcite5 = ` 
    <p class="cite">   TechCrunch Disrupt! Day 3 
    </p>
     `;
  var blogpost4 = `<p class="firstparagraph"><br /> <br />  </p>
  <p class="quote"> <sup>1</sup></p>
  <p> </p> `;
  var blogcite4 = `
  <p class="cite">  <a href=""   target="_blank">
  </a>
  </p>
     `;
  var blogpost3 = `<p class="firstparagraph">Browser URLs are the constant of the web's evolutions over the years. After all, they are the solid, predictable workhorse for transporting web surfers' requests and web servers' responses. But could there be improvements even with this, beyond the HTTPS' security upgrade? Wired reports: </p>
  <p class="quote">Chrome looks ahead to its next 10 years, the team is mulling its most controversial initiative yet: fundamentally rethinking URLs across the web.
<br /><br />
  Uniform Resource Locators are the familiar web addresses you use every day. They are listed in the web's DNS address book and direct browsers to the right Internet Protocol addresses that identify and differentiate web servers. <br /><br />
  As web functionality has expanded, URLs have increasingly become unintelligible strings of gibberish combining components from third-parties or being masked by link shorteners and redirect schemes. And on mobile devices there isn't room to display much of a URL at all.  The resulting opacity has been a boon for cyber criminals who build malicious sites to exploit the confusion.
  <br /><br />
  The focus right now, they say, is on identifying all the ways people use URLs to try to find an alternative that will enhance security and identity integrity on the web while also adding convenience for everyday tasks like sharing links on mobile devices.<sup>1</sup></p>
  <p>Bring it on, Google, and save us from the increasing flood of &;@# ampersands &% and excessive #_&% URL parameters that grow longer and longer ... and longer ... but how?</p> `;
  var blogcite3 = `
  <p class="cite">1 <a href="https://www.wired.com/story/google-wants-to-kill-the-url/"   target="_blank">https://www.wired.com/story/google-wants-to-kill-the-url/
  </a>
  </p>
  `;
  var blogpost2 = `<p class="firstparagraph"> </p>
  <p class="quote"> <sup>1</sup></p>
  <p> </p>`;
  var blogcite2 = `
  <p class="cite"> <a href=""   target="_blank">
  </a>
  </p>
  `;


  var blogpost1 = `<p class="quote"><i>At first the computer drew a blank; seconds later, it decided it was dealing with another car, expecting it to drive away and require no special action. Only at the last second was a clear identification found – a woman with a bike, shopping bags hanging confusingly from handlebars, doubtless assuming the Volvo would route around her as any ordinary vehicle would. Barred from taking evasive action on its own, the computer abruptly handed control back to its human master, but the master wasn’t paying attention. Elaine Herzberg, aged 49, was struck and killed, leaving more reflective members of the tech community with two uncomfortable questions: was this algorithmic tragedy inevitable? And how used to such incidents would we, should we, be prepared to get?</i><sup>1 </sup></p>
  <p class="firstparagraph">Mistakes in code are a given. But not inevitable, with less haste, more testing, and more corrective reduncencies. This however is not the trend:</p>
  <p class="quote">“In some ways we’ve lost agency. When programs pass into code and code passes into algorithms and then algorithms start to create new algorithms, it gets farther and farther from human agency. Software is released into a code universe which no one can fully understand.”<sup> </sup></p>
  <p></p>
    `;
  var blogcite1 = `
  <p class="cite">  <a href="https://www.theguardian.com/technology/2018/aug/29/coding-algorithms-frankenalgos-program-danger"   target="_blank">https://www.theguardian.com/technology/2018/aug/29/coding-algorithms-frankenalgos-program-danger
  </a>
  </p>
    `;

  var url = [  
    {
      id: '25',
      did: '9-29-18',
      date: 'September 29th, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Real-Time, 21st Web-Apps\'s',
      post: blogpost25,
      blogcite: blogcite25
    },

    {
      id: '24',
      did: '9-28-18',
      date: 'September 28th, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Open Source Democracy: Part II <br />Data Visualization for All',
      post: blogpost24,
      blogcite: blogcite24
    },  
    {
      id: '23',
      did: '9-27-18',
      date: 'September 27th, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Open Source Democracy: Part I <br />The Primacy of the Jupyter Notebook',
      post: blogpost23,
      blogcite: blogcite23
    },
      {
			 id: "20",
       did: "09-24-18",
       date: "September 24, 2018",
       author: "Thomas Maestas",
       cat3: "A.I.Now.",
       title: "Sociology Tomorrow!",
       post: blogpost20,
       blogcite: blogcite20
    }, 
			{
				id: "19",
				did: "09-22-18",
				date: "September 22-23, 2018 ",
				author: "Thomas Maestas",
				cat3: "A.I.Now.",
				title: "A.I. Personalities: Techanthropormorphism Misgivings",
				post: blogpost19,
				blogcite: blogcite19
			}, 
        {
    id: '18',
    did: '09-21-18',
    date: 'September 21, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Musing Blockchain',
    title: 'On the Other Side of the Coin: Part IV<br />Democratized Markets',
    post: blogpost18,
    blogcite: blogcite18
  },
    {
    id: '17',
    did: '09-20-18',
    date: 'September 20, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Musing Blockchain',
    title: 'On the Other Side of the Coin: Part III<br />The Long, Resurgent Road Forward',
    post: blogpost17,
    blogcite: blogcite17
  }, {
    id: '16',
    did: '09-19-18',
    date: 'September 19, 2018',
    author: 'by Thomas Maestas',
    cat3: 'Musing Blockchain',
    title: 'On the Other Side of the Coin: Part II<br />Altering Crypto-Market States from Technology Advancements Help Determine the Wide Crypto-Currency Variances between Ripple Coin, Bitcoin, and Ethereum',
      post: blogpost16,
      blogcite: blogcite16
    },
    {
      id: '15',
      did: '09-18-18',
      date: 'September 18, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'On the Other Side of the Coin: Part I<br />SEC Concerns About the Top Three Crypto-Currencies',
        post: blogpost15,
        blogcite: blogcite15
      }, {
      id: '14',
      did: '09-17-18',
      date: 'September 17, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Den Haague Security',
      post: blogpost14,
      blogcite: blogcite14
    },
    {
      id: '13',
      did: '09-15-18',
      date: 'September 15-16, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The End of Traffic Jams, Part II: <br />A Car-Free Paris',
      post: blogpost13,
      blogcite: blogcite13
    },
    {
      id: '12',
      did: '09-14-18',
      date: 'September 14, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'The End of Traffic Jams, Part I: <br />A Green Los Angeles',
      post: blogpost12,
      blogcite: blogcite12
    },
    {
      id: '11',
      did: '09-13-18',
      date: 'September 13, 2018',
      author: ' ',
      cat3: ' ',
      title: ' ',
      post: blogpost11,
      blogcite: blogcite11
    },
    {
      id: '10',
      did: '09-12-18',
      date: 'September 12, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now.',
      title: 'Apple\'s New A12 Chip with A.I. Neural Engine:<br /> Ooh L&aacute; L&aacute;!',
      post: blogpost10,
      blogcite: blogcite10
    },
    {
      id: '9',
      did: '09-11-18',
      date: 'September 11, 2018',
      author: 'Thomas Maestas',
      cat3: ' ',
      title: ' ',
      post: blogpost9,
      blogcite: blogcite9
    },
    {
      id: '8',
      did: '09-10-18',
      date: 'September 10, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'Where Did All the Crypto-Cash Go? Part II:<br />Expectations of Speculation',
      post: blogpost8,
      blogcite: blogcite8
    },
    {
      id: '7',
      did: '09-08-18',
      date: 'September 8-9, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Where Did All the Crypto-Cash Go? Part I:<br />Why the Long Crash ...',
      post: blogpost7,
      blogcite: blogcite7
    },
    {
      id: '6',
      did: '09-07-18',
      date: 'September 7, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Quantum Data',
      title: 'Reports from TechCrunch Disrupt! Part III<br />Quanta',
      post: blogpost6,
      blogcite: blogcite6
    },
    {
      id: '5',
      did: '09-06-18',
      date: 'September 6, 2018',
      author: 'by Thomas Maestas',
      cat3: 'A.I.Now',
      title: 'Reports from TechCrunch Disrupt! Part II<br />Artificial Intelligence',
      post: blogpost5,
      blogcite: blogcite5
    },
    {
      id: '4',
      did: '09-05-18',
      date: 'September 5, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Musing Blockchain',
      title: 'Reports from TechCrunch Disrupt! Part I<br />Blockchain',
      post: blogpost4,
      blogcite: blogcite4
    },
    {
      id: '3',
      did: '09-04-18',
      date: 'September 4, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Sociology Tomorrow!',
      title: 'The Cumbersome, Multipurpose and Sometimes Unsecure URL ...<br />Is There a Better way?',
      post: blogpost3,
      blogcite: blogcite3
    },
    {
      id: '2',
      did: '09-03-18',
      date: 'September 3, 2018',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: '',
      post: blogpost2,
      blogcite: blogcite2
    },
    {
      id: '1',
      did: '09-01-18',
      date: 'September 1-2, 2018<br />Weekend',
      author: 'by Thomas Maestas',
      cat3: 'Web Dev Affairs',
      title: 'Mistaken identities',
      post: blogpost1,
      blogcite: blogcite1
    }

  ];

  for (i = 0; i < url.length; i++) {
    var cat = ` 
    <div id="${url[i].did}" class="blogDiv"> 
    <hr />  
    <a href="#top"><button>Top</button></a>  
    <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
    <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5> 
    <p id="author" class="  author">${url[i].author}</p>   
    <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
    <h6  id="title"   class="dailytitle chapternumber">${url[i].title}</h6>
    <br />
    <div id="post">${url[i].post}
    </div>
    <div id="blogcite">${url[i].blogcite}
    </div>`;
    document.getElementById("paragraph-sep").innerHTML += cat;
  }

  var i;
  for (i = 0; i < url.length; i++) {
    var catMod = `
  <div id="mod_${url[i].did}" class="blogDivMod"> 
  <hr />  
  <a href="#top-mod"><button>Top</button></a>   
  <h4 class="title dailytech longtitle">OUR DAILY TECH:</h4>  
  <h5 id="cat3" class="  subdailytech">${url[i].cat3}</h5>  
  <p id="author" class="  author">${url[i].author}</p>   
  <h6  id="date" class="  chapternumber">${url[i].date}</h6>    
  <h6  id="title"   class="dailytitle cha-pternumber">${url[i].title}</h6>
  <br />
  <div id="post">${url[i].post}</div>
  </div>
 <div id="blogcite">${url[i].blogcite}
 </div>`;
    document.getElementById("paragraph-sep-mod").innerHTML += catMod;
  }

  console.log('blogger-sep'); 
  // console.log(angular.toJson(url));
};
bloggerSep();
var inputString = "";

function updateString(value) { 
    inputString += value; 
    document.forms[0].input.value = inputString; 
}

var innerform = document.querySelector("#calc");
// calculator style
innerform.style.border = 'solid 5px grey';
innerform.style.margin = '0 10%'
innerform.style.padding = '5%'

innerform.innerHTML = `
    <form id="innerform" action=""> 
    <input type="button" name="seven" id="bu" value="7" onclick="updateString('7')" /> 
    <input type="button" name="eight" id="bu" value="8" onclick="updateString('8')" /> 
    <input type="button" name="nine" id="bu" value="9" onclick="updateString('9')" /> 
    <input type="button" name="div" id="bu" value="/" onclick="updateString('/')" />
    <br />
    <br />
    
    <input type="button" name="four" id="bu" value="4" onclick="updateString('4')" /> 
    <input type="button" name="five" id="bu" value="5" onclick="updateString('5')" /> 
    <input type="button" name="six" id="bu" value="6" onclick="updateString('6')" />  
    <input type="button" name="mult" id="bu" value="*" onclick="updateString('*')" />
    <br />
    <br />
    
    <input type="button" name="one" id="bu" value="1" onclick="updateString('1')" /> 
    <input type="button" name="two" id="bu" value="2" onclick="updateString('2')" /> 
    <input type="button" name="three" id="bu" value="3" onclick="updateString('3')" /> 
    <input type="button" name="plus" id="bu" value="+" onclick="updateString('+')" />
     <br />
    <br />
    
    <input type="button" name="zero" id="bu" value="0" onclick="updateString('0')" /> 
    <input type="button" name="dot" id="bu" value="." onclick="updateString('.')" /> 
    <input type="button" name="clear" id="bu" value="C" onclick="document.forms[0].input.value='';inputString=''" /> 
    <input type="button" name="minus" id="bu" value="-" onclick="updateString('-')" />
    <br />
    <br />
    
    <input type="button" name="openparenth" id="bu" value="(" onclick="updateString('(')" /> 
    <input type="button" name="closeparenth" id="bu" value=")" onclick="updateString(')')" /> 
    <input type="button" name="power" id="bu" value="^" onclick="updateString('^')" />  
    <input type="button" name="modulus" id="bu" value="%" onclick="updateString('%')" />
   
    <br />
    <br />
    
    <input type="button" style="background-color:blue;color:white;" name="calc" id="bu" value="=" onclick="document.forms[0].input.value = eval(inputString); inputString=''"
    /> 
    <input type="button" name="mem" id="bu" value="M +" onclick="document.forms[0].storedValue.value = parseInt(document.forms[0].storedValue.value) + parseInt(document.forms[0].input.value)"
    /> 
    <input type="button" name="recall" id="bu" value="MRC" onclick="updateString(document.forms[0].storedValue.value)" /> 
    <input type="button" name="memClear" id="bu" value="MC" onclick="document.forms[0].storedValue.value=0" /><br /> 
    <input type="hidden" name="storedValue" value="0" /> 
    <input id="window" type="text" size="40" name="input" />
     
    </form> 
    <!-- Calculator Deux -->
    <div id="innerform2"></div>
    `;

//////////////////////////////////////////////////////////
            // CALCULATOR2 //
/**
 * Calculator function constructor.
 * @constructor
 */
function Calculator() {
  this.total = 0;
}

/**
 * Adds value to current total. 
 * @param {number} number
 * @returns {*}
 */
Calculator.prototype.add = function (number) {
  return this.total += number;
};

/**
 * Subtracts number from current total. 
 * @param {number} number
 * @returns {*}
 */
Calculator.prototype.subtract = function (number) {
  return this.total -= number;
};

/**
 * Multiplies value to current total. 
 * @param {number} number
 * @returns {*}
 */
Calculator.prototype.multiply = function (number) {
  return this.total *= number;
};

/**
 * Divides value to current total. 
 * @param {number} number
 * @returns {*}
 */

Calculator.prototype.divide = function (number) {
  if (number === 0) {
    throw new Error('Cannot divide by zero');
  }

  return this.total /= number;
};

/**
 * Modulus value to current. 
 * @param {number} number
 * @returns {%}
 */
Calculator.prototype.modulus = function (number) {
  return this.total % number;
}

//////////////////////////////////////////////////////////
            // RESULTS //

/**
 * Calculates result for a simple mathematical expression.
 *
 * @param {string} inputValue
 */
function calculate(inputValue) {
  const expression = /\+|\-|\*|\/|\%/;
  const numbers = inputValue.split(expression);

  const numberA = parseInt(numbers[0]);
  const numberB = parseInt(numbers[1]);

  const operation = inputValue.match(expression);

  if (Number.isNaN(numberA) || Number.isNaN(numberB) || operation === null) {
    updateResult('Expression not recognized: must have 2 nums & an operator');
    return;
  }

  const calculator = new Calculator();
  calculator.add(numberA);

  let result;
  switch(operation[0]) {
    case '+':
      result = calculator.add(numberB);
      break;
    case '-':
      result = calculator.subtract(numberB);
      break;
    case '*':
      result = calculator.multiply(numberB);
      break;
    case '/':
      result = calculator.divide(numberB);
      break;
    case '%':
      result = calculator.modulus(numberB);
      break;
    default:
      result = 'Operation not recognized: must be +,-,*,/,%';
  }

  updateResult(result);
}

/**
 * Updates result in DOM element.
 * @param {string} result
 */
function updateResult(result) {
  const element = document.querySelector('#result-calculator');

  if (element) {
    element.innerText = result;
  }
}


var innerform2 = document.querySelector("#innerform2");
innerform2.innerHTML = ` 
<hr>
<div>
<style>
.title-calculator, h4 {
  color:gold; 
}
input.input {
  max-width:90%;
}
span#result-calculator {
  border:inset 1px white;
  min-width:100px;
  padding:3px 5px;
  color:gold;
}
</style>
<h4>Calculator Deux</h4>
 <input
    class="input"
    type="text"
    title="calculator"
    placeholder="Enter operation"
    value=""
    onchange="calculate(this.value)"
  />

  <div class="result-container">
    <div class="title-calculator">Result</div>
    <span id="result-calculator"></span>
  </div>
  </div>
    `;
// https://d3js.org Version 4.2.1. Copyright 2016 Mike Bostock.
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.d3 = global.d3 || {})));
}(this, function (exports) { 'use strict';

  var version = "4.2.1";

  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function bisector(compare) {
    if (compare.length === 1) compare = ascendingComparator(compare);
    return {
      left: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1;
          else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (lo == null) lo = 0;
        if (hi == null) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid;
          else lo = mid + 1;
        }
        return lo;
      }
    };
  }

  function ascendingComparator(f) {
    return function(d, x) {
      return ascending(f(d), x);
    };
  }

  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;

  function descending(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  }

  function number(x) {
    return x === null ? NaN : +x;
  }

  function variance(array, f) {
    var n = array.length,
        m = 0,
        a,
        d,
        s = 0,
        i = -1,
        j = 0;

    if (f == null) {
      while (++i < n) {
        if (!isNaN(a = number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }

    else {
      while (++i < n) {
        if (!isNaN(a = number(f(array[i], i, array)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }

    if (j > 1) return s / (j - 1);
  }

  function deviation(array, f) {
    var v = variance(array, f);
    return v ? Math.sqrt(v) : v;
  }

  function extent(array, f) {
    var i = -1,
        n = array.length,
        a,
        b,
        c;

    if (f == null) {
      while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }

    else {
      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }
      while (++i < n) if ((b = f(array[i], i, array)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }

    return [a, c];
  }

  var array = Array.prototype;

  var slice = array.slice;
  var map = array.map;

  function constant(x) {
    return function() {
      return x;
    };
  }

  function identity(x) {
    return x;
  }

  function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

    var i = -1,
        n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
        range = new Array(n);

    while (++i < n) {
      range[i] = start + i * step;
    }

    return range;
  }

  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e2 = Math.sqrt(2);
  function ticks(start, stop, count) {
    var step = tickStep(start, stop, count);
    return range(
      Math.ceil(start / step) * step,
      Math.floor(stop / step) * step + step / 2, // inclusive
      step
    );
  }

  function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count),
        step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
        error = step0 / step1;
    if (error >= e10) step1 *= 10;
    else if (error >= e5) step1 *= 5;
    else if (error >= e2) step1 *= 2;
    return stop < start ? -step1 : step1;
  }

  function sturges(values) {
    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
  }

  function histogram() {
    var value = identity,
        domain = extent,
        threshold = sturges;

    function histogram(data) {
      var i,
          n = data.length,
          x,
          values = new Array(n);

      for (i = 0; i < n; ++i) {
        values[i] = value(data[i], i, data);
      }

      var xz = domain(values),
          x0 = xz[0],
          x1 = xz[1],
          tz = threshold(values, x0, x1);

      // Convert number of thresholds into uniform thresholds.
      if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);

      // Remove any thresholds outside the domain.
      var m = tz.length;
      while (tz[0] <= x0) tz.shift(), --m;
      while (tz[m - 1] >= x1) tz.pop(), --m;

      var bins = new Array(m + 1),
          bin;

      // Initialize bins.
      for (i = 0; i <= m; ++i) {
        bin = bins[i] = [];
        bin.x0 = i > 0 ? tz[i - 1] : x0;
        bin.x1 = i < m ? tz[i] : x1;
      }

      // Assign data to bins by value, ignoring any outside the domain.
      for (i = 0; i < n; ++i) {
        x = values[i];
        if (x0 <= x && x <= x1) {
          bins[bisectRight(tz, x, 0, m)].push(data[i]);
        }
      }

      return bins;
    }

    histogram.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
    };

    histogram.domain = function(_) {
      return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
    };

    histogram.thresholds = function(_) {
      return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
    };

    return histogram;
  }

  function threshold(array, p, f) {
    if (f == null) f = number;
    if (!(n = array.length)) return;
    if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
    if (p >= 1) return +f(array[n - 1], n - 1, array);
    var n,
        h = (n - 1) * p,
        i = Math.floor(h),
        a = +f(array[i], i, array),
        b = +f(array[i + 1], i + 1, array);
    return a + (b - a) * (h - i);
  }

  function freedmanDiaconis(values, min, max) {
    values = map.call(values, number).sort(ascending);
    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
  }

  function scott(values, min, max) {
    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
  }

  function max(array, f) {
    var i = -1,
        n = array.length,
        a,
        b;

    if (f == null) {
      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    }

    else {
      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
      while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
    }

    return a;
  }

  function mean(array, f) {
    var s = 0,
        n = array.length,
        a,
        i = -1,
        j = n;

    if (f == null) {
      while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;
    }

    else {
      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;
    }

    if (j) return s / j;
  }

  function median(array, f) {
    var numbers = [],
        n = array.length,
        a,
        i = -1;

    if (f == null) {
      while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
    }

    else {
      while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
    }

    return threshold(numbers.sort(ascending), 0.5);
  }

  function merge(arrays) {
    var n = arrays.length,
        m,
        i = -1,
        j = 0,
        merged,
        array;

    while (++i < n) j += arrays[i].length;
    merged = new Array(j);

    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }

    return merged;
  }

  function min(array, f) {
    var i = -1,
        n = array.length,
        a,
        b;

    if (f == null) {
      while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    }

    else {
      while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
      while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
    }

    return a;
  }

  function pairs(array) {
    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [p, p = array[++i]];
    return pairs;
  }

  function permute(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  }

  function scan(array, compare) {
    if (!(n = array.length)) return;
    var i = 0,
        n,
        j = 0,
        xi,
        xj = array[j];

    if (!compare) compare = ascending;

    while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;

    if (compare(xj, xj) === 0) return j;
  }

  function shuffle(array, i0, i1) {
    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
        t,
        i;

    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0];
      array[m + i0] = array[i + i0];
      array[i + i0] = t;
    }

    return array;
  }

  function sum(array, f) {
    var s = 0,
        n = array.length,
        a,
        i = -1;

    if (f == null) {
      while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.
    }

    else {
      while (++i < n) if (a = +f(array[i], i, array)) s += a;
    }

    return s;
  }

  function transpose(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  }

  function length(d) {
    return d.length;
  }

  function zip() {
    return transpose(arguments);
  }

  var prefix = "$";

  function Map() {}

  Map.prototype = map$1.prototype = {
    constructor: Map,
    has: function(key) {
      return (prefix + key) in this;
    },
    get: function(key) {
      return this[prefix + key];
    },
    set: function(key, value) {
      this[prefix + key] = value;
      return this;
    },
    remove: function(key) {
      var property = prefix + key;
      return property in this && delete this[property];
    },
    clear: function() {
      for (var property in this) if (property[0] === prefix) delete this[property];
    },
    keys: function() {
      var keys = [];
      for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
      return keys;
    },
    values: function() {
      var values = [];
      for (var property in this) if (property[0] === prefix) values.push(this[property]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
      return entries;
    },
    size: function() {
      var size = 0;
      for (var property in this) if (property[0] === prefix) ++size;
      return size;
    },
    empty: function() {
      for (var property in this) if (property[0] === prefix) return false;
      return true;
    },
    each: function(f) {
      for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
    }
  };

  function map$1(object, f) {
    var map = new Map;

    // Copy constructor.
    if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

    // Index array by numeric index or specified key function.
    else if (Array.isArray(object)) {
      var i = -1,
          n = object.length,
          o;

      if (f == null) while (++i < n) map.set(i, object[i]);
      else while (++i < n) map.set(f(o = object[i], i, object), o);
    }

    // Convert object to map.
    else if (object) for (var key in object) map.set(key, object[key]);

    return map;
  }

  function nest() {
    var keys = [],
        sortKeys = [],
        sortValues,
        rollup,
        nest;

    function apply(array, depth, createResult, setResult) {
      if (depth >= keys.length) return rollup != null
          ? rollup(array) : (sortValues != null
          ? array.sort(sortValues)
          : array);

      var i = -1,
          n = array.length,
          key = keys[depth++],
          keyValue,
          value,
          valuesByKey = map$1(),
          values,
          result = createResult();

      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
          values.push(value);
        } else {
          valuesByKey.set(keyValue, [value]);
        }
      }

      valuesByKey.each(function(values, key) {
        setResult(result, key, apply(values, depth, createResult, setResult));
      });

      return result;
    }

    function entries(map, depth) {
      if (++depth > keys.length) return map;
      var array, sortKey = sortKeys[depth - 1];
      if (rollup != null && depth >= keys.length) array = map.entries();
      else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
      return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
    }

    return nest = {
      object: function(array) { return apply(array, 0, createObject, setObject); },
      map: function(array) { return apply(array, 0, createMap, setMap); },
      entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
      key: function(d) { keys.push(d); return nest; },
      sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
      sortValues: function(order) { sortValues = order; return nest; },
      rollup: function(f) { rollup = f; return nest; }
    };
  }

  function createObject() {
    return {};
  }

  function setObject(object, key, value) {
    object[key] = value;
  }

  function createMap() {
    return map$1();
  }

  function setMap(map, key, value) {
    map.set(key, value);
  }

  function Set() {}

  var proto = map$1.prototype;

  Set.prototype = set.prototype = {
    constructor: Set,
    has: proto.has,
    add: function(value) {
      value += "";
      this[prefix + value] = value;
      return this;
    },
    remove: proto.remove,
    clear: proto.clear,
    values: proto.keys,
    size: proto.size,
    empty: proto.empty,
    each: proto.each
  };

  function set(object, f) {
    var set = new Set;

    // Copy constructor.
    if (object instanceof Set) object.each(function(value) { set.add(value); });

    // Otherwise, assume it’s an array.
    else if (object) {
      var i = -1, n = object.length;
      if (f == null) while (++i < n) set.add(object[i]);
      else while (++i < n) set.add(f(object[i], i, object));
    }

    return set;
  }

  function keys(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  }

  function values(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  }

  function entries(map) {
    var entries = [];
    for (var key in map) entries.push({key: key, value: map[key]});
    return entries;
  }

  function uniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1) max = min, min = 0;
    else max -= min;
    return function() {
      return Math.random() * max + min;
    };
  }

  function normal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function() {
      var y;

      // If available, use the second previously-generated uniform random.
      if (x != null) y = x, x = null;

      // Otherwise, generate a new x and y.
      else do {
        x = Math.random() * 2 - 1;
        y = Math.random() * 2 - 1;
        r = x * x + y * y;
      } while (!r || r > 1);

      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
  }

  function logNormal() {
    var randomNormal = normal.apply(this, arguments);
    return function() {
      return Math.exp(randomNormal());
    };
  }

  function irwinHall(n) {
    return function() {
      for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
      return sum;
    };
  }

  function bates(n) {
    var randomIrwinHall = irwinHall(n);
    return function() {
      return randomIrwinHall() / n;
    };
  }

  function exponential(lambda) {
    return function() {
      return -Math.log(1 - Math.random()) / lambda;
    };
  }

  function linear(t) {
    return +t;
  }

  function quadIn(t) {
    return t * t;
  }

  function quadOut(t) {
    return t * (2 - t);
  }

  function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
  }

  function cubicIn(t) {
    return t * t * t;
  }

  function cubicOut(t) {
    return --t * t * t + 1;
  }

  function easeCubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
  }

  var exponent = 3;

  var polyIn = (function custom(e) {
    e = +e;

    function polyIn(t) {
      return Math.pow(t, e);
    }

    polyIn.exponent = custom;

    return polyIn;
  })(exponent);

  var polyOut = (function custom(e) {
    e = +e;

    function polyOut(t) {
      return 1 - Math.pow(1 - t, e);
    }

    polyOut.exponent = custom;

    return polyOut;
  })(exponent);

  var polyInOut = (function custom(e) {
    e = +e;

    function polyInOut(t) {
      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
    }

    polyInOut.exponent = custom;

    return polyInOut;
  })(exponent);

  var pi = Math.PI;
  var halfPi = pi / 2;
  function sinIn(t) {
    return 1 - Math.cos(t * halfPi);
  }

  function sinOut(t) {
    return Math.sin(t * halfPi);
  }

  function sinInOut(t) {
    return (1 - Math.cos(pi * t)) / 2;
  }

  function expIn(t) {
    return Math.pow(2, 10 * t - 10);
  }

  function expOut(t) {
    return 1 - Math.pow(2, -10 * t);
  }

  function expInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
  }

  function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t);
  }

  function circleOut(t) {
    return Math.sqrt(1 - --t * t);
  }

  function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
  }

  var b1 = 4 / 11;
  var b2 = 6 / 11;
  var b3 = 8 / 11;
  var b4 = 3 / 4;
  var b5 = 9 / 11;
  var b6 = 10 / 11;
  var b7 = 15 / 16;
  var b8 = 21 / 22;
  var b9 = 63 / 64;
  var b0 = 1 / b1 / b1;
  function bounceIn(t) {
    return 1 - bounceOut(1 - t);
  }

  function bounceOut(t) {
    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
  }

  function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
  }

  var overshoot = 1.70158;

  var backIn = (function custom(s) {
    s = +s;

    function backIn(t) {
      return t * t * ((s + 1) * t - s);
    }

    backIn.overshoot = custom;

    return backIn;
  })(overshoot);

  var backOut = (function custom(s) {
    s = +s;

    function backOut(t) {
      return --t * t * ((s + 1) * t + s) + 1;
    }

    backOut.overshoot = custom;

    return backOut;
  })(overshoot);

  var backInOut = (function custom(s) {
    s = +s;

    function backInOut(t) {
      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
    }

    backInOut.overshoot = custom;

    return backInOut;
  })(overshoot);

  var tau = 2 * Math.PI;
  var amplitude = 1;
  var period = 0.3;
  var elasticIn = (function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

    function elasticIn(t) {
      return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
    }

    elasticIn.amplitude = function(a) { return custom(a, p * tau); };
    elasticIn.period = function(p) { return custom(a, p); };

    return elasticIn;
  })(amplitude, period);

  var elasticOut = (function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

    function elasticOut(t) {
      return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
    }

    elasticOut.amplitude = function(a) { return custom(a, p * tau); };
    elasticOut.period = function(p) { return custom(a, p); };

    return elasticOut;
  })(amplitude, period);

  var elasticInOut = (function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

    function elasticInOut(t) {
      return ((t = t * 2 - 1) < 0
          ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
          : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
    }

    elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
    elasticInOut.period = function(p) { return custom(a, p); };

    return elasticInOut;
  })(amplitude, period);

  function area(polygon) {
    var i = -1,
        n = polygon.length,
        a,
        b = polygon[n - 1],
        area = 0;

    while (++i < n) {
      a = b;
      b = polygon[i];
      area += a[1] * b[0] - a[0] * b[1];
    }

    return area / 2;
  }

  function centroid(polygon) {
    var i = -1,
        n = polygon.length,
        x = 0,
        y = 0,
        a,
        b = polygon[n - 1],
        c,
        k = 0;

    while (++i < n) {
      a = b;
      b = polygon[i];
      k += c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }

    return k *= 3, [x / k, y / k];
  }

  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
  // right, +y is up). Returns a positive value if ABC is counter-clockwise,
  // negative if clockwise, and zero if the points are collinear.
  function cross(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }

  function lexicographicOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }

  // Computes the upper convex hull per the monotone chain algorithm.
  // Assumes points.length >= 3, is sorted by x, unique in y.
  // Returns an array of indices into points in left-to-right order.
  function computeUpperHullIndexes(points) {
    var n = points.length,
        indexes = [0, 1],
        size = 2;

    for (var i = 2; i < n; ++i) {
      while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
      indexes[size++] = i;
    }

    return indexes.slice(0, size); // remove popped points
  }

  function hull(points) {
    if ((n = points.length) < 3) return null;

    var i,
        n,
        sortedPoints = new Array(n),
        flippedPoints = new Array(n);

    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
    sortedPoints.sort(lexicographicOrder);
    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

    var upperIndexes = computeUpperHullIndexes(sortedPoints),
        lowerIndexes = computeUpperHullIndexes(flippedPoints);

    // Construct the hull polygon, removing possible duplicate endpoints.
    var skipLeft = lowerIndexes[0] === upperIndexes[0],
        skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
        hull = [];

    // Add upper hull in right-to-l order.
    // Then add lower hull in left-to-right order.
    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

    return hull;
  }

  function contains(polygon, point) {
    var n = polygon.length,
        p = polygon[n - 1],
        x = point[0], y = point[1],
        x0 = p[0], y0 = p[1],
        x1, y1,
        inside = false;

    for (var i = 0; i < n; ++i) {
      p = polygon[i], x1 = p[0], y1 = p[1];
      if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
      x0 = x1, y0 = y1;
    }

    return inside;
  }

  function length$1(polygon) {
    var i = -1,
        n = polygon.length,
        b = polygon[n - 1],
        xa,
        ya,
        xb = b[0],
        yb = b[1],
        perimeter = 0;

    while (++i < n) {
      xa = xb;
      ya = yb;
      b = polygon[i];
      xb = b[0];
      yb = b[1];
      xa -= xb;
      ya -= yb;
      perimeter += Math.sqrt(xa * xa + ya * ya);
    }

    return perimeter;
  }

var   pi$1 = Math.PI;
var   tau$1 = 2 * pi$1;
  var epsilon = 1e-6;
  var tauEpsilon = tau$1 - epsilon;
  function Path() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null; // end of current subpath
    this._ = [];
  }

  function path() {
    return new Path;
  }

  Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function(x, y) {
      this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y);
    },
    closePath: function() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._.push("Z");
      }
    },
    lineTo: function(x, y) {
      this._.push("L", this._x1 = +x, ",", this._y1 = +y);
    },
    quadraticCurveTo: function(x1, y1, x, y) {
      this._.push("Q", +x1, ",", +y1, ",", this._x1 = +x, ",", this._y1 = +y);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
      this._.push("C", +x1, ",", +y1, ",", +x2, ",", +y2, ",", this._x1 = +x, ",", this._y1 = +y);
    },
    arcTo: function(x1, y1, x2, y2, r) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
      var x0 = this._x1,
          y0 = this._y1,
          x21 = x2 - x1,
          y21 = y2 - y1,
          x01 = x0 - x1,
          y01 = y0 - y1,
          l01_2 = x01 * x01 + y01 * y01;

      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);

      // Is this path empty? Move to (x1,y1).
      if (this._x1 === null) {
        this._.push(
          "M", this._x1 = x1, ",", this._y1 = y1
        );
      }

      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      else if (!(l01_2 > epsilon));

      // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
      // Equivalently, is (x1,y1) coincident with (x2,y2)?
      // Or, is the radius zero? Line to (x1,y1).
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
        this._.push(
          "L", this._x1 = x1, ",", this._y1 = y1
        );
      }

      // Otherwise, draw an arc!
      else {
        var x20 = x2 - x0,
            y20 = y2 - y0,
            l21_2 = x21 * x21 + y21 * y21,
            l20_2 = x20 * x20 + y20 * y20,
            l21 = Math.sqrt(l21_2),
            l01 = Math.sqrt(l01_2),
            l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
            t01 = l / l01,
            t21 = l / l21;

        // If the start tangent is not coincident with (x0,y0), line to.
        if (Math.abs(t01 - 1) > epsilon) {
          this._.push(
            "L", x1 + t01 * x01, ",", y1 + t01 * y01
          );
        }

        this._.push(
          "A", r, ",", r, ",0,0,", +(y01 * x20 > x01 * y20), ",", this._x1 = x1 + t21 * x21, ",", this._y1 = y1 + t21 * y21
        );
      }
    },
    arc: function(x, y, r, a0, a1, ccw) {
      x = +x, y = +y, r = +r;
      var dx = r * Math.cos(a0),
          dy = r * Math.sin(a0),
          x0 = x + dx,
          y0 = y + dy,
          cw = 1 ^ ccw,
          da = ccw ? a0 - a1 : a1 - a0;

      // Is the radius negative? Error.
      if (r < 0) throw new Error("negative radius: " + r);

      // Is this path empty? Move to (x0,y0).
      if (this._x1 === null) {
        this._.push(
          "M", x0, ",", y0
        );
      }

      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._.push(
          "L", x0, ",", y0
        );
      }

      // Is this arc empty? We’re done.
      if (!r) return;

      // Is this a complete circle? Draw two arcs to complete the circle.
      if (da > tauEpsilon) {
        this._.push(
          "A", r, ",", r, ",0,1,", cw, ",", x - dx, ",", y - dy,
          "A", r, ",", r, ",0,1,", cw, ",", this._x1 = x0, ",", this._y1 = y0
        );
      }

      // Otherwise, draw an arc!
      else {
        if (da < 0) da = da % tau$1 + tau$1;
        this._.push(
          "A", r, ",", r, ",0,", +(da >= pi$1), ",", cw, ",", this._x1 = x + r * Math.cos(a1), ",", this._y1 = y + r * Math.sin(a1)
        );
      }
    },
    rect: function(x, y, w, h) {
      this._.push("M", this._x0 = this._x1 = +x, ",", this._y0 = this._y1 = +y, "h", +w, "v", +h, "h", -w, "Z");
    },
    toString: function() {
      return this._.join("");
    }
  };

  function tree_add(d) {
    var x = +this._x.call(null, d),
        y = +this._y.call(null, d);
    return add(this.cover(x, y), x, y, d);
  }

  function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

    var parent,
        node = tree._root,
        leaf = {data: d},
        x0 = tree._x0,
        y0 = tree._y0,
        x1 = tree._x1,
        y1 = tree._y1,
        xm,
        ym,
        xp,
        yp,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return tree._root = leaf, tree;

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
    return parent[j] = node, parent[i] = leaf, tree;
  }

  function addAll(data) {
    var d, i, n = data.length,
        x,
        y,
        xz = new Array(n),
        yz = new Array(n),
        x0 = Infinity,
        y0 = Infinity,
        x1 = -Infinity,
        y1 = -Infinity;

    // Compute the points and their extent.
    for (i = 0; i < n; ++i) {
      if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
      xz[i] = x;
      yz[i] = y;
      if (x < x0) x0 = x;
      if (x > x1) x1 = x;
      if (y < y0) y0 = y;
      if (y > y1) y1 = y;
    }

    // If there were no (valid) points, inherit the existing extent.
    if (x1 < x0) x0 = this._x0, x1 = this._x1;
    if (y1 < y0) y0 = this._y0, y1 = this._y1;

    // Expand the tree to cover the new points.
    this.cover(x0, y0).cover(x1, y1);

    // Add the new points.
    for (i = 0; i < n; ++i) {
      add(this, xz[i], yz[i], data[i]);
    }

    return this;
  }

  function tree_cover(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

    var x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1;

    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1;
      y1 = (y0 = Math.floor(y)) + 1;
    }

    // Otherwise, double repeatedly to cover.
    else if (x0 > x || x > x1 || y0 > y || y > y1) {
      var z = x1 - x0,
          node = this._root,
          parent,
          i;

      switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
        case 0: {
          do parent = new Array(4), parent[i] = node, node = parent;
          while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
          break;
        }
        case 1: {
          do parent = new Array(4), parent[i] = node, node = parent;
          while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
          break;
        }
        case 2: {
          do parent = new Array(4), parent[i] = node, node = parent;
          while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
          break;
        }
        case 3: {
          do parent = new Array(4), parent[i] = node, node = parent;
          while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
          break;
        }
      }

      if (this._root && this._root.length) this._root = node;
    }

    // If the quadtree covers the point already, just return.
    else return this;

    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
  }

  function tree_data() {
    var data = [];
    this.visit(function(node) {
      if (!node.length) do data.push(node.data); while (node = node.next)
    });
    return data;
  }

  function tree_extent(_) {
    return arguments.length
        ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
        : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
  }

  function Quad(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
  }

  function tree_find(x, y, radius) {
    var data,
        x0 = this._x0,
        y0 = this._y0,
        x1,
        y1,
        x2,
        y2,
        x3 = this._x1,
        y3 = this._y1,
        quads = [],
        node = this._root,
        q,
        i;

    if (node) quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null) radius = Infinity;
    else {
      x0 = x - radius, y0 = y - radius;
      x3 = x + radius, y3 = y + radius;
      radius *= radius;
    }

    while (q = quads.pop()) {

      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node)
          || (x1 = q.x0) > x3
          || (y1 = q.y0) > y3
          || (x2 = q.x1) < x0
          || (y2 = q.y1) < y0) continue;

      // Bisect the current quadrant.
      if (node.length) {
        var xm = (x1 + x2) / 2,
            ym = (y1 + y2) / 2;

        quads.push(
          new Quad(node[3], xm, ym, x2, y2),
          new Quad(node[2], x1, ym, xm, y2),
          new Quad(node[1], xm, y1, x2, ym),
          new Quad(node[0], x1, y1, xm, ym)
        );

        // Visit the closest quadrant first.
        if (i = (y >= ym) << 1 | (x >= xm)) {
          q = quads[quads.length - 1];
          quads[quads.length - 1] = quads[quads.length - 1 - i];
          quads[quads.length - 1 - i] = q;
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        var dx = x - +this._x.call(null, node.data),
            dy = y - +this._y.call(null, node.data),
            d2 = dx * dx + dy * dy;
        if (d2 < radius) {
          var d = Math.sqrt(radius = d2);
          x0 = x - d, y0 = y - d;
          x3 = x + d, y3 = y + d;
          data = node.data;
        }
      }
    }

    return data;
  }

  function tree_remove(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

    var parent,
        node = this._root,
        retainer,
        previous,
        next,
        x0 = this._x0,
        y0 = this._y0,
        x1 = this._x1,
        y1 = this._y1,
        x,
        y,
        xm,
        ym,
        right,
        bottom,
        i,
        j;

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return this;

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length) while (true) {
      if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
      if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
      if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
      if (!node.length) break;
      if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
    }

    // Find the point to remove.
    while (node.data !== d) if (!(previous = node, node = node.next)) return this;
    if (next = node.next) delete node.next;

    // If there are multiple coincident points, remove just the point.
    if (previous) return (next ? previous.next = next : delete previous.next), this;

    // If this is the root point, remove it.
    if (!parent) return this._root = next, this;

    // Remove this leaf.
    next ? parent[i] = next : delete parent[i];

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if ((node = parent[0] || parent[1] || parent[2] || parent[3])
        && node === (parent[3] || parent[2] || parent[1] || parent[0])
        && !node.length) {
      if (retainer) retainer[j] = node;
      else this._root = node;
    }

    return this;
  }

  function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
    return this;
  }

  function tree_root() {
    return this._root;
  }

  function tree_size() {
    var size = 0;
    this.visit(function(node) {
      if (!node.length) do ++size; while (node = node.next)
    });
    return size;
  }

  function tree_visit(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
      }
    }
    return this;
  }

  function tree_visitAfter(callback) {
    var quads = [], next = [], q;
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
      var node = q.node;
      if (node.length) {
        var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
        if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
      }
      next.push(q);
    }
    while (q = next.pop()) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
  }

  function defaultX(d) {
    return d[0];
  }

  function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
  }

  function defaultY(d) {
    return d[1];
  }

  function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
  }

  function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
  }

  function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
  }

  function leaf_copy(leaf) {
    var copy = {data: leaf.data}, next = copy;
    while (leaf = leaf.next) next = next.next = {data: leaf.data};
    return copy;
  }

  var treeProto = quadtree.prototype = Quadtree.prototype;

  treeProto.copy = function() {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
        node = this._root,
        nodes,
        child;

    if (!node) return copy;

    if (!node.length) return copy._root = leaf_copy(node), copy;

    nodes = [{source: node, target: copy._root = new Array(4)}];
    while (node = nodes.pop()) {
      for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
          if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
          else node.target[i] = leaf_copy(child);
        }
      }
    }

    return copy;
  };

  treeProto.add = tree_add;
  treeProto.addAll = addAll;
  treeProto.cover = tree_cover;
  treeProto.data = tree_data;
  treeProto.extent = tree_extent;
  treeProto.find = tree_find;
  treeProto.remove = tree_remove;
  treeProto.removeAll = removeAll;
  treeProto.root = tree_root;
  treeProto.size = tree_size;
  treeProto.visit = tree_visit;
  treeProto.visitAfter = tree_visitAfter;
  treeProto.x = tree_x;
  treeProto.y = tree_y;

  var slice$1 = [].slice;

  var noabort = {};

  function Queue(size) {
    if (!(size >= 1)) throw new Error;
    this._size = size;
    this._call =
    this._error = null;
    this._tasks = [];
    this._data = [];
    this._waiting =
    this._active =
    this._ended =
    this._start = 0; // inside a synchronous task callback?
  }

  Queue.prototype = queue.prototype = {
    constructor: Queue,
    defer: function(callback) {
      if (typeof callback !== "function" || this._call) throw new Error;
      if (this._error != null) return this;
      var t = slice$1.call(arguments, 1);
      t.push(callback);
      ++this._waiting, this._tasks.push(t);
      poke(this);
      return this;
    },
    abort: function() {
      if (this._error == null) abort(this, new Error("abort"));
      return this;
    },
    await: function(callback) {
      if (typeof callback !== "function" || this._call) throw new Error;
      this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
      maybeNotify(this);
      return this;
    },
    awaitAll: function(callback) {
      if (typeof callback !== "function" || this._call) throw new Error;
      this._call = callback;
      maybeNotify(this);
      return this;
    }
  };

  function poke(q) {
    if (!q._start) try { start(q); } // let the current task complete
    catch (e) { if (q._tasks[q._ended + q._active - 1]) abort(q, e); } // task errored synchronously
  }

  function start(q) {
    while (q._start = q._waiting && q._active < q._size) {
      var i = q._ended + q._active,
          t = q._tasks[i],
          j = t.length - 1,
          c = t[j];
      t[j] = end(q, i);
      --q._waiting, ++q._active;
      t = c.apply(null, t);
      if (!q._tasks[i]) continue; // task finished synchronously
      q._tasks[i] = t || noabort;
    }
  }

  function end(q, i) {
    return function(e, r) {
      if (!q._tasks[i]) return; // ignore multiple callbacks
      --q._active, ++q._ended;
      q._tasks[i] = null;
      if (q._error != null) return; // ignore secondary errors
      if (e != null) {
        abort(q, e);
      } else {
        q._data[i] = r;
        if (q._waiting) poke(q);
        else maybeNotify(q);
      }
    };
  }

  function abort(q, e) {
    var i = q._tasks.length, t;
    q._error = e; // ignore active callbacks
    q._data = undefined; // allow gc
    q._waiting = NaN; // prevent starting

    while (--i >= 0) {
      if (t = q._tasks[i]) {
        q._tasks[i] = null;
        if (t.abort) try { t.abort(); }
        catch (e) { /* ignore */ }
      }
    }

    q._active = NaN; // allow notification
    maybeNotify(q);
  }

  function maybeNotify(q) {
    if (!q._active && q._call) q._call(q._error, q._data);
  }

  function queue(concurrency) {
    return new Queue(arguments.length ? +concurrency : Infinity);
  }

  function constant$1(x) {
    return function constant() {
      return x;
    };
  }

  var epsilon$1 = 1e-12;
  var pi$2 = Math.PI;
  var halfPi$1 = pi$2 / 2;
  var tau$2 = 2 * pi$2;

  function arcInnerRadius(d) {
    return d.innerRadius;
  }

  function arcOuterRadius(d) {
    return d.outerRadius;
  }

  function arcStartAngle(d) {
    return d.startAngle;
  }

  function arcEndAngle(d) {
    return d.endAngle;
  }

  function arcPadAngle(d) {
    return d && d.padAngle; // Note: optional!
  }

  function asin(x) {
    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);
  }

  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0,
        x32 = x3 - x2, y32 = y3 - y2,
        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
    return [x0 + t * x10, y0 + t * y10];
  }

  // Compute perpendicular offset line of length rc.
  // http://mathworld.wolfram.com/Circle-LineIntersection.html
  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1,
        y01 = y0 - y1,
        lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
        ox = lo * y01,
        oy = -lo * x01,
        x11 = x0 + ox,
        y11 = y0 + oy,
        x10 = x1 + ox,
        y10 = y1 + oy,
        x00 = (x11 + x10) / 2,
        y00 = (y11 + y10) / 2,
        dx = x10 - x11,
        dy = y10 - y11,
        d2 = dx * dx + dy * dy,
        r = r1 - rc,
        D = x11 * y10 - x10 * y11,
        d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
        cx0 = (D * dy - dx * d) / d2,
        cy0 = (-D * dx - dy * d) / d2,
        cx1 = (D * dy + dx * d) / d2,
        cy1 = (-D * dx + dy * d) / d2,
        dx0 = cx0 - x00,
        dy0 = cy0 - y00,
        dx1 = cx1 - x00,
        dy1 = cy1 - y00;

    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1)
    };
  }

  function arc() {
    var innerRadius = arcInnerRadius,
        outerRadius = arcOuterRadius,
        cornerRadius = constant$1(0),
        padRadius = null,
        startAngle = arcStartAngle,
        endAngle = arcEndAngle,
        padAngle = arcPadAngle,
        context = null;

    function arc() {
      var buffer,
          r,
          r0 = +innerRadius.apply(this, arguments),
          r1 = +outerRadius.apply(this, arguments),
          a0 = startAngle.apply(this, arguments) - halfPi$1,
          a1 = endAngle.apply(this, arguments) - halfPi$1,
          da = Math.abs(a1 - a0),
          cw = a1 > a0;

      if (!context) context = buffer = path();

      // Ensure that the outer radius is always larger than the inner radius.
      if (r1 < r0) r = r1, r1 = r0, r0 = r;

      // Is it a point?
      if (!(r1 > epsilon$1)) context.moveTo(0, 0);

      // Or is it a circle or annulus?
      else if (da > tau$2 - epsilon$1) {
        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);
        if (r0 > epsilon$1) {
          context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
          context.arc(0, 0, r0, a1, a0, cw);
        }
      }

      // Or is it a circular or annular sector?
      else {
        var a01 = a0,
            a11 = a1,
            a00 = a0,
            a10 = a1,
            da0 = da,
            da1 = da,
            ap = padAngle.apply(this, arguments) / 2,
            rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),
            rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
            rc0 = rc,
            rc1 = rc,
            t0,
            t1;

        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
        if (rp > epsilon$1) {
          var p0 = asin(rp / r0 * Math.sin(ap)),
              p1 = asin(rp / r1 * Math.sin(ap));
          if ((da0 -= p0 * 2) > epsilon$1) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
          else da0 = 0, a00 = a10 = (a0 + a1) / 2;
          if ((da1 -= p1 * 2) > epsilon$1) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
          else da1 = 0, a01 = a11 = (a0 + a1) / 2;
        }

        var x01 = r1 * Math.cos(a01),
            y01 = r1 * Math.sin(a01),
            x10 = r0 * Math.cos(a10),
            y10 = r0 * Math.sin(a10);

        // Apply rounded corners?
        if (rc > epsilon$1) {
          var x11 = r1 * Math.cos(a11),
              y11 = r1 * Math.sin(a11),
              x00 = r0 * Math.cos(a00),
              y00 = r0 * Math.sin(a00);

          // Restrict the corner radius according to the sector angle.
          if (da < pi$2) {
            var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
                ax = x01 - oc[0],
                ay = y01 - oc[1],
                bx = x11 - oc[0],
                by = y11 - oc[1],
                kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
                lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
            rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
          }
        }

        // Is the sector collapsed to a line?
        if (!(da1 > epsilon$1)) context.moveTo(x01, y01);

        // Does the sector’s outer ring have rounded corners?
        else if (rc1 > epsilon$1) {
          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

          // Have the corners merged?
          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);

          // Otherwise, draw the two corners and the ring.
          else {
            context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
            context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
          }
        }

        // Or is the outer ring just a circular arc?
        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

        // Is there no inner ring, and it’s a circular sector?
        // Or perhaps it’s an annular sector collapsed due to padding?
        if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) context.lineTo(x10, y10);

        // Does the sector’s inner ring (or point) have rounded corners?
        else if (rc0 > epsilon$1) {
          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

          // Have the corners merged?
          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);

          // Otherwise, draw the two corners and the ring.
          else {
            context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
            context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
            context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
          }
        }

        // Or is the inner ring just a circular arc?
        else context.arc(0, 0, r0, a10, a00, cw);
      }

      context.closePath();

      if (buffer) return context = null, buffer + "" || null;
    }

    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
          a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;
      return [Math.cos(a) * r, Math.sin(a) * r];
    };

    arc.innerRadius = function(_) {
      return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : innerRadius;
    };

    arc.outerRadius = function(_) {
      return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : outerRadius;
    };

    arc.cornerRadius = function(_) {
      return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$1(+_), arc) : cornerRadius;
    };

    arc.padRadius = function(_) {
      return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), arc) : padRadius;
    };

    arc.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : startAngle;
    };

    arc.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : endAngle;
    };

    arc.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), arc) : padAngle;
    };

    arc.context = function(_) {
      return arguments.length ? ((context = _ == null ? null : _), arc) : context;
    };

    return arc;
  }

  function Linear(context) {
    this._context = context;
  }

  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; // proceed
        default: this._context.lineTo(x, y); break;
      }
    }
  };

  function curveLinear(context) {
    return new Linear(context);
  }

  function x(p) {
    return p[0];
  }

  function y(p) {
    return p[1];
  }

  function line() {
    var x$$ = x,
        y$$ = y,
        defined = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null;

    function line(data) {
      var i,
          n = data.length,
          d,
          defined0 = false,
          buffer;

      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();
          else output.lineEnd();
        }
        if (defined0) output.point(+x$$(d, i, data), +y$$(d, i, data));
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    line.x = function(_) {
      return arguments.length ? (x$$ = typeof _ === "function" ? _ : constant$1(+_), line) : x$$;
    };

    line.y = function(_) {
      return arguments.length ? (y$$ = typeof _ === "function" ? _ : constant$1(+_), line) : y$$;
    };

    line.defined = function(_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), line) : defined;
    };

    line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };

    line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };

    return line;
  }

  function area$1() {
    var x0 = x,
        x1 = null,
        y0 = constant$1(0),
        y1 = y,
        defined = constant$1(true),
        context = null,
        curve = curveLinear,
        output = null;

    function area(data) {
      var i,
          j,
          k,
          n = data.length,
          d,
          defined0 = false,
          buffer,
          x0z = new Array(n),
          y0z = new Array(n);

      if (context == null) output = curve(buffer = path());

      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k = i - 1; k >= j; --k) {
              output.point(x0z[k], y0z[k]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
      }

      if (buffer) return output = null, buffer + "" || null;
    }

    function arealine() {
      return line().defined(defined).curve(curve).context(context);
    }

    area.x = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), x1 = null, area) : x0;
    };

    area.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$1(+_), area) : x0;
    };

    area.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : x1;
    };

    area.y = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), y1 = null, area) : y0;
    };

    area.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$1(+_), area) : y0;
    };

    area.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$1(+_), area) : y1;
    };

    area.lineX0 =
    area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };

    area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };

    area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };

    area.defined = function(_) {
      return arguments.length ? (defined = typeof _ === "function" ? _ : constant$1(!!_), area) : defined;
    };

    area.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };

    area.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };

    return area;
  }

  function descending$1(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  }

  function identity$1(d) {
    return d;
  }

  function pie() {
    var value = identity$1,
        sortValues = descending$1,
        sort = null,
        startAngle = constant$1(0),
        endAngle = constant$1(tau$2),
        padAngle = constant$1(0);

    function pie(data) {
      var i,
          n = data.length,
          j,
          k,
          sum = 0,
          index = new Array(n),
          arcs = new Array(n),
          a0 = +startAngle.apply(this, arguments),
          da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)),
          a1,
          p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
          pa = p * (da < 0 ? -1 : 1),
          v;

      for (i = 0; i < n; ++i) {
        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
          sum += v;
        }
      }

      // Optionally sort the arcs by previously-computed values or by data.
      if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
      else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

      // Compute the arcs! They are stored in the original data's order.
      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
          data: data[j],
          index: i,
          value: v,
          startAngle: a0,
          endAngle: a1,
          padAngle: p
        };
      }

      return arcs;
    }

    pie.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), pie) : value;
    };

    pie.sortValues = function(_) {
      return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
    };

    pie.sort = function(_) {
      return arguments.length ? (sort = _, sortValues = null, pie) : sort;
    };

    pie.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : startAngle;
    };

    pie.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : endAngle;
    };

    pie.padAngle = function(_) {
      return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$1(+_), pie) : padAngle;
    };

    return pie;
  }

  var curveRadialLinear = curveRadial(curveLinear);

  function Radial(curve) {
    this._curve = curve;
  }

  Radial.prototype = {
    areaStart: function() {
      this._curve.areaStart();
    },
    areaEnd: function() {
      this._curve.areaEnd();
    },
    lineStart: function() {
      this._curve.lineStart();
    },
    lineEnd: function() {
      this._curve.lineEnd();
    },
    point: function(a, r) {
      this._curve.point(r * Math.sin(a), r * -Math.cos(a));
    }
  };

  function curveRadial(curve) {

    function radial(context) {
      return new Radial(curve(context));
    }

    radial._curve = curve;

    return radial;
  }

  function radialLine(l) {
    var c = l.curve;

    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;

    l.curve = function(_) {
      return arguments.length ? c(curveRadial(_)) : c()._curve;
    };

    return l;
  }

  function radialLine$1() {
    return radialLine(line().curve(curveRadialLinear));
  }

  function radialArea() {
    var a = area$1().curve(curveRadialLinear),
        c = a.curve,
        x0 = a.lineX0,
        x1 = a.lineX1,
        y0 = a.lineY0,
        y1 = a.lineY1;

    a.angle = a.x, delete a.x;
    a.startAngle = a.x0, delete a.x0;
    a.endAngle = a.x1, delete a.x1;
    a.radius = a.y, delete a.y;
    a.innerRadius = a.y0, delete a.y0;
    a.outerRadius = a.y1, delete a.y1;
    a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
    a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
    a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
    a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;

    a.curve = function(_) {
      return arguments.length ? c(curveRadial(_)) : c()._curve;
    };

    return a;
  }

  var circle = {
    draw: function(context, size) {
      var r = Math.sqrt(size / pi$2);
      context.moveTo(r, 0);
      context.arc(0, 0, r, 0, tau$2);
    }
  };

  var cross$1 = {
    draw: function(context, size) {
      var r = Math.sqrt(size / 5) / 2;
      context.moveTo(-3 * r, -r);
      context.lineTo(-r, -r);
      context.lineTo(-r, -3 * r);
      context.lineTo(r, -3 * r);
      context.lineTo(r, -r);
      context.lineTo(3 * r, -r);
      context.lineTo(3 * r, r);
      context.lineTo(r, r);
      context.lineTo(r, 3 * r);
      context.lineTo(-r, 3 * r);
      context.lineTo(-r, r);
      context.lineTo(-3 * r, r);
      context.closePath();
    }
  };

  var tan30 = Math.sqrt(1 / 3);
  var tan30_2 = tan30 * 2;
  var diamond = {
    draw: function(context, size) {
      var y = Math.sqrt(size / tan30_2),
          x = y * tan30;
      context.moveTo(0, -y);
      context.lineTo(x, 0);
      context.lineTo(0, y);
      context.lineTo(-x, 0);
      context.closePath();
    }
  };

  var ka = 0.89081309152928522810;
  var kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);
  var kx = Math.sin(tau$2 / 10) * kr;
  var ky = -Math.cos(tau$2 / 10) * kr;
  var star = {
    draw: function(context, size) {
      var r = Math.sqrt(size * ka),
          x = kx * r,
          y = ky * r;
      context.moveTo(0, -r);
      context.lineTo(x, y);
      for (var i = 1; i < 5; ++i) {
        var a = tau$2 * i / 5,
            c = Math.cos(a),
            s = Math.sin(a);
        context.lineTo(s * r, -c * r);
        context.lineTo(c * x - s * y, s * x + c * y);
      }
      context.closePath();
    }
  };

  var square = {
    draw: function(context, size) {
      var w = Math.sqrt(size),
          x = -w / 2;
      context.rect(x, x, w, w);
    }
  };

  var sqrt3 = Math.sqrt(3);

  var triangle = {
    draw: function(context, size) {
      var y = -Math.sqrt(size / (sqrt3 * 3));
      context.moveTo(0, y * 2);
      context.lineTo(-sqrt3 * y, -y);
      context.lineTo(sqrt3 * y, -y);
      context.closePath();
    }
  };

  var c = -0.5;
  var s = Math.sqrt(3) / 2;
  var k = 1 / Math.sqrt(12);
  var a = (k / 2 + 1) * 3;
  var wye = {
    draw: function(context, size) {
      var r = Math.sqrt(size / a),
          x0 = r / 2,
          y0 = r * k,
          x1 = x0,
          y1 = r * k + r,
          x2 = -x1,
          y2 = y1;
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.lineTo(x2, y2);
      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
      context.closePath();
    }
  };

  var symbols = [
    circle,
    cross$1,
    diamond,
    square,
    star,
    triangle,
    wye
  ];

  function symbol() {
    var type = constant$1(circle),
        size = constant$1(64),
        context = null;

    function symbol() {
      var buffer;
      if (!context) context = buffer = path();
      type.apply(this, arguments).draw(context, +size.apply(this, arguments));
      if (buffer) return context = null, buffer + "" || null;
    }

    symbol.type = function(_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant$1(_), symbol) : type;
    };

    symbol.size = function(_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant$1(+_), symbol) : size;
    };

    symbol.context = function(_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };

    return symbol;
  }

  function noop() {}

  function point(that, x, y) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x) / 6,
      (that._y0 + 4 * that._y1 + y) / 6
    );
  }

  function Basis(context) {
    this._context = context;
  }

  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 =
      this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3: point(this, this._x1, this._y1); // proceed
        case 2: this._context.lineTo(this._x1, this._y1); break;
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
        default: point(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };

  function basis(context) {
    return new Basis(context);
  }

  function BasisClosed(context) {
    this._context = context;
  }

  BasisClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
        case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
        case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
        default: point(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };

  function basisClosed(context) {
    return new BasisClosed(context);
  }

  function BasisOpen(context) {
    this._context = context;
  }

  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 =
      this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
        case 3: this._point = 4; // proceed
        default: point(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
    }
  };

  function basisOpen(context) {
    return new BasisOpen(context);
  }

  function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
  }

  Bundle.prototype = {
    lineStart: function() {
      this._x = [];
      this._y = [];
      this._basis.lineStart();
    },
    lineEnd: function() {
      var x = this._x,
          y = this._y,
          j = x.length - 1;

      if (j > 0) {
        var x0 = x[0],
            y0 = y[0],
            dx = x[j] - x0,
            dy = y[j] - y0,
            i = -1,
            t;

        while (++i <= j) {
          t = i / j;
          this._basis.point(
            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
          );
        }
      }

      this._x = this._y = null;
      this._basis.lineEnd();
    },
    point: function(x, y) {
      this._x.push(+x);
      this._y.push(+y);
    }
  };

  var bundle = (function custom(beta) {

    function bundle(context) {
      return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }

    bundle.beta = function(beta) {
      return custom(+beta);
    };

    return bundle;
  })(0.85);

  function point$1(that, x, y) {
    that._context.bezierCurveTo(
      that._x1 + that._k * (that._x2 - that._x0),
      that._y1 + that._k * (that._y2 - that._y0),
      that._x2 + that._k * (that._x1 - x),
      that._y2 + that._k * (that._y1 - y),
      that._x2,
      that._y2
    );
  }

  function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }

  Cardinal.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 =
      this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2: this._context.lineTo(this._x2, this._y2); break;
        case 3: point$1(this, this._x1, this._y1); break;
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
        case 2: this._point = 3; // proceed
        default: point$1(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var cardinal = (function custom(tension) {

    function cardinal(context) {
      return new Cardinal(context, tension);
    }

    cardinal.tension = function(tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }

  CardinalClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
        default: point$1(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var cardinalClosed = (function custom(tension) {

    function cardinal(context) {
      return new CardinalClosed(context, tension);
    }

    cardinal.tension = function(tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
  }

  CardinalOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 =
      this._y0 = this._y1 = this._y2 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
        case 3: this._point = 4; // proceed
        default: point$1(this, x, y); break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var cardinalOpen = (function custom(tension) {

    function cardinal(context) {
      return new CardinalOpen(context, tension);
    }

    cardinal.tension = function(tension) {
      return custom(+tension);
    };

    return cardinal;
  })(0);

  function point$2(that, x, y) {
    var x1 = that._x1,
        y1 = that._y1,
        x2 = that._x2,
        y2 = that._y2;

    if (that._l01_a > epsilon$1) {
      var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
          n = 3 * that._l01_a * (that._l01_a + that._l12_a);
      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }

    if (that._l23_a > epsilon$1) {
      var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
          m = 3 * that._l23_a * (that._l23_a + that._l12_a);
      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }

    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
  }

  function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRom.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 =
      this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a =
      this._l01_2a = this._l12_2a = this._l23_2a =
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2: this._context.lineTo(this._x2, this._y2); break;
        case 3: this.point(this, this._x2, this._y2); break;
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; // proceed
        default: point$2(this, x, y); break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var catmullRom = (function custom(alpha) {

    function catmullRom(context) {
      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
    }

    catmullRom.alpha = function(alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRomClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
      this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
      this._l01_a = this._l12_a = this._l23_a =
      this._l01_2a = this._l12_2a = this._l23_2a =
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
      }
    },
    point: function(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
        case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
        case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
        default: point$2(this, x, y); break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var catmullRomClosed = (function custom(alpha) {

    function catmullRom(context) {
      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
    }

    catmullRom.alpha = function(alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
  }

  CatmullRomOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 =
      this._y0 = this._y1 = this._y2 = NaN;
      this._l01_a = this._l12_a = this._l23_a =
      this._l01_2a = this._l12_2a = this._l23_2a =
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;

      if (this._point) {
        var x23 = this._x2 - x,
            y23 = this._y2 - y;
        this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
      }

      switch (this._point) {
        case 0: this._point = 1; break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
        case 3: this._point = 4; // proceed
        default: point$2(this, x, y); break;
      }

      this._l01_a = this._l12_a, this._l12_a = this._l23_a;
      this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
      this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
  };

  var catmullRomOpen = (function custom(alpha) {

    function catmullRom(context) {
      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
    }

    catmullRom.alpha = function(alpha) {
      return custom(+alpha);
    };

    return catmullRom;
  })(0.5);

  function LinearClosed(context) {
    this._context = context;
  }

  LinearClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point) this._context.closePath();
    },
    point: function(x, y) {
      x = +x, y = +y;
      if (this._point) this._context.lineTo(x, y);
      else this._point = 1, this._context.moveTo(x, y);
    }
  };

  function linearClosed(context) {
    return new LinearClosed(context);
  }

  function sign(x) {
    return x < 0 ? -1 : 1;
  }

  // Calculate the slopes of the tangents (Hermite-type interpolation) based on
  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  // NOV(II), P. 443, 1990.
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0,
        h1 = x2 - that._x1,
        s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
        s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
        p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }

  // Calculate a one-sided slope.
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }

  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
  function point$3(that, t0, t1) {
    var x0 = that._x0,
        y0 = that._y0,
        x1 = that._x1,
        y1 = that._y1,
        dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
  }

  function MonotoneX(context) {
    this._context = context;
  }

  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 =
      this._y0 = this._y1 =
      this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2: this._context.lineTo(this._x1, this._y1); break;
        case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x, y) {
      var t1 = NaN;

      x = +x, y = +y;
      if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; break;
        case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
        default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
      }

      this._x0 = this._x1, this._x1 = x;
      this._y0 = this._y1, this._y1 = y;
      this._t0 = t1;
    }
  }

  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }

  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
    MonotoneX.prototype.point.call(this, y, x);
  };

  function ReflectContext(context) {
    this._context = context;
  }

  ReflectContext.prototype = {
    moveTo: function(x, y) { this._context.moveTo(y, x); },
    closePath: function() { this._context.closePath(); },
    lineTo: function(x, y) { this._context.lineTo(y, x); },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
  };

  function monotoneX(context) {
    return new MonotoneX(context);
  }

  function monotoneY(context) {
    return new MonotoneY(context);
  }

  function Natural(context) {
    this._context = context;
  }

  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x = this._x,
          y = this._y,
          n = x.length;

      if (n) {
        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
        if (n === 2) {
          this._context.lineTo(x[1], y[1]);
        } else {
          var px = controlPoints(x),
              py = controlPoints(y);
          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
          }
        }
      }

      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x, y) {
      this._x.push(+x);
      this._y.push(+y);
    }
  };

  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
  function controlPoints(x) {
    var i,
        n = x.length - 1,
        m,
        a = new Array(n),
        b = new Array(n),
        r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
    return [a, b];
  }

  function natural(context) {
    return new Natural(context);
  }

  function Step(context, t) {
    this._context = context;
    this._t = t;
  }

  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
      x = +x, y = +y;
      switch (this._point) {
        case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
        case 1: this._point = 2; // proceed
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);
            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y);
          }
          break;
        }
      }
      this._x = x, this._y = y;
    }
  };

  function step(context) {
    return new Step(context, 0.5);
  }

  function stepBefore(context) {
    return new Step(context, 0);
  }

  function stepAfter(context) {
    return new Step(context, 1);
  }

  var slice$2 = Array.prototype.slice;

  function none(series, order) {
    if (!((n = series.length) > 1)) return;
    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
      s0 = s1, s1 = series[order[i]];
      for (var j = 0; j < m; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
      }
    }
  }

  function none$1(series) {
    var n = series.length, o = new Array(n);
    while (--n >= 0) o[n] = n;
    return o;
  }

  function stackValue(d, key) {
    return d[key];
  }

  function stack() {
    var keys = constant$1([]),
        order = none$1,
        offset = none,
        value = stackValue;

    function stack(data) {
      var kz = keys.apply(this, arguments),
          i,
          m = data.length,
          n = kz.length,
          sz = new Array(n),
          oz;

      for (i = 0; i < n; ++i) {
        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
          si[j] = sij = [0, +value(data[j], ki, j, data)];
          sij.data = data[j];
        }
        si.key = ki;
      }

      for (i = 0, oz = order(sz); i < n; ++i) {
        sz[oz[i]].index = i;
      }

      offset(sz, oz);
      return sz;
    }

    stack.keys = function(_) {
      return arguments.length ? (keys = typeof _ === "function" ? _ : constant$1(slice$2.call(_)), stack) : keys;
    };

    stack.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant$1(+_), stack) : value;
    };

    stack.order = function(_) {
      return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant$1(slice$2.call(_)), stack) : order;
    };

    stack.offset = function(_) {
      return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
    };

    return stack;
  }

  function expand(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
    }
    none(series, order);
  }

  function silhouette(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
      s0[j][1] += s0[j][0] = -y / 2;
    }
    none(series, order);
  }

  function wiggle(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        var si = series[order[i]],
            sij0 = si[j][1] || 0,
            sij1 = si[j - 1][1] || 0,
            s3 = (sij0 - sij1) / 2;
        for (var k = 0; k < i; ++k) {
          var sk = series[order[k]],
              skj0 = sk[j][1] || 0,
              skj1 = sk[j - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s2 += s3 * sij0;
      }
      s0[j - 1][1] += s0[j - 1][0] = y;
      if (s1) y -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    none(series, order);
  }

  function ascending$1(series) {
    var sums = series.map(sum$1);
    return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
  }

  function sum$1(series) {
    var s = 0, i = -1, n = series.length, v;
    while (++i < n) if (v = +series[i][1]) s += v;
    return s;
  }

  function descending$2(series) {
    return ascending$1(series).reverse();
  }

  function insideOut(series) {
    var n = series.length,
        i,
        j,
        sums = series.map(sum$1),
        order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
        top = 0,
        bottom = 0,
        tops = [],
        bottoms = [];

    for (i = 0; i < n; ++i) {
      j = order[i];
      if (top < bottom) {
        top += sums[j];
        tops.push(j);
      } else {
        bottom += sums[j];
        bottoms.push(j);
      }
    }

    return bottoms.reverse().concat(tops);
  }

  function reverse(series) {
    return none$1(series).reverse();
  }

  function define(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }

  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition) prototype[key] = definition[key];
    return prototype;
  }

  function Color() {}

  var darker = 0.7;
  var brighter = 1 / darker;

  var reHex3 = /^#([0-9a-f]{3})$/;
  var reHex6 = /^#([0-9a-f]{6})$/;
  var reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
  var reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
  var reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
  var reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
  var reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
  var reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
  var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
  };

  define(Color, color, {
    displayable: function() {
      return this.rgb().displayable();
    },
    toString: function() {
      return this.rgb() + "";
    }
  });

  function color(format) {
    var m;
    format = (format + "").trim().toLowerCase();
    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
        : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
        : named.hasOwnProperty(format) ? rgbn(named[format])
        : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
        : null;
  }

  function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
  }

  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
  }

  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }

  function colorRgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
  }

  function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }

  define(Rgb, colorRgb, extend(Color, {
    brighter: function(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function() {
      return this;
    },
    displayable: function() {
      return (0 <= this.r && this.r <= 255)
          && (0 <= this.g && this.g <= 255)
          && (0 <= this.b && this.b <= 255)
          && (0 <= this.opacity && this.opacity <= 1);
    },
    toString: function() {
      var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
      return (a === 1 ? "rgb(" : "rgba(")
          + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
          + Math.max(0, Math.min(255, Math.round(this.b) || 0))
          + (a === 1 ? ")" : ", " + a + ")");
    }
  }));

  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
  }

  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        min = Math.min(r, g, b),
        max = Math.max(r, g, b),
        h = NaN,
        s = max - min,
        l = (max + min) / 2;
    if (s) {
      if (r === max) h = (g - b) / s + (g < b) * 6;
      else if (g === max) h = (b - r) / s + 2;
      else h = (r - g) / s + 4;
      s /= l < 0.5 ? max + min : 2 - max - min;
      h *= 60;
    } else {
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
  }

  function colorHsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
  }

  function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }

  define(Hsl, colorHsl, extend(Color, {
    brighter: function(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function() {
      var h = this.h % 360 + (this.h < 0) * 360,
          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
          l = this.l,
          m2 = l + (l < 0.5 ? l : 1 - l) * s,
          m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
        hsl2rgb(h, m1, m2),
        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
        this.opacity
      );
    },
    displayable: function() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s))
          && (0 <= this.l && this.l <= 1)
          && (0 <= this.opacity && this.opacity <= 1);
    }
  }));

  /* From FvD 13.37, CSS Color Module Level 3 */
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60
        : h < 180 ? m2
        : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
        : m1) * 255;
  }

  var deg2rad = Math.PI / 180;
  var rad2deg = 180 / Math.PI;

  var Kn = 18;
  var Xn = 0.950470;
  var Yn = 1;
  var Zn = 1.088830;
  var t0 = 4 / 29;
  var t1 = 6 / 29;
  var t2 = 3 * t1 * t1;
  var t3 = t1 * t1 * t1;
  function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) {
      var h = o.h * deg2rad;
      return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var b = rgb2xyz(o.r),
        a = rgb2xyz(o.g),
        l = rgb2xyz(o.b),
        x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
        y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
        z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
  }

  function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
  }

  function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
  }

  define(Lab, lab, extend(Color, {
    brighter: function(k) {
      return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker: function(k) {
      return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb: function() {
      var y = (this.l + 16) / 116,
          x = isNaN(this.a) ? y : y + this.a / 500,
          z = isNaN(this.b) ? y : y - this.b / 200;
      y = Yn * lab2xyz(y);
      x = Xn * lab2xyz(x);
      z = Zn * lab2xyz(z);
      return new Rgb(
        xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
        xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
        xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
        this.opacity
      );
    }
  }));

  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
  }

  function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
  }

  function xyz2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
  }

  function rgb2xyz(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
  }

  function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    var h = Math.atan2(o.b, o.a) * rad2deg;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
  }

  function colorHcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
  }

  function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
  }

  define(Hcl, colorHcl, extend(Color, {
    brighter: function(k) {
      return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
    },
    darker: function(k) {
      return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
    },
    rgb: function() {
      return labConvert(this).rgb();
    }
  }));

  var A = -0.14861;
  var B = +1.78277;
  var C = -0.29227;
  var D = -0.90649;
  var E = +1.97294;
  var ED = E * D;
  var EB = E * B;
  var BC_DA = B * C - D * A;
  function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb)) o = rgbConvert(o);
    var r = o.r / 255,
        g = o.g / 255,
        b = o.b / 255,
        l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
        bl = b - l,
        k = (E * (g - l) - C * bl) / D,
        s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
        h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
  }

  function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
  }

  function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
  }

  define(Cubehelix, cubehelix, extend(Color, {
    brighter: function(k) {
      k = k == null ? brighter : Math.pow(brighter, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function(k) {
      k = k == null ? darker : Math.pow(darker, k);
      return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function() {
      var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
          l = +this.l,
          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
          cosh = Math.cos(h),
          sinh = Math.sin(h);
      return new Rgb(
        255 * (l + a * (A * cosh + B * sinh)),
        255 * (l + a * (C * cosh + D * sinh)),
        255 * (l + a * (E * cosh)),
        this.opacity
      );
    }
  }));

  function basis$1(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0
        + (4 - 6 * t2 + 3 * t3) * v1
        + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
        + t3 * v3) / 6;
  }

  function basis$2(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
          v1 = values[i],
          v2 = values[i + 1],
          v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
          v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis$1((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  function basisClosed$1(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
          v0 = values[(i + n - 1) % n],
          v1 = values[i % n],
          v2 = values[(i + 1) % n],
          v3 = values[(i + 2) % n];
      return basis$1((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  function constant$2(x) {
    return function() {
      return x;
    };
  }

  function linear$1(a, d) {
    return function(t) {
      return a + t * d;
    };
  }

  function exponential$1(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
      return Math.pow(a + t * b, y);
    };
  }

  function hue(a, b) {
    var d = b - a;
    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
  }

  function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
      return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);
    };
  }

  function nogamma(a, b) {
    var d = b - a;
    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);
  }

  var interpolateRgb = (function rgbGamma(y) {
    var color = gamma(y);

    function rgb(start, end) {
      var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),
          g = color(start.g, end.g),
          b = color(start.b, end.b),
          opacity = color(start.opacity, end.opacity);
      return function(t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }

    rgb.gamma = rgbGamma;

    return rgb;
  })(1);

  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length,
          r = new Array(n),
          g = new Array(n),
          b = new Array(n),
          i, color;
      for (i = 0; i < n; ++i) {
        color = colorRgb(colors[i]);
        r[i] = color.r || 0;
        g[i] = color.g || 0;
        b[i] = color.b || 0;
      }
      r = spline(r);
      g = spline(g);
      b = spline(b);
      color.opacity = 1;
      return function(t) {
        color.r = r(t);
        color.g = g(t);
        color.b = b(t);
        return color + "";
      };
    };
  }

  var rgbBasis = rgbSpline(basis$2);
  var rgbBasisClosed = rgbSpline(basisClosed$1);

  function array$1(a, b) {
    var nb = b ? b.length : 0,
        na = a ? Math.min(nb, a.length) : 0,
        x = new Array(nb),
        c = new Array(nb),
        i;

    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i]);
    for (; i < nb; ++i) c[i] = b[i];

    return function(t) {
      for (i = 0; i < na; ++i) c[i] = x[i](t);
      return c;
    };
  }

  function date(a, b) {
    var d = new Date;
    return a = +a, b -= a, function(t) {
      return d.setTime(a + b * t), d;
    };
  }

  function interpolateNumber(a, b) {
    return a = +a, b -= a, function(t) {
      return a + b * t;
    };
  }

  function object(a, b) {
    var i = {},
        c = {},
        k;

    if (a === null || typeof a !== "object") a = {};
    if (b === null || typeof b !== "object") b = {};

    for (k in b) {
      if (k in a) {
        i[k] = interpolate(a[k], b[k]);
      } else {
        c[k] = b[k];
      }
    }

    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }

  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero(b) {
    return function() {
      return b;
    };
  }

  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }

  function interpolateString(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
        am, // current match in a
        bm, // current match in b
        bs, // string preceding current number in b, if any
        i = -1, // index in s
        s = [], // string constants and placeholders
        q = []; // number interpolators

    // Coerce inputs to strings.
    a = a + "", b = b + "";

    // Interpolate pairs of numbers in a & b.
    while ((am = reA.exec(a))
        && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) { // a string precedes the next number in b
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; // coalesce with previous string
        else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
        if (s[i]) s[i] += bm; // coalesce with previous string
        else s[++i] = bm;
      } else { // interpolate non-matching numbers
        s[++i] = null;
        q.push({i: i, x: interpolateNumber(am, bm)});
      }
      bi = reB.lastIndex;
    }

    // Add remains of b.
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2 ? (q[0]
        ? one(q[0].x)
        : zero(b))
        : (b = q.length, function(t) {
            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
            return s.join("");
          });
  }

  function interpolate(a, b) {
    var t = typeof b, c;
    return b == null || t === "boolean" ? constant$2(b)
        : (t === "number" ? interpolateNumber
        : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
        : b instanceof color ? interpolateRgb
        : b instanceof Date ? date
        : Array.isArray(b) ? array$1
        : isNaN(b) ? object
        : interpolateNumber)(a, b);
  }

  function interpolateRound(a, b) {
    return a = +a, b -= a, function(t) {
      return Math.round(a + b * t);
    };
  }

  var degrees = 180 / Math.PI;

  var identity$2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };

  function decompose(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees,
      skewX: Math.atan(skewX) * degrees,
      scaleX: scaleX,
      scaleY: scaleY
    };
  }

  var cssNode;
  var cssRoot;
  var cssView;
  var svgNode;
  function parseCss(value) {
    if (value === "none") return identity$2;
    if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
    cssNode.style.transform = value;
    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
    cssRoot.removeChild(cssNode);
    value = value.slice(7, -1).split(",");
    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
  }

  function parseSvg(value) {
    if (value == null) return identity$2;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
  }

  function interpolateTransform(parse, pxComma, pxParen, degParen) {

    function pop(s) {
      return s.length ? s.pop() + " " : "";
    }

    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push("translate(", null, pxComma, null, pxParen);
        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
      } else if (xb || yb) {
        s.push("translate(" + xb + pxComma + yb + pxParen);
      }
    }

    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
        q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b)});
      } else if (b) {
        s.push(pop(s) + "rotate(" + b + degParen);
      }
    }

    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b)});
      } else if (b) {
        s.push(pop(s) + "skewX(" + b + degParen);
      }
    }

    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + "scale(", null, ",", null, ")");
        q.push({i: i - 4, x: interpolateNumber(xa, xb)}, {i: i - 2, x: interpolateNumber(ya, yb)});
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + "scale(" + xb + "," + yb + ")");
      }
    }

    return function(a, b) {
      var s = [], // string constants and placeholders
          q = []; // number interpolators
      a = parse(a), b = parse(b);
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
      rotate(a.rotate, b.rotate, s, q);
      skewX(a.skewX, b.skewX, s, q);
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
      a = b = null; // gc
      return function(t) {
        var i = -1, n = q.length, o;
        while (++i < n) s[(o = q[i]).i] = o.x(t);
        return s.join("");
      };
    };
  }

  var interpolateTransform$1 = interpolateTransform(parseCss, "px, ", "px)", "deg)");
  var interpolateTransform$2 = interpolateTransform(parseSvg, ", ", ")", ")");

  var rho = Math.SQRT2;
  var rho2 = 2;
  var rho4 = 4;
  var epsilon2 = 1e-12;
  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }

  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }

  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }

  // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]
  function interpolateZoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
        ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S;

    // Special case for u0 ≅ u1.
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      }
    }

    // General case.
    else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      }
    }

    i.duration = S * 1000;

    return i;
  }

  function hsl(hue) {
    return function(start, end) {
      var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }
  }

  var hsl$1 = hsl(hue);
  var hslLong = hsl(nogamma);

  function lab$1(start, end) {
    var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
        a = nogamma(start.a, end.a),
        b = nogamma(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity);
    return function(t) {
      start.l = l(t);
      start.a = a(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  function hcl(hue) {
    return function(start, end) {
      var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),
          c = nogamma(start.c, end.c),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.h = h(t);
        start.c = c(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }
  }

  var hcl$1 = hcl(hue);
  var hclLong = hcl(nogamma);

  function cubehelix$1(hue) {
    return (function cubehelixGamma(y) {
      y = +y;

      function cubehelix$$(start, end) {
        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
            s = nogamma(start.s, end.s),
            l = nogamma(start.l, end.l),
            opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s(t);
          start.l = l(Math.pow(t, y));
          start.opacity = opacity(t);
          return start + "";
        };
      }

      cubehelix$$.gamma = cubehelixGamma;

      return cubehelix$$;
    })(1);
  }

  var cubehelix$2 = cubehelix$1(hue);
  var interpolateCubehelixLong = cubehelix$1(nogamma);

  function quantize(interpolator, n) {
    var samples = new Array(n);
    for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
    return samples;
  }

  var noop$1 = {value: function() {}};

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
      _[t] = [];
    }
    return new Dispatch(_);
  }

  function Dispatch(_) {
    this._ = _;
  }

  function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
      return {type: t, name: name};
    });
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
      var _ = this._,
          T = parseTypenames(typename + "", _),
          t,
          i = -1,
          n = T.length;

      // If no callback was specified, return the callback of the given type and name.
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
        return;
      }

      // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.
      if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
      while (++i < n) {
        if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);
        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
      }

      return this;
    },
    copy: function() {
      var copy = {}, _ = this._;
      for (var t in _) copy[t] = _[t].slice();
      return new Dispatch(copy);
    },
    call: function(type, that) {
      if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
      for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
    }
  };

  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value;
      }
    }
  }

  function set$1(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
      }
    }
    if (callback != null) type.push({name: name, value: callback});
    return type;
  }

  function objectConverter(columns) {
    return new Function("d", "return {" + columns.map(function(name, i) {
      return JSON.stringify(name) + ": d[" + i + "]";
    }).join(",") + "}");
  }

  function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function(row, i) {
      return f(object(row), i, columns);
    };
  }

  // Compute unique columns in order of discovery.
  function inferColumns(rows) {
    var columnSet = Object.create(null),
        columns = [];

    rows.forEach(function(row) {
      for (var column in row) {
        if (!(column in columnSet)) {
          columns.push(columnSet[column] = column);
        }
      }
    });

    return columns;
  }

  function dsv(delimiter) {
    var reFormat = new RegExp("[\"" + delimiter + "\n]"),
        delimiterCode = delimiter.charCodeAt(0);

    function parse(text, f) {
      var convert, columns, rows = parseRows(text, function(row, i) {
        if (convert) return convert(row, i - 1);
        columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
      });
      rows.columns = columns;
      return rows;
    }

    function parseRows(text, f) {
      var EOL = {}, // sentinel value for end-of-line
          EOF = {}, // sentinel value for end-of-file
          rows = [], // output rows
          N = text.length,
          I = 0, // current character index
          n = 0, // the current line number
          t, // the current token
          eol; // is the current token followed by EOL?

      function token() {
        if (I >= N) return EOF; // special case: end of file
        if (eol) return eol = false, EOL; // special case: end of line

        // special case: quotes
        var j = I, c;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, "\"");
        }

        // common case: find next delimiter or newline
        while (I < N) {
          var k = 1;
          c = text.charCodeAt(I++);
          if (c === 10) eol = true; // \n
          else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
          else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }

        // special case: last token before EOF
        return text.slice(j);
      }

      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }

      return rows;
    }

    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows);
      return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
        return columns.map(function(column) {
          return formatValue(row[column]);
        }).join(delimiter);
      })).join("\n");
    }

    function formatRows(rows) {
      return rows.map(formatRow).join("\n");
    }

    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }

    function formatValue(text) {
      return text == null ? ""
          : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
          : text;
    }

    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatRows: formatRows
    };
  }

  var csv = dsv(",");

  var csvParse = csv.parse;
  var csvParseRows = csv.parseRows;
  var csvFormat = csv.format;
  var csvFormatRows = csv.formatRows;

  var tsv = dsv("\t");

  var tsvParse = tsv.parse;
  var tsvParseRows = tsv.parseRows;
  var tsvFormat = tsv.format;
  var tsvFormatRows = tsv.formatRows;

  function request(url, callback) {
    var request,
        event = dispatch("beforesend", "progress", "load", "error"),
        mimeType,
        headers = map$1(),
        xhr = new XMLHttpRequest,
        user = null,
        password = null,
        response,
        responseType,
        timeout = 0;

    // If IE does not support CORS, use XDomainRequest.
    if (typeof XDomainRequest !== "undefined"
        && !("withCredentials" in xhr)
        && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

    "onload" in xhr
        ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
        : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

    function respond(o) {
      var status = xhr.status, result;
      if (!status && hasResponse(xhr)
          || status >= 200 && status < 300
          || status === 304) {
        if (response) {
          try {
            result = response.call(request, xhr);
          } catch (e) {
            event.call("error", request, e);
            return;
          }
        } else {
          result = xhr;
        }
        event.call("load", request, result);
      } else {
        event.call("error", request, o);
      }
    }

    xhr.onprogress = function(e) {
      event.call("progress", request, e);
    };

    request = {
      header: function(name, value) {
        name = (name + "").toLowerCase();
        if (arguments.length < 2) return headers.get(name);
        if (value == null) headers.remove(name);
        else headers.set(name, value + "");
        return request;
      },

      // If mimeType is non-null and no Accept header is set, a default is used.
      mimeType: function(value) {
        if (!arguments.length) return mimeType;
        mimeType = value == null ? null : value + "";
        return request;
      },

      // Specifies what type the response value should take;
      // for instance, arraybuffer, blob, document, or text.
      responseType: function(value) {
        if (!arguments.length) return responseType;
        responseType = value;
        return request;
      },

      timeout: function(value) {
        if (!arguments.length) return timeout;
        timeout = +value;
        return request;
      },

      user: function(value) {
        return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
      },

      password: function(value) {
        return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
      },

      // Specify how to convert the response content to a specific type;
      // changes the callback value on "load" events.
      response: function(value) {
        response = value;
        return request;
      },

      // Alias for send("GET", …).
      get: function(data, callback) {
        return request.send("GET", data, callback);
      },

      // Alias for send("POST", …).
      post: function(data, callback) {
        return request.send("POST", data, callback);
      },

      // If callback is non-null, it will be used for error and load events.
      send: function(method, data, callback) {
        xhr.open(method, url, true, user, password);
        if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
        if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
        if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
        if (responseType != null) xhr.responseType = responseType;
        if (timeout > 0) xhr.timeout = timeout;
        if (callback == null && typeof data === "function") callback = data, data = null;
        if (callback != null && callback.length === 1) callback = fixCallback(callback);
        if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
        event.call("beforesend", request, xhr);
        xhr.send(data == null ? null : data);
        return request;
      },

      abort: function() {
        xhr.abort();
        return request;
      },

      on: function() {
        var value = event.on.apply(event, arguments);
        return value === event ? request : value;
      }
    };

    if (callback != null) {
      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
      return request.get(callback);
    }

    return request;
  }

  function fixCallback(callback) {
    return function(error, xhr) {
      callback(error == null ? xhr : null);
    };
  }

  function hasResponse(xhr) {
    var type = xhr.responseType;
    return type && type !== "text"
        ? xhr.response // null on error
        : xhr.responseText; // "" on error
  }

  function type(defaultMimeType, response) {
    return function(url, callback) {
      var r = request(url).mimeType(defaultMimeType).response(response);
      if (callback != null) {
        if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
        return r.get(callback);
      }
      return r;
    };
  }

  var html = type("text/html", function(xhr) {
    return document.createRange().createContextualFragment(xhr.responseText);
  });

  var json = type("application/json", function(xhr) {
    return JSON.parse(xhr.responseText);
  });

  var text = type("text/plain", function(xhr) {
    return xhr.responseText;
  });

  var xml = type("application/xml", function(xhr) {
    var xml = xhr.responseXML;
    if (!xml) throw new Error("parse error");
    return xml;
  });

  function dsv$1(defaultMimeType, parse) {
    return function(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var r = request(url).mimeType(defaultMimeType);
      r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
      r.row(row);
      return callback ? r.get(callback) : r;
    };
  }

  function responseOf(parse, row) {
    return function(request) {
      return parse(request.responseText, row);
    };
  }

  var csv$1 = dsv$1("text/csv", csvParse);

  var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);

  var frame = 0;
  var timeout = 0;
  var interval = 0;
  var pokeDelay = 1000;
  var taskHead;
  var taskTail;
  var clockLast = 0;
  var clockNow = 0;
  var clockSkew = 0;
  var clock = typeof performance === "object" && performance.now ? performance : Date;
  var setFrame = typeof requestAnimationFrame === "function"
          ? (clock === Date ? function(f) { requestAnimationFrame(function() { f(clock.now()); }); } : requestAnimationFrame)
          : function(f) { setTimeout(f, 17); };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }

  function clearNow() {
    clockNow = 0;
  }

  function Timer() {
    this._call =
    this._time =
    this._next = null;
  }

  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
      if (typeof callback !== "function") throw new TypeError("callback is not a function");
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
      if (!this._next && taskTail !== this) {
        if (taskTail) taskTail._next = this;
        else taskHead = this;
        taskTail = this;
      }
      this._call = callback;
      this._time = time;
      sleep();
    },
    stop: function() {
      if (this._call) {
        this._call = null;
        this._time = Infinity;
        sleep();
      }
    }
  };

  function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
  }

  function timerFlush() {
    now(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
      t = t._next;
    }
    --frame;
  }

  function wake(time) {
    clockNow = (clockLast = time || clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
      timerFlush();
    } finally {
      frame = 0;
      nap();
      clockNow = 0;
    }
  }

  function poke$1() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
  }

  function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
      } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
      }
    }
    taskTail = t0;
    sleep(time);
  }

  function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, delay);
      if (interval) interval = clearInterval(interval);
    } else {
      if (!interval) interval = setInterval(poke$1, pokeDelay);
      frame = 1, setFrame(wake);
    }
  }

  function timeout$1(callback, delay, time) {
    var t = new Timer;
    delay = delay == null ? 0 : +delay;
    t.restart(function(elapsed) {
      t.stop();
      callback(elapsed + delay);
    }, delay, time);
    return t;
  }

  function interval$1(callback, delay, time) {
    var t = new Timer, total = delay;
    if (delay == null) return t.restart(callback, delay, time), t;
    delay = +delay, time = time == null ? now() : +time;
    t.restart(function tick(elapsed) {
      elapsed += total;
      t.restart(tick, total += delay, time);
      callback(elapsed);
    }, delay, time);
    return t;
  }

var   t0$1 = new Date;
var   t1$1 = new Date;
  function newInterval(floori, offseti, count, field) {

    function interval(date) {
      return floori(date = new Date(+date)), date;
    }

    interval.floor = interval;

    interval.ceil = function(date) {
      return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };

    interval.round = function(date) {
      var d0 = interval(date),
          d1 = interval.ceil(date);
      return date - d0 < d1 - date ? d0 : d1;
    };

    interval.offset = function(date, step) {
      return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };

    interval.range = function(start, stop, step) {
      var range = [];
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
      do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
      return range;
    };

    interval.filter = function(test) {
      return newInterval(function(date) {
        while (floori(date), !test(date)) date.setTime(date - 1);
      }, function(date, step) {
        while (--step >= 0) while (offseti(date, 1), !test(date));
      });
    };

    if (count) {
      interval.count = function(start, end) {
        t0$1.setTime(+start), t1$1.setTime(+end);
        floori(t0$1), floori(t1$1);
        return Math.floor(count(t0$1, t1$1));
      };

      interval.every = function(step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null
            : !(step > 1) ? interval
            : interval.filter(field
                ? function(d) { return field(d) % step === 0; }
                : function(d) { return interval.count(0, d) % step === 0; });
      };
    }

    return interval;
  }

  var millisecond = newInterval(function() {
    // noop
  }, function(date, step) {
    date.setTime(+date + step);
  }, function(start, end) {
    return end - start;
  });

  // An optimized implementation for this simple case.
  millisecond.every = function(k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return newInterval(function(date) {
      date.setTime(Math.floor(date / k) * k);
    }, function(date, step) {
      date.setTime(+date + step * k);
    }, function(start, end) {
      return (end - start) / k;
    });
  };

  var milliseconds = millisecond.range;

  var durationSecond = 1e3;
  var durationMinute = 6e4;
  var durationHour = 36e5;
  var durationDay = 864e5;
  var durationWeek = 6048e5;

  var second = newInterval(function(date) {
    date.setTime(Math.floor(date / durationSecond) * durationSecond);
  }, function(date, step) {
    date.setTime(+date + step * durationSecond);
  }, function(start, end) {
    return (end - start) / durationSecond;
  }, function(date) {
    return date.getUTCSeconds();
  });

  var seconds = second.range;

  var minute = newInterval(function(date) {
    date.setTime(Math.floor(date / durationMinute) * durationMinute);
  }, function(date, step) {
    date.setTime(+date + step * durationMinute);
  }, function(start, end) {
    return (end - start) / durationMinute;
  }, function(date) {
    return date.getMinutes();
  });

  var minutes = minute.range;

  var hour = newInterval(function(date) {
    var offset = date.getTimezoneOffset() * durationMinute % durationHour;
    if (offset < 0) offset += durationHour;
    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
  }, function(date, step) {
    date.setTime(+date + step * durationHour);
  }, function(start, end) {
    return (end - start) / durationHour;
  }, function(date) {
    return date.getHours();
  });

  var hours = hour.range;

  var day = newInterval(function(date) {
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setDate(date.getDate() + step);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
  }, function(date) {
    return date.getDate() - 1;
  });

  var days = day.range;

  function weekday(i) {
    return newInterval(function(date) {
      date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setDate(date.getDate() + step * 7);
    }, function(start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }

  var timeWeek = weekday(0);
  var timeMonday = weekday(1);
  var tuesday = weekday(2);
  var wednesday = weekday(3);
  var thursday = weekday(4);
  var friday = weekday(5);
  var saturday = weekday(6);

  var sundays = timeWeek.range;
  var mondays = timeMonday.range;
  var tuesdays = tuesday.range;
  var wednesdays = wednesday.range;
  var thursdays = thursday.range;
  var fridays = friday.range;
  var saturdays = saturday.range;

  var month = newInterval(function(date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setMonth(date.getMonth() + step);
  }, function(start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, function(date) {
    return date.getMonth();
  });

  var months = month.range;

  var year = newInterval(function(date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setFullYear(date.getFullYear() + step);
  }, function(start, end) {
    return end.getFullYear() - start.getFullYear();
  }, function(date) {
    return date.getFullYear();
  });

  // An optimized implementation for this simple case.
  year.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
      date.setFullYear(Math.floor(date.getFullYear() / k) * k);
      date.setMonth(0, 1);
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step * k);
    });
  };

  var years = year.range;

  var utcMinute = newInterval(function(date) {
    date.setUTCSeconds(0, 0);
  }, function(date, step) {
    date.setTime(+date + step * durationMinute);
  }, function(start, end) {
    return (end - start) / durationMinute;
  }, function(date) {
    return date.getUTCMinutes();
  });

  var utcMinutes = utcMinute.range;

  var utcHour = newInterval(function(date) {
    date.setUTCMinutes(0, 0, 0);
  }, function(date, step) {
    date.setTime(+date + step * durationHour);
  }, function(start, end) {
    return (end - start) / durationHour;
  }, function(date) {
    return date.getUTCHours();
  });

  var utcHours = utcHour.range;

  var utcDay = newInterval(function(date) {
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step);
  }, function(start, end) {
    return (end - start) / durationDay;
  }, function(date) {
    return date.getUTCDate() - 1;
  });

  var utcDays = utcDay.range;

  function utcWeekday(i) {
    return newInterval(function(date) {
      date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step * 7);
    }, function(start, end) {
      return (end - start) / durationWeek;
    });
  }

  var utcWeek = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);

  var utcSundays = utcWeek.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;

  var utcMonth = newInterval(function(date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
  }, function(start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, function(date) {
    return date.getUTCMonth();
  });

  var utcMonths = utcMonth.range;

  var utcYear = newInterval(function(date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function(date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
  }, function(start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, function(date) {
    return date.getUTCFullYear();
  });

  // An optimized implementation for this simple case.
  utcYear.every = function(k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
      date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
  };

  var utcYears = utcYear.range;

  // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimal(1.23) returns ["123", 0].
  function formatDecimal(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);

    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x.slice(i + 1)
    ];
  }

  function exponent$1(x) {
    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
  }

  function formatGroup(grouping, thousands) {
    return function(value, width) {
      var i = value.length,
          t = [],
          j = 0,
          g = grouping[0],
          length = 0;

      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }

      return t.reverse().join(thousands);
    };
  }

  function formatDefault(x, p) {
    x = x.toPrecision(p);

    out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (x[i]) {
        case ".": i0 = i1 = i; break;
        case "0": if (i0 === 0) i0 = i; i1 = i; break;
        case "e": break out;
        default: if (i0 > 0) i0 = 0; break;
      }
    }

    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
  }

  var prefixExponent;

  function formatPrefixAuto(x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1],
        i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
        n = coefficient.length;
    return i === n ? coefficient
        : i > n ? coefficient + new Array(i - n + 1).join("0")
        : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
        : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
  }

  function formatRounded(x, p) {
    var d = formatDecimal(x, p);
    if (!d) return x + "";
    var coefficient = d[0],
        exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
        : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
        : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  var formatTypes = {
    "": formatDefault,
    "%": function(x, p) { return (x * 100).toFixed(p); },
    "b": function(x) { return Math.round(x).toString(2); },
    "c": function(x) { return x + ""; },
    "d": function(x) { return Math.round(x).toString(10); },
    "e": function(x, p) { return x.toExponential(p); },
    "f": function(x, p) { return x.toFixed(p); },
    "g": function(x, p) { return x.toPrecision(p); },
    "o": function(x) { return Math.round(x).toString(8); },
    "p": function(x, p) { return formatRounded(x * 100, p); },
    "r": formatRounded,
    "s": formatPrefixAuto,
    "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
    "x": function(x) { return Math.round(x).toString(16); }
  };

  // [[fill]align][sign][symbol][0][width][,][.precision][type]
  var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

  function formatSpecifier(specifier) {
    return new FormatSpecifier(specifier);
  }

  function FormatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

    var match,
        fill = match[1] || " ",
        align = match[2] || ">",
        sign = match[3] || "-",
        symbol = match[4] || "",
        zero = !!match[5],
        width = match[6] && +match[6],
        comma = !!match[7],
        precision = match[8] && +match[8].slice(1),
        type = match[9] || "";

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // Map invalid types to the default format.
    else if (!formatTypes[type]) type = "";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    this.fill = fill;
    this.align = align;
    this.sign = sign;
    this.symbol = symbol;
    this.zero = zero;
    this.width = width;
    this.comma = comma;
    this.precision = precision;
    this.type = type;
  }

  FormatSpecifier.prototype.toString = function() {
    return this.fill
        + this.align
        + this.sign
        + this.symbol
        + (this.zero ? "0" : "")
        + (this.width == null ? "" : Math.max(1, this.width | 0))
        + (this.comma ? "," : "")
        + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
        + this.type;
  };

  var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];

  function identity$3(x) {
    return x;
  }

  function formatLocale(locale) {
    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
        currency = locale.currency,
        decimal = locale.decimal;

    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);

      var fill = specifier.fill,
          align = specifier.align,
          sign = specifier.sign,
          symbol = specifier.symbol,
          zero = specifier.zero,
          width = specifier.width,
          comma = specifier.comma,
          precision = specifier.precision,
          type = specifier.type;

      // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.
      var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
          suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";

      // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?
      var formatType = formatTypes[type],
          maybeSuffix = !type || /[defgprs%]/.test(type);

      // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].
      precision = precision == null ? (type ? 6 : 12)
          : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
          : Math.max(0, Math.min(20, precision));

      function format(value) {
        var valuePrefix = prefix,
            valueSuffix = suffix,
            i, n, c;

        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;

          // Convert negative to positive, and compute the prefix.
          // Note that -0 is not less than 0, but 1 / -0 is!
          var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);

          // Perform the initial formatting.
          value = formatType(value, precision);

          // If the original value was negative, it may be rounded to zero during
          // formatting; treat this as (positive) zero.
          if (valueNegative) {
            i = -1, n = value.length;
            valueNegative = false;
            while (++i < n) {
              if (c = value.charCodeAt(i), (48 < c && c < 58)
                  || (type === "x" && 96 < c && c < 103)
                  || (type === "X" && 64 < c && c < 71)) {
                valueNegative = true;
                break;
              }
            }
          }

          // Compute the prefix and suffix.
          valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
          valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

          // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.
          if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
              if (c = value.charCodeAt(i), 48 > c || c > 57) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }

        // If the fill character is not "0", grouping is applied before padding.
        if (comma && !zero) value = group(value, Infinity);

        // Compute the padding.
        var length = valuePrefix.length + value.length + valueSuffix.length,
            padding = length < width ? new Array(width - length + 1).join(fill) : "";

        // If the fill character is "0", grouping is applied after padding.
        if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

        // Reconstruct the final output based on the desired alignment.
        switch (align) {
          case "<": return valuePrefix + value + valueSuffix + padding;
          case "=": return valuePrefix + padding + value + valueSuffix;
          case "^": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
        }
        return padding + valuePrefix + value + valueSuffix;
      }

      format.toString = function() {
        return specifier + "";
      };

      return format;
    }

    function formatPrefix(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
          e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
          k = Math.pow(10, -e),
          prefix = prefixes[8 + e / 3];
      return function(value) {
        return f(k * value) + prefix;
      };
    }

    return {
      format: newFormat,
      formatPrefix: formatPrefix
    };
  }

  var locale;
  defaultLocale({
    decimal: ".",
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });

  function defaultLocale(definition) {
    locale = formatLocale(definition);
    exports.format = locale.format;
    exports.formatPrefix = locale.formatPrefix;
    return locale;
  }

  function precisionFixed(step) {
    return Math.max(0, -exponent$1(Math.abs(step)));
  }

  function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
  }

  function precisionRound(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
  }

  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date.setFullYear(d.y);
      return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }

  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date.setUTCFullYear(d.y);
      return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }

  function newYear(y) {
    return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
  }

  function formatLocale$1(locale) {
    var locale_dateTime = locale.dateTime,
        locale_date = locale.date,
        locale_time = locale.time,
        locale_periods = locale.periods,
        locale_weekdays = locale.days,
        locale_shortWeekdays = locale.shortDays,
        locale_months = locale.months,
        locale_shortMonths = locale.shortMonths;

    var periodRe = formatRe(locale_periods),
        periodLookup = formatLookup(locale_periods),
        weekdayRe = formatRe(locale_weekdays),
        weekdayLookup = formatLookup(locale_weekdays),
        shortWeekdayRe = formatRe(locale_shortWeekdays),
        shortWeekdayLookup = formatLookup(locale_shortWeekdays),
        monthRe = formatRe(locale_months),
        monthLookup = formatLookup(locale_months),
        shortMonthRe = formatRe(locale_shortMonths),
        shortMonthLookup = formatLookup(locale_shortMonths);

    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "S": formatSeconds,
      "U": formatWeekNumberSunday,
      "w": formatWeekdayNumber,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };

    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "S": formatUTCSeconds,
      "U": formatUTCWeekNumberSunday,
      "w": formatUTCWeekdayNumber,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };

    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "S": parseSeconds,
      "U": parseWeekNumberSunday,
      "w": parseWeekdayNumber,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };

    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);

    function newFormat(specifier, formats) {
      return function(date) {
        var string = [],
            i = -1,
            j = 0,
            n = specifier.length,
            c,
            pad,
            format;

        if (!(date instanceof Date)) date = new Date(+date);

        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
            else pad = c === "e" ? " " : "0";
            if (format = formats[c]) c = format(date, pad);
            string.push(c);
            j = i + 1;
          }
        }

        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }

    function newParse(specifier, newDate) {
      return function(string) {
        var d = newYear(1900),
            i = parseSpecifier(d, specifier, string += "", 0);
        if (i != string.length) return null;

        // The am-pm flag is 0 for AM, and 1 for PM.
        if ("p" in d) d.H = d.H % 12 + d.p * 12;

        // Convert day-of-week and week-of-year to day-of-year.
        if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          var day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }

        // If a time zone is specified, all fields are interpreted as UTC and then
        // offset according to the specified time zone.
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }

        // Otherwise, all fields are in local time.
        return newDate(d);
      };
    }

    function parseSpecifier(d, specifier, string, j) {
      var i = 0,
          n = specifier.length,
          m = string.length,
          c,
          parse;

      while (i < n) {
        if (j >= m) return -1;
        c = specifier.charCodeAt(i++);
        if (c === 37) {
          c = specifier.charAt(i++);
          parse = parses[c in pads ? specifier.charAt(i++) : c];
          if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }

      return j;
    }

    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }

    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }

    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }

    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }

    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }

    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }

    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }

    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }

    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }

    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }

    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }

    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }

    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }

    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }

    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() { return specifier; };
        return f;
      },
      parse: function(specifier) {
        var p = newParse(specifier += "", localDate);
        p.toString = function() { return specifier; };
        return p;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() { return specifier; };
        return f;
      },
      utcParse: function(specifier) {
        var p = newParse(specifier, utcDate);
        p.toString = function() { return specifier; };
        return p;
      }
    };
  }

  var pads = {"-": "", "_": " ", "0": "0"};
  var numberRe = /^\s*\d+/;
  var percentRe = /^%/;
  var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "",
        string = (sign ? -value : value) + "",
        length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }

  function requote(s) {
    return s.replace(requoteRe, "\\$&");
  }

  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }

  function formatLookup(names) {
    var map = {}, i = -1, n = names.length;
    while (++i < n) map[names[i].toLowerCase()] = i;
    return map;
  }

  function parseWeekdayNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }

  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }

  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }

  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
  }

  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }

  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }

  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }

  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }

  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }

  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }

  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }

  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }

  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }

  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }

  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }

  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }

  function formatDayOfYear(d, p) {
    return pad(1 + day.count(year(d), d), p, 3);
  }

  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }

  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }

  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }

  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }

  function formatWeekNumberSunday(d, p) {
    return pad(timeWeek.count(year(d), d), p, 2);
  }

  function formatWeekdayNumber(d) {
    return d.getDay();
  }

  function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(year(d), d), p, 2);
  }

  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }

  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
  }

  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+"))
        + pad(z / 60 | 0, "0", 2)
        + pad(z % 60, "0", 2);
  }

  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }

  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }

  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }

  function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
  }

  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }

  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }

  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }

  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }

  function formatUTCWeekNumberSunday(d, p) {
    return pad(utcWeek.count(utcYear(d), d), p, 2);
  }

  function formatUTCWeekdayNumber(d) {
    return d.getUTCDay();
  }

  function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d), d), p, 2);
  }

  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }

  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
  }

  function formatUTCZone() {
    return "+0000";
  }

  function formatLiteralPercent() {
    return "%";
  }

  var locale$1;
  defaultLocale$1({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });

  function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition);
    exports.timeFormat = locale$1.format;
    exports.timeParse = locale$1.parse;
    exports.utcFormat = locale$1.utcFormat;
    exports.utcParse = locale$1.utcParse;
    return locale$1;
  }

  var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

  function formatIsoNative(date) {
    return date.toISOString();
  }

  var formatIso = Date.prototype.toISOString
      ? formatIsoNative
      : exports.utcFormat(isoSpecifier);

  function parseIsoNative(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  }

  var parseIso = +new Date("2000-01-01T00:00:00.000Z")
      ? parseIsoNative
      : exports.utcParse(isoSpecifier);

  var array$2 = Array.prototype;

  var map$2 = array$2.map;
  var slice$3 = array$2.slice;

  var implicit = {name: "implicit"};

  function ordinal(range) {
    var index = map$1(),
        domain = [],
        unknown = implicit;

    range = range == null ? [] : slice$3.call(range);

    function scale(d) {
      var key = d + "", i = index.get(key);
      if (!i) {
        if (unknown !== implicit) return unknown;
        index.set(key, i = domain.push(d));
      }
      return range[(i - 1) % range.length];
    }

    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [], index = map$1();
      var i = -1, n = _.length, d, key;
      while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
      return scale;
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice$3.call(_), scale) : range.slice();
    };

    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };

    scale.copy = function() {
      return ordinal()
          .domain(domain)
          .range(range)
          .unknown(unknown);
    };

    return scale;
  }

  function band() {
    var scale = ordinal().unknown(undefined),
        domain = scale.domain,
        ordinalRange = scale.range,
        range$$ = [0, 1],
        step,
        bandwidth,
        round = false,
        paddingInner = 0,
        paddingOuter = 0,
        align = 0.5;

    delete scale.unknown;

    function rescale() {
      var n = domain().length,
          reverse = range$$[1] < range$$[0],
          start = range$$[reverse - 0],
          stop = range$$[1 - reverse];
      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round) step = Math.floor(step);
      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
      var values = range(n).map(function(i) { return start + step * i; });
      return ordinalRange(reverse ? values.reverse() : values);
    }

    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };

    scale.range = function(_) {
      return arguments.length ? (range$$ = [+_[0], +_[1]], rescale()) : range$$.slice();
    };

    scale.rangeRound = function(_) {
      return range$$ = [+_[0], +_[1]], round = true, rescale();
    };

    scale.bandwidth = function() {
      return bandwidth;
    };

    scale.step = function() {
      return step;
    };

    scale.round = function(_) {
      return arguments.length ? (round = !!_, rescale()) : round;
    };

    scale.padding = function(_) {
      return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
    };

    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
    };

    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
    };

    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };

    scale.copy = function() {
      return band()
          .domain(domain())
          .range(range$$)
          .round(round)
          .paddingInner(paddingInner)
          .paddingOuter(paddingOuter)
          .align(align);
    };

    return rescale();
  }

  function pointish(scale) {
    var copy = scale.copy;

    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;

    scale.copy = function() {
      return pointish(copy());
    };

    return scale;
  }

  function point$4() {
    return pointish(band().paddingInner(1));
  }

  function constant$3(x) {
    return function() {
      return x;
    };
  }

  function number$1(x) {
    return +x;
  }

  var unit = [0, 1];

  function deinterpolate(a, b) {
    return (b -= (a = +a))
        ? function(x) { return (x - a) / b; }
        : constant$3(b);
  }

  function deinterpolateClamp(deinterpolate) {
    return function(a, b) {
      var d = deinterpolate(a = +a, b = +b);
      return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
    };
  }

  function reinterpolateClamp(reinterpolate) {
    return function(a, b) {
      var r = reinterpolate(a = +a, b = +b);
      return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
    };
  }

  function bimap(domain, range, deinterpolate, reinterpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
    else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
    return function(x) { return r0(d0(x)); };
  }

  function polymap(domain, range, deinterpolate, reinterpolate) {
    var j = Math.min(domain.length, range.length) - 1,
        d = new Array(j),
        r = new Array(j),
        i = -1;

    // Reverse descending domains.
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }

    while (++i < j) {
      d[i] = deinterpolate(domain[i], domain[i + 1]);
      r[i] = reinterpolate(range[i], range[i + 1]);
    }

    return function(x) {
      var i = bisectRight(domain, x, 1, j) - 1;
      return r[i](d[i](x));
    };
  }

  function copy(source, target) {
    return target
        .domain(source.domain())
        .range(source.range())
        .interpolate(source.interpolate())
        .clamp(source.clamp());
  }

  // deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
  function continuous(deinterpolate$$, reinterpolate) {
    var domain = unit,
        range = unit,
        interpolate$$ = interpolate,
        clamp = false,
        piecewise,
        output,
        input;

    function rescale() {
      piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }

    function scale(x) {
      return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);
    }

    scale.invert = function(y) {
      return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
    };

    scale.domain = function(_) {
      return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
    };

    scale.rangeRound = function(_) {
      return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();
    };

    scale.clamp = function(_) {
      return arguments.length ? (clamp = !!_, rescale()) : clamp;
    };

    scale.interpolate = function(_) {
      return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;
    };

    return rescale();
  }

  function tickFormat(domain, count, specifier) {
    var start = domain[0],
        stop = domain[domain.length - 1],
        step = tickStep(start, stop, count == null ? 10 : count),
        precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
        return exports.formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return exports.format(specifier);
  }

  function linearish(scale) {
    var domain = scale.domain;

    scale.ticks = function(count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };

    scale.tickFormat = function(count, specifier) {
      return tickFormat(domain(), count, specifier);
    };

    scale.nice = function(count) {
      var d = domain(),
          i = d.length - 1,
          n = count == null ? 10 : count,
          start = d[0],
          stop = d[i],
          step = tickStep(start, stop, n);

      if (step) {
        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
        d[0] = Math.floor(start / step) * step;
        d[i] = Math.ceil(stop / step) * step;
        domain(d);
      }

      return scale;
    };

    return scale;
  }

  function linear$2() {
    var scale = continuous(deinterpolate, interpolateNumber);

    scale.copy = function() {
      return copy(scale, linear$2());
    };

    return linearish(scale);
  }

  function identity$4() {
    var domain = [0, 1];

    function scale(x) {
      return +x;
    }

    scale.invert = scale;

    scale.domain = scale.range = function(_) {
      return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();
    };

    scale.copy = function() {
      return identity$4().domain(domain);
    };

    return linearish(scale);
  }

  function nice(domain, interval) {
    domain = domain.slice();

    var i0 = 0,
        i1 = domain.length - 1,
        x0 = domain[i0],
        x1 = domain[i1],
        t;

    if (x1 < x0) {
      t = i0, i0 = i1, i1 = t;
      t = x0, x0 = x1, x1 = t;
    }

    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }

  function deinterpolate$1(a, b) {
    return (b = Math.log(b / a))
        ? function(x) { return Math.log(x / a) / b; }
        : constant$3(b);
  }

  function reinterpolate(a, b) {
    return a < 0
        ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
        : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
  }

  function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
  }

  function powp(base) {
    return base === 10 ? pow10
        : base === Math.E ? Math.exp
        : function(x) { return Math.pow(base, x); };
  }

  function logp(base) {
    return base === Math.E ? Math.log
        : base === 10 && Math.log10
        || base === 2 && Math.log2
        || (base = Math.log(base), function(x) { return Math.log(x) / base; });
  }

  function reflect(f) {
    return function(x) {
      return -f(-x);
    };
  }

  function log() {
    var scale = continuous(deinterpolate$1, reinterpolate).domain([1, 10]),
        domain = scale.domain,
        base = 10,
        logs = logp(10),
        pows = powp(10);

    function rescale() {
      logs = logp(base), pows = powp(base);
      if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
      return scale;
    }

    scale.base = function(_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };

    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };

    scale.ticks = function(count) {
      var d = domain(),
          u = d[0],
          v = d[d.length - 1],
          r;

      if (r = v < u) i = u, u = v, v = i;

      var i = logs(u),
          j = logs(v),
          p,
          k,
          t,
          n = count == null ? 10 : +count,
          z = [];

      if (!(base % 1) && j - i < n) {
        i = Math.round(i) - 1, j = Math.round(j) + 1;
        if (u > 0) for (; i < j; ++i) {
          for (k = 1, p = pows(i); k < base; ++k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        } else for (; i < j; ++i) {
          for (k = base - 1, p = pows(i); k >= 1; --k) {
            t = p * k;
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        }
      } else {
        z = ticks(i, j, Math.min(j - i, n)).map(pows);
      }

      return r ? z.reverse() : z;
    };

    scale.tickFormat = function(count, specifier) {
      if (specifier == null) specifier = base === 10 ? ".0e" : ",";
      if (typeof specifier !== "function") specifier = exports.format(specifier);
      if (count === Infinity) return specifier;
      if (count == null) count = 10;
      var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
      return function(d) {
        var i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5) i *= base;
        return i <= k ? specifier(d) : "";
      };
    };

    scale.nice = function() {
      return domain(nice(domain(), {
        floor: function(x) { return pows(Math.floor(logs(x))); },
        ceil: function(x) { return pows(Math.ceil(logs(x))); }
      }));
    };

    scale.copy = function() {
      return copy(scale, log().base(base));
    };

    return scale;
  }

  function raise(x, exponent) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  }

  function pow() {
    var exponent = 1,
        scale = continuous(deinterpolate, reinterpolate),
        domain = scale.domain;

    function deinterpolate(a, b) {
      return (b = raise(b, exponent) - (a = raise(a, exponent)))
          ? function(x) { return (raise(x, exponent) - a) / b; }
          : constant$3(b);
    }

    function reinterpolate(a, b) {
      b = raise(b, exponent) - (a = raise(a, exponent));
      return function(t) { return raise(a + b * t, 1 / exponent); };
    }

    scale.exponent = function(_) {
      return arguments.length ? (exponent = +_, domain(domain())) : exponent;
    };

    scale.copy = function() {
      return copy(scale, pow().exponent(exponent));
    };

    return linearish(scale);
  }

  function sqrt() {
    return pow().exponent(0.5);
  }

  function quantile() {
    var domain = [],
        range = [],
        thresholds = [];

    function rescale() {
      var i = 0, n = Math.max(1, range.length);
      thresholds = new Array(n - 1);
      while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
      return scale;
    }

    function scale(x) {
      if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];
    }

    scale.invertExtent = function(y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN] : [
        i > 0 ? thresholds[i - 1] : domain[0],
        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
      ];
    };

    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
      domain.sort(ascending);
      return rescale();
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
    };

    scale.quantiles = function() {
      return thresholds.slice();
    };

    scale.copy = function() {
      return quantile()
          .domain(domain)
          .range(range);
    };

    return scale;
  }

  function quantize$1() {
    var x0 = 0,
        x1 = 1,
        n = 1,
        domain = [0.5],
        range = [0, 1];

    function scale(x) {
      if (x <= x) return range[bisectRight(domain, x, 0, n)];
    }

    function rescale() {
      var i = -1;
      domain = new Array(n);
      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
      return scale;
    }

    scale.domain = function(_) {
      return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
    };

    scale.range = function(_) {
      return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();
    };

    scale.invertExtent = function(y) {
      var i = range.indexOf(y);
      return i < 0 ? [NaN, NaN]
          : i < 1 ? [x0, domain[0]]
          : i >= n ? [domain[n - 1], x1]
          : [domain[i - 1], domain[i]];
    };

    scale.copy = function() {
      return quantize$1()
          .domain([x0, x1])
          .range(range);
    };

    return linearish(scale);
  }

  function threshold$1() {
    var domain = [0.5],
        range = [0, 1],
        n = 1;

    function scale(x) {
      if (x <= x) return range[bisectRight(domain, x, 0, n)];
    }

    scale.domain = function(_) {
      return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };

    scale.range = function(_) {
      return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };

    scale.invertExtent = function(y) {
      var i = range.indexOf(y);
      return [domain[i - 1], domain[i]];
    };

    scale.copy = function() {
      return threshold$1()
          .domain(domain)
          .range(range);
    };

    return scale;
  }

var   durationSecond$1 = 1000;
var   durationMinute$1 = durationSecond$1 * 60;
var   durationHour$1 = durationMinute$1 * 60;
var   durationDay$1 = durationHour$1 * 24;
var   durationWeek$1 = durationDay$1 * 7;
  var durationMonth = durationDay$1 * 30;
  var durationYear = durationDay$1 * 365;
  function date$1(t) {
    return new Date(t);
  }

  function number$2(t) {
    return t instanceof Date ? +t : +new Date(+t);
  }

  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
    var scale = continuous(deinterpolate, interpolateNumber),
        invert = scale.invert,
        domain = scale.domain;

    var formatMillisecond = format(".%L"),
        formatSecond = format(":%S"),
        formatMinute = format("%I:%M"),
        formatHour = format("%I %p"),
        formatDay = format("%a %d"),
        formatWeek = format("%b %d"),
        formatMonth = format("%B"),
        formatYear = format("%Y");

    var tickIntervals = [
      [second,  1,      durationSecond$1],
      [second,  5,  5 * durationSecond$1],
      [second, 15, 15 * durationSecond$1],
      [second, 30, 30 * durationSecond$1],
      [minute,  1,      durationMinute$1],
      [minute,  5,  5 * durationMinute$1],
      [minute, 15, 15 * durationMinute$1],
      [minute, 30, 30 * durationMinute$1],
      [  hour,  1,      durationHour$1  ],
      [  hour,  3,  3 * durationHour$1  ],
      [  hour,  6,  6 * durationHour$1  ],
      [  hour, 12, 12 * durationHour$1  ],
      [   day,  1,      durationDay$1   ],
      [   day,  2,  2 * durationDay$1   ],
      [  week,  1,      durationWeek$1  ],
      [ month,  1,      durationMonth ],
      [ month,  3,  3 * durationMonth ],
      [  year,  1,      durationYear  ]
    ];

    function tickFormat(date) {
      return (second(date) < date ? formatMillisecond
          : minute(date) < date ? formatSecond
          : hour(date) < date ? formatMinute
          : day(date) < date ? formatHour
          : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
          : year(date) < date ? formatMonth
          : formatYear)(date);
    }

    function tickInterval(interval, start, stop, step) {
      if (interval == null) interval = 10;

      // If a desired tick count is specified, pick a reasonable tick interval
      // based on the extent of the domain and a rough estimate of tick size.
      // Otherwise, assume interval is already a time interval and use it.
      if (typeof interval === "number") {
        var target = Math.abs(stop - start) / interval,
            i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
        if (i === tickIntervals.length) {
          step = tickStep(start / durationYear, stop / durationYear, interval);
          interval = year;
        } else if (i) {
          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
          step = i[1];
          interval = i[0];
        } else {
          step = tickStep(start, stop, interval);
          interval = millisecond;
        }
      }

      return step == null ? interval : interval.every(step);
    }

    scale.invert = function(y) {
      return new Date(invert(y));
    };

    scale.domain = function(_) {
      return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);
    };

    scale.ticks = function(interval, step) {
      var d = domain(),
          t0 = d[0],
          t1 = d[d.length - 1],
          r = t1 < t0,
          t;
      if (r) t = t0, t0 = t1, t1 = t;
      t = tickInterval(interval, t0, t1, step);
      t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
      return r ? t.reverse() : t;
    };

    scale.tickFormat = function(count, specifier) {
      return specifier == null ? tickFormat : format(specifier);
    };

    scale.nice = function(interval, step) {
      var d = domain();
      return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
          ? domain(nice(d, interval))
          : scale;
    };

    scale.copy = function() {
      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
    };

    return scale;
  }

  function time() {
    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
  }

  function utcTime() {
    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
  }

  function colors(s) {
    return s.match(/.{6}/g).map(function(x) {
      return "#" + x;
    });
  }

  var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

  var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

  var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

  var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

  var cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

  var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

  var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

  var rainbow = cubehelix();

  function rainbow$1(t) {
    if (t < 0 || t > 1) t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    rainbow.h = 360 * t - 100;
    rainbow.s = 1.5 - 1.5 * ts;
    rainbow.l = 0.8 - 0.9 * ts;
    return rainbow + "";
  }

  function ramp(range) {
    var n = range.length;
    return function(t) {
      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
  }

  var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

  var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

  var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

  var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

  function sequential(interpolator) {
    var x0 = 0,
        x1 = 1,
        clamp = false;

    function scale(x) {
      var t = (x - x0) / (x1 - x0);
      return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
    }

    scale.domain = function(_) {
      return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
    };

    scale.clamp = function(_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };

    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };

    scale.copy = function() {
      return sequential(interpolator).domain([x0, x1]).clamp(clamp);
    };

    return linearish(scale);
  }

  var xhtml = "http://www.w3.org/1999/xhtml";

  var namespaces = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  function namespace(name) {
    var prefix = name += "", i = prefix.indexOf(":");
    if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
    return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
  }

  function creatorInherit(name) {
    return function() {
      var document = this.ownerDocument,
          uri = this.namespaceURI;
      return uri === xhtml && document.documentElement.namespaceURI === xhtml
          ? document.createElement(name)
          : document.createElementNS(uri, name);
    };
  }

  function creatorFixed(fullname) {
    return function() {
      return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
  }

  function creator(name) {
    var fullname = namespace(name);
    return (fullname.local
        ? creatorFixed
        : creatorInherit)(fullname);
  }

  var nextId = 0;

  function local() {
    return new Local;
  }

  function Local() {
    this._ = "@" + (++nextId).toString(36);
  }

  Local.prototype = local.prototype = {
    constructor: Local,
    get: function(node) {
      var id = this._;
      while (!(id in node)) if (!(node = node.parentNode)) return;
      return node[id];
    },
    set: function(node, value) {
      return node[this._] = value;
    },
    remove: function(node) {
      return this._ in node && delete node[this._];
    },
    toString: function() {
      return this._;
    }
  };

  var matcher = function(selector) {
    return function() {
      return this.matches(selector);
    };
  };

  if (typeof document !== "undefined") {
    var element = document.documentElement;
    if (!element.matches) {
      var vendorMatches = element.webkitMatchesSelector
          || element.msMatchesSelector
          || element.mozMatchesSelector
          || element.oMatchesSelector;
      matcher = function(selector) {
        return function() {
          return vendorMatches.call(this, selector);
        };
      };
    }
  }

  var matcher$1 = matcher;

  var filterEvents = {};

  exports.event = null;

  if (typeof document !== "undefined") {
    var element$1 = document.documentElement;
    if (!("onmouseenter" in element$1)) {
      filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
    }
  }

  function filterContextListener(listener, index, group) {
    listener = contextListener(listener, index, group);
    return function(event) {
      var related = event.relatedTarget;
      if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
        listener.call(this, event);
      }
    };
  }

  function contextListener(listener, index, group) {
    return function(event1) {
      var event0 = exports.event; // Events can be reentrant (e.g., focus).
      exports.event = event1;
      try {
        listener.call(this, this.__data__, index, group);
      } finally {
        exports.event = event0;
      }
    };
  }

  function parseTypenames$1(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
      var name = "", i = t.indexOf(".");
      if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
      return {type: t, name: name};
    });
  }

  function onRemove(typename) {
    return function() {
      var on = this.__on;
      if (!on) return;
      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
        } else {
          on[++i] = o;
        }
      }
      if (++i) on.length = i;
      else delete this.__on;
    };
  }

  function onAdd(typename, value, capture) {
    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
    return function(d, i, group) {
      var on = this.__on, o, listener = wrap(value, i, group);
      if (on) for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
          this.addEventListener(o.type, o.listener = listener, o.capture = capture);
          o.value = value;
          return;
        }
      }
      this.addEventListener(typename.type, listener, capture);
      o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
      if (!on) this.__on = [o];
      else on.push(o);
    };
  }

  function selection_on(typename, value, capture) {
    var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

    if (arguments.length < 2) {
      var on = this.node().__on;
      if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
      return;
    }

    on = value ? onAdd : onRemove;
    if (capture == null) capture = false;
    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
    return this;
  }

  function customEvent(event1, listener, that, args) {
    var event0 = exports.event;
    event1.sourceEvent = exports.event;
    exports.event = event1;
    try {
      return listener.apply(that, args);
    } finally {
      exports.event = event0;
    }
  }

  function sourceEvent() {
    var current = exports.event, source;
    while (source = current.sourceEvent) current = source;
    return current;
  }

  function point$5(node, event) {
    var svg = node.ownerSVGElement || node;

    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }

    var rect = node.getBoundingClientRect();
    return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
  }

  function mouse(node) {
    var event = sourceEvent();
    if (event.changedTouches) event = event.changedTouches[0];
    return point$5(node, event);
  }

  function none$2() {}

  function selector(selector) {
    return selector == null ? none$2 : function() {
      return this.querySelector(selector);
    };
  }

  function selection_select(select) {
    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
        }
      }
    }

    return new Selection(subgroups, this._parents);
  }

  function empty() {
    return [];
  }

  function selectorAll(selector) {
    return selector == null ? empty : function() {
      return this.querySelectorAll(selector);
    };
  }

  function selection_selectAll(select) {
    if (typeof select !== "function") select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          subgroups.push(select.call(node, node.__data__, i, group));
          parents.push(node);
        }
      }
    }

    return new Selection(subgroups, parents);
  }

  function selection_filter(match) {
    if (typeof match !== "function") match = matcher$1(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Selection(subgroups, this._parents);
  }

  function sparse(update) {
    return new Array(update.length);
  }

  function selection_enter() {
    return new Selection(this._enter || this._groups.map(sparse), this._parents);
  }

  function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
  }

  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
    insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
    querySelector: function(selector) { return this._parent.querySelector(selector); },
    querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
  };

  function constant$4(x) {
    return function() {
      return x;
    };
  }

  var keyPrefix = "$"; // Protect against keys like “__proto__”.

  function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0,
        node,
        groupLength = group.length,
        dataLength = data.length;

    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for (; i < dataLength; ++i) {
      if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }

    // Put any non-null nodes that don’t fit into exit.
    for (; i < groupLength; ++i) {
      if (node = group[i]) {
        exit[i] = node;
      }
    }
  }

  function bindKey(parent, group, enter, update, exit, data, key) {
    var i,
        node,
        nodeByKeyValue = {},
        groupLength = group.length,
        dataLength = data.length,
        keyValues = new Array(groupLength),
        keyValue;

    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for (i = 0; i < groupLength; ++i) {
      if (node = group[i]) {
        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
        if (keyValue in nodeByKeyValue) {
          exit[i] = node;
        } else {
          nodeByKeyValue[keyValue] = node;
        }
      }
    }

    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for (i = 0; i < dataLength; ++i) {
      keyValue = keyPrefix + key.call(parent, data[i], i, data);
      if (node = nodeByKeyValue[keyValue]) {
        update[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue[keyValue] = null;
      } else {
        enter[i] = new EnterNode(parent, data[i]);
      }
    }

    // Add any remaining nodes that were not bound to data to exit.
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
        exit[i] = node;
      }
    }
  }

  function selection_data(value, key) {
    if (!value) {
      data = new Array(this.size()), j = -1;
      this.each(function(d) { data[++j] = d; });
      return data;
    }

    var bind = key ? bindKey : bindIndex,
        parents = this._parents,
        groups = this._groups;

    if (typeof value !== "function") value = constant$4(value);

    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      var parent = parents[j],
          group = groups[j],
          groupLength = group.length,
          data = value.call(parent, parent && parent.__data__, j, parents),
          dataLength = data.length,
          enterGroup = enter[j] = new Array(dataLength),
          updateGroup = update[j] = new Array(dataLength),
          exitGroup = exit[j] = new Array(groupLength);

      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

      // Now connect the enter nodes to their following update node, such that
      // appendChild can insert the materialized enter node before this node,
      // rather than at the end of the parent node.
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
          if (i0 >= i1) i1 = i0 + 1;
          while (!(next = updateGroup[i1]) && ++i1 < dataLength);
          previous._next = next || null;
        }
      }
    }

    update = new Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
  }

  function selection_exit() {
    return new Selection(this._exit || this._groups.map(sparse), this._parents);
  }

  function selection_merge(selection) {

    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Selection(merges, this._parents);
  }

  function selection_order() {

    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }

    return this;
  }

  function selection_sort(compare) {
    if (!compare) compare = ascending$2;

    function compareNode(a, b) {
      return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }

    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          sortgroup[i] = node;
        }
      }
      sortgroup.sort(compareNode);
    }

    return new Selection(sortgroups, this._parents).order();
  }

  function ascending$2(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }

  function selection_call() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
  }

  function selection_nodes() {
    var nodes = new Array(this.size()), i = -1;
    this.each(function() { nodes[++i] = this; });
    return nodes;
  }

  function selection_node() {

    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        var node = group[i];
        if (node) return node;
      }
    }

    return null;
  }

  function selection_size() {
    var size = 0;
    this.each(function() { ++size; });
    return size;
  }

  function selection_empty() {
    return !this.node();
  }

  function selection_each(callback) {

    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i]) callback.call(node, node.__data__, i, group);
      }
    }

    return this;
  }

  function attrRemove(name) {
    return function() {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant(name, value) {
    return function() {
      this.setAttribute(name, value);
    };
  }

  function attrConstantNS(fullname, value) {
    return function() {
      this.setAttributeNS(fullname.space, fullname.local, value);
    };
  }

  function attrFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttribute(name);
      else this.setAttribute(name, v);
    };
  }

  function attrFunctionNS(fullname, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
      else this.setAttributeNS(fullname.space, fullname.local, v);
    };
  }

  function selection_attr(name, value) {
    var fullname = namespace(name);

    if (arguments.length < 2) {
      var node = this.node();
      return fullname.local
          ? node.getAttributeNS(fullname.space, fullname.local)
          : node.getAttribute(fullname);
    }

    return this.each((value == null
        ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
        ? (fullname.local ? attrFunctionNS : attrFunction)
        : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
  }

  function window(node) {
    return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
        || (node.document && node) // node is a Window
        || node.defaultView; // node is a Document
  }

  function styleRemove(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }

  function styleConstant(name, value, priority) {
    return function() {
      this.style.setProperty(name, value, priority);
    };
  }

  function styleFunction(name, value, priority) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) this.style.removeProperty(name);
      else this.style.setProperty(name, v, priority);
    };
  }

  function selection_style(name, value, priority) {
    var node;
    return arguments.length > 1
        ? this.each((value == null
              ? styleRemove : typeof value === "function"
              ? styleFunction
              : styleConstant)(name, value, priority == null ? "" : priority))
        : window(node = this.node())
            .getComputedStyle(node, null)
            .getPropertyValue(name);
  }

  function propertyRemove(name) {
    return function() {
      delete this[name];
    };
  }

  function propertyConstant(name, value) {
    return function() {
      this[name] = value;
    };
  }

  function propertyFunction(name, value) {
    return function() {
      var v = value.apply(this, arguments);
      if (v == null) delete this[name];
      else this[name] = v;
    };
  }

  function selection_property(name, value) {
    return arguments.length > 1
        ? this.each((value == null
            ? propertyRemove : typeof value === "function"
            ? propertyFunction
            : propertyConstant)(name, value))
        : this.node()[name];
  }

  function classArray(string) {
    return string.trim().split(/^|\s+/);
  }

  function classList(node) {
    return node.classList || new ClassList(node);
  }

  function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
  }

  ClassList.prototype = {
    add: function(name) {
      var i = this._names.indexOf(name);
      if (i < 0) {
        this._names.push(name);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    remove: function(name) {
      var i = this._names.indexOf(name);
      if (i >= 0) {
        this._names.splice(i, 1);
        this._node.setAttribute("class", this._names.join(" "));
      }
    },
    contains: function(name) {
      return this._names.indexOf(name) >= 0;
    }
  };

  function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n) list.add(names[i]);
  }

  function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n) list.remove(names[i]);
  }

  function classedTrue(names) {
    return function() {
      classedAdd(this, names);
    };
  }

  function classedFalse(names) {
    return function() {
      classedRemove(this, names);
    };
  }

  function classedFunction(names, value) {
    return function() {
      (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
  }

  function selection_classed(name, value) {
    var names = classArray(name + "");

    if (arguments.length < 2) {
      var list = classList(this.node()), i = -1, n = names.length;
      while (++i < n) if (!list.contains(names[i])) return false;
      return true;
    }

    return this.each((typeof value === "function"
        ? classedFunction : value
        ? classedTrue
        : classedFalse)(names, value));
  }

  function textRemove() {
    this.textContent = "";
  }

  function textConstant(value) {
    return function() {
      this.textContent = value;
    };
  }

  function textFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    };
  }

  function selection_text(value) {
    return arguments.length
        ? this.each(value == null
            ? textRemove : (typeof value === "function"
            ? textFunction
            : textConstant)(value))
        : this.node().textContent;
  }

  function htmlRemove() {
    this.innerHTML = "";
  }

  function htmlConstant(value) {
    return function() {
      this.innerHTML = value;
    };
  }

  function htmlFunction(value) {
    return function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    };
  }

  function selection_html(value) {
    return arguments.length
        ? this.each(value == null
            ? htmlRemove : (typeof value === "function"
            ? htmlFunction
            : htmlConstant)(value))
        : this.node().innerHTML;
  }

  function raise$1() {
    if (this.nextSibling) this.parentNode.appendChild(this);
  }

  function selection_raise() {
    return this.each(raise$1);
  }

  function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }

  function selection_lower() {
    return this.each(lower);
  }

  function selection_append(name) {
    var create = typeof name === "function" ? name : creator(name);
    return this.select(function() {
      return this.appendChild(create.apply(this, arguments));
    });
  }

  function constantNull() {
    return null;
  }

  function selection_insert(name, before) {
    var create = typeof name === "function" ? name : creator(name),
        select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
    return this.select(function() {
      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
  }

  function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }

  function selection_remove() {
    return this.each(remove);
  }

  function selection_datum(value) {
    return arguments.length
        ? this.property("__data__", value)
        : this.node().__data__;
  }

  function dispatchEvent(node, type, params) {
    var window$$ = window(node),
        event = window$$.CustomEvent;

    if (event) {
      event = new event(type, params);
    } else {
      event = window$$.document.createEvent("Event");
      if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
      else event.initEvent(type, false, false);
    }

    node.dispatchEvent(event);
  }

  function dispatchConstant(type, params) {
    return function() {
      return dispatchEvent(this, type, params);
    };
  }

  function dispatchFunction(type, params) {
    return function() {
      return dispatchEvent(this, type, params.apply(this, arguments));
    };
  }

  function selection_dispatch(type, params) {
    return this.each((typeof params === "function"
        ? dispatchFunction
        : dispatchConstant)(type, params));
  }

  var root = [null];

  function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
  }

  function selection() {
    return new Selection([[document.documentElement]], root);
  }

  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: selection_select,
    selectAll: selection_selectAll,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    merge: selection_merge,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch
  };

  function select(selector) {
    return typeof selector === "string"
        ? new Selection([[document.querySelector(selector)]], [document.documentElement])
        : new Selection([[selector]], root);
  }

  function selectAll(selector) {
    return typeof selector === "string"
        ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
        : new Selection([selector == null ? [] : selector], root);
  }

  function touch(node, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return point$5(node, touch);
      }
    }

    return null;
  }

  function touches(node, touches) {
    if (touches == null) touches = sourceEvent().touches;

    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
      points[i] = point$5(node, touches[i]);
    }

    return points;
  }

  var emptyOn = dispatch("start", "end", "interrupt");
  var emptyTween = [];

  var CREATED = 0;
  var SCHEDULED = 1;
  var STARTING = 2;
  var STARTED = 3;
  var ENDING = 4;
  var ENDED = 5;

  function schedule(node, name, id, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules) node.__transition = {};
    else if (id in schedules) return;
    create(node, id, {
      name: name,
      index: index, // For context during callback.
      group: group, // For context during callback.
      on: emptyOn,
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED
    });
  }

  function init(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
    return schedule;
  }

  function set$2(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
    return schedule;
  }

  function get$1(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
    return schedule;
  }

  function create(node, id, self) {
    var schedules = node.__transition,
        tween;

    // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!
    schedules[id] = self;
    self.timer = timer(schedule, 0, self.time);

    // If the delay is greater than this first sleep, sleep some more;
    // otherwise, start immediately.
    function schedule(elapsed) {
      self.state = SCHEDULED;
      if (self.delay <= elapsed) start(elapsed - self.delay);
      else self.timer.restart(start, self.delay, self.time);
    }

    function start(elapsed) {
      var i, j, n, o;

      for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name) continue;

        // Interrupt the active transition, if any.
        // Dispatch the interrupt event.
        if (o.state === STARTED) {
          o.state = ENDED;
          o.timer.stop();
          o.on.call("interrupt", node, node.__data__, o.index, o.group);
          delete schedules[i];
        }

        // Cancel any pre-empted transitions. No interrupt event is dispatched
        // because the cancelled transitions never started. Note that this also
        // removes this transition from the pending list!
        else if (+i < id) {
          o.state = ENDED;
          o.timer.stop();
          delete schedules[i];
        }
      }

      // Defer the first tick to end of the current frame; see mbostock/d3#1576.
      // Note the transition may be canceled after start and before the first tick!
      // Note this must be scheduled before the start event; see d3/d3-transition#16!
      // Assuming this is successful, subsequent callbacks go straight to tick.
      timeout$1(function() {
        if (self.state === STARTED) {
          self.timer.restart(tick, self.delay, self.time);
          tick(elapsed);
        }
      });

      // Dispatch the start event.
      // Note this must be done before the tween are initialized.
      self.state = STARTING;
      self.on.call("start", node, node.__data__, self.index, self.group);
      if (self.state !== STARTING) return; // interrupted
      self.state = STARTED;

      // Initialize the tween, deleting null tween.
      tween = new Array(n = self.tween.length);
      for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
          tween[++j] = o;
        }
      }
      tween.length = j + 1;
    }

    function tick(elapsed) {
      var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1),
          i = -1,
          n = tween.length;

      while (++i < n) {
        tween[i].call(null, t);
      }

      // Dispatch the end event.
      if (self.state === ENDING) {
        self.state = ENDED;
        self.timer.stop();
        self.on.call("end", node, node.__data__, self.index, self.group);
        for (i in schedules) if (+i !== id) return void delete schedules[id];
        delete node.__transition;
      }
    }
  }

  function interrupt(node, name) {
    var schedules = node.__transition,
        schedule,
        active,
        empty = true,
        i;

    if (!schedules) return;

    name = name == null ? null : name + "";

    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
      active = schedule.state === STARTED;
      schedule.state = ENDED;
      schedule.timer.stop();
      if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
      delete schedules[i];
    }

    if (empty) delete node.__transition;
  }

  function selection_interrupt(name) {
    return this.each(function() {
      interrupt(this, name);
    });
  }

  function tweenRemove(id, name) {
    var tween0, tween1;
    return function() {
      var schedule = set$2(this, id),
          tween = schedule.tween;

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice();
            tween1.splice(i, 1);
            break;
          }
        }
      }

      schedule.tween = tween1;
    };
  }

  function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== "function") throw new Error;
    return function() {
      var schedule = set$2(this, id),
          tween = schedule.tween;

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t;
            break;
          }
        }
        if (i === n) tween1.push(t);
      }

      schedule.tween = tween1;
    };
  }

  function transition_tween(name, value) {
    var id = this._id;

    name += "";

    if (arguments.length < 2) {
      var tween = get$1(this.node(), id).tween;
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value;
        }
      }
      return null;
    }

    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
  }

  function tweenValue(transition, name, value) {
    var id = transition._id;

    transition.each(function() {
      var schedule = set$2(this, id);
      (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });

    return function(node) {
      return get$1(node, id).value[name];
    };
  }

  function interpolate$1(a, b) {
    var c;
    return (typeof b === "number" ? interpolateNumber
        : b instanceof color ? interpolateRgb
        : (c = color(b)) ? (b = c, interpolateRgb)
        : interpolateString)(a, b);
  }

  function attrRemove$1(name) {
    return function() {
      this.removeAttribute(name);
    };
  }

  function attrRemoveNS$1(fullname) {
    return function() {
      this.removeAttributeNS(fullname.space, fullname.local);
    };
  }

  function attrConstant$1(name, interpolate, value1) {
    var value00,
        interpolate0;
    return function() {
      var value0 = this.getAttribute(name);
      return value0 === value1 ? null
          : value0 === value00 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value1);
    };
  }

  function attrConstantNS$1(fullname, interpolate, value1) {
    var value00,
        interpolate0;
    return function() {
      var value0 = this.getAttributeNS(fullname.space, fullname.local);
      return value0 === value1 ? null
          : value0 === value00 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value1);
    };
  }

  function attrFunction$1(name, interpolate, value) {
    var value00,
        value10,
        interpolate0;
    return function() {
      var value0, value1 = value(this);
      if (value1 == null) return void this.removeAttribute(name);
      value0 = this.getAttribute(name);
      return value0 === value1 ? null
          : value0 === value00 && value1 === value10 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
  }

  function attrFunctionNS$1(fullname, interpolate, value) {
    var value00,
        value10,
        interpolate0;
    return function() {
      var value0, value1 = value(this);
      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
      value0 = this.getAttributeNS(fullname.space, fullname.local);
      return value0 === value1 ? null
          : value0 === value00 && value1 === value10 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
  }

  function transition_attr(name, value) {
    var fullname = namespace(name), i = fullname === "transform" ? interpolateTransform$2 : interpolate$1;
    return this.attrTween(name, typeof value === "function"
        ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
        : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
  }

  function attrTweenNS(fullname, value) {
    function tween() {
      var node = this, i = value.apply(node, arguments);
      return i && function(t) {
        node.setAttributeNS(fullname.space, fullname.local, i(t));
      };
    }
    tween._value = value;
    return tween;
  }

  function attrTween(name, value) {
    function tween() {
      var node = this, i = value.apply(node, arguments);
      return i && function(t) {
        node.setAttribute(name, i(t));
      };
    }
    tween._value = value;
    return tween;
  }

  function transition_attrTween(name, value) {
    var key = "attr." + name;
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    var fullname = namespace(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
  }

  function delayFunction(id, value) {
    return function() {
      init(this, id).delay = +value.apply(this, arguments);
    };
  }

  function delayConstant(id, value) {
    return value = +value, function() {
      init(this, id).delay = value;
    };
  }

  function transition_delay(value) {
    var id = this._id;

    return arguments.length
        ? this.each((typeof value === "function"
            ? delayFunction
            : delayConstant)(id, value))
        : get$1(this.node(), id).delay;
  }

  function durationFunction(id, value) {
    return function() {
      set$2(this, id).duration = +value.apply(this, arguments);
    };
  }

  function durationConstant(id, value) {
    return value = +value, function() {
      set$2(this, id).duration = value;
    };
  }

  function transition_duration(value) {
    var id = this._id;

    return arguments.length
        ? this.each((typeof value === "function"
            ? durationFunction
            : durationConstant)(id, value))
        : get$1(this.node(), id).duration;
  }

  function easeConstant(id, value) {
    if (typeof value !== "function") throw new Error;
    return function() {
      set$2(this, id).ease = value;
    };
  }

  function transition_ease(value) {
    var id = this._id;

    return arguments.length
        ? this.each(easeConstant(id, value))
        : get$1(this.node(), id).ease;
  }

  function transition_filter(match) {
    if (typeof match !== "function") match = matcher$1(match);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          subgroup.push(node);
        }
      }
    }

    return new Transition(subgroups, this._parents, this._name, this._id);
  }

  function transition_merge(transition) {
    if (transition._id !== this._id) throw new Error;

    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
      for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
          merge[i] = node;
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j];
    }

    return new Transition(merges, this._parents, this._name, this._id);
  }

  function start$1(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
      var i = t.indexOf(".");
      if (i >= 0) t = t.slice(0, i);
      return !t || t === "start";
    });
  }

  function onFunction(id, name, listener) {
    var on0, on1, sit = start$1(name) ? init : set$2;
    return function() {
      var schedule = sit(this, id),
          on = schedule.on;

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

      schedule.on = on1;
    };
  }

  function transition_on(name, listener) {
    var id = this._id;

    return arguments.length < 2
        ? get$1(this.node(), id).on.on(name)
        : this.each(onFunction(id, name, listener));
  }

  function removeFunction(id) {
    return function() {
      var parent = this.parentNode;
      for (var i in this.__transition) if (+i !== id) return;
      if (parent) parent.removeChild(this);
    };
  }

  function transition_remove() {
    return this.on("end.remove", removeFunction(this._id));
  }

  function transition_select(select) {
    var name = this._name,
        id = this._id;

    if (typeof select !== "function") select = selector(select);

    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          subgroup[i] = subnode;
          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
        }
      }
    }

    return new Transition(subgroups, this._parents, name, id);
  }

  function transition_selectAll(select) {
    var name = this._name,
        id = this._id;

    if (typeof select !== "function") select = selectorAll(select);

    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
            if (child = children[k]) {
              schedule(child, name, id, k, children, inherit);
            }
          }
          subgroups.push(children);
          parents.push(node);
        }
      }
    }

    return new Transition(subgroups, parents, name, id);
  }

  var Selection$1 = selection.prototype.constructor;

  function transition_selection() {
    return new Selection$1(this._groups, this._parents);
  }

  function styleRemove$1(name, interpolate) {
    var value00,
        value10,
        interpolate0;
    return function() {
      var style = window(this).getComputedStyle(this, null),
          value0 = style.getPropertyValue(name),
          value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
      return value0 === value1 ? null
          : value0 === value00 && value1 === value10 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
  }

  function styleRemoveEnd(name) {
    return function() {
      this.style.removeProperty(name);
    };
  }

  function styleConstant$1(name, interpolate, value1) {
    var value00,
        interpolate0;
    return function() {
      var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
      return value0 === value1 ? null
          : value0 === value00 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value1);
    };
  }

  function styleFunction$1(name, interpolate, value) {
    var value00,
        value10,
        interpolate0;
    return function() {
      var style = window(this).getComputedStyle(this, null),
          value0 = style.getPropertyValue(name),
          value1 = value(this);
      if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
      return value0 === value1 ? null
          : value0 === value00 && value1 === value10 ? interpolate0
          : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
  }

  function transition_style(name, value, priority) {
    var i = (name += "") === "transform" ? interpolateTransform$1 : interpolate$1;
    return value == null ? this
            .styleTween(name, styleRemove$1(name, i))
            .on("end.style." + name, styleRemoveEnd(name))
        : this.styleTween(name, typeof value === "function"
            ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
            : styleConstant$1(name, i, value), priority);
  }

  function styleTween(name, value, priority) {
    function tween() {
      var node = this, i = value.apply(node, arguments);
      return i && function(t) {
        node.style.setProperty(name, i(t), priority);
      };
    }
    tween._value = value;
    return tween;
  }

  function transition_styleTween(name, value, priority) {
    var key = "style." + (name += "");
    if (arguments.length < 2) return (key = this.tween(key)) && key._value;
    if (value == null) return this.tween(key, null);
    if (typeof value !== "function") throw new Error;
    return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
  }

  function textConstant$1(value) {
    return function() {
      this.textContent = value;
    };
  }

  function textFunction$1(value) {
    return function() {
      var value1 = value(this);
      this.textContent = value1 == null ? "" : value1;
    };
  }

  function transition_text(value) {
    return this.tween("text", typeof value === "function"
        ? textFunction$1(tweenValue(this, "text", value))
        : textConstant$1(value == null ? "" : value + ""));
  }

  function transition_transition() {
    var name = this._name,
        id0 = this._id,
        id1 = newId();

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          var inherit = get$1(node, id0);
          schedule(node, name, id1, i, group, {
            time: inherit.time + inherit.delay + inherit.duration,
            delay: 0,
            duration: inherit.duration,
            ease: inherit.ease
          });
        }
      }
    }

    return new Transition(groups, this._parents, name, id1);
  }

  var id = 0;

  function Transition(groups, parents, name, id) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id;
  }

  function transition(name) {
    return selection().transition(name);
  }

  function newId() {
    return ++id;
  }

  var selection_prototype = selection.prototype;

  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease
  };

  var defaultTiming = {
    time: null, // Set on use.
    delay: 0,
    duration: 250,
    ease: easeCubicInOut
  };

  function inherit(node, id) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id])) {
      if (!(node = node.parentNode)) {
        return defaultTiming.time = now(), defaultTiming;
      }
    }
    return timing;
  }

  function selection_transition(name) {
    var id,
        timing;

    if (name instanceof Transition) {
      id = name._id, name = name._name;
    } else {
      id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
    }

    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
          schedule(node, name, id, i, group, timing || inherit(node, id));
        }
      }
    }

    return new Transition(groups, this._parents, name, id);
  }

  selection.prototype.interrupt = selection_interrupt;
  selection.prototype.transition = selection_transition;

  var root$1 = [null];

  function active(node, name) {
    var schedules = node.__transition,
        schedule,
        i;

    if (schedules) {
      name = name == null ? null : name + "";
      for (i in schedules) {
        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
          return new Transition([[node]], root$1, name, +i);
        }
      }
    }

    return null;
  }

  var slice$4 = Array.prototype.slice;

  function identity$5(x) {
    return x;
  }

  var top = 1;
  var right = 2;
  var bottom = 3;
  var left = 4;
var   epsilon$2 = 1e-6;
  function translateX(scale0, scale1, d) {
    var x = scale0(d);
    return "translate(" + (isFinite(x) ? x : scale1(d)) + ",0)";
  }

  function translateY(scale0, scale1, d) {
    var y = scale0(d);
    return "translate(0," + (isFinite(y) ? y : scale1(d)) + ")";
  }

  function center(scale) {
    var offset = scale.bandwidth() / 2;
    if (scale.round()) offset = Math.round(offset);
    return function(d) {
      return scale(d) + offset;
    };
  }

  function entering() {
    return !this.__axis;
  }

  function axis(orient, scale) {
    var tickArguments = [],
        tickValues = null,
        tickFormat = null,
        tickSizeInner = 6,
        tickSizeOuter = 6,
        tickPadding = 3;

    function axis(context) {
      var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
          format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5) : tickFormat,
          spacing = Math.max(tickSizeInner, 0) + tickPadding,
          transform = orient === top || orient === bottom ? translateX : translateY,
          range = scale.range(),
          range0 = range[0] + 0.5,
          range1 = range[range.length - 1] + 0.5,
          position = (scale.bandwidth ? center : identity$5)(scale.copy()),
          selection = context.selection ? context.selection() : context,
          path = selection.selectAll(".domain").data([null]),
          tick = selection.selectAll(".tick").data(values, scale).order(),
          tickExit = tick.exit(),
          tickEnter = tick.enter().append("g").attr("class", "tick"),
          line = tick.select("line"),
          text = tick.select("text"),
          k = orient === top || orient === left ? -1 : 1,
          x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x");

      path = path.merge(path.enter().insert("path", ".tick")
          .attr("class", "domain")
          .attr("stroke", "#000"));

      tick = tick.merge(tickEnter);

      line = line.merge(tickEnter.append("line")
          .attr("stroke", "#000")
          .attr(x + "2", k * tickSizeInner)
          .attr(y + "1", 0.5)
          .attr(y + "2", 0.5));

      text = text.merge(tickEnter.append("text")
          .attr("fill", "#000")
          .attr(x, k * spacing)
          .attr(y, 0.5)
          .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

      if (context !== selection) {
        path = path.transition(context);
        tick = tick.transition(context);
        line = line.transition(context);
        text = text.transition(context);

        tickExit = tickExit.transition(context)
            .attr("opacity", epsilon$2)
            .attr("transform", function(d) { return transform(position, this.parentNode.__axis || position, d); });

        tickEnter
            .attr("opacity", epsilon$2)
            .attr("transform", function(d) { return transform(this.parentNode.__axis || position, position, d); });
      }

      tickExit.remove();

      path
          .attr("d", orient === left || orient == right
              ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
              : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

      tick
          .attr("opacity", 1)
          .attr("transform", function(d) { return transform(position, position, d); });

      line
          .attr(x + "2", k * tickSizeInner);

      text
          .attr(x, k * spacing)
          .text(format);

      selection.filter(entering)
          .attr("fill", "none")
          .attr("font-size", 10)
          .attr("font-family", "sans-serif")
          .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

      selection
          .each(function() { this.__axis = position; });
    }

    axis.scale = function(_) {
      return arguments.length ? (scale = _, axis) : scale;
    };

    axis.ticks = function() {
      return tickArguments = slice$4.call(arguments), axis;
    };

    axis.tickArguments = function(_) {
      return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();
    };

    axis.tickValues = function(_) {
      return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();
    };

    axis.tickFormat = function(_) {
      return arguments.length ? (tickFormat = _, axis) : tickFormat;
    };

    axis.tickSize = function(_) {
      return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
    };

    axis.tickSizeInner = function(_) {
      return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
    };

    axis.tickSizeOuter = function(_) {
      return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
    };

    axis.tickPadding = function(_) {
      return arguments.length ? (tickPadding = +_, axis) : tickPadding;
    };

    return axis;
  }

  function axisTop(scale) {
    return axis(top, scale);
  }

  function axisRight(scale) {
    return axis(right, scale);
  }

  function axisBottom(scale) {
    return axis(bottom, scale);
  }

  function axisLeft(scale) {
    return axis(left, scale);
  }

  function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }

  function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
  }

  function meanXReduce(x, c) {
    return x + c.x;
  }

  function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
  }

  function maxYReduce(y, c) {
    return Math.max(y, c.y);
  }

  function leafLeft(node) {
    var children;
    while (children = node.children) node = children[0];
    return node;
  }

  function leafRight(node) {
    var children;
    while (children = node.children) node = children[children.length - 1];
    return node;
  }

  function cluster() {
    var separation = defaultSeparation,
        dx = 1,
        dy = 1,
        nodeSize = false;

    function cluster(root) {
      var previousNode,
          x = 0;

      // First walk, computing the initial x & y values.
      root.eachAfter(function(node) {
        var children = node.children;
        if (children) {
          node.x = meanX(children);
          node.y = maxY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });

      var left = leafLeft(root),
          right = leafRight(root),
          x0 = left.x - separation(left, right) / 2,
          x1 = right.x + separation(right, left) / 2;

      // Second walk, normalizing x & y to the desired size.
      return root.eachAfter(nodeSize ? function(node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
      });
    }

    cluster.separation = function(x) {
      return arguments.length ? (separation = x, cluster) : separation;
    };

    cluster.size = function(x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
    };

    cluster.nodeSize = function(x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
    };

    return cluster;
  }

  function node_each(callback) {
    var node = this, current, next = [node], children, i, n;
    do {
      current = next.reverse(), next = [];
      while (node = current.pop()) {
        callback(node), children = node.children;
        if (children) for (i = 0, n = children.length; i < n; ++i) {
          next.push(children[i]);
        }
      }
    } while (next.length);
    return this;
  }

  function node_eachBefore(callback) {
    var node = this, nodes = [node], children, i;
    while (node = nodes.pop()) {
      callback(node), children = node.children;
      if (children) for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
      }
    }
    return this;
  }

  function node_eachAfter(callback) {
    var node = this, nodes = [node], next = [], children, i, n;
    while (node = nodes.pop()) {
      next.push(node), children = node.children;
      if (children) for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
      }
    }
    while (node = next.pop()) {
      callback(node);
    }
    return this;
  }

  function node_sum(value) {
    return this.eachAfter(function(node) {
      var sum = +value(node.data) || 0,
          children = node.children,
          i = children && children.length;
      while (--i >= 0) sum += children[i].value;
      node.value = sum;
    });
  }

  function node_sort(compare) {
    return this.eachBefore(function(node) {
      if (node.children) {
        node.children.sort(compare);
      }
    });
  }

  function node_path(end) {
    var start = this,
        ancestor = leastCommonAncestor(start, end),
        nodes = [start];
    while (start !== ancestor) {
      start = start.parent;
      nodes.push(start);
    }
    var k = nodes.length;
    while (end !== ancestor) {
      nodes.splice(k, 0, end);
      end = end.parent;
    }
    return nodes;
  }

  function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(),
        bNodes = b.ancestors(),
        c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while (a === b) {
      c = a;
      a = aNodes.pop();
      b = bNodes.pop();
    }
    return c;
  }

  function node_ancestors() {
    var node = this, nodes = [node];
    while (node = node.parent) {
      nodes.push(node);
    }
    return nodes;
  }

  function node_descendants() {
    var nodes = [];
    this.each(function(node) {
      nodes.push(node);
    });
    return nodes;
  }

  function node_leaves() {
    var leaves = [];
    this.eachBefore(function(node) {
      if (!node.children) {
        leaves.push(node);
      }
    });
    return leaves;
  }

  function node_links() {
    var root = this, links = [];
    root.each(function(node) {
      if (node !== root) { // Don’t include the root’s parent, if any.
        links.push({source: node.parent, target: node});
      }
    });
    return links;
  }

  function hierarchy(data, children) {
    var root = new Node(data),
        valued = +data.value && (root.value = data.value),
        node,
        nodes = [root],
        child,
        childs,
        i,
        n;

    if (children == null) children = defaultChildren;

    while (node = nodes.pop()) {
      if (valued) node.value = +node.data.value;
      if ((childs = children(node.data)) && (n = childs.length)) {
        node.children = new Array(n);
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new Node(childs[i]));
          child.parent = node;
          child.depth = node.depth + 1;
        }
      }
    }

    return root.eachBefore(computeHeight);
  }

  function node_copy() {
    return hierarchy(this).eachBefore(copyData);
  }

  function defaultChildren(d) {
    return d.children;
  }

  function copyData(node) {
    node.data = node.data.data;
  }

  function computeHeight(node) {
    var height = 0;
    do node.height = height;
    while ((node = node.parent) && (node.height < ++height));
  }

  function Node(data) {
    this.data = data;
    this.depth =
    this.height = 0;
    this.parent = null;
  }

  Node.prototype = hierarchy.prototype = {
    constructor: Node,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy
  };

  function Node$2(value) {
    this._ = value;
    this.next = null;
  }

  function shuffle$1(array) {
    var i,
        n = (array = array.slice()).length,
        head = null,
        node = head;

    while (n) {
      var next = new Node$2(array[n - 1]);
      if (node) node = node.next = next;
      else node = head = next;
      array[i] = array[--n];
    }

    return {
      head: head,
      tail: node
    };
  }

  function enclose(circles) {
    return encloseN(shuffle$1(circles), []);
  }

  function encloses(a, b) {
    var dx = b.x - a.x,
        dy = b.y - a.y,
        dr = a.r - b.r;
    return dr * dr + 1e-6 > dx * dx + dy * dy;
  }

  // Returns the smallest circle that contains circles L and intersects circles B.
  function encloseN(L, B) {
    var circle,
        l0 = null,
        l1 = L.head,
        l2,
        p1;

    switch (B.length) {
      case 1: circle = enclose1(B[0]); break;
      case 2: circle = enclose2(B[0], B[1]); break;
      case 3: circle = enclose3(B[0], B[1], B[2]); break;
    }

    while (l1) {
      p1 = l1._, l2 = l1.next;
      if (!circle || !encloses(circle, p1)) {

        // Temporarily truncate L before l1.
        if (l0) L.tail = l0, l0.next = null;
        else L.head = L.tail = null;

        B.push(p1);
        circle = encloseN(L, B); // Note: reorders L!
        B.pop();

        // Move l1 to the front of L and reconnect the truncated list L.
        if (L.head) l1.next = L.head, L.head = l1;
        else l1.next = null, L.head = L.tail = l1;
        l0 = L.tail, l0.next = l2;

      } else {
        l0 = l1;
      }
      l1 = l2;
    }

    L.tail = l0;
    return circle;
  }

  function enclose1(a) {
    return {
      x: a.x,
      y: a.y,
      r: a.r
    };
  }

  function enclose2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r,
        x2 = b.x, y2 = b.y, r2 = b.r,
        x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
        l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
      x: (x1 + x2 + x21 / l * r21) / 2,
      y: (y1 + y2 + y21 / l * r21) / 2,
      r: (l + r1 + r2) / 2
    };
  }

  function enclose3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r,
        x2 = b.x, y2 = b.y, r2 = b.r,
        x3 = c.x, y3 = c.y, r3 = c.r,
        a2 = 2 * (x1 - x2),
        b2 = 2 * (y1 - y2),
        c2 = 2 * (r2 - r1),
        d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
        a3 = 2 * (x1 - x3),
        b3 = 2 * (y1 - y3),
        c3 = 2 * (r3 - r1),
        d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
        ab = a3 * b2 - a2 * b3,
        xa = (b2 * d3 - b3 * d2) / ab - x1,
        xb = (b3 * c2 - b2 * c3) / ab,
        ya = (a3 * d2 - a2 * d3) / ab - y1,
        yb = (a2 * c3 - a3 * c2) / ab,
        A = xb * xb + yb * yb - 1,
        B = 2 * (xa * xb + ya * yb + r1),
        C = xa * xa + ya * ya - r1 * r1,
        r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
    return {
      x: xa + xb * r + x1,
      y: ya + yb * r + y1,
      r: r
    };
  }

  function place(a, b, c) {
    var ax = a.x,
        ay = a.y,
        da = b.r + c.r,
        db = a.r + c.r,
        dx = b.x - ax,
        dy = b.y - ay,
        dc = dx * dx + dy * dy;
    if (dc) {
      var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
          y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = ax + x * dx + y * dy;
      c.y = ay + x * dy - y * dx;
    } else {
      c.x = ax + db;
      c.y = ay;
    }
  }

  function intersects(a, b) {
    var dx = b.x - a.x,
        dy = b.y - a.y,
        dr = a.r + b.r;
    return dr * dr > dx * dx + dy * dy;
  }

  function distance2(circle, x, y) {
    var dx = circle.x - x,
        dy = circle.y - y;
    return dx * dx + dy * dy;
  }

  function Node$1(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
  }

  function packEnclose(circles) {
    if (!(n = circles.length)) return 0;

    var a, b, c, n;

    // Place the first circle.
    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1)) return a.r;

    // Place the second circle.
    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2)) return a.r + b.r;

    // Place the third circle.
    place(b, a, c = circles[2]);

    // Initialize the weighted centroid.
    var aa = a.r * a.r,
        ba = b.r * b.r,
        ca = c.r * c.r,
        oa = aa + ba + ca,
        ox = aa * a.x + ba * b.x + ca * c.x,
        oy = aa * a.y + ba * b.y + ca * c.y,
        cx, cy, i, j, k, sj, sk;

    // Initialize the front-chain using the first three circles a, b and c.
    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;

    // Attempt to place each remaining circle…
    pack: for (i = 3; i < n; ++i) {
      place(a._, b._, c = circles[i]), c = new Node$1(c);

      // If there are only three elements in the front-chain…
      if ((k = a.previous) === (j = b.next)) {
        // If the new circle intersects the third circle,
        // rotate the front chain to try the next position.
        if (intersects(j._, c._)) {
          a = b, b = j, --i;
          continue pack;
        }
      }

      // Find the closest intersecting circle on the front-chain, if any.
      else {
        sj = j._.r, sk = k._.r;
        do {
          if (sj <= sk) {
            if (intersects(j._, c._)) {
              b = j, a.next = b, b.previous = a, --i;
              continue pack;
            }
            j = j.next, sj += j._.r;
          } else {
            if (intersects(k._, c._)) {
              a = k, a.next = b, b.previous = a, --i;
              continue pack;
            }
            k = k.previous, sk += k._.r;
          }
        } while (j !== k.next);
      }

      // Success! Insert the new circle c between a and b.
      c.previous = a, c.next = b, a.next = b.previous = b = c;

      // Update the weighted centroid.
      oa += ca = c._.r * c._.r;
      ox += ca * c._.x;
      oy += ca * c._.y;

      // Compute the new closest circle a to centroid.
      aa = distance2(a._, cx = ox / oa, cy = oy / oa);
      while ((c = c.next) !== b) {
        if ((ca = distance2(c._, cx, cy)) < aa) {
          a = c, aa = ca;
        }
      }
      b = a.next;
    }

    // Compute the enclosing circle of the front chain.
    a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

    // Translate the circles to put the enclosing circle around the origin.
    for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

    return c.r;
  }

  function siblings(circles) {
    packEnclose(circles);
    return circles;
  }

  function optional(f) {
    return f == null ? null : required(f);
  }

  function required(f) {
    if (typeof f !== "function") throw new Error;
    return f;
  }

  function constantZero() {
    return 0;
  }

  function constant$5(x) {
    return function() {
      return x;
    };
  }

  function defaultRadius(d) {
    return Math.sqrt(d.value);
  }

  function index() {
    var radius = null,
        dx = 1,
        dy = 1,
        padding = constantZero;

    function pack(root) {
      root.x = dx / 2, root.y = dy / 2;
      if (radius) {
        root.eachBefore(radiusLeaf(radius))
            .eachAfter(packChildren(padding, 0.5))
            .eachBefore(translateChild(1));
      } else {
        root.eachBefore(radiusLeaf(defaultRadius))
            .eachAfter(packChildren(constantZero, 1))
            .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
            .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
      }
      return root;
    }

    pack.radius = function(x) {
      return arguments.length ? (radius = optional(x), pack) : radius;
    };

    pack.size = function(x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
    };

    pack.padding = function(x) {
      return arguments.length ? (padding = typeof x === "function" ? x : constant$5(+x), pack) : padding;
    };

    return pack;
  }

  function radiusLeaf(radius) {
    return function(node) {
      if (!node.children) {
        node.r = Math.max(0, +radius(node) || 0);
      }
    };
  }

  function packChildren(padding, k) {
    return function(node) {
      if (children = node.children) {
        var children,
            i,
            n = children.length,
            r = padding(node) * k || 0,
            e;

        if (r) for (i = 0; i < n; ++i) children[i].r += r;
        e = packEnclose(children);
        if (r) for (i = 0; i < n; ++i) children[i].r -= r;
        node.r = e + r;
      }
    };
  }

  function translateChild(k) {
    return function(node) {
      var parent = node.parent;
      node.r *= k;
      if (parent) {
        node.x = parent.x + k * node.x;
        node.y = parent.y + k * node.y;
      }
    };
  }

  function roundNode(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
  }

  function treemapDice(parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        node,
        i = -1,
        n = nodes.length,
        k = parent.value && (x1 - x0) / parent.value;

    while (++i < n) {
      node = nodes[i], node.y0 = y0, node.y1 = y1;
      node.x0 = x0, node.x1 = x0 += node.value * k;
    }
  }

  function partition() {
    var dx = 1,
        dy = 1,
        padding = 0,
        round = false;

    function partition(root) {
      var n = root.height + 1;
      root.x0 =
      root.y0 = padding;
      root.x1 = dx;
      root.y1 = dy / n;
      root.eachBefore(positionNode(dy, n));
      if (round) root.eachBefore(roundNode);
      return root;
    }

    function positionNode(dy, n) {
      return function(node) {
        if (node.children) {
          treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
        }
        var x0 = node.x0,
            y0 = node.y0,
            x1 = node.x1 - padding,
            y1 = node.y1 - padding;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
      };
    }

    partition.round = function(x) {
      return arguments.length ? (round = !!x, partition) : round;
    };

    partition.size = function(x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
    };

    partition.padding = function(x) {
      return arguments.length ? (padding = +x, partition) : padding;
    };

    return partition;
  }

var   keyPrefix$1 = "$";
  var preroot = {depth: -1};
  var ambiguous = {};
  function defaultId(d) {
    return d.id;
  }

  function defaultParentId(d) {
    return d.parentId;
  }

  function stratify() {
    var id = defaultId,
        parentId = defaultParentId;

    function stratify(data) {
      var d,
          i,
          n = data.length,
          root,
          parent,
          node,
          nodes = new Array(n),
          nodeId,
          nodeKey,
          nodeByKey = {};

      for (i = 0; i < n; ++i) {
        d = data[i], node = nodes[i] = new Node(d);
        if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
          nodeKey = keyPrefix$1 + (node.id = nodeId);
          nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
        }
      }

      for (i = 0; i < n; ++i) {
        node = nodes[i], nodeId = parentId(data[i], i, data);
        if (nodeId == null || !(nodeId += "")) {
          if (root) throw new Error("multiple roots");
          root = node;
        } else {
          parent = nodeByKey[keyPrefix$1 + nodeId];
          if (!parent) throw new Error("missing: " + nodeId);
          if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
          if (parent.children) parent.children.push(node);
          else parent.children = [node];
          node.parent = parent;
        }
      }

      if (!root) throw new Error("no root");
      root.parent = preroot;
      root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
      root.parent = null;
      if (n > 0) throw new Error("cycle");

      return root;
    }

    stratify.id = function(x) {
      return arguments.length ? (id = required(x), stratify) : id;
    };

    stratify.parentId = function(x) {
      return arguments.length ? (parentId = required(x), stratify) : parentId;
    };

    return stratify;
  }

  function defaultSeparation$1(a, b) {
    return a.parent === b.parent ? 1 : 2;
  }

  // function radialSeparation(a, b) {
  //   return (a.parent === b.parent ? 1 : 2) / a.depth;
  // }

  // This function is used to traverse the left contour of a subtree (or
  // subforest). It returns the successor of v on this contour. This successor is
  // either given by the leftmost child of v or by the thread of v. The function
  // returns null if and only if v is on the highest level of its subtree.
  function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
  }

  // This function works analogously to nextLeft.
  function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
  }

  // Shifts the current subtree rooted at w+. This is done by increasing
  // prelim(w+) and mod(w+) by shift.
  function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }

  // All other shifts, applied to the smaller subtrees between w- and w+, are
  // performed by this function. To prepare the shifts, we have to adjust
  // change(w+), shift(w+), and change(w-).
  function executeShifts(v) {
    var shift = 0,
        change = 0,
        children = v.children,
        i = children.length,
        w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }

  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
  // returns the specified (default) ancestor.
  function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }

  function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null; // default ancestor
    this.a = this; // ancestor
    this.z = 0; // prelim
    this.m = 0; // mod
    this.c = 0; // change
    this.s = 0; // shift
    this.t = null; // thread
    this.i = i; // number
  }

  TreeNode.prototype = Object.create(Node.prototype);

  function treeRoot(root) {
    var tree = new TreeNode(root, 0),
        node,
        nodes = [tree],
        child,
        children,
        i,
        n;

    while (node = nodes.pop()) {
      if (children = node._.children) {
        node.children = new Array(n = children.length);
        for (i = n - 1; i >= 0; --i) {
          nodes.push(child = node.children[i] = new TreeNode(children[i], i));
          child.parent = node;
        }
      }
    }

    (tree.parent = new TreeNode(null, 0)).children = [tree];
    return tree;
  }

  // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
  function tree() {
    var separation = defaultSeparation$1,
        dx = 1,
        dy = 1,
        nodeSize = null;

    function tree(root) {
      var t = treeRoot(root);

      // Compute the layout using Buchheim et al.’s algorithm.
      t.eachAfter(firstWalk), t.parent.m = -t.z;
      t.eachBefore(secondWalk);

      // If a fixed node size is specified, scale x and y.
      if (nodeSize) root.eachBefore(sizeNode);

      // If a fixed tree size is specified, scale x and y based on the extent.
      // Compute the left-most, right-most, and depth-most nodes for extents.
      else {
        var left = root,
            right = root,
            bottom = root;
        root.eachBefore(function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2,
            tx = s - left.x,
            kx = dx / (right.x + s + tx),
            ky = dy / (bottom.depth || 1);
        root.eachBefore(function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }

      return root;
    }

    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    function firstWalk(v) {
      var children = v.children,
          siblings = v.parent.children,
          w = v.i ? siblings[v.i - 1] : null;
      if (children) {
        executeShifts(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }

    // Computes all real x-coordinates by summing up the modifiers recursively.
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }

    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v,
            vop = v,
            vim = w,
            vom = vip.parent.children[0],
            sip = vip.m,
            sop = vop.m,
            sim = vim.m,
            som = vom.m,
            shift;
        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
          vom = nextLeft(vom);
          vop = nextRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !nextRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !nextLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }

    function sizeNode(node) {
      node.x *= dx;
      node.y = node.depth * dy;
    }

    tree.separation = function(x) {
      return arguments.length ? (separation = x, tree) : separation;
    };

    tree.size = function(x) {
      return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
    };

    tree.nodeSize = function(x) {
      return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
    };

    return tree;
  }

  function treemapSlice(parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        node,
        i = -1,
        n = nodes.length,
        k = parent.value && (y1 - y0) / parent.value;

    while (++i < n) {
      node = nodes[i], node.x0 = x0, node.x1 = x1;
      node.y0 = y0, node.y1 = y0 += node.value * k;
    }
  }

  var phi = (1 + Math.sqrt(5)) / 2;

  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [],
        nodes = parent.children,
        row,
        nodeValue,
        i0 = 0,
        i1,
        n = nodes.length,
        dx, dy,
        value = parent.value,
        sumValue,
        minValue,
        maxValue,
        newRatio,
        minRatio,
        alpha,
        beta;

    while (i0 < n) {
      dx = x1 - x0, dy = y1 - y0;
      minValue = maxValue = sumValue = nodes[i0].value;
      alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
      beta = sumValue * sumValue * alpha;
      minRatio = Math.max(maxValue / beta, beta / minValue);

      // Keep adding nodes while the aspect ratio maintains or improves.
      for (i1 = i0 + 1; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value;
        if (nodeValue < minValue) minValue = nodeValue;
        if (nodeValue > maxValue) maxValue = nodeValue;
        beta = sumValue * sumValue * alpha;
        newRatio = Math.max(maxValue / beta, beta / minValue);
        if (newRatio > minRatio) { sumValue -= nodeValue; break; }
        minRatio = newRatio;
      }

      // Position and record the row orientation.
      rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
      if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
      else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
      value -= sumValue, i0 = i1;
    }

    return rows;
  }

  var squarify = (function custom(ratio) {

    function squarify(parent, x0, y0, x1, y1) {
      squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }

    squarify.ratio = function(x) {
      return custom((x = +x) > 1 ? x : 1);
    };

    return squarify;
  })(phi);

  function index$1() {
    var tile = squarify,
        round = false,
        dx = 1,
        dy = 1,
        paddingStack = [0],
        paddingInner = constantZero,
        paddingTop = constantZero,
        paddingRight = constantZero,
        paddingBottom = constantZero,
        paddingLeft = constantZero;

    function treemap(root) {
      root.x0 =
      root.y0 = 0;
      root.x1 = dx;
      root.y1 = dy;
      root.eachBefore(positionNode);
      paddingStack = [0];
      if (round) root.eachBefore(roundNode);
      return root;
    }

    function positionNode(node) {
      var p = paddingStack[node.depth],
          x0 = node.x0 + p,
          y0 = node.y0 + p,
          x1 = node.x1 - p,
          y1 = node.y1 - p;
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
      node.x0 = x0;
      node.y0 = y0;
      node.x1 = x1;
      node.y1 = y1;
      if (node.children) {
        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
        x0 += paddingLeft(node) - p;
        y0 += paddingTop(node) - p;
        x1 -= paddingRight(node) - p;
        y1 -= paddingBottom(node) - p;
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
        tile(node, x0, y0, x1, y1);
      }
    }

    treemap.round = function(x) {
      return arguments.length ? (round = !!x, treemap) : round;
    };

    treemap.size = function(x) {
      return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
    };

    treemap.tile = function(x) {
      return arguments.length ? (tile = required(x), treemap) : tile;
    };

    treemap.padding = function(x) {
      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };

    treemap.paddingInner = function(x) {
      return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$5(+x), treemap) : paddingInner;
    };

    treemap.paddingOuter = function(x) {
      return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };

    treemap.paddingTop = function(x) {
      return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$5(+x), treemap) : paddingTop;
    };

    treemap.paddingRight = function(x) {
      return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$5(+x), treemap) : paddingRight;
    };

    treemap.paddingBottom = function(x) {
      return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$5(+x), treemap) : paddingBottom;
    };

    treemap.paddingLeft = function(x) {
      return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$5(+x), treemap) : paddingLeft;
    };

    return treemap;
  }

  function binary(parent, x0, y0, x1, y1) {
    var nodes = parent.children,
        i, n = nodes.length,
        sum, sums = new Array(n + 1);

    for (sums[0] = sum = i = 0; i < n; ++i) {
      sums[i + 1] = sum += nodes[i].value;
    }

    partition(0, n, parent.value, x0, y0, x1, y1);

    function partition(i, j, value, x0, y0, x1, y1) {
      if (i >= j - 1) {
        var node = nodes[i];
        node.x0 = x0, node.y0 = y0;
        node.x1 = x1, node.y1 = y1;
        return;
      }

      var valueOffset = sums[i],
          valueTarget = (value / 2) + valueOffset,
          k = i + 1,
          hi = j - 1;

      while (k < hi) {
        var mid = k + hi >>> 1;
        if (sums[mid] < valueTarget) k = mid + 1;
        else hi = mid;
      }

      var valueLeft = sums[k] - valueOffset,
          valueRight = value - valueLeft;

      if ((y1 - y0) > (x1 - x0)) {
        var yk = (y0 * valueRight + y1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, x1, yk);
        partition(k, j, valueRight, x0, yk, x1, y1);
      } else {
        var xk = (x0 * valueRight + x1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, xk, y1);
        partition(k, j, valueRight, xk, y0, x1, y1);
      }
    }
  }

  function sliceDice(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
  }

  var resquarify = (function custom(ratio) {

    function resquarify(parent, x0, y0, x1, y1) {
      if ((rows = parent._squarify) && (rows.ratio === ratio)) {
        var rows,
            row,
            nodes,
            i,
            j = -1,
            n,
            m = rows.length,
            value = parent.value;

        while (++j < m) {
          row = rows[j], nodes = row.children;
          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
          if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
          else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
          value -= row.value;
        }
      } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
        rows.ratio = ratio;
      }
    }

    resquarify.ratio = function(x) {
      return custom((x = +x) > 1 ? x : 1);
    };

    return resquarify;
  })(phi);

  function center$1(x, y) {
    var nodes;

    if (x == null) x = 0;
    if (y == null) y = 0;

    function force() {
      var i,
          n = nodes.length,
          node,
          sx = 0,
          sy = 0;

      for (i = 0; i < n; ++i) {
        node = nodes[i], sx += node.x, sy += node.y;
      }

      for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
        node = nodes[i], node.x -= sx, node.y -= sy;
      }
    }

    force.initialize = function(_) {
      nodes = _;
    };

    force.x = function(_) {
      return arguments.length ? (x = +_, force) : x;
    };

    force.y = function(_) {
      return arguments.length ? (y = +_, force) : y;
    };

    return force;
  }

  function constant$6(x) {
    return function() {
      return x;
    };
  }

  function jiggle() {
    return (Math.random() - 0.5) * 1e-6;
  }

  function x$1(d) {
    return d.x + d.vx;
  }

  function y$1(d) {
    return d.y + d.vy;
  }

  function collide(radius) {
    var nodes,
        radii,
        strength = 1,
        iterations = 1;

    if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);

    function force() {
      var i, n = nodes.length,
          tree,
          node,
          xi,
          yi,
          ri,
          ri2;

      for (var k = 0; k < iterations; ++k) {
        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);
        for (i = 0; i < n; ++i) {
          node = nodes[i];
          ri = radii[i], ri2 = ri * ri;
          xi = node.x + node.vx;
          yi = node.y + node.vy;
          tree.visit(apply);
        }
      }

      function apply(quad, x0, y0, x1, y1) {
        var data = quad.data, rj = quad.r, r = ri + rj;
        if (data) {
          if (data.index > i) {
            var x = xi - data.x - data.vx,
                y = yi - data.y - data.vy,
                l = x * x + y * y;
            if (l < r * r) {
              if (x === 0) x = jiggle(), l += x * x;
              if (y === 0) y = jiggle(), l += y * y;
              l = (r - (l = Math.sqrt(l))) / l * strength;
              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
              node.vy += (y *= l) * r;
              data.vx -= x * (r = 1 - r);
              data.vy -= y * r;
            }
          }
          return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
      }
    }

    function prepare(quad) {
      if (quad.data) return quad.r = radii[quad.data.index];
      for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r;
        }
      }
    }

    force.initialize = function(_) {
      var i, n = (nodes = _).length; radii = new Array(n);
      for (i = 0; i < n; ++i) radii[i] = +radius(nodes[i], i, nodes);
    };

    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function(_) {
      return arguments.length ? (strength = +_, force) : strength;
    };

    force.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), force) : radius;
    };

    return force;
  }

  function index$2(d, i) {
    return i;
  }

  function link(links) {
    var id = index$2,
        strength = defaultStrength,
        strengths,
        distance = constant$6(30),
        distances,
        nodes,
        count,
        bias,
        iterations = 1;

    if (links == null) links = [];

    function defaultStrength(link) {
      return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }

    function force(alpha) {
      for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
          link = links[i], source = link.source, target = link.target;
          x = target.x + target.vx - source.x - source.vx || jiggle();
          y = target.y + target.vy - source.y - source.vy || jiggle();
          l = Math.sqrt(x * x + y * y);
          l = (l - distances[i]) / l * alpha * strengths[i];
          x *= l, y *= l;
          target.vx -= x * (b = bias[i]);
          target.vy -= y * b;
          source.vx += x * (b = 1 - b);
          source.vy += y * b;
        }
      }
    }

    function initialize() {
      if (!nodes) return;

      var i,
          n = nodes.length,
          m = links.length,
          nodeById = map$1(nodes, id),
          link;

      for (i = 0, count = new Array(n); i < n; ++i) {
        count[i] = 0;
      }

      for (i = 0; i < m; ++i) {
        link = links[i], link.index = i;
        if (typeof link.source !== "object") link.source = nodeById.get(link.source);
        if (typeof link.target !== "object") link.target = nodeById.get(link.target);
        ++count[link.source.index], ++count[link.target.index];
      }

      for (i = 0, bias = new Array(m); i < m; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
      }

      strengths = new Array(m), initializeStrength();
      distances = new Array(m), initializeDistance();
    }

    function initializeStrength() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
      }
    }

    function initializeDistance() {
      if (!nodes) return;

      for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.links = function(_) {
      return arguments.length ? (links = _, initialize(), force) : links;
    };

    force.id = function(_) {
      return arguments.length ? (id = _, force) : id;
    };

    force.iterations = function(_) {
      return arguments.length ? (iterations = +_, force) : iterations;
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
    };

    force.distance = function(_) {
      return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
    };

    return force;
  }

  function x$2(d) {
    return d.x;
  }

  function y$2(d) {
    return d.y;
  }

  var initialRadius = 10;
  var initialAngle = Math.PI * (3 - Math.sqrt(5));
  function simulation(nodes) {
    var simulation,
        alpha = 1,
        alphaMin = 0.001,
        alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
        alphaTarget = 0,
        velocityDecay = 0.6,
        forces = map$1(),
        stepper = timer(step),
        event = dispatch("tick", "end");

    if (nodes == null) nodes = [];

    function step() {
      tick();
      event.call("tick", simulation);
      if (alpha < alphaMin) {
        stepper.stop();
        event.call("end", simulation);
      }
    }

    function tick() {
      var i, n = nodes.length, node;

      alpha += (alphaTarget - alpha) * alphaDecay;

      forces.each(function(force) {
        force(alpha);
      });

      for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null) node.x += node.vx *= velocityDecay;
        else node.x = node.fx, node.vx = 0;
        if (node.fy == null) node.y += node.vy *= velocityDecay;
        else node.y = node.fy, node.vy = 0;
      }
    }

    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (isNaN(node.x) || isNaN(node.y)) {
          var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
          node.x = radius * Math.cos(angle);
          node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0;
        }
      }
    }

    function initializeForce(force) {
      if (force.initialize) force.initialize(nodes);
      return force;
    }

    initializeNodes();

    return simulation = {
      tick: tick,

      restart: function() {
        return stepper.restart(step), simulation;
      },

      stop: function() {
        return stepper.stop(), simulation;
      },

      nodes: function(_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
      },

      alpha: function(_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
      },

      alphaMin: function(_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
      },

      alphaDecay: function(_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
      },

      alphaTarget: function(_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
      },

      velocityDecay: function(_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
      },

      force: function(name, _) {
        return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
      },

      find: function(x, y, radius) {
        var i = 0,
            n = nodes.length,
            dx,
            dy,
            d2,
            node,
            closest;

        if (radius == null) radius = Infinity;
        else radius *= radius;

        for (i = 0; i < n; ++i) {
          node = nodes[i];
          dx = x - node.x;
          dy = y - node.y;
          d2 = dx * dx + dy * dy;
          if (d2 < radius) closest = node, radius = d2;
        }

        return closest;
      },

      on: function(name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
      }
    };
  }

  function manyBody() {
    var nodes,
        node,
        alpha,
        strength = constant$6(-30),
        strengths,
        distanceMin2 = 1,
        distanceMax2 = Infinity,
        theta2 = 0.81;

    function force(_) {
      var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
      for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      for (i = 0; i < n; ++i) strengths[i] = +strength(nodes[i], i, nodes);
    }

    function accumulate(quad) {
      var strength = 0, q, c, x, y, i;

      // For internal nodes, accumulate forces from child quadrants.
      if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c = q.value)) {
            strength += c, x += c * q.x, y += c * q.y;
          }
        }
        quad.x = x / strength;
        quad.y = y / strength;
      }

      // For leaf nodes, accumulate forces from coincident quadrants.
      else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do strength += strengths[q.data.index];
        while (q = q.next);
      }

      quad.value = strength;
    }

    function apply(quad, x1, _, x2) {
      if (!quad.value) return true;

      var x = quad.x - node.x,
          y = quad.y - node.y,
          w = x2 - x1,
          l = x * x + y * y;

      // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.
      if (w * w / theta2 < l) {
        if (l < distanceMax2) {
          if (x === 0) x = jiggle(), l += x * x;
          if (y === 0) y = jiggle(), l += y * y;
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
          node.vx += x * quad.value * alpha / l;
          node.vy += y * quad.value * alpha / l;
        }
        return true;
      }

      // Otherwise, process points directly.
      else if (quad.length || l >= distanceMax2) return;

      // Limit forces for very close nodes; randomize direction if coincident.
      if (quad.data !== node || quad.next) {
        if (x === 0) x = jiggle(), l += x * x;
        if (y === 0) y = jiggle(), l += y * y;
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
      }

      do if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x * w;
        node.vy += y * w;
      } while (quad = quad.next);
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
    };

    force.distanceMin = function(_) {
      return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };

    force.distanceMax = function(_) {
      return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };

    force.theta = function(_) {
      return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };

    return force;
  }

  function x$3(x) {
    var strength = constant$6(0.1),
        nodes,
        strengths,
        xz;

    if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      xz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
    };

    force.x = function(_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
    };

    return force;
  }

  function y$3(y) {
    var strength = constant$6(0.1),
        nodes,
        strengths,
        yz;

    if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);

    function force(alpha) {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
      }
    }

    function initialize() {
      if (!nodes) return;
      var i, n = nodes.length;
      strengths = new Array(n);
      yz = new Array(n);
      for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
      }
    }

    force.initialize = function(_) {
      nodes = _;
      initialize();
    };

    force.strength = function(_) {
      return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
    };

    force.y = function(_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
    };

    return force;
  }

  function nopropagation() {
    exports.event.stopImmediatePropagation();
  }

  function noevent() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
  }

  function dragDisable(view) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", noevent, true);
    if ("onselectstart" in root) {
      selection.on("selectstart.drag", noevent, true);
    } else {
      root.__noselect = root.style.MozUserSelect;
      root.style.MozUserSelect = "none";
    }
  }

  function dragEnable(view, noclick) {
    var root = view.document.documentElement,
        selection = select(view).on("dragstart.drag", null);
    if (noclick) {
      selection.on("click.drag", noevent, true);
      setTimeout(function() { selection.on("click.drag", null); }, 0);
    }
    if ("onselectstart" in root) {
      selection.on("selectstart.drag", null);
    } else {
      root.style.MozUserSelect = root.__noselect;
      delete root.__noselect;
    }
  }

  function constant$7(x) {
    return function() {
      return x;
    };
  }

  function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
    this.target = target;
    this.type = type;
    this.subject = subject;
    this.identifier = id;
    this.active = active;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this._ = dispatch;
  }

  DragEvent.prototype.on = function() {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
  };

  // Ignore right-click, since that should open the context menu.
  function defaultFilter() {
    return !exports.event.button;
  }

  function defaultContainer() {
    return this.parentNode;
  }

  function defaultSubject(d) {
    return d == null ? {x: exports.event.x, y: exports.event.y} : d;
  }

  function drag() {
    var filter = defaultFilter,
        container = defaultContainer,
        subject = defaultSubject,
        gestures = {},
        listeners = dispatch("start", "drag", "end"),
        active = 0,
        mousemoving,
        touchending;

    function drag(selection) {
      selection
          .on("mousedown.drag", mousedowned)
          .on("touchstart.drag", touchstarted)
          .on("touchmove.drag", touchmoved)
          .on("touchend.drag touchcancel.drag", touchended)
          .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }

    function mousedowned() {
      if (touchending || !filter.apply(this, arguments)) return;
      var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
      if (!gesture) return;
      select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
      dragDisable(exports.event.view);
      nopropagation();
      mousemoving = false;
      gesture("start");
    }

    function mousemoved() {
      noevent();
      mousemoving = true;
      gestures.mouse("drag");
    }

    function mouseupped() {
      select(exports.event.view).on("mousemove.drag mouseup.drag", null);
      dragEnable(exports.event.view, mousemoving);
      noevent();
      gestures.mouse("end");
    }

    function touchstarted() {
      if (!filter.apply(this, arguments)) return;
      var touches = exports.event.changedTouches,
          c = container.apply(this, arguments),
          n = touches.length, i, gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
          nopropagation();
          gesture("start");
        }
      }
    }

    function touchmoved() {
      var touches = exports.event.changedTouches,
          n = touches.length, i, gesture;

      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          noevent();
          gesture("drag");
        }
      }
    }

    function touchended() {
      var touches = exports.event.changedTouches,
          n = touches.length, i, gesture;

      if (touchending) clearTimeout(touchending);
      touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
      for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
          nopropagation();
          gesture("end");
        }
      }
    }

    function beforestart(id, container, point, that, args) {
      var p = point(container, id), s, dx, dy,
          sublisteners = listeners.copy();

      if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
        if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
        dx = s.x - p[0] || 0;
        dy = s.y - p[1] || 0;
        return true;
      })) return;

      return function gesture(type) {
        var p0 = p, n;
        switch (type) {
          case "start": gestures[id] = gesture, n = active++; break;
          case "end": delete gestures[id], --active; // nobreak
          case "drag": p = point(container, id), n = active; break;
        }
        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
      };
    }

    drag.filter = function(_) {
      return arguments.length ? (filter = typeof _ === "function" ? _ : constant$7(!!_), drag) : filter;
    };

    drag.container = function(_) {
      return arguments.length ? (container = typeof _ === "function" ? _ : constant$7(_), drag) : container;
    };

    drag.subject = function(_) {
      return arguments.length ? (subject = typeof _ === "function" ? _ : constant$7(_), drag) : subject;
    };

    drag.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? drag : value;
    };

    return drag;
  }

  function constant$8(x) {
    return function() {
      return x;
    };
  }

  function x$4(d) {
    return d[0];
  }

  function y$4(d) {
    return d[1];
  }

  function RedBlackTree() {
    this._ = null; // root node
  }

  function RedBlackNode(node) {
    node.U = // parent node
    node.C = // color - true for red, false for black
    node.L = // left node
    node.R = // right node
    node.P = // previous node
    node.N = null; // next node
  }

  RedBlackTree.prototype = {
    constructor: RedBlackTree,

    insert: function(after, node) {
      var parent, grandpa, uncle;

      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = RedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;

      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              RedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            RedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              RedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            RedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },

    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;

      var parent = node.U,
          sibling,
          left = node.L,
          right = node.R,
          next,
          red;

      if (!left) next = right;
      else if (!right) next = left;
      else next = RedBlackFirst(right);

      if (parent) {
        if (parent.L === node) parent.L = next;
        else parent.R = next;
      } else {
        this._ = next;
      }

      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }

      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) { node.C = false; return; }

      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if ((sibling.L && sibling.L.C)
              || (sibling.R && sibling.R.C)) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              RedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            RedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if ((sibling.L && sibling.L.C)
            || (sibling.R && sibling.R.C)) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              RedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            RedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);

      if (node) node.C = false;
    }
  };

  function RedBlackRotateLeft(tree, node) {
    var p = node,
        q = node.R,
        parent = p.U;

    if (parent) {
      if (parent.L === p) parent.L = q;
      else parent.R = q;
    } else {
      tree._ = q;
    }

    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }

  function RedBlackRotateRight(tree, node) {
    var p = node,
        q = node.L,
        parent = p.U;

    if (parent) {
      if (parent.L === p) parent.L = q;
      else parent.R = q;
    } else {
      tree._ = q;
    }

    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }

  function RedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }

  function createEdge(left, right, v0, v1) {
    var edge = [null, null],
        index = edges.push(edge) - 1;
    edge.left = left;
    edge.right = right;
    if (v0) setEdgeEnd(edge, left, right, v0);
    if (v1) setEdgeEnd(edge, right, left, v1);
    cells[left.index].halfedges.push(index);
    cells[right.index].halfedges.push(index);
    return edge;
  }

  function createBorderEdge(left, v0, v1) {
    var edge = [v0, v1];
    edge.left = left;
    return edge;
  }

  function setEdgeEnd(edge, left, right, vertex) {
    if (!edge[0] && !edge[1]) {
      edge[0] = vertex;
      edge.left = left;
      edge.right = right;
    } else if (edge.left === right) {
      edge[1] = vertex;
    } else {
      edge[0] = vertex;
    }
  }

  // Liang–Barsky line clipping.
  function clipEdge(edge, x0, y0, x1, y1) {
    var a = edge[0],
        b = edge[1],
        ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;

    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

    if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
    if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
    return true;
  }

  function connectEdge(edge, x0, y0, x1, y1) {
    var v1 = edge[1];
    if (v1) return true;

    var v0 = edge[0],
        left = edge.left,
        right = edge.right,
        lx = left[0],
        ly = left[1],
        rx = right[0],
        ry = right[1],
        fx = (lx + rx) / 2,
        fy = (ly + ry) / 2,
        fm,
        fb;

    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!v0) v0 = [fx, y0];
        else if (v0[1] >= y1) return;
        v1 = [fx, y1];
      } else {
        if (!v0) v0 = [fx, y1];
        else if (v0[1] < y0) return;
        v1 = [fx, y0];
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!v0) v0 = [(y0 - fb) / fm, y0];
          else if (v0[1] >= y1) return;
          v1 = [(y1 - fb) / fm, y1];
        } else {
          if (!v0) v0 = [(y1 - fb) / fm, y1];
          else if (v0[1] < y0) return;
          v1 = [(y0 - fb) / fm, y0];
        }
      } else {
        if (ly < ry) {
          if (!v0) v0 = [x0, fm * x0 + fb];
          else if (v0[0] >= x1) return;
          v1 = [x1, fm * x1 + fb];
        } else {
          if (!v0) v0 = [x1, fm * x1 + fb];
          else if (v0[0] < x0) return;
          v1 = [x0, fm * x0 + fb];
        }
      }
    }

    edge[0] = v0;
    edge[1] = v1;
    return true;
  }

  function clipEdges(x0, y0, x1, y1) {
    var i = edges.length,
        edge;

    while (i--) {
      if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
          || !clipEdge(edge, x0, y0, x1, y1)
          || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3
              || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
        delete edges[i];
      }
    }
  }

  function createCell(site) {
    return cells[site.index] = {
      site: site,
      halfedges: []
    };
  }

  function cellHalfedgeAngle(cell, edge) {
    var site = cell.site,
        va = edge.left,
        vb = edge.right;
    if (site === vb) vb = va, va = site;
    if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
    if (site === va) va = edge[1], vb = edge[0];
    else va = edge[0], vb = edge[1];
    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
  }

  function cellHalfedgeStart(cell, edge) {
    return edge[+(edge.left !== cell.site)];
  }

  function cellHalfedgeEnd(cell, edge) {
    return edge[+(edge.left === cell.site)];
  }

  function sortCellHalfedges() {
    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
      if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
        var index = new Array(m),
            array = new Array(m);
        for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
        index.sort(function(i, j) { return array[j] - array[i]; });
        for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
        for (j = 0; j < m; ++j) halfedges[j] = array[j];
      }
    }
  }

  function clipCells(x0, y0, x1, y1) {
    var nCells = cells.length,
        iCell,
        cell,
        site,
        iHalfedge,
        halfedges,
        nHalfedges,
        start,
        startX,
        startY,
        end,
        endX,
        endY,
        cover = true;

    for (iCell = 0; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        site = cell.site;
        halfedges = cell.halfedges;
        iHalfedge = halfedges.length;

        // Remove any dangling clipped edges.
        while (iHalfedge--) {
          if (!edges[halfedges[iHalfedge]]) {
            halfedges.splice(iHalfedge, 1);
          }
        }

        // Insert any border edges as necessary.
        iHalfedge = 0, nHalfedges = halfedges.length;
        while (iHalfedge < nHalfedges) {
          end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
          start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
          if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
            halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
                Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [x0, Math.abs(startX - x0) < epsilon$3 ? startY : y1]
                : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [Math.abs(startY - y1) < epsilon$3 ? startX : x1, y1]
                : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [x1, Math.abs(startX - x1) < epsilon$3 ? startY : y0]
                : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [Math.abs(startY - y0) < epsilon$3 ? startX : x0, y0]
                : null)) - 1);
            ++nHalfedges;
          }
        }

        if (nHalfedges) cover = false;
      }
    }

    // If there weren’t any edges, have the closest site cover the extent.
    // It doesn’t matter which corner of the extent we measure!
    if (cover) {
      var dx, dy, d2, dc = Infinity;

      for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
          site = cell.site;
          dx = site[0] - x0;
          dy = site[1] - y0;
          d2 = dx * dx + dy * dy;
          if (d2 < dc) dc = d2, cover = cell;
        }
      }

      if (cover) {
        var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
        cover.halfedges.push(
          edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
          edges.push(createBorderEdge(site, v01, v11)) - 1,
          edges.push(createBorderEdge(site, v11, v10)) - 1,
          edges.push(createBorderEdge(site, v10, v00)) - 1
        );
      }
    }

    // Lastly delete any cells with no edges; these were entirely clipped.
    for (iCell = 0; iCell < nCells; ++iCell) {
      if (cell = cells[iCell]) {
        if (!cell.halfedges.length) {
          delete cells[iCell];
        }
      }
    }
  }

  var circlePool = [];

  var firstCircle;

  function Circle() {
    RedBlackNode(this);
    this.x =
    this.y =
    this.arc =
    this.site =
    this.cy = null;
  }

  function attachCircle(arc) {
    var lArc = arc.P,
        rArc = arc.N;

    if (!lArc || !rArc) return;

    var lSite = lArc.site,
        cSite = arc.site,
        rSite = rArc.site;

    if (lSite === rSite) return;

    var bx = cSite[0],
        by = cSite[1],
        ax = lSite[0] - bx,
        ay = lSite[1] - by,
        cx = rSite[0] - bx,
        cy = rSite[1] - by;

    var d = 2 * (ax * cy - ay * cx);
    if (d >= -epsilon2$1) return;

    var ha = ax * ax + ay * ay,
        hc = cx * cx + cy * cy,
        x = (cy * ha - ay * hc) / d,
        y = (ax * hc - cx * ha) / d;

    var circle = circlePool.pop() || new Circle;
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

    arc.circle = circle;

    var before = null,
        node = circles._;

    while (node) {
      if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
        if (node.L) node = node.L;
        else { before = node.P; break; }
      } else {
        if (node.R) node = node.R;
        else { before = node; break; }
      }
    }

    circles.insert(before, circle);
    if (!before) firstCircle = circle;
  }

  function detachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) firstCircle = circle.N;
      circles.remove(circle);
      circlePool.push(circle);
      RedBlackNode(circle);
      arc.circle = null;
    }
  }

  var beachPool = [];

  function Beach() {
    RedBlackNode(this);
    this.edge =
    this.site =
    this.circle = null;
  }

  function createBeach(site) {
    var beach = beachPool.pop() || new Beach;
    beach.site = site;
    return beach;
  }

  function detachBeach(beach) {
    detachCircle(beach);
    beaches.remove(beach);
    beachPool.push(beach);
    RedBlackNode(beach);
  }

  function removeBeach(beach) {
    var circle = beach.circle,
        x = circle.x,
        y = circle.cy,
        vertex = [x, y],
        previous = beach.P,
        next = beach.N,
        disappearing = [beach];

    detachBeach(beach);

    var lArc = previous;
    while (lArc.circle
        && Math.abs(x - lArc.circle.x) < epsilon$3
        && Math.abs(y - lArc.circle.cy) < epsilon$3) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      detachBeach(lArc);
      lArc = previous;
    }

    disappearing.unshift(lArc);
    detachCircle(lArc);

    var rArc = next;
    while (rArc.circle
        && Math.abs(x - rArc.circle.x) < epsilon$3
        && Math.abs(y - rArc.circle.cy) < epsilon$3) {
      next = rArc.N;
      disappearing.push(rArc);
      detachBeach(rArc);
      rArc = next;
    }

    disappearing.push(rArc);
    detachCircle(rArc);

    var nArcs = disappearing.length,
        iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }

    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

    attachCircle(lArc);
    attachCircle(rArc);
  }

  function addBeach(site) {
    var x = site[0],
        directrix = site[1],
        lArc,
        rArc,
        dxl,
        dxr,
        node = beaches._;

    while (node) {
      dxl = leftBreakPoint(node, directrix) - x;
      if (dxl > epsilon$3) node = node.L; else {
        dxr = x - rightBreakPoint(node, directrix);
        if (dxr > epsilon$3) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -epsilon$3) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -epsilon$3) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }

    createCell(site);
    var newArc = createBeach(site);
    beaches.insert(lArc, newArc);

    if (!lArc && !rArc) return;

    if (lArc === rArc) {
      detachCircle(lArc);
      rArc = createBeach(lArc.site);
      beaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
      attachCircle(lArc);
      attachCircle(rArc);
      return;
    }

    if (!rArc) { // && lArc
      newArc.edge = createEdge(lArc.site, newArc.site);
      return;
    }

    // else lArc !== rArc
    detachCircle(lArc);
    detachCircle(rArc);

    var lSite = lArc.site,
        ax = lSite[0],
        ay = lSite[1],
        bx = site[0] - ax,
        by = site[1] - ay,
        rSite = rArc.site,
        cx = rSite[0] - ax,
        cy = rSite[1] - ay,
        d = 2 * (bx * cy - by * cx),
        hb = bx * bx + by * by,
        hc = cx * cx + cy * cy,
        vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

    setEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = createEdge(lSite, site, null, vertex);
    rArc.edge = createEdge(site, rSite, null, vertex);
    attachCircle(lArc);
    attachCircle(rArc);
  }

  function leftBreakPoint(arc, directrix) {
    var site = arc.site,
        rfocx = site[0],
        rfocy = site[1],
        pby2 = rfocy - directrix;

    if (!pby2) return rfocx;

    var lArc = arc.P;
    if (!lArc) return -Infinity;

    site = lArc.site;
    var lfocx = site[0],
        lfocy = site[1],
        plby2 = lfocy - directrix;

    if (!plby2) return lfocx;

    var hl = lfocx - rfocx,
        aby2 = 1 / pby2 - 1 / plby2,
        b = hl / plby2;

    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

    return (rfocx + lfocx) / 2;
  }

  function rightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return leftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site[1] === directrix ? site[0] : Infinity;
  }

  var epsilon$3 = 1e-6;
  var epsilon2$1 = 1e-12;
  var beaches;
  var cells;
  var circles;
  var edges;

  function triangleArea(a, b, c) {
    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
  }

  function lexicographic(a, b) {
    return b[1] - a[1]
        || b[0] - a[0];
  }

  function Diagram(sites, extent) {
    var site = sites.sort(lexicographic).pop(),
        x,
        y,
        circle;

    edges = [];
    cells = new Array(sites.length);
    beaches = new RedBlackTree;
    circles = new RedBlackTree;

    while (true) {
      circle = firstCircle;
      if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
        if (site[0] !== x || site[1] !== y) {
          addBeach(site);
          x = site[0], y = site[1];
        }
        site = sites.pop();
      } else if (circle) {
        removeBeach(circle.arc);
      } else {
        break;
      }
    }

    sortCellHalfedges();

    if (extent) {
      var x0 = +extent[0][0],
          y0 = +extent[0][1],
          x1 = +extent[1][0],
          y1 = +extent[1][1];
      clipEdges(x0, y0, x1, y1);
      clipCells(x0, y0, x1, y1);
    }

    this.edges = edges;
    this.cells = cells;

    beaches =
    circles =
    edges =
    cells = null;
  }

  Diagram.prototype = {
    constructor: Diagram,

    polygons: function() {
      var edges = this.edges;

      return this.cells.map(function(cell) {
        var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
        polygon.data = cell.site.data;
        return polygon;
      });
    },

    triangles: function() {
      var triangles = [],
          edges = this.edges;

      this.cells.forEach(function(cell, i) {
        var site = cell.site,
            halfedges = cell.halfedges,
            j = -1,
            m = halfedges.length,
            s0,
            e1 = edges[halfedges[m - 1]],
            s1 = e1.left === site ? e1.right : e1.left;

        while (++j < m) {
          s0 = s1;
          e1 = edges[halfedges[j]];
          s1 = e1.left === site ? e1.right : e1.left;
          if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
            triangles.push([site.data, s0.data, s1.data]);
          }
        }
      });

      return triangles;
    },

    links: function() {
      return this.edges.filter(function(edge) {
        return edge.right;
      }).map(function(edge) {
        return {
          source: edge.left.data,
          target: edge.right.data
        };
      });
    }
  }

  function voronoi() {
    var x = x$4,
        y = y$4,
        extent = null;

    function voronoi(data) {
      return new Diagram(data.map(function(d, i) {
        var s = [Math.round(x(d, i, data) / epsilon$3) * epsilon$3, Math.round(y(d, i, data) / epsilon$3) * epsilon$3];
        s.index = i;
        s.data = d;
        return s;
      }), extent);
    }

    voronoi.polygons = function(data) {
      return voronoi(data).polygons();
    };

    voronoi.links = function(data) {
      return voronoi(data).links();
    };

    voronoi.triangles = function(data) {
      return voronoi(data).triangles();
    };

    voronoi.x = function(_) {
      return arguments.length ? (x = typeof _ === "function" ? _ : constant$8(+_), voronoi) : x;
    };

    voronoi.y = function(_) {
      return arguments.length ? (y = typeof _ === "function" ? _ : constant$8(+_), voronoi) : y;
    };

    voronoi.extent = function(_) {
      return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
    };

    voronoi.size = function(_) {
      return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
    };

    return voronoi;
  }

  function constant$9(x) {
    return function() {
      return x;
    };
  }

  function ZoomEvent(target, type, transform) {
    this.target = target;
    this.type = type;
    this.transform = transform;
  }

  function Transform(k, x, y) {
    this.k = k;
    this.x = x;
    this.y = y;
  }

  Transform.prototype = {
    constructor: Transform,
    scale: function(k) {
      return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function(x, y) {
      return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
    },
    apply: function(point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y];
    },
    applyX: function(x) {
      return x * this.k + this.x;
    },
    applyY: function(y) {
      return y * this.k + this.y;
    },
    invert: function(location) {
      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
    },
    invertX: function(x) {
      return (x - this.x) / this.k;
    },
    invertY: function(y) {
      return (y - this.y) / this.k;
    },
    rescaleX: function(x) {
      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
    },
    rescaleY: function(y) {
      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };

  var identity$6 = new Transform(1, 0, 0);

  transform.prototype = Transform.prototype;

  function transform(node) {
    return node.__zoom || identity$6;
  }

  function nopropagation$1() {
    exports.event.stopImmediatePropagation();
  }

  function noevent$1() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
  }

  // Ignore right-click, since that should open the context menu.
  function defaultFilter$1() {
    return !exports.event.button;
  }

  function defaultExtent() {
    var e = this, w, h;
    if (e instanceof SVGElement) {
      e = e.ownerSVGElement || e;
      w = e.width.baseVal.value;
      h = e.height.baseVal.value;
    } else {
      w = e.clientWidth;
      h = e.clientHeight;
    }
    return [[0, 0], [w, h]];
  }

  function defaultTransform() {
    return this.__zoom || identity$6;
  }

  function zoom() {
    var filter = defaultFilter$1,
        extent = defaultExtent,
        k0 = 0,
        k1 = Infinity,
        x0 = -k1,
        x1 = k1,
        y0 = x0,
        y1 = x1,
        duration = 250,
        gestures = [],
        listeners = dispatch("start", "zoom", "end"),
        touchstarting,
        touchending,
        touchDelay = 500,
        wheelDelay = 150;

    function zoom(selection) {
      selection
          .on("wheel.zoom", wheeled)
          .on("mousedown.zoom", mousedowned)
          .on("dblclick.zoom", dblclicked)
          .on("touchstart.zoom", touchstarted)
          .on("touchmove.zoom", touchmoved)
          .on("touchend.zoom touchcancel.zoom", touchended)
          .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
          .property("__zoom", defaultTransform);
    }

    zoom.transform = function(collection, transform) {
      var selection = collection.selection ? collection.selection() : collection;
      selection.property("__zoom", defaultTransform);
      if (collection !== selection) {
        schedule(collection, transform);
      } else {
        selection.interrupt().each(function() {
          gesture(this, arguments)
              .start()
              .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
              .end();
        });
      }
    };

    zoom.scaleBy = function(selection, k) {
      zoom.scaleTo(selection, function() {
        var k0 = this.__zoom.k,
            k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return k0 * k1;
      });
    };

    zoom.scaleTo = function(selection, k) {
      zoom.transform(selection, function() {
        var e = extent.apply(this, arguments),
            t0 = this.__zoom,
            p0 = centroid(e),
            p1 = t0.invert(p0),
            k1 = typeof k === "function" ? k.apply(this, arguments) : k;
        return constrain(translate(scale(t0, k1), p0, p1), e);
      });
    };

    zoom.translateBy = function(selection, x, y) {
      zoom.transform(selection, function() {
        return constrain(this.__zoom.translate(
          typeof x === "function" ? x.apply(this, arguments) : x,
          typeof y === "function" ? y.apply(this, arguments) : y
        ), extent.apply(this, arguments));
      });
    };

    function scale(transform, k) {
      k = Math.max(k0, Math.min(k1, k));
      return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
    }

    function translate(transform, p0, p1) {
      var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
    }

    function constrain(transform, extent) {
      var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1),
          dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);
      return dx || dy ? transform.translate(dx, dy) : transform;
    }

    function centroid(extent) {
      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
    }

    function schedule(transition, transform, center) {
      transition
          .on("start.zoom", function() { gesture(this, arguments).start(); })
          .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
          .tween("zoom", function() {
            var that = this,
                args = arguments,
                g = gesture(that, args),
                e = extent.apply(that, args),
                p = center || centroid(e),
                w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                a = that.__zoom,
                b = typeof transform === "function" ? transform.apply(that, args) : transform,
                i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
            return function(t) {
              if (t === 1) t = b; // Avoid rounding error on end.
              else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
              g.zoom(null, t);
            };
          });
    }

    function gesture(that, args) {
      for (var i = 0, n = gestures.length, g; i < n; ++i) {
        if ((g = gestures[i]).that === that) {
          return g;
        }
      }
      return new Gesture(that, args);
    }

    function Gesture(that, args) {
      this.that = that;
      this.args = args;
      this.index = -1;
      this.active = 0;
      this.extent = extent.apply(that, args);
    }

    Gesture.prototype = {
      start: function() {
        if (++this.active === 1) {
          this.index = gestures.push(this) - 1;
          this.emit("start");
        }
        return this;
      },
      zoom: function(key, transform) {
        if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
        if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
        if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
        this.that.__zoom = transform;
        this.emit("zoom");
        return this;
      },
      end: function() {
        if (--this.active === 0) {
          gestures.splice(this.index, 1);
          this.index = -1;
          this.emit("end");
        }
        return this;
      },
      emit: function(type) {
        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
      }
    };

    function wheeled() {
      if (!filter.apply(this, arguments)) return;
      var g = gesture(this, arguments),
          t = this.__zoom,
          k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
          p = mouse(this);

      // If the mouse is in the same location as before, reuse it.
      // If there were recent wheel events, reset the wheel idle timeout.
      if (g.wheel) {
        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
          g.mouse[1] = t.invert(g.mouse[0] = p);
        }
        clearTimeout(g.wheel);
      }

      // If this wheel event won’t trigger a transform change, ignore it.
      else if (t.k === k) return;

      // Otherwise, capture the mouse point and location at the start.
      else {
        g.mouse = [p, t.invert(p)];
        interrupt(this);
        g.start();
      }

      noevent$1();
      g.wheel = setTimeout(wheelidled, wheelDelay);
      g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));

      function wheelidled() {
        g.wheel = null;
        g.end();
      }
    }

    function mousedowned() {
      if (touchending || !filter.apply(this, arguments)) return;
      var g = gesture(this, arguments),
          v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
          p = mouse(this);

      dragDisable(exports.event.view);
      nopropagation$1();
      g.mouse = [p, this.__zoom.invert(p)];
      interrupt(this);
      g.start();

      function mousemoved() {
        noevent$1();
        g.moved = true;
        g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
      }

      function mouseupped() {
        v.on("mousemove.zoom mouseup.zoom", null);
        dragEnable(exports.event.view, g.moved);
        noevent$1();
        g.end();
      }
    }

    function dblclicked() {
      if (!filter.apply(this, arguments)) return;
      var t0 = this.__zoom,
          p0 = mouse(this),
          p1 = t0.invert(p0),
          k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
          t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));

      noevent$1();
      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
      else select(this).call(zoom.transform, t1);
    }

    function touchstarted() {
      if (!filter.apply(this, arguments)) return;
      var g = gesture(this, arguments),
          touches = exports.event.changedTouches,
          n = touches.length, i, t, p;

      nopropagation$1();
      for (i = 0; i < n; ++i) {
        t = touches[i], p = touch(this, touches, t.identifier);
        p = [p, this.__zoom.invert(p), t.identifier];
        if (!g.touch0) g.touch0 = p;
        else if (!g.touch1) g.touch1 = p;
      }
      if (touchstarting) {
        touchstarting = clearTimeout(touchstarting);
        if (!g.touch1) return g.end(), dblclicked.apply(this, arguments);
      }
      if (exports.event.touches.length === n) {
        touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
        interrupt(this);
        g.start();
      }
    }

    function touchmoved() {
      var g = gesture(this, arguments),
          touches = exports.event.changedTouches,
          n = touches.length, i, t, p, l;

      noevent$1();
      if (touchstarting) touchstarting = clearTimeout(touchstarting);
      for (i = 0; i < n; ++i) {
        t = touches[i], p = touch(this, touches, t.identifier);
        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
      }
      t = g.that.__zoom;
      if (g.touch1) {
        var p0 = g.touch0[0], l0 = g.touch0[1],
            p1 = g.touch1[0], l1 = g.touch1[1],
            dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
            dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale(t, Math.sqrt(dp / dl));
        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
      }
      else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
      else return;
      g.zoom("touch", constrain(translate(t, p, l), g.extent));
    }

    function touchended() {
      var g = gesture(this, arguments),
          touches = exports.event.changedTouches,
          n = touches.length, i, t;

      nopropagation$1();
      if (touchending) clearTimeout(touchending);
      touchending = setTimeout(function() { touchending = null; }, touchDelay);
      for (i = 0; i < n; ++i) {
        t = touches[i];
        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
      }
      if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
      if (!g.touch0) g.end();
    }

    zoom.filter = function(_) {
      return arguments.length ? (filter = typeof _ === "function" ? _ : constant$9(!!_), zoom) : filter;
    };

    zoom.extent = function(_) {
      return arguments.length ? (extent = typeof _ === "function" ? _ : constant$9([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
    };

    zoom.scaleExtent = function(_) {
      return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
    };

    zoom.translateExtent = function(_) {
      return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
    };

    zoom.duration = function(_) {
      return arguments.length ? (duration = +_, zoom) : duration;
    };

    zoom.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? zoom : value;
    };

    return zoom;
  }

  function constant$10(x) {
    return function() {
      return x;
    };
  }

  function BrushEvent(target, type, selection) {
    this.target = target;
    this.type = type;
    this.selection = selection;
  }

  function nopropagation$2() {
    exports.event.stopImmediatePropagation();
  }

  function noevent$2() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
  }

  var MODE_DRAG = {name: "drag"};
  var MODE_SPACE = {name: "space"};
  var MODE_HANDLE = {name: "handle"};
  var MODE_CENTER = {name: "center"};
  var X = {
    name: "x",
    handles: ["e", "w"].map(type$1),
    input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
    output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
  };

  var Y = {
    name: "y",
    handles: ["n", "s"].map(type$1),
    input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
    output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
  };

  var XY = {
    name: "xy",
    handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type$1),
    input: function(xy) { return xy; },
    output: function(xy) { return xy; }
  };

  var cursors = {
    overlay: "crosshair",
    selection: "move",
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };

  var flipX = {
    e: "w",
    w: "e",
    nw: "ne",
    ne: "nw",
    se: "sw",
    sw: "se"
  };

  var flipY = {
    n: "s",
    s: "n",
    nw: "sw",
    ne: "se",
    se: "ne",
    sw: "nw"
  };

  var signsX = {
    overlay: +1,
    selection: +1,
    n: null,
    e: +1,
    s: null,
    w: -1,
    nw: -1,
    ne: +1,
    se: +1,
    sw: -1
  };

  var signsY = {
    overlay: +1,
    selection: +1,
    n: -1,
    e: null,
    s: +1,
    w: null,
    nw: -1,
    ne: -1,
    se: +1,
    sw: +1
  };

  function type$1(t) {
    return {type: t};
  }

  // Ignore right-click, since that should open the context menu.
  function defaultFilter$2() {
    return !exports.event.button;
  }

  function defaultExtent$1() {
    var svg = this.ownerSVGElement || this;
    return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
  }

  // Like d3.local, but with the name “__brush” rather than auto-generated.
  function local$1(node) {
    while (!node.__brush) if (!(node = node.parentNode)) return;
    return node.__brush;
  }

  function empty$1(extent) {
    return extent[0][0] === extent[1][0]
        || extent[0][1] === extent[1][1];
  }

  function brushSelection(node) {
    var state = node.__brush;
    return state ? state.dim.output(state.selection) : null;
  }

  function brushX() {
    return brush$1(X);
  }

  function brushY() {
    return brush$1(Y);
  }

  function brush() {
    return brush$1(XY);
  }

  function brush$1(dim) {
    var extent = defaultExtent$1,
        filter = defaultFilter$2,
        listeners = dispatch(brush, "start", "brush", "end"),
        handleSize = 6,
        touchending;

    function brush(group) {
      var overlay = group
          .property("__brush", initialize)
        .selectAll(".overlay")
        .data([type$1("overlay")]);

      overlay.enter().append("rect")
          .attr("class", "overlay")
          .attr("pointer-events", "all")
          .attr("cursor", cursors.overlay)
        .merge(overlay)
          .each(function() {
            var extent = local$1(this).extent;
            select(this)
                .attr("x", extent[0][0])
                .attr("y", extent[0][1])
                .attr("width", extent[1][0] - extent[0][0])
                .attr("height", extent[1][1] - extent[0][1]);
          });

      group.selectAll(".selection")
        .data([type$1("selection")])
        .enter().append("rect")
          .attr("class", "selection")
          .attr("cursor", cursors.selection)
          .attr("fill", "#777")
          .attr("fill-opacity", 0.3)
          .attr("stroke", "#fff")
          .attr("shape-rendering", "crispEdges");

      var handle = group.selectAll(".handle")
        .data(dim.handles, function(d) { return d.type; });

      handle.exit().remove();

      handle.enter().append("rect")
          .attr("class", function(d) { return "handle handle--" + d.type; })
          .attr("cursor", function(d) { return cursors[d.type]; });

      group
          .each(redraw)
          .attr("fill", "none")
          .attr("pointer-events", "all")
          .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
          .on("mousedown.brush touchstart.brush", started);
    }

    brush.move = function(group, selection) {
      if (group.selection) {
        group
            .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
            .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
            .tween("brush", function() {
              var that = this,
                  state = that.__brush,
                  emit = emitter(that, arguments),
                  selection0 = state.selection,
                  selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
                  i = interpolate(selection0, selection1);

              function tween(t) {
                state.selection = t === 1 && empty$1(selection1) ? null : i(t);
                redraw.call(that);
                emit.brush();
              }

              return selection0 && selection1 ? tween : tween(1);
            });
      } else {
        group
            .each(function() {
              var that = this,
                  args = arguments,
                  state = that.__brush,
                  selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
                  emit = emitter(that, args).beforestart();

              interrupt(that);
              state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
              redraw.call(that);
              emit.start().brush().end();
            });
      }
    };

    function redraw() {
      var group = select(this),
          selection = local$1(this).selection;

      if (selection) {
        group.selectAll(".selection")
            .style("display", null)
            .attr("x", selection[0][0])
            .attr("y", selection[0][1])
            .attr("width", selection[1][0] - selection[0][0])
            .attr("height", selection[1][1] - selection[0][1]);

        group.selectAll(".handle")
            .style("display", null)
            .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
            .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
            .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
            .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
      }

      else {
        group.selectAll(".selection,.handle")
            .style("display", "none")
            .attr("x", null)
            .attr("y", null)
            .attr("width", null)
            .attr("height", null);
      }
    }

    function emitter(that, args) {
      return that.__brush.emitter || new Emitter(that, args);
    }

    function Emitter(that, args) {
      this.that = that;
      this.args = args;
      this.state = that.__brush;
      this.active = 0;
    }

    Emitter.prototype = {
      beforestart: function() {
        if (++this.active === 1) this.state.emitter = this, this.starting = true;
        return this;
      },
      start: function() {
        if (this.starting) this.starting = false, this.emit("start");
        return this;
      },
      brush: function() {
        this.emit("brush");
        return this;
      },
      end: function() {
        if (--this.active === 0) delete this.state.emitter, this.emit("end");
        return this;
      },
      emit: function(type) {
        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
      }
    };

    function started() {
      if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$2(); }
      else if (touchending) return;
      if (!filter.apply(this, arguments)) return;

      var that = this,
          type = exports.event.target.__data__.type,
          mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
          signX = dim === Y ? null : signsX[type],
          signY = dim === X ? null : signsY[type],
          state = local$1(that),
          extent = state.extent,
          selection = state.selection,
          W = extent[0][0], w0, w1,
          N = extent[0][1], n0, n1,
          E = extent[1][0], e0, e1,
          S = extent[1][1], s0, s1,
          dx,
          dy,
          moving,
          shifting = signX && signY && exports.event.shiftKey,
          lockX,
          lockY,
          point0 = mouse(that),
          point = point0,
          emit = emitter(that, arguments).beforestart();

      if (type === "overlay") {
        state.selection = selection = [
          [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
          [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
        ];
      } else {
        w0 = selection[0][0];
        n0 = selection[0][1];
        e0 = selection[1][0];
        s0 = selection[1][1];
      }

      w1 = w0;
      n1 = n0;
      e1 = e0;
      s1 = s0;

      var group = select(that)
          .attr("pointer-events", "none");

      var overlay = group.selectAll(".overlay")
          .attr("cursor", cursors[type]);

      if (exports.event.touches) {
        group
            .on("touchmove.brush", moved, true)
            .on("touchend.brush touchcancel.brush", ended, true);
      } else {
        var view = select(exports.event.view)
            .on("keydown.brush", keydowned, true)
            .on("keyup.brush", keyupped, true)
            .on("mousemove.brush", moved, true)
            .on("mouseup.brush", ended, true);

        dragDisable(exports.event.view);
      }

      nopropagation$2();
      interrupt(that);
      redraw.call(that);
      emit.start();

      function moved() {
        var point1 = mouse(that);
        if (shifting && !lockX && !lockY) {
          if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
          else lockX = true;
        }
        point = point1;
        moving = true;
        noevent$2();
        move();
      }

      function move() {
        var t;

        dx = point[0] - point0[0];
        dy = point[1] - point0[1];

        switch (mode) {
          case MODE_SPACE:
          case MODE_DRAG: {
            if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
            if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
            break;
          }
          case MODE_HANDLE: {
            if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
            else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
            if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
            else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
            break;
          }
          case MODE_CENTER: {
            if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
            if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
            break;
          }
        }

        if (e1 < w1) {
          signX *= -1;
          t = w0, w0 = e0, e0 = t;
          t = w1, w1 = e1, e1 = t;
          if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
        }

        if (s1 < n1) {
          signY *= -1;
          t = n0, n0 = s0, s0 = t;
          t = n1, n1 = s1, s1 = t;
          if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
        }

        selection = state.selection; // May be set by brush.move!

        if (lockX) w1 = selection[0][0], e1 = selection[1][0];
        if (lockY) n1 = selection[0][1], s1 = selection[1][1];

        if (selection[0][0] !== w1
            || selection[0][1] !== n1
            || selection[1][0] !== e1
            || selection[1][1] !== s1) {
          state.selection = [[w1, n1], [e1, s1]];
          redraw.call(that);
          emit.brush();
        }
      }

      function ended() {
        nopropagation$2();
        if (exports.event.touches) {
          if (exports.event.touches.length) return;
          if (touchending) clearTimeout(touchending);
          touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
          group.on("touchmove.brush touchend.brush touchcancel.brush", null);
        } else {
          dragEnable(exports.event.view, moving);
          view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
        }
        group.attr("pointer-events", "all");
        overlay.attr("cursor", cursors.overlay);
        if (empty$1(selection)) state.selection = null, redraw.call(that);
        emit.end();
      }

      function keydowned() {
        switch (exports.event.keyCode) {
          case 16: { // SHIFT
            shifting = signX && signY;
            break;
          }
          case 18: { // ALT
            if (mode === MODE_HANDLE) {
              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
              mode = MODE_CENTER;
              move();
            }
            break;
          }
          case 32: { // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
              if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
              mode = MODE_SPACE;
              overlay.attr("cursor", cursors.selection);
              move();
            }
            break;
          }
          default: return;
        }
        noevent$2();
      }

      function keyupped() {
        switch (exports.event.keyCode) {
          case 16: { // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false;
              move();
            }
            break;
          }
          case 18: { // ALT
            if (mode === MODE_CENTER) {
              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
              mode = MODE_HANDLE;
              move();
            }
            break;
          }
          case 32: { // SPACE
            if (mode === MODE_SPACE) {
              if (exports.event.altKey) {
                if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                mode = MODE_CENTER;
              } else {
                if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
                if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
                mode = MODE_HANDLE;
              }
              overlay.attr("cursor", cursors[type]);
              move();
            }
            break;
          }
          default: return;
        }
        noevent$2();
      }
    }

    function initialize() {
      var state = this.__brush || {selection: null};
      state.extent = extent.apply(this, arguments);
      state.dim = dim;
      return state;
    }

    brush.extent = function(_) {
      return arguments.length ? (extent = typeof _ === "function" ? _ : constant$10([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
    };

    brush.filter = function(_) {
      return arguments.length ? (filter = typeof _ === "function" ? _ : constant$10(!!_), brush) : filter;
    };

    brush.handleSize = function(_) {
      return arguments.length ? (handleSize = +_, brush) : handleSize;
    };

    brush.on = function() {
      var value = listeners.on.apply(listeners, arguments);
      return value === listeners ? brush : value;
    };

    return brush;
  }

  var cos = Math.cos;
  var sin = Math.sin;
  var pi$3 = Math.PI;
  var halfPi$2 = pi$3 / 2;
  var tau$3 = pi$3 * 2;
  var max$1 = Math.max;

  function compareValue(compare) {
    return function(a, b) {
      return compare(
        a.source.value + a.target.value,
        b.source.value + b.target.value
      );
    };
  }

  function chord() {
    var padAngle = 0,
        sortGroups = null,
        sortSubgroups = null,
        sortChords = null;

    function chord(matrix) {
      var n = matrix.length,
          groupSums = [],
          groupIndex = range(n),
          subgroupIndex = [],
          chords = [],
          groups = chords.groups = new Array(n),
          subgroups = new Array(n * n),
          k,
          x,
          x0,
          dx,
          i,
          j;

      // Compute the sum.
      k = 0, i = -1; while (++i < n) {
        x = 0, j = -1; while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(range(n));
        k += x;
      }

      // Sort groups…
      if (sortGroups) groupIndex.sort(function(a, b) {
        return sortGroups(groupSums[a], groupSums[b]);
      });

      // Sort subgroups…
      if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
        d.sort(function(a, b) {
          return sortSubgroups(matrix[i][a], matrix[i][b]);
        });
      });

      // Convert the sum to scaling factor for [0, 2pi].
      // TODO Allow start and end angle to be specified?
      // TODO Allow padding to be specified as percentage?
      k = max$1(0, tau$3 - padAngle * n) / k;
      dx = k ? padAngle : tau$3 / n;

      // Compute the start and end angle for each group and subgroup.
      // Note: Opera has a bug reordering object literal properties!
      x = 0, i = -1; while (++i < n) {
        x0 = x, j = -1; while (++j < n) {
          var di = groupIndex[i],
              dj = subgroupIndex[di][j],
              v = matrix[di][dj],
              a0 = x,
              a1 = x += v * k;
          subgroups[dj * n + di] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += dx;
      }

      // Generate chords for each (non-empty) subgroup-subgroup link.
      i = -1; while (++i < n) {
        j = i - 1; while (++j < n) {
          var source = subgroups[j * n + i],
              target = subgroups[i * n + j];
          if (source.value || target.value) {
            chords.push(source.value < target.value
                ? {source: target, target: source}
                : {source: source, target: target});
          }
        }
      }

      return sortChords ? chords.sort(sortChords) : chords;
    }

    chord.padAngle = function(_) {
      return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
    };

    chord.sortGroups = function(_) {
      return arguments.length ? (sortGroups = _, chord) : sortGroups;
    };

    chord.sortSubgroups = function(_) {
      return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
    };

    chord.sortChords = function(_) {
      return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
    };

    return chord;
  }

  var slice$5 = Array.prototype.slice;

  function constant$11(x) {
    return function() {
      return x;
    };
  }

  function defaultSource(d) {
    return d.source;
  }

  function defaultTarget(d) {
    return d.target;
  }

  function defaultRadius$1(d) {
    return d.radius;
  }

  function defaultStartAngle(d) {
    return d.startAngle;
  }

  function defaultEndAngle(d) {
    return d.endAngle;
  }

  function ribbon() {
    var source = defaultSource,
        target = defaultTarget,
        radius = defaultRadius$1,
        startAngle = defaultStartAngle,
        endAngle = defaultEndAngle,
        context = null;

    function ribbon() {
      var buffer,
          argv = slice$5.call(arguments),
          s = source.apply(this, argv),
          t = target.apply(this, argv),
          sr = +radius.apply(this, (argv[0] = s, argv)),
          sa0 = startAngle.apply(this, argv) - halfPi$2,
          sa1 = endAngle.apply(this, argv) - halfPi$2,
          sx0 = sr * cos(sa0),
          sy0 = sr * sin(sa0),
          tr = +radius.apply(this, (argv[0] = t, argv)),
          ta0 = startAngle.apply(this, argv) - halfPi$2,
          ta1 = endAngle.apply(this, argv) - halfPi$2;

      if (!context) context = buffer = path();

      context.moveTo(sx0, sy0);
      context.arc(0, 0, sr, sa0, sa1);
      if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
        context.arc(0, 0, tr, ta0, ta1);
      }
      context.quadraticCurveTo(0, 0, sx0, sy0);
      context.closePath();

      if (buffer) return context = null, buffer + "" || null;
    }

    ribbon.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant$11(+_), ribbon) : radius;
    };

    ribbon.startAngle = function(_) {
      return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$11(+_), ribbon) : startAngle;
    };

    ribbon.endAngle = function(_) {
      return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$11(+_), ribbon) : endAngle;
    };

    ribbon.source = function(_) {
      return arguments.length ? (source = _, ribbon) : source;
    };

    ribbon.target = function(_) {
      return arguments.length ? (target = _, ribbon) : target;
    };

    ribbon.context = function(_) {
      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
    };

    return ribbon;
  }

  // Adds floating point numbers with twice the normal precision.
  // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
  // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
  // 305–363 (1997).
  // Code adapted from GeographicLib by Charles F. F. Karney,
  // http://geographiclib.sourceforge.net/

  function adder() {
    return new Adder;
  }

  function Adder() {
    this.reset();
  }

  Adder.prototype = {
    constructor: Adder,
    reset: function() {
      this.s = // rounded value
      this.t = 0; // exact error
    },
    add: function(y) {
      add$1(temp, y, this.t);
      add$1(this, temp.s, this.s);
      if (this.s) this.t += temp.t;
      else this.s = temp.t;
    },
    valueOf: function() {
      return this.s;
    }
  };

  var temp = new Adder;

  function add$1(adder, a, b) {
    var x = adder.s = a + b,
        bv = x - a,
        av = x - bv;
    adder.t = (a - av) + (b - bv);
  }

  var epsilon$4 = 1e-6;
  var epsilon2$2 = 1e-12;
  var pi$4 = Math.PI;
  var halfPi$3 = pi$4 / 2;
  var quarterPi = pi$4 / 4;
  var tau$4 = pi$4 * 2;

  var degrees$1 = 180 / pi$4;
  var radians = pi$4 / 180;

  var abs = Math.abs;
  var atan = Math.atan;
  var atan2 = Math.atan2;
  var cos$1 = Math.cos;
  var ceil = Math.ceil;
  var exp = Math.exp;
  var log$1 = Math.log;
  var pow$1 = Math.pow;
  var sin$1 = Math.sin;
  var sign$1 = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
  var sqrt$1 = Math.sqrt;
  var tan = Math.tan;

  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
  }

  function asin$1(x) {
    return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);
  }

  function haversin(x) {
    return (x = sin$1(x / 2)) * x;
  }

  function noop$2() {}

  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      streamGeometryType[geometry.type](geometry, stream);
    }
  }

  var streamObjectType = {
    Feature: function(feature, stream) {
      streamGeometry(feature.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) streamGeometry(features[i].geometry, stream);
    }
  };

  var streamGeometryType = {
    Sphere: function(object, stream) {
      stream.sphere();
    },
    Point: function(object, stream) {
      object = object.coordinates;
      stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
      streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
      streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) streamGeometry(geometries[i], stream);
    }
  };

  function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
  }

  function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n) streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
  }

  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      streamObjectType[object.type](object, stream);
    } else {
      streamGeometry(object, stream);
    }
  }

  var areaRingSum = adder();

  var areaSum = adder();
  var lambda00;
  var phi00;
  var lambda0;
  var cosPhi0;
  var sinPhi0;
  var areaStream = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function() {
      areaRingSum.reset();
      areaStream.lineStart = areaRingStart;
      areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
      var areaRing = +areaRingSum;
      areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
      this.lineStart = this.lineEnd = this.point = noop$2;
    },
    sphere: function() {
      areaSum.add(tau$4);
    }
  };

  function areaRingStart() {
    areaStream.point = areaPointFirst;
  }

  function areaRingEnd() {
    areaPoint(lambda00, phi00);
  }

  function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= radians, phi *= radians;
    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
  }

  function areaPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    phi = phi / 2 + quarterPi; // half the angular distance from south pole

    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    var dLambda = lambda - lambda0,
        sdLambda = dLambda >= 0 ? 1 : -1,
        adLambda = sdLambda * dLambda,
        cosPhi = cos$1(phi),
        sinPhi = sin$1(phi),
        k = sinPhi0 * sinPhi,
        u = cosPhi0 * cosPhi + k * cos$1(adLambda),
        v = k * sdLambda * sin$1(adLambda);
    areaRingSum.add(atan2(v, u));

    // Advance the previous points.
    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
  }

  function area$2(object) {
    areaSum.reset();
    geoStream(object, areaStream);
    return areaSum * 2;
  }

  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]), asin$1(cartesian[2])];
  }

  function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
  }

  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }

  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  }

  // TODO return a
  function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
  }

  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k];
  }

  // TODO return d
  function cartesianNormalizeInPlace(d) {
    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
  }

var   lambda0$1;
  var phi0;
  var lambda1;
  var phi1;
  var lambda2;
var   lambda00$1;
var   phi00$1;
  var p0;
  var deltaSum = adder();
  var ranges;
var   range$1;
  var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function() {
      boundsStream.point = boundsRingPoint;
      boundsStream.lineStart = boundsRingStart;
      boundsStream.lineEnd = boundsRingEnd;
      deltaSum.reset();
      areaStream.polygonStart();
    },
    polygonEnd: function() {
      areaStream.polygonEnd();
      boundsStream.point = boundsPoint;
      boundsStream.lineStart = boundsLineStart;
      boundsStream.lineEnd = boundsLineEnd;
      if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
      else if (deltaSum > epsilon$4) phi1 = 90;
      else if (deltaSum < -epsilon$4) phi0 = -90;
      range$1[0] = lambda0$1, range$1[1] = lambda1;
    }
  };

  function boundsPoint(lambda, phi) {
    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
    if (phi < phi0) phi0 = phi;
    if (phi > phi1) phi1 = phi;
  }

  function linePoint(lambda, phi) {
    var p = cartesian([lambda * radians, phi * radians]);
    if (p0) {
      var normal = cartesianCross(p0, p),
          equatorial = [normal[1], -normal[0], 0],
          inflection = cartesianCross(equatorial, normal);
      cartesianNormalizeInPlace(inflection);
      inflection = spherical(inflection);
      var delta = lambda - lambda2,
          sign = delta > 0 ? 1 : -1,
          lambdai = inflection[0] * degrees$1 * sign,
          phii,
          antimeridian = abs(delta) > 180;
      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = inflection[1] * degrees$1;
        if (phii > phi1) phi1 = phii;
      } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = -inflection[1] * degrees$1;
        if (phii < phi0) phi0 = phii;
      } else {
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
      }
      if (antimeridian) {
        if (lambda < lambda2) {
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
        }
      } else {
        if (lambda1 >= lambda0$1) {
          if (lambda < lambda0$1) lambda0$1 = lambda;
          if (lambda > lambda1) lambda1 = lambda;
        } else {
          if (lambda > lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
          } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
          }
        }
      }
    } else {
      boundsPoint(lambda, phi);
    }
    p0 = p, lambda2 = lambda;
  }

  function boundsLineStart() {
    boundsStream.point = linePoint;
  }

  function boundsLineEnd() {
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
  }

  function boundsRingPoint(lambda, phi) {
    if (p0) {
      var delta = lambda - lambda2;
      deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
      lambda00$1 = lambda, phi00$1 = phi;
    }
    areaStream.point(lambda, phi);
    linePoint(lambda, phi);
  }

  function boundsRingStart() {
    areaStream.lineStart();
  }

  function boundsRingEnd() {
    boundsRingPoint(lambda00$1, phi00$1);
    areaStream.lineEnd();
    if (abs(deltaSum) > epsilon$4) lambda0$1 = -(lambda1 = 180);
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    p0 = null;
  }

  // Finds the left-right distance between two longitudes.
  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
  // the distance between ±180° to be 360°.
  function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
  }

  function rangeCompare(a, b) {
    return a[0] - b[0];
  }

  function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
  }

  function bounds(feature) {
    var i, n, a, b, merged, deltaMax, delta;

    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
    ranges = [];
    geoStream(feature, boundsStream);

    // First, sort ranges by their minimum longitudes.
    if (n = ranges.length) {
      ranges.sort(rangeCompare);

      // Then, merge any ranges that overlap.
      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
        b = ranges[i];
        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
        } else {
          merged.push(a = b);
        }
      }

      // Finally, find the largest gap between the merged ranges.
      // The final bounding box will be the inverse of this gap.
      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
        b = merged[i];
        if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
      }
    }

    ranges = range$1 = null;

    return lambda0$1 === Infinity || phi0 === Infinity
        ? [[NaN, NaN], [NaN, NaN]]
        : [[lambda0$1, phi0], [lambda1, phi1]];
  }

  var W0;
  var W1;
  var X0;
  var Y0;
  var Z0;
  var X1;
  var Y1;
  var Z1;
  var X2;
  var Y2;
  var Z2;
var   lambda00$2;
var   phi00$2;
  var x0;
  var y0;
  var z0;
  // previous point

  var centroidStream = {
    sphere: noop$2,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
      centroidStream.lineStart = centroidRingStart;
      centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
      centroidStream.lineStart = centroidLineStart;
      centroidStream.lineEnd = centroidLineEnd;
    }
  };

  // Arithmetic mean of Cartesian vectors.
  function centroidPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
  }

  function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
  }

  function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
  }

  function centroidLinePointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidLinePoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi),
        x = cosPhi * cos$1(lambda),
        y = cosPhi * sin$1(lambda),
        z = sin$1(phi),
        w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint;
  }

  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
  // J. Applied Mechanics 42, 239 (1975).
  function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
  }

  function centroidRingEnd() {
    centroidRingPoint(lambda00$2, phi00$2);
    centroidStream.point = centroidPoint;
  }

  function centroidRingPointFirst(lambda, phi) {
    lambda00$2 = lambda, phi00$2 = phi;
    lambda *= radians, phi *= radians;
    centroidStream.point = centroidRingPoint;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidPointCartesian(x0, y0, z0);
  }

  function centroidRingPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi),
        x = cosPhi * cos$1(lambda),
        y = cosPhi * sin$1(lambda),
        z = sin$1(phi),
        cx = y0 * z - z0 * y,
        cy = z0 * x - x0 * z,
        cz = x0 * y - y0 * x,
        m = sqrt$1(cx * cx + cy * cy + cz * cz),
        u = x0 * x + y0 * y + z0 * z,
        v = m && -acos(u) / m, // area weight
        w = atan2(m, u); // line weight
    X2 += v * cx;
    Y2 += v * cy;
    Z2 += v * cz;
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
  }

  function centroid$1(object) {
    W0 = W1 =
    X0 = Y0 = Z0 =
    X1 = Y1 = Z1 =
    X2 = Y2 = Z2 = 0;
    geoStream(object, centroidStream);

    var x = X2,
        y = Y2,
        z = Z2,
        m = x * x + y * y + z * z;

    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < epsilon2$2) {
      x = X1, y = Y1, z = Z1;
      // If the feature has zero length, fall back to arithmetic mean of point vectors.
      if (W1 < epsilon$4) x = X0, y = Y0, z = Z0;
      m = x * x + y * y + z * z;
      // If the feature still has an undefined ccentroid, then return.
      if (m < epsilon2$2) return [NaN, NaN];
    }

    return [atan2(y, x) * degrees$1, asin$1(z / sqrt$1(m)) * degrees$1];
  }

  function constant$12(x) {
    return function() {
      return x;
    };
  }

  function compose(a, b) {

    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }

    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };

    return compose;
  }

  function rotationIdentity(lambda, phi) {
    return [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];
  }

  rotationIdentity.invert = rotationIdentity;

  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$4) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
      : rotationLambda(deltaLambda))
      : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
      : rotationIdentity);
  }

  function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
      return lambda += deltaLambda, [lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda, phi];
    };
  }

  function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
  }

  function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos$1(deltaPhi),
        sinDeltaPhi = sin$1(deltaPhi),
        cosDeltaGamma = cos$1(deltaGamma),
        sinDeltaGamma = sin$1(deltaGamma);

    function rotation(lambda, phi) {
      var cosPhi = cos$1(phi),
          x = cos$1(lambda) * cosPhi,
          y = sin$1(lambda) * cosPhi,
          z = sin$1(phi),
          k = z * cosDeltaPhi + x * sinDeltaPhi;
      return [
        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
      ];
    }

    rotation.invert = function(lambda, phi) {
      var cosPhi = cos$1(phi),
          x = cos$1(lambda) * cosPhi,
          y = sin$1(lambda) * cosPhi,
          z = sin$1(phi),
          k = z * cosDeltaGamma - y * sinDeltaGamma;
      return [
        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
      ];
    };

    return rotation;
  }

  function rotation(rotate) {
    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    }

    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
      return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    };

    return forward;
  }

  // Generates a circle centered at [0°, 0°], with a given radius and precision.
  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = cos$1(radius),
        sinRadius = sin$1(radius),
        step = direction * delta;
    if (t0 == null) {
      t0 = radius + direction * tau$4;
      t1 = radius - step / 2;
    } else {
      t0 = circleRadius(cosRadius, t0);
      t1 = circleRadius(cosRadius, t1);
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4;
    }
    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
      stream.point(point[0], point[1]);
    }
  }

  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
  function circleRadius(cosRadius, point) {
    point = cartesian(point), point[0] -= cosRadius;
    cartesianNormalizeInPlace(point);
    var radius = acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;
  }

  function circle$1() {
    var center = constant$12([0, 0]),
        radius = constant$12(90),
        precision = constant$12(6),
        ring,
        rotate,
        stream = {point: point};

    function point(x, y) {
      ring.push(x = rotate(x, y));
      x[0] *= degrees$1, x[1] *= degrees$1;
    }

    function circle() {
      var c = center.apply(this, arguments),
          r = radius.apply(this, arguments) * radians,
          p = precision.apply(this, arguments) * radians;
      ring = [];
      rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
      circleStream(stream, r, p, 1);
      c = {type: "Polygon", coordinates: [ring]};
      ring = rotate = null;
      return c;
    }

    circle.center = function(_) {
      return arguments.length ? (center = typeof _ === "function" ? _ : constant$12([+_[0], +_[1]]), circle) : center;
    };

    circle.radius = function(_) {
      return arguments.length ? (radius = typeof _ === "function" ? _ : constant$12(+_), circle) : radius;
    };

    circle.precision = function(_) {
      return arguments.length ? (precision = typeof _ === "function" ? _ : constant$12(+_), circle) : precision;
    };

    return circle;
  }

  function clipBuffer() {
    var lines = [],
        line;
    return {
      point: function(x, y) {
        line.push([x, y]);
      },
      lineStart: function() {
        lines.push(line = []);
      },
      lineEnd: noop$2,
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      },
      result: function() {
        var result = lines;
        lines = [];
        line = null;
        return result;
      }
    };
  }

  function clipLine(a, b, x0, y0, x1, y1) {
    var ax = a[0],
        ay = a[1],
        bx = b[0],
        by = b[1],
        t0 = 0,
        t1 = 1,
        dx = bx - ax,
        dy = by - ay,
        r;

    r = x0 - ax;
    if (!dx && r > 0) return;
    r /= dx;
    if (dx < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dx > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = x1 - ax;
    if (!dx && r < 0) return;
    r /= dx;
    if (dx < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dx > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    r = y0 - ay;
    if (!dy && r > 0) return;
    r /= dy;
    if (dy < 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    } else if (dy > 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    }

    r = y1 - ay;
    if (!dy && r < 0) return;
    r /= dy;
    if (dy < 0) {
      if (r > t1) return;
      if (r > t0) t0 = r;
    } else if (dy > 0) {
      if (r < t0) return;
      if (r < t1) t1 = r;
    }

    if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
  }

  function pointEqual(a, b) {
    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;
  }

  function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
  }

  // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.
  function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [],
        clip = [],
        i,
        n;

    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n], x;

      // If the first and last points of a segment are coincident, then treat as a
      // closed ring. TODO if all rings are closed, then the winding order of the
      // exterior ring should be checked.
      if (pointEqual(p0, p1)) {
        stream.lineStart();
        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
        stream.lineEnd();
        return;
      }

      subject.push(x = new Intersection(p0, segment, null, true));
      clip.push(x.o = new Intersection(p0, null, x, false));
      subject.push(x = new Intersection(p1, segment, null, false));
      clip.push(x.o = new Intersection(p1, null, x, true));
    });

    if (!subject.length) return;

    clip.sort(compareIntersection);
    link$1(subject);
    link$1(clip);

    for (i = 0, n = clip.length; i < n; ++i) {
      clip[i].e = startInside = !startInside;
    }

    var start = subject[0],
        points,
        point;

    while (1) {
      // Find first unvisited intersection.
      var current = start,
          isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      stream.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, stream);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, stream);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      stream.lineEnd();
    }
  }

  function link$1(array) {
    if (!(n = array.length)) return;
    var n,
        i = 0,
        a = array[0],
        b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }

  var clipMax = 1e9;
  var clipMin = -clipMax;
  // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  function clipExtent(x0, y0, x1, y1) {

    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }

    function interpolate(from, to, direction, stream) {
      var a = 0, a1 = 0;
      if (from == null
          || (a = corner(from, direction)) !== (a1 = corner(to, direction))
          || comparePoint(from, to) < 0 ^ direction > 0) {
        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
      } else {
        stream.point(to[0], to[1]);
      }
    }

    function corner(p, direction) {
      return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3
          : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1
          : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0
          : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }

    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x);
    }

    function comparePoint(a, b) {
      var ca = corner(a, 1),
          cb = corner(b, 1);
      return ca !== cb ? ca - cb
          : ca === 0 ? b[1] - a[1]
          : ca === 1 ? a[0] - b[0]
          : ca === 2 ? a[1] - b[1]
          : b[0] - a[0];
    }

    return function(stream) {
      var activeStream = stream,
          bufferStream = clipBuffer(),
          segments,
          polygon,
          ring,
          x__, y__, v__, // first point
          x_, y_, v_, // previous point
          first,
          clean;

      var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
      };

      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y);
      }

      function polygonInside() {
        var winding = 0;

        for (var i = 0, n = polygon.length; i < n; ++i) {
          for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
            a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
            if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
            else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
          }
        }

        return winding;
      }

      // Buffer geometry within a polygon and then clip it en masse.
      function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
      }

      function polygonEnd() {
        var startInside = polygonInside(),
            cleanInside = clean && startInside,
            visible = (segments = merge(segments)).length;
        if (cleanInside || visible) {
          stream.polygonStart();
          if (cleanInside) {
            stream.lineStart();
            interpolate(null, null, 1, stream);
            stream.lineEnd();
          }
          if (visible) {
            clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
          }
          stream.polygonEnd();
        }
        activeStream = stream, segments = polygon = ring = null;
      }

      function lineStart() {
        clipStream.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }

      // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferStream.rejoin();
          segments.push(bufferStream.result());
        }
        clipStream.point = point;
        if (v_) activeStream.lineEnd();
      }

      function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon) ring.push([x, y]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
          }
        } else {
          if (v && v_) activeStream.point(x, y);
          else {
            var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
            if (clipLine(a, b, x0, y0, x1, y1)) {
              if (!v_) {
                activeStream.lineStart();
                activeStream.point(a[0], a[1]);
              }
              activeStream.point(b[0], b[1]);
              if (!v) activeStream.lineEnd();
              clean = false;
            } else if (v) {
              activeStream.lineStart();
              activeStream.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }

      return clipStream;
    };
  }

  function extent$1() {
    var x0 = 0,
        y0 = 0,
        x1 = 960,
        y1 = 500,
        cache,
        cacheStream,
        clip;

    return clip = {
      stream: function(stream) {
        return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
      },
      extent: function(_) {
        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
      }
    };
  }

  var lengthSum = adder();
var   lambda0$2;
var   sinPhi0$1;
var   cosPhi0$1;
  var lengthStream = {
    sphere: noop$2,
    point: noop$2,
    lineStart: lengthLineStart,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2
  };

  function lengthLineStart() {
    lengthStream.point = lengthPointFirst;
    lengthStream.lineEnd = lengthLineEnd;
  }

  function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = noop$2;
  }

  function lengthPointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
    lengthStream.point = lengthPoint;
  }

  function lengthPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var sinPhi = sin$1(phi),
        cosPhi = cos$1(phi),
        delta = abs(lambda - lambda0$2),
        cosDelta = cos$1(delta),
        sinDelta = sin$1(delta),
        x = cosPhi * sinDelta,
        y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
        z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));
    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
  }

  function length$2(object) {
    lengthSum.reset();
    geoStream(object, lengthStream);
    return +lengthSum;
  }

  var coordinates = [null, null];
var   object$1 = {type: "LineString", coordinates: coordinates};
  function distance(a, b) {
    coordinates[0] = a;
    coordinates[1] = b;
    return length$2(object$1);
  }

  function graticuleX(y0, y1, dy) {
    var y = range(y0, y1 - epsilon$4, dy).concat(y1);
    return function(x) { return y.map(function(y) { return [x, y]; }); };
  }

  function graticuleY(x0, x1, dx) {
    var x = range(x0, x1 - epsilon$4, dx).concat(x1);
    return function(y) { return x.map(function(x) { return [x, y]; }); };
  }

  function graticule() {
    var x1, x0, X1, X0,
        y1, y0, Y1, Y0,
        dx = 10, dy = dx, DX = 90, DY = 360,
        x, y, X, Y,
        precision = 2.5;

    function graticule() {
      return {type: "MultiLineString", coordinates: lines()};
    }

    function lines() {
      return range(ceil(X0 / DX) * DX, X1, DX).map(X)
          .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
          .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$4; }).map(x))
          .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$4; }).map(y));
    }

    graticule.lines = function() {
      return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
    };

    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [
          X(X0).concat(
          Y(Y1).slice(1),
          X(X1).reverse().slice(1),
          Y(Y0).reverse().slice(1))
        ]
      };
    };

    graticule.extent = function(_) {
      if (!arguments.length) return graticule.extentMinor();
      return graticule.extentMajor(_).extentMinor(_);
    };

    graticule.extentMajor = function(_) {
      if (!arguments.length) return [[X0, Y0], [X1, Y1]];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };

    graticule.extentMinor = function(_) {
      if (!arguments.length) return [[x0, y0], [x1, y1]];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };

    graticule.step = function(_) {
      if (!arguments.length) return graticule.stepMinor();
      return graticule.stepMajor(_).stepMinor(_);
    };

    graticule.stepMajor = function(_) {
      if (!arguments.length) return [DX, DY];
      DX = +_[0], DY = +_[1];
      return graticule;
    };

    graticule.stepMinor = function(_) {
      if (!arguments.length) return [dx, dy];
      dx = +_[0], dy = +_[1];
      return graticule;
    };

    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = graticuleX(y0, y1, 90);
      y = graticuleY(x0, x1, precision);
      X = graticuleX(Y0, Y1, 90);
      Y = graticuleY(X0, X1, precision);
      return graticule;
    };

    return graticule
        .extentMajor([[-180, -90 + epsilon$4], [180, 90 - epsilon$4]])
        .extentMinor([[-180, -80 - epsilon$4], [180, 80 + epsilon$4]]);
  }

  function interpolate$2(a, b) {
    var x0 = a[0] * radians,
        y0 = a[1] * radians,
        x1 = b[0] * radians,
        y1 = b[1] * radians,
        cy0 = cos$1(y0),
        sy0 = sin$1(y0),
        cy1 = cos$1(y1),
        sy1 = sin$1(y1),
        kx0 = cy0 * cos$1(x0),
        ky0 = cy0 * sin$1(x0),
        kx1 = cy1 * cos$1(x1),
        ky1 = cy1 * sin$1(x1),
        d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
        k = sin$1(d);

    var interpolate = d ? function(t) {
      var B = sin$1(t *= d) / k,
          A = sin$1(d - t) / k,
          x = A * kx0 + B * kx1,
          y = A * ky0 + B * ky1,
          z = A * sy0 + B * sy1;
      return [
        atan2(y, x) * degrees$1,
        atan2(z, sqrt$1(x * x + y * y)) * degrees$1
      ];
    } : function() {
      return [x0 * degrees$1, y0 * degrees$1];
    };

    interpolate.distance = d;

    return interpolate;
  }

  function identity$7(x) {
    return x;
  }

var   areaSum$1 = adder();
var   areaRingSum$1 = adder();
  var x00;
  var y00;
var   x0$1;
var   y0$1;
  var areaStream$1 = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function() {
      areaStream$1.lineStart = areaRingStart$1;
      areaStream$1.lineEnd = areaRingEnd$1;
    },
    polygonEnd: function() {
      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;
      areaSum$1.add(abs(areaRingSum$1));
      areaRingSum$1.reset();
    },
    result: function() {
      var area = areaSum$1 / 2;
      areaSum$1.reset();
      return area;
    }
  };

  function areaRingStart$1() {
    areaStream$1.point = areaPointFirst$1;
  }

  function areaPointFirst$1(x, y) {
    areaStream$1.point = areaPoint$1;
    x00 = x0$1 = x, y00 = y0$1 = y;
  }

  function areaPoint$1(x, y) {
    areaRingSum$1.add(y0$1 * x - x0$1 * y);
    x0$1 = x, y0$1 = y;
  }

  function areaRingEnd$1() {
    areaPoint$1(x00, y00);
  }

var   x0$2 = Infinity;
var   y0$2 = x0$2;
  var x1 = -x0$2;
  var y1 = x1;
  var boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2,
    result: function() {
      var bounds = [[x0$2, y0$2], [x1, y1]];
      x1 = y1 = -(y0$2 = x0$2 = Infinity);
      return bounds;
    }
  };

  function boundsPoint$1(x, y) {
    if (x < x0$2) x0$2 = x;
    if (x > x1) x1 = x;
    if (y < y0$2) y0$2 = y;
    if (y > y1) y1 = y;
  }

var   X0$1 = 0;
var   Y0$1 = 0;
var   Z0$1 = 0;
var   X1$1 = 0;
var   Y1$1 = 0;
var   Z1$1 = 0;
var   X2$1 = 0;
var   Y2$1 = 0;
var   Z2$1 = 0;
var   x00$1;
var   y00$1;
var   x0$3;
var   y0$3;
  var centroidStream$1 = {
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function() {
      centroidStream$1.lineStart = centroidRingStart$1;
      centroidStream$1.lineEnd = centroidRingEnd$1;
    },
    polygonEnd: function() {
      centroidStream$1.point = centroidPoint$1;
      centroidStream$1.lineStart = centroidLineStart$1;
      centroidStream$1.lineEnd = centroidLineEnd$1;
    },
    result: function() {
      var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
          : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
          : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
          : [NaN, NaN];
      X0$1 = Y0$1 = Z0$1 =
      X1$1 = Y1$1 = Z1$1 =
      X2$1 = Y2$1 = Z2$1 = 0;
      return centroid;
    }
  };

  function centroidPoint$1(x, y) {
    X0$1 += x;
    Y0$1 += y;
    ++Z0$1;
  }

  function centroidLineStart$1() {
    centroidStream$1.point = centroidPointFirstLine;
  }

  function centroidPointFirstLine(x, y) {
    centroidStream$1.point = centroidPointLine;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function centroidPointLine(x, y) {
    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1;
  }

  function centroidRingStart$1() {
    centroidStream$1.point = centroidPointFirstRing;
  }

  function centroidRingEnd$1() {
    centroidPointRing(x00$1, y00$1);
  }

  function centroidPointFirstRing(x, y) {
    centroidStream$1.point = centroidPointRing;
    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
  }

  function centroidPointRing(x, y) {
    var dx = x - x0$3,
        dy = y - y0$3,
        z = sqrt$1(dx * dx + dy * dy);

    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;

    z = y0$3 * x - x0$3 * y;
    X2$1 += z * (x0$3 + x);
    Y2$1 += z * (y0$3 + y);
    Z2$1 += z * 3;
    centroidPoint$1(x0$3 = x, y0$3 = y);
  }

  function PathContext(context) {
    var pointRadius = 4.5;

    var stream = {
      point: point,

      // While inside a line, override point to moveTo then lineTo.
      lineStart: function() { stream.point = pointLineStart; },
      lineEnd: lineEnd,

      // While inside a polygon, override lineEnd to closePath.
      polygonStart: function() { stream.lineEnd = lineEndPolygon; },
      polygonEnd: function() { stream.lineEnd = lineEnd; stream.point = point; },

      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },

      result: noop$2
    };

    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, tau$4);
    }

    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }

    function pointLine(x, y) {
      context.lineTo(x, y);
    }

    function lineEnd() {
      stream.point = point;
    }

    function lineEndPolygon() {
      context.closePath();
    }

    return stream;
  }

  function PathString() {
    var pointCircle = circle$2(4.5),
        string = [];

    var stream = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = circle$2(_);
        return stream;
      },
      result: function() {
        if (string.length) {
          var result = string.join("");
          string = [];
          return result;
        }
      }
    };

    function point(x, y) {
      string.push("M", x, ",", y, pointCircle);
    }

    function pointLineStart(x, y) {
      string.push("M", x, ",", y);
      stream.point = pointLine;
    }

    function pointLine(x, y) {
      string.push("L", x, ",", y);
    }

    function lineStart() {
      stream.point = pointLineStart;
    }

    function lineEnd() {
      stream.point = point;
    }

    function lineEndPolygon() {
      string.push("Z");
    }

    return stream;
  }

  function circle$2(radius) {
    return "m0," + radius
        + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
        + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
        + "z";
  }

  function index$3() {
    var pointRadius = 4.5,
        projection,
        projectionStream,
        context,
        contextStream;

    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
      }
      return contextStream.result();
    }

    path.area = function(object) {
      geoStream(object, projectionStream(areaStream$1));
      return areaStream$1.result();
    };

    path.bounds = function(object) {
      geoStream(object, projectionStream(boundsStream$1));
      return boundsStream$1.result();
    };

    path.centroid = function(object) {
      geoStream(object, projectionStream(centroidStream$1));
      return centroidStream$1.result();
    };

    path.projection = function(_) {
      return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;
    };

    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new PathString : new PathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return path;
    };

    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };

    return path.projection(null).context(null);
  }

  var sum$2 = adder();

  function polygonContains(polygon, point) {
    var lambda = point[0],
        phi = point[1],
        normal = [sin$1(lambda), -cos$1(lambda), 0],
        angle = 0,
        winding = 0;

    sum$2.reset();

    for (var i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue;
      var ring,
          m,
          point0 = ring[m - 1],
          lambda0 = point0[0],
          phi0 = point0[1] / 2 + quarterPi,
          sinPhi0 = sin$1(phi0),
          cosPhi0 = cos$1(phi0);

      for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        var point1 = ring[j],
            lambda1 = point1[0],
            phi1 = point1[1] / 2 + quarterPi,
            sinPhi1 = sin$1(phi1),
            cosPhi1 = cos$1(phi1),
            delta = lambda1 - lambda0,
            sign = delta >= 0 ? 1 : -1,
            absDelta = sign * delta,
            antimeridian = absDelta > pi$4,
            k = sinPhi0 * sinPhi1;

        sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
        angle += antimeridian ? delta + sign * tau$4 : delta;

        // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?
        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
          var arc = cartesianCross(cartesian(point0), cartesian(point1));
          cartesianNormalizeInPlace(arc);
          var intersection = cartesianCross(normal, arc);
          cartesianNormalizeInPlace(intersection);
          var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
          if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
            winding += antimeridian ^ delta >= 0 ? 1 : -1;
          }
        }
      }
    }

    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.

    return (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ (winding & 1);
  }

  function clip(pointVisible, clipLine, interpolate, start) {
    return function(rotate, sink) {
      var line = clipLine(sink),
          rotatedStart = rotate.invert(start[0], start[1]),
          ringBuffer = clipBuffer(),
          ringSink = clipLine(ringBuffer),
          polygonStarted = false,
          polygon,
          segments,
          ring;

      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = merge(segments);
          var startInside = polygonContains(polygon, rotatedStart);
          if (segments.length) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
          }
          if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          sink.polygonStart();
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
          sink.polygonEnd();
        }
      };

      function point(lambda, phi) {
        var point = rotate(lambda, phi);
        if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
      }

      function pointLine(lambda, phi) {
        var point = rotate(lambda, phi);
        line.point(point[0], point[1]);
      }

      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }

      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }

      function pointRing(lambda, phi) {
        ring.push([lambda, phi]);
        var point = rotate(lambda, phi);
        ringSink.point(point[0], point[1]);
      }

      function ringStart() {
        ringSink.lineStart();
        ring = [];
      }

      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();

        var clean = ringSink.clean(),
            ringSegments = ringBuffer.result(),
            i, n = ringSegments.length, m,
            segment,
            point;

        ring.pop();
        polygon.push(ring);
        ring = null;

        if (!n) return;

        // No intersections.
        if (clean & 1) {
          segment = ringSegments[0];
          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
            sink.lineEnd();
          }
          return;
        }

        // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

        segments.push(ringSegments.filter(validSegment));
      }

      return clip;
    };
  }

  function validSegment(segment) {
    return segment.length > 1;
  }

  // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.
  function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1])
         - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);
  }

  var clipAntimeridian = clip(
    function() { return true; },
    clipAntimeridianLine,
    clipAntimeridianInterpolate,
    [-pi$4, -halfPi$3]
  );

  // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.
  function clipAntimeridianLine(stream) {
    var lambda0 = NaN,
        phi0 = NaN,
        sign0 = NaN,
        clean; // no intersections

    return {
      lineStart: function() {
        stream.lineStart();
        clean = 1;
      },
      point: function(lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi$4 : -pi$4,
            delta = abs(lambda1 - lambda0);
        if (abs(delta - pi$4) < epsilon$4) { // line crosses a pole
          stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          stream.point(lambda1, phi0);
          clean = 0;
        } else if (sign0 !== sign1 && delta >= pi$4) { // line crosses antimeridian
          if (abs(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4; // handle degeneracies
          if (abs(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4;
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
          stream.point(sign0, phi0);
          stream.lineEnd();
          stream.lineStart();
          stream.point(sign1, phi0);
          clean = 0;
        }
        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
      },
      lineEnd: function() {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
      },
      clean: function() {
        return 2 - clean; // if intersections, rejoin first and last segments
      }
    };
  }

  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0,
        cosPhi1,
        sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
    return abs(sinLambda0Lambda1) > epsilon$4
        ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
            - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
            / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
        : (phi0 + phi1) / 2;
  }

  function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
      phi = direction * halfPi$3;
      stream.point(-pi$4, phi);
      stream.point(0, phi);
      stream.point(pi$4, phi);
      stream.point(pi$4, 0);
      stream.point(pi$4, -phi);
      stream.point(0, -phi);
      stream.point(-pi$4, -phi);
      stream.point(-pi$4, 0);
      stream.point(-pi$4, phi);
    } else if (abs(from[0] - to[0]) > epsilon$4) {
      var lambda = from[0] < to[0] ? pi$4 : -pi$4;
      phi = direction * lambda / 2;
      stream.point(-lambda, phi);
      stream.point(0, phi);
      stream.point(lambda, phi);
    } else {
      stream.point(to[0], to[1]);
    }
  }

  function clipCircle(radius, delta) {
    var cr = cos$1(radius),
        smallRadius = cr > 0,
        notHemisphere = abs(cr) > epsilon$4; // TODO optimise for this common case

    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to);
    }

    function visible(lambda, phi) {
      return cos$1(lambda) * cos$1(phi) > cr;
    }

    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    function clipLine(stream) {
      var point0, // previous point
          c0, // code for previous point
          v0, // visibility of previous point
          v00, // visibility of first point
          clean; // no intersections
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(lambda, phi) {
          var point1 = [lambda, phi],
              point2,
              v = visible(lambda, phi),
              c = smallRadius
                ? v ? 0 : code(lambda, phi)
                : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
          if (!point0 && (v00 = v0 = v)) stream.lineStart();
          // Handle degeneracies.
          // TODO ignore if not clipping polygons.
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
              point1[0] += epsilon$4;
              point1[1] += epsilon$4;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              // outside going in
              stream.lineStart();
              point2 = intersect(point1, point0);
              stream.point(point2[0], point2[1]);
            } else {
              // inside going out
              point2 = intersect(point0, point1);
              stream.point(point2[0], point2[1]);
              stream.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
              } else {
                stream.point(t[1][0], t[1][1]);
                stream.lineEnd();
                stream.lineStart();
                stream.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) stream.lineEnd();
          point0 = null;
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function() {
          return clean | ((v00 && v0) << 1);
        }
      };
    }

    // Intersects the great circle between a and b with the clip circle.
    function intersect(a, b, two) {
      var pa = cartesian(a),
          pb = cartesian(b);

      // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
      var n1 = [1, 0, 0], // normal
          n2 = cartesianCross(pa, pb),
          n2n2 = cartesianDot(n2, n2),
          n1n2 = n2[0], // cartesianDot(n1, n2),
          determinant = n2n2 - n1n2 * n1n2;

      // Two polar points.
      if (!determinant) return !two && a;

      var c1 =  cr * n2n2 / determinant,
          c2 = -cr * n1n2 / determinant,
          n1xn2 = cartesianCross(n1, n2),
          A = cartesianScale(n1, c1),
          B = cartesianScale(n2, c2);
      cartesianAddInPlace(A, B);

      // Solve |p(t)|^2 = 1.
      var u = n1xn2,
          w = cartesianDot(A, u),
          uu = cartesianDot(u, u),
          t2 = w * w - uu * (cartesianDot(A, A) - 1);

      if (t2 < 0) return;

      var t = sqrt$1(t2),
          q = cartesianScale(u, (-w - t) / uu);
      cartesianAddInPlace(q, A);
      q = spherical(q);

      if (!two) return q;

      // Two intersection points.
      var lambda0 = a[0],
          lambda1 = b[0],
          phi0 = a[1],
          phi1 = b[1],
          z;

      if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

      var delta = lambda1 - lambda0,
          polar = abs(delta - pi$4) < epsilon$4,
          meridian = polar || delta < epsilon$4;

      if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

      // Check that the first point is between a and b.
      if (meridian
          ? polar
            ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1)
            : phi0 <= q[1] && q[1] <= phi1
          : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [q, spherical(q1)];
      }
    }

    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    function code(lambda, phi) {
      var r = smallRadius ? radius : pi$4 - radius,
          code = 0;
      if (lambda < -r) code |= 1; // left
      else if (lambda > r) code |= 2; // right
      if (phi < -r) code |= 4; // below
      else if (phi > r) code |= 8; // above
      return code;
    }

    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$4, radius - pi$4]);
  }

  function transform$1(prototype) {
    return {
      stream: transform$2(prototype)
    };
  }

  function transform$2(prototype) {
    function T() {}
    var p = T.prototype = Object.create(Transform$1.prototype);
    for (var k in prototype) p[k] = prototype[k];
    return function(stream) {
      var t = new T;
      t.stream = stream;
      return t;
    };
  }

  function Transform$1() {}

  Transform$1.prototype = {
    point: function(x, y) { this.stream.point(x, y); },
    sphere: function() { this.stream.sphere(); },
    lineStart: function() { this.stream.lineStart(); },
    lineEnd: function() { this.stream.lineEnd(); },
    polygonStart: function() { this.stream.polygonStart(); },
    polygonEnd: function() { this.stream.polygonEnd(); }
  };

  function fit(project, extent, object) {
    var w = extent[1][0] - extent[0][0],
        h = extent[1][1] - extent[0][1],
        clip = project.clipExtent && project.clipExtent();

    project
        .scale(150)
        .translate([0, 0]);

    if (clip != null) project.clipExtent(null);

    geoStream(object, project.stream(boundsStream$1));

    var b = boundsStream$1.result(),
        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

    if (clip != null) project.clipExtent(clip);

    return project
        .scale(k * 150)
        .translate([x, y]);
  }

  function fitSize(project) {
    return function(size, object) {
      return fit(project, [[0, 0], size], object);
    };
  }

  function fitExtent(project) {
    return function(extent, object) {
      return fit(project, extent, object);
    };
  }

  var maxDepth = 16;
  var cosMinDistance = cos$1(30 * radians);
  // cos(minimum angular distance)

  function resample(project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
  }

  function resampleNone(project) {
    return transform$2({
      point: function(x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
      }
    });
  }

  function resample$1(project, delta2) {

    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0,
          dy = y1 - y0,
          d2 = dx * dx + dy * dy;
      if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1,
            b = b0 + b1,
            c = c0 + c1,
            m = sqrt$1(a * a + b * b + c * c),
            phi2 = asin$1(c /= m),
            lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a),
            p = project(lambda2, phi2),
            x2 = p[0],
            y2 = p[1],
            dx2 = x2 - x0,
            dy2 = y2 - y0,
            dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 // perpendicular projected distance
            || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
            || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
      }
    }
    return function(stream) {
      var lambda00, x00, y00, a00, b00, c00, // first point
          lambda0, x0, y0, a0, b0, c0; // previous point

      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
        polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
      };

      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }

      function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
      }

      function linePoint(lambda, phi) {
        var c = cartesian([lambda, phi]), p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }

      function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
      }

      function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
      }

      function ringPoint(lambda, phi) {
        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint;
      }

      function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
      }

      return resampleStream;
    };
  }

  var transformRadians = transform$2({
    point: function(x, y) {
      this.stream.point(x * radians, y * radians);
    }
  });

  function projection(project) {
    return projectionMutator(function() { return project; })();
  }

  function projectionMutator(projectAt) {
    var project,
        k = 150, // scale
        x = 480, y = 250, // translate
        dx, dy, lambda = 0, phi = 0, // center
        deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
        theta = null, preclip = clipAntimeridian, // clip angle
        x0 = null, y0, x1, y1, postclip = identity$7, // clip extent
        delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
        cache,
        cacheStream;

    function projection(point) {
      point = projectRotate(point[0] * radians, point[1] * radians);
      return [point[0] * k + dx, dy - point[1] * k];
    }

    function invert(point) {
      point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
      return point && [point[0] * degrees$1, point[1] * degrees$1];
    }

    function projectTransform(x, y) {
      return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
    }

    projection.stream = function(stream) {
      return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
    };

    projection.clipAngle = function(_) {
      return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
    };

    projection.clipExtent = function(_) {
      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
    };

    projection.scale = function(_) {
      return arguments.length ? (k = +_, recenter()) : k;
    };

    projection.translate = function(_) {
      return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
    };

    projection.center = function(_) {
      return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
    };

    projection.rotate = function(_) {
      return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
    };

    projection.precision = function(_) {
      return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
    };

    projection.fitExtent = fitExtent(projection);

    projection.fitSize = fitSize(projection);

    function recenter() {
      projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
      var center = project(lambda, phi);
      dx = x - center[0] * k;
      dy = y + center[1] * k;
      return reset();
    }

    function reset() {
      cache = cacheStream = null;
      return projection;
    }

    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return recenter();
    };
  }

  function conicProjection(projectAt) {
    var phi0 = 0,
        phi1 = pi$4 / 3,
        m = projectionMutator(projectAt),
        p = m(phi0, phi1);

    p.parallels = function(_) {
      return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
    };

    return p;
  }

  function conicEqualAreaRaw(y0, y1) {
    var sy0 = sin$1(y0),
        n = (sy0 + sin$1(y1)) / 2,
        c = 1 + sy0 * (2 * n - sy0),
        r0 = sqrt$1(c) / n;

    function project(x, y) {
      var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
      return [r * sin$1(x *= n), r0 - r * cos$1(x)];
    }

    project.invert = function(x, y) {
      var r0y = r0 - y;
      return [atan2(x, r0y) / n, asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
    };

    return project;
  }

  function conicEqualArea() {
    return conicProjection(conicEqualAreaRaw)
        .scale(155.424)
        .center([0, 33.6442]);
  }

  function albers() {
    return conicEqualArea()
        .parallels([29.5, 45.5])
        .scale(1070)
        .translate([480, 250])
        .rotate([96, 0])
        .center([-0.6, 38.7]);
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  function multiplex(streams) {
    var n = streams.length;
    return {
      point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
      sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
      lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
      lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
      polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
      polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
    };
  }

  // A composite projection for the United States, configured by default for
  // 960×500. The projection also works quite well at 960×600 if you change the
  // scale to 1285 and adjust the translate accordingly. The set of standard
  // parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
  function albersUsa() {
    var cache,
        cacheStream,
        lower48 = albers(), lower48Point,
        alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
        hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
        point, pointStream = {point: function(x, y) { point = [x, y]; }};

    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      return point = null,
          (lower48Point.point(x, y), point)
          || (alaskaPoint.point(x, y), point)
          || (hawaiiPoint.point(x, y), point);
    }

    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(),
          t = lower48.translate(),
          x = (coordinates[0] - t[0]) / k,
          y = (coordinates[1] - t[1]) / k;
      return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
          : lower48).invert(coordinates);
    };

    albersUsa.stream = function(stream) {
      return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
    };

    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_), alaska.precision(_), hawaii.precision(_);
      return albersUsa;
    };

    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };

    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];

      lower48Point = lower48
          .translate(_)
          .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
          .stream(pointStream);

      alaskaPoint = alaska
          .translate([x - 0.307 * k, y + 0.201 * k])
          .clipExtent([[x - 0.425 * k + epsilon$4, y + 0.120 * k + epsilon$4], [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
          .stream(pointStream);

      hawaiiPoint = hawaii
          .translate([x - 0.205 * k, y + 0.212 * k])
          .clipExtent([[x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4], [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4]])
          .stream(pointStream);

      return albersUsa;
    };

    albersUsa.fitExtent = fitExtent(albersUsa);

    albersUsa.fitSize = fitSize(albersUsa);

    return albersUsa.scale(1070);
  }

  function azimuthalRaw(scale) {
    return function(x, y) {
      var cx = cos$1(x),
          cy = cos$1(y),
          k = scale(cx * cy);
      return [
        k * cy * sin$1(x),
        k * sin$1(y)
      ];
    }
  }

  function azimuthalInvert(angle) {
    return function(x, y) {
      var z = sqrt$1(x * x + y * y),
          c = angle(z),
          sc = sin$1(c),
          cc = cos$1(c);
      return [
        atan2(x * sc, z * cc),
        asin$1(z && y * sc / z)
      ];
    }
  }

  var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
    return sqrt$1(2 / (1 + cxcy));
  });

  azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
    return 2 * asin$1(z / 2);
  });

  function azimuthalEqualArea() {
    return projection(azimuthalEqualAreaRaw)
        .scale(124.75)
        .clipAngle(180 - 1e-3);
  }

  var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
    return (c = acos(c)) && c / sin$1(c);
  });

  azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
    return z;
  });

  function azimuthalEquidistant() {
    return projection(azimuthalEquidistantRaw)
        .scale(79.4188)
        .clipAngle(180 - 1e-3);
  }

  function mercatorRaw(lambda, phi) {
    return [lambda, log$1(tan((halfPi$3 + phi) / 2))];
  }

  mercatorRaw.invert = function(x, y) {
    return [x, 2 * atan(exp(y)) - halfPi$3];
  };

  function mercator() {
    return mercatorProjection(mercatorRaw)
        .scale(961 / tau$4);
  }

  function mercatorProjection(project) {
    var m = projection(project),
        scale = m.scale,
        translate = m.translate,
        clipExtent = m.clipExtent,
        clipAuto;

    m.scale = function(_) {
      return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
    };

    m.translate = function(_) {
      return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
    };

    m.clipExtent = function(_) {
      if (!arguments.length) return clipAuto ? null : clipExtent();
      if (clipAuto = _ == null) {
        var k = pi$4 * scale(),
            t = translate();
        _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];
      }
      clipExtent(_);
      return m;
    };

    return m.clipExtent(null);
  }

  function tany(y) {
    return tan((halfPi$3 + y) / 2);
  }

  function conicConformalRaw(y0, y1) {
    var cy0 = cos$1(y0),
        n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)),
        f = cy0 * pow$1(tany(y0), n) / n;

    if (!n) return mercatorRaw;

    function project(x, y) {
      if (f > 0) { if (y < -halfPi$3 + epsilon$4) y = -halfPi$3 + epsilon$4; }
      else { if (y > halfPi$3 - epsilon$4) y = halfPi$3 - epsilon$4; }
      var r = f / pow$1(tany(y), n);
      return [r * sin$1(n * x), f - r * cos$1(n * x)];
    }

    project.invert = function(x, y) {
      var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);
      return [atan2(x, fy) / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$3];
    };

    return project;
  }

  function conicConformal() {
    return conicProjection(conicConformalRaw)
        .scale(109.5)
        .parallels([30, 30]);
  }

  function equirectangularRaw(lambda, phi) {
    return [lambda, phi];
  }

  equirectangularRaw.invert = equirectangularRaw;

  function equirectangular() {
    return projection(equirectangularRaw)
        .scale(152.63);
  }

  function conicEquidistantRaw(y0, y1) {
    var cy0 = cos$1(y0),
        n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
        g = cy0 / n + y0;

    if (abs(n) < epsilon$4) return equirectangularRaw;

    function project(x, y) {
      var gy = g - y, nx = n * x;
      return [gy * sin$1(nx), g - gy * cos$1(nx)];
    }

    project.invert = function(x, y) {
      var gy = g - y;
      return [atan2(x, gy) / n, g - sign$1(n) * sqrt$1(x * x + gy * gy)];
    };

    return project;
  }

  function conicEquidistant() {
    return conicProjection(conicEquidistantRaw)
        .scale(131.154)
        .center([0, 13.9389]);
  }

  function gnomonicRaw(x, y) {
    var cy = cos$1(y), k = cos$1(x) * cy;
    return [cy * sin$1(x) / k, sin$1(y) / k];
  }

  gnomonicRaw.invert = azimuthalInvert(atan);

  function gnomonic() {
    return projection(gnomonicRaw)
        .scale(144.049)
        .clipAngle(60);
  }

  function orthographicRaw(x, y) {
    return [cos$1(y) * sin$1(x), sin$1(y)];
  }

  orthographicRaw.invert = azimuthalInvert(asin$1);

  function orthographic() {
    return projection(orthographicRaw)
        .scale(249.5)
        .clipAngle(90 + epsilon$4);
  }

  function stereographicRaw(x, y) {
    var cy = cos$1(y), k = 1 + cos$1(x) * cy;
    return [cy * sin$1(x) / k, sin$1(y) / k];
  }

  stereographicRaw.invert = azimuthalInvert(function(z) {
    return 2 + atan(z);
  });

  function stereographic() {
    return projection(stereographicRaw)
        .scale(250)
        .clipAngle(142);
  }

  function transverseMercatorRaw(lambda, phi) {
    return [log$1(tan((halfPi$3 + phi) / 2)), -lambda];
  }

  transverseMercatorRaw.invert = function(x, y) {
    return [-y, 2 * atan(exp(x)) - halfPi$3];
  };

  function transverseMercator() {
    var m = mercatorProjection(transverseMercatorRaw),
        center = m.center,
        rotate = m.rotate;

    m.center = function(_) {
      return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
    };

    m.rotate = function(_) {
      return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
    };

    return rotate([0, 0, 90])
        .scale(159.155);
  }

  exports.version = version;
  exports.bisect = bisectRight;
  exports.bisectRight = bisectRight;
  exports.bisectLeft = bisectLeft;
  exports.ascending = ascending;
  exports.bisector = bisector;
  exports.descending = descending;
  exports.deviation = deviation;
  exports.extent = extent;
  exports.histogram = histogram;
  exports.thresholdFreedmanDiaconis = freedmanDiaconis;
  exports.thresholdScott = scott;
  exports.thresholdSturges = sturges;
  exports.max = max;
  exports.mean = mean;
  exports.median = median;
  exports.merge = merge;
  exports.min = min;
  exports.pairs = pairs;
  exports.permute = permute;
  exports.quantile = threshold;
  exports.range = range;
  exports.scan = scan;
  exports.shuffle = shuffle;
  exports.sum = sum;
  exports.ticks = ticks;
  exports.tickStep = tickStep;
  exports.transpose = transpose;
  exports.variance = variance;
  exports.zip = zip;
  exports.entries = entries;
  exports.keys = keys;
  exports.values = values;
  exports.map = map$1;
  exports.set = set;
  exports.nest = nest;
  exports.randomUniform = uniform;
  exports.randomNormal = normal;
  exports.randomLogNormal = logNormal;
  exports.randomBates = bates;
  exports.randomIrwinHall = irwinHall;
  exports.randomExponential = exponential;
  exports.easeLinear = linear;
  exports.easeQuad = quadInOut;
  exports.easeQuadIn = quadIn;
  exports.easeQuadOut = quadOut;
  exports.easeQuadInOut = quadInOut;
  exports.easeCubic = easeCubicInOut;
  exports.easeCubicIn = cubicIn;
  exports.easeCubicOut = cubicOut;
  exports.easeCubicInOut = easeCubicInOut;
  exports.easePoly = polyInOut;
  exports.easePolyIn = polyIn;
  exports.easePolyOut = polyOut;
  exports.easePolyInOut = polyInOut;
  exports.easeSin = sinInOut;
  exports.easeSinIn = sinIn;
  exports.easeSinOut = sinOut;
  exports.easeSinInOut = sinInOut;
  exports.easeExp = expInOut;
  exports.easeExpIn = expIn;
  exports.easeExpOut = expOut;
  exports.easeExpInOut = expInOut;
  exports.easeCircle = circleInOut;
  exports.easeCircleIn = circleIn;
  exports.easeCircleOut = circleOut;
  exports.easeCircleInOut = circleInOut;
  exports.easeBounce = bounceOut;
  exports.easeBounceIn = bounceIn;
  exports.easeBounceOut = bounceOut;
  exports.easeBounceInOut = bounceInOut;
  exports.easeBack = backInOut;
  exports.easeBackIn = backIn;
  exports.easeBackOut = backOut;
  exports.easeBackInOut = backInOut;
  exports.easeElastic = elasticOut;
  exports.easeElasticIn = elasticIn;
  exports.easeElasticOut = elasticOut;
  exports.easeElasticInOut = elasticInOut;
  exports.polygonArea = area;
  exports.polygonCentroid = centroid;
  exports.polygonHull = hull;
  exports.polygonContains = contains;
  exports.polygonLength = length$1;
  exports.path = path;
  exports.quadtree = quadtree;
  exports.queue = queue;
  exports.arc = arc;
  exports.area = area$1;
  exports.line = line;
  exports.pie = pie;
  exports.radialArea = radialArea;
  exports.radialLine = radialLine$1;
  exports.symbol = symbol;
  exports.symbols = symbols;
  exports.symbolCircle = circle;
  exports.symbolCross = cross$1;
  exports.symbolDiamond = diamond;
  exports.symbolSquare = square;
  exports.symbolStar = star;
  exports.symbolTriangle = triangle;
  exports.symbolWye = wye;
  exports.curveBasisClosed = basisClosed;
  exports.curveBasisOpen = basisOpen;
  exports.curveBasis = basis;
  exports.curveBundle = bundle;
  exports.curveCardinalClosed = cardinalClosed;
  exports.curveCardinalOpen = cardinalOpen;
  exports.curveCardinal = cardinal;
  exports.curveCatmullRomClosed = catmullRomClosed;
  exports.curveCatmullRomOpen = catmullRomOpen;
  exports.curveCatmullRom = catmullRom;
  exports.curveLinearClosed = linearClosed;
  exports.curveLinear = curveLinear;
  exports.curveMonotoneX = monotoneX;
  exports.curveMonotoneY = monotoneY;
  exports.curveNatural = natural;
  exports.curveStep = step;
  exports.curveStepAfter = stepAfter;
  exports.curveStepBefore = stepBefore;
  exports.stack = stack;
  exports.stackOffsetExpand = expand;
  exports.stackOffsetNone = none;
  exports.stackOffsetSilhouette = silhouette;
  exports.stackOffsetWiggle = wiggle;
  exports.stackOrderAscending = ascending$1;
  exports.stackOrderDescending = descending$2;
  exports.stackOrderInsideOut = insideOut;
  exports.stackOrderNone = none$1;
  exports.stackOrderReverse = reverse;
  exports.color = color;
  exports.rgb = colorRgb;
  exports.hsl = colorHsl;
  exports.lab = lab;
  exports.hcl = colorHcl;
  exports.cubehelix = cubehelix;
  exports.interpolate = interpolate;
  exports.interpolateArray = array$1;
  exports.interpolateDate = date;
  exports.interpolateNumber = interpolateNumber;
  exports.interpolateObject = object;
  exports.interpolateRound = interpolateRound;
  exports.interpolateString = interpolateString;
  exports.interpolateTransformCss = interpolateTransform$1;
  exports.interpolateTransformSvg = interpolateTransform$2;
  exports.interpolateZoom = interpolateZoom;
  exports.interpolateRgb = interpolateRgb;
  exports.interpolateRgbBasis = rgbBasis;
  exports.interpolateRgbBasisClosed = rgbBasisClosed;
  exports.interpolateHsl = hsl$1;
  exports.interpolateHslLong = hslLong;
  exports.interpolateLab = lab$1;
  exports.interpolateHcl = hcl$1;
  exports.interpolateHclLong = hclLong;
  exports.interpolateCubehelix = cubehelix$2;
  exports.interpolateCubehelixLong = interpolateCubehelixLong;
  exports.interpolateBasis = basis$2;
  exports.interpolateBasisClosed = basisClosed$1;
  exports.quantize = quantize;
  exports.dispatch = dispatch;
  exports.dsvFormat = dsv;
  exports.csvParse = csvParse;
  exports.csvParseRows = csvParseRows;
  exports.csvFormat = csvFormat;
  exports.csvFormatRows = csvFormatRows;
  exports.tsvParse = tsvParse;
  exports.tsvParseRows = tsvParseRows;
  exports.tsvFormat = tsvFormat;
  exports.tsvFormatRows = tsvFormatRows;
  exports.request = request;
  exports.html = html;
  exports.json = json;
  exports.text = text;
  exports.xml = xml;
  exports.csv = csv$1;
  exports.tsv = tsv$1;
  exports.now = now;
  exports.timer = timer;
  exports.timerFlush = timerFlush;
  exports.timeout = timeout$1;
  exports.interval = interval$1;
  exports.timeInterval = newInterval;
  exports.timeMillisecond = millisecond;
  exports.timeMilliseconds = milliseconds;
  exports.timeSecond = second;
  exports.timeSeconds = seconds;
  exports.timeMinute = minute;
  exports.timeMinutes = minutes;
  exports.timeHour = hour;
  exports.timeHours = hours;
  exports.timeDay = day;
  exports.timeDays = days;
  exports.timeWeek = timeWeek;
  exports.timeWeeks = sundays;
  exports.timeSunday = timeWeek;
  exports.timeSundays = sundays;
  exports.timeMonday = timeMonday;
  exports.timeMondays = mondays;
  exports.timeTuesday = tuesday;
  exports.timeTuesdays = tuesdays;
  exports.timeWednesday = wednesday;
  exports.timeWednesdays = wednesdays;
  exports.timeThursday = thursday;
  exports.timeThursdays = thursdays;
  exports.timeFriday = friday;
  exports.timeFridays = fridays;
  exports.timeSaturday = saturday;
  exports.timeSaturdays = saturdays;
  exports.timeMonth = month;
  exports.timeMonths = months;
  exports.timeYear = year;
  exports.timeYears = years;
  exports.utcMillisecond = millisecond;
  exports.utcMilliseconds = milliseconds;
  exports.utcSecond = second;
  exports.utcSeconds = seconds;
  exports.utcMinute = utcMinute;
  exports.utcMinutes = utcMinutes;
  exports.utcHour = utcHour;
  exports.utcHours = utcHours;
  exports.utcDay = utcDay;
  exports.utcDays = utcDays;
  exports.utcWeek = utcWeek;
  exports.utcWeeks = utcSundays;
  exports.utcSunday = utcWeek;
  exports.utcSundays = utcSundays;
  exports.utcMonday = utcMonday;
  exports.utcMondays = utcMondays;
  exports.utcTuesday = utcTuesday;
  exports.utcTuesdays = utcTuesdays;
  exports.utcWednesday = utcWednesday;
  exports.utcWednesdays = utcWednesdays;
  exports.utcThursday = utcThursday;
  exports.utcThursdays = utcThursdays;
  exports.utcFriday = utcFriday;
  exports.utcFridays = utcFridays;
  exports.utcSaturday = utcSaturday;
  exports.utcSaturdays = utcSaturdays;
  exports.utcMonth = utcMonth;
  exports.utcMonths = utcMonths;
  exports.utcYear = utcYear;
  exports.utcYears = utcYears;
  exports.formatLocale = formatLocale;
  exports.formatDefaultLocale = defaultLocale;
  exports.formatSpecifier = formatSpecifier;
  exports.precisionFixed = precisionFixed;
  exports.precisionPrefix = precisionPrefix;
  exports.precisionRound = precisionRound;
  exports.isoFormat = formatIso;
  exports.isoParse = parseIso;
  exports.timeFormatLocale = formatLocale$1;
  exports.timeFormatDefaultLocale = defaultLocale$1;
  exports.scaleBand = band;
  exports.scalePoint = point$4;
  exports.scaleIdentity = identity$4;
  exports.scaleLinear = linear$2;
  exports.scaleLog = log;
  exports.scaleOrdinal = ordinal;
  exports.scaleImplicit = implicit;
  exports.scalePow = pow;
  exports.scaleSqrt = sqrt;
  exports.scaleQuantile = quantile;
  exports.scaleQuantize = quantize$1;
  exports.scaleThreshold = threshold$1;
  exports.scaleTime = time;
  exports.scaleUtc = utcTime;
  exports.schemeCategory10 = category10;
  exports.schemeCategory20b = category20b;
  exports.schemeCategory20c = category20c;
  exports.schemeCategory20 = category20;
  exports.scaleSequential = sequential;
  exports.interpolateCubehelixDefault = cubehelix$3;
  exports.interpolateRainbow = rainbow$1;
  exports.interpolateWarm = warm;
  exports.interpolateCool = cool;
  exports.interpolateViridis = viridis;
  exports.interpolateMagma = magma;
  exports.interpolateInferno = inferno;
  exports.interpolatePlasma = plasma;
  exports.creator = creator;
  exports.customEvent = customEvent;
  exports.local = local;
  exports.matcher = matcher$1;
  exports.mouse = mouse;
  exports.namespace = namespace;
  exports.namespaces = namespaces;
  exports.select = select;
  exports.selectAll = selectAll;
  exports.selection = selection;
  exports.selector = selector;
  exports.selectorAll = selectorAll;
  exports.touch = touch;
  exports.touches = touches;
  exports.window = window;
  exports.active = active;
  exports.interrupt = interrupt;
  exports.transition = transition;
  exports.axisTop = axisTop;
  exports.axisRight = axisRight;
  exports.axisBottom = axisBottom;
  exports.axisLeft = axisLeft;
  exports.cluster = cluster;
  exports.hierarchy = hierarchy;
  exports.pack = index;
  exports.packSiblings = siblings;
  exports.packEnclose = enclose;
  exports.partition = partition;
  exports.stratify = stratify;
  exports.tree = tree;
  exports.treemap = index$1;
  exports.treemapBinary = binary;
  exports.treemapDice = treemapDice;
  exports.treemapSlice = treemapSlice;
  exports.treemapSliceDice = sliceDice;
  exports.treemapSquarify = squarify;
  exports.treemapResquarify = resquarify;
  exports.forceCenter = center$1;
  exports.forceCollide = collide;
  exports.forceLink = link;
  exports.forceManyBody = manyBody;
  exports.forceSimulation = simulation;
  exports.forceX = x$3;
  exports.forceY = y$3;
  exports.drag = drag;
  exports.dragDisable = dragDisable;
  exports.dragEnable = dragEnable;
  exports.voronoi = voronoi;
  exports.zoom = zoom;
  exports.zoomIdentity = identity$6;
  exports.zoomTransform = transform;
  exports.brush = brush;
  exports.brushX = brushX;
  exports.brushY = brushY;
  exports.brushSelection = brushSelection;
  exports.chord = chord;
  exports.ribbon = ribbon;
  exports.geoAlbers = albers;
  exports.geoAlbersUsa = albersUsa;
  exports.geoArea = area$2;
  exports.geoAzimuthalEqualArea = azimuthalEqualArea;
  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
  exports.geoAzimuthalEquidistant = azimuthalEquidistant;
  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
  exports.geoBounds = bounds;
  exports.geoCentroid = centroid$1;
  exports.geoCircle = circle$1;
  exports.geoClipExtent = extent$1;
  exports.geoConicConformal = conicConformal;
  exports.geoConicConformalRaw = conicConformalRaw;
  exports.geoConicEqualArea = conicEqualArea;
  exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
  exports.geoConicEquidistant = conicEquidistant;
  exports.geoConicEquidistantRaw = conicEquidistantRaw;
  exports.geoDistance = distance;
  exports.geoEquirectangular = equirectangular;
  exports.geoEquirectangularRaw = equirectangularRaw;
  exports.geoGnomonic = gnomonic;
  exports.geoGnomonicRaw = gnomonicRaw;
  exports.geoGraticule = graticule;
  exports.geoInterpolate = interpolate$2;
  exports.geoLength = length$2;
  exports.geoMercator = mercator;
  exports.geoMercatorRaw = mercatorRaw;
  exports.geoOrthographic = orthographic;
  exports.geoOrthographicRaw = orthographicRaw;
  exports.geoPath = index$3;
  exports.geoProjection = projection;
  exports.geoProjectionMutator = projectionMutator;
  exports.geoRotation = rotation;
  exports.geoStereographic = stereographic;
  exports.geoStereographicRaw = stereographicRaw;
  exports.geoStream = geoStream;
  exports.geoTransform = transform$1;
  exports.geoTransverseMercator = transverseMercator;
  exports.geoTransverseMercatorRaw = transverseMercatorRaw;

  Object.defineProperty(exports, '__esModule', { value: true });

}));

document.getElementById("dailyNav").innerHTML = `<nav class="navbar navbar-toggleable-sm  fixed-top bg-primary app-navbar">
    
 
<button aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"
    class="navbar-toggler navbar-toggler-center hidden-md-up" data-target="#navbarResponsive" data-toggle="collapse"
    type="button" on-click="fadeUp()" id="toggler"> </button>

<div class="collapse navbar-collapse   multi_drop_menu   menu" id="navbarResponsive">
    <ul class="navbar-nav mr-auto ">
        <li  id="banner" >
        <a href="/" class="banner" id="linkbanner" title="Our Daily Tech"><img src="https://s3.amazonaws.com/ourdailytech.net/dist/img/ourdailytechbanner.png" alt="our dailytech banner"  /></a>
        </li>
    <!--    <li class="nav-item   ">
            <a class="nav-link" href="/" data-target="#navbarResponsive" data-toggle="collapse" type="button"
                on-click="fadeUp()">
                <span class=" subdailytech"> TECH
                    <br />BLOG </span>
            </a>
        </li>-->
        <li class="nav-item  ">
            <a class="nav-link" href="/archives" data-target="#navbarResponsive" data-toggle="collapse"
                type="button" on-click="fadeUp()">
                <span class="subdailytech ">BLOG  ✨
                    <br />ARCHIVES </span>
            </a>
        </li>
        <li class="nav-item hidden">
            <a class="nav-link" ng-href="https://www.ourdailytech.net/_For_Cat_Eyes_Only_/index.html"
                title="tmm FICTION" data-target="#navbarResponsive" data-toggle="collapse" type="button">
                <span class="caret subdailytech">FOR_CAT
                    <br />EYES_ONLY</span>
            </a>

            <a class="nav-link" ng-href="/_For_Cat_Eyes_Only_" title="tmm FICTION" data-target="#navbarResponsive"
                data-toggle="collapse" type="button">
                <span class="caret subdailytech">FOR_CAT
                    <br />EYES_ONLY</span>
            </a>
            <ul style="z-index:0" class="menu-left">
                <li>
                    tmm FICTION
                    <a style="z-index:199; " ng-href="https://www.ourdailytech.net/_For_Cat_Eyes_Only_/index.html"
                        title="tmm FICTION" data-target="#navbarResponsive" data-toggle="collapse" type="button">For
                        Cat Eyes Only:
                        <i>Early Months of Win&#39;s Campaign</i>
                    </a>
                </li>
                <li style="z-index:199; ">
                    tmm FICTION
                    <a style="z-index:199; "
                        ng-href="https://www.ourdailytech.net/_For_Cat_Eyes_Only_/index.html#capturing"
                        title="tmm FICTION" data-target="#navbarResponsive" data-toggle="collapse"
                        type="button">Fiction Excerpts From:
                        <br />
                        <i>The Casperian Ancestries</i>
                        <br />
                        <small>Capturing One Cat&#39;s Past and Present</small>
                    </a>
                    tmm FICTION
                </li>
            </ul>
        </li>
        <li style="z-index:5" class="nav-item">
            <a class="nav-link" data-target="#navbarResponsive" data-toggle="collapse" type="button"
                on-click="fadeUp()">
                <span class=" subdailytech">DATA
                    <br /> TOOLS
                </span>
            </a>


            <ul>

                <!--START UL -->

                <li style="z-index:100;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button"> Web &nbsp;&nbsp;
                        <span> </span>
                    </a>


                    <ul>
                        <li style="z-index:100;">
                            <a href="http://webreference.com/" target="_blank">Web Reference</a>
                        </li>
                        <li>
                            <a href="https://developer.mozilla.org" target="_blank">Mozilla Dev</a>
                        </li>
                        <li>
                            <a href="http://support.google.com/webmasters/?hl=en" target="_blank">Google Dev</a>
                        </li>
                        <li>
                            <a href="http://developer.yahoo.com/" target="_blank">Yahoo! Dev</a>
                        </li>
                        <li>
                            <a href="http://www.w3schools.com" target="_blank">W3 schools</a>
                        </li>
                        <li>
                            <a href="http://www.w3.org/" target="_blank">World Wide Web Consortium</a>
                        </li>
                        <li>
                            <a href="https://www.icann.org" target="_blank">ICANN</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:98.2;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">Data-Driven Docs</a>
                    <ul  >
                        <li style="z-index:98">
                            <a href="http://d3js.org" target="_blank">D3js</a>
                        </li> 
                        <li style="z-index:98.5">
                            <a href="https://chartio.com/" target="_blank">chartio</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="http://code.shutterstock.com/rickshaw/" target="_blank">rickshaw</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="http://rawgraphs.io/" target="_blank">rawgraphs.io </a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="http://dimplejs.org" target="_blank">dimplejs</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="http://nvd3.org/" target="_blank">nvd3</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="https://developer.mozilla.org/en-US/docs/Web/SVG" target="_blank">SVG</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="https://www.khronos.org/webgl/" target="_blank">WebGL</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank">Canvas</a>
                        </li>
                        <li style="z-index:98.5">
                            <a href="http://alignedleft.com/tutorials/d3/binding-data" target="_blank">binding-data</a>
                        </li> 
                        <li style="z-index:98.5">
                            <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank">Canvas</a>
                        </li>


                    </ul>
                </li>
                <li style="z-index:98;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">Javascript &nbsp;&nbsp; </a>
                    <ul>
                        <li style="z-index:98">
                            <a href="https://jsbin.com" target="_blank">JS Bin</a>
                        </li>
                        <li style="z-index:98">
                            <a href="https://developer.mozilla.org/en-US/docs/Web/API" target="_blank">JavaScript
                                APIs</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:10 ;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">Datasets &nbsp;&nbsp;</a>
                    <ul>
                        <li style="z-index:10 ;">
                            <a href="http://www.icpsr.umich.edu/icpsrweb/ICPSR/index.jsp" target="_blank">ICPSR
                                Datasets</a>
                        </li>
                        <li style="z-index:10 ;">
                            <a href="http://data.imf.org/?sk=7CB6619C-CF87-48DC-9443-2973E161ABEB"
                                target="_blank">Datasets IMF</a>
                        </li>
                        <li style="z-index:98.5">
                        <a href="http://datajournalismhandbook.org/1.0/en/getting_data_3.html" target="_blank">getting_data</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:101;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">Data Analysis &nbsp;&nbsp;</a>
                    <ul>
                        <li style="z-index:101;">
                            <a href="https://stats.idre.ucla.edu/other/dae/" target="_blank">UCLA Stats</a>
                        </li>
                        <li style="z-index:101;">
                            <a href="http://openrefine.org/" target="_blank">OpenRefine</a>
                        </li>
                        <li style="z-index:102;">
                            <a href="http://statacumen.com" target="_blank">Stat Acumen</a>
                        </li>
                        <li style="z-index:102;">
                            <a href="http://www.mapageweb.umontreal.ca/durandc/" target="_blank">Montr&eacute;al
                                Stats</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:12;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">SQL &nbsp;&nbsp; </a>
                    <ul>
                        <li style="z-index:12;">
                            <a target="_blank">MySQL &nbsp;&nbsp;</a>
                        </li>
                        <li style="z-index:12;">
                            <a href="https://www.mysql.com/" target="_blank">MySQL</a>
                        </li>
                        <li style="z-index:121;">
                            <a href="http://www.oracle.com/technetwork/developer-tools/apex/overview/index-155186.html"
                                target="_blank">Oracle Express</a>
                        </li>
                        <li style="z-index:121;">
                            <a href="http://iacademy.oracle.com" target="_blank">Application Express</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:1;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button"> R-Project &nbsp;&nbsp; </a>
                    <ul>
                        <li style="z-index:1;">
                            <a href="https://www.r-project.org/" target="_blank">R-Project </a>
                        </li>
                        <li>
                            <a href="https://www.rstudio.com/" target="_blank">RStudio</a>
                        </li>
                        <li>
                            <a href="https://shiny.rstudio.com/" target="_blank">Shiny</a>
                        </li>
                        <li>
                            <a href="http://amsantac.co/blog/en/2015/10/31/qgis-r.html" target="_blank">Open GIS</a>
                        </li>
                        <li>
                            <a href="http://www.tableau.com/products/cloud-bi" target="_blank">Tableau </a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:1;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button"> Python &nbsp;&nbsp; </a>
                    <ul>
                        <li style="z-index:1;">
                            <a href="https://www.python.org/" target="_blank">Python.org</a>
                        </li>
                        <li>
                            <a href="https://pypi.python.org/pypi" target="_blank">Python Package Index</a>
                        </li>
                        <li>
                            <a href="https://docs.python.org/2/library/index.html" target="_blank">Python Standard
                                Library</a>
                        </li>
                        <li>
                            <a href="https://pandas.pydata.org/pandas-docs/stable/" target="_blank">Pandas Data
                                Analysis Toolkit</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:9;">
                    <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                        role="button">Validators &nbsp;&nbsp;</a>
                    <ul>
                        <li style="z-index:9;">
                            <a href="https://stats.idre.ucla.edu/other/dae/" target="_blank">Validators </a>
                        </li>
                        <li>
                            <a href="http://validator.w3.org" target="_blank">HTML validator</a>
                        </li>
                        <li>
                            <a href="http://jigsaw.w3.org/css-validator/" target="_blank">CSS validator</a>
                        </li>
                        <li>
                            <a href="http://jsonlint.com/" target="_blank">JSON Validator</a>
                        </li>
                    </ul>
                </li>
                <li style="z-index:101;">
                <a aria-expanded="false" aria-haspopup="true" class="dropdown-toggle" data-toggle="dropdown"
                    role="button">Styles &nbsp;&nbsp;</a>
                <ul>
                    <li style="z-index:101;">
                      <a href="http://html-color-codes.info/" target="_blank">Color Codes</a>
                    </li>
                    <li style="z-index:101;">
                       <a href="https://inkscape.org/en/" target="_blank">Inkscape</a>
                    </li>
                    <li style="z-index:102;">
                       <a href="http://codepen.io/" target="_blank">codepen.io</a>
                    </li>
                    <li style="z-index:102;">
                        <a href="http://www.dynamicdrive.com/" target="_blank">Dynamic Drive</a>
                    </li>
                    <li style="z-index:102;">
                        <a href="http://www.useit.com/" target="_blank">Nielson Norman Group</a>
                    </li>
                  </ul>
                 </li>
                <li>
                    <a href="http://www.kaggle.com" target="_blank">Kaggle</a>
                </li>
                <li>
                    <a href="http://plnkr.co/" target="_blank">Plunker</a>
                </li> 
                <li>
                    <a class="last" href="http://stackoverflow.com" target="_blank">Stack Overflow</a>
                </li> 


              </li>
               
            </ul>
            <!--end UL-->


        </li>
    </ul>
    <ul id="media" class="nav navbar-nav navbar-right">


        <li>

            <a title="Medium" href="https://medium.com/@thomasm1" target="_blank">

                <i class="fa fa-medium"></i>

            </a>

        </li>
        <li>

            <a title="github" href="https://github.com/thomasm1" target="_blank">

                <i class="fa fa-github"></i>

            </a>

        </li>


        <li>

            <a title="facebook" href="https://www.facebook.com/thomasm1.maestas" target="_blank">

                <i class="fa fa-facebook"></i>

            </a>

        </li>

        <li>

            <a title="linkedin" href="http://linkedin.com/in/thomasmaestas" target="_blank">

                <i class="fa fa-linkedin"></i>

            </a>

        </li>
        
        <!--End UL -->

    </ul>
    <abbr title="Our Daily Tech">

        <img class="card-profile-img zoom" id="dailylogo" alt="image of Le Mont Real"
            src="dist/img/blueColorTriomphe.png" />

    </abbr>

</div>

</nav>`


				 

							var canvas = document.querySelector(".canvas"),

								context = canvas.getContext("2d"),

								width = canvas.width,

								height = canvas.height; 

							d3.csv("data/maps.csv", function(error, data) {

							  if (error) throw error; 
							  var root = d3.stratify() 
								  .id(function(d) { return d.path; }) 
								  .parentId(function(d) { return d.path.substring(0, d.path.lastIndexOf("/")); })

								(data);

							

							  var nodes = root.descendants(),

								  links = root.links();

							

							  var simulation = d3.forceSimulation(nodes)

								  .force("charge", d3.forceManyBody())

								  .force("link", d3.forceLink(links).strength(1))

								  .force("x", d3.forceX())

								  .force("y", d3.forceY())

								  .on("tick", ticked);

							

							  d3.select(canvas)

								  .call(d3.drag()

									  .container(canvas)

									  .subject(dragsubject)

									  .on("start", dragstarted)

									  .on("drag", dragged)

									  .on("end", dragended));

							

							  function ticked() {

								context.clearRect(0, 0, width, height);

								context.save();

								context.translate(width / 2, height / 2);

							

								context.beginPath();

								links.forEach(drawLink);

								context.strokeStyle = "steelblue";

								context.stroke();

							

								context.beginPath();

								nodes.forEach(drawNode);

								context.fillStyle = "white";
								context.fill();

								context.strokeStyle = "steelblue";

								context.stroke();

							

								context.restore();

							  }

							

							  function dragsubject() {

								return simulation.find(d3.event.x - width / 2, d3.event.y - height / 2);

							  }

							

							  function dragstarted() {

								if (!d3.event.active) simulation.alphaTarget(0.9).restart();

								d3.event.subject.fx = d3.event.subject.x;

								d3.event.subject.fy = d3.event.subject.y;

							  }

							

							  function dragged() {

								d3.event.subject.fx = d3.event.x;

								d3.event.subject.fy = d3.event.y;

							  }

							

							  function dragended() {

								if (!d3.event.active) simulation.alphaTarget(0);

								d3.event.subject.fx = null;

								d3.event.subject.fy = null;

							  }

							

							  function drawLink(d) {

								context.moveTo(d.source.x, d.source.y);

								context.lineTo(d.target.x, d.target.y);

							  }

							

							  function drawNode(d) {

								context.moveTo(d.x + 3, d.y);

								context.arc(d.x, d.y, 3, 0, 2 * Math.PI);

							  }

							});

							 
let url =
  "https://api.nasa.gov/planetary/apod?api_key=mF6DQEqY3WtCubgab5P2otQQ6bP1b8nY24VmiJw0";
let xhttp = new XMLHttpRequest();

xhttp.onreadystatechange = function () {
 
  if (xhttp.readyState == 4 && xhttp.statusText == "OK") {   
  console.log("onreadystate changed- xhttp.statusText: " + xhttp.statusText);
    let result = JSON.parse(this.responseText);
    console.log("this.responseText: "+this.responseText);
    if (result.copyright != "") {
      document.getElementById("copyright").innerHTML =
        "Image Credits: " + result.copyright;
    } else {
      document.getElementById("copyright").innerHTML =
        "Image Credits: " + "Public Domain";
    }

    if (result.media_type == "video") {
      document.getElementById("apod_img_id").style.display = "none";
      document.getElementById("apod_vid_id").setAttribute("src", result.url);
    } else {
      document.getElementById("apod_vid_id").style.display = "none";
      document.getElementById("apod_img_id").setAttribute("src", result.url);
    }
    document.getElementById("reqObject").text = url;
    document.getElementById("returnObject").innerHTML = JSON.stringify(
      result,
      null,
      4
    );
    document.getElementById("apod_explaination").innerHTML = result.explanation;
    document.getElementById("apod_title").innerHTML = result.title;
 
  } /// IF 200
};
xhttp.open("GET", url, true);
xhttp.send();

var modal = document.getElementById('msimpleModal');  
var modalBtn = document.getElementById('mmodalBtn'); 
var closeBtn = document.getElementsByClassName('mcloseBtn')[0];  

modalBtn.addEventListener('click', openModal); 
closeBtn.addEventListener('click', closeModal); 
window.addEventListener('click', outsideClick); 

function openModal(){
  modal.style.display = 'block';
  modalBtn.style.display = 'none';
} 
function closeModal(){
  modal.style.display = 'none';
  modalBtn.style.display = 'block';
} 
function outsideClick(e){
  if(e.target == modal){
    modal.style.display = 'none';
  modalBtn.style.display = 'block';
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsb2ctZHJhZnQtMjAyMG1hci5qcyIsImJsb2ctZHJhZnQtYXByLmpzIiwiYmxvZy1kcmFmdC1hdWcuanMiLCJibG9nLWRyYWZ0LWRlYy5qcyIsImJsb2ctZHJhZnQtZmViLmpzIiwiYmxvZy1kcmFmdC1qYW4xOS5qcyIsImJsb2ctZHJhZnQtanVsLmpzIiwiYmxvZy1kcmFmdC1qdW5lLmpzIiwiYmxvZy1kcmFmdC1tYXIuanMiLCJibG9nLWRyYWZ0LW1hcmNoMTkuanMiLCJibG9nLWRyYWZ0LW1heS5qcyIsImJsb2ctZHJhZnQtbWF5MTkuanMiLCJibG9nLWRyYWZ0LW1heTIxLmpzIiwiYmxvZy1kcmFmdC1ub3YuanMiLCJibG9nLWRyYWZ0LW9jdC5qcyIsImJsb2ctZHJhZnQtb2N0T0xELmpzIiwiYmxvZy1kcmFmdC1zZXAuanMiLCJjYWxjLmpzIiwiZDN2NC5qcyIsImRhaWx5LW5hdi5qcyIsImZvcmNlLmpzIiwibWFyc3JlYWRlci5qcyIsIm1vZGFsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM3bkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2xrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDL2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3pyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN6aUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDaE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDbmJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDeHJCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNockJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3RtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNoNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNubEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM1TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3AyZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcclxudmFyIGJsb2dnZXJNYXJjaDIwID0gZnVuY3Rpb24oKSB7XHJcbiBcclxuLy8gICB2YXIgYmxvZ3Bvc3QxMSA9ICBgPHA+XHJcbi8vICAgICA8L3A+XHJcbi8vICAgICA8cCBjbGFzcz1cInF1b3RlXCI+R3JhcGhlbmUgYmF0dGVyaWVzIGFyZSBvbmUgb2YgdGhlIGZhc3Rlc3QgZW5lcmd5LXN0b3Jpbmcgc29sdXRpb25zIGF2YWlsYWJsZSwgZ2xvYmFsbHkuIEdyYXBoZW5lIHV0aWxpemVkIGFzIGVsZWN0cm9kZSBtYXRlcmlhbCBpbiBiYXR0ZXJpZXMgbmVlZHMgdG8gYmUgb2YgaGlnaCBxdWFsaXR5LCB0aGF0IGlzLCBzaW5nbGUgdG8gZmV3IGxheWVyZWQgZ3JhcGhlbmUuPHN1cD4xPC9zdXA+XHJcbi8vICAgICA8L3A+XHJcbi8vICAgICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbi8vICAgICBgXHJcbi8vICAgICAgdmFyIGJsb2djaXRlMTEgPSAgICBgIFxyXG4vLyAgICAgICA8cD4xLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vbnlzZW5ld3N0aW1lcy5jb20vaHVnZS1kZW1hbmQtZm9yLWdyYXBoZW5lLWJhdHRlcnktbWFya2V0LTIwMjAtc3RhdGlzdGljcy1mYWN0cy1hbmQtZmlndXJlcy1ncm93dGgtb3ZlcnZpZXctc2l6ZS1zd290LWFuYWx5c2lzLWFuZC1mb3JlY2FzdC10by0yMDI2LWJ5LWNhYm90LWNvcnBvcmF0aW9uLW5hbm94cGxvcmUtZ3JhcGhlbmUtM2QtbGFiL1wiPmh0dHBzOi8vbnlzZW5ld3N0aW1lcy5jb20vaHVnZS1kZW1hbmQtZm9yLWdyYXBoZW5lLWJhdHRlcnktbWFya2V0LTIwMjAtc3RhdGlzdGljcy1mYWN0cy1hbmQtZmlndXJlcy1ncm93dGgtb3ZlcnZpZXctc2l6ZS1zd290LWFuYWx5c2lzLWFuZC1mb3JlY2FzdC10by0yMDI2LWJ5LWNhYm90LWNvcnBvcmF0aW9uLW5hbm94cGxvcmUtZ3JhcGhlbmUtM2QtbGFiLzwvYT4gXHJcbi8vIDwvcD5cclxuLy8gPHA+Mi4gPGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ncmFwaGVuZS1pbmZvLmNvbS9ncmFwaGVuZS1iYXR0ZXJpZXNcIj5odHRwczovL3d3dy5ncmFwaGVuZS1pbmZvLmNvbS9ncmFwaGVuZS1iYXR0ZXJpZXM8L2E+IDwvcD4gIFxyXG4vLyA8cD4zLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS93ZWxjb21lLXRvLXRoZS1lcmEtb2Ytc3VwZXJjaGFyZ2VkLWxpdGhpdW0tc2lsaWNvbi1iYXR0ZXJpZXMvXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3dlbGNvbWUtdG8tdGhlLWVyYS1vZi1zdXBlcmNoYXJnZWQtbGl0aGl1bS1zaWxpY29uLWJhdHRlcmllcy88L2E+IFxyXG4vLyA8L3A+ICBcclxuLy8gICBgO1xyXG4vLyAgICAgdmFyIGJsb2dwb3N0MTAgPSBgPHA+VGhlIE51dHMgJmFtcDsgQm9sdHMgb2Ygb25lIG9mIGdyYXBoZW5lJ3MgY29udHJpYnV0aW9ucyAuLi5cclxuLy8gICAgIDwvcD5cclxuLy8gICAgIDxwIGNsYXNzPVwicXVvdGVcIj5XaGVuIGEgbGl0aGl1bS1pb24gYmF0dGVyeSBpcyBjaGFyZ2luZywgbGl0aGl1bSBpb25zIGZsb3cgdG8gdGhlIGFub2RlLCB3aGljaCBpcyB0eXBpY2FsbHkgbWFkZSBvZiBhIHR5cGUgb2YgY2FyYm9uIGNhbGxlZCBncmFwaGl0ZS4gSWYgeW91IHN3YXAgZ3JhcGhpdGUgZm9yIHNpbGljb24sIGZhciBtb3JlIGxpdGhpdW0gaW9ucyBjYW4gYmUgc3RvcmVkIGluIHRoZSBhbm9kZSwgd2hpY2ggaW5jcmVhc2VzIHRoZSBlbmVyZ3kgY2FwYWNpdHkgb2YgdGhlIGJhdHRlcnkuIEJ1dCBwYWNraW5nIGFsbCB0aGVzZSBsaXRoaXVtIGlvbnMgaW50byB0aGUgZWxlY3Ryb2RlIGNhdXNlcyBpdCB0byBzd2VsbCBsaWtlIGEgYmFsbG9vbjsgaW4gc29tZSBjYXNlcywgaXQgY2FuIGdyb3cgdXAgdG8gZm91ciB0aW1lcyBsYXJnZXIuXHJcbi8vIDxiciAvPjxiciAvPlxyXG4vLyBUaGUgc3dvbGxlbiBhbm9kZSBjYW4gcHVsdmVyaXplIHRoZSBuYW5vZW5naW5lZXJlZCBzaWxpY29uIHBhcnRpY2xlcyBhbmQgcnVwdHVyZSB0aGUgcHJvdGVjdGl2ZSBiYXJyaWVyIGJldHdlZW4gdGhlIGFub2RlIGFuZCB0aGUgYmF0dGVyeeKAmXMgZWxlY3Ryb2x5dGUsIHdoaWNoIGZlcnJpZXMgdGhlIGxpdGhpdW0gaW9ucyBiZXR3ZWVuIHRoZSBlbGVjdHJvZGVzLiBPdmVyIHRpbWUsIGNydWQgYnVpbGRzIHVwIGF0IHRoZSBib3VuZGFyeSBiZXR3ZWVuIHRoZSBhbm9kZSBhbmQgZWxlY3Ryb2x5dGUuIFRoaXMgYm90aCBibG9ja3MgdGhlIGVmZmljaWVudCB0cmFuc2ZlciBvZiBsaXRoaXVtIGlvbnMgYW5kIHRha2VzIG1hbnkgb2YgdGhlIGlvbnMgb3V0IG9mIHNlcnZpY2UuIEl0IHF1aWNrbHkga2lsbHMgYW55IHBlcmZvcm1hbmNlIGltcHJvdmVtZW50cyB0aGUgc2lsaWNvbiBhbm9kZSBwcm92aWRlZC5cclxuLy8gPGJyIC8+PGJyIC8+XHJcbi8vIE9uZSB3YXkgb3V0IG9mIHRoaXMgcHJvYmxlbSBpcyB0byBzcHJpbmtsZSBzbWFsbCBhbW91bnRzIG9mIHNpbGljb24gb3hpZGXigJRiZXR0ZXIga25vd24gYXMgc2FuZOKAlHRocm91Z2hvdXQgYSBncmFwaGl0ZSBhbm9kZS4gVGhpcyBpcyB3aGF0IFRlc2xhIGN1cnJlbnRseSBkb2VzIHdpdGggaXRzIGJhdHRlcmllcy4gU2lsaWNvbiBveGlkZSBjb21lcyBwcmUtcHVmZmVkLCBzbyBpdCByZWR1Y2VzIHRoZSBzdHJlc3Mgb24gdGhlIGFub2RlIGZyb20gc3dlbGxpbmcgZHVyaW5nIGNoYXJnaW5nLiBCdXQgaXQgYWxzbyBsaW1pdHMgdGhlIGFtb3VudCBvZiBsaXRoaXVtIHRoYXQgY2FuIGJlIHN0b3JlZCBpbiB0aGUgYW5vZGUuIEp1aWNpbmcgYSBiYXR0ZXJ5IHRoaXMgd2F5IGlzbuKAmXQgZW5vdWdoIHRvIHByb2R1Y2UgZG91YmxlLWRpZ2l0IHBlcmZvcm1hbmNlIGdhaW5zLCBidXQgaXTigJlzIGJldHRlciB0aGFuIG5vdGhpbmcuXHJcbi8vIDxiciAvPjxiciAvPlxyXG4vLyBDYXJ5IEhheW5lciwgY29mb3VuZGVyIGFuZCBDVE8gb2YgTmFub0dyYWYsIHRoaW5rcyBpdOKAmXMgcG9zc2libGUgdG8gZ2V0IHRoZSBiZXN0IG9mIHNpbGljb24gYW5kIGdyYXBoaXRlIHdpdGhvdXQgdGhlIGxvc3Mgb2YgZW5lcmd5IGNhcGFjaXR5IGZyb20gc2lsaWNvbiBveGlkZS4gQXQgTmFub0dyYWYsIGhlIGFuZCBoaXMgY29sbGVhZ3VlcyBhcmUgYm9vc3RpbmcgdGhlIGVuZXJneSBvZiBjYXJib24tc2lsaWNvbiBiYXR0ZXJpZXMgYnkgZW1iZWRkaW5nIHNpbGljb24gcGFydGljbGVzIGluIGdyYXBoZW5lLCBncmFwaGl0ZeKAmXMgTm9iZWwgUHJpemUtd2lubmluZyBjb3VzaW4uIFRoZWlyIGRlc2lnbiB1c2VzIGEgZ3JhcGhlbmUgbWF0cml4IHRvIGdpdmUgc2lsaWNvbiByb29tIHRvIHN3ZWxsIGFuZCB0byBwcm90ZWN0IHRoZSBhbm9kZSBmcm9tIGRhbWFnaW5nIHJlYWN0aW9ucyB3aXRoIHRoZSBlbGVjdHJvbHl0ZS4gSGF5bmVyIHNheXMgYSBncmFwaGVuZS1zaWxpY29uIGFub2RlIGNhbiBpbmNyZWFzZSB0aGUgYW1vdW50IG9mIGVuZXJneSBpbiBhIGxpdGhpdW0taW9uIGJhdHRlcnkgYnkgdXAgdG8gMzAgcGVyY2VudC48c3VwPjE8L3N1cD5cclxuLy8gICAgIDwvcD5cclxuLy8gICAgIGBcclxuLy8gICAgICB2YXIgYmxvZ2NpdGUxMCA9ICAgIGAgXHJcbi8vICAgICAgIDxwPjEuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3dlbGNvbWUtdG8tdGhlLWVyYS1vZi1zdXBlcmNoYXJnZWQtbGl0aGl1bS1zaWxpY29uLWJhdHRlcmllcy9cIj5odHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvd2VsY29tZS10by10aGUtZXJhLW9mLXN1cGVyY2hhcmdlZC1saXRoaXVtLXNpbGljb24tYmF0dGVyaWVzLzwvYT4gIDwvcD5cclxuXHJcbi8vICAgICAgIDwhLS0gPHA+Mi4gPGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIj48L2E+IDwvcD4gIC0tPiAgYDtcclxuXHJcbi8vICAgICB2YXIgYmxvZ3Bvc3Q4ID0gICAgIGA8cD5cclxuLy8gICAgIDwvcD5cclxuLy8gICAgIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuLy8gICAgIDwvcD5cclxuLy8gICAgIGBcclxuLy8gICAgICB2YXIgYmxvZ2NpdGU4ID0gICAgYCBcclxuLy8gICAgICAgPHA+MS4gPGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIj48L2E+ICA8L3A+XHJcbi8vIDxwPjIuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiPC9hPiA8L3A+ICAgIFxyXG4vLyAgIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0NyA9IGA8cD5cclxuICAgICBEZW1vY3JhdGl6YXRpb24gb2YgYWNjZXNzIHRvIHF1YW50dW0gc29mdHdhcmUgLS0gQ2xvdWQtYmFja2VkIGhhcmR3YXJlIGFuZCBvcGVuLXNvZnR3YXJlIEFQSSdzIGF2YWlsYWJsZSB0byB0aGUgcHVibGljIC0tIGhhcyBiZWVuIGJyb2FkbHkgZXhwYW5kZWQgd2l0aCBHb29nbGUgQ2xvdWQgUGxhdGZvcm0ncyBNYXJjaCA2dGggV2hpdGUgUGFwZXIsIHdoaWNoIG91dGxpbmVzIGEgcGFja2FnZSBvZiAoZGF0YSBhbmFseXNpcykgc2ltdWxhdGlvbiBoYXJkd2FyZSwgd2hpY2ggXCJjb21iaW5lcyBDaXJxLCBhbiBvcGVuIHNvdXJjZSBxdWFudHVtIGNpcmN1aXQgbGlicmFyeSwgYW5kIHRoZSA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGVuc29yZmxvdy5vcmcvcXVhbnR1bVwiIHRhcmdldD1cIl9ibGFua1wiPlRlbnNvckZsb3c8L2E+IG1hY2hpbmUgbGVhcm5pbmcgcGxhdGZvcm0uXCIgSW4gc2hvcnQsIHRoZSBjb21wbGV0ZSBwYWNrYWdlOiBcclxuICAgIDwvcD4gXHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+R29vZ2xlIHRvZGF5IGFubm91bmNlZCB0aGUgbGF1bmNoIG9mIFRlbnNvckZsb3cgUXVhbnR1bSwgYnJpbmdpbmcgdG9nZXRoZXIgbWFjaGluZSBsZWFybmluZyBhbmQgcXVhbnR1bSBjb21wdXRpbmcgaW5pdGlhdGl2ZXMgYXQgdGhlIGNvbXBhbnkuIFRoZSBmcmFtZXdvcmsgY2FuIGNvbnN0cnVjdCBxdWFudHVtIGRhdGFzZXRzLCBwcm90b3R5cGUgaHlicmlkIHF1YW50dW0gYW5kIGNsYXNzaWMgbWFjaGluZSBsZWFybmluZyBtb2RlbHMsIHN1cHBvcnQgcXVhbnR1bSBjaXJjdWl0IHNpbXVsYXRvcnMsIGFuZCB0cmFpbiBkaXNjcmltaW5hdGl2ZSBhbmQgZ2VuZXJhdGl2ZSBxdWFudHVtIG1vZGVscy5cclxuICAgIDxzdXA+MSAmbmJzcDsgMjwvc3VwPlxyXG4gICAgPC9wPlxyXG4gICAgPHA+SW4gbXkgPGEgaHJlZj1cIiMxMi0yMi0xOFwiPjEyLTIyLTE4IGJsb2cgcG9zdCwgUXVhbnR1bSBDb21wdXRpbmc8L2E+LCBJIHdyb3RlIG9uIElCTSdzIHBpb25lZXJpbmcgZWZmb3J0cyB0byBwcm92aWRlIHB1YmxpYyBhY2Nlc3MgdG8gcXVhbnR1bSBoYXJkd2FyZSBmb3IgbGltaXRlZCB1c2UuIElCTSdzIDxlbT5RIEV4cGVyaWVuY2U8L2VtPiB3YXMgdGhlIGZpcnN0IHRvIHByb3ZpZGUgbGFyZ2Utc2NhbGUgYXBwbGljYXRpb25zIGZvciBwdWJsaWMgY29uc3VtcHRpb24sIGJ1dCB0aG9zZSB3ZXJlIHRlc3QgcmlkZXMgYXJvdW5kIGEgdHJhY2sgd2hpbGUgR29vZ2xlIGhlcmUgaXMgb2ZmZXJpbmcgdGhlIHRyYWNrLCB0aGUgcGl0IGNyZXcgYW5kIHVubGltaXRlZCBzdXBwbHkgb2YgcmFjaW5nIGNhcnMgdG8gd29yayB3aXRoIGFuZCBpbnZlbnQgd2l0aCwgZnJvbSB1bmRlciB0aGUgaG9vZCB0byBldmVyeSB0b29sIGluIHRoZSBzaG9wLiBcclxuICAgIDxiciAvPjxiciAvPlxyXG5Gcm9tIHRoZSBXaGl0ZSBQYXBlcjpcclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuV2UgaW50cm9kdWNlIFRlbnNvckZsb3cgUXVhbnR1bSAoVEZRKSwgYW4gb3BlbiBzb3VyY2UgbGlicmFyeSBmb3IgdGhlIHJhcGlkIHByb3RvdHlwaW5nIG9mIGh5YnJpZCBxdWFudHVtLWNsYXNzaWNhbCBtb2RlbHMgZm9yIGNsYXNzaWNhbCBvciBxdWFudHVtIGRhdGEuIFRoaXMgZnJhbWV3b3JrIG9mZmVycyBoaWdoLWxldmVsIGFic3RyYWN0aW9ucyBmb3IgdGhlIGRlc2lnbiBhbmQgdHJhaW5pbmcgb2YgYm90aCBkaXNjcmltaW5hdGl2ZSBhbmQgZ2VuZXJhdGl2ZSBxdWFudHVtIG1vZGVscyB1bmRlciBUZW5zb3JGbG93IGFuZCBzdXBwb3J0cyBoaWdoLXBlcmZvcm1hbmNlIHF1YW50dW0gY2lyY3VpdCBzaW11bGF0b3JzLiBXZSBwcm92aWRlIGFuIG92ZXJ2aWV3IG9mIHRoZSBzb2Z0d2FyZSBhcmNoaXRlY3R1cmUgYW5kIGJ1aWxkaW5nIGJsb2NrcyB0aHJvdWdoIHNldmVyYWwgZXhhbXBsZXMgYW5kIHJldmlldyB0aGUgdGhlb3J5IG9mIGh5YnJpZCBxdWFudHVtLWNsYXNzaWNhbCBuZXVyYWwgbmV0d29ya3MuIFdlIGlsbHVzdHJhdGUgVEZRIGZ1bmN0aW9uYWxpdGllcyB2aWEgc2V2ZXJhbCBiYXNpYyBhcHBsaWNhdGlvbnMgaW5jbHVkaW5nIHN1cGVydmlzZWQgbGVhcm5pbmcgZm9yIHF1YW50dW0gY2xhc3NpZmljYXRpb24sIHF1YW50dW0gY29udHJvbCwgYW5kIHF1YW50dW0gYXBwcm94aW1hdGUgb3B0aW1pemF0aW9uLiBNb3Jlb3Zlciwgd2UgZGVtb25zdHJhdGUgaG93IG9uZSBjYW4gYXBwbHkgVEZRIHRvIHRhY2tsZSBhZHZhbmNlZCBxdWFudHVtIGxlYXJuaW5nIHRhc2tzIGluY2x1ZGluZyBtZXRhLWxlYXJuaW5nLCBIYW1pbHRvbmlhbiBsZWFybmluZywgYW5kIHNhbXBsaW5nIHRoZXJtYWwgc3RhdGVzLiBXZSBob3BlIHRoaXMgZnJhbWV3b3JrIHByb3ZpZGVzIHRoZSBuZWNlc3NhcnkgdG9vbHMgZm9yIHRoZSBxdWFudHVtIGNvbXB1dGluZyBhbmQgbWFjaGluZSBsZWFybmluZyByZXNlYXJjaCBjb21tdW5pdGllcyB0byBleHBsb3JlIG1vZGVscyBvZiBib3RoIG5hdHVyYWwgYW5kIGFydGlmaWNpYWwgcXVhbnR1bSBzeXN0ZW1zLCBhbmQgdWx0aW1hdGVseSBkaXNjb3ZlciBuZXcgcXVhbnR1bSBhbGdvcml0aG1zIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IHlpZWxkIGEgcXVhbnR1bSBhZHZhbnRhZ2UuXHJcbiAgICA8c3VwPjM8L3N1cD5cclxuPC9wPiBcclxuICAgYDtcclxuICAgIHZhciBibG9nY2l0ZTcgPSAgICBgICBcclxuICAgIDxwPjEuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAyMC8wMy8wOS9nb29nbGUtbGF1bmNoZXMtdGVuc29yZmxvdy1xdWFudHVtLWEtbWFjaGluZS1sZWFybmluZy1mcmFtZXdvcmstZm9yLXRyYWluaW5nLXF1YW50dW0tbW9kZWxzL1wiPmh0dHBzOi8vdmVudHVyZWJlYXQuY29tLzIwMjAvMDMvMDkvZ29vZ2xlLWxhdW5jaGVzLXRlbnNvcmZsb3ctcXVhbnR1bS1hLW1hY2hpbmUtbGVhcm5pbmctZnJhbWV3b3JrLWZvci10cmFpbmluZy1xdWFudHVtLW1vZGVscy88L2E+IFxyXG48L3A+XHJcbjxwPjIuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9haS5nb29nbGVibG9nLmNvbS8yMDIwLzAzL2Fubm91bmNpbmctdGVuc29yZmxvdy1xdWFudHVtLW9wZW4uaHRtbFwiPmh0dHBzOi8vYWkuZ29vZ2xlYmxvZy5jb20vMjAyMC8wMy9hbm5vdW5jaW5nLXRlbnNvcmZsb3ctcXVhbnR1bS1vcGVuLmh0bWw8L2E+IDwvcD4gIFxyXG48cD4zLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYXJ4aXYub3JnL2Ficy8yMDAzLjAyOTg5XCI+TWFyY2ggNnRoLCAyMDIwIEdvb2dsZSBXaGl0ZSBQYXBlcjwvYT4gXHJcbjwvcD4gIFxyXG5cclxuICBgO1xyXG5cclxuICAgIHZhciBibG9ncG9zdDQgPSBgPHA+XHJcbiAgICBBdCBhIHRpbWUgd2hlbiB0aGUgbmF0aW9uYWwgbGluZXMgYmx1ciBiZXR3ZWVuIG11bHRpLW5hdGlvbmFsIGNvcnBvcmF0aW9ucywgYW5kIGFuIGludGVyZGVwZW5kZW50IGdsb2JhbCB0ZWNoIGNvbW11bml0eSwgdGhlIDIxc3QgY2VudHVyeSBzcGFjZSByYWNlIGlzIG5vbmV0aGVsZXNzIHdlbGwtZGVmaW5lZCAtLSBob3dldmVyIGRlZmluZWQgYWxvbmcgdGhlIGxpbmVzIG9mIHN1Yi1hdG9taWMgaW5uZXItc3BhY2UuIFxyXG4gICAgPC9wPlxyXG4gICAgICAgPGltZyBzcmM9XCJkaXN0L2ltZy9xLWNoYW5kZWxpZXIuanBnXCIgd2lkdGg9XCI0MDBcIiAgY2xhc3M9XCJ6b29tXCIgLz5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICAgIEJ1dCBqdXN0IGFzIHRoZSBTb3ZpZXQgVW5pb24gd2FzIHRoZSBmaXJzdCB0byBwdXQgYm90aCBhIHNhdGVsbGl0ZSBhbmQgYSBodW1hbiBiZWluZyBpbnRvIG9yYml0LCBiZWZvcmUgZ29pbmcgb24gdG8gbG9zZSB0aGUgc3BhY2UgcmFjZSwgQ2hpbmEgTWFyY2ggYmUgcG9pc2VkIHRvIG91dHN0cmlwIGFueSBBbWVyaWNhbiBhY2hpZXZlbWVudHMgaW4gYSBzcGVjaWZpYyBmaWVsZCBvZiBxdWFudHVtIHRlY2hub2xvZ3kg4oCUIGNvbW11bmljYXRpb24uPHN1cD4xPC9zdXA+XHJcbiAgICA8L3A+XHJcbiAgICA8cD5cclxuICAgIEJ1dCB0aGUgZ29hbHMgYXJlIGxlc3MgYWJzdHJhY3QgdGhhbiBzZW5kaW5nIGEgdHJhdmVsZXIgdG8gc3BhY2U7IHRoZXkgZGVmaW5lIGhvdyBuYXRpb25hbCBzZWNyZXRzIGNhbiBiZSBzZWN1cmVseSBzdG9yZWQsIGFjY2Vzc2VkIGFuZCBjb21tdW5pY2F0ZWQ6IDwvcD5cclxuXHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+V2l0aCBNaWNpdXMsIENoaW5lc2UgcmVzZWFyY2hlcnMgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgZGlmZmVyZW50IHR5cGUgb2YgcXVhbnR1bSB0ZWNobm9sb2d5IHRvIGRldmVsb3AgbmV3IGZvcm1zIG9mIHNlY3VyZSBjb21tdW5pY2F0aW9ucyB0aGF0IHdvdWxkIGJlIHVuYnJlYWthYmxlLiBNaWNpdXMgaXMgYmVpbmcgdXNlZCB0byBzaGFyZSBjcnlwdG9ncmFwaHkga2V5cywgd2hpY2ggYXJlIHVzZWQgdG8gZW5jb2RlIGFuZCBkZWNvZGUgc2VjdXJlIGNvbW11bmljYXRpb25zLlxyXG48YnIgLz48YnIgLz5cclxuT3JkaW5hcmlseSwgdGhlc2Uga2V5cyBhcmUgdnVsbmVyYWJsZSB0byBpbnRlcmNlcHRpb24sIGJ1dCBNaWNpdXMgdXNlcyBwaG90b25zIGluIGEgcXVhbnR1bS1zdXBlcnBvc2l0aW9uIHN0YXRlIOKAkyBpdOKAmXMgaW1wb3NzaWJsZSB0byByZWFkIHRoZW0gd2l0aG91dCBjaGFuZ2luZyB3aGF0IHRoZXkgc2F5LCBzbyB5b3UgY2Fu4oCZdCBjb3B5IG9yIGludGVyY2VwdCBhIGtleSBzZW50IGluIHRoaXMgbWFubmVyLjxzdXA+Mjwvc3VwPlxyXG48L3A+IFxyXG4gICBgO1xyXG4gICAgdmFyIGJsb2djaXRlNCA9ICAgIGAgIFxyXG4gICAgPHA+MS4gPGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5jbm4uY29tLzIwMTkvMTAvMjQvdGVjaC9jaGluYS1xdWFudHVtLWNvbXB1dGluZy1pbnRsLWhuay9pbmRleC5odG1sXCI+aHR0cHM6Ly93d3cuY25uLmNvbS8yMDE5LzEwLzI0L3RlY2gvY2hpbmEtcXVhbnR1bS1jb21wdXRpbmctaW50bC1obmsvaW5kZXguaHRtbDwvYT4gXHJcbjwvcD4gXHJcbjxwPjIuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY28udWsvYXJ0aWNsZS9xdWFudHVtLWNvbXB1dGluZy1jaGluYS11c1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvLnVrL2FydGljbGUvcXVhbnR1bS1jb21wdXRpbmctY2hpbmEtdXM8L2E+IFxyXG48L3A+ICBcclxuXHJcbjxwPjMuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGVjaG5vbG9neXJldmlldy5jb20vcy82MTUxODAvcXVhbnR1bS1jb21wdXRlci1yYWNlLWlibS1nb29nbGUvXCI+aHR0cHM6Ly93d3cudGVjaG5vbG9neXJldmlldy5jb20vcy82MTUxODAvcXVhbnR1bS1jb21wdXRlci1yYWNlLWlibS1nb29nbGUvPC9hPiBcclxuPC9wPiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QzID0gYFxyXG5cclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkRhdGEgLS0gZnJvbSB0aGUgd2FyZWhvdXNpbmcgdG8gdGhlIGFjY2Vzc2luZyBhbmQgc2VjdXJpbmcsIGFsbCB0aGUgd2hpbGUgY29tcGx5aW5nIHdpdGggZGF0YSBwcml2YWN5IHJlZ3VsYXRpb25zLCBoYXMgYmVlbiBhIHBpZWNlbWVhbCwgbXVsdGktZmFjZXRlZCBjaGFsbGVuZ2U6IGEgcmFjZSBhZ2FpbnN0IHRoZSBjbG9jaywgYWdhaW5zdCBvdGhlcnMnIHJhY2UgYWdhaW5zdCB0aGUgY2xvY2ssIGFuZCBvZiBjb3Vyc2UgdGhlIGNoYW5naW5nIGR5bmFtaWNzIG9mIHRoZSBjbG9jayBpdHNlbGYuIElmIHRoaXMgc291bmRzIGxpa2UgYW4gaW1wb3NzaWJsbHkgcmlnZ2VkIGdhbWUsIGl0IGlzLCBiZWNhdXNlIHRoZSBnb2FsIHBvc3RzIGJlbmQgZm9yIHRoZSBiZXN0IHRlY2hub2xvZ2llcyBhdmFpbGVkIGJ5IHdob20uIDwvcD5cclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL3Etc3VwZXJwb3NpdGlvbi5qcGdcIiB3aWR0aD1cIjQwMFwiICBjbGFzcz1cInpvb21cIiAvPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+IENvdW50cmllcyBhcm91bmQgdGhlIHdvcmxkIGFyZSBpbnZlc3RpbmcgYmlsbGlvbnMgaW50byBxdWFudHVtIGNvbXB1dGluZyByZXNlYXJjaC4gTWFpbmx5LCBpdOKAmXMgYmVjYXVzZSBpdCBoYXMgYXBwbGljYXRpb25zIGluIGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlLiBTZWN1cml0eSBhbmQgdGhlIHNlYXJjaCBmb3IgdW5icmVha2FibGUgZW5jcnlwdGlvbiBpbiBBSS1lbmFibGVkIGFwcGxpY2F0aW9ucyB0aGF0IGhvdXNlIHBlcnNvbmFsLCBidXNpbmVzcywgYW5kIGdvdmVybm1lbnQgZGF0YSBhcmUgcHJvbXB0aW5nIHRoZSBpbnZlc3RtZW50IGludG8gdGhpcyBuZXcgcmVzZWFyY2ggYXJlYS48c3VwPjE8L3N1cD5cclxuPC9wPiBcclxuXHJcbjxwPlRoZSByb2FkYmxvY2tzIGZvciBtYWNoaW5lIGxlYXJuaW5nIGFyZSBjbGVhcjogY29tcHV0aW5nIHBvd2VyIGZvciBtb2Rlcm4gdGVjaG5pcXVlcyBhcmUgbm90IHN1c3RhaW5hYmxlIGluIHRlcm1zIG9mIGluc3VmZmljaWVudCBtZW1vcnkgYW5kIGNvbXB1dGluZyBwb3dlciwgaGVuY2UgdGhlIGN1cnJlbnQgXCJBLkkuIFdpbnRlclwiLiBJbiBteSA8YSBocmVmPVwiIzA3LTA1LTE4XCI+SnVseSA1dGggMjAxOCBwb3N0LCA8ZW0+R29kZmF0aGVycyBvZiBBLkkuPC9lbT48L2E+IEkgb3V0bGluZSB0aGUgcGVyaW9kcyB0aGF0IHRlY2huaWNhbCBsaW1pdGF0aW9ucyByZWR1Y2UgcHJvZ3Jlc3MgYW5kIGludGVyZXN0IGluIEEuSS4gYXBwbGljaWJpbGl0eS4gSW4gcHJlbGltaW5hcnkgYWR2YW5jZXMsIHNpbmdsZS1sYXllcmVkIGFsZ29yaXRobXMgKHRoaW5rIG9mIG9uZSBzZXQgb2YgdmFyaWFibGVzIHRoYXQgZHJpdmUgcHJlZGljdGlvbikgYW5kIGxhdGVyIGl0ZXJhdGlvbnMgdGhhdCBpbnZvbHZlIG11bHRpcGxlLWxheWVycyB0aGF0IGV4cG9uZW50aWFsbHkgaW5jcmVhc2UgY29tcHV0aW5nIG5lZWRzOiBcclxuPC9wPlxyXG5cclxuXHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+UHJvZ3JhbXMgdGhhdCBwZXJmb3JtZWQgd2VsbCBpbiB0aGUgbGFib3JhdG9yeSB3ZXJlIHVzZWxlc3MgaW4gZXZlcnlkYXkgc2l0dWF0aW9uczsgYSBzaW1wbGUgYWN0IGxpa2UgcGlja2luZyB1cCBhIGJhbGwgdHVybmVkIG91dCB0byByZXF1aXJlIGFuIG92ZXJ3aGVsbWluZyBudW1iZXIgb2YgY29tcHV0YXRpb25zLiBUaGUgcmVzZWFyY2ggZmVsbCBpbnRvIHRoZSBmaXJzdCBvZiBzZXZlcmFsIOKAnEEuSS4gd2ludGVycy7igJ0gQXMgQm9zdHJvbSBub3RlcyBpbiBoaXMgYm9vaywg4oCcQW1vbmcgYWNhZGVtaWNzIGFuZCB0aGVpciBmdW5kZXJzLCDigJhBLkku4oCZIGJlY2FtZSBhbiB1bndhbnRlZCBlcGl0aGV0LuKAnTxzdXA+Mjwvc3VwPjwvcD5cclxuPHA+U28sIHRoZW4sIHdoYXQgaXMgYXQgc3Rha2Ugd2l0aCB0aGUgcG90ZW50aWFsIG9mIHF1YW50dW0tYmFzZWQgY29tcHV0YXRpb25zPyBFdmVyeXRoaW5nLCBiZWNhdXNlIGFsbCB0aGUgY3VycmVudCBtYWNoaW5lIGxlYXJuaW5nIHJvYWRibG9ja3MgYXJlIGZsYXR0ZW5lZDogPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlF1YW50dW0gQ29tcHV0aW5nIGFsc28gaGFzIHRoZSBwb3RlbnRpYWwgdG8gYWxsb3cgQUkgdG8gb3B0aW1pemUgaXRzIHByb2Nlc3NpbmcgdG8gc3VjaCBhIGRlZ3JlZSB0aGF0IGNvbXBsZXggY2FsY3VsYXRpb25zIG5lZWRlZCB0byBhY2hpZXZlIGFydGlmaWNpYWwgZ2VuZXJhbCBpbnRlbGxpZ2VuY2UgY2FuIGJlIGNhcnJpZWQgb3V0IGluIHJlY29yZCB0aW1lLjxzdXA+MTwvc3VwPlxyXG48L3A+XHJcblxyXG48cD5UaGlzIHRpbWUgaXQncyBtb3JlIHRoYW4gYSByb2xsIG9mIHRoZSBkaWUgYW5kIGEgZmV3IGdvb2QgaGlyZXMuIFRvIHRoZSB3aW5uZXIgZ28gdGhlIHNwb2lscywgdGhlIGxvc2VycyB3b3JrIGZvciB0aGUgd2lubmVycywgYW5kIGZpbmFsbHksIG5vdCBldmVuIHRpbWUgc3BlbnQgY2FuIHByZWRpY3QgdGhlIHdpbm5lcnMhPC9wPlxyXG48YnIgLz5cclxuYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUzID0gYFxyXG4gICAgIFxyXG48cD4xLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vdG93YXJkc2RhdGFzY2llbmNlLmNvbS9pcy1xdWFudHVtLWNvbXB1dGluZy1hLWRyZWFtLWZkNzM4NWIxZGI1NlwiPmh0dHBzOi8vdG93YXJkc2RhdGFzY2llbmNlLmNvbS9pcy1xdWFudHVtLWNvbXB1dGluZy1hLWRyZWFtLWZkNzM4NWIxZGI1NjwvYT4gXHJcbjwvcD4gIFxyXG48cD4yLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly9mb3J0dW5lLmNvbS9sb25nZm9ybS9lbGVtZW50LWFpLXN0YXJ0dXAtdGVjaC9cIj5odHRwOi8vZm9ydHVuZS5jb20vbG9uZ2Zvcm0vZWxlbWVudC1haS1zdGFydHVwLXRlY2gvPC9hPiBcclxuPC9wPiBcclxuYDtcclxuXHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MiA9IGBcclxuXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Hb25lIGFyZSB0aGUgZGF5cyB3aGVuIHRoZSBiZXN0IGFuZCB0aGUgYnJpZ2h0ZXN0IHRvb2sgaG9tZSB0aGUgaG9ub3JzIGFuZCBsYXVyZWxzLiBUb2RheSwgYW4gb2JzdWNyZSBkYXJrbmVzcyBydWxlcyBvdmVyIHZpc2liaWxpdHkgaW50byB0aGUgYWR2YW5jZXMgdGhhdCBkb24ndCBhcmlzZSBmcm9tIG9idmlvdXMgbHVjay4gSW5zdGVhZCwgbmV0d29ya3Mgb2YgdGVjaCBhZHZhbmNlcywgc29tZSBzdG9sZW4sIHNvbWUgc3BpbGxlZCBhbmQgc29tZSBzdXJtaXNlZCBmcm9tIG5vdGhpbmcgZm9ybSB0aGUgbmV3IHNwYWNlIHJhY2U6IFRoZSByb2NrZXQgaGVhZCBmb3JtcyB0aGUgYWxnb3JpdGhtIGFuZCB0aGUgZXhwZW5kaWJsZSBkYXRhIGZvcm0gdGhlIHNvbGlkIHJvY2tldCBib29zdGVycy4gUGVyaW9kLiBcclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBXZSBuZWVkIHF1YW50dW0tcmVzaXN0YW50IGFsZ29yaXRobXMgYXMgc29vbiBhcyBwb3NzaWJsZSzigJ0gR3JvYm1hbiBzYWlkLiBcclxuQ2xvdWQgY29tcHV0aW5nIGlzIHN3ZWVwaW5nIHRocm91Z2ggdGhlIGluZHVzdHJ5LCBhbmQgaXQgd2lsbCBlbmFibGUgdGhlIHVzZSBvZiBxdWFudHVtIGNvbXB1dGluZy4gQW5kIHRoYXTigJlzIGEgcHJvYmxlbSwgYXMgcXVhbnR1bSBjb21wdXRlcnMgbWF5IGJlIGFibGUgdG8gYnJlYWsgZW5jcnlwdGlvbiB0ZWNobmlxdWVzIHN1Y2ggYXMgUlNBIGVuY3J5cHRpb24gbXVjaCBmYXN0ZXIgdGhhbiB0cmFkaXRpb25hbCBjb21wdXRlcnMgY2FuLiBUeXBpY2FsbHksIGVuY3J5cHRpb24gdGVjaG5pcXVlcyBtYWtlIGl0IGVhc3kgdG8gZW5jb2RlIGRhdGEgYnV0IGh1Z2VseSBkaWZmaWN1bHQgdG8gZGVjb2RlIGl0IHdpdGhvdXQgdGhlIHVzZSBvZiBhIHNwZWNpYWwga2V5LiBUaGUgc2VjdXJpdHkgaXMgcG9zc2libGUgb25seSBiZWNhdXNlIG9mIHRoZSBodWdlIGFtb3VudCBvZiB0aW1lIGl0IHRha2VzIGZvciBhIGNsYXNzaWNhbCBjb21wdXRlciB0byBkbyB0aGUgY29tcHV0YXRpb25zLiA8c3VwPjE8L3N1cD48L3A+ICBcclxuXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUyID0gYFxyXG48cD4xLiA8YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vdmVudHVyZWJlYXQuY29tLzIwMjAvMDIvMjUvbWNhZmVlLXN0YXJ0LXByb3RlY3RpbmctYWdhaW5zdC1xdWFudHVtLWNvbXB1dGluZy1oYWNrcy1ub3cvXCI+aHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAyMC8wMi8yNS9tY2FmZWUtc3RhcnQtcHJvdGVjdGluZy1hZ2FpbnN0LXF1YW50dW0tY29tcHV0aW5nLWhhY2tzLW5vdy88L2E+IFxyXG48L3A+ICBcclxuYDtcclxuXHJcbiAgXHJcblxyXG4gICAgdmFyIHVybCA9IFtcclxuICAgICAgICAvLyAgIHtcclxuICAgICAgICAvLyAgICAgaWQ6ICcxMScsXHJcbiAgICAgICAgLy8gICAgIGRpZDogJzIwLTAzLTE3JyxcclxuICAgICAgICAvLyAgICAgZGF0ZTogJ01hcmNoIDE3LCAyMDIwICcsXHJcbiAgICAgICAgLy8gICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgLy8gICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAvLyAgICAgdGl0bGU6ICdHcmFwaGVuZSBSZWxpZWY6IEJhdHRlcmllc1xcJyBEZW1hbmQnLFxyXG4gICAgICAgIC8vICAgICBwb3N0OiBibG9ncG9zdDExLFxyXG4gICAgICAgIC8vICAgICBjaXRlOiBibG9nY2l0ZTExXHJcbiAgICAgICAgLy8gfSxcclxuICAgICAgICAvLyAgIHtcclxuICAgICAgICAvLyAgICAgaWQ6ICcxMCcsXHJcbiAgICAgICAgLy8gICAgIGRpZDogJzIwLTAzLTE2JyxcclxuICAgICAgICAvLyAgICAgZGF0ZTogJ01hcmNoIDE2LCAyMDIwICcsXHJcbiAgICAgICAgLy8gICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgLy8gICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAvLyAgICAgdGl0bGU6ICdHcmFwaGVuZSBSZWxpZWY6IEJhdHRlcmllc1xcJyBDb250ZXh0JyxcclxuICAgICAgICAvLyAgICAgcG9zdDogYmxvZ3Bvc3QxMCxcclxuICAgICAgICAvLyAgICAgY2l0ZTogYmxvZ2NpdGUxMFxyXG4gICAgICAgIC8vIH0sXHJcbiAgICAgICAgLy8gICB7XHJcbiAgICAgICAgLy8gICAgIGlkOiAnOCcsXHJcbiAgICAgICAgLy8gICAgIGRpZDogJzIwLTAzLTE0JyxcclxuICAgICAgICAvLyAgICAgZGF0ZTogJ01hcmNoIDE0LTE1LCAyMDIwPGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgICAgLy8gICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgLy8gICAgIGNhdDM6ICcgJyxcclxuICAgICAgICAvLyAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgICAvLyAgICAgcG9zdDogYmxvZ3Bvc3Q4LFxyXG4gICAgICAgIC8vICAgICBjaXRlOiBibG9nY2l0ZThcclxuICAgICAgICAvLyB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICc3JyxcclxuICAgICAgICAgICAgZGlkOiAnMjAtMDMtMDknLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWFyY2ggOSwgMjAyMCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdNb3ZpbmcgeW91ciBRdWFudHVtIERyZWFtcyBpbnRvIFRvZGF5LCBQYXJ0IFY6IDxiciAvPlF1YW50dW0gRGF0YSBpbiB0aGUgQ2xvdWQnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDcsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlN1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICc0JyxcclxuICAgICAgICAgICAgZGlkOiAnMjAtMDMtMDUnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWFyY2ggNSwgMjAyMCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdNb3ZpbmcgeW91ciBRdWFudHVtIERyZWFtcyBpbnRvIFRvZGF5LCBQYXJ0IElJSTogPGJyIC8+VGhlIE5hdGlvbmFsaXNtIG9mIFF1YW50dW0gRGF0YSBhbmQgUHJpdmFjeScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0NCxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGU0XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMycsXHJcbiAgICAgICAgICAgIGRpZDogJzIwLTAzLTA0JyxcclxuICAgICAgICAgICAgZGF0ZTogJ01hcmNoIDQsIDIwMjAgJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ1F1YW50dW0gRGF0YScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnTW92aW5nIHlvdXIgUXVhbnR1bSBEcmVhbXMgaW50byBUb2RheSwgUGFydCBJSTo8YnIgLz5UaGUgQnVzaW5lc3Mgb2YgUXVhbnR1bSBEYXRhIGFuZCBQcml2YWN5JyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QzLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTNcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcyJyxcclxuICAgICAgICAgICAgZGlkOiAnMjAtMDMtMDMnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWFyY2ggMywgMjAyMCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvZGF5JyxcclxuICAgICAgICAgICAgdGl0bGU6ICdNb3ZpbmcgeW91ciBRdWFudHVtIERyZWFtcyBpbnRvIFRvZGF5LCBQYXJ0IEk6IDxiciAvPiBUaGUgVGltaW5nIG9mIFF1YW50dW0gRGF0YSBhbmQgUHJpdmFjeScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MixcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGUyXHJcbiAgICAgICAgfSBcclxuICAgIF07XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjYXQgPSBgIFxyXG5cdCAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcblx0ICA8aHIgLz4gIFxyXG5cdCAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG5cdCAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuXHQgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuXHQgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcblx0ICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuXHQgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG5cdCAgPGJyIC8+XHJcblx0ICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHQgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLmNpdGV9PC9kaXY+XHJcblx0ICA8L2Rpdj5gXHJcblxyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLU1hcmNoMjBcIikuaW5uZXJIVE1MICs9IGNhdDtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY2F0TW9kID0gYFxyXG5cdCAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1fbW9kXCIgY2xhc3M9XCJibG9nRGl2TW9kXCI+IFxyXG5cdCAgPGhyIC8+ICBcclxuXHQgIDxhIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG5cdCAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuXHQgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcblx0ICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG5cdCAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcblx0ICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuXHQgIDxiciAvPlxyXG4gICAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9PC9kaXY+XHJcbiAgICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0uY2l0ZX08L2Rpdj5cclxuICAgICAgXHJcblxyXG5cdCAgPC9kaXY+YDtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtTWFyY2gyMC1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnYmxvZ2dlci1NYXJjaC0yMCcpO1xyXG4gICAgY29uc29sZS5sb2codXJsKTtcclxuICAgIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5cclxuYmxvZ2dlck1hcmNoMjAoKTsiLCIgXHJcbnZhciBibG9nZ2VyQXByID0gZnVuY3Rpb24gKCkgeyBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MjMgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkZpdGJpdCBhbmQgV2VhcmFibGVzJyBDb250cmlidXRpb24gdG8gSGVhbHRoIGluIFNvY2lldHkgaXMgY2xlYXI8c3VwPjE8L3N1cD4sIHlldCBtdWNoIG9mIHRoZSBjcmVkaXQgaXMgZHVlIHRvIGluY3JlYXNlZCBzb2NpYWwsIGFjdGl2aXR5LWJhc2VkIG5ldHdvcmtzLiAgQW5kLCBuZXcgZmVhdHVyZXMgYW5kIGJlbmVmaXRzIGRlcGVuZCBvbiByZWxheGVkIGRhdGEgcHJpdmFjeS4gR2l2ZW4gbXkgPGEgaHJlZj1cIiMxOC0wNC0xMVwiPkFwcmlsIDExdGggcG9zdDwvYT4gb24gdGhlIHVwY29taW5nIGRhdGEgcHJpdmFjeSBjaGFuZ2VzIDxpPmluIHJlc3BvbnNlIHRvIGJvdGggQ2FtYnJpZGdlIEFuYWx5dGljYSBzY2FuZGFsIDxzdHJvbmc+YW5kPC9zdHJvbmc+IEUuVS4ncyBsb25nLXBsYW5uZWQgRGF0YSBQcml2YWN5IHJlZ3VsYXRpb25zLjwvaT48L3A+XHJcbiAgXHJcbiAgPHA+U28sIG5vdyBpcyB0aGUgd29yc3QgdGltZSB0byBjbGFtcCBkb3duIG9uIGFwcCBwZXJtaXNzaW9ucywgPGk+ZXNwZWNpYWxseSBhcyBTbWFydCBXYXRjaGVzIGJlZ2luIHRvIGZpbmFsbHkgbWFrZSBpbi1yb2FkczwvaT4gc29jaWFsbHkgYW5kIGhhcmR3YXJlLXdpc2UuICBGaXRiaXQncyBhY3F1aXJlbWVudCBvZiBQZWJibGUgV2F0Y2ggZXhlbXBsaWZpZXMgdGhlICByZWNlbnQgdGVjaG5vbG9naWNhbCBoYXJkLXdhcmUgbGVhcC1mcm9nZ2luZy4gIEFsbCBpbiBhbGwsIHdlIGNhbid0IHRydWx5IGhhdmUgYSBzb2NpYWxseS1jb25uZWN0ZWQgc29jaWV0eSB3aXRob3V0IGZsZXhpYmxlIGFwcCBwZXJtaXNzaW9ucywgc28gbGV0J3MgaG9wZSBmb3IgZmFpciBhbmQgZmxleGlibGUgZGF0YSByZWd1bGF0aW9ucyAuLi4gIFxyXG4gIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInNpZGVcIj4oU2lkZSBOb3RlOiBGaXRiaXQncyBGYXNoaW9uIFdlYXJhYmxlcycgdHJhZGUtb2ZmcyBiZXR3ZWVlbiB0aGUgbGlnaHRlci13ZWlnaHQgbW9kZWxzIHZlcnN1cyBmdW5jdGlvbmFsIHRvdWNoLXNjcmVlbi4gVGhpcyBibG9ncG9zdCBib3dzIGluIHJldmVyZW5jZSB0byB0aGUgQXBwbGUgV2F0Y2gsPHN1cD4xPC9zdXA+IHdob3NlIFNlcmllcyAzIGhhcmRseSBoYXMgY29tcGV0aXRvcnMuIEkgcGVyc29uYWxseSByZW9tbWVuZCB0aGUgRml0Yml0IElvbmljOiBBZnRlciB0aHJlZSB3ZWVrcywgSSdsbCBzYXkgdGhlIHRvdWNoIGFjY3VyYWN5IGlzIHJpZ2h0IG9uLCB0aGUgZ3JhcGhpY3MgYXJlIHJlYWxseSBnb29kLCBhbmQgZmluYWxseSBhIGNvbXBsZXRlbHkgY3VzdG9taXphYmxlIFwiZGFzaGJvYXJkXCIgd2l0aCB0aGF0IHN0YXRzIHlvdSB3YW50LiBJdCdzIGRyYXctYmFja3MgYXJlIG1pbm9yLCBldmVyeSBvbmNlIGluIGEgd2hpbGUgdGhlIHdhdGNoIGVudGVycyBhIFwic2xlZXBcIiBtb2RlIGxlYWRpbmcgdG8gYSBmZXctc2Vjb25kIGRlbGF5IGZvciB0aGUgc2NyZWVuIHRvIHBvd2VyIHVwLik8L3A+XHJcbiAgPHAgY2xhc3M9XCIgICBjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vdGVjaGNydW5jaC5jb20vMjAxOC8wMi8xMy9maXRiaXQtYnV5cy10d2luZS1oZWFsdGgtaW4tYmlkLXRvLWJlY29tZS1hLW1vcmUtc2VyaW91cy1oZWFsdGgtY2FyZS10b29sL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vdGVjaGNydW5jaC5jb20vMjAxOC8wMi8xMy9maXRiaXQtYnV5cy10d2luZS1oZWFsdGgtaW4tYmlkLXRvLWJlY29tZS1hLW1vcmUtc2VyaW91cy1oZWFsdGgtY2FyZS10b29sLzwvYT48L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+PGEgaHJlZj1cImh0dHBzOi8vd3d3LmFwcGxlLmNvbS9hcHBsZS13YXRjaC1zZXJpZXMtMy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5hcHBsZS5jb20vYXBwbGUtd2F0Y2gtc2VyaWVzLTMvPC9hPjwvcD4gYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MjIgPSBgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiID5BbGwgb3ZlciwgdGhlIG5ldyA8aT5UZXJtcyAmYW1wOyBDb25kaXRpb25zIGluIEZpbmUocikgUHJpbnQ8L2k+IGFyZSBhbGVydGluZyBzb2NpYWwgbWVkaWEgdXNlcnMgdG8gbmV3IGNvbXBsaWFuY2UgdG8gLi4uIG5ldyBsYXdzPyBJIHdyb3RlIGluIG15IDxhIGhyZWY9XCIjMTgtMDQtMTZcIj5BcHJpbCAxNnRoIHBvc3Q8L2E+IGFib3V0IHRoZSB1cGNvbWluZyBFLlUuIEdlbmVyYWwgRGF0YSBQcml2YWN5IFJlZ3VsYXRpb25zLCB0byB3aGljaCBtb3N0IG9mIHNvY2lhbCBtZWRpYSBpcyB1bmFiYXNoZWRseSBmb2xsb3dpbmcuIFRoZSBjbGltYXRlIGRvZXNuJ3QgaHVydCwgYnV0IGhvdyB3aWxsIG91ciBzb2NpYWwtbWVkaWEgZXhwZXJpZW5jZXMgYmUgd2F0ZXJlZCBkb3duPyAgPC9wPlxyXG4gIDxwPkxldCdzIHNlZSB3aGF0IFR3aXR0ZXIgaXMgdGVsbGluZyB1czo8P3A+PHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIFxyXG4gIEFzIHBhcnQgb2Ygb3VyIG9uZ29pbmcgY29tbWl0bWVudCB0byB0cmFuc3BhcmVuY3ksIGFuZCBpbiBwcmVwYXJhdGlvbiBmb3IgbmV3IGRhdGEgcHJvdGVjdGlvbiBsYXdzIHRoYXQgdGFrZSBlZmZlY3QgbmV4dCBtb250aCwgd2XigJlyZSB1cGRhdGluZyBvdXIgVGVybXMgb2YgU2VydmljZSBhbmQgUHJpdmFjeSBQb2xpY3kgdG8gZW1wb3dlciB5b3UgdG8gbWFrZSB0aGUgYmVzdCBkZWNpc2lvbnMgYWJvdXQgdGhlIGluZm9ybWF0aW9uIHRoYXQgeW91IHNoYXJlIHdpdGggdXMuIDxiciAvPlxyXG4gIDxiciAvPlRoZXNlIHVwZGF0ZXMgd2lsbCB0YWtlIGVmZmVjdCBvbiBNYXkgMjUsIDIwMTguIEJ5IHVzaW5nIG91ciBzZXJ2aWNlcyBvbiBvciBhZnRlciB0aGF0IGRhdGUsIHlvdeKAmWxsIGJlIGFncmVlaW5nIHRvIHRoZXNlIHJldmlzaW9ucy4gWW91IHNob3VsZCByZWFkIHRoZSBkb2N1bWVudHMgaW4gZnVsbCwgYnV0IHRoZSBrZXkgdXBkYXRlcyBpbiBvdXIgUHJpdmFjeSBQb2xpY3kgaW5jbHVkZTpcclxuICA8YnIgLz48YnIgLz5cclxuICBcclxuICBcclxuICAgICBNb3JlIGZvY3VzIG9uIHRoZSBjb250cm9scyB3ZSBvZmZlciB5b3Ugb3ZlciB5b3VyIHBlcnNvbmFsIGRhdGE7XHJcbiAgICAgPGJyIC8+PGJyIC8+XHJcbiAgICAgTW9yZSBmb2N1cyBvbiBob3cgVHdpdHRlciBzaGFyZXMgeW91ciBwdWJsaWMgZGF0YSBicm9hZGx5IGFuZCBpbnN0YW50bHksIGluY2x1ZGluZyB0aHJvdWdoIG91ciBkZXZlbG9wZXIgdG9vbHM7XHJcbiAgICAgPGJyIC8+PGJyIC8+XHJcbiAgICAgTW9yZSB0cmFuc3BhcmVuY3kgYW5kIGNvbnRyb2wgb3ZlciBob3cgd2Ugc2hhcmUgeW91ciBkYXRhIHdpdGggYnVzaW5lc3MgcGFydG5lcnM7IGFuZFxyXG4gICAgIDxiciAvPjxiciAvPlxyXG4gICAgIE1vcmUgY2xhcml0eSBhYm91dCBob3cgd2Ugc2hhcmUgeW91ciBkYXRhIHRvIHByZXZlbnQgaGFybSwgY29tcGx5IHdpdGggbGF3LCBzZXJ2ZSB0aGUgcHVibGljIGludGVyZXN0LCBhbmQga2VlcCBUd2l0dGVyIHNhZmUgYW5kIHdlbGNvbWluZyBmb3IgZXZlcnlvbmUuPHN1cD4xPC9zdXA+XHJcbiAgICAgPC9wPlxyXG4gICA8cD5UaGlzIHNvdW5kcyBsaWtlIHRoZSBsZWFzdCB0cmFuc3BhcmVudCBvZiB0cmFuc3BhcmVuY3kgZG9jdW1lbnRzITwvcD4gICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLjxhIGhyZWY9XCJodHRwczovL2hlbHAudHdpdHRlci5jb20vZW4vcnVsZXMtYW5kLXBvbGljaWVzL3VwZGF0ZS1wcml2YWN5LXBvbGljeVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vaGVscC50d2l0dGVyLmNvbS9lbi9ydWxlcy1hbmQtcG9saWNpZXMvdXBkYXRlLXByaXZhY3ktcG9saWN5PC9hPjwvcD4gXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi48YSBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDQtMTYvZmFjZWJvb2stcy16dWNrZXJiZXJnLWxlYW5zLWluLXRvLW1lZXQtd2l0aC1ldS1kaWdpdGFsLWNoaWVmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDQtMTYvZmFjZWJvb2stcy16dWNrZXJiZXJnLWxlYW5zLWluLXRvLW1lZXQtd2l0aC1ldS1kaWdpdGFsLWNoaWVmXHJcbiAgPC9hPiA8L3A+IGA7XHJcblxyXG5cclxuICB2YXIgYmxvZ3Bvc3QyMSA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VC1Nb2JpbGUncyBwb3RlbnRpYWwgYWNxdWlyZW1lbnQgb2YgU3ByaW50LS1mb3IgYWxsIG9mIGl0cyBtb25vcG9seSBvdmVydG9uZXMtLW1heSBiZSBhIHZlcnkgZ29vZCB0aGluZzogV2UsIGFzIGEgc29jaWV0eSwgYXJlIGF0IHRoZSBkb29yc3RlcCBvZiA1RyB0ZWNobm9sb2d5LCB3aGljaCB3aWxsIGZ1bmRhbWVudGFsbHkgY2hhbmdlIGV2ZXJ5IGFzcGVjdCBvZiBsaWZlLiBULU1vYmlsZSBoYXMgYWx3YXlzIGJlZW4gdGhlIGxpdHRsZSBlbmdpbmUgdGhhdCBjb3VsZCwgYnV0IGhhcyBiZWNvbWUgYSBwb3dlcmhvdXNlIHNpbmNlIGxhc3Qgc3VtbWVyIHdpdGggdGhlaXIgOCBiaWxsaW9uIGRvbGxhciBwdXJjaGFzZSBvZiBsb3cgYmFuZHdpZHRoLCB3aGljaCBpcyBzcGVjaWZpY2FsbHkgPGk+YmVzdCBmb3IgdGhlIHViaXF1aXR5IG5lZWRlZCBmb3IgdGhlIDVnIFJldm9sdXRpb248L2k+PHN1cD4yPC9zdXA+LiAgQWx0aG91Z2ggU3ByaW50IHdhcyBhbHdheXMgaW4gbGFzdCwgNHRoIHBsYWNlIGFtb25nIG1ham9yIGNhcnJpZXJzLCB0aGVpciBuZXR3b3JrIGluZnJhc3RydWN0dXJlIDxpPiBhbmQgQmFuZHdpZHRoIFJpZ2h0czwvaT4gY2FuIGhlbHAgVC1Nb2JpbGUgY2F0Y2ggdXAgd2l0aCBBVCZhbXA7VCBhbmQgVmVyaXpvbidzIDVHIHJvbGwtb3V0cy48L3A+ICBcclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL2JhbmR3aWR0aC5qcGdcIiBjbGFzcz1cInpvb21cIi8+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHA6Ly93d3cuYnVzaW5lc3NpbnNpZGVyLmNvbS81Zy1zcGVlZC1uZXR3b3JrLWx0ZS0yMDE4LTEvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3d3dy5idXNpbmVzc2luc2lkZXIuY29tLzVnLXNwZWVkLW5ldHdvcmstbHRlLTIwMTgtMTwvYT48L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnRoZXZlcmdlLmNvbS8yMDE3LzQvMTMvMTUyOTE0OTYvdG1vYmlsZS1mY2MtaW5jZW50aXZlLWF1Y3Rpb24tcmVzdWx0cy04LWJpbGxpb24tYWlyd2F2ZXMtbHRlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhldmVyZ2UuY29tLzIwMTcvNC8xMy8xNTI5MTQ5Ni90bW9iaWxlLWZjYy1pbmNlbnRpdmUtYXVjdGlvbi1yZXN1bHRzLTgtYmlsbGlvbi1haXJ3YXZlcy1sdGU8L2E+PC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDIwID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Tb21ldGltZXMgdGhlIHNhZmVzdCBwbGFjZSB0byBiZSBpcyBubyBwbGFjZS4gU28sIHRoZSBiZWF1dHkgb2YgdGhlIGRpc3RyaWJ1dGVkIGxlZGdlcnMgaXMgdGhhdCBkYXRhIGlzIG5vIGxvbmdlciBpbiBvbmUgcGxhY2UsIGFuZCBpcyByYXRoZXIgaW4gbm8gcGxhY2UgYXQgYWxsLiBXaGVyZSBpcyBpdD8gU3ByZWFkIGFjcm9zcyBlYWNoIG5vZGUgb2YgdGhlIGJsb2NrY2hhaW4sIGFuZCBhbnkgb25lIGNoYW5nZSBpbiB0aGUgZGF0YSB1cGRhdGVzIGVhY2ggbm9kZS4gRXF1YWxseSwgdGhlIHRyYW5zYWN0aW9uIGlzIHNlY3VyZWQgYnkgYSBjcnlwdG9ncmFwaGljIGhhc2gsIHdoaWNoIGlzIGEgdW5pcXVlIHByaXZhdGUga2V5LjwvcD5cclxuICA8cD5Tbywgd2hhdCBiZXR0ZXIgd2F5IHRvIGNvbmNlcHR1YWxpemUgaXQgdGhhbiByZWFkIGl0LCBoZXJlJ3Mgb25lIG9mIG1pbmUgb24gdGhlIEV0aGVyZXVtIG5ldHdvcms6PC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBzdGF0dXMgXHQweDEgVHJhbnNhY3Rpb24gbWluZWQgYW5kIGV4ZWN1dGlvbiBzdWNjZWVkICAgICAgPHNwYW4gY2xhc3M9XCJncmVlblwiPiAgPC0tc3RhdHVzICAgY3J5cHRvLWNvbnRyYWN0PC9zcGFuPjxiciAvPjxiciAvPlxyXG4gIGZyb20gXHQweGNhMzViN2Q5VE9NVE9NZWY1NDBhZGU2MDY4ZGZlMmY0NGU4ZmE3MzNjICAgICAgICAgPHNwYW4gY2xhc3M9XCJncmVlblwiPiA8LS10aGlzIGlzIG15IGFkZHJlc3MuPC9zcGFuPjxiciAvPjxiciAvPiAgICAgXHJcbiAgdG8gXHRicm93c2VyL1RvbXNmaWxlLnNvbDp0bUNvbnRyYWN0LnRtbSgpIDB4NjkyYTcwZDJlNDI0YTU2ZDJjNmN0b210b21kMWE4NjM5NTg3N2IzYSA8YnIgLz48YnIgLz5cclxuICBnYXMgXHQzMDAwMDAwIGdhcyAgICAgICAgIDxiciAvPjxiciAvPlxyXG4gIHRyYW5zYWN0aW9uIGNvc3QgXHQzMjA2MCBnYXMgICAgICAgICA8c3BhbiBjbGFzcz1cImdyZWVuXCI+IDwtLXBheSBtb3JlLCBmYXN0ZXIgdHJhbnNhY3Rpb24gdmFsaWRhdGlvbjwvc3Bhbj48YnIgLz48YnIgLz4gXHJcbiAgZXhlY3V0aW9uIGNvc3QgXHQxMDc4OCBnYXMgICAgICAgICAgPHNwYW4gY2xhc3M9XCJncmVlblwiPiA8LS1jb250cmFjdCB2YWxpZGF0aW9uIGlzbid0IGZyZWUgLi4uPC9zcGFuPjxiciAvPjxiciAvPlxyXG4gIGhhc2ggXHQweDRkYWVlYzVkOWRiODA1NWM5NWMyZTRlYWUwNzRiOTk0NGU1N2I2NDY1dG9tdG9tMjM5ZmI2MDE4OTY1MjU1ODdkNWZlPGJyIC8+PGJyIC8+XHJcbiAgaW5wdXQgXHQweDkyMjc3OTMzPGJyIC8+PGJyIC8+XHJcbiAgZGVjb2RlZCBpbnB1dCBcdHt9PGJyIC8+PGJyIC8+XHJcbiAgZGVjb2RlZCBvdXRwdXQgXHR7fTxiciAvPjxiciAvPlxyXG4gIGxvZ3MgXHRbXTxiciAvPjxiciAvPlxyXG4gIHZhbHVlIFx0MCB3ZWk8YnIgLz48YnIgLz5cclxuICA8L3A+XHJcbiAgPHA+V2UndmUgYWxsIHNlZW4gdGhlIENpc2NvIGFuZCBJQk0gYmxvY2tjaGFpbiBzdXBwbHktY2hhaW4gYWRzLCBidXQgaG93IGltcG9ydGFudCBjYW4gaXQgYmU/IEluIG15IDxhIGhyZWY9XCIjMTgtMDItMjBcIj5GZWIuIDIwIHBvc3Q8L2E+LCBJIG1lbnRpb24gdGhlIHJldm9sdXRpb25hcnksIGNhbGlicmF0ZWQgPGk+ZnJlZWRvbSBhbmQgcHJpdmFjeSBvZiBkYXRhPC9pPiwgb3duZWQgYW5kIHN0b3JlZCB3aXRoIHRoZSA8aT5vd25lciBvZiB0aGUgZGF0YTwvaT4tLXdoYXQgYSBjb25jZXB0ISBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEpld2VscnkgdHJhY2luZyBpcyBiZWNvbWluZyBpbmNyZWFzaW5nbHkgaW1wb3J0YW50IGZvciBidXNpbmVzcywgYXMgdGhlIHlvdW5nZXIgY3VzdG9tZXIgaXMgXCJmYXIgbW9yZSBza2VwdGljYWwsIGRvZXMgbW9yZSByZXNlYXJjaCxcIiBzYWlkIE1hcmsgSGFubmEsIGNoaWVmIG1hcmtldGluZyBvZmZpY2VyIGF0IFJpY2hsaW5lLiBcIldlIGZlZWwgdGhpcyBpcyBhbiBhYnNvbHV0ZSBtdXN0IHJpZ2h0IG5vdy5cIjxiciAvPjxiciAvPlxyXG4gIFRydXN0Q2hhaW4gaGFzIGp1c3QgY29tcGxldGVkIGl0cyBmaXJzdCBwcm9vZi1vZi1jb25jZXB0IHRlc3QsIGluIHdoaWNoIGdvbGQgd2VudCBmcm9tIGEgbWluZSBpbiBTb3V0aCBEYWtvdGEgdG8gYSByZWZpbmVyeSBpbiBVdGFoLCB0byBhIGZhYnJpY2F0b3IgaW4gTWFzc2FjaHVzZXR0cyB0aGF0IGNvbnZlcnRlZCB0aGUgZ29sZCBpbnRvIGNhc3RpbmcgbnVnZ2V0cyBhbmQgZ3JhaW5zLiBUaG9zZSB0aGVuIHdlbnQgdG8gYSBtYW51ZmFjdHVyZXIgaW4gSW5kaWEgdGhhdCBtYWRlIGVuZ2FnZW1lbnQgcmluZ3MgYW5kIHNldCBkaWFtb25kcyBpbiB0aGVtLiBUaGUgcmluZ3Mgd2VudCB0byBhIGRpc3RyaWJ1dGlvbiBmYWNpbGl0eSBhbmQgdGhlbiB0byBIZWx6YmVyZy4gVUwsIHdoaWNoIGhlbHBzIGNvbXBhbmllcyBlbnN1cmUgcmVzcG9uc2libGUgcHVyY2hhc2VzLCBtb25pdG9yZWQgdGhlIHRyYW5zYWN0aW9ucyB0aHJvdWdob3V0IHRoZSBwcm9jZXNzLiBcclxuICA8cD5Tb21lIHBlb3BsZSBjYWxsIGl0IHRoZSA8aT5UcnVzdCBDaGFpbjwvaT4sIGJ1dCBpdCdzIGFsc28gdmVyeSBtdWNoIGEgVHJhbnNwYXJlbmN5IENoYWluLCB0b28hICAgPC9wPlxyXG4gIFxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuIDxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL2FtcC9uZXdzL2FydGljbGVzLzIwMTgtMDQtMjYvaWJtLXMtYmxvY2tjaGFpbi10ZWNoLXRvLXRyYWNrLWpld2Vscy1mcm9tLW1pbmUtdG8tcmV0YWlsLXN0b3Jlc1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vYW1wL25ld3MvYXJ0aWNsZXMvMjAxOC0wNC0yNi9pYm0tcy1ibG9ja2NoYWluLXRlY2gtdG8tdHJhY2stamV3ZWxzLWZyb20tbWluZS10by1yZXRhaWwtc3RvcmVzPC9hPjwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxOSA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RS4gQ29saSBpbiB0aGUgTGV0dHVjZSBzdXBwbHkgPHN1cD4xPC9zdXA+IHdvdWxkIG1ha2UgYW55IHJhYmJpdCBhcHByZWhlbnNpdmUsIGJ1dCBmaW5kaW5nIHRoZSBzb3VyY2UgcXVpY2tseT8gRG93bnJpZ2h0IGRpc2hlYXJ0ZW5pbmcuICAgSG93ZXZlciwgdGhlIGV2ZXItZXZvbHZpbmcgcG90ZW50aWFsIG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neSBwcmVzZW50cyBpdHMgc29sdXRpb24uIFRoZSBibG9ja2NoYWluIHdvdWxkIHByb3ZpZGUgdGhlIGNvbXBsZXRlIGxlZGdlciBvZiBhIHZlZ2V0YWJsZSdzIGpvdXJuZXksIGFjcm9zcyBhbGwgcGhhc2VzIGFuZCBqdXJpc2RpY3Rpb25zIG9mIHRoZSBqb3VybmV5LiBGdXJ0aGVyLCBhbGwgaW5mb3JtYXRpb24gY2FuIGJlIGluc3RhbnRseSBhdmFpbGFibGUgZnJvbSBhbnkgcGxhY2UgKGFjdHVhbGx5IG5vIGxvY2F0aW9uIGF0IGFsbCksIHJhdGhlciB0aGFuIGNvb3JkaW5hdGluZyBpbmZvcm1hdGlvbiBmcm9tIG11bHRpcGxlIGRhdGEgc291cmNlczpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBGREEgaGFzIGlkZW50aWZpZWQgb25lIGZhcm0gYXMgdGhlIHNvdXJjZSBvZiB0aGUgd2hvbGUtaGVhZCByb21haW5lIGxldHR1Y2UgdGhhdCBzaWNrZW5lZCBzZXZlcmFsIHBlb3BsZSBhdCBhIGNvcnJlY3Rpb25hbCBmYWNpbGl0eSBpbiBBbGFza2EuIEhvd2V2ZXIsIHRoZSBhZ2VuY3kgaGFzIG5vdCBkZXRlcm1pbmVkIHdoZXJlIGluIHRoZSBzdXBwbHkgY2hhaW4gdGhlIGNvbnRhbWluYXRpb24gb2NjdXJyZWQuIFRoZSBhZ2VuY3kgaXMgZXhhbWluaW5nIGFsbCBwb3NzaWJpbGl0aWVzLCBpbmNsdWRpbmcgdGhhdCBjb250YW1pbmF0aW9uIG1heSBoYXZlIG9jY3VycmVkIGF0IGFueSBwb2ludCBhbG9uZyB0aGUgZ3Jvd2luZywgaGFydmVzdGluZywgcGFja2FnaW5nLCBhbmQgZGlzdHJpYnV0aW9uIGNoYWluIGJlZm9yZSByZWFjaGluZyB0aGUgQWxhc2thIGNvcnJlY3Rpb25hbCBmYWNpbGl0eSB3aGVyZSBpdCB3YXMgc2VydmVkLjxzdXA+Mjwvc3VwPlxyXG4gIDwvcD4gXHJcbiAgPHA+VGhlIGJlYXV0eSBvZiBibG9ja2NoYWluIHRlY2hub2xvZ3kgaXMgbW9yZSB0aGFuIGp1c3QgdGhlIGNyeXB0by1jYXNoIG9yIGV2ZW4gdGhlIG5ldyBjcnlwdG8tY29udHJhY3RzIGNyb3BwaW5nIHVwIGluIGV2ZXJ5IHNlY3Rvci4gVGhlIGRpc3RyaWJ1dGlvbiBvZiBrbm93bGVkZ2UgdG8gYWxsIHBhcnRpZXMsIGNyeXB0b2dyYXBoaWNhbGx5IHNlYWxlZCBhbmQgbG9nZ2VkIGZyb20gaXRzIG9yaWdpbi4gQXMgaXQgaGFwcGVucywgb2xkIFdhdHNvbiBmcm9tIElCTSBmYW1lIGlzIHRha2luZyBhIGNyYWNrIGF0IGl0OjwvcD4gIFxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gSUJNIGhhcyBhbHNvIGJlZW4gYWN0aXZlbHkgaGVscGluZyBmb3JtIGEgc2xldyBvZiBibG9ja2NoYWluLWZvY3VzZWQgY29tcGFuaWVzIGFuZCBpbmR1c3RyeSBpbml0aWF0aXZlcyBhcm91bmQgdmFyaW91cyBzdXBwbHkgY2hhaW5zLiBGb3IgZXhhbXBsZSwgaXTigJlzIHdvcmtpbmcgd2l0aCBjb21wYW5pZXMgbGlrZSByZXRhaWxlciBXYWxtYXJ0IEluYy4gdG8gdHJhY2UgZm9vZCBwcm9kdWN0cywgYW5kIGVhcmxpZXIgdGhpcyB5ZWFyIGhlbHBlZCBzdGFydCBhbiBlZmZvcnQgdG8gdHJhY2sgaW50ZXJuYXRpb25hbCBjYXJnby48c3VwPjM8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+VGhlIERpYW1vbmQgaW5kdXN0cnkgaGFzIHN1Y2NlZWRlZCBhbHJlYWR5IGluIGltcGxlbWVudGluZyB0aGUgYmxvY2tjaGFpbiB0ZWNoIHRvIGd1YXJhbnRlZSBhZ2FpbnN0IGJsb29kIGRpYW1vbmRzLjxzdXA+NDwvc3VwPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuc2VhdHRsZXRpbWVzLmNvbS9zZWF0dGxlLW5ld3MvaGVhbHRoL3dhLXN0YXRlLWhlYWx0aC1vZmZpY2lhbHMtNS1wZW9wbGUtc2ljay1mcm9tLXJvbWFpbmUtbGV0dHVjZS1lLWNvbGktb3V0YnJlYWsvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuc2VhdHRsZXRpbWVzLmNvbS9zZWF0dGxlLW5ld3MvaGVhbHRoL3dhLXN0YXRlLWhlYWx0aC1vZmZpY2lhbHMtNS1wZW9wbGUtc2ljay1mcm9tLXJvbWFpbmUtbGV0dHVjZS1lLWNvbGktb3V0YnJlYWsvPC9hPjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY2RjLmdvdi9lY29saS8yMDE4L28xNTdoNy0wNC0xOC9pbmRleC5odG1sXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY2RjLmdvdi9lY29saS8yMDE4L28xNTdoNy0wNC0xOC9pbmRleC5odG1sPC9hPjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9hbXAvbmV3cy9hcnRpY2xlcy8yMDE4LTA0LTI2L2libS1zLWJsb2NrY2hhaW4tdGVjaC10by10cmFjay1qZXdlbHMtZnJvbS1taW5lLXRvLXJldGFpbC1zdG9yZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL2FtcC9uZXdzL2FydGljbGVzLzIwMTgtMDQtMjYvaWJtLXMtYmxvY2tjaGFpbi10ZWNoLXRvLXRyYWNrLWpld2Vscy1mcm9tLW1pbmUtdG8tcmV0YWlsLXN0b3JlczwvYT48L3A+IGA7XHJcblxyXG5cclxuXHJcbiAgdmFyIGJsb2dwb3N0MTggPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPldlc3R3b3JsZCdzIHNlY29uZCBzZWFzb24gcHJlbWllcmVkIHRoaXMgd2VlayB0byBjdWx0LWxpa2UgZmFuZmFyZS48c3VwPjE8L3N1cD4gTXVjaCBvZiB0aGUgSEJPJ3Mgc3RvcnlsaW5lIGZvbGxvd3MgdXN1YWwgbmVhci1mdXR1cmUgQUkgcG90ZW50aWFsLCBidXQgYnJpbmdzIHVwIG1vcmFsIGlzc3VlcyBhYm91dCB3aGF0IHNlcGFyYXRlcyBodW1hbmtpbmQgZnJvbSB0aGUgcmVzdCBvZiB0aGUgYW5pbWFsIGtpbmdkb20uIFRoZSBwcmVtaXNlIG9mIHRoZSBzaG93LCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgQS5JLiwgaXMgaW5zdGluY3R1YWwgbGVhcm5pbmcgYW5kIGJlaGF2aW9yIG9mIEEuSS4tLWkuZS4gaW1pdGF0aW5nIGFuaW1hbC1iZWhhdmlvciwgYnV0IG5vdCBodW1hbi4gPC9wPlxyXG4gIDxwPkkgaGFkIHRoZSBnb29kIGx1Y2sgb2Ygc3BlbmRpbmcgdGhlIEZhbGwgb2YgMjAxNiBpbiB0aGUgU2lsaWNvbiBWYWxsZXkgb2YgQS5JLiB0ZWNobm9sb2d5LCB3aGljaCBpcyBNb250ciZlYWN1dGU7YWwsIFF1JmVhY3V0ZTtiZWMgKEZvciBleGFtcGxlLCBVZGVNIHdhcyBhd2FyZGVkICQxMDAgbWlsbGlvbiBpbiByZXNlYXJjaCBtb25leSBmcm9tIEZhY2Vib29rKS4gVGhvdWdoIEkgd2FzIHRoZXJlIGZvciBhIFNvY2lvbG9neSBQaEQsIEkgc3RpbGwgZ290IHRvIGdldCBpbnZvbHZlZCBsaWtlIGFueSB0ZWNobm9sb2d5IGdyb3VwaWUgd291bGQuLi4gIFRoZSByb2NrLXN0YXIgb3V0IHRoZXJlIGlzIFVuaXZlcnNpdCZlYWN1dGUgZGUgTW9udHImZWFjdXRlO2FsJ3MgRHIuIFlvc2h1YSBCZW5naW8sPHN1cD4zPC9zdXA+IHdobyBleHBsYWlucyB0aGUgY29uc2Npb3VzbmVzcyBlbGVtZW50cyBvZiBBLkksIGFuZCBob3cgdGhvc2UgY29tcGFyZSB3aXRoIG91ciBvd24gcmVwcmVzZW50YXRpb25zOlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgV2l0aCBzdXBlcnZpc2VkIGxlYXJuaW5nLCBodW1hbnMgcHJvdmlkZSB0aGUgaGlnaC1sZXZlbCBjb25jZXB0cyB0aGF0IHRoZSBjb21wdXRlciBsZWFybnMsIHdoaWNoIGNhbiBiZSB0ZWRpb3VzIGFuZCBsaW1pdHMgdGhlIGFiaWxpdHkgb2YgY29tcHV0ZXJzIHRvIGRpc2NvdmVyIHRoaW5ncyBieSB0aGVtc2VsdmVzLiBVbnN1cGVydmlzZWQgbGVhcm5pbmcsIG9yIHdoYXQgd2UgY2FsbCByZWluZm9yY2VtZW50IGxlYXJuaW5nLCBpcyB3aGVuIHRoZSBsZWFybmVyIGlzIG5vdCBtZXJlbHkgcGFzc2l2ZWx5IG9ic2VydmluZyB0aGUgd29ybGQsIG9yIGhvdyBodW1hbnMgZG8gdGhpbmdzLCBidXQgaW50ZXJhY3RzIHdpdGggdGhlIGVudmlyb25tZW50IGFuZCBnZXRzIGZlZWRiYWNrLiBIdW1hbnMgYXJlIGdvb2QgYXQgdGhpcy4gQ29tYmluaW5nIHVuc3VwZXJ2aXNlZCBkZWVwIGxlYXJuaW5nIGFuZCByZWluZm9yY2VtZW50IGxlYXJuaW5nIGlzIG9uZSBvZiB0aGUgdGhpbmdzIHRoYXQgSSBhbSB3b3JraW5nIG9uLjxzdXA+Mjwvc3VwPlxyXG4gIDwvcD4gXHJcbiAgPHA+U28sIGhlcmUgd2Ugc2VlIGhvdyBZb3NodWEgQmVuZ2lvICBleHBsYWlucyB0aGF0IDxpPmJ1aWxkaW5nIG9mIG1lYW5pbmcsIHN5bWJvbGljIHJlcHJlc2VudGF0aW9uIGFzIHRoZSBrZXkgaW1wZWRpbWVudDwvaT4uIFRvIGdldCBhcm91bmQgdGhpcywgcmVwcmVzZW50YXRpb25zIGFyZSA8aT5mYWN0b3JpYWxpemVkPC9pPiwgd2hpY2ggaXMgYSBjbGVhbiB3YXkgb2Ygc2F5aW5nIG11bHRpcGxlIGxldmVscy9kaW1lbnNpb25zIG9mIGNsYXNzaWZpY2F0aW9uIHRyZWVzOjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+Rm9yIG1vcmUgdGhhbiBhIGRlY2FkZSwgbXkgcmVzZWFyY2ggaGFzIGZvY3VzZWQgb24gdGhlIG5vdGlvbiBvZiBsZWFybmluZyBiZXR0ZXIgcmVwcmVzZW50YXRpb25zLCB3aGljaCBpcyB0aGUgaGVhcnQgb2YgZGVlcCBsZWFybmluZywgaW4gcGFydGljdWxhciwgcmVwcmVzZW50YXRpb25zIHRoYXQgaGF2ZSBhIHByb3BlcnR5IGNhbGxlZCBkaXNlbnRhbmdsZWQuIERpc2VudGFuZ2xlZCBzZXBhcmF0ZXMgdGhlIGRpZmZlcmVudCBjb25jZXB0cyBhbmQgZGlmZmVyZW50IGV4cGxhbmF0aW9ucyAtIHdlIGNhbGwgdGhlbSBmYWN0b3JzIC0gdGhhdCBleHBsYWluIHRoZSBkYXRhLCB0aGF0IGV4cGxhaW4gd2hhdCB0aGUgYWdlbnQgc2VlcyBhcm91bmQgaXQsIGFuZCB0aGF0IGV4cGxhaW4gaG93IHRoZSBhZ2VudCBwYXRyb2xzIHRoZSB3b3JsZC4gRGlzZW50YW5nbGVkIGNhcHR1cmVzIHNvbWUgb2YgdGhlIGNhdXNhbGl0eSB0aGF0IGV4cGxhaW5zIHdoYXQgd2UgYXJlIHNlZWluZyBhbmQgd2hhdCB0aGUgY29tcHV0ZXIgaXMgc2VlaW5nLjxzdXA+Mjwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5cclxuICBJIHRoaW5rIGl0J3MgZXhjaXRpbmcgc3ViamVjdCBtYXR0ZXIsIGFuZCBwZXJoYXBzIG1hbnkgd291bGQgYmUgbGVzcyBhcHByZWhlbnNpdmUgaWYgdGhleSB0aG91Z2h0IG9mIEEuSS4gYXMgYWNoaWV2aW5nIHRoZSBiZWhhdmlvciBhbmQgIDxpPnByZWRpY3RhYmxlIG1pbmQgb2YgcGV0czwvaT4uICBQZXRzIGFuZCBzZXJ2aWNlIHBldHMgY2FuIGJlIGEgcmVhc3N1cmluZyB0aG91Z2h0LS1ldmVuIGZvciBBLkkuIHBlc3NpbWlzdHMgbGlrZSBFbG9uIE11c2suIFBldHMuLi4gV2hvIGRvZXNuJ3QgaW1hZ2luZSBhIHNoYWdneSBTYWludCBCZXJuYXJkLCB3aXRoIGEgZmlyc3QtYWlkIGtpdCBhbmQgYSBmbGFzayBhcnJpdmluZyB0byB0aGUgcmVzY3VlIG9uIGEgc25vd3kgQWxwaW5lIG1vdW50YWluIHNsb3BlPyBJIGNhbiBpbWFnaW5lIGEgbWVjaGFuaWNhbCBTYWludCBCZXJuYXJkLCBhbmQgd2l0aCB0aGF0IGluIG1pbmQgSSB3b3VsZCBsb3ZlIHRvIHZpc2l0IFdlc3R3b3JsZC0tYWxiZWl0IG5vdCB3aXRob3V0IGEgd2hpdGUgaGF0IC4uLiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaGJvLmNvbS93ZXN0d29ybGRcIiB0YXJnZXQ9XCJfYmxhbmtcIiA+aHR0cHM6Ly93d3cuaGJvLmNvbS93ZXN0d29ybGQ8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwOi8vd3d3Lmlyby51bW9udHJlYWwuY2EvfmJlbmdpb3kveW9zaHVhX2VuL2luZGV4Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIiA+aHR0cDovL3d3dy5pcm8udW1vbnRyZWFsLmNhL35iZW5naW95L3lvc2h1YV9lbi9pbmRleC5odG1sPC9hPlxyXG4gIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9wZXRlcmhpZ2gvMjAxNy8xMS8wNi93aHktbW9udHJlYWwtaGFzLWVtZXJnZWQtYXMtYW4tYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UtcG93ZXJob3VzZS8jNzQzNWE2NjEyM2JkXCIgdGFyZ2V0PVwiX2JsYW5rXCIgPmh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMvcGV0ZXJoaWdoLzIwMTcvMTEvMDYvd2h5LW1vbnRyZWFsLWhhcy1lbWVyZ2VkLWFzLWFuLWFydGlmaWNpYWwtaW50ZWxsaWdlbmNlLXBvd2VyaG91c2UvIzc0MzVhNjYxMjNiZDwvYT5cclxuICA8L3A+YDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTcgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRoZTxpPiBidXJnZW9uaW5nIFRlY2ggSm9iIE1hcmtldDwvaT4gaGFzIGJlZW4gb25lIG9mIG15IGZhdm9yaXRlIGJsb2cgdG9waWNzLiBUd28gbW9udGhzIGFnbywgbXkgPGEgaHJlZj1cIiMxOC0wMi0yM1wiPkZlYi4gMjNyZCBibG9ncG9zdDwvYT4gYW5kIGFnYWluIG9uIDxhIGhyZWY9XCIjMTgtMDMtMDhcIj5NYXJjaCA4dGg8L2E+IEkgbWVudGlvbmVkIDEuNCBtaWxsaW9uIG5ldyB0ZWNoIGpvYnMsIDIwJSBncm93dGggeWVhci1vdmVyLXllYXIuIEFuZCBzbywgeW91cnMgdHJ1bHkgaGFzIGRlY2lkZWQgdG8gZW50ZXIgaW50byB0aGlzIG1hcmtldCBhZnRlciBhIHBvc3QtZ3JhZHVhdGUgcGVyaW9kIG9mIGNvbnRyYWN0aW5nIGFuZCBmcmVlLWxhbmNlIHdvcmsuIExldCdzIGZhY2UgaXQsIHRoZXJlJ3Mgbm8gc3Vic3RpdHV0ZSBmb3IgdGhlIHN0YWJpbGl0eSBhbmQgdGhlIGZpeGVkIHNjaGVkdWxlLCBwbHVzIHRoZSBjb2ZmZWUtbWFjaGluZSBjb252ZXJzYXRpb25zIGFyZSBuZXZlciBzaG9ydCBvZiBlbmRlYXJpbmchIDwvcD5cclxuXHJcblxyXG4gIDxwPlNvIGZhciBvbiBkYXkgMiAoRnJpZGF5LCB0aGUgMjFzdCB3YXMgbXkgY2VyZW1vbmlhbCBmaXJzdCBkYXkgb2YgXCJwdXR0aW5nIG15c2VsZiBvdXQgdGhlcmVcIikuIEkndmUgdGhvdWdodCB0byBzdGFydCBzbG93LCB3aGlsZSBJIGdhdWdlIHRoZSB0ZXJyaXRvcnksIGJ1dCBJbmRlZWQgYW5kIExpbmtkaW4gYXJlIGFsd2F5cyBzYWZlIGJldHMgdG8gYmVnaW4gd2l0aC4gQWxsIGluIGFsbCwgbXkgZ2VuZXJhbCB0YWtlIGlzIHRoYXQgdGhpcyBuZXcgam9iIGZyb250LCB3aXRoIGh1bmRyZWRzIG9mIHRob3VzYW5kcyBvZiBqb2JzIG1vbnRoLW92ZXItbW9udGggaXMgZm9yIGV2ZXJ5b25lLiBNb3N0IHBvc2l0aW9ucyBvZmZlciA5LTEyIHdlZWVrcyB0cmFpbmluZyAtLSB3aG8gZXZlciBzYWlkIGNoYW5naW5nIGNhcmVlcnMgaGFkIHRvIGJlIHNob3VsZGVyZWQgb24gb3VyIG93bj8gSFIgaXMgdGhlcmUhIDwvcD5cclxuICA8cD5BcyBJIGFtIGEgbmlnaHQtYmxvZ2dlciwgdGhlcmVmb3JlIG15IG5ldyBwb3NpdGlvbi0td2hlcmUgYW5kIHdoaWNoZXZlciBpdCB3aWxsIGJlLCB3b24ndCBpbnRlcmZlcmUgd2l0aCBteSBibG9nZ2luZy0tYWZ0ZXIgYWxsLCBJIGhhdmUgdHJ1bHkgZW5qb3llZCB3YXRjaGluZyBteSByZWFkZXJzaGlwIGdyb3csIG1vbnRoLWJ5LW1vbnRoIC4uLiBzbywgdGhhbmsgeW91LCBkZWFyIHRlY2ggcmVhZGVycy4gQXMgc3VjaCwgcGVyaGFwcyBhbG9uZyB0aGUgd2F5IEkgY2FuIGxlbmQgYSB2aWV3IGZyb20gdGhlIGpvYi1mcm9udCwgYW5kIGFueSBuZXcgdHJlbmRzIEkgb2JzZXJ2ZS48L3A+XHJcbiAgPHA+RXhhbXBsZXMgYXJlbid0IGhhcmQgdG8gZmluZC4gSSd2ZSBub3RpY2VkIHRoYXQgc2luY2UgdGhlIGxhc3QgdGltZSBJJ3ZlIGNoZWNrZWQgb3V0IHRoZSBqb2IgbWFya2V0LCB0aGUgcHJlLWFzc2Vzc21lbnQgdGVzdHMgYXJlIGEgYml0IG1vcmUgY29nbml0aXZlIHRoYW4gcHJldmlvdXMgeWVhcnMsIHdoaWNoIGlzIGdvb2QgZm9yIHN0cm9uZyB0ZXN0LXRha2Vycy0tZXNwZWNpYWxseSB0aG9zZSB0aGF0IGxvdmUgdG8gY2FsY3VsYXRlIHRoZSBcImFycml2YWwgdGltZXMgb2YgdHdvIHNlcGFyYXRlIHRyYWlucyBsZWF2aW5nIHRoZSBzYW1lIHN0YXRpb24gYXQgdHdvIGRpZmZlcmVudCByYXRlcyBvZiBzcGVlZCAuLi4uXCIuIDUwIHF1ZXN0aW9ucyBpbiAxNSBtaW51dGVzIG1ha2VzIGZvciBhIG5pY2UgYWRyZW5hbGluZSBydXNoLS1vbiBwYXIgd2l0aCBhIHNob3J0IHJ1biEgIDwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxNiA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UGFsbGFkaXVtLCBtaWNyb2dyYW1zIG9mIEdvbGQgYW5kIFNpbHZlciwgYW5kIG9mIGNvdXJzZSwgdGhlIHl0dHJpdW0sIHRoZSBsYW50aGFudW0sIHdpdGhvdXQgZm9yZ2V0dGluZyBnb29kIG9sZCB0ZXJiaXVtLCB0aGVuIGEgZHVzdGluZyBvZiBuZW9keW1pdW0sIGEgZGFzaCBvZiBnYWRvbGluaXVtIGFuZCBhbmQgZmluYWxseSBhIHNwcmlua2xlIG9mIHByYXNlb2R5bWl1bS4gVGhlIGluZ3JlZGllbnRzIGZvciBhIHR5cGljYWwgaXBob25lIGFyZSBub3QgYSBsdXh1cnksIGJ1dCBhIDxpPnNpbmUgcXVhIG5vbjwvaT4gbmVjZXNzaXR5LCB3aGlsZSB0aGUgaXJyZXBsYWNlYWJsZSwgaW5jcmVhc2luZ2x5IGRpZmZpY3VsdC10by1taW5lIG1ldGFsIHN1cHBseSA8aT5yZW1pbmRzIHVzIHdlIGRvIGhhdmUgYSBNb3RoZXIgdG8gaGVlZCB0bzwvaT4uPHN1cD4xPC9zdXA+ICBcclxuICA8L3A+XHJcbiAgPHA+VGVjaCdzIHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBFYXJ0aCBpcyB2ZXJ5IHN5bWJpb3RpYywgaW4gdGhhdCBFYXJ0aCdzIHByb2JsZW1zIGFyZSBpbmNyZWFzaW5nbHkgZGVwZW5kZW50IG9uIFRlY2gncyBwcm9taXNlIGZvciBzY2FsYWJsZSwgaW5ub3ZhdGl2ZSBzb2x1dGlvbnMgYmV5b25kIEh1bWFua2luZCdzIHJlYWNoLiBTbywgbXVjaCBsaWtlIHRoZSBjbGVhbi1lbmVyZ3kgaW5mcmFzdHJ1Y3R1cmUgd2lsbCBkZXBlbmQgb24gZm9zc2lsIGZ1ZWxzIHRvIGJlIGJ1aWx0LCB0ZWNoIGhhcmR3YXJlIHdpbGwgZGVwZW5kIG9uIG1vcmUgZGlmZmljdWx0IG1pbmluZy4gQnV0IHRvIHdoYXQgZW5kPyBXaXRoIGdyb3dpbmcgbmF0aW9uYWwgYW5kIGNvcnBvcmF0ZSBjb21wZXRpdGl2ZW5lc3Mgb24gYSBtb3JlIGNyb3dkZWQsIG1vcmUgY29ubmVjdGVkIGdsb2JlLCB0aGUgcmFjZSBpcyBvbiB0byBhY2hpZXZlIHN1c3RhaW5hYmlsaXR5IHdpdGggYm90aC4gICA8L3A+PHA+XHJcbiAgQnV0IHRoZSBzdG9yeSBpc24ndCBhYm91dCBUZWNoIGhlcmUgb24gRWFydGggRGF5IC0gdGhlIHN0b3J5IGlzIHRoZSBFYXJ0aCdzLCBhbmQgd2h5IHRoZSBFYXJ0aCdzIFN1cGVybWFuLCBUZWNobm9sb2d5LCB3aWxsIGNvbWUgZG93biBmcm9tIHRoZSBza3kgdG8gc2F2ZSB0aGUgZGF5IC4uLlxyXG4gIDwvcD5cclxuICA8aW1nIGNsYXNzPVwiem9vbVwiIHNyYz1cIi4vZGlzdC9pbWcvbWV0YWwuanBnXCIgd2lkdGg9XCIzNTBweFwiIC8+ICA8YnIgLz5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cDovL3d3dy5iYmMuY29tL2Z1dHVyZS9zdG9yeS8yMDE2MTAxNy15b3VyLW9sZC1waG9uZS1pcy1mdWxsLW9mLXByZWNpb3VzLW1ldGFsc1wiIHRhcmdldD1cImJsYW5rXCI+aHR0cDovL3d3dy5iYmMuY29tL2Z1dHVyZS9zdG9yeS8yMDE2MTAxNy15b3VyLW9sZC1waG9uZS1pcy1mdWxsLW9mLXByZWNpb3VzLW1ldGFsczwvYT5cclxuICA8L3A+YDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTUgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlNwZWVkIHZlcnN1cyBzY2FsYWJpbGl0eS4gU2VjdXJpdHkgdmVyc3VzIHVzZXItZXhwZXJpZW5jZS4gU3RhYmlsaXR5IHZlcnN1cyBjb21wbGV4aXR5LiBFdGhlcmV1bSwgYWxvbmcgd2l0aCBvdGhlciBibG9ja2NoYWluIGRldmVsb3BlcnMsIGluaGFiaXQgYSB2aXJ0dWFsIHJlYWxpdHksIGEgcmVhbGl0eSBpbiB3aGljaCBhcHBsaWNhdGlvbiB1c2VzIGFuZCBwZXJpbHMgYXJlIG5vdCBmdWxseSBjb25jZWl2YWJsZS4gVHJhZGl0aW9uYWwgYXBwLWRldmVsb3BlcnMsIGxvbmcgaGFiaXR1YXRlZCB0byB0aGUgY2VudHJhbGl6ZWQgc2VydmVyIGFuZCBwb3B1bGFyIHVzYWdlLS1ub3QgdG8gbWVudGlvbiBhbnkgcmVndWxhdGlvbi0tdG8ga25vdyB0aGUgbGluZXMgaW4gdGhlIHNhbmQsIHdoaWNoIGNvbnN0cmFpbiBhIGRldmVsb3Blci4gVGhlIGRlY2VudHJhbGl6ZWQgYXBwIChEQVBQKSBkZXZlbG9wZXJzIGhhdmUgbm8gc3VjaCBsdXh1cnksIGV4Y2VwdCB0byBhYmlkZSBieSBhIGNlcnRhaW4gZ29sZGVuIHJ1bGU7IGEgc2luZ2xlIHJ1bGUgdGhhdCBzdXN0YWlucyBjcnlwdG8tdGVjaCdzIHZlcnkgZXhpc3RlbmNlOiBUaGUgUnVsZSBvZiBUcnVzdCwgd2l0aG91dCB3aGljaCBibG9ja2NoYWluIHRlY2ggaGFzIG5vdGhpbmcgdG8gb2ZmZXIuIFxyXG4gIDwvcD5cclxuICBcclxuICA8cD5UaGUgdmVyeSBwcmVtaXNlIG9mIGRlc2lnbmluZyBkaXN0cmlidXRlZCBsZWRnZXIgcGxhdGZvcm1zIGhpbmdlcyBvbiBwbGFjaW5nIGEgcGxhdGZvcm0ncyBjcnlwdG9ncmFwaGljLCBhbGdvcnRobWljIGRlc2lnbiBhdCB0aGUgY2VudGVyLCB0aGUgbGluayBiZXR3ZWVuIGV2ZXJ5IHVzZXIuIFRoaXMgdHJ1c3QsIDxpPmJ1aWx0IG9uIG1hdGhlbWF0aWNhbCBwcm9vZnMsPC9pPiBlbnN1cmVzIHBlZXItdG8tcGVlciB0cmFuc2FjdGlvbnMgaW4gd2hpY2ggIDxpPm5laXRoZXIgcGFydHkgbmVlZHMgdG8gdHJ1c3QgdGhlIGNvdW50ZXItcGFydHksIG5vciBhbnkgdGhpcmQtcGFydHkuPC9pPldlIHRydXN0IGluIHRoZSBjcnlwdG9ncmFwaHkgdGhhdCBvdXIgdHJhbnNhY3Rpb24gd2lsbCBiZSBmdWxmaWxsZWQ6IEluIE1hdGggV2UgVHJ1c3QuIDwvcD4gPGJyIC8+XHJcbiAgYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTQgPSBgIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj7igJxJIHRoaW5rIGdyZWF0IGFydGlzdHMgYW5kIGdyZWF0IGVuZ2luZWVycyBhcmUgc2ltaWxhciwgaW4gdGhhdCB0aGV5IGJvdGggaGF2ZSBhIGRlc2lyZSB0byBleHByZXNzIHRoZW1zZWx2ZXMuIEluIGZhY3Qgc29tZSBvZiB0aGUgYmVzdCBwZW9wbGUgd29ya2luZyBvbiB0aGUgb3JpZ2luYWwgTWFjIHdlcmUgcG9ldHMgYW5kIG11c2ljaWFucyBvbiB0aGUgc2lkZS7igJ0gPHN1cD4xPC9zdXA+PGJyIC8+IOKAkyBTdGV2ZSBKb2JzPC9wPjxiciAvPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Xb3JkcywgU2VudGVuY2VzLCBQYXJhZ3JhcGhzLiBWYXJpYWJsZXMsIEZ1bmN0aW9ucywgTW9kdWxlcy4gIFdpdGggc28gbWFueSBsYW5ndWFnZXMgdXNlZCBmb3IgZGlmZmVyZW50IHB1cnBvc2VzIGJ5IGRpZmZlcmVudCBvcmdhbml6YXRpb25zLCBzeW50YXggaXMgbW9yZSB0aGFuIDQtc3BhY2UgaW5kZW50cywgdmFyaWFibGUgbmFtZS1zcGFjZXMsIGFuZCBvdGhlciBmb3JtYWxpdGllcy4gVG9kYXksIHRoZSB2YXJpZXR5IG9mIGNvZGluZyBsYW5ndWFnZXMgYW5kIHNjcmlwdHMgY2FuIGFwcGVhciBtb3JlIGNvbXBsaWNhdGVkIHRoYW4gaXMvKyotIHRoZSBjYXNlOiBBZnRlciBhbGwsIGFsbCBjb21wdXRlciA8aT5sYW5ndWFnZXMgYm9pbCBkb3duIHRvIHRoZSBzYW1lIHByaW1hcnkgdGFza3M6IGZvciAmYW1wOyB3aGlsZSBsb29wcywgaWYtdGhlbiBzdGF0ZW1lbnRzLCB2YXJpYWJsZSBkZWNsYXJhdGlvbnMsIHNjb3BlIGNvbnNpZGVyYXRpb25zLCBldGMgLi4uPC9pPiAgICAgXHJcbiAgPC9wPlxyXG4gIDxwPlNvIHdoYXQgYW0gSSBnZXR0aW5nIGF0PyBDb2RpbmcgaW5ub3ZhdGlvbiBpcyBhbiBhcnQgZm9ybSB0aGF0IHN1cnBhc3NlcyBzY2llbmNlIGFuZCBrbm93bGVkZ2UuIEZvciBleGFtcGxlLCAgIGNvZGluZyBwcmFjdGljZXMgaW1wcm92ZSB3aXRoIGNsYXJpdHksIHNpbXBsaWNpdHksIG1vZHVsYXJpdHksIGFuZCBzbyBvbi4uLiBidXQgaXMgdGhlcmUgYW4gYXV0aG9yaXRhdGl2ZSA8aT5zY2hvb2wgb2YgdGhvdWdodDwvaT4gb24gdGhpcyBhcnQ/IFdlbGwsIGluIHRoZSBQeXRob24gd29ybGQsIGFsbCBleWVzIHR1cm4gdG8gdGhlIFplbiBvZiBQeXRob24sIGFuZCBzb21lIHNheSBvdGhlciBsYW5ndWFnZXMgc2hvdWxkIGVtdWxhdGUgaXRzIHBoaWxvc29waHksIHNvIGxldCdzIGhlYXIgaXQ6PC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICA8c3Ryb25nPlRoZSBaZW4gb2YgUHl0aG9uPC9zdHJvbmc+PGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgQmVhdXRpZnVsIGlzIGJldHRlciB0aGFuIHVnbHkuPGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgRXhwbGljaXQgaXMgYmV0dGVyIHRoYW4gaW1wbGljaXQuPGJyIC8+IDxiciAvPlxyXG4gIFxyXG4gIFNpbXBsZSBpcyBiZXR0ZXIgdGhhbiBjb21wbGV4LjxiciAvPiA8YnIgLz5cclxuICBcclxuICBDb21wbGV4IGlzIGJldHRlciB0aGFuIGNvbXBsaWNhdGVkLjxiciAvPiA8YnIgLz5cclxuICBcclxuICBGbGF0IGlzIGJldHRlciB0aGFuIG5lc3RlZC48YnIgLz4gPGJyIC8+XHJcbiAgXHJcbiAgU3BhcnNlIGlzIGJldHRlciB0aGFuIGRlbnNlLjxiciAvPiA8YnIgLz5cclxuICBcclxuICBSZWFkYWJpbGl0eSBjb3VudHMuPGJyIC8+IDxiciAvPlxyXG4gIFxyXG4gIFNwZWNpYWwgY2FzZXMgYXJlbid0IHNwZWNpYWwgZW5vdWdoIHRvIGJyZWFrIHRoZSBydWxlcy48YnIgLz48YnIgLz5cclxuICBcclxuICBBbHRob3VnaCBwcmFjdGljYWxpdHkgYmVhdHMgcHVyaXR5LjxiciAvPjxiciAvPlxyXG4gIFxyXG4gIEVycm9ycyBzaG91bGQgbmV2ZXIgcGFzcyBzaWxlbnRseS48YnIgLz48YnIgLz5cclxuICBcclxuICBVbmxlc3MgZXhwbGljaXRseSBzaWxlbmNlZC48YnIgLz48YnIgLz5cclxuICBcclxuICBJbiB0aGUgZmFjZSBvZiBhbWJpZ3VpdHksIHJlZnVzZSB0aGUgdGVtcHRhdGlvbiB0byBndWVzcy48YnIgLz48YnIgLz5cclxuICBcclxuICBUaGVyZSBzaG91bGQgYmUgb25lLS0gYW5kIHByZWZlcmFibHkgb25seSBvbmUgLS1vYnZpb3VzIHdheSB0byBkbyBpdC48YnIgLz48YnIgLz5cclxuICBcclxuICBBbHRob3VnaCB0aGF0IHdheSBtYXkgbm90IGJlIG9idmlvdXMgYXQgZmlyc3QgdW5sZXNzIHlvdSdyZSBEdXRjaC48YnIgLz48YnIgLz5cclxuICBcclxuICBOb3cgaXMgYmV0dGVyIHRoYW4gbmV2ZXIuPGJyIC8+XHJcbiAgPGJyIC8+XHJcbiAgQWx0aG91Z2ggbmV2ZXIgaXMgb2Z0ZW4gYmV0dGVyIHRoYW4gKnJpZ2h0KiBub3cuPGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgSWYgdGhlIGltcGxlbWVudGF0aW9uIGlzIGhhcmQgdG8gZXhwbGFpbiwgaXQncyBhIGJhZCBpZGVhLjxiciAvPjxiciAvPlxyXG4gIFxyXG4gIElmIHRoZSBpbXBsZW1lbnRhdGlvbiBpcyBlYXN5IHRvIGV4cGxhaW4sIGl0IG1heSBiZSBhIGdvb2QgaWRlYS48YnIgLz48YnIgLz5cclxuICBcclxuICBOYW1lc3BhY2VzIGFyZSBvbmUgaG9ua2luZyBncmVhdCBpZGVhIC0tIGxldCdzIGRvIG1vcmUgb2YgdGhvc2UhIDxzdXA+Mjwvc3VwPjxiciAvPlxyXG4gIFxyXG4gIDxiciAvPlxyXG4gIC0tUHl0aG9uZWVyIFRpbSBQZXRlcnNcclxuICA8L3A+XHJcbiAgPHA+SSBnZXQgaXQsIGdvb2QgY29kaW5nIGlzIG1vcmUgdGhhbiBpbnR1aXRpdmUgYXJ0LCBpdCdzIHdhbGtpbmcgdGhlIGhpZ2ggcm9hZCB3aXRob3V0IHJlZ2FyZCBmb3Igc2hvcnRjdXRzLiBBbmQgSSBjYW4gc2VlIHRoYXQgPGk+aW4gdW5jaGFydGVkIHdhdGVycywgaW50dWl0aW9uIGhhcyB0byBiZSBjb25zdHJhaW5lZCBieSBzb3VuZCByZWFzb24uPC9pPiBBbmQgd2hvIGhhc24ndCBiZWVuIGJ1cm5lZCBieSBhcnRmdWwgZXhwbG9yYXRpb24sIGZhbmN5IGNvZGluZywgYW5kIGZhci1mZXRjaGVkIGFyY2hpdGVjdHVyZXM/IFNvIHdoZXJlIGRvZXMgdGhlIGJhbGFuY2UgbGllPyBBZ2FpbiB3ZSBtdXN0IHR1cm4gdG8gU3RldmUgSm9icyBvbiB0aGUgXCJpbnRlcnNlY3Rpb24gb2YgdGhlIGh1bWFuaXRpZXMgYW5kIHNjaWVuY2UsXCI6IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlcmUgYXJlIGEgbG90IG9mIHBlb3BsZSBpbm5vdmF0aW5nLCBhbmQgdGhhdCdzIG5vdCB0aGUgbWFpbiBkaXN0aW5jdGlvbiBvZiBteSBjYXJlZXIuIFRoZSByZWFzb24gQXBwbGUgcmVzb25hdGVzIHdpdGggcGVvcGxlIGlzIHRoYXQgdGhlcmUncyBhIGRlZXAgY3VycmVudCBvZiBodW1hbml0eSBpbiBvdXIgaW5ub3ZhdGlvbi4gSSB0aGluayBncmVhdCBhcnRpc3RzIGFuZCBncmVhdCBlbmdpbmVlcnMgYXJlIHNpbWkuYXIgaW4gdGhhdCB0aGV5IGJvdGggaGF2ZSBhIGRlc2lyZSB0byBleHByZXNzIHRoZW1zZWx2ZXMuIEluIGZhY3Qgc29tZSBvZiB0aGUgYmVzdCBwZW9wbGUgd29ya2luZyBvbiB0aGUgb3JpZ2luYWwgTWFjIHdlcmUgcG9ldHMgYW5kIG11c2ljYW5zIG9uIHRoZSBzaWRlLiBJbiB0aGUgc2V2ZW50aWVzIGNvbXB1dGVycyBiZWNhbWUgYSB3YXkgZm9yIHBlb3BsZSB0byBleHByZXNzIHRoZWlyIGNyZWF0aXZpdHkuIEdyZWF0IGFydGlzdHMgbGlrZSBMZW9uYXJkbyBkYSBWaW5jaSBhbmQgTWljaGVsYW5nZWxvIHdlcmUgYWxzbyBncmVhdCBhcnQgc2NpZW5jZS4gTWljaGVsYW5nZWxvIGtuZXcgYSBsb3QgYWJvdXQgaG93IHRvIHF1YXJyeSBzdG9uZSwgbm90IGp1c3QgaG93IHRvIGJlIGEgc2N1bHB0b3IuXCIgPHN1cD4xPC9zdXA+PGJyIC8+LS1TdGV2ZSBKb2JzXHJcbiAgPHAgY2xhc3M9XCJjb250aW51ZVwiPkkgY291bGQgbm90IGltYWdpbmUgYSBjb21wdXRpbmcgd29ybGQgd2VyZSBpdCBub3QgZm9yIHRoZSBwZXJzb25hbGl6YXRpb24gdGhhdCBBcHBsZSBpbnRyb2R1Y2VkIHRvIHRoZSB3b3JsZCwgdG8gdXMgYWxsLiBBZnRlciBhbGwsIEkgcmVjYWxsIEkgd2FzIGZpcnN0IHRyYW5zZml4ZWQgaW4gMTk4NCwgdGhlcmUgSSB3YXMgYSBzZXZlbi15ZWFyLW9sZCBzdGFyaW5nIGludG8gdGhlIGJyaWdodCBncmVlbiBsZXR0ZXJzICAgb2YgbXkgICBBcHBsZSBJSWUgLi4uIDwvcD5cclxuICA8cD5TbywgaW4gdGhpcyBlcmEgb2YgdGhlIGFsZ29yaXRobWljIHdpbGQtd2VzdCBhbmQgaW1wZW5kaW5nIHJlZ3VsYXRpb25zIG9uIGRhdGEgcHJpdmFjeSwgaW50ZXItYXBwIHBlcm1pc3Npb25zLCBjb3VwbGVkIHdpdGggZGF0YSBicmVhY2hlcyBldmVyeSB3ZWVrLCBob3cgbWlnaHQgcmVndWxhdGlvbnMgYXZvaWQgc3RpZmxpbmcgaW5ub3ZhdGlvbj8gU3RldmUgSm9icyBkaWRuJ3QgaGF2ZSBydWxlcyBhcyBtdWNoIGFzIE1hcmsgWnVja2VyYmVyZyBkaWRuJ3QgaGF2ZSBhbnkgcnVsZXMuIFNvLCBpdCdzIGEgcmVsaWVmIHRoYXQgWnVja2VyYmVyZywgd2l0aCBpbnRpbWF0ZSBrbm93bGVkZ2Ugb2YgaW5ub3ZhdGlvbiwgY2FuIHNldCBoaXMgdGVhbXMgdG8gd29yayB3aXRoIENvbmdyZXNzIGdvaW5nIGZvcndhcmQsIGVzcGVjaWFsbHkgYXMgRmFjZWJvb2sgY29uZm9ybXMgdG8gdGhlIEUuVS4ncyA8aT5HZW5lcmFsIERhdGEgUHJpdmFjeSBSZWd1bGF0aW9ucyAoR0RQUikgaW1wbGVtZW50YXRpb24gdGhpcyBNYXkuPC9pPiBJIGZvciBvbmUgaG9wZSB0aGF0IGZyZWVkb20gZm9yIGNyZWF0aXZlIGlubm92YXRpb24gd2lsbCBzdGF5IGFsaXZlLCBldmVuIGluIHRoZSBmYWNlIG9mICAgZ3Jvd2luZyBidXJlYXVjcmFjeSBpbiB0aGUgd2ViLiAgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9Y2ZfMlBCUFAtckVDJnByaW50c2VjPWZyb250Y292ZXJcIiB0YXJnZXQ9XCJibGFua1wiPklzYWFjc29uLCBXYWx0ZXIuIFN0ZXZlIGpvYnMuIEpDIExhdHTDqHMsIDIwMTEuPC9hPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy9wZXAtMDAyMC9cIiB0YXJnZXQ9XCJibGFua1wiPmh0dHBzOi8vd3d3LnB5dGhvbi5vcmcvZGV2L3BlcHMvcGVwLTAwMjAvPC9hPlxyXG4gIDwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxMyA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+Qml0Y29pbidzIHJpc2UgdG8gcHJvbWluZW5jZSwgdGhlIG15c3Rlcnkgb2YgU2F0b3NoaSBOYWthbW90bydzIGlkZW50aXR5LS1pLmUuLCBhdXRob3Igb2YgPGEgaHJlZj1cImRpc3QvZG9jcy9iaXRjb2luV2hpdGVQYXBlci5wZGZcIiB0YXJnZXQ9XCJfYmxhbmtcIj4gdGhlIG9yaWdpbmFsIEJpdGNvaW4gV2hpdGUgUGFwZXI8L2E+LCBhbmQgdGhlIHBsYXRmb3JtJ3MgcmVsaWFiaWxpdHkgKG91dHNpZGUgb2YgdmFsdWUgZmx1Y3R1YXRpb25zKSBhbGwgYWRkIHRvIHRoZSBteXN0aXF1ZSBvZiB0aGUgY3J5cHRvLWN1cnJlbmN5LiAgWWV0LCAgICAgbmV3IGFkdmFuY2VzIGFuZCB0eXBlcywgaS5lLiBcImdyb3VwaW5nc1wiIG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neSBhcmUgbm90IG5lY2Vzc2FyaWx5IFwicmVwbGFjaW5nXCIgdGhlaXIgcHJlZGVjZXNzb3JzLCBidXQgcmF0aGVyIGZpbGxpbmcgZGlmZmVyZW50IGJsb2NrY2hhaW4gbmVlZHM7IE5lZWRzIHRoYXQgaW5jbHVkZSBzcGVlZCBvZiB0cmFuc2FjdGlvbnMsIHRydWx5IHB1YmxpYyBkaXN0cmlidXRlZCBsZWRnZXJzLCBzYWZldHkgZnJvbSBmb3JraW5nIGFuZCBERE9TIGF0dGFja3MuICBTaW5jZSAyMDA4LCAgIGdyb3VwcyBvZiBjb21wZXRpbmcgcGxhdGZvcm1zIGZvbGxvdyBhIHRpbWVsaW5lLCBidXQgc2hvdWxkIG5vdCBiZSB0aG91Z2h0IG9mIGFzIGEgY3ljbGljYWwgZXZvbHV0aW9uIGJ1dCByYXRoZXIgZ3Jvd2luZyB0cmVlIGJyYW5jaGVzIHRoYXQgZm9ybSBcImdyb3Vwc1wiLiAgQml0Y29pbiwgTGl0ZWNvaW4gYXJlIGZpcnN0IGdlbmVyYXRpb24sIHdoaWxlIEV0aGVyZXVtIGFuZCBSaXBwbGUgYXJlIDJuZCBnZW5lcmF0aW9uIHdpdGggY3J5cHRvLWNvbnRyYWN0IGNhcGFiaWxpdHksIGFuZCBmaW5hbGx5IElvdGEgYW5kIFN3aXJsZHMnIEhlZGVyYSBIYXNoZ3JhcGggcmVwcmVzZW50ICAgM3JkIGdlbmVyYXRpb24gPGk+ZGlyZWN0ZWQtYWN5Y2xpYy1ncmFwaHMgKERBRyksIHdob3NlIHRyYW5zYWN0aW9uIHNwZWVkIGFjdHVhbGx5ICBpbmNyZWFzZXM8L2k+IHdpdGggbnVtYmVyIG9mIG5vZGVzLlxyXG4gIDwvcD5cclxuICA8cD5FYWNoIG9mIHRoZXNlIGdyb3VwaW5ncyBzaG91bGRuJ3QgYmUgc2VlbiBhcyBtYWtpbmcgdGhlIHByZXZpb3VzIGRlc2lnbiBvYnNlbGV0ZTogVGhleSAgIHNlcnZlIGRpZmZlcmVudCBwdXJwb3Nlcy4gQml0Y29pbiBjYW4gbmV2ZXIgc2VydmUgbWljcm8tdHJhbnNhY3Rpb25zIGFuZCB0aGUgbWljcm8tZWNvbm9teSBiZWNhdXNlIGl0IGNhbiBvbmx5IGhhbmRsZSA2IHRyYW5zYWN0aW9ucyBwZXIgc2Vjb25kIChUUFMpLCB3aGlsZSBFdGhlcmV1bSBjYW4gaGFuZGxlIDEyIG9yIHNvLiBIb3dldmVyLCBtaWNyby10cmFuc2FjdGlvbiBpbmR1c3RyaWVzIHJlcXVpcmUgVFBTIGluIHRoZSBodW5kcmVkcyBvZiB0aG91c2FuZHMhIE9ubHkgdGhlIDNyZCBnZW4gIGNyeXB0by1jdXJyZW5jeSBhcmNoaXRlY3R1cmUgICBhY2hpZXZlcyBUUFMgPGk+YWQgaW5maW5pdHVtPC9pPiBiZWNhdXNlIGl0J3Mgc2NhbGFiaWxpdHkgaW5jcmVhc2VzIHdpdGggc2l6ZS4gVGhlIGNhdGNoPyBEQUcncyBhcmUgbmVjZXNzYXJpbHkgcHJpdmF0ZSBlbnRpdGllcywgcmF0aGVyIHRoYW4gdGhlIG9yaWdpbmFsIHR3byBnZW5lcmF0aW9ucyB0aGF0IGFyZSBieSBuYXR1cmUgcHVibGljLCB5ZXQgY2FuIGJlIHByaXZhdGl6ZWQuIDNyZCBnZW5lcmF0aW9uIERBR3MgYXJlIHRoZSBvcHBvc2l0ZTogVGhleSBhcmUgYnkgZGVmYXVsdCBwcml2YXRlLCBhbmQgY2Fubm90IHRydWx5IGJlIGRpc3RyaWJ1dGVkIHdpdGhvdXQgbWFuYWdlbWVudC4gRnVydGhlciwgPGk+U3dpcmxkcyBIYXNoZ3JhcGggaGFzIHBhdGVudGVkIHRoZWlyIHNvdXJjZSBjb2RlLCB3aGljaCBjb250cmFkaWN0cyBtYW55IHByaW5jaXBsZXMgb2YgYmxvY2tjaGFpbiB0ZWNobm9sb2d5PC9pPiwgYmVnaW5uaW5nIHdpdGggY29yZSB0ZW5ldHMgIG9mIHRoZSBvcmlnaW5hbCBjcnlwdG8tY3VycmVuY3kgd2hpdGUgcGFwZXIsIHB1Ymxpc2hlZCBpbiBPY3RvYmVyIDIwMDguIEZvciBoaXN0b3J5XHJcbiAgJ3Mgc2FrZSwgaGVyZSdzIGEgcXVpY2sgdmlldyBvZiB0aGUgQml0Y29pbiBwYXBlcidzIGFic3RyYWN0OjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+PHN0cm9uZz5BYnN0cmFjdC48L3N0cm9uZz4gQSBwdXJlbHkgcGVlci10by1wZWVyIHZlcnNpb24gb2YgZWxlY3Ryb25pYyBjYXNoIHdvdWxkIGFsbG93IG9ubGluZSBwYXltZW50cyB0byBiZSBzZW50IGRpcmVjdGx5IGZyb20gb25lIHBhcnR5IHRvIGFub3RoZXIgd2l0aG91dCBnb2luZyB0aHJvdWdoIGEgZmluYW5jaWFsIGluc3RpdHV0aW9uLiBEaWdpdGFsIHNpZ25hdHVyZXMgcHJvdmlkZSBwYXJ0IG9mIHRoZSBzb2x1dGlvbiwgYnV0IHRoZSBtYWluIGJlbmVmaXRzIGFyZSBsb3N0IGlmIGEgdHJ1c3RlZCB0aGlyZCBwYXJ0eSBpcyBzdGlsbCByZXF1aXJlZCB0byBwcmV2ZW50IGRvdWJsZS1zcGVuZGluZy4gV2UgcHJvcG9zZSBhIHNvbHV0aW9uIHRvIHRoZSBkb3VibGUtc3BlbmRpbmcgcHJvYmxlbSB1c2luZyBhIHBlZXItdG8tcGVlciBuZXR3b3JrLiBUaGUgbmV0d29yayB0aW1lc3RhbXBzIHRyYW5zYWN0aW9ucyBieSBoYXNoaW5nIHRoZW0gaW50byBhbiBvbmdvaW5nIGNoYWluIG9mIGhhc2gtYmFzZWQgcHJvb2Ytb2Ytd29yaywgZm9ybWluZyBhIHJlY29yZCB0aGF0IGNhbm5vdCBiZSBjaGFuZ2VkIHdpdGhvdXQgcmVkb2luZyB0aGUgcHJvb2Ytb2Ytd29yaywgZm9ybWluZyBhIHJlY29yZCB0aGF0IGNhbm5vdCBiZSBjaGFuZ2VkIHdpdGhvdXQgcmVkb2luZyB0aGUgcHJvb2Ytb2Ytd29yay4gVGhlIGxvbmdlc3QgY2hhaW4gbm90IG9ubHkgc2VydmVzIGFzIHByb29mIG9mIHRoZSBzZXF1ZW5jZSBvZiBldmVudHMgd2l0bmVzc2VkLCBidXQgcHJvb2YgdGhhdCBpdCBjYW1lIGZyb20gdGhlIGxhcmdlc3QgcG9vbCBvZiBDUFUgcG93ZXIuIEFzIGxvbmcgYXMgYSBtYWpvcml0eSBvZiBDUFUgcG93ZXIgaXMgY29udHJvbGxlZCBieWkgbm9kZXMgdGhhdCBhcmUgbm90IGNvb3BlcmF0aW5nIHRvIGF0dGFjayB0aGUgbmV0d29yaywgdGhleSdsbCBnZW5lcmF0ZSB0aGUgbG9uZ2VzdCBjaGFpbiBhbmQgb3V0cGFjZSBhdHRhY2tlcnMuIFRoZSBuZXR3b3JrIGl0c2VsZiByZXF1aXJlcyBtaW5pbWFsIHN0cnVjdHVyZS4gTWVzc2FnZXMgYXJlIGJyb2FkY2FzdCBvbiBhIGJlc3QgZWZmb3J0IGJhc2lzLCBhbmQgbm9kZXMgY2FuIGxlYXZlIGFuZCByZWpvaW4gdGhlIG5ldHdvcmsgYXQgd2lsbCwgYWNjZXB0aW5nIHRoZSBsb25nZXN0IHByb29mLW9mLXdvcmsgY2hhaW4gYXMgcHJvb2Ygb2Ygd2hhdCBoYXBwZW5lZCB3aGlsZSB0aGV5IHdlcmUgZ29uZS48c3VwPjE8L3N1cD48L3A+XHJcbiAgXHJcbiAgPHA+SXJyZXNwZWN0aXZlIG9mIGNyeXB0by1jdXJyZW5jeSBvciBjcnlwdG8tY29udHJhY3QsIHRoZXJlIHNlZW1zIHRvIGJlIGEgZGlmZmVyZW50IGtpbmQgb2YganVtcCBmcm9tIDJuZCBnZW5lcmF0aW9uIHRvIDNyZCBnZW5lcmF0aW9uIGJsb2NrY2hhaW4sIHJhdGhlciB0aGFuIGEgcHJvZ3Jlc3Npb24uIFJlc2VhcmNoIG5lZWRlZCB0byBmb3JrIGludG8gYSBkaWZmZXJlbnQgZGlyZWN0aW9uIGlzIGJlY2F1c2Ugb2YgdGhlIG5lZWQgZm9yIGluc3RhbnRhbmVvdXMsIG9yZGVyZWQgdHJhbnNhY3Rpb25zLCB3aGljaCBjYW4gbmV2ZXIgYmUgcHJvdmlkZWQgYnkgYSBibG9ja2NoYWluIGRlc2lnbiB3aGljaCBcInN5bmNzXCIgZXZlcnkgNSB0byAxMCBtaW51dGVzLiA8L3A+XHJcbiAgPHA+IFNvLCB3aGF0IGlzIHRoaXMgM3JkIGdlbmVyYXRpb24gZGVzaWduPyBJbnN0ZWFkIG9mIGEgc2luZ3VsYXIgYmxvY2sgZW5jYXBzdWxhdGVkIGluIGxpbmtlZCBjcnlwdG9ncmFwaGljLCBoaXN0b3JpY2FsIGxlZGdlciBibG9ja3MsIGhhc2hncmFwaCB1c2VzIGEgXCJ0YW5nbGVcIiBvZiBvbmUtd2F5IChkaXJlY3RlZC1hY3ljbGljKSBuZXR3b3JrIGNvbm5lY3Rpb25zLiBUaGlzIG1lYW5zIHRoYXQgc3BlZWQgaW5jcmVhc2VzIHdpdGggdGhlIG51bWJlciBvZiBub2Rlcywgb3ZlcmNvbWluZyB0aGUgQml0Y29pbiBtaWNyby10cmFuc2FjdGlvbiBwcm9ibGVtLiA8aT5JbiBzdW0sIG5lYXItaW5zdGFudGFuZW91cyB1cGRhdGVzIGZvciBmaW5hbmNpYWwsIGJldHRpbmcsIGdhbWluZyBhbmQgc29jaWFsLW1lZGlhIGRhdGEgbmVlZHMgYXJlIHNvbHZlZCBieSB0aGUgIHRoaXJkLWdlbmVyYXRpb24gREFHPC9pPiwgd2hpbGUgbG9uZ2VyLXRlcm0gYW5kIHRydWx5IGRpc3RyaWJ1dGVkIGJsb2NrY2hhaW4gbmVlZHMgd2lsbCBhbHdheXMgYmUgdGhlIHRlcnJhaW4gb2YgZmlyc3QgYW5kIHNlY29uZCBnZW5lcmF0aW9uIGJsb2NrY2hhaW4gdGVjaG5vbG9neS4gU28sIGdpdmVuIHRoYXQgU3dpcmxkcycgSGVkZXJhIEhhc2hncmFwaCB3aWxsIGJlIHVudmVpbGluZyB0aGVpciBwbGF0Zm9ybSBuZXh0IG1vbnRoLCAgIGJsb2NrY2hhaW4gY3JpdGljcyBhbmQgZW50aHVzaWFzdHMgY2FuIGFuZCBzaG91bGQgcmVhZCBiZXR3ZWVuIHRoZSBsaW5lcywgZXIsIEkgbWVhbi0tIHJlYWQgIGJldHdlZW4gdGhlIG5vZGVzIC4uLjwvcD48YnIgLz5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4wLiAgVG9waWMgYWRkcmVzc2VkIGluIDxhIGhyZWY9XCIjMTgtMDQtMDJcIj5BcHJpbCAybmQgYmxvZ3Bvc3Q8L2E+PC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuPGEgaHJlZj1cImh0dHBzOi8vYml0Y29pbi5vcmcvYml0Y29pbi5wZGZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2JpdGNvaW4ub3JnL2JpdGNvaW4ucGRmXHJcbiAgPC9hPiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi48YSBocmVmPVwiaHR0cDovL3d3dy50aGUtYmxvY2tjaGFpbi5jb20vMjAxOC8wMy8yMC9oZWRlcmEtcGxhbnMtc3BlZWRpZXItc2FmZXItbW9yZS1kZW1vY3JhdGljLWJsb2NrY2hhaW4tYWx0ZXJuYXRpdmUtaGFzaGdyYXBoL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly93d3cudGhlLWJsb2NrY2hhaW4uY29tLzIwMTgvMDMvMjAvaGVkZXJhLXBsYW5zLXNwZWVkaWVyLXNhZmVyLW1vcmUtZGVtb2NyYXRpYy1ibG9ja2NoYWluLWFsdGVybmF0aXZlLWhhc2hncmFwaC9cclxuICA8L2E+IDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly9zMy5hbWF6b25hd3MuY29tL2hlZGVyYS1oYXNoZ3JhcGgvaGgtd2hpdGVwYXBlci12MS4wLTE4MDMxMy5wZGZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3MzLmFtYXpvbmF3cy5jb20vaGVkZXJhLWhhc2hncmFwaC9oaC13aGl0ZXBhcGVyLXYxLjAtMTgwMzEzLnBkZjwvYT4gPC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDEyID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RGljdGlvbmFyaWVzIGFuZCBsaWJyYXJpZXMgcGxhY2UgdGhlIHByb2dyYW1tZXIgaW50byBhIG9uY2UtaW4tYS1saWZldGltZSBvcHBvcnR1bml0eSB0byByaWRlIHRoZSBsaWdodG5pbmcgb2YgdGhlIG9wZW4tc291cmNlIGNvbW11bml0eS4gVm9sdW50ZWVycyBhbmQgY29ycG9yYXRlIHNwb25zb3JzIHRha2UgdGhlIGNyZWRpdCBmb3IgdGhlIGVub3Jtb3VzIGVmZm9ydCBtYWtpbmcgYSAgbmVhciBsaW1pdGxlc3Mgc2VsZWN0aW9uIG9mIGZ1bmN0aW9ucywgZGljdGlvbmFyaWVzIGFuZCBtb2R1bGVzIGZvciBsYW5ndWFnZXMgc3VjaCBhcyAgSmF2YVNjcmlwdCBhbmQgUHl0aG9uIHByb2dyYW1taW5nLjxzdXA+MTwvc3VwPiBUb2RheSwgYSBwcm9ncmFtbWVyIGNhbiAgIHB1dCB0b2dldGhlciBKYXZhU2NyaXB0IENvbXBvbmVudHMgYW5kIE1vZHVsZXMgd2l0aCBsZXNzIHRob3VnaHQgYWJvdXQgc3ludGFjdGljYWwgbG9naWMsIGFuZCBtb3JlIGNvbnNpZGVyYXRpb24gZm9yIHRoZSBwcm9ibGVtIGF0IGhhbmQuIFxyXG4gIDwvcD4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5FYWNoIHNpZ25pZmljYW50IHBpZWNlIG9mIGZ1bmN0aW9uYWxpdHkgaW4gYSBwcm9ncmFtIHNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBqdXN0IG9uZSBwbGFjZSBpbiB0aGUgc291cmNlIGNvZGUuIFdoZXJlIHNpbWlsYXIgZnVuY3Rpb25zIGFyZSBjYXJyaWVkIG91dCBieSBkaXN0aW5jdCBwaWVjZXMgb2YgY29kZSwgaXQgaXMgZ2VuZXJhbGx5IGJlbmVmaWNpYWwgdG8gY29tYmluZSB0aGVtIGludG8gb25lIGJ5IGFic3RyYWN0aW5nIG91dCB0aGUgdmFyeWluZyBwYXJ0cy48L2JyID48L2JyID5cclxuICAtLUJlbmphbWluIEMuIFBpZXJjZTwvcD5cclxuICA8cD5UaGVyZSBhcmUgYSBmZXcgaHVuZHJlZCB0aG91c2FuZCBwYWNrYWdlcyBpbiB0aGUgSmF2YVNjcmlwdCA8aT4gTm9kZS5qcyBwYWNrYWdlIGVjb3N5c3RlbTwvaT4sIHdpdGggYmlsbGlvbnMgb2YgZG93bmxvYWRzIHBlciBtb250aC4gVGhpcyB1bnByZWNlZGVudGVkIGdsb2JhbCBjb2xsYWJvcmF0aW9uLCBzaGFyaW5nIG9wZW4tc291cmNlIGNvZGUgaW50byB0aGUgY29tbXVuaXR5LCBtZWFucyBhIG1vcmUgaHVtYW5pemVkLCBoaWdoZXItbGV2ZWwgcHJvZ3JhbW1pbmcgdGFza3MtLSBhIGJvb24gZm9yIHRoZSBtYW55IGNvZGluZy1jb252ZXJ0cyBqb2luaW5nIHRoZSB0ZWNoIGVjb25vbXkuIFN1Y2ggb3B0aW1pc20gbWVhbnMgdGhhdCBwcm9ibGVtLXNvbHZpbmcgaXMgZmFzdCBhbmQgZmxleGlibGUsIGVzcGVjaWFsbHkgaW4gdGhlIHdvcmxkIG9mIFN0YWNrIE92ZXJmbG93LS1hbm90aGVyIHBoZW5vbWVub24gb2YgZ2xvYmFsIGNvbGxhYm9yYXRpb24uXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5bQWJzdHJhY3Rpb25dIHRyaWVzIHRvIGZhY3RvciBvdXQgZGV0YWlscyBmcm9tIGEgY29tbW9uIHBhdHRlcm4gc28gdGhhdCBwcm9ncmFtbWVycyBjYW4gd29yayBjbG9zZSB0byB0aGUgbGV2ZWwgb2YgaHVtYW4gdGhvdWdodCwgbGVhdmluZyBvdXQgZGV0YWlscyB3aGljaCBtYXR0ZXIgaW4gcHJhY3RpY2UsIGJ1dCBhcmUgaW1tYXRlcmlhbCB0byB0aGUgcHJvYmxlbSBiZWluZyBzb2x2ZWQuPC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgZWZmZWN0aXZlIGV4cGxvaXRhdGlvbiBvZiB0aGUgcG93ZXJzIG9mIDxpPmFic3RyYWN0aW9uPC9pPiBtdXN0IGJlIHJlZ2FyZGVkIGFzIG9uZSBvZiB0aGUgbW9zdCB2aXRhbCBhY3Rpdml0aWVzIG9mIGEgICBwcm9ncmFtbWVyIC4uLjxzdXA+Mjwvc3VwPiA8YnIgLz48YnIgLz5cclxuICAtLUVkc2dlciBXLiBEaWprc3RyYTwvcD5cclxuICA8cD5UaGVzZSB3b3JkcyBtZWFuIHByb2dyYW1tZXJzIGNhbiBkbyB3aGF0IHRoZXkgZG8gYmVzdCwgYXMgbXVjaCBhcyAgIHdoYXQgdGhlIGNsaWVudC11c2VyIGRvZXMgYmVzdCwgdG9vOiB0aGluayBhbmQgcHJvYmxlbS1zb2x2ZSBsaWtlIGEgaHVtYW4sIHJhdGhlciB0aGFuIGEgcm9ib3QuIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLjxhIGhyZWY9XCJodHRwczovL25vZGVzb3VyY2UuY29tL2Jsb2cvbnBtLWlzLW1hc3NpdmUvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9ub2Rlc291cmNlLmNvbS9ibG9nL25wbS1pcy1tYXNzaXZlL1xyXG4gIDwvYT4gPC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuPGEgaHJlZj1cImh0dHA6Ly93d3cuY3MudXRleGFzLmVkdS9+RVdEL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly93d3cuY3MudXRleGFzLmVkdS9+RVdEL1xyXG4gIDwvYT4gPC9wPiBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxMSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkUuVS4ncyBQYXJsaWFtZW50IGhhcyAgIGludml0ZWQgWnVja2VyYmVyZyB0byBzcGVhayB3aXRoIG1lbWJlci1zdGF0ZXMgaW4gQnJ1c3NlbHMgdG8gZGlzY3VzcyBib3RoIHRoZSB1cGNvbWluZyA8aT5HZW5lcmFsIERhdGEgUHJvdGVjdGlvbiBSZWd1bGF0aW9uIChHRFBSKTwvaT4gbmV3IHJ1bGVzLCBhbG9uZyB3aXRoIHRoZSAyLjcgRXVyb3BlYW5zLCB3aG9zZSBkYXRhIGFsc28gd2FzIHNvbGQgdG8gQ2FtYnJpZGdlIEFuYWx5dGljYS48c3VwPjE8L3N1cD4gTm90IGV4YWN0bHkgYW4gaW52aXRhdGlvbiB0byB0aGUgQmFsbC4uLlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIEJydXNzZWxzLWJhc2VkIGNvbW1pc3Npb24gc2FpZCBbRXVyb3BlYW4gQ29tbWlzc2lvbiBWaWNlLVByZXNpZGVudF0gQW5zaXAgd291bGQgYWxzbyBtZWV0IHdpdGggR29vZ2xlIENoaWVmIEV4ZWN1dGl2ZSBPZmZpY2VyIFN1bmRhciBQaWNoYWksIFR3aXR0ZXIgR2VuZXJhbCBDb3Vuc2VsIFNlYW4gRWRnZXR0IGFuZCBOZXRmbGl4IEdlbmVyYWwgQ291bnNlbCBEYXZpZCBIeW1hbiBpbiBpbmRpdmlkdWFsIG1lZXRpbmdzIHRvIHRhbGsgYWJvdXQgZGF0YSBwcm90ZWN0aW9uLCBvbmxpbmUgcHJpdmFjeSwgaWxsZWdhbCBjb250ZW50LCBkaXNpbmZvcm1hdGlvbiBjYW1wYWlnbnMsIGRpZ2l0YWwgY29weXJpZ2h0IGFuZCBhcnRpZmljaWFsIGludGVsbGlnZW5jZS48c3VwPjI8L3N1cD48L3A+IFxyXG4gIDxwPlRoZXNlIGFyZSBtb3JlIHRoYW4gdGFsa2luZyBwb2ludHMsIGFzIHRoZXkgYXJlIGFscmVhZHkgY29kaWZpZWQgd2l0aGluIHRoZSBHRFBSIGFuZCB0byBpbXBsZW1lbnRlZCBuZXh0IG1vbnRoLS1jb21wbGlhbmNlIHdpdGggRXVyb3BlYW4gbGF3IHdpbGwgYmUgYSBtYWQgZGFzaCBmb3IgZGV2ZWxvcGVycy48L3A+XHJcbiAgPHA+IFRoaXMgcHJlZGljYW1lbnQgaWxsdW1pbmF0ZXMgYSBzbWFsbGVyIHdvcmxkLCBhbG9uZyB3aXRoIGluY3JlYXNpbmcgY29tcGxpY2F0aW9ucyBvZiBnbG9iYWxpemF0aW9uLCB0aGFua3MgdG8gdGVjaC0tZm9yIGJldHRlciBvciB3b3JzZS4gVWx0aW1hdGVseSwgRmFjZWJvb2ssIEdvb2dsZSwgYW5kIG90aGVyIHRlY2ggZ2lhbnRzIHdpbGwgbmVlZCB0byBvdmVyaGF1bCB0aGVpciBwZXJtaXNzaW9uaW5nIGNvZGUgdG8gYWJpZGUgYnkgRXVyb3BlYW4gbGF3LCBidXQgYWZ0ZXIgbGFzdCB3ZWVrJ3MgQ29uZ3Jlc3Npb25hbCBhcHBlYXJlbmNlLCBpdCdzIGhhcmQgbm90IHRvIHdvbmRlciBpZiBwYW4taW5kdXN0cnkgZGF0YSBwcml2YWN5IGFkanVzdG1lbnRzIHdpbGwgbGVhZCB0byBhIG5ldyA8aT5kZSBmYWN0byByZWd1bGF0aW9uPC9pPiwgYmFzZWQgb24gdGVjaCBjdWx0dXJlIGluc3RlYWQgb2YgcG9saXRpY2lhbnMgYW5kIGxlZ2lzbGF0b3JzIC4uLiAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuPGEgaHJlZj1cImh0dHBzOi8vd3d3Lndhc2hpbmd0b25leGFtaW5lci5jb20vcG9saWN5L3RlY2hub2xvZ3kvZXUtc3RlcHMtdXAtcHJlc3N1cmUtb24tbWFyay16dWNrZXJiZXJnLXRvLXRlc3RpZnktYWJvdXQtZmFjZWJvb2stcHJpdmFjeVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lndhc2hpbmd0b25leGFtaW5lci5jb20vcG9saWN5L3RlY2hub2xvZ3kvZXUtc3RlcHMtdXAtcHJlc3N1cmUtb24tbWFyay16dWNrZXJiZXJnLXRvLXRlc3RpZnktYWJvdXQtZmFjZWJvb2stcHJpdmFjeVxyXG4gIDwvYT4gPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLjxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wNC0xNi9mYWNlYm9vay1zLXp1Y2tlcmJlcmctbGVhbnMtaW4tdG8tbWVldC13aXRoLWV1LWRpZ2l0YWwtY2hpZWZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wNC0xNi9mYWNlYm9vay1zLXp1Y2tlcmJlcmctbGVhbnMtaW4tdG8tbWVldC13aXRoLWV1LWRpZ2l0YWwtY2hpZWZcclxuICA8L2E+IDwvcD4gYDtcclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDEwID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGlzIHdlZWssIHRoZSBTdXByZW1lIENvdXJ0ICAgcmV2aXNpdHMgaXRzIDE5OTIgZGVjaXNpb24gbm90IHJlcXVpcmluZyBzdGF0ZSBzYWxlcyB0YXhlcyBmb3Igb25saW5lIHB1cmNoYXNlcy48c3VwPjE8L3N1cD4gQWx0aG91Z2ggYmlnLWJveCBzdG9yZXMgbGlrZSBBbWF6b24sIFdhbG1hcnQsIGV0Yy4gPGk+ZG88L2k+IHBheSBzdGF0ZSB0YXhlcyBhbW9uZyB0aGUgNDUgc3RhdGVzIHJlcXVpcmluZyBpdCwgc21hbGwtIGFuZCBtZWRpdW0tc2l6ZWQgcmV0YWlsZXJzIGRvIG5vdCBuZWVkIHRvIGNvbGxlY3Qgc2FsZXMgdGF4ZXMgaW4gYW55IHN0YXRlIHdoZXJlIHRoZXkgZG8gbm90IGhhdmUgcGh5c2ljYWwgcHJlc2VuY2UsIGFsc28ga25vd24gYXMgXCJuZXh1cy5cIiBCdXQsIGJlZ2lubmluZyB0aGlzIFR1ZXNkYXksIHRoZSBmcmVlIHJpZGUgbWF5IGNvbWUgdG8gYW4gIGVuZDsgdGhpcyBpbmNsdWRlcyBzbWFsbCByZXRhaWxlcnMgdGhhdCBjb21wcmlzZSBoYWxmIG9mIEFtYXpvbidzIDNyZC1wYXJ0eSBvbmxpbmUgc2FsZXMuXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gIFxyXG4gIFxyXG4gIEEgcmV2ZXJzYWwgY291bGQgbWVhbiB0aGF0IGFsbCBvbmxpbmUgcmV0YWlsZXJzIG11c3QgY29sbGVjdCBzYWxlcyB0YXggZXZlcnl3aGVyZS4gSXQncyBhbiBpc3N1ZSB0aGF0IGJyaWNrLWFuZC1tb3J0YXIgcmV0YWlsZXJzIGluc2lzdCB3aWxsIHByb3ZpZGUgYSBsZXZlbCBwbGF5aW5nIGZpZWxkIHdpdGggb25saW5lIGNvbXBldGl0b3JzLCBhbmQgaGVscCB0byBwcm92aWRlIHN0YXRlIGFuZCBsb2NhbCBnb3Zlcm5tZW50cyB3aXRoIHRoZSB0YXggcmV2ZW51ZSB0aGV5IGRlc2VydmUuPHN1cD4yPC9zdXA+PC9wPlxyXG4gIDxwPiBMaXZlbGlob29kcyBoYW5nIGluIHRoZSBiYWxhbmNlLCBzbyB3aGF0ZXZlciB0aGUgZ2F2ZWwgc2V0dGxlcyBvbiwgbGV0J3MgaG9wZSBmb3IgdGhlIGJlc3QhIFRoZSBCbG9ja2J1c3Rlci1pemF0aW9uIG9mIHNvIG1hbnkgYnJpY2stYW5kLW1vcnRhcnMgc2VlbXMgdG8gY2xhaW0gYSBuZXcgdmljdGltIGV2ZXJ5IG1vbnRoLS1yZWNlbnRseSBUb3lzICdSIFVzICBtZWV0aW5nIGl0cyBkZW1pc2UuPHN1cD4zPC9zdXA+IFNvLCB3aXRoIGFzIG1hbnkgdGhhdCBoYXZlIGRpc2FwcGVhcmVkLCBiaWcgYW5kIHNtYWxsLSwgaXRzIGEgY3VyaW9zaXR5IGlmIG1heWJlIFR1ZXNkYXkgYnJlYXRoZXMgbGlmZSBpbnRvIHRoZSBib2FyZGVkIHN0b3JlLWZyb250cyBhY3Jvc3MgQW1lcmljYS4gSSB0aGluayBvdGhlcnMgc2hhcmUgbXkgdmlldyB0aGF0IHNob3BwaW5nIGlzIG1vcmUgdGhhbiBzaGlueSBwYWNrYWdpbmcgYXQgdGhlIGRvb3JzdGVwOiBpdCdzIG11Y2ggbW9yZSB0aGUgY2VyZW1vbnkgYW5kIGdhbGEgaW4gdGhlIHN0b3JlIC0gYSAgcmVhbCBzaGFyZWQgbW9tZW50IHdpdGggc3RyYW5nZXJzLCBhY3F1YWludGFuY2VzIGFuZCBsb3ZlZCBvbmVzIHRoYXQgbWFrZXMgZm9yIGJldHRlciBwYWNrYWdpbmcsIGEgcGFja2FnZSBlbWJlbGxpc2hlZCB3aXRoIGEgc3RvcnkuICAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMvamFuZXR3YnVybnMvMjAxOC8wNC8xNS9zdXByZW1lLWNvdXJ0LWRlY2lzaW9uLWNvdWxkLWJyaW5nLXNhbGVzLXRheC10by1tb3JlLW9ubGluZS1zaG9wcGluZy8jMmEwZWEzOGYzZGFmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9qYW5ldHdidXJucy8yMDE4LzA0LzE1L3N1cHJlbWUtY291cnQtZGVjaXNpb24tY291bGQtYnJpbmctc2FsZXMtdGF4LXRvLW1vcmUtb25saW5lLXNob3BwaW5nLyMyYTBlYTM4ZjNkYWZcclxuICA8L2E+IDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLjxhIGhyZWY9XCJodHRwOi8vbW9uZXkuY25uLmNvbS8yMDE4LzA0LzE1L3RlY2hub2xvZ3kvb25saW5lLXB1cmNoYXNlcy1zYWxlcy10YXhlcy1zdXByZW1lLWNvdXJ0L2luZGV4Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vbW9uZXkuY25uLmNvbS8yMDE4LzA0LzE1L3RlY2hub2xvZ3kvb25saW5lLXB1cmNoYXNlcy1zYWxlcy10YXhlcy1zdXByZW1lLWNvdXJ0L2luZGV4Lmh0bWxcclxuICA8L2E+IDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4zLjxhIGhyZWY9XCJodHRwczovL3d3dy53YXNoaW5ndG9ucG9zdC5jb20vbmV3cy9idXNpbmVzcy93cC8yMDE4LzA0LzEzL3RoaXMtYmlsbGlvbmFpcmUtdG95LWV4ZWN1dGl2ZS1oYXMtYS1sYXN0LWRpdGNoLW1pc3Npb24tdG8tc2F2ZS10b3lzLXItdXMtYmVmb3JlLWl0cy10b28tbGF0ZS8/bm9yZWRpcmVjdD1vbiZ1dG1fdGVybT0uYjMyMDFhZDc3ODkxXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL25ld3MvYnVzaW5lc3Mvd3AvMjAxOC8wNC8xMy90aGlzLWJpbGxpb25haXJlLXRveS1leGVjdXRpdmUtaGFzLWEtbGFzdC1kaXRjaC1taXNzaW9uLXRvLXNhdmUtdG95cy1yLXVzLWJlZm9yZS1pdHMtdG9vLWxhdGUvP25vcmVkaXJlY3Q9b24mdXRtX3Rlcm09LmIzMjAxYWQ3Nzg5MVxyXG4gIDwvYT4gPC9wPiBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3Q5ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Gb3IgYWxsIHRoZSBjbGFtb3IgYWJvdXQgQml0Y29pbidzIGNhcmJvbiBmb290cHJpbnQsIHdobyBkb2Vzbid0IGxvdmUgdGhlIHNvdW5kIG9mIG1vbmV5PyAgQW5kLCBmb3IgYWxsIHRoZSBwaXRmYWxscyBvZiBJb3RhIGFuZCB0aGUgZXZlci1ldm9sdmluZyBFdGhlcmV1bSAoYW5kIGV2ZXItcHJlc2VudCB0aHJlYXQgb2YgZm9ya2luZyksIEJpdGNvaW4gc3RhbmRzIHRydWUgYW1vbmcgdGhlIGNyeXB0by1jdXJyZW5jeSBwbGF0Zm9ybXMuIEtlZXBpbmcgaXQgU2ltcGxlLCAgIHRoZSB2ZXJ5IGxpbWl0ZWQsIG5vbi1jcnlwdG8tY29udHJhY3QgbWF5IGp1c3QgYmUgQml0Y29pbidzIHZpcnR1ZS4gSW4gYSByb2NreSB3b3JsZCwgPGk+YSBwbGFpbiwgbm8tZnJpbGxzIGNyeXB0by1jdXJyZW5jeSB3aXRoIHN0YWJpbGl0eTwvaT4gaXMgaW5jb21wYXJhYmxlIHRvIGNyeXB0by1jb250cmFjdCBwb3dlcnMsIHRoYXQgYXJlIG5vdCBmdWxseSBzdGFibGUsIGxpa2UgRXRoZXJldW0gYW5kIElvdGEuICA8L3A+XHJcbiAgPHA+U28sIGl0J3MgbGl2aW5nIHRoZSBkcmVhbSwgYnV0IG11c3QgaXQgYmUgc28gY29zdC1pbnRlbnNpdmU/IE1heWJlLCBNYXliZSBub3QsIGJ1dCB3aGVyZSBkb2VzIHRoZSBmdXR1cmUgbGllIGZvciBhbGwgdGhhdCBoYXJkd2FyZT8gV2hlcmUgZG9lcyB0aGUgYnJvd3NlciBmaXQgaW50byB0aGlzPyBGaXJzdCwgd2hhdCdzIGdvaW5nIG9uIHVuZGVyIHRoZSBob29kOiBOb3RlIHRoaXMgYXJ0aWNsZSBpcyBvbGRlciwgYnV0IGFjY3VyYXRlIGluIGV4cGxhbmF0aW9uLS1leGNlcHQgZm9yIHJlZmVyZW5jZXMgdG8gQml0Y29pbidzIHZhbHVlISA8L3A+ICBcclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+TmV3IGJpdGNvaW5zIGFyZSBjcmVhdGVkIHJvdWdobHkgZXZlcnkgMTAgbWludXRlcyBpbiBiYXRjaGVzIG9mIDI1IGNvaW5zLCB3aXRoIGVhY2ggY29pbiB3b3J0aCBhcm91bmQgJDczMCBhdCBjdXJyZW50IHJhdGVzLiBbQSB0eXBpY2FsIGhvbWUtXSBjb21wdXRlciAuLi4gaXMgcmFjaW5nIHRob3VzYW5kcyBvZiBvdGhlcnMgdG8gdW5sb2NrIGFuZCBjbGFpbSB0aGUgbmV4dCBiYXRjaC48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIExldOKAmXMgc3RhcnQgd2l0aCB3aGF0IGl04oCZcyBub3QgZG9pbmcuICBcclxuICBZb3VyIGNvbXB1dGVyIGlzIG5vdCBibGFzdGluZyB0aHJvdWdoIHRoZSBjYXZlcm5vdXMgZGVwdGhzIG9mIHRoZSBpbnRlcm5ldCBpbiBzZWFyY2ggb2YgZGlnaXRhbCBvcmUgdGhhdCBjYW4gYmUgZmFzaGlvbmVkIGludG8gYml0Y29pbiBidWxsaW9uLiBUaGVyZSBpcyBubyBvcmUsIGFuZCBiaXRjb2luIG1pbmluZyBkb2VzbuKAmXQgaW52b2x2ZSBleHRyYWN0aW5nIG9yIHNtZWx0aW5nIGFueXRoaW5nLiBJdOKAmXMgY2FsbGVkIG1pbmluZyBvbmx5IGJlY2F1c2UgdGhlIHBlb3BsZSB3aG8gZG8gaXQgYXJlIHRoZSBvbmVzIHdobyBnZXQgbmV3IGJpdGNvaW5zLCBhbmQgYmVjYXVzZSBiaXRjb2luIGlzIGEgZmluaXRlIHJlc291cmNlIGxpYmVyYXRlZCBpbiBzbWFsbCBhbW91bnRzIG92ZXIgdGltZSwgbGlrZSBnb2xkLCBvciBhbnl0aGluZyBlbHNlIHRoYXQgaXMgbWluZWQuIChUaGUgc2l6ZSBvZiBlYWNoIGJhdGNoIG9mIGNvaW5zIGRyb3BzIGJ5IGhhbGYgcm91Z2hseSBldmVyeSBmb3VyIHllYXJzLCBhbmQgYXJvdW5kIDIxNDAsIGl0IHdpbGwgYmUgY3V0IHRvIHplcm8sIGNhcHBpbmcgdGhlIHRvdGFsIG51bWJlciBvZiBiaXRjb2lucyBpbiBjaXJjdWxhdGlvbiBhdCAyMSBtaWxsaW9uLikgQnV0IHRoZSBhbmFsb2d5IGVuZHMgdGhlcmUuXHJcbiAgPC9wPjxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBXaGF0IGJpdGNvaW4gbWluZXJzIGFjdHVhbGx5IGRvIGNvdWxkIGJlIGJldHRlciBkZXNjcmliZWQgYXMgY29tcGV0aXRpdmUgYm9va2tlZXBpbmcuIE1pbmVycyBidWlsZCBhbmQgbWFpbnRhaW4gYSBnaWdhbnRpYyBwdWJsaWMgbGVkZ2VyIGNvbnRhaW5pbmcgYSByZWNvcmQgb2YgZXZlcnkgYml0Y29pbiB0cmFuc2FjdGlvbiBpbiBoaXN0b3J5LiBFdmVyeSB0aW1lIHNvbWVib2R5IHdhbnRzIHRvIHNlbmQgYml0Y29pbnMgdG8gc29tZWJvZHkgZWxzZSwgdGhlIHRyYW5zZmVyIGhhcyB0byBiZSB2YWxpZGF0ZWQgYnkgbWluZXJzOiBUaGV5IGNoZWNrIHRoZSBsZWRnZXIgdG8gbWFrZSBzdXJlIHRoZSBzZW5kZXIgaXNu4oCZdCB0cmFuc2ZlcnJpbmcgbW9uZXkgc2hlIGRvZXNu4oCZdCBoYXZlLiBJZiB0aGUgdHJhbnNmZXIgY2hlY2tzIG91dCwgbWluZXJzIGFkZCBpdCB0byB0aGUgbGVkZ2VyLiBGaW5hbGx5LCB0byBwcm90ZWN0IHRoYXQgbGVkZ2VyIGZyb20gZ2V0dGluZyBoYWNrZWQsIG1pbmVycyBzZWFsIGl0IGJlaGluZCBsYXllcnMgYW5kIGxheWVycyBvZiBjb21wdXRhdGlvbmFsIHdvcmvigJR0b28gbXVjaCBmb3IgYSB3b3VsZC1iZSBmcmF1ZHN0ZXIgdG8gcG9zc2libHkgY29tcGxldGUuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPlNvIGFsbCBvZiB0aGlzIGhhcmQgd29yayA8aT5jYW4gYmUgZGlzdHJpYnV0ZWQ8L2k+IGFjcm9zcyBicm93c2Vycywgd2hpY2ggaW1wcm92ZXMgaXRzIGVuZXJneS1leHBlbnNpdmUgcGxpZ2h0LiBJIHdvdWxkbid0IHJlY29tbWVuZCBydW5uaW5nIHRoZSBkZW1vIGluIHRoZSBhcnRpY2xlIGxpbmsgYmVsb3cgYXMgaXQgbWF5IG92ZXJoZWF0IHlvdXIgZGV2aWNlLS1pdCBoYWQgbXkgZmFuIHJ1bm5pbmcgZG91YmxlLXRpbWUuIEJ1dCB0aGUgaW50ZXJuYWxzIGFyZSB1c2luZyBKYXZhU2NyaXB0IGNvZGUgZm9yIHRoZSBtYXRoLiBIZXJlJ3MgYSBsb29rIHVuZGVyIHRoZSBob29kLCBhbmQgaXQncyBuaWNlIHRvIHNlZSB0aGUgcm9sZSBvZiA8aT5KYXZhU2NyaXB0IGdyYXBoaWNzIGxpYnJhcnksIGNhbGxlZCBEM0pTLCAoRGF0YSBEcml2ZW4gRG9jdW1lbnRzKTwvaT4gcGxheWluZyBhIGNlbnRyYWwgcm9sZS4gU28sIGJlbG93IHlvdSBzZWUgdGhlIGJyb3dzZXIgYWNjZXB0aW5nIHRoZSBTSEEyNTYgSGFzaCBhbG9uZyB3aXRoIHRoZSBCaXRjb2luIE93bmVyJ3MgQWRkcmVzcywgYW5kIHRoZSBKYXZhU2NyaXB0IGluIHRoZSBicm93c2VyIHBhc3NlcyBvZmYgY2FsY3VsYXRpb25zIHRvIHRoZSBDKysgcnVubmluZyB0aGUgSmF2YVNjcmlwdCBWOCBlbmdpbmUgb24geW91ciBjb21wdXRlci4gPC9wPlxyXG4gIDxpbWcgc3JjPVwiLi9kaXN0L2ltZy9taW5pbmdCbG9ja2NoYWluRDMuUE5HXCIgY2xhc3M9XCJ6b29tXCIgd2lkdGg9XCI0NTBweFwiIC8+XHJcbiAgPHA+QW5kIHNvLCB3aGF0IGRvZXMgaXQgbWVhbiB0byBtaW5lIEJpdGNvaW5zIGFjcm9zcyBicm93c2VycyBpbiBhIGRpc3RyaWJ1dGVkIGZhc2hpb24/IEl0IGlzIHNpbWlsYXIgdG8gdGhlIHNhbWUgY29uY2VwdCBhcyBFdGhlcmV1bSdzIGRpcmVjdGlvbiAob3IgYXQgbGVhc3QgaWRlYWxpemVkIGJ5IGl0cyBhcmNoaXRlY3QsIFZpdGFsaWsgQnV0ZXJpbiksIGluIHJ1bm5pbmcgdGhlIEV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSBibG9ja2NoYWluIGFjcm9zcyBhbGwgdGhlIGJyb3dzZXJzIHRoYXQgZG93bmxvYWQgaXRzIEdFVEggc29mdHdhcmUuIE5vbmV0aGVsZXNzLCBoZXJlJ3MgYSBzdWNjaW5jdCBleHBsYW5hdGlvbiBvZiB0aGUgYnJvd3NlcidzIHJvbGUsYWdhaW4gZnJvbSBRdWFydHo6IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+TWluaW5n4oCZcyB1bHRpbWF0ZSBwdXJwb3NlIGlzIHRvIHByZXZlbnQgcGVvcGxlIGZyb20gZG91YmxlLXNwZW5kaW5nIGJpdGNvaW5zLiBCdXQgaXQgYWxzbyBzb2x2ZXMgYW5vdGhlciBwcm9ibGVtLiBJdCBkaXN0cmlidXRlcyBuZXcgYml0Y29pbnMgaW4gYSByZWxhdGl2ZWx5IGZhaXIgd2F54oCUb25seSB0aG9zZSBwZW9wbGUgd2hvIGRlZGljYXRlIHNvbWUgZWZmb3J0IHRvIG1ha2luZyBiaXRjb2luIHdvcmsgZ2V0IHRvIGVuam95IHRoZSBjb2lucyBhcyB0aGV5IGFyZSBjcmVhdGVkLlxyXG4gIEJ1dCBiZWNhdXNlIG1pbmluZyBpcyBhIGNvbXBldGl0aXZlIGVudGVycHJpc2UsIG1pbmVycyBoYXZlIGNvbWUgdXAgd2l0aCB3YXlzIHRvIGdhaW4gYW4gZWRnZS4gT25lIG9idmlvdXMgd2F5IGlzIGJ5IHBvb2xpbmcgcmVzb3VyY2VzLjxiciAvPjxiciAvPlxyXG4gIFxyXG4gIFxyXG4gIFlvdXIgbWFjaGluZSwgcmlnaHQgbm93LCBpcyBhY3R1YWxseSB3b3JraW5nIGFzIHBhcnQgb2YgYSBiaXRjb2luIG1pbmluZyBjb2xsZWN0aXZlIHRoYXQgc2hhcmVzIG91dCB0aGUgY29tcHV0YXRpb25hbCBsb2FkLiBZb3VyIGNvbXB1dGVyIGlzIG5vdCB0cnlpbmcgdG8gc29sdmUgdGhlIGJsb2NrLCBhdCBsZWFzdCBub3QgaW1tZWRpYXRlbHkuIEl0IGlzIGNoaXBwaW5nIGF3YXkgYXQgYSBjcnlwdG9ncmFwaGljIHByb2JsZW0sIHVzaW5nIHRoZSBpbnB1dCBhdCB0aGUgdG9wIG9mIHRoZSBzY3JlZW4gYW5kIGNvbWJpbmluZyBpdCB3aXRoIGEgbm9uY2UgW3J1bi10aW1lLCBnZW5lcmF0ZWQgcmFuZG9tIG51bWJlciBjYWxjdWxhdGVkIG9ubHkgb25jZSwgdGhlbiBkaXNjYXJkZWRdLCB0aGVuIHRha2luZyB0aGUgaGFzaCB0byB0cnkgdG8gZmluZCBhIHNvbHV0aW9uLiBTb2x2aW5nIHRoYXQgcHJvYmxlbSBpcyBhIGxvdCBlYXNpZXIgdGhhbiBzb2x2aW5nIHRoZSBibG9jayBpdHNlbGYsIGJ1dCBkb2luZyBzbyBnZXRzIHRoZSBwb29sIGNsb3NlciB0byBmaW5kaW5nIGEgd2lubmluZyBub25jZSBmb3IgdGhlIGJsb2NrLiBBbmQgdGhlIHBvb2wgcGF5cyBpdHMgbWVtYmVycyBpbiBiaXRjb2lucyBmb3IgZXZlcnkgb25lIG9mIHRoZXNlIGVhc2llciBwcm9ibGVtcyB0aGV5IHNvbHZlLjwvcD5cclxuICA8cD5JbiBwcmFjdGljZSwgZGlzdHJpYnV0ZWQgbWluaW5nIHBheXMgb2ZmIHF1aXRlIHdlbGwgICBmb3IgdGhlIG93bmVycyBvZiB0aGF0IGFkZHJlc3MuIE15IGJsb2dwb3N0cyBvbiA8YSBocmVmPVwiIyA8YSBocmVmPVwiIzE4LTAyLTI4XCI+RmVicnVhcnkgMjZ0aCAgPC9hPiBhbmQgPGEgaHJlZj1cIiMxOC0wMi0yOFwiPkZlYi4gMjh0aCBhYm91dCBibG9ja2NoYWluIHN1c3RhaW5hYmlsaXR5PC9hPiBwYWludCBhIGxlc3Mgcm9zeSBwaWN0dXJlIG9mIHR5aW5nIHRoZSBjdXJyZW5jeSB2YWx1ZSB0byB0aGUgY29zdCBvZiBlbmVyZ3ksIGJ1dCBtdWx0aXBsZSBzb2x1dGlvbnMgYW5kIGZpeGVzIGV4aXN0IHRvIGRpc3RyaWJ1dGUgdGhlIGVuZXJneSBsb2FkIHRvIGxhcHRvcHMgb24gY2xlYW4gcmVuZXdhYmxlcywgdGhlIG1pbmluZyBjb29wZXJhdGl2ZSB3YXkgLi4uIGFmdGVyIGFsbCwgd2hvIGV2ZXIgc2FpZCBtb25leSBoYWQgdG8gYmUgc28gZXhwZW5zaXZlPyA8L2E+IFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuPGEgaHJlZj1cImh0dHBzOi8vcXouY29tLzE1NDg3Ny9ieS1yZWFkaW5nLXRoaXMtcGFnZS15b3UtYXJlLW1pbmluZy1iaXRjb2lucy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS8xNTQ4NzcvYnktcmVhZGluZy10aGlzLXBhZ2UteW91LWFyZS1taW5pbmctYml0Y29pbnMvXHJcbiAgPC9hPiAoVGhlIGFydGljbGUgbGluayBpcyBoYXJtbGVzcywgYnV0IHdvdWxkbid0IHJlY29tbWVuZCBydW5uaW5nIGl0IGlmIGxvdyBvbiBiYXR0ZXJpZXMtLWl0IGRvdWJsZWQgdGhlIGZhbiBzcGVlZCk8L3A+ICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3Q4ID0gYCAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiAgRGF0YSBwcml2YWN5IHJlZ3VsYXRpb24ncyBjaGFsbGVuZ2UgYmVnaW5zIHdpdGggZml2ZSBtaWxsaW9uIGFwcHMgYmV0d2VlbiBBcHBsZSBhbmQgQW5kcm9pZCBzdG9yZXMuIENvdW50bGVzcyB2dWxuZXJhYmlsaXRpZXMsIG5vdCB0byBtZW50aW9uIGRpZmZlcmVudCBzdGFuZGFyZHMgYW5kIGxhbmd1YWdlcyBhY3Jvc3MgdGhlIGFwcCB3b3JsZC4gPGk+TGlrZSBhbGwgVGVjaCBwcm9ibGVtcyw8L2k+c2NhbGFiaWxpdHkgcmVxdWlyZXMgVGVjaCBwcm9ibGVtLXNvbHZpbmctLTwvaT5pbiB0aGlzIGNhc2UgaW1wbHlpbmcgYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UuICBBYm91dCBBLkkuLCBadWNrZXJiZXJnIHJlbWFya3M6PC9wPiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBUaGVyZSBhcmUgc29tZSByZWFsbHkgbnVhbmNlZCBxdWVzdGlvbnMsIHRob3VnaCwgYWJvdXQgaG93IHRvIHJlZ3VsYXRlIFtkYXRhXSB3aGljaCBJIHRoaW5rIGFyZSBleHRyZW1lbHkgaW50ZXJlc3RpbmcgaW50ZWxsZWN0dWFsbHkuIFNvIHRoZSBiaWdnZXN0IG9uZSB0aGF0IEnigJl2ZSBiZWVuIHRoaW5raW5nIGFib3V0IGlzIHRoaXMgcXVlc3Rpb24gb2Y6IFRvIHdoYXQgZXh0ZW50IHNob3VsZCBjb21wYW5pZXMgaGF2ZSBhIHJlc3BvbnNpYmlsaXR5IHRvIHVzZSBBSSB0b29scyB0byBraW5kIG9mIHNlbGYtcmVndWxhdGUgY29udGVudD88c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+SG93ZXZlciBzdWNoIG11c2luZyBnb2VzLCB0aGUgRXVyb3BlYW4gVW5pb24ncyBNYXkgMTR0aCBpbXBsZW1lbnRhdGlvbiB0YWtlcyBhIDxpPmRpcmVjdCBzdGFuZCBhZ2FpbnN0IHRoZSBjb25jZXB0IG9mIGFsZ29yaXRobSB1c2Ugd2l0aCBkYXRhPC9pPiwgd2hpY2ggYmVncyB0aGUgQS5JLiBxdWVzdGlvbiBhZ2Fpbi4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgRXVyb3BlYW4gbGF3IGdpdmVzIGluZGl2aWR1YWxzIHRoZSByaWdodCBub3QgdG8gYmUgc3ViamVjdCB0byBjb21wbGV0ZWx5IGF1dG9tYXRlZCAgZGVjaXNpb25zIHdoaWNoIHNpZ25pZmljYW50bHkgYWZmZWN0IHRoZW0uIFRoZXNlIGRlY2lzaW9ucyBjb3VsZCBpbmNsdWRlIGNyZWRpdCBhbGdvcml0aG1zIHRoYXQgdXNlIGFuIGluZGl2aWR1YWzigJlzIGRhdGEgdG8gZGVjaWRlIHdoZXRoZXIgYSBiYW5rIHNob3VsZCBncmFudCBoaW0gb3IgaGVyIGEgbG9hbi4gIFxyXG4gICAgICBQcml2YWN5IEludGVybmF0aW9uYWwgc2FpZCB0aGUgY2xhdXNlIG9uIGF1dG9tYXRlZCBkZWNpc2lvbnMgY291bGQgYWxsb3cgY29uc3VtZXJzIHRvIGNoYWxsZW5nZSBGYWNlYm9vayBwcmFjdGljZXMgbGlrZSBwb2xpdGljYWwgYWR2ZXJ0aXNpbmcsIHdoaWNoIGNhbiBiZSBzZW50IHRvIHVzZXJzIGJhc2VkIG9uIGFsZ29yaXRobXMsIGJlY2F1c2UgdGhlIGFkcyBhcmUgbWVhbnQgdG8gc3dheSB1c2Vyc+KAmSB2b3Rlcy48c3VwPjI8L3N1cD48L3A+XHJcbiAgPHA+SSB0aGluayB0aGUgRS5VLiBkYXRhIHBvbGljeSBtb2RlbCBpcyBpbnRlbGxpZ2VudCAtIHdobyB3b3VsZCBoYXZlIHRob3VnaHQgdG8gcmUtaHVtYW5pemUgb3VyIHBlcnNvbmFsIGRhdGEgICBieSB0YWtpbmcgaXQgYXdheSBmcm9tIGFsZ29yaXRobXMsIHdpdGhvdXQgb3VyIHBlcm1pc3Npb24uIEkgbGlrZSB0aGF0LCBhZnRlciBhbGwsIHdobyBsaWtlcyB0byBiZSB1bmtub3dpbmdseSBqdWRnZWQ/IExlYXN0IG9mIGFsbCBieSBhIHJvYm90IVxyXG5cclxuICA8L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9tYXJrLXp1Y2tlcmJlcmctdGFsa3MtdG8td2lyZWQtYWJvdXQtZmFjZWJvb2tzLXByaXZhY3ktcHJvYmxlbVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9tYXJrLXp1Y2tlcmJlcmctdGFsa3MtdG8td2lyZWQtYWJvdXQtZmFjZWJvb2tzLXByaXZhY3ktcHJvYmxlbVxyXG4gIDwvYT48L3A+ICBcdFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuIDxhIGhyZWY9XCJodHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzA0LzA4L3RlY2hub2xvZ3kvYS10b3VnaC10YXNrLWZvci1mYWNlYm9vay1ldXJvcGVhbi10eXBlLXByaXZhY3ktZm9yLWFsbC5odG1sP3JpYmJvbi1hZC1pZHg9MiZycmVmPXRlY2hub2xvZ3kmbW9kdWxlPVJpYmJvbiZ2ZXJzaW9uPWNvbnRleHQmcmVnaW9uPUhlYWRlciZhY3Rpb249Y2xpY2smY29udGVudENvbGxlY3Rpb249VGVjaG5vbG9neSZwZ3R5cGU9YXJ0aWNsZVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDQvMDgvdGVjaG5vbG9neS9hLXRvdWdoLXRhc2stZm9yLWZhY2Vib29rLWV1cm9wZWFuLXR5cGUtcHJpdmFjeS1mb3ItYWxsLmh0bWwgXHJcbiAgPC9hPiA8L3A+ICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3Q3ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5EYXkgdHdvIG9mIENvbmdyZXNzaW9uYWwgaGVhcmluZ3Mgb3ZlciBGYWNlYm9vaydzIERhdGEgUHJpdmFjeSBhbmQgUHJvdGVjdGlvbnMgIHdlcmUgYmV0dGVyIGFydGljdWxhdGVkIHRoYW4gdGhlIGZpcnN0IGRheS4gSW1wb3J0YW50IGRpYWxvZ3VlIHN1cnJvdW5kZWQgcHJpbWFyaWx5ICAgdHdvIGRhdGEgcHJpdmFjeSB0b3BpY3M6IEZpcnN0LCBmaW5hbmNpYWwgdHJhbnNwYXJlbmN5IHN1cnJvdW5kaW5nIGFkcyBhbmQgcG9saXRpY2FsIGFkcyBiYXNlZCBvbiB0aGUgPGk+SG9uZXN0IEFkcyBBY3Q8L2k+LCBmb3Igd2hpY2ggWnVja2VyYmVyZyBwbGVkZ2VkIHN1cHBvcnQ8c3VwPjE8L3N1cD4uIFxyXG4gIDwvcD5cclxuICA8cD5TZWNvbmQsIGFuZCAgIG1vcmUgZmFyLXJlYWNoaW5nLCBkaXNjdXNzaW9uIG9mIHRoZSA8aT5Ccm93c2VyIEFjdDwvaT4gYWxzbyB3YXMgcmFpc2VkIGJ5IHNldmVyYWwgSG91c2UgbWVtYmVycy4gV2hpbGUgcmVzcG9uZGluZyB0byB0aGUgQWN0J3Mgc3BvbnNvciwgTWFyc2hhIEJsYWNrYnVybiBvZiBUZW5uZXNzZWUsIFp1Y2tlcmJlcmcgZXhwcmVzc2VkIGludGVyZXN0IGluIHdvcmtpbmcgdG9nZXRoZXIuIFRoaXMgYmlsbCBpcyBub3Qgd2VsbCBrbm93biwgYnV0IGFpbXMgdG8gc2V0IHBydWRlbnQsIGNvbnNpc3RlbnQgZ3VpZGVsaW5lcyBvZiBwcml2YWN5IGluIHRoZSBoYW5kcyBvZiB0aGUgY29uc3VtZXIuIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFtCbGFja2J1cm4nc10gbmV3IGJpbGwgdGFyZ2V0cyB0aGUgZnVsbCBzcGVjdHJ1bSBvZiB0aGUgaW50ZXJuZXQsIGluY2x1ZGluZyB3ZWIgZ2lhbnRzIGxpa2UgQW1hem9uIGFuZCBHb29nbGUuIEluIEJsYWNrYnVybuKAmXMgd29yZHMsIGl0IG1vdmVzIHRoZSBnb3Zlcm5tZW50IOKAnHRvIGEgcG9zdHVyZSB3aGVyZSB3ZSBoYXZlIG9uZSByZWd1bGF0b3IsIG9uZSBzZXQgb2YgcnVsZXMgW2FuZF0gZXZlcnlib2R5IGtub3dzIHdob+KAmXMgaW4gY2hhcmdlLOKAnSBzaGUgdG9sZCBSZWNvZGUuPHN1cD4zPC9zdXA+PC9wPlxyXG4gIDxwPlNvLCBob3dldmVyIHRoZSBwb3dlciBzdHJ1Z2dsZSBnb2VzLCBhIDxpPnNoYXJlZCB0ZWNobm9sb2d5IGxleGljb248L2k+IGNsYXJpZmllcyB0aGF0IHNoYWRlcyBvZiBtZWFuaW5nIG1ha2UgZW5vcm1vdXMgZGlmZmVyZW5jZSwgZGVwZW5kaW5nIG9uIFwid2hhdFwiIGFuIGVudGl0eSBpcy0td2hldGhlciBhIHRlY2hub2xvZ3kgaXMgYSBQbGF0Zm9ybSBhcyBhIFNlcnZpY2UgIHZlcnN1cyBtZWRpYSBvdXRsZXQgb3Igc3RyaWN0bHkgbWVyY2hhbnQtYmFzZWQuIEhvcGVmdWxseSwgPGk+VGVjaCB3aWxsIGxlYWQgdGhlIHdheTwvaT4gd2l0aG91dCBjZWRpbmcgYXV0aG9yaXR5IGluIHRoZSBwcm9jZXNzOiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gICAgQnV0IHRoZSBUZW5uZXNzZWUgbGF3bWFrZXLigJlzIGVmZm9ydCBoYXNu4oCZdCB3b24gYW55IGFsbGllcyBhbW9uZyBwcml2YWN5LWNvbnNjaW91cyBjb25zdW1lciBncm91cHMsIGxpa2UgdGhlIEFtZXJpY2FuIENpdmlsIExpYmVydGllcyBVbmlvbiwgd2hpY2ggZG91YnQgQmxhY2tidXJu4oCZcyBtZXRob2RzLiBBbmQgaGVyIGJpbGwgaGFzIGFscmVhZHkgcHJvbXB0ZWQgYSB3aG9sZSBuZXcgcm91bmQgb2YgZmllcmNlIGxvYmJ5aW5nIGJ5IHRlY2ggYW5kIHRlbGVjb20gZ2lhbnRzLCB3aGljaCBkb27igJl0IHNlZSB0aGUgbmVlZCBmb3IgYW55IG5ldyByZWd1bGF0aW9uIGF0IGFsbC5cclxuICAgIDwvcD4gXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIOKAnEkgdGhpbmsgdGhhdCwgaW4gY29uY2VwdCwgdGhlIGlkZWEgdGhhdCB0aGVyZSBzaG91bGQgYmUgc3Ryb25nZXIgcHJpdmFjeSBzdGFuZGFyZHMgZm9yIGVkZ2UgcHJvdmlkZXJzIGFuZCBpbnRlcm5ldCBzZXJ2aWNlIHByb3ZpZGVycyBpcyByaWdodCzigJ0gc2FpZCBOZWVtYSBTaW5naCBHdWxpYW5pLCB0aGUgbGVnaXNsYXRpdmUgY291bnNlbCBhdCB0aGUgQUNMVS48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEJ1dCBCbGFja2J1cm4sIHNoZSBhZGRlZCwgc2hvdWxkIGhhdmUgZ29uZSBhYm91dCBpdCBkaWZmZXJlbnRseS4g4oCcVGhlIHdheSB0byBkbyBpdCB3YXMgbm90IC4uLiBbdGhyb3VnaF0gZ3V0dGluZyB0aGUgRkND4oCZcyBydWxlczsgdGhlIHdheSB0byBkbyBpdCB3YXMgYWN0aXZlbHkgd29ya2luZyBvbiBhIHJlcGxhY2VtZW50LuKAnTxzdXA+Mzwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5UaGUgYmlsbCBpcyBzaW1pbGFyIHRvIHRoZSBFdXJvcGVhbiBkYXRhIHByaXZhY3kgbW9kZWwsIDxpPkUuVS4gR2VuZXJhbCBEYXRhIFByb3RlY3Rpb24gUmVndWxhdGlvbihHRFBSKTwvaT4sIHdoaWNoIHNlcnZlcyBhcyBwb2ludCBvZiByZWZlcmVuY2UuPHN1cD4yPC9zdXA+IE9uIE1heSAxNCwgICBFdXJvcGVhbnMgd2lsbCAgIGJlIGltcGxlbWVudGluZyBhIHBhbi1pbnRlcm5ldC0tZWRnZSBhbmQgSVNQLS1kYXRhIHByb3RlY3Rpb25zLCB3aGljaCBpbmNsdWRlIGUtbWFpbCwgRmFjZWJvb2sgYW5kIG90aGVyIGFwcHMsIGVxdWFsbHkgYXMgZm9yIENvbWNhc3QgYW5kIFZlcml6b24sIGFuZCBpbmR1c3RyeS13aWRlIHByaXZhY3kgZGVmYXVsdHM7IEZ1cnRoZXIsIG9wdC1pbiBmb3IgcHJpdmFjeSBpcyBtb3JlIG1lYW5pbmdmdWwgc2VwYXJhdGUsIGFuZCAgbm90IHJlbGVnYXRlZCB0byB0aGUgbWFpbiBUZXJtcyBhbmQgQ29uZGl0aW9ucy48c3VwPjM8L3N1cD48L3A+XHJcbiAgPHA+UG9saWN5IHJlZ3VsYXRpb24gaW4gb3RoZXIgaW5kdXN0cmllcy0tZXhlbXBsaWZpZWQgYnkgbWVkaWNhbCA8aT5ISVBBQTwvaT4sIGZpbmFuY2lhbCA8aT5GYWlyIENyZWRpdCAgIFJlcG9ydGluZyBBY3Q8L2k+LS1yZXZlYWxzIHRoZSBub3RpY2VhYmxlIGFic2VuY2Ugb2Ygc2ltaWxhciBwb2xpY3kgaW4gVGVjaC4gVGVjaCdzIHJlZ3VsYXRpb24gaXMgaG93ZXZlciBuZWNlc3NhcmlseSBmYXIgbW9yZSBjb21wbGV4LCBpbnZvbHZpbmcgYXQgbWluaW11bSB0cmFkZS1vZmZzIGJldHdlZW4gYXBwLXRvLWFwcCBkYXRhIHBvcnRhYmlsaXR5IGFuZCBuZXcgYm91bmRhcmllcyBmb3IgZGlmZmVyZW50IHNvdXJjZXMgYW5kIGZvcm1zIG9mIGRhdGEuIENsZWFybHksIHRoZSBicm93c2VyLWJhc2VkLCBoaWdoLXNlY3VyaXR5IEhUVFBTIEVuY3J5cHRpb24gSSBtZW50aW9uZWQgaW4gbXkgPGEgaHJlZj1cIiMxOC0wNC0wNlwiPkFwcmlsIDYgdGhyZWUtcGFydCBzZXJpZXMgb24gUHJvZ3Jlc3NpdmUgV2ViIEFwcHMgPC9hPndpbGwgdW5kb3VidGVkbHkgYmUgdXNlZCBmb3IgcXVpY2ssIGluZXhwZW5zaXZlIGRhdGEgcHJpdmFjeSBjb21wbGlhbmNlLCA8aT5hIHJlYWwgYm9vbiBmb3IgSmF2YVNjcmlwdCBkZXZlbG9wZXJzPC9pPi0tYXMgaWYgdGhlcmUgd2Fzbid0IGVub3VnaCB3b3JrIGFscmVhZHkhXHJcbiAgPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZXVnZHByLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmV1Z2Rwci5vcmdcclxuICA8L2E+PC9wPiAgXHJcbiAgXHJcbiAgICAgICAgICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cucmVjb2RlLm5ldC8yMDE3LzUvMjQvMTU2ODU4NzAvbmV3LXJlcHVibGljYW4tcHJpdmFjeS1iaWxsLXRlY2gtdGVsZWNvbS1sb2JieWluZy1mY2MtY29uZ3Jlc3NcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5yZWNvZGUubmV0LzIwMTcvNS8yNC8xNTY4NTg3MC9uZXctcmVwdWJsaWNhbi1wcml2YWN5LWJpbGwtdGVjaC10ZWxlY29tLWxvYmJ5aW5nLWZjYy1jb25ncmVzc1xyXG4gICAgICAgICAgPC9hPjwvcD4gIFxyXG4gICAgICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOC8wNC8wOC90ZWNobm9sb2d5L2EtdG91Z2gtdGFzay1mb3ItZmFjZWJvb2stZXVyb3BlYW4tdHlwZS1wcml2YWN5LWZvci1hbGwuaHRtbD9yaWJib24tYWQtaWR4PTImcnJlZj10ZWNobm9sb2d5Jm1vZHVsZT1SaWJib24mdmVyc2lvbj1jb250ZXh0JnJlZ2lvbj1IZWFkZXImYWN0aW9uPWNsaWNrJmNvbnRlbnRDb2xsZWN0aW9uPVRlY2hub2xvZ3kmcGd0eXBlPWFydGljbGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzA0LzA4L3RlY2hub2xvZ3kvYS10b3VnaC10YXNrLWZvci1mYWNlYm9vay1ldXJvcGVhbi10eXBlLXByaXZhY3ktZm9yLWFsbC5odG1sIFxyXG4gICAgICA8L2E+IDwvcD4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjQuIDxhIGhyZWY9XCJodHRwczovL3d3dy5yZXV0ZXJzLmNvbS9hcnRpY2xlL3VzLWZhY2Vib29rLXByaXZhY3ktenVja2VyYmVyZy96dWNrZXJiZXJnLXJlc2lzdHMtZWZmb3J0LWJ5LXUtcy1zZW5hdG9ycy10by1jb21taXQtaGltLXRvLXJlZ3VsYXRpb24taWRVU0tCTjFISDFDVVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtZmFjZWJvb2stcHJpdmFjeS16dWNrZXJiZXJnL3p1Y2tlcmJlcmctcmVzaXN0cy1lZmZvcnQtYnktdS1zLXNlbmF0b3JzLXRvLWNvbW1pdC1oaW0tdG8tcmVndWxhdGlvbi1pZFVTS0JOMUhIMUNVXHJcbiAgPC9hPjwvcD4gIGA7XHJcblxyXG4gIHZhciBibG9ncG9zdDYgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5NYXJrIFp1Y2tlcmJlcmcgZGFmdGx5IHBsYXllZCB3b3JkLXRlbm5pcyB3aXRoICAgU2VuYXRvcnMgaW4gdGhlIGZpcnN0IGRheSBvZiBDb25ncmVzc2lvbmFsIEhlYXJpbmdzIG9uIEZhY2Vib29rIERhdGEgUHJpdmFjeSBpc3N1ZXMuIEFsdGhvdWdoLCBpbiB0aGlzIGNhc2UsIDxpPnRoZXJlIHdlcmUgdHdvLCBhdCB0aW1lcyB0aHJlZSwgdGVubmlzIGJhbGxzIGF0IHBsYXkhPC9pPiBXaGF0IEkgbWVhbiBpcyB0aGF0IFwiRGF0YVwiIGFuZCBcIlBlcnNvbmFsIERhdGFcIiB2YWNjaWxhdGVkIGluIG1lYW5pbmc6ICBBdCB0aW1lcywgU2VuYXRvcnMnIHF1ZXN0aW9ucyByZWZlcnJlZCB0bywgMS4pIHBlcnNvbmFsbHkgaWRlbnRpZmlhYmxlIGRhdGEgd2l0aCBpbnRpbWF0ZSBwZXJzb25hbCBkZXRhaWxzLCBmdWxsIG5hbWUsIGxvY2F0aW9uIGRhdGEgKHNlbnNpdGl2ZS1kYXRhKTsgMi4pIE90aGVyIHRpbWVzIHF1ZXN0aW9ucyByZWZlcnJlZCB0byA8aT5kZXJpdmF0aXZlIGRhdGEsIGkuZS4gZGF0YSB3cmFuZ2xlZCwgcmVmaW5lZCwgbWVyZ2VkIHdpdGggZGlmZmVyZW50IGRhdGFzZXRzPC9pPiAoY29tcG9zaXRlLWRhdGEpOyBhbmQsICAzLikgc29tZXRpbWVzIHRoZSBxdWVzdGlvbnMgbWVhbnQgdGhlIGhhcm1sZXNzLCBpZGVudGl0eS1lbmNyeXB0ZWQgXCJhZC1kYXRhXCIoYW5vbnltaXplZC1kYXRhKTsgYnV0LCB1c3VhbGx5LCBadWNrZXJiZXJnIHJlc3BvbmRlZCB0byBhIHF1ZXN0aW9uIGFib3V0IG9uZSBvZiB0aGVzZSB0aHJlZSBtZWFuaW5ncyBvZiBcInBlcnNvbmFsIGRhdGFcIiwgYnkgcmVzcG9uZGluZyB3aXRoIGEgbm9uLWFic3RyYWN0IGZvdXJ0aDogNC4pIFwiU2VuYXRvciwgdGhlIGRhdGEsIHRoZSAnbGlrZXMnIGFuZCBwaWN0dXJlcyB5b3Ugc2hhcmUgd2l0aCBGYWNlYm9vaywgdGhleSBhcmUgeW91ciBwcm9wZXJ0eSxcIiBadWNrZXJiZXJnIHdvdWxkIGFuc3dlci4gV2VsbCwgdGhhbmsgZ29vZG5lc3MhIDwvcD5cclxuICA8cD4gTXkgYmxvZ3Bvc3QgdGFsa3MgYWJvdXQgdGhlIHNoYWRlcyBvZiBtZWFuaW5nOiBXZSBhbGwga25vdyB0aGUgbGlnaHQtaGVhcnRlZCBhd2t3YXJkbmVzcyB3aGVuIGEgY29udmVyc2F0aW9uIHNwbGl0cyBpbnRvIHR3byBzZXBhcmF0ZSB0aHJlYWRzIGJlY2F1c2UgZWFjaCBwYXJ0eSB1bmtub3dpbmdseSBmb2xsb3dzIGRpZmZlcmluZyBtZWFuaW5ncyBmcm9tIHRoZSBzYW1lIHdvcmQsIG9yIGlkZWEuICBBdXN0aW4gUG93ZXJzIHdvdWxkIGhhdmUgbW9yZSBmdW4gd2l0aCBpdCwgYnV0IHRoZSBTb2Npb2xvZ2lzdHMgdHlwaWNhbGx5IGNhbGwgaXQgIGEgPGk+U2VtYW50aWMgUHJlZGljYW1lbnQ8L2k+LjxzdXA+MTwvc3VwPjwvcD4gXHJcbiAgPHA+SW4gZmFpcm5lc3MsIE1hcmsgWnVja2VyYmVyZyB2b2x1bnRlZXJlZCBhcyBoZSBoaW1zZWxmIHdhcyBub3Qgc3VicG9lbmFlZCwgYW5kIHRoZXJlZm9yZSB0aGlzIHByZWxpbWluYXJ5LCBwdWJsaWMgZGlzY291cnNlIHdhcyBjcml0aWNhbCBmb3IgY3JlYXRpbmcgc2hhcmVkIG1lYW5pbmcgYW5kIGxhbmd1YWdlIGFib3V0IGEgY29tcGxleCB0b3BpYy4gQnkgdm9sdW50ZWVyaW5nIHRvIGVuZ2FnZSBjb252ZXJzYXRpb24gd2l0aCBTZW5hdG9ycywgWnVja2VyYmVyZyBpbnRlcnJ1cHRzIHRoZSA8aT5nYW1lIG9mIHRlbGVwaG9uZTwvaT47IGFuZCwgU2VuYXRvcnMgZW5nYWdlIHdpdGggdGhlaXIgY29uc3RpdHVlbnRzLCBhbmQgbG8sIEFtZXJpY2Egc2F2ZXMgdHdvIHllYXJzJyBvZiBtaXN1bmRlcnN0YW5kaW5ncyBmb3IgY2xlYXIgZGF0YS1wcm90ZWN0aW9uIGFjdGlvbiBub3cuIEJyYXZvLCBNYXJrISBadWNrZXJiZXJnIGlzIHBlcmhhcHMgb25lIG9mIHRoZSBicmF2ZXIgQ0VPcyBpbiBBbWVyaWNhbiBoaXN0b3J5LS1Ob3csIGhlIGhhcyBlYXJuZWQgaGlzIHBsYWNlIHJpZ2h0IG5leHQgdG8gQW5kcmV3IENhcm5lZ2llLS1hbmQgdmVyeSBzaW1pbGFyIGxpdmVzLCB0b28uIEFuZCBub3csIHdpdGggZGVmaW5lZCBib3VuZGFyaWVzLCA8aT5UZWNoIGhhcyBhIGJldHRlciByb2FkbWFwPC9pPiBmb3IgZXRoaWNhbCBwb2xpY3kgYW5kIHNlbnNpYmxlIHJlZ3VsYXRpb24uIFNvIGxldCB0aGUgZGF0YSBkZWJhdGVzIGJlZ2luLS1idXQgdGhpcyB0aW1lLHdpdGggb25seSBvbmUgICBiYWxsIGF0IHBsYXkhIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvZnVsbC8xMC4xMTExL2ouMTQ2Ny05NTU4LjIwMDguMDAzMjQueFwiIHRhcmdldD1cIl9ibGFua1wiPkFiZW5kLCBHLiAoMjAwOCkuIFRoZSBtZWFuaW5nIG9mIOKAmHRoZW9yeeKAmS4gU29jaW9sb2dpY2FsIFRoZW9yeSwgMjYoMiksIDE3My0xOTkuXHJcbiAgPC9hPiA8YnIgLz48YSBocmVmPVwiaHR0cHM6Ly9wZGZzLnNlbWFudGljc2Nob2xhci5vcmcvNmRmMi85ZTE5Y2IwMmI2ODRlZTM4NzE5MmRmYTRiMWQyODRiODgxNDMucGRmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+UERGICA8L2E+XHJcbiAgPC9wPiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9tYXJrLXp1Y2tlcmJlcmctdGFsa3MtdG8td2lyZWQtYWJvdXQtZmFjZWJvb2tzLXByaXZhY3ktcHJvYmxlbVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9tYXJrLXp1Y2tlcmJlcmctdGFsa3MtdG8td2lyZWQtYWJvdXQtZmFjZWJvb2tzLXByaXZhY3ktcHJvYmxlbVxyXG4gIDwvYT5cdDwvcD4gYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0NSA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UHN5Y2hvbWV0cmljcywgYWxvbmcgd2l0aCB0b2RheSdzIGJpb21ldHJpY3MgYW5kIGVjb25vbWV0cmljcywgZm9ybSB0aGUgMyBwcmltYXJ5IGRvbWFpbnMgb2Ygc3RhdGlzdGljYWwgcmVzZWFyY2guIFRoZXNlIHRocmVlIGZpZWxkcyBhcHByb2FjaCByZXNlYXJjaCBkaWZmZXJlbnRseS4gUHN5Y2hvbWV0cmljaWFucyBhcmUgbGVzcyBjYXVzYWxseSBvcmllbnRlZCwgYXMgdGhlaXIgdG9vbCwgXCJmYWN0b3IgYW5hbHlzaXNcIi0tPGk+YW5hbHlzZSBmYWN0b3JpZWxsZTwvaT4tLXJlZHVjZXMgY29tcGxleCBkYXRhIHRvIGRpbXBsZSwgY2F0ZWdvcmljYWwgZm9ybXMgaW4gb3JkZXIgdG8gcmVjb25jaWxlIDxpPnF1YW50aXRhdGl2ZSBkYXRhPC9pPiB3aXRoIGludHVpdGl2ZSBjYXRlZ29yaWVzLjxzdXA+MS48L3N1cD4gQW5kIHRoaXMgcmVzZWFyY2ggaXMgZ3JlYXQgZm9yIGV4cGFuZGluZyBrbm93bGVkZ2UgYWJvdXQgc29jaWV0eS4gQnV0IHRvIHdoYXQgZW5kPyBXaG8ncyB0byBzYXksIGFmdGVyIGFsbCBzb2NpZXR5IGlzIGJvdGggdGhlIHN1YmplY3QgPGk+YW5kPC9pPiBvYmplY3Qgb2YgdGhpcyByZXNlYXJjaC4gU29jaWFsIHNjaWVudGlzdHMgYXJlIHVzZWQgdG8gdGhlc2UgbWVudGFsIGd5bW5hc3RpY3MsIHlldCBhcmUgYm91bmQgYnkgYSBjZXJ0YWluIGV0aG9zIG9mIHJlc2VhcmNoOiA8c3Ryb25nPkFub255bWl6YXRpb24sIGkuZS4gZW5jcnlwdGluZyBvciByZW1vdmluZyBwZXJzb25hbGx5IGlkZW50aWZpYWJsZSBpbmZvcm1hdGlvbiBmcm9tIGRhdGFzZXRzPC9zdHJvbmc+LiBUaGlzIGlzIHRoZSBTb2NpYWwgU2NpZW50aXN0cycgPGk+T2F0aDwvaT4tLWEgbGluZSBvZiBkZWNlbmN5LiA8L3A+XHJcbjxwPlRvbW9ycm93LCBUdWVzZGF5IGF0IG5vb24sIHRoZSB3b3JsZCB3aWxsIHR1bmUgaW4gdG8gaGVhciBNYXJrIFp1Y2tlcmJlcmcncyB0ZXN0aW1vbnkgYmVmb3JlIHRoZSBVLlMuIENvbmdyZXNzLCBhbGwgdG8gaGVhciBhYm91dCBGYWNlYm9vayAmYW1wOyBjb21wYW55J3MgbGluZSBvZiBkZWNlbmN5LiBIb3dldmVyIGluZGVjZW50IGFueSByZXZlbGF0aW9ucyBtYXkgYmUsIEknbSBub3QgdGhhdCBlbnRpcmVseSB0aHJlYXRlbmVkIGJ5IHRoZSByZXZlbGF0aW9ucy4gTWF5YmUgSSB3b24ndCBhZG1pdCBJJ20gICBwcm9uZSB0byBTb2NpYWwgTWVkaWEgaW5mbHVlbmNlLCBiZWNhdXNlIEkgY2hhcnQgbXkgY291cnNlLiBIZXJlJ3MgbW9yZSBmcm9tIHRoZSBlc3RlZW1lZCBBYmJvdHQ6IDwvcD4gXHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+4oCcV2UgaGF2ZSBlbmRlZCB1cCBiZWxpZXZpbmcgdGhhdCBzb2NpYWwgcmVhbGl0eSBpcyBkZXRlcm1pbmVkIGluIHRoZSBtYWluIGJ5IGNlcnRhaW4gZ2VuZXJhbCBmb3JjZXMsIGFuZCB0aGF0IHRoZXNlIGdlbmVyYWxpdGllcyBhcmUgdGhlbiBzcGVjaWZpZWQgYnkgY29tYmluYXRpb25zIG9mIGZvcmNlcywgYW5kIGZ1cnRoZXIgbGltaXRlZCBieSB2YXJpb3VzIGFzcGVjdHMgb2Yg4oCcaW5kaXZpZHVhbGl0eSzigJ0gd2hpY2ggaW4gdGhpcyBzZW5zZSBpcyBiZXN0IHVuZGVyc3Rvb2QgYXMgaWRpb3N5bmNyYXRpYyBoaWdoZXIgb3JkZXIgaW50ZXJhY3Rpb24u4oCdPHN1cD4xPC9zdXA+IDwvcD5cclxuPHA+QW5kIHNvLCB3aGlsZSBhY2FkZW1pYyByZXNlYXJjaCBmb2N1c2VzIG9uIHRoZSBcImdlbmVyYWwgZm9yY2VzXCIgdG8gYmV0dGVyIHVuZGVyc3RhbmQgaG93IGdyb3VwcyB3b3JrIHRvZ2V0aGVyLCB0aGUgPHN0cm9uZz5iYWQgdGhpbmcgdGhhdCBadWNrZXJiZXJnIGRpZDwvc3Ryb25nPiBpcyBub3QgZm9sbG93aW5nIGluIHRoZSBzYW1lIHNwaXJpdCBvZiBnZW5lcmFsaXR5LjxzdXA+Mjwvc3VwPiBUaGV5IGNob3NlIHRvIGNvbGxlY3QgYW5kIGRpc3NlbWluYXRlIG91ciBcImxpa2VzXCIgYXMgbXVjaCBhcyBvdXIgbG9jYXRpb25zLCBhbmQgLi4uIHdhaXQgZm9yIHRoZSBvbWlub3VzIG11c2ljIC4uLiB0aGUgPGk+PHN0cm9uZz5ub24tRkIgY29ubmVjdGVkIG1vYmlsZSBjb250YWN0cyBvZiB0aGUgRmFjZWJvb2sgY2xpZW50cycgcGVyc29uYWwgY2VsbC1waG9uZXM8L3N0cm9uZz48L2k+LS1mbGlwcGluZyB0aHJvdWdoIHNvbWVvbmUncyBwZXJzb25hbCBkZXNrIGRyYXdlciBpcyBkZWZpbml0ZWx5IHB1c2hpbmcgdGhlIHJ1bGVzIG9mIHByaXZhY3kuIEkgYWRkcmVzc2VkIHRoaXMgaXNzdWUgaW4gbXkgPGEgaHJlZj1cIiMxOC0wMy0yMFwiPk1hcmNoIDIwdGggYmxvZyBwb3N0PC9hPiBvbiBGYWNlYm9vaydzIGV0aGljcyB2ZXJzdXMgdGhlIGxvbmctc3RhbmRpbmcgZGF0YS1oYW5kbGluZyBldGhpY3MgZnJvbSBBY2FkZW1pYS4gUmVnYXJkaW5nIHRvbW9ycm93J3MgcmV2ZWxhdGlvbnMsIGxldCdzIHJlbWVtYmVyIHRvIGdpdmUgdGhlIGd1eSBiZW5lZml0IG9mIHRoZSBkb3VidCwgZXZlbiBpZiB0aGV5IHdlcmUgaGFuZGlseSBzd2luZGxlZCwgd2hpbGUgdGhleSB3ZXJlIHN3aW5kbGluZyB1cy48c3VwPjM8L3N1cD5cclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHA6Ly9qb3VybmFscy5zYWdlcHViLmNvbS9kb2kvYWJzLzEwLjExNzcvMDA0OTEyNDE5ODAyNzAwMjAwMlwiIHRhcmdldD1cIl9ibGFua1wiPkFiYm90dCwgQS4gMTk5OC4g4oCcIFRoZSBDYXVzYWwgRGV2b2x1dGlvbi7igJ0gU29jaW9sb2dpY2FsIE1ldGhvZHMgJmFtcDsgUmVzZWFyY2guXHJcblxyXG48L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOC8wNC8wOC91cy9mYWNlYm9vay11c2Vycy1kYXRhLWhhcnZlc3RlZC1jYW1icmlkZ2UtYW5hbHl0aWNhLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzA0LzA4L3VzL2ZhY2Vib29rLXVzZXJzLWRhdGEtaGFydmVzdGVkLWNhbWJyaWRnZS1hbmFseXRpY2EuaHRtbFxyXG48L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2RpZC1jYW1icmlkZ2UtYW5hbHl0aWNhLWFjY2Vzcy15b3VyLWZhY2Vib29rLWRhdGEvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2RpZC1jYW1icmlkZ2UtYW5hbHl0aWNhLWFjY2Vzcy15b3VyLWZhY2Vib29rLWRhdGEvXHJcbjwvYT48L3A+YDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0NCA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlJldm9sdXRpb25zIGNvbWUgYW5kIHJldm9sdXRpb25zIGdvLCBidXQgdGhlIDxpPjJuZCBhcHAgcmV2b2x1dGlvbjwvaT4gaXMgYWxyZWFkeSB1bmRlcndheSwgYWxiZWl0IHF1aWV0bHkuPHN1cD4xPC9zdXA+IE1vc3QgbWVkaWEgc291cmNlcyByZWZlciB0byBhIFwiTmF0aXZlIEFwcCAtIFByb2dyZXNzaXZlIFdlYiBBcHAgRGViYXRlXCIgd2l0aCBlbXBoYXNpcyBvbiB3aGF0IHRoZSBuYXRpdmUgYXBwIGNhbiBhbHJlYWR5IGRvLS08aT5zbyBpZiBpdCdzIG5vdCBicm9rZSwgZG9uJ3QgZml4IGl0PC9pPi4gSG93ZXZlciwgaW1wbGljYXRpb25zIGNoYW5nZSBhcyB0aGUgY29udmVyc2F0aW9uIHR1cm5zIHRvIHRoZSBIeXBlciBUZXh0IFRyYW5zZmVyIFByb3RvY29sIChIVFRQKSBDaHJvbWUgVi04IEphdmFTY3JpcHQgRW5naW5lPHN1cD4yPC9zdXA+LS15b3Uga25vdywgdGhlIHdlYi1hcHAgb24gPGk+c3Rlcm9pZHM8L2k+ISA8L3A+XHJcbiAgPHA+U28gd2hhdCBraW5kIG9mIHN0ZXJvaWRzIHlvdSBhc2s/IExldCB1cyBzYXkgdGhhdCB0aGUgcG93ZXIgb2YgdGhlIG1vZGVybiBicm93c2VyIGxpZXMgaW4gdGhlIG9wZW4tc291cmNlIEphdmFTY3JpcHQgZW5naW5lLCBmaXJzdCBDKysgdmFyaWF0aW9uIDxpPm9yaWdpbmFsbHkgPC9pPmludHJvZHVjZWQgaW4gMjAwOCBieSBHb29nbGUncyBDaHJvbWl1bSBwcm9qZWN0LiBPcGVuLXNvdXJjZTxpPi13aG8/PC9pPiAoY2xvc2UgeW91ciBleWVzIG5leHQgcGFyYWdyYXBoIGZvciB0aGUgamFyZ29uLXdhcnkhKSA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkEgSmF2YVNjcmlwdCBlbmdpbmUgaXMgYSBwcm9ncmFtIG9yIGFuIGludGVycHJldGVyIHdoaWNoIGV4ZWN1dGVzIEphdmFTY3JpcHQgY29kZS4gQSBKYXZhU2NyaXB0IGVuZ2luZSBjYW4gYmUgaW1wbGVtZW50ZWQgYXMgYSBzdGFuZGFyZCBpbnRlcnByZXRlciwgb3IganVzdC1pbi10aW1lIGNvbXBpbGVyIHRoYXQgY29tcGlsZXMgSmF2YVNjcmlwdCB0byBieXRlY29kZSBpbiBzb21lIGZvcm0uPHN1cD4yPC9zdXA+PC9wPlxyXG4gIDxwPkluIHBsYWluIGVuZ2xpc2gsIHRoaXMgbWVhbnMgdGhhdCB0aGUgYnJvd3NlciBzcGVha3MgZGlyZWN0bHkgdG8gbWFjaGluZSBjb2RlLCBhbmQgdGhpcyBpcyBhIGJpZyBkZWFsLiBIYXBwaWx5ICdyb2lkZWQsIHRoZSBicm93c2VyIG5vdyBhY2NvbW9kYXRlcyB0YXNrcyB0aGF0IHRoZSBcIkFwcFwiIHdhcyBpbnZlbnRlZCBmb3I6IDxpPlRvIGRpcmVjdCBzZXJ2aWNlIHdvcms8L2k+LS1pbWFnZSBhbmQgZGF0YSBsb2FkaW5nLCBjYWNoaW5nLCBzdG9yYWdlLCBvZmZsaW5lIGRhdGEsIGljb25zLCBub3RpZmljYSAgICAgICB0aW9ucywgZXRjLiA8L3A+XHJcbiAgPHA+Tm93LCB0aHJvdWdoIGEgXCJNYW5pZmVzdFwiIGZpbGUgcHJvdmlkZWQgdG8gdGhlIGRldmljZSBmcm9tIHRoZSBicm93c2VyLCBhbGwgb2YgdGhvc2Ugc2FtZSB0YXNrcyBhcmUgYWNjb21wbGlzaGVkIHRocm91Z2ggYSBzZXJpZXMgb2YgaGFuZHNoYWtlcywgYW5kIHZvaWwmYWFjdXRlOzogdGhlIG1vYmlsZSBkZXZpY2UgZG9lc24ndCBzZWUgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIG5hdGl2ZSBhcHAgYW5kLCB3ZWxsIC4uLiBhIDxpPnByb2dyZXNzaXZlIGFwcCE8L2k+PC9wPlxyXG4gIDxwPlRoZXkgc2F5IEhpc3RvcnkgcmVwZWF0cyBpdHNlbGYuIEluIG91ciBkaWdpdGFsIGxpZmV0aW1lLCB3ZSBoYXZlIHNlZW4gPGk+cmVjb3JkIHNhbGVzPC9pPiBzdXJwYXNzIGRpZ2l0YWwgZG93bmxvYWRzIGFnYWluIChkdWUgdG8gc3RyZWFtaW5nKTsgd2UgaGF2ZSBzZWVuIHRoZSBvcmlnaW5hbGx5LWRlY2VudHJhbGl6ZWQgaW50ZXJuZXQgcmV0dXJuLCBvciBhdCBsZWFzdCBiZWdpbiB0aGUgam91cm5leSwgYmFjayB0byBkZWNlbnRyYWxpemF0aW9uISBBbmQgbm93LCB3ZSBoYXZlIHRoZSBvbmNlLWxvd2x5IGJyb3dzZXIgcmV0dXJuIHdpdGggYSB2ZW5nZWFuY2UgYW5kIHN0cmVuZ3RoIHRvIHJlcGxhY2UgbmF0aXZlIGFwcHMsIHdpdGggZW5jcnlwdGVkIHNlY3VyaXR5LCBpbnN0YW50IGxvYWRpbmcsIGFuZCA8aT5iZXR0ZXI8L2k+IG9mZi1saW5lIGNhY2hpbmchIERvIHlvdSBoYXZlIGFuIGFwcCBmb3IgdGhhdD88L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMvZm9yYmVzdGVjaGNvdW5jaWwvMjAxOC8wMy8wOS93aHktcHJvZ3Jlc3NpdmUtd2ViLWFwcHMtd2lsbC1yZXBsYWNlLW5hdGl2ZS1tb2JpbGUtYXBwcy8jM2YzOWI0ZmEyMTEyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9mb3JiZXN0ZWNoY291bmNpbC8yMDE4LzAzLzA5L3doeS1wcm9ncmVzc2l2ZS13ZWItYXBwcy13aWxsLXJlcGxhY2UtbmF0aXZlLW1vYmlsZS1hcHBzLyMzZjM5YjRmYTIxMTI8L2E+PC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL2Jsb2cuc2Vzc2lvbnN0YWNrLmNvbS9ob3ctamF2YXNjcmlwdC13b3Jrcy1pbnNpZGUtdGhlLXY4LWVuZ2luZS01LXRpcHMtb24taG93LXRvLXdyaXRlLW9wdGltaXplZC1jb2RlLWFjMDg5ZTYyYjEyZVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vYmxvZy5zZXNzaW9uc3RhY2suY29tL2hvdy1qYXZhc2NyaXB0LXdvcmtzLWluc2lkZS10aGUtdjgtZW5naW5lLTUtdGlwcy1vbi1ob3ctdG8td3JpdGUtb3B0aW1pemVkLWNvZGUtYWMwODllNjJiMTJlPC9hPjwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QzID0gYCAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRvZGF5J3MgV2ViIEJyb3dzZXJzLCAmYWdyYXZlOyBsYSBGaXJlZm94LCBDaHJvbWUsIE9wZXJhLCBldGMuLCBhcmUgPGk+dW5hYmFzaGVkbHkgb24gc3Rlcm9pZHM8L2k+LiBBbmQsIHdlbGwgdGhleSBkZXNlcnZlIHRvIGJlLS10aGV5IHdlcmUgaGVyZSBmaXJzdCEgTW9yZSBpbXBvcnRhbnRseSwgdGhlIGJyb3dzZXIncyBuYXRpdmUgbGFuZ3VhZ2UtLUphdmFTY3JpcHQtLWhhcyBiZWVuIGdyYW50ZWQgZnVsbCBwb3dlciBvZiB0aGUgZW50aXJlIHdlYidzIGJhY2tlbmQsIGkuZS4gc2VydmVycywgZGF0YSwgdG9kb3MuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYnJvd3NlciBhY2hpZXZlcyBpbnN0YW50IGxvYWRpbmcsIDxpPmZ1bGx5IHByb2dyZXNzaXZlLCBkZXZpY2UtcmVzcG9uc2l2ZSw8L2k+IGZ1bGwgPGk+SFRUUFM8L2k+LWVuY3J5cHRpb24gc2VjdXJpdHksIGFuZCBjb2hlcmVudCBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkuIFNvIHRoYXQgeW91ciBmYXZvcml0ZSAgIGFwcHMgbG9vayBhbmQgaW50ZXJhY3QgdGhlIHNhbWUgYmV0d2VlbiB0aGUgYXJyYXkgb2YgYnJvd3NlciBjaG9pY2VzLiBUaGUgV2FzaGluZ3RvbiBQb3N0IGhhcyBiZWVuIGxhdWRlZCBmb3IgaGVscGluZyBwaW9uZWVyIHRoZSB0ZWNobm9sb2d5LiBNb3N0IG5vdGFibHksIHRoZWlyIHByb2dyZXNzaXZlIHdlYiBhcHAgbG9hZHMgaW4gLjkgb2YgYSBzZWNvbmQsIHdoaWxlIHRoZWlyIG5hdGl2ZSBtb2JpbGUgYXBwIHJlcXVpcmVzIDIuOSBzZWNvbmRzLjxzdXA+Mzwvc3VwPiBOb3QgZXhhY3RseSBhIHBob3RvIGZpbmlzaCE8L3A+XHJcblxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy50ZWNocmVwdWJsaWMuY29tL2FydGljbGUvaG93LXByb2dyZXNzaXZlLXdlYi1hcHBzLXByb21pc2UtdG8tdXBlbmQtbmF0aXZlLW1vYmlsZS1hcHBzL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRlY2hyZXB1YmxpYy5jb20vYXJ0aWNsZS9ob3ctcHJvZ3Jlc3NpdmUtd2ViLWFwcHMtcHJvbWlzZS10by11cGVuZC1uYXRpdmUtbW9iaWxlLWFwcHMvPC9hPjwvcD5cclxuXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZhc3Rjb21wYW55LmNvbS8zMDYzNDIwL2hvdy1nb29nbGUtYW5kLW90aGVycy1hcmUtcGxvdHRpbmctdGhlLXJldmVuZ2Utb2YtdGhlLXdlYi1hcHBcInRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmZhc3Rjb21wYW55LmNvbS8zMDYzNDIwL2hvdy1nb29nbGUtYW5kLW90aGVycy1hcmUtcGxvdHRpbmctdGhlLXJldmVuZ2Utb2YtdGhlLXdlYi1hcHA8L2E+PC9wPiAgXHJcblxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuIDxhIGhyZWY9XCJodHRwczovL3d3dy53ZWJieWF3YXJkcy5jb20vd2lubmVycy8yMDE3L21vYmlsZS1zaXRlcy1hcHBzL2ZlYXR1cmVzLWNhdGVnb3JpZXMvdGVjaG5pY2FsLWFjaGlldmVtZW50L3Byb2dyZXNzaXZlLXdlYi1hcHAtYnktdGhlLXdhc2hpbmd0b24tcG9zdC9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53ZWJieWF3YXJkcy5jb20vd2lubmVycy8yMDE3L21vYmlsZS1zaXRlcy1hcHBzL2ZlYXR1cmVzLWNhdGVnb3JpZXMvdGVjaG5pY2FsLWFjaGlldmVtZW50L3Byb2dyZXNzaXZlLXdlYi1hcHAtYnktdGhlLXdhc2hpbmd0b24tcG9zdC88L2E+PC9wPlxyXG5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj40LiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZ2FydG5lci5jb20vc21hcnRlcndpdGhnYXJ0bmVyL3RvcC10cmVuZHMtaW4tdGhlLWdhcnRuZXItaHlwZS1jeWNsZS1mb3ItZW1lcmdpbmctdGVjaG5vbG9naWVzLTIwMTcvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZ2FydG5lci5jb20vc21hcnRlcndpdGhnYXJ0bmVyL3RvcC10cmVuZHMtaW4tdGhlLWdhcnRuZXItaHlwZS1jeWNsZS1mb3ItZW1lcmdpbmctdGVjaG5vbG9naWVzLTIwMTcvPC9hPjwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QyID0gYCAgPHAgID48c21hbGw+Tm90ZSBvbiBhcHAgZGVmaW5pdGlvbnMgaW4gdGhpcyBwb3N0OiBBbnl0aGluZyBkb3dubG9hZGVkLCB3aGV0aGVyIGlPUyBvciBBbmRyb2lkIGlzIDxpPm5hdGl2ZSBtb2JpbGUgYXBwPC9pPiwgd2hpbGUgcHJvZ3Jlc3NpdmUgd2ViIGFwcHMgYXJlIHN0cmljdGx5IGJlaGluZCB0aGUgSFRUUFMgcHJvdG9jb2wsIGkuZS4gYnJvd3Nlci1iYXNlZC48L3NtYWxsPjwvcD5cclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TW9iaWxlIERldmljZXMgYXJlIGV2ZXIgZGVsaWdodGZ1bCwgeWV0IGEgcGVza3kgMiB0byAzLXNlY29uZCBkZWxheSBvZnRlbiBhY2NvbXBhbmllcyBvdXIgZXZlcnlkYXkgdGFza3MgdXNpbmcgZGV2aWNlLW5hdGl2ZSBhcHBzLiBGb3IgdGhlIGltcGF0aWVudCwgdGhpcyBkZWxheSBpcyBub3QgdG9sZXJhYmxlLCBhbmQgZXZlbiB0aGUgcGF0aWVudCBoYXZlIHRoZWlyIHVyZ2VudCBtb21lbnRzIChvciBoYXZlIGJldHRlciB0aGluZ3MgdG8gZG8pLiAgICBTbywgd2hldGhlciB3ZSdyZSBWZXJpem9uLCBULU1vYmlsZSwgb3IgcHJlLXBheSBwaG9uZXMgbGlrZSBTcHJpbnQncyBCb29zdCwgb3VyIGV4cGVyaWVuY2VzIGFyZSB0aGUgc2FtZTogMy1zZWNvbmQgZGVsYXlzIGFib3VuZC0tbXVjaCB0byBvdXIgaW1wYXRpZW5jZSEgIDwvcD5cclxuICA8cCA+SW5zdGFudCBMb2FkaW5nIDwvcD5cclxuICA8cCA+SW4gY29udHJhc3QsIG1hbnkgb2Ygb3VyIGRhaWx5IHdlYi1iYXNlZCB0YXNrcyBhcmUgaW5zdGFudCwgaS5lLiBhIHNlY29uZCBvciBsZXNzLiBJIGZlZWwgaW5zdGFudCBsb2FkaW5nIHNob3VsZCBiZSA8aT5hIHJpZ2h0PC9pPiwgbm90IGFuIG9jY2FzaW9uYWwgY29udmVuaWVuY2UuIHdoYXQgZG9lcyB0aGlzIHBvdGVudGlhbCBtZWFuPyBUaGlzIG1lYW5zIGFuIGFwcCdzIHNlcnZpY2Ugd29ya2VycyBjYW4gbG9hZCBuZWFybHkgaW1tZWRpYXRlbHkgYW5kIHJlbGlhYmx5LiBUaGlzIG1lYW5zICBub24tY2hvcHB5ICBhbmltYXRpb25zLCBzbW9vdGggc2Nyb2xsaW5nLCBubyBtYXR0ZXIgdGhlIG5ldHdvcmsgY29ubmVjdGlvbiB5b3UncmUgdXNpbmcsIG5vIG1hdHRlciB0aGUgZGV2aWNlISAgPC9wPlxyXG4gIDxwICA+RGV2aWNlLU5ldXRyYWwgVXNlciBJbnRlcmZhY2U8L3A+XHJcbiAgXHJcbiAgPHAgID5BZnRlciBhIGxvbmctZGF5J3Mgd29yayB1c2luZyBkZXNrdG9wIGFuZCBtb2JpbGUgYXBwcywgd2h5IHNob3VsZCBhbiBldmVuaW5nIHRyYW5zaXRpb24gdG8gdGFibGV0IG9yIGxhcHRvcCBjaGFuZ2Ugb3VyIGV4cGVyaWVuY2U/IEZ1cnRoZXIsIHRoZXNlIHZhcmlhdGlvbnMgZGlmZmVyIGJldHdlZW4gYXBwcy0tb2Ygd2hpY2ggdGhlcmUgYXJlIGFsb3Q6ICAyLjIgbWlsbGlvbiBhcHBzIGluIHRoZSBpVHVuZXMgY29sbGVjdGlvbiBhbmQgMyBtaWxsaW9uIEFuZHJvaWQgYXBwcywgYXMgb2YgMjAxNzxzdXA+Mjwvc3VwPi4gb2YgaU9TIGFwcHMgJmFtcDsgMyBtaWxsaW9uLiBcdCBNeSBGaXRiaXQgZXhwZXJpZW5jZSBpcyBpbGx1c3RyYXRpdmUuIEZpcnN0LCBJIGFkbWl0IEkgaGF2ZSBhIHRlcnJpYmxlIGFkZGljdGlvbiB0byBzdGF0aXN0aWNzLCBlc3BlY2lhbGx5IGJpby1zdGF0aXN0aWNzLiBBbmQsIEZpdGJpdCBpcyBteSBlbmFibGVyLiAgIEhvd2V2ZXIsIG15IHBvc3QtcnVuIHRhYmxldCBGaXRiaXQgYXBwIGV4cGVyaWVuY2UgaXMgZGlmZmVyZW50IGFuZCBtb3JlIGxpbWl0ZWQgZnJvbSB0aGUgSFRUUFMtYnJvd3NlciBleHBlcmllbmNlLiBBcHAgZmVhdHVyZXMsIG9wdGlvbnMsIHZpZXdzLCBkYXRlLXJhbmdlcyB2YXJ5IGJldHdlZW4gZGV2aWNlcy4gIDwvcD5cclxuICBcclxuICA8cCAgPlNlY3VyaXR5IDwvcD5cclxuICA8cCAgPkhUVFBTLWxldmVsIDxpPmJyb3dzZXI8L2k+IHNlY3VyaXR5IHZzLiBpVHVuZXMgJmFtcDsgUGxheSBTdG9yZSBuYXRpdmUgYXBwIHNlY3VyaXR5IGlzIGFraW4gdG8gYSB2YXVsdCBkb29yIHZlcnN1cyBidWlsZGluZyBkb29yLiBJJ20gc29ycnksIGJ1dCB0aGVyZSdzIGEgbG90IG9mIGRpZmZlcmVuY2UhIFxyXG4gIDxwICBjbGFzcz1cImRhaWx5dGVjaFwiPkluIFByb2dyZXNzICA8L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS8yMDEwLzA4L2ZmLXdlYnJpcC9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vMjAxMC8wOC9mZi13ZWJyaXAvPC9hPlJlOiBUaGUgV2ViIGlzIERlYWQuIExvbmcgTGl2ZSB0aGUgSW50ZXJuZXQ8L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHA6Ly93d3cuYnVzaW5lc3NvZmFwcHMuY29tL2RhdGEvYXBwLXN0YXRpc3RpY3MvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3d3dy5idXNpbmVzc29mYXBwcy5jb20vZGF0YS9hcHAtc3RhdGlzdGljcy88L2E+IDwvcD5cclxuICBodHRwOi8vd3d3LmJ1c2luZXNzb2ZhcHBzLmNvbS9kYXRhL2FwcC1zdGF0aXN0aWNzL1xyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy50ZWNocmVwdWJsaWMuY29tL2FydGljbGUvaG93LXByb2dyZXNzaXZlLXdlYi1hcHBzLXByb21pc2UtdG8tdXBlbmQtbmF0aXZlLW1vYmlsZS1hcHBzL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRlY2hyZXB1YmxpYy5jb20vYXJ0aWNsZS9ob3ctcHJvZ3Jlc3NpdmUtd2ViLWFwcHMtcHJvbWlzZS10by11cGVuZC1uYXRpdmUtbW9iaWxlLWFwcHMvPC9hPjwvcD5cclxuICBcclxuICBcclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tLzIwMTYvMDQvd2FpdC13ZWItaXNudC1yZWFsbHktZGVhZC1nb29nbGUtbWFkZS1zdXJlL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS8yMDE2LzA0L3dhaXQtd2ViLWlzbnQtcmVhbGx5LWRlYWQtZ29vZ2xlLW1hZGUtc3VyZS88L2E+PC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDEgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPk5leHQgTWF5IDl0aCwgdGhlIGdyZWF0ZXN0IGtub3duIHRocmVhdCB0byB0cmFkaXRpb25hbCBibG9ja2NoYWluIHRlY2hub2xvZ3kgd2lsbCBiZSBmb3JtYWxseSBpbnRyb2R1Y2VkLCA8aT5hbG9uZyB3aXRoIGl0cyBzb3VyY2UgY29kZTwvaT4sIGludG8gb3VyIHRlY2hub2xvZ2ljYWwgd29ybGQuIEhlZGVyYSBIYXNoZ3JhcGggcmVwcmVzZW50cyBhIGJsb2NrY2hhaW4gYWx0ZXJuYXRpdmUgdGhhdCBjYXRlcnMgdG8gdGltZS1zZW5zaXRpdmUgdHJhbnNhY3Rpb25zLCBhbmQgb3JkZXIgZmFpcm5lc3MuIEN1cnJlbnRseSwgb25lIHRyYW5zYWN0aW9uIHdpdGggQml0Y29pbiB0YWtlcyBhYm91dCAxMiBtaW51dGVzIHRvIHZhbGlkYXRlLiBFdGhlcmV1bSBpcyBvbmx5IGEgY291cGxlIG1pbnV0ZXMsIGJ1dCBpbiBhIHdvcmxkIG9mIG1pY3JvLXRyYW5zYWN0aW9ucyBhbmQgbWljcm8tc2Vjb25kIHRyYW5zYWN0aW9ucywgc3BlZWQgY291bnRzLjwvcD48cD5OZXh0LCBIZWRlcmEncyB0ZWNobm9sb2d5IHVzZXMgYSBjb25zZW5zdXMgYWxnb3JpdGhtLCB3aGljaCBkZXBlbmRzIG9uICBub2RlIG5laWdoYm9ycycgXCJ2b3RpbmdcIiBlbGVjdGlvbnMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgZGVzaWduIGlzIGltcGVydmlvdXMgdG8gXCJmb3JraW5nXCItLXdoZW4gYSBwYXJ0IG9mIHRoZSBibG9ja2NoYWluIHNwbGl0cyBhbmQgbm8gbG9uZyBzeW5jcyB3aXRoIHRoZSBtYWluIGJsb2NrY2hhaW4uICBNb3JlIGltcG9ydGFudGx5LCBIZWRlcmEncyBjb25zZW5zdXMgZGVzaWduIGlzICAgYnVpbHQgb24gQXN5bmNocm9ub3VzIEJ5emFudGluZSBGYXVsdCBUb2xlcmFuY2UgKGFCRlQpLCBzbyBpcyB0aGVuIGltcGVydmlvdXMgdG8gdGhyZWF0cyBvZiA8aT5EaXN0cmlidXRlZCBEZW5pYWwgb2YgU2VydmljZSAoRERTKSBhdHRhY2tzLiA8L2k+PC9wPlxyXG48cD5TbywgbGlnaHRuaW5nIHNwZWVkIGZvciB2YWxpZGF0aW5nIGNyeXB0by10cmFuc2FjdGlvbnMuIEd1YXJhbnRlZWQgc2VjdXJpdHkgZnJvbSBoYXJkLSBvciBzb2Z0LWZvcmtpbmcgb2YgdGhlIGJsb2NrY2hhaW4sIGFuZCBERFMtbGlrZSBhdHRhY2tzLiBGYWlybmVzcyBpbiB0cmFuc2FjdGlvbiBvcmRlci4gQ29tZSBNYXkgOXRoLCB3ZSdsbCBzZWUganVzdCBob3cgSGVkZXJhJ3MgY29kZWJhc2UgYW5kIGNyeXB0b2N1cnJlbmN5IHdpbGwgYWNjb21wbGlzaCB0aGVzZSBiZW5jaG1hcmtzLCBhbmQgaWYgc28sIEhlcmFjbGl0ZWFuIHJpdmVyIHN0b3BzIGluIHRpbWUhIElmIG5vdCwgeWV0IGFub3RoZXIgY3J5cHRvZ3JhcGhpYyBtaXJhZ2UhPC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaGVkZXJhaGFzaGdyYXBoLmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlx0aHR0cHM6Ly93d3cuaGVkZXJhaGFzaGdyYXBoLmNvbTwvYT4gPC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9tZWRpdW0uY29tL2hhc2hncmFwaC9lYXQtcHJheS1oYXNoZ3JhcGgtNTZiOTYxM2VkNDZmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9tZWRpdW0uY29tL2hhc2hncmFwaC9lYXQtcHJheS1oYXNoZ3JhcGgtNTZiOTYxM2VkNDZmPC9hPiA8L3A+YDtcclxuXHJcbiAgdmFyIHVybCA9IFtcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMjMnLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0zMCcsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCAzMCwgMjAxODxiciAvPicsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0RhdGEgUHJpdmFjeSBhbmQgUGVybWlzc2lvbnMgaW4gdGhlIFR3aXR0ZXItdmVyc2U8YnIgLz5QYXJ0IElJOiBBIERlZmVuc2Ugb2YgRGF0YSBQcml2YWN5IE1vZGVyYXRpb24gPGJyIC8+JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyM1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcyMicsXHJcbiAgICAgIGRpZDogJzE4LTA0LTI4JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDI4LTI5LCAyMDE4PGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0RhdGEgUHJpdmFjeSBhbmQgUGVybWlzc2lvbnMgaW4gdGhlIFR3aXR0ZXItdmVyc2U8YnIgLz5QYXJ0IEk6IENvbmZvcm1pbmcgdG8gRS5VLnMgUmVndWxhdGlvbnMgPGJyIC8+JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyMlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcyMScsXHJcbiAgICAgIGRpZDogJzE4LTA0LTI3JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDI3LCAyMDE4PGJyIC8+ICcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1RoaXMgVGltZSBCYWJ5IElsbCBiZSBCdWxsZXQtUHJvb2Y6IElubm92YXRpb24gZm9yIGEgNUcgV29ybGQgICAgPGJyIC8+IC0tTGEgUm91eCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MjFcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMjAnLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0yNicsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCAyNiwgMjAxODxiciAvPicsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnUm9tYWluZSBMZXR0dWNlIGFuZCB0aGUgQmxvY2tjaGFpbjo8YnIgLz4gUGFydCBJSS4gVHJhbnNwYXJlbnQgQWNjdXJhY3kgb2YgRGF0YScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MjBcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzE5JyxcclxuICAgICAgZGlkOiAnMTgtMDQtMjUnLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMjUsIDIwMTg8YnIgLz4nLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdSb21haW5lIExldHR1Y2UgYW5kIHRoZSBCbG9ja2NoYWluOjxiciAvPiBQYXJ0IEkuIEluc3RhbnQgQWNjZXNzIHRvIERhdGEgICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTlcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTgnLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0yNCcsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCAyNCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdXZXN0d29ybGQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE4XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzE3JyxcclxuICAgICAgZGlkOiAnMTgtMDQtMjMnLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMjMsIDIwMTg8YnIgLz4gJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnIFRoZSBCcmlnaHQgTmV3IEhvcml6b24gZm9yIFRlY2ggSm9icycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTdcclxuICAgIH0sIHtcclxuICAgICAgaWQ6ICcxNicsXHJcbiAgICAgIGRpZDogJzE4LTA0LTIxJyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDIxLTIyLCAyMDE4PGJyIC8+V2Vla2VuZCAgJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJyAgRWFydGggbmVlZHMgVGVjaG5vbG9neSBhcyBtdWNoIGFzIFRlY2ggbmVlZHMgdGhlIEVhcnRoJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNScsXHJcbiAgICAgIGRpZDogJzE4LTA0LTIwJyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDIwLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdvbXB1dGluZyBBcnRzIGFuZCBJbm5vdmF0aW9uLCBQYXJ0IElJOjxiciAvPkNvbnN0cmFpbnRzIG9mIERpc3RyaWJ1dGVkIExlZGdlciBUZWNobm9sb2d5JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTQnLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0xOScsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCAxOSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0VuZXJneSBBbHRlcm5hdGl2ZXMgU2lnbmFsIHRoZSBQb3dlciBTaGlmdCB0byBDb21lJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMycsXHJcbiAgICAgIGRpZDogJzE4LTA0LTE4JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDE4LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdCbG9ja2NoYWluIFR5cGVzIGFuZCBUcmFkZS1vZmZzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxM1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMicsXHJcbiAgICAgIGRpZDogJzE4LTA0LTE3JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDE3LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ0RpY3Rpb25hcmllcyBhbmQgdGhlIEpveXMgb2YgQWJzdHJhY3Rpb24nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzExJyxcclxuICAgICAgZGlkOiAnMTgtMDQtMTYnLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMTYsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdadWNrZXJiZXJncyBcIkludml0YXRpb25cIiB0byB0aGUgRXVyb3BlYW4gVW5pb24gS2luZGx5IERlY2xpbmVkOjxiciAvPiBIb3cgdGhlIDI4LW5hdGlvbiBFdXJvcGVhbiBVbmlvbnMgUHJpdmFjeSBSZWd1bGF0aW9ucyBhZmZlY3QgRmFjZWJvb2ssIGFuZCBldmVudHVhbGx5IHVzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMCcsXHJcbiAgICAgIGRpZDogJzE4LTA0LTE0JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDE0LTE1LCAyMDE4PGJyIC8+IFdlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnQ2xhc2ggb2YgdGhlIEJyaWNrICZhbXA7IE1vcnRhcnMgYWdhaW5zdCBPbmxpbmUgU3RvcmVzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMFxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnOScsXHJcbiAgICAgIGRpZDogJzE4LTA0LTEzJyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDEzLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdCaXRjb2lucyAmYW1wOyBCcm93c2VyczogQSBHbGFuY2UgYXQgQml0Y29pbiBEaXN0cmlidXRlZCBNaW5pbmcgICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0OVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc4JyxcclxuICAgICAgZGlkOiAnMTgtMDQtMTInLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMTIsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdBbGdvcml0aG1zIGFuZCBBLkkuPGJyIC8+U2NhbGFiaWxpdHkgJmFtcDsgQ29zdHMgICBvZiBEYXRhIFByaXZhY3kgUG9saWNpZXMnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDhcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNycsXHJcbiAgICAgIGRpZDogJzE4LTA0LTExJyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDExLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnV2hlbiBhIFBpY2twb2NrZXQgaXMgUGlja3BvY2tldGVkOjxiciAvPlBhcnQgSUlJLiBUaGUgUGF0aCB0b3dhcmQgU291bmQgRGF0YSBQcml2YWN5IFBvbGljeScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0N1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc2JyxcclxuICAgICAgZGlkOiAnMTgtMDQtMTAnLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMTAsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnV2hlbiBhIFBpY2twb2NrZXQgaXMgUGlja3BvY2tldGVkOjxiciAvPiAgUGFydCBJSTogIFwiU2VtYW50aWMgUG9seW1vcnBoaXNtXCIsIGkuZS4sIERvdWJsZSBUYWxrIGFib3V0ICBEYXRhICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc1JyxcclxuICAgICAgZGlkOiAnMTgtMDQtMDknLFxyXG4gICAgICBkYXRlOiAnQXByaWwgOSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdXaGVuIGEgUGlja3BvY2tldCBpcyBQaWNrcG9ja2V0ZWQ6PGJyIC8+UGFydCBJOiBGYWNlYm9vayBEYXRhIEdlbmVyYXRpb24gYW5kIHRoZSBEZWVwZXN0cyBEZXNpcmVzIG9mIFBzeWNob21ldHJpY2lhbnMsIDxpPldpdGhvdXQgQW5vbnltaXphdGlvbjwvaT4gICAnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDVcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzQnLFxyXG4gICAgICBkaWQ6ICdcIjE4LTA0LTA3JyxcclxuICAgICAgZGF0ZTogJ0FwcmlsIDctOCwgMjAxODxiciAvPiAgV2Vla2VuZCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ09uIHRoZVx0SW5ldml0YWJsZSBEZW1pc2Ugb2YgICBOYXRpdmUgTW9iaWxlIEFwcHMgaW4gZmF2b3Igb2YgUHJvZ3Jlc3NpdmUgV2ViIEFwcHM8YnIgLz5QYXJ0IElJSTogVGhlIE51dHMgJmFtcDsgQm9sdHMgb2YgdGhlIEFwcCBSZXBsYWNlbWVudCBQcm9jZXNzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q0XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzMnLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0wNicsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCA2LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ09uIHRoZVx0SW5ldml0YWJsZSBEZW1pc2Ugb2YgICBOYXRpdmUgTW9iaWxlIEFwcHMgaW4gZmF2b3Igb2YgUHJvZ3Jlc3NpdmUgV2ViIEFwcHM8YnIgLz5QYXJ0IElJOiBOZXcgUG93ZXJzIG9mIHRoZSBNb2Rlcm4gICBCcm93c2VyJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QzXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzInLFxyXG4gICAgICBkaWQ6ICcxOC0wNC0wNScsXHJcbiAgICAgIGRhdGU6ICdBcHJpbCA1LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnT24gdGhlXHRJbmV2aXRhYmxlIERlbWlzZSBvZiAgIE5hdGl2ZSBNb2JpbGUgQXBwcyBpbiBmYXZvciBvZiBQcm9ncmVzc2l2ZSBXZWIgQXBwczxiciAvPlBhcnQgSTogICBNb2JpbGUgRGV2aWNlcyBPdXR3aXQgYW5kIE91dGdyb3cgdGhlIFwiT2xkLVNjaG9vbFwiIEFwcCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxJyxcclxuICAgICAgZGlkOiAnMTgtMDQtMDInLFxyXG4gICAgICBkYXRlOiAnQXByaWwgMiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnSGVyYWNsaXRlcyBEZWxpZ2h0OiBUZWNobm9sb2d5IENoYW5nZSBpcyB0aGUgQ29uc3RhbnQsIEh1bWFuIEJlaGF2aW9yIGlzIFZhcmlhYmxlOjxiciAvPlRoZSBBcHJpbCAybmQgQW5ub3VuY2VkIEhlZGVyYSBIYXNoZ3JhcGggWCBMYXVuY2ggRXZlbnQgICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MVxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIHZhciBpO1xyXG4gIGZvciAoaT0wO2kgPCB1cmwubGVuZ3RoOyBpKyspeyBcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1hcHJcIikuaW5uZXJIVE1MICs9IGNhdDtcclxuICB9XHJcblxyXG4gIGZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICAgIHZhciBjYXRNb2QgPSBgXHJcbiAgICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfV9tb2RcIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcbiAgICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gICAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9PC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG4gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWFwci1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDsgIFxyXG59IFxyXG5jb25zb2xlLmxvZygnYmxvZ2dlci1hcHInKTtcclxuIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpOyBcclxufTtcclxuYmxvZ2dlckFwcigpOyIsIlxyXG52YXIgYmxvZ2dlckF1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgYmxvZ3Bvc3QyMiA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UXVhbnR1bSBjb21wdXRpbmcsIG5vdyByZWFkaWx5IGF2YWlsYWJsZSBmb3Igc2NpZW5jZS12ZW50dXJpbmcgcHVibGljIGNvbnN1bXB0aW9uOiBJQk0ncyBRdWFudHVtIENvbW11bml0eSBhbmQgUmVzb3VyY2VzIG9mZmVyIGNsb3VkIGFjY2VzcyB0byBxdWFudHVtIGhhcmR3YXJlOlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+Q2hlY2sgb3V0IG91ciBVc2VyIEd1aWRlcyBhbmQgaW50ZXJhY3RpdmUgRGVtb3MgdG8gbGVhcm4gbW9yZSBhYm91dCBxdWFudHVtIHByaW5jaXBsZXMuIE9yLCBkaXZlIHJpZ2h0IGluIHRvIGNyZWF0ZSBhbmQgcnVuIGFsZ29yaXRobXMgb24gcmVhbCBxdWFudHVtIGNvbXB1dGluZyBoYXJkd2FyZSwgdXNpbmcgdGhlIFF1YW50dW0gQ29tcG9zZXIgYW5kIFFJU0tpdCBzb2Z0d2FyZSBkZXZlbG9wZXIga2l0LjxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD5XaXRoIGFuIHVuY2FubnkgcmVzZW1ibGVuY2UgdG8gMjFzdCBjZW50dXJ5IGNoYW5kZWxpZXJzLCB0aGUgaGFyZHdhcmUgaXRzZWxmIGlzIG5vIGxpZ2h0IG1hdHRlcjogRWFjaCBzdWNjZXNzaXZlIGxheWVyIGNvb2xzIGRvd24gdG8gICAgZmluYWwgY2hhbWJlciB0aGF0IHJ1bnMgYXQgYSBjb29sIC4wMDE3JmRlZzsgS2VsdmluLS1jb2xkZXIgdGhhbiBzcGFjZSFcclxuICA8L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ2NpdGUyMiA9IGA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSAgIGhyZWY9XCJodHRwczovL3F1YW50dW1leHBlcmllbmNlLm5nLmJsdWVtaXgubmV0L3F4L2V4cGVyaWVuY2VcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vcXVhbnR1bWV4cGVyaWVuY2UubmcuYmx1ZW1peC5uZXQvcXgvZXhwZXJpZW5jZVxyXG4gIDwvYT5cclxuICA8L3A+YFxyXG4gXHJcbiAgdmFyIGJsb2dwb3N0MjEgPSBgIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgTGFtYm9yZ2hpbmkgQXZlbnRhZG9yIFNWSiBhbHJlYWR5IG1hZGUgYSBzcGxhc2ggbGFzdCBtb250aCB3aGVuIGl0IHNldCBhIG5ldyBOw7xyYnVyZ3JpbmcgTm9yZHNjaGxlaWZlIHJlY29yZCBmb3IgcHJvZHVjdGlvbiBjYXJzLCBydW5uaW5nIGFuIGluY3JlZGlibGUgNjo0NC45NyBsYXAgdGltZS4gTm93LCBpdCBzaGVkcyBpdHMgY2Ftb3VmbGFnZSwgYW5kIHllcCwgaXQgbG9va3MgZXhhY3RseSBhcyBjcmF6eSBhcyB3ZSBob3BlZC4gVGhpcyBtaWdodCBiZSBvbmUgb2YgdGhlIHdpbGRlc3QgTGFtYm9yZ2hpbmlzIHlldC48YnIgLz48YnIgLz5cclxuICBTaW5jZSB3ZSd2ZSB0YWNrbGVkIHRoZSBTVkoncyBOw7xyYnVyZ3JpbmcgbGFwIHRpbWUsIGxldCdzIGNvdmVyIHNvbWUgb3RoZXIgbnVtYmVycy4gSXRzIDYuNS1saXRlciBWMTIgcHJvZHVjZXMgNzcwIGhvcnNlcG93ZXIsIG1ha2luZyB0aGlzIG9uZSBvZiB0aGUgbW9zdCBwb3dlcmZ1bCBuYXR1cmFsbHkgYXNwaXJhdGVkIHJvYWQgY2FycyBvZiBhbGwgdGltZS4gTWF4aW11bSB0b3JxdWUgaXMgNTMxIGxiLWZ0IGF0IDY3NTAgcnBtLCB3aGlsZSB0aGUgcG93ZXIgcGVhayBjb21lcyBhdCA4NTAwIHJwbS4gTGFtYm9yZ2hpbmkgY2xhaW1zIGEgZHJ5IHdlaWdodCBvZiAzMzYyIGxicywgd2hpY2ggaXMgMTEwIGxicyBsaWdodGVyIHRoYW4gYW4gQXZlbnRhZG9yIFMgY291cGUgYWNjb3JkaW5nIHRvIHRoZSBmYWN0b3J5LiBBY2NlbGVyYXRpb24gaXMgamF3LWRyb3BwaW5nLCB0b28sIHdpdGggNjIgbXBoIGFycml2aW5nIGluIDIuOCBzZWNvbmRzIGFuZCAxMjQgbXBoIGNvbWluZyBpbiA4LjYuIFRvcCBzcGVlZCBpcyAyMTcgbXBoLjxzdXA+MTwvc3VwPjwvcD5cclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL2F2ZW50YWRvci5qcGdcIiB3aWR0aD1cIjM1MFwiIGNsYXNzPVwiem9vbVwiICAvPjxiciAvPlxyXG4gIDxwPkltYWdlIGNyZWRpdDogUm9hZCAmYW1wOyBUcmFjazwvcD5cclxuIFxyXG4gICAgYDtcclxuICB2YXIgYmxvZ2NpdGUyMSA9IGAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSAgIGhyZWY9XCJodHRwczovL3d3dy5yb2FkYW5kdHJhY2suY29tL2Nhci1zaG93cy9tb250ZXJleS1jYXItd2Vlay9hMjI4MjIwMjAvMjAxOS1sYW1ib3JnaGluaS1hdmVudGFkb3Itc3ZqLWRlYnV0LXNwZWNzLXBob3Rvcy1wcmljZS9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnJvYWRhbmR0cmFjay5jb20vY2FyLXNob3dzL21vbnRlcmV5LWNhci13ZWVrL2EyMjgyMjAyMC8yMDE5LWxhbWJvcmdoaW5pLWF2ZW50YWRvci1zdmotZGVidXQtc3BlY3MtcGhvdG9zLXByaWNlL1xyXG4gICAgPC9hPjwvcD4gXHJcbiAgICBgO1xyXG4gICAgdmFyIGJsb2dwb3N0MjAgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlNlY3VyaXR5IHBhdGNoZXMgdGhhdCBjb3VsZG4ndCBoYXZlIGFycml2ZWQgc29vbmVyIC4uLiA8L3A+PHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBGb3J0bml0ZSBJbnN0YWxsZXIgd2FzIGVhc2lseSBleHBsb2l0YWJsZSB0byBoaWphY2sgdGhlIHJlcXVlc3QgdG8gZG93bmxvYWQgdGhlIGZ1bGwgZ2FtZS4gICAgICBUaGUgcHJvYmxlbSwgYXMgR29vZ2xlJ3Mgc2VjdXJpdHkgdGVhbSBkaXNjb3ZlcmVkLCB3YXMgdGhhdCB0aGUgRm9ydG5pdGUgSW5zdGFsbGVyIHdhcyB2ZXJ5IGVhc2lseSBleHBsb2l0YWJsZSB0byBoaWphY2sgdGhlIHJlcXVlc3QgdG8gZG93bmxvYWQgRm9ydG5pdGUgZnJvbSBFcGljIGFuZCBpbnN0ZWFkIGRvd25sb2FkIGFueXRoaW5nIHdoZW4geW91IHRhcCB0aGUgYnV0dG9uIHRvIGRvd25sb2FkIHRoZSBnYW1lLiBJdCdzIHdoYXQncyBrbm93biBhcyBhIFwibWFuLWluLXRoZS1kaXNrXCIgYXR0YWNrOiBhbiBhcHAgb24geW91ciBwaG9uZSBsb29rcyBmb3IgcmVxdWVzdHMgdG8gZG93bmxvYWQgc29tZXRoaW5nIGZyb20gdGhlIGludGVybmV0IGFuZCBpbnRlcmNlcHRzIHRoYXQgcmVxdWVzdCB0byBkb3dubG9hZCBzb21ldGhpbmcgZWxzZSBpbnN0ZWFkLCB1bmJla25vd25zdCB0byB0aGUgb3JpZ2luYWwgZG93bmxvYWRpbmcgYXBwLjxiciAvPjxiciAvPkhlcmUncyB3aGVyZSB0aGluZ3MgZ2V0IHJlYWxseSBiYWQuIEJlY2F1c2Ugb2YgdGhlIHdheSBBbmRyb2lkJ3MgcGVybWlzc2lvbnMgbW9kZWwgd29ya3MsIHlvdSB3b24ndCBoYXZlIHRvIGFjY2VwdCBpbnN0YWxsYXRpb24gb2YgYW4gYXBwIGZyb20gXCJ1bmtub3duIHNvdXJjZXNcIiBiZXlvbmQgdGhlIHRpbWUgeW91IGFjY2VwdGVkIHRoYXQgaW5zdGFsbGF0aW9uIGZvciBGb3J0bml0ZS48c3VwPjE8L3N1cD4gPC9wPlxyXG4gICAgICAgXHJcbiAgICAgIGA7XHJcbiAgICB2YXIgYmxvZ2NpdGUyMCA9IGAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSAgIGhyZWY9XCJodHRwczovL3d3dy5hbmRyb2lkY2VudHJhbC5jb20vZXBpYy1nYW1lcy1maXJzdC1mb3J0bml0ZS1pbnN0YWxsZXItYWxsb3dlZC1oYWNrZXJzLWRvd25sb2FkLWluc3RhbGwtc2lsZW50bHlcIiAgIHRhcmdldD1cIl9ibGFua1wiPiBcclxuICAgIGh0dHBzOi8vd3d3LmFuZHJvaWRjZW50cmFsLmNvbS9lcGljLWdhbWVzLWZpcnN0LWZvcnRuaXRlLWluc3RhbGxlci1hbGxvd2VkLWhhY2tlcnMtZG93bmxvYWQtaW5zdGFsbC1zaWxlbnRseSA8L2E+PC9wPiBcclxuICAgICAgYDtcclxuICAgICAgdmFyIGJsb2dwb3N0MTkgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlF1YW50dW0gbGVhcCBmcm9tIHRyYWRpdGlvbmFsIGVsZWN0cm9tYWduZXRpYyBvbi9vZmYgYml0cyAoZWlnaHQgYml0cyBwZXIgYnl0ZSkgaXMgaW50dWl0aXZlIHRvIHRoZSBiaW5hcnkgcXViaXQsIGFuZCB5ZXQgdGhlIHRoZSBzdXBlcnBvc2l0aW9uIHRoaXJkIG9wdGlvbiBpcyBsZXNzIGV2aWRlbnQ6IFJhdGhlciwgb3VyIG9ic2VydmF0aW9uIG9mIHRoZSA8aT5zdXBlcnBvc2l0aW9uIGRlcGVuZHMgb24gdGhlIDxzdHJvbmc+cHJvYmFiaWxpdHk8L2k+IHRoYXQsIHdoZW4gb2JzZXJ2ZWQsIHRoZSB2YWx1ZSB3aWxsIGJlIGFmZmlybWF0aXZlIG9yIG5lZ2F0aXZlLiBCZXR0ZXIgZXhwbGFpbmVkIGJ5IFdpcmVkIC4uLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbkNvbXB1dGVycyBkbyBjYWxjdWxhdGlvbnMgdXNpbmcgYml0cywgdG9vLiBBZnRlciBhbGwsIHdlIHdhbnQgdGhlbSB0byBwbHVnIGludG8gb3VyIGV4aXN0aW5nIGRhdGEgYW5kIGNvbXB1dGVycy4gQnV0IHF1YW50dW0gYml0cywgb3IgcXViaXRzLCBoYXZlIHVuaXF1ZSBhbmQgcG93ZXJmdWwgcHJvcGVydGllcyB0aGF0IGFsbG93IGEgZ3JvdXAgb2YgdGhlbSB0byBkbyBtdWNoIG1vcmUgdGhhbiBhbiBlcXVpdmFsZW50IG51bWJlciBvZiBjb252ZW50aW9uYWwgYml0cy5cclxuXHJcblF1Yml0cyBjYW4gYmUgYnVpbHQgaW4gdmFyaW91cyB3YXlzLCBidXQgdGhleSBhbGwgcmVwcmVzZW50IGRpZ2l0YWwgMHMgYW5kIDFzIHVzaW5nIHRoZSBxdWFudHVtIHByb3BlcnRpZXMgb2Ygc29tZXRoaW5nIHRoYXQgY2FuIGJlIGNvbnRyb2xsZWQgZWxlY3Ryb25pY2FsbHkuIFBvcHVsYXIgZXhhbXBsZXPigJRhdCBsZWFzdCBhbW9uZyBhIHZlcnkgc2VsZWN0IHNsaWNlIG9mIGh1bWFuaXR54oCUaW5jbHVkZSBzdXBlcmNvbmR1Y3RpbmcgY2lyY3VpdHMsIG9yIGluZGl2aWR1YWwgYXRvbXMgbGV2aXRhdGVkIGluc2lkZSBlbGVjdHJvbWFnbmV0aWMgZmllbGRzLiBUaGUgbWFnaWMgcG93ZXIgb2YgcXVhbnR1bSBjb21wdXRpbmcgaXMgdGhhdCB0aGlzIGFycmFuZ2VtZW50IGxldHMgcXViaXRzIGRvIG1vcmUgdGhhbiBqdXN0IGZsaXAgYmV0d2VlbiAwIGFuZCAxLiBUcmVhdCB0aGVtIHJpZ2h0IGFuZCB0aGV5IGNhbiBmbGlwIGludG8gYSBteXN0ZXJpb3VzIGV4dHJhIG1vZGUgY2FsbGVkIGEgc3VwZXJwb3NpdGlvbi48c3VwPjE8L3N1cD5cclxuPC9wPiBcclxuPHAgY2xhc3M9XCJxdW90ZVwiPkZvciBzb21lIHByb2JsZW1zIHRoYXQgYXJlIHZlcnkgdGltZSBjb25zdW1pbmcgZm9yIGNvbnZlbnRpb25hbCBjb21wdXRlcnMsIHRoaXMgYWxsb3dzIGEgcXVhbnR1bSBjb21wdXRlciB0byBmaW5kIGEgc29sdXRpb24gaW4gZmFyIGZld2VyIHN0ZXBzIHRoYW4gYSBjb252ZW50aW9uYWwgY29tcHV0ZXIgd291bGQgbmVlZC4gR3JvdmVy4oCZcyBhbGdvcml0aG0sIGEgZmFtb3VzIHF1YW50dW0gc2VhcmNoIGFsZ29yaXRobSwgY291bGQgZmluZCB5b3UgaW4gYSBwaG9uZSBib29rIHdpdGggMTAwIG1pbGxpb24gbmFtZXMgd2l0aCBqdXN0IDEwLDAwMCBvcGVyYXRpb25zLiBJZiBhIGNsYXNzaWNhbCBzZWFyY2ggYWxnb3JpdGhtIGp1c3Qgc3Bvb2xlZCB0aHJvdWdoIGFsbCB0aGUgbGlzdGluZ3MgdG8gZmluZCB5b3UsIGl0IHdvdWxkIHJlcXVpcmUgNTAgbWlsbGlvbiBvcGVyYXRpb25zLCBvbiBhdmVyYWdlLjxzdXA+MTwvc3VwPiA8L3A+XHJcbiAgICAgICAgXHJcbiAgICAgICAgYDtcclxuICAgICAgdmFyIGJsb2djaXRlMTkgPSBgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuICA8YSAgIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvd2lyZWQtZ3VpZGUtdG8tcXVhbnR1bS1jb21wdXRpbmcvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvd2lyZWQtZ3VpZGUtdG8tcXVhbnR1bS1jb21wdXRpbmcvXHJcbiAgICAgIDwvYT48L3A+ICAgICBgO1xyXG4gICAgICBcclxuICB2YXIgYmxvZ3Bvc3QxOCA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UXVhbnR1bSByZXNlYXJjaCBoYXMgZmluYWxseSBwcm9ncmVzc2VkIGJleW9uZCBwcm9vZi1vZi1jb25jZXB0IHRvIHByYWN0aWNhbCB1dGlsaXR5LiBGaXJzdCBwaG90b24gc3RhdGUgdHJhbnNmZXIsIGFuZCBub3cgc29saWQgc3RhdGUgdHJhbnNmZXIgb2YgXCJlbnRhbmdsZWQgc3RhdGVzXCIgYWxsb3dpbmcgZm9yIGJpbmFyeSwgaW5zdGFudCBkYXRhIHRyYW5zZmVyLiBCZXlvbmQgbWVkaWNhbCBhbmQgZW50ZXJwcmlzZSB1c2UsIHF1YW50dW0gZW50YW5nbGVtZW50J3MgaW5jcmVtZW50YWwgcHJvZ3Jlc3Mgbm93IHJhaXNlcyBhIGZldyBleWVicm93czogXHJcbiAgICA8L3A+XHJcbiAgIDxwIGNsYXNzPVwicXVvdGVcIj5UaGF04oCZcyBiZWNhdXNlIEdvb2dsZSwgSUJNLCBhbmQgb3RoZXJzIGhhdmUgZGVjaWRlZCBpdOKAmXMgdGltZSB0byBpbnZlc3QgaGVhdmlseSBpbiB0aGUgdGVjaG5vbG9neSwgd2hpY2gsIGluIHR1cm4sIGhhcyBoZWxwZWQgcXVhbnR1bSBjb21wdXRpbmcgZWFybiBhIGJ1bGxldCBwb2ludCBvbiB0aGUgY29ycG9yYXRlIHN0cmF0ZWd5IFBvd2VyUG9pbnQgc2xpZGVzIG9mIGJpZyBjb21wYW5pZXMgaW4gYXJlYXMgc3VjaCBhcyBmaW5hbmNlLCBsaWtlIEpQTW9yZ2FuLCBhbmQgYWVyb3NwYWNlLCBsaWtlIEFpcmJ1cy4gSW4gMjAxNywgdmVudHVyZSBpbnZlc3RvcnMgcGxvd2VkICQyNDEgbWlsbGlvbiBpbnRvIHN0YXJ0dXBzIHdvcmtpbmcgb24gcXVhbnR1bSBjb21wdXRpbmcgaGFyZHdhcmUgb3Igc29mdHdhcmUgd29ybGR3aWRlLCBhY2NvcmRpbmcgdG8gQ0IgSW5zaWdodHMuIFRoYXTigJlzIHRyaXBsZSB0aGUgYW1vdW50IGluIHRoZSBwcmV2aW91cyB5ZWFyLiA8c3VwPjE8L3N1cD48L3A+XHJcbiAgXHJcbjxwPiAgIFRoZSBjYXVzZSBmb3IgZXhjaXRlbWVudCBhY2NlbGVyYXRlcyBhdCB0aGUgcGFjZSBvZiBwcm9ncmVzcyBvbiB0aGUgdGVjaG5pY2FsIGVuZ2luZWVyaW5nIHNpZGU6XHJcbiAgIDwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlBoeXNpY2lzdHMgaGF2ZSBleHBlcmltZW50YWxseSBkZW1vbnN0cmF0ZWQgMTgtcXViaXQgZW50YW5nbGVtZW50LCB3aGljaCBpcyB0aGUgbGFyZ2VzdCBlbnRhbmdsZWQgc3RhdGUgYWNoaWV2ZWQgc28gZmFyIHdpdGggaW5kaXZpZHVhbCBjb250cm9sIG9mIGVhY2ggcXViaXQuIEFzIGVhY2ggcXViaXQgaGFzIHR3byBwb3NzaWJsZSB2YWx1ZXMsIHRoZSAxOCBxdWJpdHMgY2FuIGdlbmVyYXRlIGEgdG90YWwgb2YgMjE4IChvciAyNjIsMTQ0KSBjb21iaW5hdGlvbnMgb2Ygb3V0cHV0IHN0YXRlcy4gU2luY2UgcXVhbnR1bSBpbmZvcm1hdGlvbiBjYW4gYmUgZW5jb2RlZCBpbiB0aGVzZSBzdGF0ZXMsIHRoZSByZXN1bHRzIGhhdmUgcG90ZW50aWFsIGFwcGxpY2F0aW9ucyBhbnl3aGVyZSBxdWFudHVtIGluZm9ybWF0aW9uIHByb2Nlc3NpbmcgaXMgdXNlZC5cclxuIC48c3VwPjI8L3N1cD48L3A+XHJcbiAgIDxwPlNvLCB3aGlsZSB0aGVyZSBhcmUgYWxnb3JpdGhtcywgbGlrZSA8aT5TaG9yJ3MgU0hBLWRlZmVhdGluZyBhbGdvcml0aG0sIHRoYXQgaGF2ZSBvbmx5IGV4aXN0ZWQgaW4gdGhlb3J5LCBjYW4gbm93IGJlIGFwcGxpZWQgdXNpbmcgY2FwYWJsZSBjb21wdXRhdGlvbmFsIHBvd2VyIGZvciB0aGUgam9iLjwvaT5cclxuIDwvcD4gXHJcbiAgIGA7XHJcbiAgdmFyIGJsb2djaXRlMTggPVxyXG4gICAgYCAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gIDxhICAgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS93aXJlZC1ndWlkZS10by1xdWFudHVtLWNvbXB1dGluZy9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS93aXJlZC1ndWlkZS10by1xdWFudHVtLWNvbXB1dGluZy9cclxuICAgPC9hPjwvcD4gXHJcbiAgIFxyXG4gICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSAgIGhyZWY9XCJodHRwczovL3BoeXMub3JnL25ld3MvMjAxOC0wNy1xdWJpdC1lbnRhbmdsZW1lbnQuaHRtbFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9waHlzLm9yZy9uZXdzLzIwMTgtMDctcXViaXQtZW50YW5nbGVtZW50Lmh0bWxcclxuICAgPC9hPjwvcD4gIFxyXG4gICBgO1xyXG5cclxuXHJcbiAgdmFyIGJsb2dwb3N0MTcgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlNpbGljb24gVmFsbGV5J3MgdGlkZSBoYXMgcm9sbGVkIGluIGFuZCB0aGUgc2hpcHMgYXJlIHR1Y2tlZCBhd2F5IGZvciB0aGUgbmlnaHQuIEF0IGRhd24sIFNpbGljb24gVmFsbGV5IGFyaXNlcyBhbmQgaW5oZXJpdHMgdGhlIGtpbmdkb20sIGFsb25nIHdpdGggU2VhdHRsZTogQW5kLCBzbyAgIGJlY29tZSA8aT4gdGhlIGludHJhY3RhYmxlIGRhdGEgbmVlZHMgb2YgYWxsIGluc3RpdHV0aW9ucywgcHVibGljIG9yIHByaXZhdGUsIGJpZyBhbmQgc21hbGwtLW5lZWRzIG9ubHkgdGhlIGNsb3VkIGNhbiBhbnN3ZXIuPC9pPiA8L3A+XHJcbiAgICA8cD5BbmQgd2h5IG5vdD8gQ2xvdWQgZGF0YSBzdG9yYWdlIG9mZmVycyBzZWN1cml0eSwgZGlyZWN0IHNlcnZpY2UgcHJvdmlkZXJzIHdpdGggYmlnIGRhdGEgam9icywgTmV0ZmxpeCBhbmQgTGlua2VkaW4ncyBleHRlbnNpdmUgcmVhbC10aW1lIG5ldHdvcmsgYW5hbHN5aXMgdXNpbmcgS2Fma2Egc3BlZWRzIHVwIHRoZWlyIGV2ZXItcmVhZHkgcmVjb21tZW5kYXRpb25zLiAgUmV1dGVycyBzaG93cyBhIGdsaW1wc2Ugb2YgdGhlIFBlbnRhZ29uJ3MgKGFuZCBvdGhlciBuYXRpb25zJ3MpIGFjY2VsZXJhdGluZyBuZWVkIHRvIHNlY3VyZSBkYXRhIGFzIHRoZSBpbnRlcnR3aW5pbmcgbmV0d29ya3Mgb2Ygd29ybGQgZGF0YSBtaWdyYXRlcyB0byBkaXN0cmlidXRlZCwgY2xvdWQgc3RvcmFnZS4gSW4gdGhpcyBkb21haW4sIHB1YmxpYyBpbmZyYXN0cnVjdHVyZSwgd2hldGhlciBwbGF0Zm9ybS1hcy1hLXNlcnZpY2Ugb3Igc2VydmVycywgdGVjaG5vbG9neSAtLSBhcyB1c3VhbCAtLSBtdXN0IHN3b29wIHRvIHNhdmUgdGhlIGRheS4gPC9wPlxyXG5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5Db25zdWx0YW50cyBhc3NvY2lhdGVkIHdpdGggdGhlICQ5MjcgYmlsbGlvbiBTZWF0dGxlIGp1Z2dlcm5hdXQgb2NjdXBpZWQgdG9wIHBvc2l0aW9ucyBhdCB0aGUgUGVudGFnb24gYWhlYWQgb2YgdGhlIHJvbGxvdXQgb2YgYSBtYXNzaXZlIGNsb3VkIGNvbnRyYWN0IHdvcnRoIHNvbWUgJDEwIGJpbGxpb24gdGhhdCBBbWF6b24gbG9va3MgcG9pc2VkIHRvIHNuYWcuIFJpdmFscyBjb21wbGFpbiB0aGUgcmVxdWlyZW1lbnRzIHdlcmUgd3JpdHRlbiB0byBmYXZvciBCZXpvc+KAmXMgY29tcGFueS4gRWl0aGVyIHdheSwgaW52ZXN0b3JzIHNob3VsZCBiZSBwcmVwYXJlZCBmb3IgaXRzIGdvdmVybm1lbnQgYnVzaW5lc3MgdG8gYXR0cmFjdCBncmVhdGVyIHNjcnV0aW55LjxzdXA+MTwvc3VwPiBcclxuICAgIDwvcD5cclxuICAgIDxwPlN1cmVseSBjb250cm92ZXJzeSBhd2FpdHMgYW55IGJpZCBkZWNpc2lvbiBkb3duIGhlcmUgb24gZWFydGgsIGJ1dCBhbGwgdGhpbmdzIHRoYXQgZ28gdXAgdG8gdGhlIGNsb3VkIG5lZWQgbm90IGNvbWUgZG93bi48L3A+XHJcbiAgICBgO1xyXG4gIHZhciBibG9nY2l0ZTE3ID1cclxuICAgIGAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSAgIGhyZWY9XCJodHRwczovL3d3dy5yZXV0ZXJzLmNvbS9hcnRpY2xlL3VrLXVzYS1wZW50YWdvbi1icmVha2luZ3ZpZXdzL2JyZWFraW5ndmlld3MtYW1hem9uLXBlbnRhZ29uLXRpZXMtbWF5LXJlY2VpdmUtZ3JlYXRlci1zY3J1dGlueS1pZFVTS0JOMUwxMEFTXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5yZXV0ZXJzLmNvbS9hcnRpY2xlL3VrLXVzYS1wZW50YWdvbi1icmVha2luZ3ZpZXdzL2JyZWFraW5ndmlld3MtYW1hem9uLXBlbnRhZ29uLXRpZXMtbWF5LXJlY2VpdmUtZ3JlYXRlci1zY3J1dGlueS1pZFVTS0JOMUwxMEFTXHJcbiAgICA8L2E+PC9wPiBcclxuICAgIGA7XHJcblxyXG4gIHZhciBibG9ncG9zdDE2ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5FaW5zdGVpbidzIHJlbWFyayBvbiBxdWFudHVtIGVudGFuZ2xlbWVudCdzICdzcG9va3knIGNoYXJhY3RlcmlzdGljcyBob2xkcyBmb3IgdGhvc2UgY2F1Z2h0IG9mZi1ndWFyZCwgYnV0IHN1ZGRlbiBpc24ndCBzcG9va3kgd2hlbiBzdWRkZW4gaXMgZXhwZWN0ZWQuIFRva3lvJ3MgZmlyc3QgcGhvdG9uIHRvIHNhdGVsbGl0ZSBiYWNrIHRvIGVhcnRoIHdpdGggYSBidXR0b24gc3dpdGNoIGNvbnRyb2wgYWxtb3N0IGxlYWRzIHRvIGJhbmFsaXR5LiBZZXQsIHRyYW5zbWl0dGluZyBkYXRhIHRocm91Z2ggYSBzaGFyZWQgcXVhbnR1bSBzdGF0ZSBmcm9tIHRoZSBmaXJzdCBwYXJ0eSB0byBzZWNvbmQgcGFydHkgYXBwZWFycyBpbnR1aXRpdmUsIGV2ZW4gaWYgaXQgaXMgICBvdGhlci13b3JsZGx5LiBXaXJlZCBNYWdhemluZTogIDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5Zb3UgbWF5IGhhdmUgaGVhcmQgdGhhdCBhIHF1Yml0IGluIHN1cGVycG9zaXRpb24gaXMgYm90aCAwIGFuZCAxIGF0IHRoZSBzYW1lIHRpbWUuIFRoYXTigJlzIG5vdCBxdWl0ZSB0cnVlIGFuZCBhbHNvIG5vdCBxdWl0ZSBmYWxzZeKAlHRoZXJl4oCZcyBqdXN0IG5vIGVxdWl2YWxlbnQgaW4gSG9tbyBzYXBpZW5z4oCZIGh1bWRydW0gY2xhc3NpY2FsIHJlYWxpdHkuIElmIHlvdSBoYXZlIGEgeWVhcm5pbmcgdG8gdHJ1bHkgZ3JvayBpdCwgeW91IG11c3QgbWFrZSBhIG1hdGhlbWF0aWNhbCBvZHlzc2V5IFdJUkVEIGNhbm5vdCBlcXVpcCB5b3UgZm9yLiBCdXQgaW4gdGhlIHNpbXBsaWZpZWQgYW5kIGRhcmUgd2Ugc2F5IHBlcmZlY3Qgd29ybGQgb2YgdGhpcyBleHBsYWluZXIsIHRoZSBpbXBvcnRhbnQgdGhpbmcgdG8ga25vdyBpcyB0aGF0IHRoZSBtYXRoIG9mIGEgc3VwZXJwb3NpdGlvbiBkZXNjcmliZXMgdGhlIHByb2JhYmlsaXR5IG9mIGRpc2NvdmVyaW5nIGVpdGhlciBhIDAgb3IgMSB3aGVuIGEgcXViaXQgaXMgcmVhZCBvdXTigJRhbiBvcGVyYXRpb24gdGhhdCBjcmFzaGVzIGl0IG91dCBvZiBhIHF1YW50dW0gc3VwZXJwb3NpdGlvbiBpbnRvIGNsYXNzaWNhbCByZWFsaXR5LjxzdXA+MTwvc3VwPiAgXHJcbiAgICA8L3A+XHJcbiAgICA8cD5ZYWxlIHJlc2VhcmNoZXJzIG9uIHRoZSB0b3BpYzo8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgICBJbiBhIHF1YW50dW0gcHJvY2VzcyBrbm93biBhcyB0ZWxlcG9ydGF0aW9uIHRoZSB1bmtub3duIHN0YXRlIG9mIGEgcXVhbnR1bSBiaXQgY2FuIGJlIHJlbGF5ZWQgdG8gYSBkaXN0YW50IHBhcnR5IHVzaW5nIHNoYXJlZCBlbnRhbmdsZW1lbnQgYW5kIGNsYXNzaWNhbCBpbmZvcm1hdGlvbi4gSGVyZSB3ZSBwcmVzZW50IGV4cGVyaW1lbnRzIGluIGEgc29saWQtc3RhdGUgc3lzdGVtIGJhc2VkIG9uIHN1cGVyY29uZHVjdGluZyBxdWFudHVtIGNpcmN1aXRzIGRlbW9uc3RyYXRpbmcgdGhlIHRlbGVwb3J0YXRpb24gb2YgdGhlIHN0YXRlIG9mIGEgcXViaXQgYXQgdGhlIG1hY3Jvc2NvcGljIHNjYWxlLiBJbiBvdXIgZXhwZXJpbWVudHMgdGVsZXBvcnRhdGlvbiBpcyByZWFsaXplZCBkZXRlcm1pbmlzdGljYWxseSB3aXRoIGhpZ2ggZWZmaWNpZW5jeSBhbmQgYWNoaWV2ZXMgYSBoaWdoIHJhdGUgb2YgdHJhbnNmZXJyZWQgcXViaXQgc3RhdGVzLiBUaGlzIGNvbnN0aXR1dGVzIGEgc2lnbmlmaWNhbnQgc3RlcCB0b3dhcmRzIHRoZSByZWFsaXphdGlvbiBvZiByZXBlYXRlcnMgZm9yIHF1YW50dW0gY29tbXVuaWNhdGlvbiBhdCBtaWNyb3dhdmUgZnJlcXVlbmNpZXMgYW5kIGJyb2FkZW5zIHRoZSB0b29sIHNldCBmb3IgcXVhbnR1bSBpbmZvcm1hdGlvbiBwcm9jZXNzaW5nIHdpdGggc3VwZXJjb25kdWN0aW5nIGNpcmN1aXRzLiA8L2k+PHN1cD4yPC9zdXA+PC9wPlxyXG4gICAgYDtcclxuICB2YXIgYmxvZ2NpdGUxNiA9IGA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3dpcmVkLWd1aWRlLXRvLXF1YW50dW0tY29tcHV0aW5nL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3dpcmVkLWd1aWRlLXRvLXF1YW50dW0tY29tcHV0aW5nL1xyXG4gICAgPC9hPjwvcD5cclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3NlYXMueWFsZS5lZHUvbmV3cy1ldmVudHMvbmV3cy9xdWFudHVtLXRlY2hub2xvZ3ktY2hpcFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9zZWFzLnlhbGUuZWR1L25ld3MtZXZlbnRzL25ld3MvcXVhbnR1bS10ZWNobm9sb2d5LWNoaXBcclxuICAgIDwvYT48L3A+YDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTUgPSBgXHJcbiAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UXVhbnR1bSBjb21tdW5pY2F0aW9uIG9mIGRhdGEgb2ZmZXJzIGluc3RhbnQgZGF0YSB0cmFuc2ZlciwgYW5kIGltcGVuYXRyYWJpbGl0eSBmcm9tIDNyZCBwYXJ0aWVzIC4uLiBBbW9uZyB0aGUgZXhjaXRpbmcgb24gZXZlbnRzIG9uIE5ldyBIYXZlbidzIHB1YmxpYyBzcGFjZSBHcmVlbiBQYXJrLCBZYWxlIHJlc2VhcmNoZXJzJyBxdWFudHVtIGFkdmFuY2VzIHN0ZWFsIHRoZSBoZWFkbGluZXM6IDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgdHdvIGVzc2VudGlhbCByZXF1aXJlbWVudHMgZm9yIGEgc2NhbGFibGUgcXVhbnR1bSBpbmZvcm1hdGlvbiBwcm9jZXNzb3IgYXJlIHF1YW50dW0gaW50ZXJmZXJlbmNlIChpbiB3aGljaCBhIHBob3RvbiDigJMgYWJsZSB0byBiZSBpbiBtb3JlIHRoYW4gb25lIHBsYWNlIGF0IGEgdGltZSDigJMgY3Jvc3NlcyBpdHMgb3duIHBhdGgpIGFuZCBzaW5nbGUtcGhvdG9uIGRldGVjdG9ycy4gVGhlIGNoaXAgdGhhdCB0aGUgcmVzZWFyY2hlcnMgZGVzaWduZWQgY29udGFpbnMgYSBuYW5vcGhvdG9uaWMgd2F2ZWd1aWRlLCB3aGljaCBjYW4gZ3VpZGUgbGlnaHQgaW50byBzbWFsbCBzcGFjZXMgYW5kIHRvIHdoZXJldmVyIGlzIG5lZWRlZCBvbiB0aGUgY2hpcC4gSXQgYWxzbyBoYXMgYSBkaXJlY3Rpb25hbCBjb3VwbGVyIHRoYXQgY2FuIHNwbGl0IGEgbGlnaHQgYmVhbSBpbnRvIHR3byBpZGVudGljYWwgYmVhbXMsIG9yIGNvbnZlcnNlbHksIGNvbWJpbmUgdHdvIGJlYW1zIGludG8gb25lIG91dHB1dC5cclxuICAgIDxiciAvPjxiciAvPlxyXG4gICAgV2l0aCB0aGlzIHJlc2VhcmNoLCBTY2h1Y2sgc2FpZCB0aGUgcmVzZWFyY2ggdGVhbSBzaG91bGQgZXZlbnR1YWxseSByZWFsaXplIGEgcHJvZ3JhbW1hYmxlIG9wdGljYWwgcXVhbnR1bSBwcm9jZXNzb3IgdGhhdCBjYW4gcnVuIGEgcXVhbnR1bSBhbGdvcml0aG0uIFRoZSBzY2FsYWJpbGl0eSBvZiB0aGUgbmFub2ZhYnJpY2F0aW9uIHJvdXRpbmVzIGZvciBzaWxpY29uIGNoaXBzIHdpbGwgdGhlbiBhbGxvdyB0aGVtIHRvIHNvbHZlIHByb2JsZW1zIGRpZmZpY3VsdCBmb3IgY2xhc3NpY2FsIGNvbXB1dGVycy48c3VwPjE8L3N1cD48L3A+XHJcbiAgICA8cD5CZXNpZGVzIHRoZSBxdWFudHVtIGNoYXJhY3RlcmlzdGljIG9mIGEgdGhpcmQgcGFydHkncyBvYnNlcnZhdGlvbi9pbnRlcmZlcmVuY2UsIHRoZSBzdGF0ZSBpcyBicm9rZW4gYW5kIGRhdGEgdHJhbnNmZXIgZGlzYXBwZWFycy0tYW5kLCB5ZXQgYW5vdGhlciBzdGF0ZSBpcyBidXQgYSBidXR0b24gZmxpcCdzIHN3aXRjaCBhd2F5ITwvcD4gYDtcclxuICB2YXIgYmxvZ2NpdGUxNSA9IGBcclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL2FyeGl2Lm9yZy9hYnMvMTMwMi41NjIxXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2FyeGl2Lm9yZy9hYnMvMTMwMi41NjIxXHJcbiAgICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uY29tbXMxMDM1MlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uY29tbXMxMDM1MlxyXG4gICAgPC9hPlxyXG4gICAgPC9wPlxyXG4gICAgXHJcbiAgICBgO1xyXG4gIHZhciBibG9ncG9zdDE0ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gICAgICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+ICAgPC9wPiBcclxuICAgIGA7XHJcbiAgdmFyIGJsb2djaXRlMTQgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2hvdy1icmFuZC1uZXctc2NpZW5jZS13aWxsLW1hbmFnZS10aGUtZm91cnRoLWluZHVzdHJpYWwtcmV2b2x1dGlvbi9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2hvdy1icmFuZC1uZXctc2NpZW5jZS13aWxsLW1hbmFnZS10aGUtZm91cnRoLWluZHVzdHJpYWwtcmV2b2x1dGlvbi9cclxuICAgIDwvYT5cclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3NjaXRlY2hkYWlseS5jb20vcGh5c2ljaXN0cy10ZWxlcG9ydC1pbmZvcm1hdGlvbi1pbi1hLXNvbGlkLXN0YXRlLXN5c3RlbS9hbXAvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3NjaXRlY2hkYWlseS5jb20vcGh5c2ljaXN0cy10ZWxlcG9ydC1pbmZvcm1hdGlvbi1pbi1hLXNvbGlkLXN0YXRlLXN5c3RlbS9hbXAvXHJcbiAgICA8L2E+XHJcbiAgICA8L3A+XHJcbiAgICBgO1xyXG4gIHZhciBibG9ncG9zdDEzID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gXHJcbjwvcD48cCBjbGFzcz1cInF1b3RlXCI+IFxyXG48cCA+4oCcSGlzdG9yaWNhbGx5LCBtYWduZXRpc20gYW5kIHN1cGVyY29uZHVjdGl2aXR5IHdlcmUgdmVyeSBkaXNwYXJhdGUgZmllbGRzIG9mIHBoeXNpY3Ms4oCdIEJpcmdlIHNhaWQuIOKAnFRoZSAxOTYwc+KAmSBwb2ludCBvZiB2aWV3IHdhcyB0aGF0IGlmIHlvdSB3ZXJlIHRvIGJyaW5nIGEgZmVycm9tYWduZXQgbmVhciBhIHN1cGVyY29uZHVjdG9yLCB5b3Ugd291bGQga2lsbCB0aGUgY29uZHVjdGl2aXR5LjxiciAvPjxiciAvPlxyXG7igJxJdCB3YXMgZm91bmQgdGhhdCB5b3UgY2FuIHB1dCBhIGZlcnJvbWFnbmV0IG5lYXIgYSBzdXBlcmNvbmR1Y3RvcjsgaW4gZmFjdCwgeW91IGNhbiBldmVuIG1ha2UgYSDigJhzYW5kd2ljaOKAmeKAlHN1cGVyY29uZHVjdG9yLCBmZXJyb21hZ25ldCwgc3VwZXJjb25kdWN0b3Is4oCdIHNhaWQgSm9zZXBoIEdsaWNrLCBhIGZvcm1lciBkb2N0b3JhdGUgc3R1ZGVudCBpbiBCaXJnZeKAmXMgbGFiIGFuZCB0aGUgcGFwZXLigJlzIGxlYWQgYXV0aG9yLiDigJxBbnkgc2FuZHdpY2ggb2YgdGhpcyB0eXBlIGlzIGNhbGxlZCBhIEpvc2VwaHNvbiBqdW5jdGlvbiwgd2hpY2ggaXMgYXQgdGhlIGhlYXJ0IG9mIGV2ZXJ5dGhpbmcgd2UgYXJlIGRvaW5nLjxzdXA+MTwvc3VwPiA8L3A+IFxyXG5gO1xyXG4gIHZhciBibG9nY2l0ZTEzID0gYCAgXHJcbjxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL21zdXRvZGF5Lm1zdS5lZHUvbmV3cy8yMDE4L21zdS1waHlzaWNpc3RzLXNvbHZlLWEtc3RvcmllZC1wcm9ibGVtL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9tc3V0b2RheS5tc3UuZWR1L25ld3MvMjAxOC9tc3UtcGh5c2ljaXN0cy1zb2x2ZS1hLXN0b3JpZWQtcHJvYmxlbS9cclxuPC9hPlxyXG48L3A+XHJcbmA7XHJcbiAgdmFyIGJsb2dwb3N0MTIgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiAgICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj4gPHN1cD4gPC9zdXA+XHJcbiAgICA8L3A+PGJyIC8+ICAgIDxwID4gPC9wPmA7XHJcbiAgdmFyIGJsb2djaXRlMTIgPSBgPHAgY2xhc3M9XCJjaXRlXCI+ICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uY29tbXMxMDM1MlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uY29tbXMxMDM1MlxyXG4gICAgPC9hPlxyXG4gICAgPC9wPmA7XHJcbiAgdmFyIGJsb2dwb3N0MTEgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPk1hcnZlbHMgb2YgYW5vbWFseSBkZXRlY3Rpb24gZXh0ZW5kIGZyb20gYnVzaW5lc3MgYW5kIHN0YXRlIHNlY3VyaXR5IHRvIHNvZnR3YXJlIGludGVncml5IC0tIHdoeSBub3QgZXh0ZW5kIHRoZSB1c2UgdG8gPGk+c29jaWFsIGludGVncml0eSB0cmFjZWQgYnkgbmV0d29yayBpbnRlcmFjdGlvbiBzaWduYXR1cmVzIC4uLjwvaT4gXHJcbiAgICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+V2hpbGUgc29tZSBhdHRlbXB0cyB0byBkZXRlY3Qgc29jaWFsLW1lZGlhIGFjY291bnRzIG9mIG1hbGljaW91cyBhY3RvcnMgcmVseSBvbiBjb250ZW50IG9yIGxhbmd1YWdlIGZpbHRlcnMgdGhhdCB0ZXJyb3Jpc3RzIGFuZCBkaXNpbmZvcm1lcnMgaGF2ZSBwcm92ZWQgY2FwYWJsZSBvZiBjb25mdXNpbmcsIE1yLiBBbHZhcmnigJlzIGFsZ29yaXRobSBsb29rcyBmb3IgYWNjb3VudHMgdGhhdCBzcHJlYWQgY29udGVudCBmdXJ0aGVyIGFuZCBmYXN0ZXIgdGhhbiBleHBlY3RlZC4gU2luY2UgdGhpcyBpcyB0aGUgZ29hbCBvZiB0ZXJyb3Jpc3QgcmVjcnVpdGVycyBhbmQgcHJvcGFnYW5kaXN0cyBhbGlrZSwgdGhlIG1ldGhvZCBjb3VsZCBiZSBvbiB0aGUgZnJvbnQgbGluZXMgb2YgYWxnb3JpdGhtaWMgZmlsdGVyaW5nIGFjcm9zcyBzb2NpYWwgbmV0d29ya3MuIEh1bWFucyBzdGlsbCBuZWVkIHRvIG1ha2UgdGhlIGZpbmFsIGRldGVybWluYXRpb24sIHRvIGF2b2lkIGZhbHNlIHBvc2l0aXZlcy4gPHN1cD4xPC9zdXA+XHJcbiAgICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+V2hpbGUgc29tZSBhdHRlbXB0cyB0byBkZXRlY3Qgc29jaWFsLW1lZGlhIGFjY291bnRzIG9mIG1hbGljaW91cyBhY3RvcnMgcmVseSBvbiBjb250ZW50IG9yIGxhbmd1YWdlIGZpbHRlcnMgdGhhdCB0ZXJyb3Jpc3RzIGFuZCBkaXNpbmZvcm1lcnMgaGF2ZSBwcm92ZWQgY2FwYWJsZSBvZiBjb25mdXNpbmcsIE1yLiBBbHZhcmnigJlzIGFsZ29yaXRobSBsb29rcyBmb3IgYWNjb3VudHMgdGhhdCBzcHJlYWQgY29udGVudCBmdXJ0aGVyIGFuZCBmYXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXIgdGhhbiBleHBlY3RlZC4gU2luY2UgdGhpcyBpcyB0aGUgZ29hbCBvZiB0ZXJyb3Jpc3QgcmVjcnVpdGVycyBhbmQgcHJvcGFnYW5kaXN0cyBhbGlrZSwgdGhlIG1ldGhvZCBjb3VsZCBiZSBvbiB0aGUgZnJvbnQgbGluZXMgb2YgYWxnb3JpdGhtaWMgZmlsdGVyaW5nIGFjcm9zcyBzb2NpYWwgbmV0d29ya3MuIEh1bWFucyBzdGlsbCBuZWVkIHRvIG1ha2UgdGhlIGZpbmFsIGRldGVybWluYXRpb24sIHRvIGF2b2lkIGZhbHNlIHBvc2l0aXZlcy4gPHN1cD4xPC9zdXA+XHJcbiAgICA8L3A+PGJyIC8+ICBcclxuICAgIDxwID4gPC9wPi5cclxuIGA7XHJcbiAgdmFyIGJsb2djaXRlMTEgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lndzai5jb20vYXJ0aWNsZXMvYm90cy12cy10cm9sbHMtaG93LWFpLWNvdWxkLWNsZWFuLXVwLXNvY2lhbC1tZWRpYS0xNTMzODQ5MDAxP21vZD1kamVtQ0lPX2hcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lndzai5jb20vYXJ0aWNsZXMvYm90cy12cy10cm9sbHMtaG93LWFpLWNvdWxkLWNsZWFuLXVwLXNvY2lhbC1tZWRpYS0xNTMzODQ5MDAxP21vZD1kamVtQ0lPX2hcclxuICAgIDwvYT5cclxuICAgIDwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxMCA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gICAgPC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPk1hY2hpbmVzIHVzZWQgdG8gYmUgc2VydmljZWQgYWNjb3JkaW5nIHRvIGEgcGxhbiwgYW5kIGxhdGUgbWFpbnRlbmFuY2Ugd291bGQgbWVhbiBhIHJpc2sgb2YgcHJvZHVjdGlvbiBkb3dudGltZS4gVG9kYXksIHByb2Nlc3MgZGF0YSBmcm9tIG1hY2hpbmVzIGlzIHVzZWQgZm9yIHByZWRpY3RpbmcgcmVtYWluaW5nIHNlcnZpY2UgbGlmZS4gRXNwZWNpYWxseSBjcml0aWNhbCBwYXJhbWV0ZXJzIHN1Y2ggYXMgdGVtcGVyYXR1cmUsIG5vaXNlLCBhbmQgdmlicmF0aW9uIGFyZSByZWNvcmRlZCB0byBoZWxwIGRldGVybWluZSB0aGUgb3B0aW1hbCBvcGVyYXRpbmcgc3RhdGUgb3IgZXZlbiBuZWNlc3NhcnkgbWFpbnRlbmFuY2UgdGltZXMuIFRoaXMgYWxsb3dzIHVubmVjZXNzYXJ5IHdlYXIgdG8gYmUgYXZvaWRlZCBhbmQgcG9zc2libGUgZmF1bHRzIGFuZCB0aGVpciBjYXVzZXMgdG8gYmUgZGV0ZWN0ZWQgZWFybHkgb24uIFdpdGggdGhlIGhlbHAgb2YgdGhpcyBtb25pdG9yaW5nLCBjb25zaWRlcmFibGUgb3B0aW1pemF0aW9uIHBvdGVudGlhbCBpbiB0ZXJtcyBvZiBmYWNpbGl0eSBhdmFpbGFiaWxpdHkgYW5kIGVmZmVjdGl2ZW5lc3MgYXJpc2VzLCBicmluZ2luZyB3aXRoIGl0IGRlY2lzaXZlIGFkdmFudGFnZXMuXHJcblxyXG4gICAgVGhlIG1haW4gZWxlbWVudCBpbiB0aGlzIHByZWRpY3RpdmUgbWFpbnRlbmFuY2UgKFBNKSBpcyBjb25kaXRpb24tYmFzZWQgbW9uaXRvcmluZyAoQ0JNKVxyXG5cclxuICAgIEFkZHJlc3NpbmcgU2Vuc29yIENoYWxsZW5nZXMgYW5kIERlbWFuZHMgZm9yIEZ1dHVyZSBTZXJ2aWNpbmc8c3VwPjE8L3N1cD5cclxuICAgIDwvcD48YnIgLz5cclxuICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvbWVjaERlZ3JhZGUuanBnXCIgd2lkdGg9XCIzNTBweFwiIGNsYXNzPVwiem9vbVwiIC8+PGJyIC8+XHJcbiAgICA8cCA+IDwvcD5gO1xyXG4gIHZhciBibG9nY2l0ZTEwID0gYCBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy5zZW5zb3JzbWFnLmNvbS9jb21wb25lbnRzL2FkZHJlc3Npbmctc2Vuc29yLWNoYWxsZW5nZXMtYW5kLWRlbWFuZHMtZm9yLWZ1dHVyZS1zZXJ2aWNpbmdcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnNlbnNvcnNtYWcuY29tL2NvbXBvbmVudHMvYWRkcmVzc2luZy1zZW5zb3ItY2hhbGxlbmdlcy1hbmQtZGVtYW5kcy1mb3ItZnV0dXJlLXNlcnZpY2luZ1xyXG4gICAgPC9hPlxyXG4gICAgPC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDkgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj4uIEFycmF5cyBvZiBTUVVJRHMgKHN1cGVyY29uZHVjdGluZyBxdWFudHVtIGludGVyZmVyZW5jZSBkZXZpY2VzKSBhcmUgY3VycmVudGx5IHRoZSBtb3N0IGNvbW1vbiBtYWduZXRvbWV0ZXIsIHdoaWxlIHRoZSBTRVJGIChzcGluIGV4Y2hhbmdlIHJlbGF4YXRpb24tZnJlZSkgbWFnbmV0b21ldGVyIGlzIGJlaW5nIGludmVzdGlnYXRlZCBmb3IgZnV0dXJlIG1hY2hpbmVzLjxzdXA+MTwvc3VwPlxyXG4gICAgPC9wPjxiciAvPiBcclxuICAgIDxwID4gPC9wPi5cclxuIGA7XHJcbiAgdmFyIGJsb2djaXRlOSA9IGAgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lnhsc3RhdC5jb20vZW4vc29sdXRpb25zL2ZlYXR1cmVzL2NsYXNzaWZpY2F0aW9uLWFuZC1yZWdyZXNzaW9uLXRyZWVzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy54bHN0YXQuY29tL2VuL3NvbHV0aW9ucy9mZWF0dXJlcy9jbGFzc2lmaWNhdGlvbi1hbmQtcmVncmVzc2lvbi10cmVlc1xyXG4gICAgPC9hPlxyXG4gICAgPC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDggPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkNsYXNzaWZpY2F0aW9uIGFuZCBSZWdyZXNzaW9uIChEZWNpc2lvbikgVHJlZXMgYXJlIG5vdCBqdXN0IGFjY3VyYXRlLCBtdWx0aXB1cnBvc2UgYW5kIGZvdW5kYXRpb25hbCB0byBwcmVkaWN0aXZlIG1hY2hpbmUgbGVhcm5pbmcgYWxnb3JpdGhtcyAoZS5nLiByYW5kb20gZm9yZXN0cywgYmF5ZXNpYW4gdHJlZXMsIGJhZ2dpbmcpLCBidXQgdGhlIHRyZWVzJyBmaW5hbCBwcm9kdWN0IHJldmVhbHMgdGhlIGRpZmZlcmVudCByYXRpb25hbGUgZm9yIHRoZSBvdXRwdXQuIFByaW50ZWQgb250byBhIHNoZWV0ICAgb2YgcGFwZXIsIGJvdGggc3RhdGlzdGljYWwgcHJhY3RpdGlvbmVyIGFuZCB0aGUgZG9tYWluIHByb2Zlc3Npb25hbCBpbnR1aXRpdmVseSBhbmQgaGV1cmlzdGljYWxseSB1bmRlcnN0YW5kIHByYWN0aWNhbCB1c2UgZm9yIGFuIGFuYWx5c2lzLiBUaGlzIEp1bHkgMjAxNyBDYW5jZXIgc3R1ZHkgZXhlbXBsaWZpZXMgdGhlIHV0aWxpdHkgb2YgaGVhbHRoY2FyZS1iYXNlZCBhbGdvcml0aG1zIG9mIGFuYWx5c2lzIC4uLiBcclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgYWltIG9mIHRoaXMgc3R1ZHkgd2FzIHRvIGRldmVsb3AgYW5kIHZhbGlkYXRlIGEgY2xpbmljYWwgcHJlZGljdGl2ZSBtb2RlbCBmb3IgMS15ZWFyIG1vcnRhbGl0eSBhbW9uZyBwYXRpZW50cyB3aXRoIGNvbG9uIGNhbmNlciB3aG8gc3Vydml2ZSBmb3IgYXQgbGVhc3QgMzAgZGF5cyBhZnRlciBzdXJnZXJ5LjxiciAvPjxiciAvPlJhbmRvbSBmb3Jlc3QsIGdlbmV0aWMgYWxnb3JpdGhtcyBhbmQgY2xhc3NpZmljYXRpb24gYW5kIHJlZ3Jlc3Npb24gdHJlZXMgd2VyZSBjb21iaW5lZCBpbiBvcmRlciB0byBpZGVudGlmeSB0aGUgdmFyaWFibGVzIGFuZCBwYXJ0aXRpb24gcG9pbnRzIHRoYXQgb3B0aW1hbGx5IGNsYXNzaWZ5IHBhdGllbnRzIGJ5IHJpc2sgb2YgbW9ydGFsaXR5LiBUaGUgcmVzdWx0aW5nIGRlY2lzaW9uIHRyZWUgd2FzIGNhdGVnb3JpemVkIGludG8gZm91ciByaXNrIGNhdGVnb3JpZXMuIFNwbGl0LXNhbXBsZSBhbmQgYm9vdHN0cmFwIHZhbGlkYXRpb24gd2VyZSBwZXJmb3JtZWQuPHN1cD4xPC9zdXA+XHJcbiAgICA8L3A+PGJyIC8+XHJcbiAgICA8aW1nIHNyYz1cImRpc3QvaW1nL2lyaXNDQVJULmpwZ1wiIHdpZHRoPVwiMzUwcHhcIiBjbGFzcz1cInpvb21cIiAvPjxiciAvPlxyXG4gICAgPHAgPkFuZCwgbm93IHRoYXQgc291bmQgbWV0aG9kb2xvZ3kgbWVldHMgYW4gaW5jcmVhc2luZ2x5IHVzZXItZnJpZW5kbHkgTWFjaGluZSBMZWFybmluZyBzb2Z0d2FyZSB0b29sc2V0IGZvciB3aWRlciBwcmFjdGljYWwgYXBwbGljYXRpb25zLCBiZWdpbm5pbmcgZmlyc3RseSB3aXRoaW4gaGVhbHRoY2FyZSB0ZWNobm9sb2dpZXMgPGk+YW5kIHRoYXQgc2Vjb25kIG9waW5pb24hPC9pPjwvcD4uXHJcbiBgO1xyXG4gIHZhciBibG9nY2l0ZTggPSBgSW1hZ2UgY3JlZGl0czogaHR0cHM6Ly93d3cueGxzdGF0LmNvbS9lbi9zb2x1dGlvbnMvZmVhdHVyZXMvY2xhc3NpZmljYXRpb24tYW5kLXJlZ3Jlc3Npb24tdHJlZXNcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy5kb3ZlcHJlc3MuY29tL2NvbWJpbmluZy1zdGF0aXN0aWNhbC10ZWNobmlxdWVzLXRvLXByZWRpY3QtcG9zdHN1cmdpY2FsLXJpc2stb2YtMS15ZWEtcGVlci1yZXZpZXdlZC1hcnRpY2xlLUNMRVAjXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5kb3ZlcHJlc3MuY29tL2NvbWJpbmluZy1zdGF0aXN0aWNhbC10ZWNobmlxdWVzLXRvLXByZWRpY3QtcG9zdHN1cmdpY2FsLXJpc2stb2YtMS15ZWEtcGVlci1yZXZpZXdlZC1hcnRpY2xlLUNMRVAjXHJcbiAgICA8L2E+XHJcbiAgICA8L3A+YDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0NyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UHJlZGljdGl2ZSBhbmFseXRpY3MgIGhhcyBzbG93bHkgcHJvZ3Jlc3NlZCBpbiBzb3BoaXN0aWNhdGlvbiBvdmVyIHRoZSBwYXN0IDQ1IHllYXJzLCBhbmQgdGhlIGN1cnJlbnQgbmV4dXMgd2l0aCBwb3dlcmZ1bCBtYWNoaW5lLWxlYXJuaW5nIHRvb2xzIGNoYW5nZXMgdGhlIGhlYWx0aCBnYW1lOiA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+IEEgcmVwb3J0IGJ5IEFCSSBSZXNlYXJjaCBKdW5lIDIwMTggcmVwb3J0IGhpZ2hsaWdodGVkIGEgc2lnbmlmaWNhbnQgcmlzZSBpbiBwYXRpZW50IG1vbml0b3JpbmcgZGV2aWNlcywgaW5jbHVkaW5nIEFJIGZvciBob21lLWJhc2VkIHByZXZlbnRhdGl2ZSBoZWFsdGhjYXJlIGFuZCBwcmVkaWN0aXZlIGFuYWx5dGljcywgd2hpY2ggY291bGQgc2F2ZSBob3NwaXRhbHMgYXJvdW5kICQ1MmJuIGJ5IDIwMjEuPGJyIC8+PGJyIC8+XHJcblxyXG4gICAgQWNjZW50dXJl4oCZcyBEaWdpdGFsIEhlYWx0aCBUZWNobm9sb2d5IFZpc2lvbiAyMDE4IHJlcG9ydCBhbHNvIGNsYWltcyB0aGF0IDg1JSBvZiBoZWFsdGggZXhlY3V0aXZlcyBpbiB0aGUgVVMgYmVsaWV2ZSB0aGF0IGV2ZXJ5IGh1bWFuIHdpbGwgYmUgZGlyZWN0bHkgaW1wYWN0ZWQgb24gYSBkYWlseSBiYXNpcyBieSBhbiBBSS1iYXNlZCBkZWNpc2lvbiB3aXRoaW4gdGhlIG5leHQgdGhyZWUgeWVhcnMuPGJyIC8+PGJyIC8+XHJcbiAgICBcclxuICAgIFV0aWxpc2luZyBiaWcgZGF0YSBnZW5lcmF0ZWQgYnkgY2xpbmljYWwgaW5mb3JtYXRpb24gYW5kIHJlc2VhcmNoIGNhbiByZXZlYWwgY2x1c3RlcnMgYW5kIHBhdHRlcm5zIHdoaWNoIGNhbiBiZW5lZml0IGFsbCBhc3BlY3RzIG9mIGhlYWx0aGNhcmUsIGxlYWRpbmcgcGF0aWVudCBjYXJlIHRvIGJlY29tZSBpbmNyZWFzaW5nbHkgc3RyYXRlZ2ljLjxzdXA+MTwvc3VwPiAgPC9wPlxyXG4gICAgPHA+SXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQgdGhlIGxvbmcgcm9hZCBwYXZlZCBieSBzdGF0aXN0aWNhbCB0aGVvcnkgaGFzIHJldm9sdXRpb25pemVkIHRoZSBhYm92ZS1tZW50aW9uZWQgZmllbGRzIGFzIG11Y2ggYXMgaXQgbm93IHBvd2VycyB0aGUgcHJhY3RpY2FsIHVzZSBvZiBhbmFseXRpY3M6PC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPk9yaWdpbmF0aW5nIGluIHRoZSBzdGF0aXN0aWNhbCAoZS5nLiwgSG9sbGFuZFxyXG4gICAgICAxOTg2OyBSb3NlbmJhdW0gMjAwMjsgUnViaW4gMjAwNSwgMjAwNikgYW5kXHJcbiAgICAgIGVjb25vbWV0cmljcyBsaXRlcmF0dXJlIChzZWUgSGVja21hbiAyMDAwLFxyXG4gICAgICAyMDAxLCAyMDA1OyBIZWNrbWFuICYgVnl0bGFjaWwgMjAwN2EsYjtcclxuICAgICAgTWFuc2tpIDE5OTUsIDIwMDcpLCB0aGUgY291bnRlcmZhY3R1YWwsXHJcbiAgICAgIFJ1YmluLCBvciBwb3RlbnRpYWwgb3V0Y29tZXMgbW9kZWwgb2YgY2F1c2FsaXR5XHJcbiAgICAgIGhhcywgb3ZlciB0aGUgcGFzdCB0aHJlZSBkZWNhZGVzLCBiZWNvbWVcclxuICAgICAgdGhlIHN0YW5kYXJkIGNvbmNlcHR1YWwgdG9vbCB0byB1bmlmeSB0aGUgbm90aW9uXHJcbiAgICAgIG9mIGNhdXNhbGl0eSwgdG8gdW5kZXJzdGFuZCB0aGUgaWRlbnRpZmljYXRpb25cclxuICAgICAgcHJvYmxlbSBhdCB0aGUgaGVhcnQgb2YgY2F1c2FsIGluZmVyZW5jZSxcclxuICAgICAgYW5kIHRvIGFzc2VzcyB0aGUgdXRpbGl0eSBvZiBhbHRlcm5hdGl2ZSBlc3RpbWF0aW9uXHJcbiAgICAgIHRlY2huaXF1ZXMgKFNvYmVsIDIwMDUpLjxzdXA+Mjwvc3VwPjwvcD5cclxuICAgICAgPHA+U28sIHRoZSB0YWtlLWF3YXkgaGVyZSBpcyB0aGF0IEEuSS4gYW5kIDxpPk1hY2hpbmUtTGVhcm5pbmcgUmVzZWFyY2ggY291bGQgaGF2ZSBuZXZlciBwcm9ncmVzc2VkIHNvIHF1aWNrbHkgaWYgbm90IGZvciB0aGUgc2V0dGxlZCBzY2llbnRpYyBwYXJhZGlnbSBvdmVyIHNvdW5kIGFuYWx5c2lzIHRoYXQgcnVsZXMgb3V0IHNwdXJpb3VzIHZhcmlhYmxlcywgd2hpbGUgcHJvcGVybHkgd2VpZ2h0aW5nIHRoZSBjb25kaXRpb25zIHRoYXQgbWF0dGVyLjwvaT4gRnVydGhlcm1vcmUsIHRoZSBtaXN0YWtlcyBpbiBhbGdvcml0aG0gZGVzaWduIHdlcmUgbWFkZSBpbiB0aGUgMTk3MCdzLCAxOTgwJ3MsIGFuZCAxOTkwJ3MtLW1pc2xlYWRpbmcgbWlzdGFrZXMtLWhhdmUgYmVlbiBzd2VwdCBhc2lkZSwgcHJvdmlkaW5nIG11Y2gtdGVzdGVkIGFuZCByZWZpbmVkIHN0cmF0ZWdpZXMuIFRoZSBtZWRpY2FsIGZpZWxkJ3MgY2FzZSBleGVtcGxpZmllcyB0aGlzIGV2b2x1dGlvbjo8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+UmFuZG9taXplZCBjb250cm9sbGVkIHRyaWFscyBhcmUgY29uc2lkZXJlZCB0aGUgZ29sZFxyXG4gICAgc3RhbmRhcmQgZm9yIGFzc2Vzc2luZyB0aGUgZWZmaWNhY3kgb2YgbWVkaWNhdGlvbnMsIG1lZGljYWxcclxuICAgIHByb2NlZHVyZXMsIG9yIGNsaW5pY2FsIHN0cmF0ZWdpZXMuIE5ldmVydGhlbGVzcywgcGFydGljdWxhcmx5XHJcbiAgICBmb3IgcmVzZWFyY2ggb24gdGhlIHByZXZlbnRpb24gb2YgY2hyb25pYyBkaXNlYXNlLCByYW5kb21pemVkXHJcbiAgICB0cmlhbHMgYXJlIG9mdGVuIGluZmVhc2libGUgYmVjYXVzZSBvZiB0aGVpciBzaXplLCB0aW1lLFxyXG4gICAgYW5kIGJ1ZGdldCByZXF1aXJlbWVudHMsIGFzIHdlbGwgYXMgcXVlc3Rpb25hYmxlIGdlbmVyYWxpemFiaWxpdHlcclxuICAgIG9yIGV0aGljYWwgY29uc3RyYWludHMuPGJyIC8+PGJyIC8+XHJcbiAgICBPbiB0aGUgb3RoZXIgaGFuZCwgbm9uZXhwZXJpbWVudGFsIHN0dWRpZXMgb2YgaW50ZXJ2ZW50aW9uc1xyXG4gICAgaGF2ZSBmcmVxdWVudGx5IGJlZW4gY3JpdGljaXplZCBiZWNhdXNlIG9mIHRoZWlyIHBvdGVudGlhbFxyXG4gICAgZm9yIHNlbGVjdGlvbiBiaWFzLiBUaGlzIGNvbmNlcm4gcmVhY2hlZCBhIGNyZXNjZW5kb1xyXG4gICAgd2l0aCB0aGUgZGlzcGFyaXR5IGluIGVzdGltYXRlZCBlZmZlY3RzIG9mIGhvcm1vbmUgcmVwbGFjZW1lbnRcclxuICAgIHRoZXJhcHkgZnJvbSByYW5kb21pemVkIHRyaWFscyBhbmQgbm9uZXhwZXJpbWVudGFsXHJcbiAgICBzdHVkaWVzLiBUaGlzIGltYnJvZ2xpbyBoaWdobGlnaHRlZCB0aGUgbmVlZCB0byBkZXZlbG9wXHJcbiAgICBhbmQgYXBwbHkgaW1wcm92ZWQgbWV0aG9kcyB0byByZWR1Y2UgYmlhcyBpbiBub25leHBlcmltZW50YWxcclxuICAgIHN0dWRpZXMgaW4gd2hpY2ggc2VsZWN0aW9uIGJpYXMgb3IgY29uZm91bmRpbmcgaXNcclxuICAgIGxpa2VseSB0byBvY2N1ciAuPHN1cD4zPC9zdXA+PC9wPlxyXG4gICAgPHA+U28sIG5vd2FkYXlzIHdlIGRvbid0IGFzayBmb3IgYSBzZWNvbmQgb3BpbmlvbiB3aGVuIHdlIGNhbiBhc2sgZm9yIGEgdHJpbGxpb24gb3BpbmlvbnMgbmFycm93ZWQgZG93biB0byBvbmUgaGVjayBvZiBhIHNlY29uZCBvcGluaW9uITwvcD5gO1xyXG4gIHZhciBibG9nY2l0ZTcgPSBgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaGVhbHRoY2FyZWdsb2JhbC5jb20vdGVjaG5vbG9neS9haS1zZWVuLWxlc3MtdGhyZWF0LWFuZC13ZWxjb21lZC1oZWFsdGgtcHJvZmVzc2lvbmFscy1yZXNlYXJjaC1yZXZlYWxzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5oZWFsdGhjYXJlZ2xvYmFsLmNvbS90ZWNobm9sb2d5L2FpLXNlZW4tbGVzcy10aHJlYXQtYW5kLXdlbGNvbWVkLWhlYWx0aC1wcm9mZXNzaW9uYWxzLXJlc2VhcmNoLXJldmVhbHNcclxuICAgIDwvYT5cclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy5hbm51YWxyZXZpZXdzLm9yZy9kb2kvYWJzLzEwLjExNDYvYW5udXJldi5zb2MuMDEyODA5LjEwMjcwMlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYW5udWFscmV2aWV3cy5vcmcvZG9pL2Ficy8xMC4xMTQ2L2FubnVyZXYuc29jLjAxMjgwOS4xMDI3MDJcclxuICAgIDwvYT5cclxuICAgIDwvcD4gICAgPHAgY2xhc3M9XCJjaXRlXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcG1jL2FydGljbGVzL1BNQzE0NDgyMTQvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3BtYy9hcnRpY2xlcy9QTUMxNDQ4MjE0L1xyXG4gICAgPC9hPlxyXG4gICAgPC9wPmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDYgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPiAgPGk+W0ludGVsJ3NdICBpOS04OTUwSEsgcHJvY2Vzc29yIGlzIHRoZSBmaXJzdCBtb2JpbGUgSW50ZWwgcHJvY2Vzc29yIHdpdGggc2l4IGNvcmVzIGFuZCAxMiB0aHJlYWRzLiBJdCBjb21lcyBmdWxseSB1bmxvY2tlZC4gSXQgaGFzIHRoZSBuZXcgSW50ZWwgdGhlcm1hbCBWZWxvY2l0eSBCb29zdCwgd2hpY2ggYXV0b21hdGljYWxseSBpbmNyZWFzZXMgY2xvY2sgZnJlcXVlbmN5IHVwIHRvIDIwMCBNSHogaWYgdGhlIHByb2Nlc3NvciB0ZW1wZXJhdHVyZSBpcyBsb3cgZW5vdWdoIGFuZCB0aGVyZSdzIGVub3VnaCB0dXJibyBwb3dlciwgZ2l2aW5nIGEgdHVyYm8gZnJlcXVlbmN5IG9mIHVwIHRvIDQuOCBHSHouPC9pPjwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIiBUaGUgaTktODk1MEhLIHByb2Nlc3NvciBpcyB0aGUgZmlyc3QgbW9iaWxlIEludGVsIHByb2Nlc3NvciB3aXRoIHNpeCBjb3JlcyBhbmQgMTIgdGhyZWFkcy4gSXQgY29tZXMgZnVsbHkgdW5sb2NrZWQuIEl0IGhhcyB0aGUgbmV3IEludGVsIHRoZXJtYWwgVmVsb2NpdHkgQm9vc3QsIHdoaWNoIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2VzIGNsb2NrIGZyZXF1ZW5jeSB1cCB0byAyMDAgTUh6IGlmIHRoZSBwcm9jZXNzb3IgdGVtcGVyYXR1cmUgaXMgbG93IGVub3VnaCBhbmQgdGhlcmUncyBlbm91Z2ggdHVyYm8gcG93ZXIsIGdpdmluZyBhIHR1cmJvIGZyZXF1ZW5jeSBvZiB1cCB0byA0LjggR0h6LjwvaT5cclxuICAgIDwvcD5cclxuICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gTmVlZHMgc2hhcGUgb3VyIGludmVudGlvbnMgYW5kIG91ciBpbnZlbnRpb25zIHNoYXBlIG91ciBuZWVkczogV2l0aCB0aGUgYnJhbmQgbmV3IHNldCBvZiBtb2JpbGUgY29tcHV0aW5nIHJlcXVpcmVtZW50cyBzZXJ2ZSB1cCB1dGlsaXR5IGZvciB0aGUgaTkuICBJbnRlbCdzIGFkdmFuY2VzIHBhbGUgaW4gY29tcGFyaXNvbiwgaG93ZXZlciwgdG8gR1BVIGFuZCBuZXdlciBjb21wdXRpbmcgdHJlbmRzLiBUaGlzIHRoZW1lIGFyaXNlcyB0aW1lIGFmdGVyIHRpbWUgaW4gbXkgcG9zdHMsIGJ1dCBtYXRoZW1hdGljcyB3aWxsIHJld3JpdGUgdGhlIHJ1bGVzIG9mIHBlcmZvcm1hbmNlIC4gLiAuPC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSA4dGggR2VuIHByb2Nlc3NvcnMgaW5jb3Jwb3JhdGUgSW50ZWwgT2N0YW5lIG1lbW9yeSwgYSBzbWFydCBhbmQgYWRhcHRhYmxlIHN5c3RlbSBhY2NlbGVyYXRvciBmb3IgZGVza3RvcCBhbmQgbW9iaWxlIHBsYXRmb3JtcyB1c2luZyBTQVRBLWJhc2VkIHN0b3JhZ2UgdGVjaG5vbG9neS48YnIgLz48YnIgLz5cclxuXHJcbiAgICBJbnRlbCBhbHNvIGhhcyByZWxlYXNlZCBhIG5ldyBEYXRhIERyaXZlIEFjY2VsZXJhdGlvbiBmZWF0dXJlIHRoYXQgYm9vc3RzIGEgbGFyZ2Ugc2Vjb25kYXJ5IEhERCBoYXJkIGRyaXZlLlxyXG4gICAgXHJcbiAgICBUb2dldGhlciwgSW50ZWwgT2N0YW5lIGFuZCBEYXRhIERyaXZlIEFjY2VsZXJhdGlvbiBwcm92aWRlIHVwIHRvIDQuN3ggdGhlIGdhbWUgbG9hZGluZyBzcGVlZCBhbmQgMS43eCBmYXN0ZXIgbWVkaWEgbG9hZGluZywgSW50ZWwgc2FpZC5cclxuICAgICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgICBUaGUgYWN0dWFsIHRhc2sgb2YgcHJvY2Vzc2luZyBBSSBpcyBhIHZlcnkgZGlmZmVyZW50IHByb2Nlc3MgZnJvbSBzdGFuZGFyZCBjb21wdXRpbmcgb3IgR1BVIHByb2Nlc3NpbmcsIGhlbmNlIHRoZSBwZXJjZWl2ZWQgbmVlZCBmb3Igc3BlY2lhbGl6ZWQgY2hpcHMuIEEgeDg2IENQVSBjYW4gZG8gQUksIGJ1dCBpdCBkb2VzIGEgdGFzayBpbiAxMiBzdGVwcyB3aGVuIG9ubHkgdGhyZWUgYXJlIHJlcXVpcmVkOyBhIEdQVSBpbiBzb21lIGNhc2VzIGNhbiBhbHNvIGJlIG92ZXJraWxsLlxyXG4gICAgPGJyIC8+PGJyIC8+XHJcbiAgICBHZW5lcmFsbHksIHNjaWVudGlmaWMgY29tcHV0YXRpb24gaXMgZG9uZSBpbiBhIGRldGVybWluaXN0aWMgZmFzaGlvbi4gWW91IHdhbnQgdG8ga25vdyB0d28gcGx1cyB0aHJlZSBlcXVhbHMgZml2ZSBhbmQgY2FsY3VsYXRlIGl0IHRvIGFsbCBvZiBpdHMgZGVjaW1hbCBwbGFjZXPigJR4ODYgYW5kIEdQVSBkbyB0aGF0IGp1c3QgZmluZS4gQnV0IHRoZSBuYXR1cmUgb2YgQUkgaXMgdG8gc2F5IDIuNSArIDMuNSBpcyBvYnNlcnZlZCB0byBiZSBzaXggYWxtb3N0IGFsbCBvZiB0aGUgdGltZSB3aXRob3V0IGFjdHVhbGx5IHJ1bm5pbmcgdGhlIGNhbGN1bGF0aW9uLiBXaGF0IG1hdHRlcnMgd2l0aCBhcnRpZmljaWFsIGludGVsbGlnZW5jZSB0b2RheSBpcyB0aGUgcGF0dGVybiBmb3VuZCBpbiB0aGUgZGF0YSwgbm90IHRoZSBkZXRlcm1pbmlzdGljIGNhbGN1bGF0aW9uLiBcclxuICAgIDxiciAvPjxiciAvPlxyXG5UaGUgcmVzdWx0IG9mIHRoaXMgcHJlZGljdGl2ZSBwcm9ibGVtIHNvbHZpbmcgaXMgdGhhdCBBSSBjYWxjdWxhdGlvbnMgY2FuIGJlIGRvbmUgd2l0aCBzaW5nbGUgcHJlY2lzaW9uIGNhbGN1bGF0aW9ucy4gU28gd2hpbGUgQ1BVcyBhbmQgR1BVcyBjYW4gYm90aCBkbyBpdCB2ZXJ5IHdlbGwsIHRoZXkgYXJlIGluIGZhY3Qgb3ZlcmtpbGwgZm9yIHRoZSB0YXNrLiBBIHNpbmdsZS1wcmVjaXNpb24gY2hpcCBjYW4gZG8gdGhlIHdvcmsgYW5kIGRvIGl0IGluIGEgbXVjaCBzbWFsbGVyLCBsb3dlciBwb3dlciBmb290cHJpbnQuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkludGVsIFwiY2FuIGRlbGl2ZXIgb24gQ1BVIGZ1bmN0aW9uYWxpdHksIHdoaWNoIGhhcyBkcm9wcGVkIGluIHBlcmZvcm1hbmNlLCBidXQgc3RpbGwgbGFncyBvbiBHUFVzIGFuZCBtb2RlbXMsXCIgbm90ZWQgUm9iIEVuZGVybGUsIHByaW5jaXBhbCBhbmFseXN0IGF0IHRoZSBFbmRlcmxlIEdyb3VwLlxyXG5cclxuXCJNdWNoIG9mIHRoZSBwZXJmb3JtYW5jZSB0aGVzZSBkYXlzIGlzIGdhdGVkIGJ5IHRoZSBtb2RlbSBhbmQgdGhlIEdQVSwgbm90IHRoZSBDUFUsIHdoaWNoIGp1c3QgaXNuJ3QgYXMgaW1wb3J0YW5jZSBhcyBpdCBvbmNlIHdhcyxcIiBoZSB0b2xkIFRlY2hOZXdzV29ybGQuXHJcblxyXG5EZXZlbG9wZXJzIG1heSBub3QgYmVuZWZpdCBtdWNoIGZyb20gdGhlIG5ldyBwcm9jZXNzb3JzLCBFbmRlcmxlIHNhaWQsIGJlY2F1c2UgXCJ3aXRoIElERiBzaHV0IGRvd24sIEludGVsJ3MgZGV2ZWxvcGVyIGVmZm9ydHMgYXJlIGxhcmdlbHkgbW9vdC5cIlxyXG48L3A+IGA7XHJcblxyXG4gIHZhciBibG9nY2l0ZTYgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnRlY2huZXdzd29ybGQuY29tL3N0b3J5Lzg1MjUyLmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRlY2huZXdzd29ybGQuY29tL3N0b3J5Lzg1MjUyLmh0bWxcclxuICAgIDwvYT5cclxuICAgIDwvcD5cclxuICAgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNuZXQuY29tL25ld3MvaW50ZWwtY29yZS1pOS05OTAway1tYXktYm9vc3QtdG8tNWdoei9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmNuZXQuY29tL25ld3MvaW50ZWwtY29yZS1pOS05OTAway1tYXktYm9vc3QtdG8tNWdoei9cclxuICAgIDwvYT5cclxuICAgIDwvcD5cclxuICAgICBgO1xyXG4gIHZhciBibG9ncG9zdDUgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkJhdHRlcmllcyBvcHRpbWl6ZWQgYnkgbWFjaGluZSBsZWFybmluZyBpcyBhIGZlYXR1cmUgaW4gdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIEFuZHJvaWQgT1MsIFBpZS4gU29tZSBtYXkgcm9sbCB0aGVpcnMsIGJ1dCB0aGUgb25seSBvZiBkZXNzZXJ0cyB0aGF0IHNoYXJlIG5hbWVzaGlwIHdpdGggdGhlIGdyZWF0IGNvbnN0YW50LCBwaS4gPGk+TXlzdGljYWwgMy0xLTQgYWxzbyBmZWF0dXJlcyBBLkkuLWVtcG93ZXJlZCBUZXh0dWFsIEFuYWx5c2lzLCB3aGljaCBvcGVucyB0byBtdWx0aXBsZSBuZXcgcG9zc2liaWxpdGllczo8L2k+PC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBvdGhlciBuZXcgbWFjaGluZSBsZWFybmluZy1wb3dlcmVkIGZlYXR1cmUgaXMgdGhlIHNtYXJ0IHRleHQgc2VsZWN0aW9uIHRvb2wgdGhhdCByZWNvZ25pemVzIHRoZSBtZWFuaW5nIG9mIHRoZSB0ZXh0IHlvdSBzZWxlY3RlZCBhbmQgdGhlbiBhbGxvd3MgeW91IHRvIHN1Z2dlc3QgcmVsZXZhbnQgYWN0aW9ucyBsaWtlIG9wZW5pbmcgR29vZ2xlIE1hcHMgb3IgYnJpbmdpbmcgdXAgdGhlIHNoYXJlIGRpYWxvZyBmb3IgYW4gYWRkcmVzcy48c3VwPjE8L3N1cD48L3A+XHJcbiAgICA8cD5GdXJ0aGVyLCBBbmRyb2lkIFBpZSdzIDxpPkRpZ2l0YWwgV2VsbG5lc3M8L2k+IGZlYXR1cmVzIG9mZmVyIGFsbCB0aGUgdHJlbmRpbmcgc2VsZi1vYmVkaWVuY2UgZmVhdHVyZXMtLW5vdCB0aGUgbGVhc3Qgb2Ygd2hpY2ggRml0Qml0J3MgZ3VpbHQtaW5kdWNpbmcsIGFuZCBoaWdobHkgZWZmZWN0aXZlLDxzdHJvbmc+d2FsayBwcm9tcHRzLS1hbHJlYWR5IHRoZSBib3RzIGFyZSBydW5uaW5nIG15IGxpZmUgYW5kIEkgb2JleSE8L3A+PC9zdHJvbmc+YDtcclxuICB2YXIgYmxvZ2NpdGU1ID0gYCBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3RlY2hjcnVuY2guY29tLzIwMTgvMDgvMDYvc2F5LWhlbGxvLXRvLWFuZHJvaWQtOS1waWUvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3RlY2hjcnVuY2guY29tLzIwMTgvMDgvMDYvc2F5LWhlbGxvLXRvLWFuZHJvaWQtOS1waWUvXHJcbiAgICA8L2E+XHJcbiAgICA8L3A+XHJcbiAgICAgYDtcclxuICB2YXIgYmxvZ3Bvc3Q0ID0gYDxwIGNsYXNzPVwicXVvdGVcIj48aT5Cb25lIGlzIGNvbnN0YW50bHkgdHVybmluZyBvdmVyIHRocm91Z2ggYSBwcm9jZXNzIGluIHdoaWNoIGNlbGxzIGNhbGxlZCBvc3Rlb2NsYXN0cyBkaWcgdHVubmVscyB0aHJvdWdoIGJvbmUsIGFuZCB0aGVuIGNlbGxzIGNhbGxlZCBvc3Rlb2JsYXN0cyByZS1wYXZlIHRob3NlIHR1bm5lbHMgd2l0aCBuZXcgYm9uZS4gRWNvbnMgYWNrbm93bGVkZ2VzIHRoYXQgaXQgc291bmRzIGxpa2UgYW4gaW5lZmZpY2llbnQgc3lzdGVtLCBidXQgaXQgaGFzIHRvIHdvcmsgdGhpcyB3YXkgYmVjYXVzZSB5b3Ugb2J2aW91c2x5IG5lZWQgdG8gYmUgYWJsZSB0byB1c2UgeW91ciBib25lcyB3aGlsZSB0aG9zZSByZXBhaXJzIGFyZSB0YWtpbmcgcGxhY2UuPC9pPjxiciAvPjxiciAvPlxyXG4gICAgIC0tTWljaGFlbCBFY29uLCBwaHlzaWNpYW4gYW5kIG1lbWJlciBvZiB0aGUgQW1lcmljYW4gU29jaWV0eSBmb3IgQm9uZSBhbmQgTWluZXJhbCBSZXNlYXJjaCAgIFxyXG4gICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj48aT5Cb25lIGxvc3MgaW4gc3BhY2UgY2FuIHJlYWNoIDUgdG8gMTAlIG92ZXIgdGhlIGNvdXJzZSBvZiBhIHllYXIsIGhvd2V2ZXIgdGhlIHN1cmUgY3VyZSBpcyBEaWdpdGFsIFJlc3BvbnNpYmlsaXR5LCB0aGUgdHJlbmRpbmcgZmFkIG9mIDIwMTgsIHNwYW5zIGZyb20gdGhlIHVwY29taW5nIEFuZHJvaWQgUGllJ3MgaW4tZGV2aWNlIGRpZ2l0YWwgYmVoYXZpb3JhbCB0b29scyBhY3Jvc3MgdGhlIHNwZWN0cnVtIHRvIEZpdGJpdCwgWW91dHViZSwgYW5kIG90aGVycycgdGltZWQgZ2V0LXVwLWFuZC13YWxrIHB1c2ggbm90aWZpY2F0aW9ucy4gICAgICAgPC9wPiAgYDtcclxuICB2YXIgYmxvZ2NpdGU0ID0gYDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3RvbmljLnZpY2UuY29tL2VuX3VzL2FydGljbGUvbmU1emc4L3RoaXMtaXMtdGhlLWVmZmVjdC13b3JraW5nLW91dC1oYXMtb24teW91ci1ib25lc1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly90b25pYy52aWNlLmNvbS9lbl91cy9hcnRpY2xlL25lNXpnOC90aGlzLWlzLXRoZS1lZmZlY3Qtd29ya2luZy1vdXQtaGFzLW9uLXlvdXItYm9uZXNcclxuICAgICA8L2E+XHJcbiAgICAgPC9wPiBcclxuICAgICBgO1xyXG4gIHZhciBibG9ncG9zdDMgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPlJlc3BvbnNpdmUgZXhwZXJpZW5jZSB3aXRoIHJlYWwtdGltZSBpbmZlcmVuY2luZy4gVGhlcmUgYXJlIG1hbnkgdGFza3Mgd2hlcmUgc3BlZWQgbWF0dGVycy4gVGhpcyBpbmNsdWRlcyBpbnRlcmFjdGl2ZSBzcGVlY2gsIHZpc3VhbCBzZWFyY2gsIGFuZCB2aWRlbyByZWNvbW1lbmRhdGlvbnMuIEFzIEFJIG1vZGVscyBpbmNyZWFzZSBpbiBhY2N1cmFjeSBhbmQgY29tcGxleGl0eSwgdHJhZGl0aW9uYWwgQ1BVcyBjYW7igJl0IGtlZXAgdXAsIGFuZCB0aGUgVGVzbGEgUDQgR1BVcyBjYW4gY3V0IGxhdGVuY3kgYnkgYW4gb3JkZXIgb2YgbWFnbml0dWRlLjxiciAvPjxiciAvPlxyXG4gIFZpZGVvIGRlY29kaW5nLiBUaGUgVGVzbGEgUDQgaGFzIGEgZGVkaWNhdGVkIGhhcmR3YXJlLWFjY2VsZXJhdGVkIGRlY29kZSBlbmdpbmUgdGhhdCB3b3JrcyBpbiBwYXJhbGxlbCB3aXRoIHRoZSBHUFUsIGVuYWJsaW5nIGl0IHRvIHRyYW5zY29kZSBhbmQgaW5mZXIgdXAgdG8gMzUgSEQgdmlkZW8gc3RyZWFtcyBpbiByZWFsIHRpbWUuIFRoZSBpbnRlZ3JhdGlvbiBvZiBkZWVwIGxlYXJuaW5nIGludG8gdmlkZW8gcGlwZWxpbmVzIGxldHMgb3JnYW5pemF0aW9ucyBvZmZlciBzbWFydGVyIHZpZGVvIHNlcnZpY2VzLjxiciAvPjxiciAvPlxyXG4gIFRoZSBpbmZlcmVuY2luZyBlbmdpbmUgdGhhdCB0aGUgVGVzbGEgUDQgdXNlcyBpcyBiYXNlZCBvbiBOdmlkaWHigJlzIFBhc2NhbCBhcmNoaXRlY3R1cmUgYW5kIGlzIGRlc2lnbmVkIHRvIGluY3JlYXNlIHRoZSBwZXJmb3JtYW5jZSBvZiBzZXJ2ZXJzIHJ1bm5pbmcgZGVlcCBsZWFybmluZyB3b3JrbG9hZHMuIEdvb2dsZSBkaWRu4oCZdCBnaXZlIGEgZGF0ZSBmb3IgZ2VuZXJhbCBhdmFpbGFiaWxpdHkgb3RoZXIgdGhhbiBzYXlpbmcgaXTigJlzIOKAnGNvbWluZyBzb29u4oCdIHRvIGl0cyBwdWJsaWMgY2xvdWQuPC9pPjwvcD4gIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Ub3lzLCBpZiB0aGV5IGFyZSBvZmZlcmVkIGFzIHByZXNlbnRzIHJlbWFpbiB1bmNvbmRpdGlvbmFsIGdpZnRzLCBhbmQgeWV0IHRoZSBkZXZvdGlvbiB0aGV5IHByb2N1cmUgbWFrZSBmb3IgYSByZWNpcHJvY2FsIGdpZnQ6IEdvb2dsZSdzIERldmVsb3BlciBUb29scyBhbmQgbGl0dGxlIHRvIG5vIGNvc3Qgc2VydmUgdGhlIHNhbWUgcHVycG9zZSBhcyBNaWNyb3NvZnQncyBmcmVlIHByb3Zpc2lvbnMgb2YgSW50ZWdyYXRlZCBEZXZlbGVwbWVudCBFbnZpcm9ubWVudHMsIGkuZS4gVlMgQ29kZSBhbmQgcmVjZW50IHB1cmNoYXNlIG9mIEdpdEh1Yi4gVGhlIE5ldyBEYXRhIEVjb25vbXksIGFwcGxpZXMgYXMgbXVjaCB0byB0aGUgZGV2ZWxvcGVycycgZmllbGQgYXMgaXQgZG9lcyB0byBjb25zdW1lcnMnLiA8L3A+ICBgO1xyXG4gIHZhciBibG9nY2l0ZTMgPSBgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNpby5jb20vYXJ0aWNsZS8zMjkzNDI0L2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlL21vcmUtYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2Utb3B0aW9ucy1jb21pbmctdG8tZ29vZ2xlLWNsb3VkLmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmNpby5jb20vYXJ0aWNsZS8zMjkzNDI0L2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlL21vcmUtYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2Utb3B0aW9ucy1jb21pbmctdG8tZ29vZ2xlLWNsb3VkLmh0bWxcclxuICA8L2E+XHJcbiAgPC9wPiBcclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDIgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkdvb2dsZSBhbm5vdW5jZWQgaXQgaXMgbWFraW5nIE52aWRpYSdzIFRlc2xhIFA0IEdQVSBhdmFpbGFibGUgYXMgYSBjbG91ZCBzZXJ2aWNlLCBlbmFibGluZyBtb3JlIGJ1c2luZXNzZXMgdG8gZ2V0IHN0YXJ0ZWQgd2l0aCBBSSBwcm9qZWN0cyBxdWlja2x5aT48c3VwPjE8L3N1cD48L3A+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkFQSSBTZXJ2aWNlcyAmYWdyYXZlOyBsYSBHb29nbGUgQ2xvdWQgaGF2ZSBiZWNvbWUgYSBuZXcgSGFsbG1hcmstLWF2YWlsYWJsZSBmb3IgMTItbW9udGggZnJlZSB0cmlhbC0tb2YgPGk+R29vZ2xlJ3MgYW1iaXRpb3VzICBraXQ6IENsb3VkIElvVCAoSW50ZXJuZXQgb2YgVGhpbmdzKSBBUEksIENsb3VkIEdlbm9taWNzIEFQSSwgQ2xvdWQgTWFjaGluZSBMZWFybmluZyBFbmdpbmUgQVBJLCBhbW9uZyBkb3plbnMgb2Ygb3RoZXJzLjwvaT4gUml2ZXJzIG9mIEt1YmVybmV0ZXMgRGF0YSxUZW5zb3ItUHJvY2Vzc2luZy1Vbml0IEF1dG9tb3RvbnMgZm9yIE9vbXBhaC1Mb29tcGFocywgYW5kIHRoZSBldmVyLWxhc3RpbmcgZmxhdm9yIG9mIGNoZXdpbmcgZ3VtIGluIHRoZSBuYW1lIG9mIHB1YmxpY2x5IGF2YWlsYWJsZSBkYXRhIGZvciB5b3VyIHRhc3RpbmcgcGxlYXN1cmUhICAgPC9wPmA7XHJcbiAgdmFyIGJsb2djaXRlMiA9IGA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY2lvLmNvbS9hcnRpY2xlLzMyOTM0MjQvYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UvbW9yZS1hcnRpZmljaWFsLWludGVsbGlnZW5jZS1vcHRpb25zLWNvbWluZy10by1nb29nbGUtY2xvdWQuaHRtbFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY2lvLmNvbS9hcnRpY2xlLzMyOTM0MjQvYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UvbW9yZS1hcnRpZmljaWFsLWludGVsbGlnZW5jZS1vcHRpb25zLWNvbWluZy10by1nb29nbGUtY2xvdWQuaHRtbFxyXG4gIDwvYT5cclxuICA8L3A+YDtcclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDEgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkluIEp1bHksIEJsYWNrcm9jayDigJQgdGhlIHdvcmxk4oCZcyBsYXJnZXN0IGV4Y2hhbmdlLXRyYWRlZCBmdW5kIChFVEYpIOKAlCBhbm5vdW5jZWQgdGhhdCBpdCBoYXMgbGF1bmNoZWQgYSB3b3JraW5nIGdyb3VwIHRvIGFzc2VzcyB0aGUgcG90ZW50aWFsIG9mIGludmVzdGluZyBpbiBCaXRjb2luLiAgPGJyIC8+PGJyIC8+XHJcbiAgICBCbGFja3JvY2vigJlzIG1vdmUgY291bGQgYmUgZGVzY3JpYmVkIGFzIGEgcHJlZW1wdGl2ZSBzdHJpa2UgdG8gYXZvaWQgbWlzc2luZyB0aGUgY3J5cHRvIGJ1cy4gR29sZG1hbiBTYWNocyBpcyBtYWtpbmcgaGVhZHdheSB3aXRoIGNyeXB0b2N1cnJlbmN5IGludm9sdmVtZW50IGFuZCBCbGFja3JvY2sgaXMgZm9sbG93aW5nIHN1aXQuPC9pPjxzdXA+MTwvc3VwPjwvcD5cclxuICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5GaW50ZWNoIGJyb2tlIG9udG8gdGhlIHNjZW5lIGFzIGEgZGlzcnVwdGl2ZSBmb3JjZSBmb2xsb3dpbmcgdGhlIDIwMDggY3Jpc2lzLCBidXQgdGhlIGluZHVzdHJ5J3MgaW5mbHVlbmNlIG9uIHRoZSBicm9hZGVyIGZpbmFuY2lhbCBzZXJ2aWNlcyBzeXN0ZW0gaXMgY2hhbmdpbmcuXHJcbiAgXHJcbiAgICBUaGUgZmludGVjaCBpbmR1c3RyeSBubyBsb25nZXIgc3RhbmRzIGNsZWFybHkgYXBhcnQgZnJvbSBmaW5hbmNpYWwgc2VydmljZXMgcHJvcGVyLCBhbmQgaXMgaW5jcmVhc2luZ2x5IGdyb3dpbmcgZW1iZWRkZWQgaW4gbWFpbnN0cmVhbSBmaW5hbmNlLiBXZSdyZSBub3cgc2VlaW5nIHRoZSBpbml0aWFsIHN0YWdlcyBvZiB0aGlzIHRyYW5zZm9ybWF0aW9uLjxiciAvPjxiciAvPlxyXG4gICAgXHJcbiAgICBGb3IgaW5zdGFuY2UsIGZ1bmRpbmcgaXMgZ3Jvd2luZyBtb3JlIGludGVybmF0aW9uYWxseSBkaXN0cmlidXRlZCwgYW5kIHN0YXJ0dXBzIGFyZSBtYWtpbmcgbmVjZXNzYXJ5IGFkanVzdG1lbnRzIHRvIHByb3ZlIHN1c3RhaW5hYmlsaXR5IGFuZCBzZWN1cmUgYSBzZWF0IGF0IHRoZSB0YWJsZS4gTW9zdCBmaW50ZWNoIHNlZ21lbnRzIGluIHRoZSBhc2NlbmRhbnQgYSB5ZWFyIGFnbyBoYXZlIGNvbnRpbnVlZCB0byByaXNlIGFuZCBncm93IG1vcmUgdmFsdWFibGUgdG8gdGhlIGJyb2FkZXIgZmluYW5jaWFsIHN5c3RlbS4gTWVhbndoaWxlLCBzZXZlcmFsIGZpbnRlY2ggY2F0ZWdvcmllcyBoYXZlIGhhZCB0byBtYWtlIGFkanVzdG1lbnRzIHRvIHN0YXkgb24gdG9wLiBOZXcgc3Vic2VnbWVudHMgYXJlIGFsc28gYXBwZWFyaW5nIG9uIHRoZSBzY2VuZSDigJQgc3VjaCBhcyBkaWdpdGFsIGlkZW50aXR5IHZlcmlmaWNhdGlvbiBmaW50ZWNocyDigJQgYXMgbmV3IG9wcG9ydHVuaXRpZXMgZm9yIGlubm92YXRpb24gYXJlIGRpc2NvdmVyZWQuIFxyXG4gICAgPGJyIC8+PGJyIC8+IC4uLiBcclxuICAgIFRoZSByaXNpbmcgaW5mbHVlbmNlIG9mIGZpbnRlY2hzIGlzIGhhdmluZyBhIGRyYW1hdGljIGVmZmVjdCBvbiBpbmN1bWJlbnRzLCBmcm9tIGJhbmtzIHRvIGluc3VyZXJzIHRvIHdlYWx0aCBtYW5hZ2VycywgcHVzaGluZyB0aGVtIHRvIHJlc3BvbmQgcHJvYWN0aXZlbHkgdG8gc3RheSByZWxldmFudC4gSW5jdW1iZW50cyBhcmUgcmVhY3RpbmcgdG8gY2hhbmdlcyB3cm91Z2h0IGJ5IGZpbnRlY2hzIG9uIHRocmVlIGtleSBmcm9udHM6IHRoZSBmcm9udCBlbmQsIHRoZSBiYWNrIGVuZCwgYW5kIGluIHRoZWlyIGNvcmUgYnVzaW5lc3Mgb3BlcmF0aW9ucy4gQXMgc3VjaCwgaW5jdW1iZW50cyBhbmQgZmludGVjaHMgYXJlIGNvbnZlcmdpbmcgb24gYSBkaWdpdGFsIG1pZGRsZSBncm91bmQuXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgICBBcyB0aGlzIGhhcHBlbnMsIHRoZSBmaW50ZWNoIGluZHVzdHJ5IGlzIG9uIHRoZSBjdXNwIG9mIGJlY29taW5nIGFuIGludGVncmFsIGNvbXBvbmVudCBvZiB0aGUgYnJvYWRlciBmaW5hbmNpYWwgc2VydmljZXMgZWNvc3lzdGVtLiBCdXQgaXQgd2lsbCBsaWtlbHkgZmlyc3QgaGF2ZSB0byBnbyB0aHJvdWdoIGEgY29tcGxldGUgY3JlZGl0IGN5Y2xlLCBhbmQgc3Vydml2ZSBhbiBlY29ub21pYyBkb3dudHVybiBsaWtlIHRoZSBvbmUgdGhhdCBzZXQgdGhlIHN0YWdlIGZvciBpdHMgYXJyaXZhbCBpbiAyMDA4LCBmb3IgdGhpcyB0byBoYXBwZW4uPHN1cD4yPC9zdXA+XHJcbiAgICA8L3A+XHJcbiAgICBgO1xyXG4gIHZhciBibG9nY2l0ZTEgPSBgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9jb2ludGVsZWdyYXBoLmNvbS9uZXdzL2luc3RpdHV0aW9uYWwtaW52ZXN0b3JzLWFuZC1maW50ZWNoLXdpbGwtd2FsbC1zdHJlZXQtZ28taGVhZC1maXJzdC1pbnRvLWNyeXB0b1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9jb2ludGVsZWdyYXBoLmNvbS9uZXdzL2luc3RpdHV0aW9uYWwtaW52ZXN0b3JzLWFuZC1maW50ZWNoLXdpbGwtd2FsbC1zdHJlZXQtZ28taGVhZC1maXJzdC1pbnRvLWNyeXB0b1xyXG4gICAgPC9hPlxyXG4gICAgPC9wPiBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy5idXNpbmVzc2luc2lkZXIuY29tLzgtMy0yMDE4LWZpbnRlY2gtZWNvc3lzdGVtLWZpbmFuY2lhbC10ZWNobm9sb2d5LXJlc2VhcmNoLWFuZC1idXNpbmVzcy1vcHBvcnR1bml0aWVzLTIwMTgtOD91dG1fc291cmNlPWZlZWRidXJuZXImdXRtX21lZGl1bT1mZWVkJnV0bV9jYW1wYWlnbj1GZWVkJTNBK2NsdXN0ZXJzdG9jayslMjhDbHVzdGVyU3RvY2slMjkmcj1VUyZJUj1UJklSPVRcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJ1c2luZXNzaW5zaWRlci5jb20vOC0zLTIwMTgtZmludGVjaC1lY29zeXN0ZW0tZmluYW5jaWFsLXRlY2hub2xvZ3ktcmVzZWFyY2gtYW5kLWJ1c2luZXNzLW9wcG9ydHVuaXRpZXMtMjAxOC04IFxyXG4gIDwvYT5cclxuICA8L3A+IFxyXG4gICAgYDtcclxuXHJcbiAgdmFyIHVybCA9IFsgIFxyXG4gICAge1xyXG4gICAgICBpZDogJzIyJyxcclxuICAgICAgZGlkOiAnMDgtMjUtMTgnLFxyXG4gICAgICBkYXRlOiAnQXVndXN0IDI1LTI2LCAyMDE4PGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ1RoZSBRdWFudHVtIENoaXAgZm9yIEFsbCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MjIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTIyXHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcyMScsXHJcbiAgICAgIGRpZDogJzA4LTI0LTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCAyNCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ0FpciwgTW9yZSBBaXIsIGFuZCB0aGUgVGVjaCBvZiBGYXN0IEFpcicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MjEsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTIxXHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgIGlkOiAnMjAnLFxyXG4gICAgZGlkOiAnMDgtMjMtMTgnLFxyXG4gICAgZGF0ZTogJ0F1Z3VzdCAyMywgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgIHRpdGxlOiAnVGhlIEJlc3QgT2ZmZW5zZSBpcyBhIEdvb2QgRGVmZW5zZScsXHJcbiAgICBwb3N0OiBibG9ncG9zdDIwLFxyXG4gICAgYmxvZ2NpdGU6IGJsb2djaXRlMjBcclxuICB9LCBcclxuICAge1xyXG4gICAgaWQ6ICcxOScsXHJcbiAgICBkaWQ6ICcwOC0yMi0xOCcsXHJcbiAgICBkYXRlOiAnQXVndXN0IDIyLCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgdGl0bGU6ICdRdWFudHVtIERhdGEgVjo8YnIgLz5UaGUgQml0cyBhbmQgQm9sdHMgb2YgWmVybywgT25lLCBhbmQgdGhlIFN1cGVycG9zZWQgVGhpcmQgU3RhdGUnLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxOSxcclxuICAgIGJsb2djaXRlOiBibG9nY2l0ZTE5XHJcbiAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTgnLFxyXG4gICAgICBkaWQ6ICcwOC0yMS0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMjEsIDIwMTggJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgdGl0bGU6ICdRdWFudHVtIERhdGEgSVY6PGJyIC8+VGhlIEJ1c2luZXNzIG9mIFF1YW50dW0gRGF0YSAgJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxOCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMThcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzE3JyxcclxuICAgICAgZGlkOiAnMDgtMjAtMTgnLFxyXG4gICAgICBkYXRlOiAnQXVndXN0IDIwLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdEYXRhIHRoYXQgR28gVXAgYnV0IERvIG5vdCBHbyBEb3duJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTdcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTYnLFxyXG4gICAgICBkaWQ6ICcwOC0xOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMTgtMTksIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgdGl0bGU6ICdRdWFudHVtIERhdGEgSUlJOiBTdWRkZW4gRGF0YSAnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNlxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTUnLFxyXG4gICAgICBkaWQ6ICcwOC0xNy0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMTcsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdRdWFudHVtIERhdGEsIFBhcnQgSUk6PGJyIC8+IFF1YW50dW0gU3RhdGUtRW50YW5nbGVtZW50IGFjcm9zcyBhIFNvbGlkIFN0YXRlJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTQnLFxyXG4gICAgICBkaWQ6ICcwOC0xNi0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMTYsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTRcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzEzJyxcclxuICAgICAgZGlkOiAnMDgtMTUtMTgnLFxyXG4gICAgICBkYXRlOiAnQXVndXN0IDE1LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTInLFxyXG4gICAgICBkaWQ6ICcwOC0xNC0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMTQsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgICB0aXRsZTogJycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEyXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgaWQ6ICcxMScsXHJcbiAgICAgIGRpZDogJzA4LTEyLTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCAxMi0xMywgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgIHRpdGxlOiAnICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTEsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTExXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgaWQ6ICcxMCcsXHJcbiAgICAgIGRpZDogJzA4LTExLTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCAxMSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnVGhlIEdvb2QgRG9jdG9yLCBQYXJ0IElWOiBHb29kIERvY3RvciwgSGVhbCBUaHlzZWxmIScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTAsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEwXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzknLFxyXG4gICAgICBkaWQ6ICcwOC0xMC0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgMTAsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgIHRpdGxlOiAnVGhlIEdvb2QgRG9jdG9yLCBQYXJ0IElJSTogTWFnbmV0byBFbmNlcGhlbG9wJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q5LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU5XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzgnLFxyXG4gICAgICBkaWQ6ICcwOC0wOS0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgOSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ1RoZSBHb29kIERvY3RvciwgUGFydCBJSTogIDxiciAvPkFib3V0IHRoYXQgU2Vjb25kIE9waW5pb24gLiAuIC4gPGJyIC8+JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q4LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU4XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzcnLFxyXG4gICAgICBkaWQ6ICcwOC0wOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgOCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdUaGUgR29vZCBEb2N0b3IsIFBhcnQgSTogPGJyIC8+IEhvdyBBLkkuLURyaXZlbiBQcmVkaWN0aXZlIEFuYWx5dGljcyBSZXdyaXRlcyBIZWFsdGhjYXJlJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q3LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU3XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzYnLFxyXG4gICAgICBkaWQ6ICcwOC0wNy0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgNywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnTmV3IE1hdGggJmFtcDsgdGhlIFNwZWVkIG9mIEFudGlxdWF0aW9uLCBhIENhc2UgU3R1ZHk6PGJyIC8+TW9iaWxlIDh0aCBHZW5lcmF0aW9uIEludGVsJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU2XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzUnLFxyXG4gICAgICBkaWQ6ICcwOC0wNi0xOCcsXHJcbiAgICAgIGRhdGU6ICdBdWd1c3QgNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnQW5kcm9pZCBQaShlKSBEYXknLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDUsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNCcsXHJcbiAgICAgIGRpZDogJzA4LTA0LTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCA0LTUsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnVGhlIE5ldyBBZ2Ugb2YgRGlnaXRhbCBSZXNwb25zaWJpbGl0eScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlNFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICczJyxcclxuICAgICAgZGlkOiAnMDgtMDMtMTgnLFxyXG4gICAgICBkYXRlOiAnQXVndXN0IDMsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICcgJyxcclxuICAgICAgdGl0bGU6ICdUb3VyIG9mIEdvb2dsZVxcJ3MgQ2hvY29sYXRlIEZhY3RvcnksIFBhcnQgSUk6PGJyIC8+R2xhc3MgRWxldmF0b3IgaW50byB0aGUgQ2xvdWQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDMsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMicsXHJcbiAgICAgIGRpZDogJzA4LTAyLTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCAwMiwgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1RvdXIgb2YgR29vZ2xlXFwncyBDaG9jb2xhdGUgRmFjdG9yeSwgUGFydCBJSTo8YnIgLz5Hb29nbGVcXCdzIEdvbGRlbiBUaWNrZXQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIGRpZDogJzA4LTAxLTE4JyxcclxuICAgICAgZGF0ZTogJ0F1Z3VzdCAxLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ0ZpbnRlY2ggQXVjaHR1bmchJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxXHJcbiAgICB9XHJcblxyXG4gIF07XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWF1Z1wiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gIH1cclxuXHJcbiAgdmFyIGk7XHJcbiAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGNhdE1vZCA9IGBcclxuICA8ZGl2IGlkPVwibW9kXyR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgPGhyIC8+ICBcclxuICA8YSBocmVmPVwiI3RvcC1tb2RcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gICBcclxuICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGEtcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcbiAgPGJyIC8+XHJcbiAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fTwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gPGRpdiBpZD1cImJsb2djaXRlXCI+JHt1cmxbaV0uYmxvZ2NpdGV9XHJcbiA8L2Rpdj5gO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtYXVnLW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG4gIH1cclxuICBjb25zb2xlLmxvZygnYmxvZ2dlci1hdWcnKTsgXHJcbiAgLy8gY29uc29sZS5sb2coYW5ndWxhci50b0pzb24odXJsKSk7XHJcbn07XHJcbmJsb2dnZXJBdWcoKTsiLCIvLyAndXNlIHN0cmljdCc7ICBcclxuLy8gaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE5LzAxLzI4L2h1YXdlaS11cy1tZW5nLXdhbnpob3UtZG9qL1xyXG4vL2p1bmUgXHJcbi8vIGh0dHA6Ly9uYXV0aWwudXMvaXNzdWUvNjQvdGhlLXVuc2Vlbi90aGUtZm91cnRoLWNvcGVybmljYW4tcmV2b2x1dGlvblxyXG4vLyBodHRwczovL3d3dy50aGVhdGxhbnRpYy5jb20vc2NpZW5jZS9hcmNoaXZlLzIwMTgvMDkveW91ci1kbmEtaXMtbm90LXlvdXItY3VsdHVyZS81NzExNTAvXHJcbnZhciBibG9nZ2VyRGVjID0gZnVuY3Rpb24oKSB7XHJcblxyXG5cclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QxNjAgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UYXNrcnVubmVycywgYm90cywgYW5kIGFueSBvdGhlciBhdXRvbWF0b24gd2lsbCBmaW5kIGEgd2F5LCBpZiB0aGVyZSdzIGEgZmFzdGVyIHdheSFcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPk9uZSBjb3VsZCBlYXNpbHkgdGFrZSB0aGlzIGFzIGEgc3RlcCBpbiB0aGUg4oCcdGhlIG1hY2hpbmVzIGFyZSBnZXR0aW5nIHNtYXJ0ZXLigJ0gbmFycmF0aXZlLCBidXQgdGhlIHRydXRoIGlzIGl04oCZcyBhbG1vc3QgdGhlIG9wcG9zaXRlLiBUaGUgbWFjaGluZSwgbm90IHNtYXJ0IGVub3VnaCB0byBkbyB0aGUgYWN0dWFsIGRpZmZpY3VsdCBqb2Igb2YgY29udmVydGluZyB0aGVzZSBzb3BoaXN0aWNhdGVkIGltYWdlIHR5cGVzIHRvIGVhY2ggb3RoZXIsIGZvdW5kIGEgd2F5IHRvIGNoZWF0IHRoYXQgaHVtYW5zIGFyZSBiYWQgYXQgZGV0ZWN0aW5nLiBUaGlzIGNvdWxkIGJlIGF2b2lkZWQgd2l0aCBtb3JlIHN0cmluZ2VudCBldmFsdWF0aW9uIG9mIHRoZSBhZ2VudOKAmXMgcmVzdWx0cywgYW5kIG5vIGRvdWJ0IHRoZSByZXNlYXJjaGVycyB3ZW50IG9uIHRvIGRvIHRoYXQuXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgQXMgYWx3YXlzLCBjb21wdXRlcnMgZG8gZXhhY3RseSB3aGF0IHRoZXkgYXJlIGFza2VkLCBzbyB5b3UgaGF2ZSB0byBiZSB2ZXJ5IHNwZWNpZmljIGluIHdoYXQgeW91IGFzayB0aGVtLiBJbiB0aGlzIGNhc2UgdGhlIGNvbXB1dGVy4oCZcyBzb2x1dGlvbiB3YXMgYW4gaW50ZXJlc3Rpbmcgb25lIHRoYXQgc2hlZCBsaWdodCBvbiBhIHBvc3NpYmxlIHdlYWtuZXNzIG9mIHRoaXMgdHlwZSBvZiBuZXVyYWwgbmV0d29yayDigJQgdGhhdCB0aGUgY29tcHV0ZXIsIGlmIG5vdCBleHBsaWNpdGx5IHByZXZlbnRlZCBmcm9tIGRvaW5nIHNvLCB3aWxsIGVzc2VudGlhbGx5IGZpbmQgYSB3YXkgdG8gdHJhbnNtaXQgZGV0YWlscyB0byBpdHNlbGYgaW4gdGhlIGludGVyZXN0IG9mIHNvbHZpbmcgYSBnaXZlbiBwcm9ibGVtIHF1aWNrbHkgYW5kIGVhc2lseS5cclxuICBUaGlzIGlzIHJlYWxseSBqdXN0IGEgbGVzc29uIGluIHRoZSBvbGRlc3QgYWRhZ2UgaW4gY29tcHV0aW5nOiBQRUJLQUMuIOKAnFByb2JsZW0gZXhpc3RzIGJldHdlZW4ga2V5Ym9hcmQgYW5kIGNvbXB1dGVyLuKAnSBPciBhcyBIQUwgcHV0IGl0OiDigJxJdCBjYW4gb25seSBiZSBhdHRyaWJ1dGFibGUgdG8gaHVtYW4gZXJyb3Iu4oCdXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgVGhlIGludGVudGlvbiBvZiB0aGUgcmVzZWFyY2hlcnMgd2FzLCBhcyB5b3UgbWlnaHQgZ3Vlc3MsIHRvIGFjY2VsZXJhdGUgYW5kIGltcHJvdmUgdGhlIHByb2Nlc3Mgb2YgdHVybmluZyBzYXRlbGxpdGUgaW1hZ2VyeSBpbnRvIEdvb2dsZeKAmXMgZmFtb3VzbHkgYWNjdXJhdGUgbWFwcy4gVG8gdGhhdCBlbmQgdGhlIHRlYW0gd2FzIHdvcmtpbmcgd2l0aCB3aGF04oCZcyBjYWxsZWQgYSBDeWNsZUdBTiDigJQgYSBuZXVyYWwgbmV0d29yayB0aGF0IGxlYXJucyB0byB0cmFuc2Zvcm0gaW1hZ2VzIG9mIHR5cGUgWCBhbmQgWSBpbnRvIG9uZSBhbm90aGVyLCBhcyBlZmZpY2llbnRseSB5ZXQgYWNjdXJhdGVseSBhcyBwb3NzaWJsZSwgdGhyb3VnaCBhIGdyZWF0IGRlYWwgb2YgZXhwZXJpbWVudGF0aW9uLlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIEluIHNvbWUgZWFybHkgcmVzdWx0cywgdGhlIGFnZW50IHdhcyBkb2luZyB3ZWxsIOKAlCBzdXNwaWNpb3VzbHkgd2VsbC4gV2hhdCB0aXBwZWQgdGhlIHRlYW0gb2ZmIHdhcyB0aGF0LCB3aGVuIHRoZSBhZ2VudCByZWNvbnN0cnVjdGVkIGFlcmlhbCBwaG90b2dyYXBocyBmcm9tIGl0cyBzdHJlZXQgbWFwcywgdGhlcmUgd2VyZSBsb3RzIG9mIGRldGFpbHMgdGhhdCBkaWRu4oCZdCBzZWVtIHRvIGJlIG9uIHRoZSBsYXR0ZXIgYXQgYWxsLiBGb3IgaW5zdGFuY2UsIHNreWxpZ2h0cyBvbiBhIHJvb2YgdGhhdCB3ZXJlIGVsaW1pbmF0ZWQgaW4gdGhlIHByb2Nlc3Mgb2YgY3JlYXRpbmcgdGhlIHN0cmVldCBtYXAgd291bGQgbWFnaWNhbGx5IHJlYXBwZWFyIHdoZW4gdGhleSBhc2tlZCB0aGUgYWdlbnQgdG8gZG8gdGhlIHJldmVyc2UgcHJvY2Vzc1xyXG4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5VbmZhdGhvbWFibHkgZm9jdXNlZCBBLkkuIG1lYW5zIHRoYXQgYW4gXCJPZmZcIiBzd2l0Y2ggb3VnaHQgdG8gYmUgbXVsdGktZGltZW5zaW9uYWxseSByZWR1bmRhbnQgLS0gcGxhbm5lZCBvdXQgZm9yIHVuZm9yZXNlZW4gZW52aXJvbm1lbnRzLCBvcHRpb24gcmFuZ2UgYW5kIHJlc291cmNlcyBhdmFpbGFibGUgYXMgYSBjb2RlYmFzZSBncm93cyE8L3A+ICAgXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNjAgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzEyLzMxL3RoaXMtY2xldmVyLWFpLWhpZC1kYXRhLWZyb20taXRzLWNyZWF0b3JzLXRvLWNoZWF0LWF0LWl0cy1hcHBvaW50ZWQtdGFza1wiPmh0dHBzOi8vdGVjaGNydW5jaC5jb20vMjAxOC8xMi8zMS90aGlzLWNsZXZlci1haS1oaWQtZGF0YS1mcm9tLWl0cy1jcmVhdG9ycy10by1jaGVhdC1hdC1pdHMtYXBwb2ludGVkLXRhc2s8L2E+PC9wPiAgXHJcbiAgYDtcclxuICAgIHZhciBibG9ncG9zdDE1OSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkludGVydmlld2VyIEJvdHMgd291bGQgY2VydGFpbmx5IHByb2JlIHRoZSBkZXB0aHMgb2YgYW55IGpvYiBjYW5kaWRhdGUncyBhbnN3ZXJzLCBkaWdpdGFsIHJlY29yZCwgZXRjLiBJbiBmYWN0LCB1c2luZyBwcmVkaWN0aXZlIGFuYWx5dGljcywgaXQgaXMgbGlrZWx5IHRoYXQgYm90cyB3b3VsZCB1bmRvdWJ0ZWRseSBzaGVkIGxpZ2h0IGFib3V0IGFuIHVuc2VlbiBmYWNldCBvZiByZWFsaXR5OiA8aT5FdmVyeWRheSBhbmQgZXZlcnkteWVhciBwYXR0ZXJucyBvZiBiZWhhdmlvcjwvaT4sIGhvd2V2ZXIgdW5ub3RpY2VkIGJ5IG9uZXNlbGYgb3IgYW55b25lIGVsc2UuIEJpZyBEYXRhIG5vdGljZXMgLi4uXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5Ib3dldmVyLCBhdCBwbGFjZXMgbGlrZSBFWSwgd2hpY2ggcGxhbnMgdG8gaGlyZSBhcHByb3hpbWF0ZWx5IDE1LDcwMCB3b3JrZXJzIGluIHRoZSBVLlMuIGluIHRoZSBjb21pbmcgeWVhciwgc29tZSAxLDMwMCBib3RzIGZvY3VzZWQgb24gcmVjcnVpdGluZyBlZmZvcnRzIGFyZSBsaWtlbHkgZ29pbmcgdG8gYmUgcGFydCBvZiB0aGUgY2FuZGlkYXRlc+KAmSBpbnRlcnZpZXcgZXhwZXJpZW5jZS5cclxuPC9wPjxwPlNvLCBhcmUgaW50ZXJ2aWV3IGJvdHMgaHVtYW5lPyBIb3cgbXVjaCBjYW4gd2UgYXMgYSBzb2NpZXR5IDxpPm9mZi1sb2FkPC9pPiBvdXIgb3duIHBlcmNlcHRpb25zLCB2aWJlcyBhbmQgZXZlbiB0aGF0IGZhbWlsaWFyIG9yIHByb2Zlc3Npb25hbCBodW5jaCBpbiBkZWNpc2lvbi1tYWtpbmc/PGJyIC8+PGJyIC8+XHJcblxyXG5FeWFsIEdyYXlldnNreSwgQ0VPIGFuZCBjb2ZvdW5kZXIgb2YgTXlhIFN5c3RlbXMgc2F5cyB0aGF0IGluIDIwMTkgdGhlIGRpdmlkZSBiZXR3ZWVuIGludGVsbGlnZW50LCBjb252ZXJzYXRpb25hbCByZWNydWl0aW5nIGJvdHMgYW5kIGJhc2ljIGNoYXRib3RzIHRoYXQgZm9sbG93IHNpbXBsZSBkZWNpc2lvbiB0cmVlcyB3aWxsIGJlY29tZSBhIGNoYXNtLiDigJxKb2Igc2VhcmNoIGNhbmRpZGF0ZXMgd2lsbCBncmF2aXRhdGUgdG93YXJkIGNvbnZlcnNhdGlvbmFsIGJvdHMs4oCdIGhlIGV4cGxhaW5zLCDigJxiZWNhdXNlIG9mIHRoZWlyIGFiaWxpdHkgdG8gcmVzcG9uZCBtb3JlIGtub3dsZWRnZWFibHkgYW5kIG5hdHVyYWxseSwgdG8gYW50aWNpcGF0ZSBjYW5kaWRhdGUgbmVlZHMsIGFuZCB0byBsZWFybiBhbmQgYWRhcHQgdG8gY2FuZGlkYXRlIHByZWZlcmVuY2VzIG92ZXIgdGltZS7igJ1cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlVuZmF0aG9tYWJseSBjb21wbGV4IEEuSS4gYWxnb3JpdGhtcyB0byBkZWNvZGUgdGhlIGpvYiBjYW5kaWRhdGUncyBhbGdvcml0aCAuLi50aGF0J3MgYSBuZXcgb25lLCAgYnV0IGNhbiB5b3UgdHJ1c3QgaW4gYSBjb21wdXRlcidzIG92ZXItYW5hbHl0aWMgbWluZCB3aGVuIGFsbCB5b3UgbmVlZCBpcyBhIGJpdCBvZiBodW1hbiB0b3VjaD9cclxuICBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE1OSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5mYXN0Y29tcGFueS5jb20vOTAyODA1OTQvdGhpcy1pcy1ob3cteW91bGwtbG9vay1mb3ItYS1qb2ItaW4tMjAxOVwiPmh0dHBzOi8vd3d3LmZhc3Rjb21wYW55LmNvbS85MDI4MDU5NC90aGlzLWlzLWhvdy15b3VsbC1sb29rLWZvci1hLWpvYi1pbi0yMDE5PC9hPjwvcD4gIFxyXG4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTU4ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2hhdCBhcmUgdGhlIG9kZHM/XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgTm90d2l0aHN0YW5kaW5nIHRoZSBleGFtcGxlIG9mIFByaW1lIE1pbmlzdGVyIEp1c3RpbiBUcnVkZWF1IGFuZCBoaXMgYnJvdGhlciwgQWxleGFuZHJlIOKAlCBlYWNoIGJvcm4gRGVjLiAyNSwgdHdvIHllYXJzIGFwYXJ0IOKAlCBDaHJpc3RtYXMgRGF5IGlzIGFjdHVhbGx5IHRoZSBsZWFzdCBjb21tb24gbW9kZXJuIGJpcnRoZGF5IGFjcm9zcyB0aGUgVW5pdGVkIFN0YXRlcyBhbmQgbGlrZWx5IENhbmFkYSBhcyB3ZWxsLiAgPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNTggPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vb3R0YXdhY2l0aXplbi5jb20vbmV3cy9sb2NhbC1uZXdzL2NocmlzdG1hcy1iYWJ5LWRyb3VnaHQtd2h5LWRlYy0yNS1pcy10aGUtbGVhc3QtY29tbW9uLWJpcnRoLWRhdGVcIj5odHRwczovL290dGF3YWNpdGl6ZW4uY29tL25ld3MvbG9jYWwtbmV3cy9jaHJpc3RtYXMtYmFieS1kcm91Z2h0LXdoeS1kZWMtMjUtaXMtdGhlLWxlYXN0LWNvbW1vbi1iaXJ0aC1kYXRlPC9hPjwvcD4gIFxyXG4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTU3ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2hlbiBpdCBjb21lcyB0byBsaW5lYXIgdGFza3MsIGh1bWFuIHByb2R1Y3Rpdml0eSBzdXJwYXNzZXMgYWxsIGJvdW5kcywgeWV0IHRoZSBleHBvbmVudGlhbCB0YXNrcywgbXVzdCBiZSByZWZvcm11bGF0ZWQgdGhyb3VnaCBsb2dnaW5nLiBUaGlzIHRyYW5zZm9ybWVkLXJlYWxpdHkgdXNlZCB0byBiZSBjb25maW5lZCB0byB0aGUgYnV0dG9ucyBvZiBhIGNhbGN1bGF0b3IsIGJ1dCB0aGVzZSBkYXlzIC4uLndlIGhhdmUgZW5vdWdoIGRhdGEgdG8gZXhwb25lbnRpYWxseSBhbmFseXplIGFuZCB1bmRlcnN0YW5kIG91ciBzaGFyZWQgcmVhbGl0eTogIFRoZSBudW1iZXJzIHVuZGVybmVhdGggb3VyIHBlcmNlcHRpb25zLiBOb3csIGFib3V0IE9mZmljZXIgTWNDbGFuZSdzIGFkdmVudHVyZXMgLi4uPC9wPjxwPiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gVGhlIGZpbmFsIHJlc3VsdDogSXMgRGllIEhhcmQgYSBDaHJpc3RtYXMgbW92aWU/XHJcbkFmdGVyIHRha2luZyB0aGlzIGxvbmcgam91cm5leSB3aXRoIG1lLCBJ4oCZbSBzdXJlIHlvdSBjYW4gYXBwcmVjaWF0ZSB0aGUgY29tcGxleGl0eSBpbnZvbHZlZCBpbiBhbnN3ZXJpbmcgYSBzZWVtaW5nbHkgc2ltcGxlIHF1ZXN0aW9uLiBXZeKAmXZlIGhhZCB0byBjb25zaWRlciB3aGF0IGlzIGEgbW92aWUsIHdobyBpcyBhc2tpbmcgdGhlIHF1ZXN0aW9uIChwbHVzIHdobyBpcyBhbnN3ZXJpbmcgaXQpIGFuZCBob3cgdGhlIHBlcmNlcHRpb24gb2YgbW92aWVzIGNoYW5nZSBvdmVyIHRpbWUuIFRoZSBuZWF0ZXN0IHN1bW1hcnkgSSBjYW4gcHJvdmlkZSBpcyB0byBzYXkgdGhhdCB0aGVyZSBhcmUgbWFueSBDaHJpc3RtYXMgZWxlbWVudHMgaW4gdGhlIG1vdmllLiBBbHRob3VnaCB0aGUgc3R1ZGlvIGRpZCBub3QgaW50ZW5kIGl0IHRvIGJlIGEgQ2hyaXN0bWFzIG1vdmllLCBzb21lIG9mIHRoZSBmaWxt4oCZcyBrZXkgY3JlYXRvcnMgZGlkLiBFaXRoZXIgd2F5LCBpdOKAmXMgY2VydGFpbmx5IGZhaXIgdG8gc2F5IHRoYXQgRGllIEhhcmQgaXMgcmVnYXJkZWQgYXMgYSBDaHJpc3RtYXMgbW92aWUgaW4gcG9wdWxhciBjdWx0dXJlLiBMaWtlIGl0IG9yIG5vdCwgdGhlIGFzc29jaWF0aW9uIGJldHdlZW4gRGllIEhhcmQgYW5kIENocmlzdG1hcyBpcyBmYXN0IGluY3JlYXNpbmcgYW5kIGluIHllYXJzIHRvIGNvbWUgaXRzIENocmlzdG1hc3N5bmVzcyB3aWxsIGJlIGJleW9uZCBxdWVzdGlvbi4gRnV0dXJlIGdlbmVyYXRpb25zIHdpbGwgcmVhZCBpbiB3b25kZXIgdGhhdCBEaWUgSGFyZCB3YXMgZXZlciB0aG91Z2h0IG5vdCB0byBiZSBhIENocmlzdG1hcyBtb3ZpZSBhbmQgYXJ0aWNsZXMgc3VjaCBhcyB0aGUgb25lIHlvdeKAmXJlIHJlYWRpbmcgbm93IHdpbGwgYmUgc2VlbiBhcyBub3RoaW5nIGJ1dCBhIG1hc3NpdmUgd2FzdGUgb2YgZXZlcnlvbmXigJlzIHRpbWUuIEltYWdpbmUgdGhhdCFcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPiAuLi4gYXMgc2VlbiB0aHJvdWdoIHRoZSBob2xvZ3JhcGhpYyBwcmlzbSBvZiBEYXRhIEFuYWx5dGljcy4gPC9wPiBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE1NyA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9zdGVwaGVuZm9sbG93cy5jb20vdXNpbmctZGF0YS10by1kZXRlcm1pbmUtaWYtZGllLWhhcmQtaXMtYS1jaHJpc3RtYXMtbW92aWUvXCI+aHR0cHM6Ly9zdGVwaGVuZm9sbG93cy5jb20vdXNpbmctZGF0YS10by1kZXRlcm1pbmUtaWYtZGllLWhhcmQtaXMtYS1jaHJpc3RtYXMtbW92aWUvPC9hPjwvcD4gIFxyXG4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTU2ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+PGk+UHVibGljIEFjY2VzcyB0byBRdWFudHVtIENvbXB1dGluZyAuLi4gbWFrZXMgYSBxdWFpbnQgQ2hyaXN0bWFzLUhhbm51a2FoLUZlc3RpdnVzIFByZXNlbnQgZm9yIGFsbCAgPC9pPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFRoZSBJQk0gUSBFeHBlcmllbmNlIGhhcyBhbHJlYWR5IGV4ZWN1dGVkIG1vcmUgdGhhbiBzZXZlbiBtaWxsaW9uIHF1YW50dW0gcHJvZ3JhbXMsIGFuZCB0aGV5IGFyZW7igJl0IGp1c3QgcmFuZG9tIGdvYmJsZWR5Z29vayBsaWtlIG1pbmUuIExlZ2l0IHJlc2VhcmNoZXJzLCBtYW55IHVuYWZmaWxpYXRlZCB3aXRoIElCTSwgaGF2ZSBwdWJsaXNoZWQgbW9yZSB0aGFuIDEyMCBhY2FkZW1pYyBwYXBlcnMgdXNpbmcgaXQuXHJcblxyXG4gIFRoZSBhcHAgaXMgcGFydCBvZiBhIGxhcmdlciBlZmZvcnQgdG8gYm9vc3QgbGl0ZXJhY3kgaW4gcXVhbnR1bSBjb21wdXRpbmcuIE90aGVyIGNvbXBhbmllcyBoYXZlIGFsc28gYmVlbiByZWxlYXNpbmcgb3Blbi1zb3VyY2Ugc29mdHdhcmUgcGFja2FnZXMgdG8gcmVhY2ggb3V0IHRvIHRoZSBtYXNzZXPigJRvciBtb3JlIHByb2JhYmx5LCBuZXJkcyB3aXRoIG5pY2hlIGludGVyZXN0cy4gVGhleSBob3BlIHRoYXQgYSBkaXZlcnNlIHBvb2wgb2YgdXNlcnMgY2FuIGd1aWRlIHRoZW0gdG93YXJkIG1vcmUgY3JlYXRpdmUgdXNlcyBmb3IgdGhlIG1hY2hpbmVzLiBcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPiBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE1NiA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3F1YW50dW0tY29tcHV0aW5nLW5lZWRzLXlvdS10by1oZWxwLXNvbHZlLWl0cy1jb3JlLW15c3RlcnkvXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3F1YW50dW0tY29tcHV0aW5nLW5lZWRzLXlvdS10by1oZWxwLXNvbHZlLWl0cy1jb3JlLW15c3RlcnkvPC9hPjwvcD4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxNTUgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UbyBzYXkgdGhhdCB0aGUgd29ybGQncyBtaWNyby10cmFuc2FjdGlvbiBuZWVkcyBoYXZlIGNoYW5nZWQgaW4gdGhlIHBhc3QgMTAwIHllYXJzIGlzIC4uLiBleGFnZ2VyYXRpb24uIE1hc2xvdydzIDxpPkhpZXJhcmNoeSBvZiBOZWVkczwvaT4gc3BlY2lmaWVzIG1vcmUgb3IgbGVzcyB0aGUgcmVhbGl0eSBvZiBidXlpbmcgaGFiaXRzLiBGcm9tIHRoZSBib3R0b20gb2YgdGhlIHRyaWFuZ2xlLCB0aGV5IGFyZSBwaHlzaW9sb2dpY2FsIG5lZWRzLCBzYWZldHktc2VjdXJpdHksIGxvdmUgYW5kIGJlbG9uZ2luZywgYW5kIGZpbmFsbHkgc2VsZi1hY3R1YWxpemF0aW9uLiBXaGF0IGlzIGNsZWFyIGlzIHRoYXQgaG9yaXpvbnRhbCBzY2FsaW5nIG9mIG91ciBuZWVkcyBvZnRlbiB1c2UgZnJhZ21lbnRlZCBzb3VyY2VzIG9mIFwiY3VycmVuY3lcIi0td2hldGhlciBpdCBpcyBmaW5hbmNpYWwgY2FwaXRhbCBiZWluZyBzcGVudCwgb3Igc29jaWFsIGNhcGl0YWwgKHZhbHVlIGFjY3J1ZWQgZnJvbSB0cnVzdCBuZXR3b3JrcyksIGh1bWFuIGNhcGl0YWwodmFsdWUgYWNjcnVlZCBmcm9tIHNwZWNpYWx0aWVzIGFuZCBzcGVjaWFsaXplZCBuZXR3b3JrcyksIGludGVsbGVjdHVhbCBjYXBpdGFsLCBhbmQgc28gb24uIDwvcD5cclxuICA8cD5UaGUgZWZmZWN0IGlzIGNsZWFyOiBtdWx0aXBseWluZyB1c2FnZXMgYW5kIGZvcm1zIG9mIHZhbHVlIGV4Y2hhbmdlIGFyZSBjZXJ0YWluLS10aGlzLCB3aXRob3V0IGFjY291bnRpbmcgZm9yIHRoZSBteXJpYWQgbmV3IG9wdGlvbnMgdGhhdCB0ZWNoIG9mZmVycy4gU28sIGlmIG9uZSBjb25zaWRlcnMgdGhlIGxpbmVhciBwcm9ncmVzc2lvbiBmcm9tIGJhcnRlcmluZyB0byB0aGUgY29pbnMgb2YgRWd5cHQgYW5kIEF0aGVucywgaGlzdG9yeSBjZXJ0YWlubHkgYW1wbGlmaWVzIGl0c2VsZiB3aXRoIFZlbm1vLCBQYXlQYWwgb3B0aW9ucyBhcmUgaGVyZSB0byBzdGF5Li4uICBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkZhY2Vib29rIEluYy4gaXMgd29ya2luZyBvbiBtYWtpbmcgYSBjcnlwdG9jdXJyZW5jeSB0aGF0IHdpbGwgbGV0IHVzZXJzIHRyYW5zZmVyIG1vbmV5IG9uIGl0cyBXaGF0c0FwcCBtZXNzYWdpbmcgYXBwLCBmb2N1c2luZyBmaXJzdCBvbiB0aGUgcmVtaXR0YW5jZXMgbWFya2V0IGluIEluZGlhLCBhY2NvcmRpbmcgdG8gcGVvcGxlIGZhbWlsaWFyIHdpdGggdGhlIG1hdHRlci5cclxuICA8YnIgLz48YnIgLz5cclxuXHJcbiAgVGhlIGNvbXBhbnkgaXMgZGV2ZWxvcGluZyBhIHN0YWJsZWNvaW4gLS0gYSB0eXBlIG9mIGRpZ2l0YWwgY3VycmVuY3kgcGVnZ2VkIHRvIHRoZSBVLlMuIGRvbGxhciAtLSB0byBtaW5pbWl6ZSB2b2xhdGlsaXR5LCBzYWlkIHRoZSBwZW9wbGUsIHdobyBhc2tlZCBub3QgdG8gYmUgaWRlbnRpZmllZCBkaXNjdXNzaW5nIGludGVybmFsIHBsYW5zLiBGYWNlYm9vayBpcyBmYXIgZnJvbSByZWxlYXNpbmcgdGhlIGNvaW4sIGJlY2F1c2UgaXTigJlzIHN0aWxsIHdvcmtpbmcgb24gdGhlIHN0cmF0ZWd5LCBpbmNsdWRpbmcgYSBwbGFuIGZvciBjdXN0b2R5IGFzc2V0cywgb3IgcmVndWxhciBjdXJyZW5jaWVzIHRoYXQgd291bGQgYmUgaGVsZCB0byBwcm90ZWN0IHRoZSB2YWx1ZSBvZiB0aGUgc3RhYmxlY29pbiwgdGhlIHBlb3BsZSBzYWlkLlxyXG4gIDxiciAvPjxiciAvPlxyXG4gICBcclxuICBGYWNlYm9vaywgd2hpY2ggaGFzIDIuNSBiaWxsaW9uIGdsb2JhbCB1c2VycywgbW9yZSB0aGFuICQ0MCBiaWxsaW9uIGluIGFubnVhbCByZXZlbnVlIGFuZCBncmVhdGVyIGV4cGVyaWVuY2UgbmF2aWdhdGluZyByZWd1bGF0b3J5IGlzc3VlcywgbWF5IGhhdmUgYSBiZXR0ZXIgY2hhbmNlIG9mIG1ha2luZyBhIHN0YWJsZWNvaW4gdGhhdCBzdGlja3MuIEl0IHdvdWxkIGJlIHRoZSBmaXJzdCBsYXJnZSB0ZWNobm9sb2d5IGNvbXBhbnkgdG8gbGF1bmNoIHN1Y2ggYSBwcm9qZWN0LiBcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPiBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE1NSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMTItMjEvZmFjZWJvb2staXMtc2FpZC10by1kZXZlbG9wLXN0YWJsZWNvaW4tZm9yLXdoYXRzYXBwLXRyYW5zZmVyc1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTEyLTIxL2ZhY2Vib29rLWlzLXNhaWQtdG8tZGV2ZWxvcC1zdGFibGVjb2luLWZvci13aGF0c2FwcC10cmFuc2ZlcnM8L2E+PC9wPiAgXHJcbiAgYDtcclxuICAgIC8qXHJcbiAgdmFyIGJsb2dwb3N0MTU0ID0gICBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD4gYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTU0ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIgXCI+IDwvYT48L3A+ICBcclxuICBgO1xyXG4gKi9cclxuICAgIHZhciBibG9ncG9zdDE1MyA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkxhdyBhbmQgSnVzdGljZSBpbiB0aGUgdGVjaCB3b3JsZCByZXZlYWxzIDxpPmEgbmV3IHdvcmxkIHdpdGhvdXQganVkaWNpYWwgcHJlY2VkZW50PC9pPiBtYWtpbmcgZm9yIG5ldyBjdXJpb3NpdGllcyBpbiBDYXNlIExhdyB3aXRoIGluY3JlYXNpbmcgZnJlcXVlbmN5LiBEaWZmZXJlbnQgZmFjZXRzIG9mIHBlcnNvbmFsIGRhdGEsIHdoZXRoZXIgc2hvcHBpbmcsIG1vdmllLXdhdGNoaW5nLCBjaGF0dGluZywgc2VsZmllLXBvc3RpbmcsIGFsbCBuZXcgbnVhbmNlcyBhbmQgbmV3IHNvY2lhbC1sZWdhbCBkaWxlbW1hcyBmYWxsIHRvIHRoZSBiZXN0IGRpc2NyZXRpb25zIG9mIEZhY2Vib29rLCBHb29nbGUsIEFtYXpvbiBhbmQgb3RoZXIgVGVjaCBHcmVhdHMuLi4gIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgV2hlbiB5b3UgYnV5IHNvbWV0aGluZyBvbiBBbWF6b24sIHRoZSBvZGRzIGFyZSwgeW91IGFyZW7igJl0IGJ1eWluZyBpdCBmcm9tIEFtYXpvbiBhdCBhbGwuIFBsYW5za3kgaXMgb25lIG9mIDYgbWlsbGlvbiBzZWxsZXJzIG9uIEFtYXpvbiBNYXJrZXRwbGFjZSwgdGhlIGNvbXBhbnnigJlzIHRoaXJkLXBhcnR5IHBsYXRmb3JtLiBUaGV5IGFyZSBsYXJnZWx5IGhpZGRlbiBmcm9tIGN1c3RvbWVycywgYnV0IGJlaGluZCBhbnkgaXRlbSBmb3Igc2FsZSwgdGhlcmUgY291bGQgYmUgZG96ZW5zIG9mIHNlbGxlcnMsIGFsbCBjb21wZXRpbmcgZm9yIHlvdXIgY2xpY2suIFRoaXMgeWVhciwgTWFya2V0cGxhY2Ugc2FsZXMgd2VyZSBhbG1vc3QgZG91YmxlIHRob3NlIG9mIEFtYXpvbiByZXRhaWwgaXRzZWxmLCBhY2NvcmRpbmcgdG8gTWFya2V0cGxhY2UgUHVsc2UsIG1ha2luZyB0aGUgc2VsbGVyIHBsYXRmb3JtIGFsb25lIHRoZSBsYXJnZXN0IGUtY29tbWVyY2UgYnVzaW5lc3MgaW4gdGhlIFVTLiBcclxuXHJcbiAgQW1hem9uIGlzIGZhciBmcm9tIHRoZSBvbmx5IHRlY2ggY29tcGFueSB0aGF0LCBoYXZpbmcgYW5uZXhlZCBhIHZhc3Qgc3BoZXJlIG9mIGh1bWFuIGFjdGl2aXR5LCBmaW5kcyBpdHNlbGYgaW4gdGhlIHBvc2l0aW9uIG9mIGhhdmluZyB0byBnb3Zlcm4gaXQuIEJ1dCBBbWF6b24gaXMgdGhlIG9ubHkgcGxhdGZvcm0gdGhhdCBoYXMgYSAkMTc1IGJpbGxpb24gcHJpemUgcG9vbCB0ZW1wdGluZyBwZW9wbGUgdG8gZ2FtZSBpdCwgYW5kIHRoZSBjb21wYW55IG11c3QgY29uc3RhbnRseSBpbXBsZW1lbnQgbmV3IHJ1bGVzIGFuZCBwZW5hbHRpZXMsIHdoaWNoIGluIHR1cm4sIGJlY29tZSB0b29scyBmb3IgbmV3IGFidXNlcywgd2hpY2ggcmVxdWlyZSB5ZXQgbW9yZSBydWxlcyB0byBwb2xpY2UuIFRoZSBldm9sdXRpb24gb2YgaXRzIG1vZGVyYXRpb24gc3lzdGVtIGhhcyBiZWVuIGh5cGVyLWNoYXJnZWQuIFdoaWxlIE1hcmsgWnVja2VyYmVyZyBtdXNlZCByZWNlbnRseSB0aGF0IEZhY2Vib29rIG1pZ2h0IG5lZWQgYW4gYW5hbG9nIHRvIHRoZSBTdXByZW1lIENvdXJ0IHRvIGFkanVkaWNhdGUgZGlzcHV0ZXMgYW5kIGhlYXIgYXBwZWFscywgQW1hem9uIGFscmVhZHkgaGFzIHNvbWV0aGluZyBsaWtlIGEganVkaWNpYWwgc3lzdGVtIOKAlCBvbmUgdGhhdCBpcyBzZWNyZXRpdmUsIHZvbGF0aWxlLCBhbmQgb2Z0ZW4gdGVycmlmeWluZy4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5Tbywgd2hlbiBjb21tZXJjaWFsIGFuZCBzb2NpYWwgdHJhbnNhY3Rpb25zIGRyaWZ0IGF3YXkgZnJvbSAgdHJhZGl0aW9uYWwgcG9saXRpY2FsLWp1ZGljaWFsLWxlZ2FsIGp1cmlzZGljdGlvbnMsIHdoZXJlLS1yYXRoZXIgd2hhdC0taXMgYmluZGluZyBhdXRob3JpdHk/IFxyXG4gIDwvcD4gYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNTMgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnRoZXZlcmdlLmNvbS8yMDE4LzEyLzE5LzE4MTQwNzk5L2FtYXpvbi1tYXJrZXRwbGFjZS1zY2Ftcy1zZWxsZXItY291cnQtYXBwZWFsLXJlaW5zdGF0ZW1lbnRcIj5odHRwczovL3d3dy50aGV2ZXJnZS5jb20vMjAxOC8xMi8xOS8xODE0MDc5OS9hbWF6b24tbWFya2V0cGxhY2Utc2NhbXMtc2VsbGVyLWNvdXJ0LWFwcGVhbC1yZWluc3RhdGVtZW50PC9hPjwvcD4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxNTIgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEJ1dCBlbmdpbmVlcnMgaGF2ZW4ndCB3cml0dGVuIG9mZiB0aGUgaW50ZXJuYWwgY29tYnVzdGlvbiBlbmdpbmUganVzdCB5ZXQuIFRoZSB0ZWFtIGF0IEFzdG9uIE1hcnRpbiBoYXMgcmVsZWFzZWQgZGV0YWlscyBvbiB0aGUgVjEyIGVuZ2luZSB0aGF0IHdpbGwgYnJlYXRoZSBsaWZlIGludG8gaXRzIHVwY29taW5nLCAkMyBtaWxsaW9uIFZhbGt5cmllIGh5cGVyY2FyLCBhbmQgdGhlIGdsZWFtaW5nIG1hemUgb2YgbWV0YWwgaXMgYSBiZWF1dGlmdWwgYmVhc3QuXHJcbiAgPGJyIC8+PGJyIC8+XHJcblxyXG4gIDxpbWcgc3JjPVwiZGlzdC9pbWcvYXN0b25tYXJ0aW53aXJlZC5qcGdcIiB3aWR0aD1cIjM1MFwiIGNsYXNzPVwiem9vbVwiIC8+PGJyIC8+PGJyIC8+XHJcbiAgVGhlIDYuNS1saXRlciBWMTIgd2lsbCBwcm9kdWNlIDEsMDAwIGhvcnNlcG93ZXIgKGJlY2F1c2UgZXhjZXNzKSBhbmQgcmV2cyB0byAxMSwxMDAgcnBtLiBQdXR0aW5nIHRoaXMgb3ZlcmFsbCBpbnNhbml0eSBhc2lkZSwgd2hhdCdzIHJlbWFya2FibGUgYWJvdXQgc3VjaCBmaWd1cmVzIGlzIHRoYXQgQXN0b24ncyBlbmdpbmVlcnMgaGl0IHRoZW0gd2l0aG91dCByZXNvcnRpbmcgdG8gdHVyYm9jaGFyZ2Vycy4gVGhlIGF1dG9tYWtlciBzYXlzIGl0IHJlY29nbml6ZXMgdGhhdCB0dXJib3Mgb2ZmZXIgYSB0b24gb2YgYmVuZWZpdHMsIGJ1dCB3YW50ZWQg4oCcYW4gaW50ZXJuYWwgY29tYnVzdGlvbiBlbmdpbmUgdGhhdCBzaXRzIGF0IHRoZSBhYnNvbHV0ZSBwaW5uYWNsZSBmb3IgcGVyZm9ybWFuY2UsIGV4Y2l0ZW1lbnQsIGFuZCBlbW90aW9uLOKAnSB3aGljaCBpdCBjb3VsZCBvbmx5IGdldCB0aHJvdWdoIG5hdHVyYWwgYXNwaXJhdGlvbi4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTUyID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXN0b24tbWFydGluLXZhbGt5cmllLWVuZ2luZS12MTItZjEtY29zd29ydGgvXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FzdG9uLW1hcnRpbi12YWxreXJpZS1lbmdpbmUtdjEyLWYxLWNvc3dvcnRoLzwvYT48L3A+ICBcclxuICBgO1xyXG5cclxuICAgIHZhciBibG9ncG9zdDE1MSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPldoYXQgYmV0dGVyIHJlYXNvbiBmb3IgaW50ZXJuYXRpb25hbCBjb29wZXJhdGlvbiB0aGFuIGEgcmVuZGV6LXZvdXMgYXQgMjAwIG1pbGVzIHVwPyBBZnRlciBhbGwsIGl0J3MgYSBuaWNoZSBzd2VldHNwb3QgZm9yIHNhdGVsbGl0ZSBwbGFjZW1lbnQgb2ZmZXJpbmcgY29tbXVuaWNhdGlvbiB3aXRoIGxlc3MtYmFkIGxhdGVuY3kgcHJvYmxlbXMuLi5UaGlzIGtpbmQgb2Ygc3BhdGlhbCBjb29yZGluYXRpb24gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBTaGlwcywgcGxhbmVzIGFuZCByZW1vdGUgYnVzaW5lc3NlcyByZWx5IGZvciBpbnRlcm5ldCBjb25uZWN0aW9ucyBvbiBzaWduYWxzIHNlbnQgZnJvbSBnZW9zdGF0aW9uYXJ5IG9yYml0LCBidXQgdGhpcyBtZXRob2QgaXMgdG9vIHByaWNleSBmb3Igd2lkZXNwcmVhZCBhZG9wdGlvbi4gQmVhbWluZyB0aGUgaW50ZXJuZXQgdmlhIHNhdGVsbGl0ZXMgb3JiaXRpbmcgY2xvc2VyIHRvIHRoZSBwbGFuZXQgaGFzIGJlZW4gdHJpZWQgYmVmb3JlLiBUaGUgaWRlYSB3YXMgcG9wdWxhciBhdCB0aGUgaGVpZ2h0IG9mIHRoZSB0ZWNoIGJvb20gb2YgdGhlIGxhdGUgMTk5MHMuIFRocmVlIGNvbXBhbmllc+KAlFRlbGVkZXNpYywgSXJpZGl1bSBhbmQgR2xvYmFsc3RhcuKAlHBvdXJlZCB0ZW5zIG9mIGJpbGxpb25zIG9mIGRvbGxhcnMgaW50byB0aGUgbG93LUVhcnRoIG9yYml0IChMRU8pIHNhdGVsbGl0ZSBpbnRlcm5ldC4gSXQgY3VsbWluYXRlZCBpbiB0aGUgY29sbGFwc2Ugb2YgVGVsZWRlc2ljLiBBbHRob3VnaCB0aGUgdGVjaG5vbG9neSBvZiB0aGUgdGltZSB3b3JrZWQsIGl0IHdhcyB2ZXJ5IGNvc3RseSBhbmQgc28gdGhlIHNlcnZpY2VzIG9uIG9mZmVyIGhhZCB0byBiZSBodWdlbHkgZXhwZW5zaXZlLCB0b28uIElyaWRpdW0gc3Vydml2ZWQsIGJ1dCBhcyBhIG5pY2hlIHByb3ZpZGVyIG9mIHNhdGVsbGl0ZSB0ZWxlcGhvbnksIG5vdCBhIHB1cnZleW9yIG9mIGNoZWFwIGFuZCBmYXN0IGludGVybmV0IGFjY2Vzcy5cclxuICA8YnIgLz48YnIgLz5cclxuXHJcbiAgT25lV2ViIGlzIGFtb25nIHNldmVyYWwgZmlybXMgdGhhdCBhcmUgdHJ5aW5nIExFTyBzYXRlbGxpdGVzIGFnYWluLiBTcGFjZVgsIGEgcm9ja2V0IGNvbXBhbnkgZm91bmRlZCBieSBFbG9uIE11c2ssIGEgdGVjaCBlbnRyZXByZW5ldXIsIGlzIGd1YXJkZWQgYWJvdXQgaXRzIHByb3Bvc2VkIHN5c3RlbSwgU3RhcmxpbmssIGJ1dCBvbiBOb3ZlbWJlciAxNXRoIEFtZXJpY2FuIHJlZ3VsYXRvcnMgYXBwcm92ZWQgYW4gYXBwbGljYXRpb24gZm9yIDcsNTE4IHNhdGVsbGl0ZXMgYXQgYW4gYWx0aXR1ZGUgb2YgMzQwa20gWzIwMG1pbGVzXSAoYnJpbmdpbmcgdGhlIHRvdGFsIGZvciB3aGljaCB0aGUgZmlybSBoYXMgYXBwcm92YWwgdG8gbmVhcmx5IDEyLDAwMCkuIFRlbGVzYXQsIGEgQ2FuYWRpYW4gZmlybSwgaGFzIHBsYW5zIGZvciBhIDUxMi1zYXRlbGxpdGUgY29uc3RlbGxhdGlvbi4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD4gYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNTEgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmVjb25vbWlzdC5jb20vYnJpZWZpbmcvMjAxOC8xMi8wOC9zYXRlbGxpdGVzLW1heS1jb25uZWN0LXRoZS1lbnRpcmUtd29ybGQtdG8tdGhlLWludGVybmV0XCI+aHR0cHM6Ly93d3cuZWNvbm9taXN0LmNvbS9icmllZmluZy8yMDE4LzEyLzA4L3NhdGVsbGl0ZXMtbWF5LWNvbm5lY3QtdGhlLWVudGlyZS13b3JsZC10by10aGUtaW50ZXJuZXQ8L2E+PC9wPiAgXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QxNTAgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEFtaWQgdGhlIHdyZWNrYWdlIG9mIHRoZSBidXJzdCBiaXRjb2luIGJ1YmJsZSAgaXQgaXMgZmFpciB0byBhc3Nlc3MgdGhlIG91dGxvb2sgZm9yIGJsb2NrY2hhaW5zLCB0aGUgdGVjaG5vbG9neSB1bmRlcmx5aW5nIHRoZSBjcnlwdG9jdXJyZW5jeS4gVGhlcmXigJlzIGEgZGlmZmVyZW5jZS4gQmxvY2tjaGFpbnMsIGl0IGlzIHNhaWQsIHN0YW5kIHRvIHJldm9sdXRpb25pemUgZW50ZXJwcmlzZSB0ZWNobm9sb2d5IGJ5IGFkZHJlc3NpbmcgdGhlIHByb2JsZW1zIHdpdGggYXV0aGVudGljYXRpb24gYW5kIGlkZW50aXR5IGF0IHRoZSBoZWFydCBvZiB0aGUgaW50ZXJuZXQgaXRzZWxmLCBlbGltaW5hdGluZyBtaWRkbGUgbGF5ZXJzIGluIHRyYW5zYWN0aW9ucyBhbmQgbWFraW5nIGl0IGZhc3RlciBhbmQgZWFzaWVyIHRvIGVzdGFibGlzaCBwcm92ZW5hbmNlLlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIFxyXG4gIFRoZSBhZG9wdGlvbiBvZiBibG9ja2NoYWlucyBpbiB0aGUgZW50ZXJwcmlzZSBoYXMgYmVlbiBzbG93LiBUaGUgcXVlc3Rpb24gbm93IGlzIHRoZSBleHRlbnQgdG8gd2hpY2ggdGhlIG92ZXJibG93biBpbnZlc3RtZW50IHRoZXNpcyBiZWhpbmQgYml0Y29pbiBhbmQgcmVsYXRlZCBmaW5hbmNpYWwgbWFuaWEgY2FuIGJlIHNlcGFyYXRlZCBmcm9tIHRoZSB1dGlsaXR5IG9mIGJsb2NrY2hhaW4gYXMgYSB0b29sIGluIGVudGVycHJpc2UgdGVjaG5vbG9neS5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPiBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE1MCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud3NqLmNvbS9hcnRpY2xlcy9iaXRjb2luLXdhc250LWEtYnViYmxlLXVudGlsLWl0LXdhcy0xMTU0NDc4MzQwMD9tb2Q9ZGplbUNJT19oXCI+aHR0cHM6Ly93d3cud3NqLmNvbS9hcnRpY2xlcy9iaXRjb2luLXdhc250LWEtYnViYmxlLXVudGlsLWl0LXdhcy0xMTU0NDc4MzQwMD9tb2Q9ZGplbUNJT19oPC9hPjwvcD4gIFxyXG4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTQ5ID0gYCBcclxuXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEZvcm1hbGx5LCBhbiBhc3NldCBidWJibGUgaXMganVzdCBhIHJhcGlkIHJpc2UgYW5kIGFicnVwdCBjcmFzaCBpbiBwcmljZXMuIERlZmVuZGVycyBvZiB0aGUgZWZmaWNpZW50LW1hcmtldCB0aGVvcnkgYXJndWUgdGhhdCB0aGVzZSBwcmljZSBtb3ZlbWVudHMgYXJlIGJhc2VkIG9uIGNoYW5nZXMgaW4gaW52ZXN0b3LigJlzIGJlbGllZnMgYWJvdXQgYW4gYXNzZXTigJlzIHRydWUgdmFsdWUuIEJ1dCBpdOKAmXMgaGFyZCB0byBpZGVudGlmeSBhIHJlYXNvbiB3aHkgYW55IHJhdGlvbmFsIGludmVzdG9yIHdvdWxkIGhhdmUgc28gYWJydXB0bHkgcmV2aXNlZCBoZXIgYXNzZXNzbWVudCBvZiB0aGUgbG9uZy10ZXJtIGVhcm5pbmdzIHBvd2VyIG9mIGNvbXBhbmllcyBpbiAxOTI5LCBvciB0aGUgbG9uZy10ZXJtIHZpYWJpbGl0eSBvZiBkb3QtY29tIHN0YXJ0dXBzIGluIDIwMDAsIG9yIHRoZSBsb25nLXRlcm0gdmFsdWUgb2YgaG91c2luZyBpbiAyMDA3LlxyXG48YnIgLz48YnIgLz5cclxuICBTaW1pbGFybHksIHRoZXJlIHdhcyBubyBvYnZpb3VzIHJlYXNvbiB3aHkgaXQgbWFkZSBzZW5zZSBmb3IgdGhlIHdvcmxkIHRvIGJlbGlldmUgdGhhdCBCaXRjb2luIHdhcyB0aGUgY3VycmVuY3kgb2YgdGhlIGZ1dHVyZSBsYXRlIERlY2VtYmVyIDIwMTcsIGJ1dCB0byB0aGluayB0aGlzIHdhcyBsZXNzIHRoYW4gb25lIGZpZnRoIGFzIGxpa2VseSB0b2RheS4gQml0Y29pbiB3YXNu4oCZdCBlY2xpcHNlZCBieSBhIGNvbXBldGl0b3Ig4oCUIHRoZSBtYWluIGFsdGVybmF0aXZlIGNyeXB0b2N1cnJlbmNpZXMgaGFkIGV2ZW4gYmlnZ2VyIHByaWNlIGRlY2xpbmVzLiBOb3IgaGF2ZSByZWd1bGF0b3JzIGNyYWNrZWQgZG93biBvbiBCaXRjb2luIOKAlCBpbiBmYWN0LCB0aGUgcmVndWxhdG9yeSBzdHJ1Y3R1cmUgaGFzIGdlbmVyYWxseSBiZWVuIHF1aXRlIGFjY29tbW9kYXRpbmcgdG8gdGhlIHRlY2hub2xvZ3kuIE5vciBoYXZlIGNyaXRpY2FsIHRlY2hub2xvZ2ljYWwgZmxhd3MgZW1lcmdlZCDigJQgeWVzLCB0aGUgQml0Y29pbiBuZXR3b3JrIGhhcyBiZWNvbWUgY29uZ2VzdGVkLCBidXQgdGhpcyBwcm9ibGVtIHdhcyBhbnRpY2lwYXRlZCB3ZWxsIGJlZm9yZSB0aGUgY3Jhc2guIFxyXG4gIFxyXG48YnIgLz48YnIgLz5cclxuICBJbnN0ZWFkLCBpdCBzZWVtcyBvdmVyd2hlbG1pbmdseSBsaWtlbHkgdGhhdCBCaXRjb2lu4oCZcyBzcGVjdGFjdWxhciByaXNlIGFuZCBmYWxsIHdhcyBkdWUgbm90IHRvIHJhdGlvbmFsIG9wdGltaXNtIGZvbGxvd2VkIGJ5IHNlbnNpYmxlIHBlc3NpbWlzbSwgYnV0IHRvIHNvbWUga2luZCBvZiBhZ2dyZWdhdGUgbWFya2V0IGlycmF0aW9uYWxpdHkg4oCUIGEgY29tYmluYXRpb24gb2YgaGVyZCBiZWhhdmlvciwgY3luaWNhbCBzcGVjdWxhdGlvbiBhbmQgdGhlIGVudHJ5IGludG8gdGhlIG1hcmtldCBvZiBhIGxhcmdlIG51bWJlciBvZiBuZXcsIHBvb3JseSBpbmZvcm1lZCBpbnZlc3RvcnMuXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE0OSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9vcGluaW9uL2FydGljbGVzLzIwMTgtMTItMTEveWVwLWJpdGNvaW4td2FzLWEtYnViYmxlLWFuZC1pdC1wb3BwZWRcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMi0xMS95ZXAtYml0Y29pbi13YXMtYS1idWJibGUtYW5kLWl0LXBvcHBlZDwvYT48L3A+ICBcclxuICBgO1xyXG4gICAgdmFyIGJsb2dwb3N0MTQ4ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+Q3J5cHRvLUN1cnJlbmN5IHRoZW9yaXN0cyBwcm92aWRlIGVuZGxlc3MgZXhwbGFuYXRpb25zIG92ZXIgdGhlIGRpc3Byb3BvcnRpb25hdGVseS1zaXplZCBmYWxsIG9mIEJpdGNvaW4gZnJvbSBEZWNlbWJlciAyMDE3IHlldCBvZmZlciBhbiBpbmNvbXBsZXRlIHBpY3R1cmUuIFRoZSBtb3JlIGZhc2NpbmF0aW5nIHF1ZXN0aW9ucyBzdXJyb3VuZCBCaXRjb2luJ3MgMjAxNyBncm93dGggcmF0aGVyIHRoYW4gdGhlIGludGVycnVwdGlvbiB0aGF0IGVpdGhlciBjYXNjYWRlZCB0byBuZXcgZmFjdG9ycyBvciBzaW1wbHkgbWFnbmlmaWVkIGV4aXN0aW5nIGZhY3RvcnMtLXN1Y2ggYXMgc2VjdXJpdHkgZG91YnRzIGFuZCB0aGUgZGVhcnRoIG1pY3JvLWVjb25vbWljIHB1YmxpYyB1c2UuXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gSGlzIGV4cGxhbmF0aW9uIGZvciB0aGUgZGl2ZXJnZW5jZSBpbmNsdWRlIGxhc3QgeWVhcuKAmXMgbWV0ZW9yaWMgcmFsbHksIGEg4oCcbWVsdGRvd27igJ0gaW4gdGhlIG1hY3JvZWNvbm9taWMgY2xpbWF0ZSBhbmQgdHJlYXN1cnkgc2FsZXMgZHVyaW5nIGluaXRpYWwgY29pbiBvZmZlcmluZ3MuIFxyXG4gIOKAnEZhaXIgdmFsdWUgaXMgc2lnbmlmaWNhbnRseSBoaWdoZXIgdGhhbiB0aGUgY3VycmVudCBwcmljZSBvZiBCaXRjb2luLOKAnSBoZSB3cm90ZS4g4oCcSW4gZmFjdCwgd29ya2luZyBiYWNrd2FyZHMsIHRvIHNvbHZlIGZvciB0aGUgY3VycmVudCBwcmljZSBvZiBCaXRjb2luLCB0aGlzIGltcGxpZXMgY3J5cHRvIHdhbGxldHMgc2hvdWxkIGZhbGwgdG8gMTcgbWlsbGlvbiBmcm9tIDUwIG1pbGxpb24gY3VycmVudGx5LuKAnVxyXG48c3VwPjE8L3N1cD5cclxuICA8L3A+IGA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTQ4ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0xMi0xMy91bmFiYXNoZWQtYml0Y29pbi1idWxsLXRob21hcy1sZWUtc2F5cy10aGUtbWFya2V0LWlzLXdyb25nP3NybmQ9Y3J5cHRvY3VycmVuY2llc1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTEyLTEzL3VuYWJhc2hlZC1iaXRjb2luLWJ1bGwtdGhvbWFzLWxlZS1zYXlzLXRoZS1tYXJrZXQtaXMtd3Jvbmc/c3JuZD1jcnlwdG9jdXJyZW5jaWVzPC9hPjwvcD4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxNDUgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5MZWF2aW5nIHRoZSBhZ2Ugb2YgcGVyc29uYWwgcGMgY29tcHV0aW5nIHBvd2VyLCB0aGUgZ3Jvd2luZyB0cmVuZHMgYXJlIHRvIGJvcnJvdyBzb21lb25lIGVsc2UncyBjb21wdXRpbmcgcG93ZXIgaW4gdGhlIGNsb3VkLiBQbGF0Zm9ybS1hcy1hLVNlcnZpY2UsIEluZnJhc3RydWN0dXJlLWFzLWEtU2VydmljZSwgYW5kIG90aGVyIHNoYXJlZCBjb21wdXRpbmcgYW5kIHN0b3JhZ2Ugc2VydmljZXMgYXJlIG1lcmVseSBhbGlnbmluZyB3aXRoIHRoZSBncm93aW5nIGNvbnZlbnRpb24gdG8gc3B1cm4gYnV5aW5nLS1zYXkgYSBjYXItLWluIGZhdm9yIG9mIHJlbnRpbmcgZm9yIHdoZW4gYW5kIHdoYXQgbmVlZHMgc3BlY2lmaWNhbGx5IGFyaXNlLS1saWtlIFViZXIsIFR1cm8gYW5kIG90aGVyIHBlZXItdG8tcGVlciB0cmVuZHMuICBJdCBvbmx5IG1ha2VzIHNlbnNlIHRoYXQgQ2xvdWQgc2VydmljZXMgd291bGQgaW5jb3Jwb3JhdGUgbW9yZSBoYXJkd2FyZSBjdXN0b21pemF0aW9uIGFuZCBmbGV4aWJpbGl0eS4gICBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkFtYXpvbiwgdGhlIHdvcmxk4oCZcyBsYXJnZXN0IG9ubGluZSByZXRhaWxlciBhbmQgbGFyZ2VzdCBjbG91ZC1jb21wdXRpbmcgY29tcGFueSwgaXMgcHVzaGluZyBpbnRvIGEgbmV3IGxpbmUgb2Ygd29yazogY29tcHV0ZXIgY2hpcHMuXHJcblxyXG4gIExhdGUgbGFzdCBtb250aCwgdGhlIGNvbXBhbnksIGJhc2VkIGluIFNlYXR0bGUsIHJldmVhbGVkIHRoYXQgaXQgaGFkIHNwZW50IHRoZSBsYXN0IGZldyB5ZWFycyBidWlsZGluZyBhIG5ldyBjaGlwIGZvciB1c2UgaW5zaWRlIHRoZSBtaWxsaW9ucyBvZiBzZXJ2ZXJzIGluIGl0cyBkYXRhIGNlbnRlcnMgYXJvdW5kIHRoZSB3b3JsZC5cclxuICBcclxuICBBbWF6b24gZG9lcyBub3QgcGxhbiB0byBzZWxsIHRoaXMgY2hpcCBkaXJlY3RseSB0byBjdXN0b21lcnMsIGJ1dCB0aGUgZGVjaXNpb24gYnkgb25lIG9mIHRoZSB3b3JsZOKAmXMgYmlnZ2VzdCBidXllcnMgb2YgY29tcHV0ZXIgcHJvY2Vzc29ycyB0byBnbyB0aGUgZG8taXQteW91cnNlbGYgcm91dGUgaXMgbGlrZWx5IHRvIGhhdmUgYSBtYWpvciBpbXBhY3Qgb24gSW50ZWwsIHRoZSBpY29uaWMgU2lsaWNvbiBWYWxsZXkgY2hpcCBtYWtlci5cclxuPHN1cD4xPC9zdXA+XHJcbjwvcD48cD5UaW1lLXRyYXZlbGluZyB0byB0aGUgZGF3biBvZiB0aGUgUEMgZXJhLCBpdCBtdXN0IGhhdmUgZmVsdCB0aGUgd29ybGQgZW5kaW5nIHdpdGggdGhlIG1vbm9wb2xpc3RpYyBvdmVydG9uZXMgb2YgSUJNIGFuZCBNaWNyb3NvZnQuIFlldCwgdGltZS0tYW5kIHRlY2hub2xvZ3ktLXBhc3NlcyBhbGwgdGhpbmdzLiBOb3csIGl0IGlzIHRoZSBhZ2Ugb2YgR29vZ2xlIENsb3VkIGFuZCBBbWF6b24gV2ViIFNlcnZpY2VzLS1pbmNsdWRpbmcgdGhlIGNoaXAhXHJcbiAgPC9wPmA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTQ1ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzEyLzEwL3RlY2hub2xvZ3kvYW1hem9uLXNlcnZlci1jaGlwLWludGVsLmh0bWxcIj4gIGh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMTIvMTAvdGVjaG5vbG9neS9hbWF6b24tc2VydmVyLWNoaXAtaW50ZWwuaHRtbDwvYT48L3A+ICBcclxuICBgO1xyXG5cclxuXHJcblxyXG5cclxuICAgIHZhciBibG9ncG9zdDE0NCA9IGBcclxuIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5NYXRlcmlhbHMgc2NpZW5jZSwgYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgICBhbmQgSW9UIHRlY2hub2xvZ3kgaGFzIGEgbmV3IGFzc2lnbm1lbnQ6IFNhdmUgdGhlIEdsYWNpZXJzISAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5CeSB0aGUgZW5kIG9mIHRoZSBtaXNzaW9uIGluIDIwMDksIEFuYW5kYWtyaXNobmFuIGFuZCBoaXMgY29sbGVhZ3VlcyBoYWQgY29sbGVjdGVkIGRhdGEgZnJvbSBhYm91dCAxNTAgYm9yZWhvbGVzLiBUaGUgbmV3IGluZm9ybWF0aW9uIGRpZG7igJl0IHByZWNpc2VseSBleHBsYWluIHdoYXQgd2FzIGhhc3RlbmluZyBUaHdhaXRlc+KAmSBhY2NlbGVyYXRpb24sIGJ1dCBpdCB3YXMgYSBzdGFydC4gTWVhbndoaWxlLCB0aGUgc2F0ZWxsaXRlIG1hcHMga2VwdCBnZXR0aW5nIHJlZGRlciBhbmQgcmVkZGVyLiBJbiAyMDE0LCBFcmljIFJpZ25vdCwgYSBnbGFjaW9sb2dpc3QgYXQgTkFTQSwgY29uY2x1ZGVkIHRoYXQgVGh3YWl0ZXMgd2FzIGVudGVyaW5nIGEgc3RhdGUgb2Yg4oCcdW5zdG9wcGFibGXigJ0gY29sbGFwc2UuIEV2ZW4gd29yc2UsIHNjaWVudGlzdHMgd2VyZSBzdGFydGluZyB0byB0aGluayB0aGF0IGl0cyBkZW1pc2UgY291bGQgdHJpZ2dlciBhIGxhcmdlciBjYXRhc3Ryb3BoZSBpbiBXZXN0IEFudGFyY3RpY2EsIHRoZSB3YXkgYSByb3R0aW5nIHN1cHBvcnQgYmVhbSBtaWdodCBsZWFkIHRvIHRoZSB0b3BwbGluZyBub3Qgb25seSBvZiBhIHdhbGwgYnV0IG9mIGFuIGVudGlyZSBob3VzZS4gQWxyZWFkeSwgVGh3YWl0ZXPigJkgbG9zc2VzIHdlcmUgcmVzcG9uc2libGUgZm9yIGFib3V0IDQgcGVyY2VudCBvZiBnbG9iYWwgc2VhLWxldmVsIHJpc2UgZXZlcnkgeWVhci4gV2hlbiB0aGUgZW50aXJlIGdsYWNpZXIgd2VudCwgdGhlIHNlYXMgd291bGQgbGlrZWx5IHJpc2UgYnkgYSBmZXcgZmVldDsgd2hlbiB0aGUgZ2xhY2llcnMgYXJvdW5kIGl0IGRpZCwgdG9vLCB0aGUgc2VhcyBtaWdodCByaXNlIGJ5IG1vcmUgdGhhbiBhIGRvemVuIGZlZXQuIFxyXG48c3VwPjE8L3N1cD5cclxuICA8L3A+YDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNDQgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hbnRhcmN0aWNhLXRod2FpdGVzLWdsYWNpZXItYnJlYWtpbmctcG9pbnQvXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FudGFyY3RpY2EtdGh3YWl0ZXMtZ2xhY2llci1icmVha2luZy1wb2ludC88L2E+PC9wPiAgXHJcbiAgYDtcclxuICAgIHZhciBibG9ncG9zdDE0MyA9IGBcclxuIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICBXb3JrcGxhY2Ugc2F0aXNmYWN0aW9uIHNpdHMgc3F1YXJlbHkgb24gZmluZGluZyBwdXJwb3NlLCB1c3VhbGx5IHRvIHRoZSBhaW0gb2YgaGVscGluZyBvdGhlcnMuIDIwdGggY2VudHVyeSBqb2JzIHBsYWlubHkgcmVmbGVjdGVkIHRoaXMgdmFsdWUgaW4gcGxhaW4gc2lnaHQsIGhvd2V2ZXIgbmV3IGpvYnMgZG8gdGhlIHNhbWUgYW5kIG1vcmUsIGJ1dCBsZXNzIGV2aWRlbnRseS4gQ29kZSB3cml0aW5nIGlzIHdvcnRoeSBmb3IgaXRzIGNvbnRyaWJ1dGlvbnMgdG8gaHVtYW5pdHktLWFzIG11Y2ggYXMgYnJpZGdlLWJ1aWxkaW5nLCBudXJzaW5nLCAgc29jaWFsIHdvcmsgYW5kIGFueSAgaW5kdXN0cnkuICBZZXQsIHNvZnR3YXJlIGVuZ2luZWVyaW5nIGlzIHNlZW4gdGhyb3VnaCB0aGUgZmlsdGVyIG9mIGNvZGluZywgbWF0aCwgICBsb2dpYyBhbmQgYXV0b21hdGlvbiwgaW5zdGVhZCBvZiB0aGUgdHJ1ZSBwb3J0cmFpdHVyZSBvZiB0aGUgY2FyZWZ1bCByZWZsZWN0aW9uLCBodW1hbml0eSBhbmQgcGF0aWVuY2Ugb2YgY29kaW5nIGF1dGhvcnNoaXAuIFNhZGx5LCB0aGVyZSBpcyBubyBQUiB0byB0b3V0IHRoZSBuZXcgcGFyYWRpZ20gYW5kIGxvZnR5IG1lYW5pbmcgdGllZCBpbnRvIHByb2dyYW1taW5nIHdvcmshIDwvcD4gXHJcblxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5MYWNrIG9mIGNhcmVlciBncm93dGggb3IgdHJhamVjdG9yeSB3YXMgdGhlIGJpZ2dlc3QgcmVhc29uLCB3aXRoIDI4LjElIG9mIHJlc3BvbmRlbnRzIHNheWluZyBpdCBjYXVzZWQgdGhlbSB0byBxdWl0LiBNYW55IG9mIHRoZSB3b21lbiBhbHNvIGJlbGlldmUgdGhhdCBtZW4gaGF2ZSBhbiBhZHZhbnRhZ2UgaW4gdGhlIGZpZWxkOyBqdXN0IDUzJSBzYWlkIHdvbWVuIGhhdmUgdGhlIHNhbWUgb3Bwb3J0dW5pdGllcyB0byBlbnRlciBzZW5pb3IgbGVhZGVyc2hpcCByb2xlcyBhcyB0aGVpciBtYWxlIGNvdW50ZXJwYXJ0cy48YnIgLz5cclxuXHJcbiAg4oCcTGFjayBvZiBjYXJlZXIgZ3Jvd3RoIGlzIGEgcHJvYmxlbSB0aGF0IHdvbWVuIGZhY2UgYWNyb3NzIGluZHVzdHJpZXMs4oCdIHNheXMgS2ltIFdpbGxpYW1zLCBJbmRlZWTigJlzIHNlbmlvciBkaXJlY3RvciBvZiBkZXNpZ24gcGxhdGZvcm0sIHRlY2hub2xvZ3ksIGFuZCBvcGVyYXRpb25zLiBcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTQzID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5mYXN0Y29tcGFueS5jb20vOTAyNzQwNjcvdGhpcy1pcy13aHktd29tZW4tbGVhdmUtam9icy1pbi10ZWNoXCI+aHR0cHM6Ly93d3cuZmFzdGNvbXBhbnkuY29tLzkwMjc0MDY3L3RoaXMtaXMtd2h5LXdvbWVuLWxlYXZlLWpvYnMtaW4tdGVjaDwvYT48L3A+ICBcclxuICBgO1xyXG5cclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QxNDIgPSBgXHJcbiBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+ICBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBUaGUgYnJpZ2h0IGJsdWUgbGlnaHQgb2YgZmxhdCwgcmVjdGFuZ3VsYXIgdG91Y2ggc2NyZWVucywgZmFucywgYW5kIGRpc3BsYXlzIG1heSBiZSBhcHBlYWxpbmcgZnJvbSBhbiBhZXN0aGV0aWMgcGVyc3BlY3RpdmUgKG1vcmUgb24gdGhhdCBiZWxvdyksIGJ1dCBmcm9tIGEgaGVhbHRoIHN0YW5kcG9pbnQsIGl0IGlzIGZyYXVnaHQgd2l0aCBwcm9ibGVtcy4gQmx1ZSBsaWdodCBpbmhpYml0cyB0aGUgcHJvZHVjdGlvbiBvZiBtZWxhdG9uaW4sIHRoZSBob3Jtb25lIHRoYXQgcmVndWxhdGVzIG91ciBzbGVlcCBjeWNsZXMuIEJsdWUgbGlnaHQgYmVmb3JlIGJlZHRpbWUgY2FuIHdyZWFrIGhhdm9jIG9uIG91ciBhYmlsaXR5IHRvIGZhbGwgYXNsZWVwLiBcclxuICA8YnIgLz48YnIgLz5IYXJ2YXJkIHJlc2VhcmNoZXJzIGFuZCB0aGVpciBjb2xsZWFndWVzIGNvbmR1Y3RlZCBhbiBleHBlcmltZW50IGNvbXBhcmluZyB0aGUgZWZmZWN0cyBvZiA2LjUgaG91cnMgb2YgZXhwb3N1cmUgdG8gYmx1ZSBsaWdodCwgdmVyc3VzIGV4cG9zdXJlIHRvIGdyZWVuIGxpZ2h0IG9mIGNvbXBhcmFibGUgYnJpZ2h0bmVzcy4gVGhleSBmb3VuZCB0aGF0IGJsdWUgbGlnaHQgc3VwcHJlc3NlZCBtZWxhdG9uaW4gZm9yIGFib3V0IHR3aWNlIGFzIGxvbmcgYXMgdGhlIGdyZWVuIGxpZ2h0IGFuZCBzaGlmdGVkIGNpcmNhZGlhbiByaHl0aG1zIGJ5IHR3aWNlIGFzIG11Y2ggKDMgaG91cnMgY29tcGFyZWQgd2l0aCAxLjUgaG91cnMpLiBBbmQgd29yc2UsIGl04oCZcyBiZWVuIGxpbmtlZCBpbiByZWNlbnQgc3R1ZGllcyB0byBhbiBpbmNyZWFzZWQgcmlzayBvZiBvYmVzaXR5IGFuZCBzb21lIGNhbmNlcnMuXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE0MiA9IGBcclxuIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5mYXN0Y29tcGFueS5jb20vOTAxNzc1NzMvaG93LWJsdWUtYmVjYW1lLXRlY2hzLWZhdm9yaXRlLWNvbG9yLWFuZC13aHktaXQtc2hvdWxkbnQtYmVcIj5odHRwczovL3d3dy5mYXN0Y29tcGFueS5jb20vOTAxNzc1NzMvaG93LWJsdWUtYmVjYW1lLXRlY2hzLWZhdm9yaXRlLWNvbG9yLWFuZC13aHktaXQtc2hvdWxkbnQtYmU8L2E+PC9wPiAgXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QxNDEgPSBgXHJcbiBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgQ29tcHV0ZXJzIGRvbid0IGtub3cgbGluZXMgb2YgdGV4dCB0byB1bmRlcnN0YW5kIHRoZSB3b3Jkcy4gSnVzdCB0aGUgY29uZGl0aW9ucyBhbmQgYmVoYXZpb3Igb2YgYSBjZXJ0YWluIGNvbWJpbmF0aW9uIG9mIGxldHRlcnMgLSBhbmQgdGhlIGNvbXB1dGVyIGRvZXMgbm90IDxpPmtub3c8L2k+MCwgMSwgYW5kIDIuICAuLkl0IGtub3dzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gMCBhbmQgMSB3aXRoIHJlc3BlY3QgdG8gMiAuLi4gPGJyIC8+PGJyIC8+XHJcbiAgIFRoZSBzdWJqZWN0IG9mIHRydXN0IGlzIG5vdCB0aGUgVGVjaCBTZWN0b3IncyBiZXN0IGxpZ2h0IC0tIGFzIGl0IGNhbiBiZSBmYWlybHkgc2FpZCB0byBmbGF1bnQgaXJyZXNwb25zaWJpbGl0eS0tPGk+dG8gbW92ZSBmYXN0IGFuZCBicmVhayB0aGluZ3M8L2k+LiBUaGlzIGhhcyBiZWVuIGJlbmlnbiBzbyBmYXIgZXhjZXB0IGZvciBhIGZldyBjcmVkaXQgY2FyZCBhbmQgU2NhcmxldHQgSm9oYW5uc2VuJ3MgbGVha2VkIHNlbGZpZXMgLi4uIG5vdGhpbmcgRWFydGgtc2hhdHRlcmluZy4gIEEuSS4gb24gdGhlIG90aGVyIGhhbmQsIGNhbid0IGJlIGxlYXNoZWQgaW4gYW4gT3BlbiBTb3VyY2UgZXJhLCBzbyBoZXJlIHdlIGFyZSAtICd0aGUgYmVzdCBvZmZlbnNlIGlzIGEgZ29vZCBkZWZlbnNlJyB0aGVvcnkuIDwvcD48cD5cclxuICAgTW9yYWwsIHNvY2lhbCwgYW5kIG1vc3Qgb2YgYWxsIHRlY2huaWNhbCBmb3JtcyBvZiBkZXRlcnJhbmNlIGFuZCBwbGV0aG9yYS4gQXMgRWxvbiBNdXNrIG9uY2Ugc2FpZCwgXCJXZSBkb24ndCB3YW50IGF1dG9ub21vdXMgd2VhcG9ucy4gVGhlIG1vbWVudCB0aGF0IG9uZSBpcyB3YWxraW5nIGRvd24gdGhlIHN0cmVldCwgPGk+IGl0J3MgdG9vIGxhdGU8L2k+LiAgIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFRoZSBwcmltZSBtb3ZlciBiZWhpbmQgdGhlIGZpbG0gaXMgU3R1YXJ0IFJ1c3NlbGwsIGEgcHJvZmVzc29yIG9mIGNvbXB1dGVyIHNjaWVuY2UgYXQgdGhlIFVuaXZlcnNpdHkgb2YgQ2FsaWZvcm5pYSwgQmVya2VsZXkuIEhlcmUsIFJ1c3NlbGwgY2hlY2tzIGluIHdpdGggdGhlIEJ1bGxldGluIHRvIGV4cGxhaW4gaG93IHRoZSBmaWxtIHdhcyBtYWRlLCBob3cgbGl0dGxlIHN0YW5kcyBiZXR3ZWVuIHVzIGFuZCB0aGUgZHJvbmUgYXBvY2FseXBzZSwgYW5kIHdoYXQgdGhlIHByb3NwZWN0cyBhcmUgZm9yIGJhbm5pbmcgYXV0b25vbW91cyB3ZWFwb25zIGJlZm9yZSB0aGV5IGdldCB0cnVseSBvdXQgb2YgaGFuZC5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlRoaXMsIG5vdCB0byBtZW50aW9uIHRoZSBwcmluY2lwbGUgdGhhdCB3aG9ldmVyIHdpbmRzIHVwIGhhcm5lc3NpbmcgQS5JLiB3aWxsIGNvbnRyb2wgdGhlIGdsb2JlLS13aGV0aGVyIHNvY2lhbGx5LCBuYXRpb25hbGx5LCBhbmQgZmluYW5jZS4gVGhlIHNvbHV0aW9uIHRvIHJlc29sdmUgdGhpcz8gV2l0aCBhbGwgb2Ygc29jaWV0eSBpbnZvbHZlZCBpbiB0aGUgc3dheSBvZiB0ZWNoIGRlY2lzaW9uLW1ha2luZywgdGhlbiBhIHNvY2lldHkgb2YgcGVvcGxlIHJ1bGVzIHRoZSBnbG9iZSwgbm90IHRoZSB0ZWNobm9sb2d5IG9mIG9uZSBncm91cCAuLi50aGUgd2F5IGl0IHNob3VsZCBiZSAuLi48L3A+XHJcbiAgPHA+UHJvZ3JhbW1lcnMgbmVlZCB0byB0YWtlIGNhcmUgb2Ygbm90IG9ubHkgdGhlIHByb2JsZW0tYXQtaGFuZCBidXQgdGhlIGxhcmdlciBvdXRjb21lLiBGb3IgZXhhbXBsZSwgdGhlIHN0b2NrICdGbGFzaC1DcmFzaCBvZiAyMDEwJyBwcm9kdWNlZCBhIHN1ZGRlbiBkcm9wLS1pbml0aWF0ZWQgdW5pbnRlbnRpb25hbGx5IGJ5IGEgY29tcHV0ZXIgcHJvZ3JhbS4uLiBMZXQncyBzdGFydCBjb21wbGVtZW50aW5nIGZhc3RlciBlbmdpbmVzIHdpdGggYmV0dGVyIGJyYWtlcyEgYDtcclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUxNDEgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vdGhlYnVsbGV0aW4ub3JnLzIwMTcvMTIvYXMtbXVjaC1kZWF0aC1hcy15b3Utd2FudC11Yy1iZXJrZWxleXMtc3R1YXJ0LXJ1c3NlbGwtb24tc2xhdWdodGVyYm90cy9cIj5odHRwczovL3RoZWJ1bGxldGluLm9yZy8yMDE3LzEyL2FzLW11Y2gtZGVhdGgtYXMteW91LXdhbnQtdWMtYmVya2VsZXlzLXN0dWFydC1ydXNzZWxsLW9uLXNsYXVnaHRlcmJvdHMvPC9hPjwvcD4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxNDAgPSBgXHJcbiBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+ICAgVGhlIDxpPmV4cG9uZW50aWFsIGdyb3d0aDxpPiBvZiBkYXRhLCBhcyBwZXRhYnl0ZXMgb2Ygc3RyZWFtaW5nLCBkaXNwb3NhYmxlIElvVCBzZW5zb3IgZGF0YSBrbm93cyBubyBib3VuZHMuIEFXUyBoYXMgcmVhbGx5IHN0ZXBwZWQgdXAgdG8gdGhlIGdyZWF0IGpvYiBvZiB0YWNrbGluZyB0aGlzIGNoYWxsZW5nZTpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlNhdGVsbGl0ZSBvcGVyYXRvcnMgbmVlZCB0byBnZXQgZGF0YSBkb3duIGZyb20gdGhlIHNhdGVsbGl0ZSwgcHJvY2VzcyBpdCBhbmQgdGhlbiBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgZGV2ZWxvcGVycyB0byB1c2UgaW4gYXBwbGljYXRpb25zLiBJbiB0aGF0IHJlZ2FyZCwgaXTigJlzIG5vdCB0aGF0IG11Y2ggZGlmZmVyZW50IGZyb20gYW55IElvVCBkZXZpY2UuIEl0IGp1c3Qgc28gaGFwcGVucyB0aGF0IHRoZXNlIGFyZSBmbHlpbmcgYXJvdW5kIGluIHNwYWNlLjxiciAvPlxyXG4gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTE0MCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzI3L2F3cy1sYXVuY2hlcy1hLWJhc2Utc3RhdGlvbi1mb3Itc2F0ZWxsaXRlcy1hcy1hLXNlcnZpY2UvXCI+aHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzI3L2F3cy1sYXVuY2hlcy1hLWJhc2Utc3RhdGlvbi1mb3Itc2F0ZWxsaXRlcy1hcy1hLXNlcnZpY2UvPC9hPjwvcD4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxMzkgPSBgXHJcbiBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+Q29tcGV0aXRpb24gdmVyc3VzIGNvb3BlcmF0aW9uIHdpdGggQ2hpbmEgcHJlc2VudHMgYW4gdW5hbnN3ZXJhYmxlIHF1ZXN0aW9uIHdoaWxlIG5hdGlvbmFsaXNtIGJydXNoZXMgYXNpZGUgYSBjb21tb24gaHVtYW5pdHktLWFzIGZhciBhcyB0ZWNobm9sb2dpY2FsIGFkdmFuY2VtZW50IGlzIGNvbmNlcm5lZC4gUGVyaGFwcyB0aGUgYmVzdCBob3BlIGZvciBhIGNvbW1vbiB0aHJlYWQgb2YgcGVhY2UgbGllcyBpbiB0aGUgYWdlLW9sZCwgYm9yZGVyLWJyZWFraW5nIGxlZ2FjeSBvZiAxOTkwcycgcHJlLXRlY2ggd2F2ZSBtdWx0aW5hdGlvbmFsaXN0IGNvcnBvcmF0aW9ucy0tYW4gaW1wb3NzaWJsZSBkcmVhbSBpbiB0aGUgYWdlIG9mIHJldHJpYnV0aXZlIHRhcmlmZiBhbmQgdHJhZGUgdGhyZWF0cyAuLi5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPllldCB0aGUgdHJhZGUgY29uZmxpY3QgdGhhdCBtYXR0ZXJzIG1vc3QgYmV0d2VlbiBBbWVyaWNhIGFuZCBDaGluYSBpcyBhIDIxc3QtY2VudHVyeSBmaWdodCBvdmVyIHRlY2hub2xvZ3kuIEl0IGNvdmVycyBldmVyeXRoaW5nIGZyb20gYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgKGFpKSB0byBuZXR3b3JrIGVxdWlwbWVudC4gVGhlIGZ1bmRhbWVudGFsIGJhdHRsZWdyb3VuZCBpcyBpbiBzZW1pY29uZHVjdG9ycy4gVGhlIGNoaXAgaW5kdXN0cnkgaXMgd2hlcmUgQW1lcmljYeKAmXMgaW5kdXN0cmlhbCBsZWFkZXJzaGlwIGFuZCBDaGluYeKAmXMgc3VwZXJwb3dlciBhbWJpdGlvbnMgY2xhc2ggbW9zdCBkaXJlY3RseS4gQW5kIHdoYXRldmVyIE1lc3NycyBUcnVtcCBhbmQgWGkgc2F5IGF0IHRoZSBnMjAsIHRoaXMgY29uZmxpY3Qgd2lsbCBvdXRsYXN0IHRoZW0gYm90aC5cclxuICBcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTM5ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5lY29ub21pc3QuY29tL2xlYWRlcnMvMjAxOC8xMi8wMS9jaGlwLXdhcnMtY2hpbmEtYW1lcmljYS1hbmQtc2lsaWNvbi1zdXByZW1hY3lcIj5odHRwczovL3d3dy5lY29ub21pc3QuY29tL2xlYWRlcnMvMjAxOC8xMi8wMS9jaGlwLXdhcnMtY2hpbmEtYW1lcmljYS1hbmQtc2lsaWNvbi1zdXByZW1hY3k8L2E+PC9wPiAgXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QxMzggPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BdCB0aGUgZW5kIG9mIHRoZSBkYXksIHdoeSBub3QgaW5jbHVkZSB0YWN0aWxlIG1lc3NhZ2luZz8gSSBlbmpveWVkIG15IFNhbXN1bmcgTm90ZSBWLCBidXQgdGhlIG1hdGVyaWFsIHRvdWNoIGlzIHRoZSBoYXJkZXN0IHRvIHJlcGxpY2F0ZS5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBJbnZlbnRlZCBmb3VyIGRlY2FkZXMgYWdvIGJ5IDNNIGluIHdoYXQgaGFzIGJlY29tZSBhIGZhbW91cyBleGFtcGxlIG9mIG1pc3Rha2VzIGxlYWRpbmcgdG8gc3VjY2Vzcywgc3RpY2t5IG5vdGVzIGhhdmUgYmVjb21lIGEgY2xhc3NpYyBiZWNhdXNlIG9mIHNvbWUgdW5pcXVlIHByb3BlcnRpZXMuIFRoZXkgY2FuIGNvbnZleSBhIG1lc3NhZ2XigJR0aGF0IGlzLCBjb250ZW504oCUYnV0IHRoZWlyIHBsYWNlbWVudCBwcm92aWRlcyBjb250ZXh0LiBUaGV5IGNhbiBiZSBwdXQgaW4gdGhlIGxpbmUgb2Ygc2lnaHQgb2Ygc29tZW9uZSB0byBncmFiIGF0dGVudGlvbiBvciBiZSBhZmZpeGVkIHRvIGEgZG9jdW1lbnQgb3Igb3RoZXIgb2JqZWN0IHRvIHByb3ZpZGUgaW5zdHJ1Y3Rpb24gb3IgY29tbWVudGFyeS4gVGhlaXIgYWJpbGl0eSB0byBiZSBhdHRhY2hlZCBhZ2FpbiBhbmQgYWdhaW4gaGFzIG1hZGUgdGhlbSBwb3B1bGFyIGZvciBhcnJhbmdpbmcgaWRlYXMgb24gc3VyZmFjZXMgc3VjaCBhcyB3aGl0ZWJvYXJkcyBmb3IgYW5hbG9nIG1pbmQtbWFwcGluZy4gPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlNlbnNlbGVzcyBjcml0aWNpc20gYXNpZGUsIEdvb2dsZSdzIE1hdGVyaWFsaXplIHNvZnR3YXJlIGlzIHRoZSB0cnVlIHdpbm5lciBmb3IgcmVwbGljYXRpbmcgcGFwZXIsIGF0IGxlYXN0IHZpc3VhbGx5IC4uLmA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMTM4ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5mYXN0Y29tcGFueS5jb20vOTAyNjgyNTAvZXZlbi1pbi1vdXItZGlnaXRhbC13b3JsZC10aGUtaHVtYmxlLXN0aWNreS1ub3RlLWFiaWRlc1wiPmh0dHBzOi8vd3d3LmZhc3Rjb21wYW55LmNvbS85MDI2ODI1MC9ldmVuLWluLW91ci1kaWdpdGFsLXdvcmxkLXRoZS1odW1ibGUtc3RpY2t5LW5vdGUtYWJpZGVzPC9hPjwvcD4gIFxyXG4gIGA7XHJcblxyXG5cclxuXHJcbiAgICB2YXIgdXJsID0gW1xyXG5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTYwJyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMzEtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgMzEsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1NuZWFreSBCb3RzJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjAsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE1OScsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTI2LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDI2LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdSaXNlIG9mIHRoZSBJbnRlcnZpZXdlciBCb3RzJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNTksXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE1OVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE1OCcsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTI1LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDI1LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0NocmlzdG1hcyBTdGF0cycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTU4LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNThcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxNTcnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0yNC0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciAyNCwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdCaWcgRGF0YVxcJ3MgTmV3IFJlaW50ZXJwcmV0YXRpb24gb2YgUmVhbGl0eScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTU3LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNTdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxNTYnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0yMi0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciAyMi0yMywgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1F1YW50dW0gQ29tcHV0aW5nIFByZXNlbnRzJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNTYsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE1NlxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxNTUnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0yMS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciAyMSwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQSBWaXJ0dWFsIEJhbGthbml6YXRpb24gb2YgSW50ZXJuYXRpb25hbCBDdXJyZW5jeScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTU1LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNTVcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICcxNTQnLFxyXG4gICAgICAgICAgICAgICAgZGlkOiAnMTItMjAtMTgnLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDIwLCAyMDE4ICcsXHJcbiAgICAgICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTU0LFxyXG4gICAgICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTU0XHJcbiAgICAgICAgICAgICAgfSwgIFxyXG4gICAgICAgICAgICAgICovXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE1MycsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTE5LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDE5LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQSBOZXcgPGk+U3RhcmUgRGVjaXNpczwvaT4nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE1MyxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTUzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTUyJyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMTgtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgMTgsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQXN0b24gTWFydGluIGF0IDEsMDAwIEhvcnNlcG93ZXInLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE1MixcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTUyXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTUxJyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMTctMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgMTcsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdPZiBTcGFjZSBhbmQgU2F0ZWxsaXRlcycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTUxLFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNTFcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxNTAnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0xNS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciAxNS0xNiwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQSBDdXJyZW5jeSBJbnRyb3NwZWN0aXZlJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNTAsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE1MFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE0OScsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTE0LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDE0LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdBIEN1cnJlbmN5IGluIFJldHJvc3BlY3RpdmUnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE0OSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTQ5XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTQ4JyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMTMtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgMTMsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0EgQ3VycmVuY3kgU3RhcnRpbmcgQWZyZXNoJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNDgsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE0OFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE0NScsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTEwLTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDEwLCAyMDE4JyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdRdWFudHVtIENoaXBzLCBHUFUgJmFtcDsgUGFyYWxsZWwgQ2hpcHMgIGFuZCBDbG91ZCBDaGlwcywgQWhveSEnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE0NSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTQ1XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTQ0JyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMDgtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgOC05LCAyMDE4IDxiciAvPldlZWtlbmQnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIFRlY2ggSW5kdXN0cnlcXCdzIFRydWUgVmFsdWUsIFBhcnQgSUk6PGJyIC8+U2F2aW5nIEVhcnRoJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNDQsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE0NFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE0MycsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTA3LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDcsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdUaGUgVGVjaCBJbmR1c3RyeVxcJ3MgVHJ1ZSBWYWx1ZSwgUGFydCBJOjxiciAvPlNhdmluZyBIdW1hbml0eScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTQzLFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNDNcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxNDInLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0wNi0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciA2LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnU2NyZWVuIFRpbWUgQmx1ZXMnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE0MixcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTQyXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTQxJyxcclxuICAgICAgICAgICAgZGlkOiAnMTItMDUtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGVjZW1iZXIgNSwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIFJlYXNvbiBmb3IgTW9yZSBTb2NpYWwgQXdhcmVuZXNzIG9uIEEuSS4gUG9saWN5JyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNDEsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE0MVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzE0MCcsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTA0LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDQsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93JyxcclxuICAgICAgICAgICAgdGl0bGU6ICdTcGluIE1lIFVwIGEgU2F0ZWxsaXRlIGZvciB0aGUgWWVhcicsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTQwLFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxMzknLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMi0wMy0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEZWNlbWJlciAzLCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIENoaW5hIFF1ZXN0aW9uJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzksXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzOVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzEzOCcsXHJcbiAgICAgICAgICAgIGRpZDogJzEyLTAxLTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RlY2VtYmVyIDEtMiwgMjAxOCA8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93JyxcclxuICAgICAgICAgICAgdGl0bGU6ICdUZXh0Ym9vayBUZWNobm9sb2d5JyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzgsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzOFxyXG4gICAgICAgIH1cclxuXHJcbiAgICBdO1xyXG4gICAgdmFyIGk7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgdXJsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGNhdCA9IGAgXHJcbiAgICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0RpdlwiPiBcclxuICAgIDxociAvPiAgXHJcbiAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiI3RvcFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgXHJcbiAgICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gICAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwic3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCJhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gICAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cImNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gICAgPGg2ICBpZD1cInRpdGxlXCIgICBjbGFzcz1cImRhaWx5dGl0bGUgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcbiAgICA8YnIgLz5cclxuICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH1cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBpZD1cImJsb2djaXRlXCI+JHt1cmxbaV0uYmxvZ2NpdGV9XHJcbiAgICA8L2Rpdj5gO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWRlY1wiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY2F0TW9kID0gYFxyXG4gIDxkaXYgaWQ9XCJtb2RfJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0Rpdk1vZFwiPiBcclxuICA8aHIgLz4gIFxyXG4gIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwic3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cImF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cImNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1kZWMtbW9kXCIpLmlubmVySFRNTCArPSBjYXRNb2Q7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ2Jsb2dnZXItZGVjJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhhbmd1bGFyLnRvSnNvbih1cmwpKTtcclxufTtcclxuYmxvZ2dlckRlYygpOyIsIlxyXG5cclxudmFyIGJsb2dnZXJGZWIgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4vKlxyXG4gIHZhciBibG9ncG9zdDE3ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5GaXJzdCwgbGV0IG1lIGRlc2NyaWJlIHRoYXQgYmxvY2tjaGFpbiB0ZWNobm9sb2dpZXMsIGkuZS4gR292ZXJubWVudCBjb250cmFjdHMsIEJ1c2luZXNzIGNvbnRyYWN0cywgQml0Y29pbiBhbmQgb3RoZXJcclxuXHJcbmNyeXB0b2N1cnJlbmNpZXMsIGFsbCByZWx5IG9uIG5ldHdvcmsgZ3JhcGggdGhlb3J5LCBib3RoIG9uIHRoZSBsb3ctbGV2ZWwgcHJvZ3JhbW1pbmcgdGVjaG5vbG9neSAocGVlci10by1wZWVyIGdsb2JhbFxyXG5cclxuaXAgbmV0d29ya3MpIGFjcm9zcyB0aGUgc3BlY3RydW0gdG8gaGlnaC1sZXZlbCBpbnRlcmZhY2VzIGZvciBpbnN0aXR1dGlvbmFsLCBjb3Jwb3JhdGUsIGluZGl2aWR1YWwgbmVlZHMgYW5kIHVzZXMuXHJcblxyXG5UaGVzZSBibG9ja2NoYWluICZxdW90O25ldHdvcmsmcXVvdDsgYW5hbHlzZXMgZGVwZW5kIG9uIGhpZ2hseSB2YXJpYWJsZS0tYW5kIHNpbXVsdGFuZW91cy0tbmV0d29yayBjaGFuZ2VzLCBub2RlXHJcblxyXG5jaGFuZ2VzLCBhbmQgbGluayBjaGFuZ2VzOyBhbmQsIHRoZSBsYXR0ZXIgdGhyZWUgbWF5IGFyYml0cmFyaWx5IGNoYW5nZSBpbnRlcmRlcGVuZGFudGx5IG9yIG5vdC48L3A+XHJcblxyXG5cclxuXHJcbjxwPlRoZXJlZm9yZSwgYmxvY2tjaGFpbiB0ZWNobm9sb2dpZXMgbXVzdCBmaXJzdCBhY2NvbW9kYXRlIGNvbXBsZXggbm9kZSB2YXJpYWJsZXMgZm9yIGNvbnRyYWN0cyAocmVsYXRpb25zaGlwcykgdGhhdFxyXG5cclxuaW5jbHVkZSBhcmJpdHJhcmlseSBoaWVyYXJjaGljYWwgbWFwcGluZ3MgYW5kIGNvbmRpdGlvbmFsIGRhdGEgc3RydWN0dXJlcy4gU2Vjb25kbHksIGJsb2NrY2hhaW4gdGVjaCBtdXN0IGZhY2UgYW5hbHl0aWNhbFxyXG5cclxuY2hhbGxlbmdlcyB0aGF0IGFyaXNlIGZyb20gaW5mb3JtYWwgcHJhY3RpY2VzXHJcblxyXG48c3VwPjE8L3N1cD4sIGJ5IHdoaWNoIHRoZSBvcmdhbml6YXRpb25hbCBub2RlcyAoZW1wbG95ZWVzKSBjaG9vc2UgdG8gZGV2aWF0ZSBmcm9tIHRoZSBlbXBsb3llZSByb2xlJiMzOTtzIHByb3RvY29sIGZvclxyXG5cclxudGhlIHNha2Ugb2YgZWZmaWNpZW5jeSwgY29udmVuaWVuY2UsIGNvbXBhbnkgY3VsdHVyZSwgYW5kIG11bHRpcGxlIG90aGVyIGxldmVscyBvZiBodW1hbiBmYWN0b3JzLjwvcD5cclxuXHJcblxyXG5cclxuPHA+U29jaW9sb2dpc3RzIE1leWVyICZhbXA7IFJvd2FuJiMzOTtzICgxOTc3KVxyXG5cclxuPGk+TmV3IEluc3RpdHV0aW9uYWxpc208L2k+IGV4cGxhaW5zIGhvdyBlbXBsb3llZXMgY2hhbmdlIHByYWN0aWNlcyBhbmQgZGVjb3VwbGVcclxuXHJcbjxpPmFjdHVhbDwvaT4gb3JnYW5pemF0aW9uYWwgc3RydWN0dXJlIGZyb20gcmVjb3JkZWQgcnVsZXMsIGFzIGEgZnVuY3Rpb24gb2Ygb3JnYW5pemF0aW9uYWwgc2l6ZSwgdGltZSwgY29udmVuaWVuY2UsXHJcblxyXG5ldGMuIFRoZXNlIGNvbnRpbnVhbGx5IG5ldywgdW5rbm93biBjb25zdHJhaW50cyBvbiBkYXRhIG11c3QgYmUgaW50aW1hdGVseSB1bmRlcnN0b29kLCBub24tYWxnb3JpdGhtIGh1bWFuIHVuZGVyc3RhbmRpbmdcclxuXHJcbjxpPmJ5IGF0IGxlYXN0IG9uZSBzaWRlIDwvaT5vZiB0aGUgZXhjaGFuZ2UuIEhvdyBkbyB3ZSByZWNvZ25pemUgdW53cml0dGVuLCBzb2Z0IHJ1bGVzIGFuZCBiZWhhdmlvcnMgb2YgYSBiYW5rLCBhIHBlcnNvbixcclxuXHJcbm9yIGEgY29tcGFueSYjMzk7cyBpbnRlcm5hbCBib3Q/PC9wPiBcclxuXHJcbjxwPlRoZSBoYXJkIHNjaWVuY2VzIGRvbWFpbiBvZiBTb2Z0d2FyZSBFbmdpbmVlcmluZywgQ29tcHV0ZXIgU2NpZW5jZSwgYW5kIE1hdGhlbWF0aWNzIGhhdmUgYnJpbGxpYW50bHkgYnJvdWdodCB0aGVcclxuXHJcbndvcmxkIHRoZSBibG9ja2NoYWluIHRvb2wsIDxzPmZvciB3aGljaDwvcz4gdGhlIEhhcmQgU2NpZW5jZXMgY2FuIGFuZCBtdXN0IHNoYXJlIGFuZCBwcm9wb2dhdGUgaXQncyB0ZWNobmljYWwgZXhwZXJ0aXNlIDxpPmFuZCBoaWdoZXIgc3RhbmRhcmQgb2YgbWV0cmljIHRydXRoPC9pPjxzIHN0eWxlPVwiY29sb3I6cHVycGxlXCIgY2xhc3M9XCJzdHJpa2UtcHVycGxlXCI+IG5vdCBjb250cmlidXRlIGV2ZXJ5dGhpbmcsIGVzcGVjaWFsbHkgcmVsYXRpbmcgd2l0aDwvcz4gdG8gdGhlIG90aGVyIHNjaWVuY2VzIHRoYXQgYXJlIHN0aWxsIGxhZ2dpbmcgYmVoaW5kLS1uYW1lbHkgVGhlIERpc2NpcGxpbmUgb2YgU29jaW9sb2d5PC9zPiB0b3dhcmQgYWNjbGltYXRpbmcgdG8gdGhlIG1vZGVybiBhZ2UncyBzb2NpYWwgcHJpb3JpdGllcyBhbmQgbmVlZHMuIEFzayB5b3Vyc2VsZiwgaG93IHdlbGwgZG8gMSwwMDAgdG9wIGJsb2NrY2hhaW4tcmVsYXRlZCBwcm9ncmFtbWVycyB1bmRlcnN0YW5kIHRoZSBtdWx0aS1kaW1lbnNpb25hbCBsYXllcnMgb2YgaGllcmFyY2hpY2FsIHNvY2lhbCwgY29ycG9yYXRlLCBhbmQgZ292ZXJubWVudGFsIHJlbGF0aW9uc2hpcCBuZXR3b3Jrcy0tcHJvYmFibHkgNzAwIG9mIHRoZSAxLDAwMC4gQW5kIGhvdyBtYW55IHNvY2lhbCBzY2llbnRpc3RzIGNhbiB1bmRlcnN0YW5kIHRoZSB0ZWNobm9sb2dpY2FsIHNjaWVuY2VzPyBQcm9iYWJseSAyMDAgb3V0IG9mIDEsMDAwLiBUaGlzIG1lYW5zIHRoYXQgPGk+YSBjaHVuayBvZiB0aGUgc2NpZW50aWZpYyBkaXNwbGluZXMgc3VmZmVyIGZyb20gYWN1dGUgaW5udW1lcmFjeTwvaT4uIFNvIGhvdyBkbyB3ZSBicmlkZ2UgdGhpcyBtYXNzaXZlIGtub3dsZWRnZSBnYXAgYmV0d2VlbiBxdWFsaXRhdGl2ZSBtZWFuaW5nIGluIHRoZSBzbWFydC1jb250cmFjdC48L3A+XHJcblxyXG48cD5JbiB0aGUgcGFzdCwgdGhlIGxheWVycyBvZiBhYnN0cmFjdGlvbiBmcm9tIHJhdyB0ZWNobm9sb2dpY2FsIHRvb2wgdG8gc29jaWV0YWwgdXNlIHdhcyByZWZpbmVkLCBpbXByb3ZlZCwgaW50ZWdyYXRlZCB0aHJvdWdoIG11bHRpcGxlIGxheWVycyBvZiAmcXVvdDttaWRkbGVtZW4mcXVvdDssIHN1Y2ggYXMgbGF3eWVycywgY29ycG9yYXRlIGxhd3llcnMsIGdvdmVybm1lbnQgaW5zdGl0dXRpb25zLCBub24tZ292ZXJubWVudGFsLCBub24tcHJvZml0IGFuZCBmb3ItcHJvZml0IGFjdG9ycy4gQmxvY2tjaGFpbiB0ZWNobm9sb2d5LCBieSBpdHMgdmVyeSBuYXR1cmUsIGVyYXNlcyB0aGUgbWlkZGxlbWVuLiBTdWRkZW5seSwgb25lIHByb2dyYW1tZXIsIGZvciBleGFtcGxlLCBpcyB3cml0aW5nIHRoZSBzYW1lIGhlYWx0aGNhcmUgaW5zdXJhbmNlIGNyeXB0by1jb250cmFjdCwgdGhhdCBsYXN0IG1vbnRoIGFuIGVudGlyZSB0ZWFtIG9mIGhvc3BpdGFsIGVtcGxveWVlcyBzcGVudCBhIG1vbnRoIHdyaXRpbmc7IHRoZW4gb3ZlcnNlZWluZyBhbmQgbWFuYWdpbmcgZGlmZmVyZW50IGZhY2V0cyBvZiB0aGlzIHNhbWUgdGhpbmcuPC9wPlxyXG5cclxuXHJcblxyXG48cD5Ib3dldmVyLCB0aGUgY3J5cHRvLWNvbnRyYWN0LCBvbmNlIGRlcGxveWVkIHRvIHRoZSBibG9ja2NoYWluLCBhdXRvLW1hbmFnZXMgdGhlIHJlc3QsIGZvcmV2ZXIgb3IgZm9yIHRoZSBsaWZlIG9mXHJcbnRoZSBjb250cmFjdC4gVGhlcmVmb3JlLCByYXRoZXIgdGhhbiByZWRvaW5nIHRoZSB0cmlhbHMgYW5kIGVycm9ycyBvZiAyMDAgeWVhcnMmIzM5OyBTb2Npb2xvZ3kgTmV0d29yayBBbmFseXN0cyYjMzk7XHJcbnJlc2VhcmNoIGFuZCBhbmFseXRpY2FsIGRldmVsb3BtZW50LiBUaGVyZWZvcmUsIG1lZGljYWwgYW5kIG90aGVyIHNvY2lhbCBmaWVsZHMgY2Fubm90IGFuZCBzaG91bGQgbm90IHR1cm4gdG8gdGhlXHJcbkhhcmQgU2NpZW5jZXMgZm9yIHNvbHV0aW9ucy4gVGhlc2UgTWVkIHJlc2VhcmNoZXJzIGFuZCBkZXZlbG9wZXJzIGFyZSBhbHJlYWR5IGF0IGhvbWUsIHNhZmUgd2l0aGluIHRoZSBhY2FkZW1pY1xyXG5kb21haW4gb2YgdGhlIFJhdyBTY2llbmNlcyBvZiBNZWRpY2FsIFNvY2lvbG9neSwgUHVibGljIEhlYWx0aCwgYW5kIHNvIG9uLiBUaGUgbmV4dCB0ZW4geWVhcnMgb2YgYmxvY2tjaGFpbiB0ZWNobm9sb2d5XHJcbmNhbiBlaXRoZXIgYmUgZGVmaW5lZCBieSB1bndpdHRpbmcsIHBpZWNlbWVhbCBhZHZhbmNlcywgYWNjb21wYW5pZWQgYnkgZnJlcXVlbnQsIG5vbi1pbXByb3ZpbmcgZGlzdGFzdHJvdXMgY3Jpc2VzLlxyXG5PciwgdGhlIG5leHQgdGVuIHllYXJzIGNhbiBmb2xsb3cgU29jaW9sb2d5JiMzOTtzIFNjaWVudGlmaWMgTWV0aG9kIHRvd2FyZCBhIG1pbGRseSB0dXJidWxlbnQsIGJ1dCBzdGFibGUgYW5kIGJlYXV0aWZ1bFxyXG5mdXR1cmUuPC9wPlxyXG5cclxuXHJcblxyXG48cD5FeGFtcGxlcyBhc2lkZSwgdGhlIDxzPnByaW1hY3k8L3M+IGlubnVtZXJhY3kgb2YgdGhlIFNvY2lvbG9neSBhY2FkZW1pYyBmaWVsZCBpbiB0aGUgZWFybHkgMjFzdCBjZW50dXJ5IHF1aWNrbHkgYmVjb21lcyBhcHBhcmVudCBvblxyXG5cclxucmV2aWV3IG9mIHRoZSBTb2Npb2xvZ2lzdHMmIzM5OyBzcGVjaWFsaXphdGlvbiBpbiBuZXR3b3JrIHRoZW9yaWVzIGltYnVlZCB3aXRoIHN5bW1ldHJpY2FsIGFuZCBhc3ltbWV0cmljYWwgcmVsYXRpb25zaGlwcyxcclxuXHJcbndpdGhpbiBzb2NpYWwgbmV0d29ya3MgdGhhdCBjaGFuZ2UgYXJiaXRyYXJpbHkgdGhlIGRpcmVjdGlvbiwgY29uZGl0aW9ucywgYW5kIHZhbHVlcyBvZiB0aG9zZSBzYW1lIHJlbGF0aW9uc2hpcHMuXHJcblxyXG48cz5XZTwvcz4gU29jaW9sb2dpc3RzIGRlYWwgd2l0aCByZWFsLXRpbWUsIGxvZ2ljYWwgYW5kIGhpZXJhcmNoaWNhbCBuZXR3b3JrIG1hcHBpbmdzIHRoYXQgYXBwZWFyIGFyYml0cmFyeSwgeWV0IGFyZSBjaGFyYWN0ZXJpemVkIGJ5IGZpeGVkIHBhdHRlcm5zLiBUaGlzIGltcGxpZXMgYSBoaWdoZXIgbGV2ZWwgb2YgY29tcGV0ZW5jeSB0byBhY2N1cmF0ZWx5IGp1ZGdlIGEgcG9pbnQtb2YtdmlldyB3aXRob3V0IHRoZSBhYmlsaXR5IHRvIGRpcmVjdGx5IGNvbnN1bHQgbWFjaGluZSBsZWFybmluZy4gPGk+VGhpcyBpcyBhIENvZGUgb3IgQmUgQ29kZWQgbW9tZW50IGluIHRoZSBzY2llbmNlcy48L3A+XHJcblxyXG5cclxuXHJcbjxwPk5vIG90aGVyIGFjYWRlbWljIGZpZWxkIHRoYW4gc29jaW9sb2d5IGhhcyBhZHZhbmNlZCBpbnRvIHRoZSBkZXRhaWxzLCBhbmQgZW5kbGVzcyBuZXR3b3JrIHJhYmJpdC1ob2xlcyB0aGF0IGNoYXJhY3Rlcml6ZSBzb2NpZXRhbCBiZWhhdmlvci4gTm90IHVudGlsIHRoaXMgc2Vjb25kIG1pbGxlbmlhbCBkZWNhZGUgY291bGQgdGhlIG1hcnJpYWdlIG9mIExhcmdlIE51bWJlciBTdGF0aXN0aWNhbCBUaGVvcnlcclxuXHJcbmJlY29tZSBjb25zdW1hdGVkIHdpdGggdGhlIGJyaWxsaWFuY2Ugb2YgZWFybHkgMTkwMCYjMzk7cyBTb2Npb2xvZ2ljYWwgRnJlbmNoIE5ldHdvcmsgVGhlb3JpZXMsIGxpa2UgTWF1cmljZSBIYWxic3dhY2gmIzM5O3NcclxuXHJcbndvcmsgb24gdGhlIGNsZWFybHkgZGVmaW5lZCBuZXR3b3JrIHBhdHRlcm5zIG9mIGEgc29jaWV0eSYjMzk7cyBDb2xsZWN0aXZlIE1lbW9yeS48L3A+XHJcblxyXG5cclxuXHJcbjxwPk5vIG90aGVyIGFjYWRlbWljIGZpZWxkIGhhcyBjb2xsZWN0ZWQgYW5kIHJlZmluZWQga25vd2xlZGdlIG9uIG5ldHdvcmsgYXJiaXRyYXJpbmVzcywgc3VjaCB0aGF0IEVjb25vbWljJiMzOTtzICZxdW90O2lycmF0aW9uYWxcclxuXHJcbmJlaGF2aW9ycyZxdW90OyBhbmQgTWF0aGVtYXRpY2FsICZxdW90O2NvbXBsZXhpdHkgbW9kZWxzJnF1b3Q7IGRvIG5vdFxyXG5cclxuPGk+dG91Y2ggdG8gdGhlIGJvbmU8L2k+IHRoZSBtZWFuaW5nLCB0aGUgaW50ZXJzZWN0aW9uYWxpdHkgb2YgbmV0d29yayBhbmFseXNpcywgd2hpY2ggbXVzdCBpbmNvcnBvcmF0ZSBzaW11bHRhbmVvdXNcclxuXHJcbm5vZGUgY2hhbmdlcyAocGVyc29uIGdldHMgam9iIC9vci8gZG9lcyBub3QgZ2V0IGpvYiksIG5ldHdvcmsgY2hhbmdlcyAoQWxsIGdldCBqb2JzIC9vci8gb25seSAzIG9mIDE1IG5ldHdvcmsgZ3JvdXBzXHJcblxyXG5nZXQgam9icyksIGFuZCBtb3N0IGltcG9ydGFudGx5IHRoZVxyXG5cclxuPGk+cmVsYXRpb25zaGlwPC9pPiBjaGFuZ2VzIChhbGwgam9icyBhbHdheXMgdXNlZnVsIC9vci8gaGFsZiBvZiBqb2IgZ3JvdXBzIG5vIGxvbmdlciB1c2VmdWwpIGFjcm9zcyB0aW1lIGFuZCBmaXhlZC48L3A+XHJcblxyXG5cclxuXHJcbjxwPkZpbmUuIFNvLCB3aHkgaXMgU29jaW9sb2d5JiMzOTtzIG5ldHdvcmsgdGhlb3J5IHNvIHZhbHVhYmxlIGJleW9uZCBqdXN0IHRoZSBuZXR3b3JrIGluc2lnaHRzIGdsZWFuZWQgZnJvbSAxOXRoIGFuZFxyXG5cclxuMjB0aCBjZW50dXJpZXMmIzM5OyBuZXR3b3JrIHByb2JsZW1zPyBGb2xsb3c6IEV1cm9wZWFuIHNvY2lvbG9neSBjYW1lIG9mIGFnZSBpbiB0aGUgYW5hbG9nIHNvY2lhbCBlcmEsIHdoaWxlIE5vcnRoXHJcblxyXG5BbWVyaWNhbiBTb2Npb2xvZ3kgb25seSByZWNlbnRseSBjb21lIG9mIGFnZSAoUXVlYmVjIGluIHRoZSAxOTYwJiMzOTtzIFtwb3N0LTE5NjhdLCBVLlMuIGluIHRoZSAxOTkwJiMzOTtzW3Bvc3QtMTk5OV0sXHJcblxyXG5pbiB0aGUgZGlnaXRhbCBzb2NpYWwgZXJhLiBUaGVyZWZvcmUsIHRoZSBwcm9ibGVtLXNvbHZpbmcgcGF0dGVybnMgb2YgcGFzdCBzb2Npb2xvZ3kgYXJlIGluaGVyZW50bHkgc21hbGwtZGF0YSBhbmRcclxuXHJcbm1vcmUgcXVhbGl0YXRpdmUgYW5hbHlzaXMsIGFuZCB0aHVzIG9ubHkgU29jaW9sb2d5IGluY29ycG9yYXRlcyAmcXVvdDtodW1hbi1uZXNzJnF1b3Q7IGludG8gdGhlIGJpbGxpb24gcm93cyBhbmRcclxuXHJcbmNvbHVtbnMgb2YgcXVhbnRpdGF0aXZlLS1udW1iZXJzLW9ubHktLWFuYWx5c2lzLjwvcD5cclxuXHJcblxyXG5cclxuPHA+Rm9yIGV4YW1wbGUsIE94Zm9yZC1kZXZlbG9wZWQgUy5JLkUuTi5BLiBTb2Z0d2FyZSBhY2NvbXBsaXNoZXMgdGhpcyB0YXNrLiBTSUVOQS0tbmFtZWQgZm9yIFNpbXVsYXRpb24gSW52ZXN0aWdhdGlvblxyXG5cclxuZm9yIEVtcGlyaWNhbCBOZXR3b3JrIEFuYWx5c2lzLS1zb2Z0d2FyZSBjYWxjdWxhdGVzIHRoZSByZWFsLXRpbWUgdmFsdWVzLCBkaXJlY3Rpb24sIGFuZCBjb25kaXRpb25zIG9mIGVhY2ggcmVsYXRpb25zaGlwXHJcblxyXG4obGluaykgaW4gYSBuZXR3b3JrLCBzaW11bHRhbmVvdXNseSBhcyBlYWNoIG5vZGUsIG5ldHdvcmssIG9yIGFsdGVyLWxpbmsgY2hhbmdlcyBvciBpcyBjaGFuZ2VkOyB3aXRoIHRoaXMsIGl0IGlzXHJcblxyXG5wb3NzaWJsZSB0byBpc29sYXRlIGRpcmVjdGlvbmFsLCBjb25kaXRpb25hbFxyXG5cclxuPGk+aW5mbHVlbmNlIGNoYW5nZTwvaT4gaW4gcmVhbC10aW1lLiBSZWFsLXRpbWUgc291bmRzIGltcG9zc2libGUsIGhvd2V2ZXIsIHRoZSBTSUVOQSBkb2N1bWVudGF0aW9uXHJcblxyXG48c3VwID4yPC9zdXA+IGRlc2NyaWJlcyBpdHMgcHJvZ3JhbSBhbGdvcml0aG0gdG8gdGhlIHN0YXRpc3RpY2FsIGFuYWx5c2lzIG9mIG5ldHdvcmsgZGF0YSwgd2l0aCB0aGUgZm9jdXMgb24gc29jaWFsIG5ldHdvcmtzLjwvcD5cclxuXHJcblxyXG5cclxuPHA+QW4gZWFzeSBleGFtcGxlIHRvIGdyYXNwIHRoaXMgaXMgdGhlIGNvbmNlcHQgb2Ygd2hldGhlciBhIHBlcnNvblxyXG5cclxuPGk+c2VsZi1zZWxlY3RzIDwvaT4oZS5nLiwgZHVlIHRvIHN1YmNvbnNjaW91cyBsZWFuaW5ncykgaW50byBhIGdyb3VwIGFuZCB0aHVzIG1hdGNoZXMgdG8gZnJ1aXRpb24gdGhlIGdyb3VwJiMzOTtzXHJcblxyXG5iZWhhdmlvciB3aXRoIGxpdHRsZSBncm91cCBpbmZsdWVuY2U/IE9yIGRvZXMgdGhpcyBzYW1lIHBlcnNvbiBqb2luIGEgZ3JvdXAgYW5kIGVtdWxhdGVzIHRoZSBncm91cCYjMzk7cyBiZWhhdmlvcixcclxuXHJcbmJ5IHRoZSBncm91cCYjMzk7cyBpbmZsdWVuY2Ugb3ZlciB0aW1lLiBTb2Npb2xvZ2ljYWwgbmV0d29yayBhbmFseXNpcywgdXNpbmcgU25qZGVyJiMzOTtzIFNJRU5BIHNvZnR3YXJlLCBhY2hpZXZlc1xyXG5cclxudGhlIGltcG9zc2libGUgd2l0aCB0aGUgY2xvc2VkLCBkaXJlY3RlZCBncmFwaCBuZXR3b3JrcyB0aGF0IGNoYXJhY3Rlcml6ZSBibG9ja2NoYWluIHRlY2hub2xvZ3kuIFRoZSBuZXR3b3JrIGdyYXBoXHJcblxyXG5jYW4gYmUgaGVyZSB1bmRlcnN0b29kIGFzIGVudGlyZSAoY29tcGxldGUpIG5ldHdvcmtzIChpLmUsIHRoZSBibG9ja2NoYWluIGluIGl0cyBlbnRpcmV0eSB3aXRob3V0IGhhcmQgZm9ya3MpLCBub3RcclxuXHJcbmFzIHBlcnNvbmFsIChlZ29jZW50ZXJlZCkgbmV0d29ya3M6IFVzaW5nIHRoaXMgU0lFTkEgbW9kZWwgYWxsb3dzIGZvciB0aGUgbmVjZXNzYXJ5IGFzc3VtcHRpb25zIHRoYXQgYSBzZXQgb2Ygbm9kZXNcclxuXHJcbihzb2NpYWwgYWN0b3JzKSBpcyBnaXZlbiwgYW5kIGFsbCB0aWVzIChsaW5rcykgYmV0d2VlbiB0aGVzZSBub2RlcyBhcmUga25vd24gLSBleGNlcHQgcGVyaGFwcyBmb3IgYSBtb2RlcmF0ZSBhbW91bnRcclxuXHJcbm9mIG1pc3NpbmcgZGF0YTwvcD5cclxuXHJcblxyXG5cclxuPHA+SWYsIGFuZCBvbmx5IGlmLCB0aGlzIGxldmVsIG9mIGFuYWx5c2lzIG1heSBiZSBhY2hpZXZlZCwgdGhlIGJsb2NrY2hhaW4gZGV2ZWxvcG1lbnQgbWF5IGZvbGxvdyBhIGxpbmVhciwgZGlyZWN0ZWRcclxuXHJcbnBhdGggb2YgbWF0dXJpdHkgd2l0aCBzb2NpYWwgYW5kIHdvcmxkIG5lZWRzLiBVbnRpbCB0aGF0IHRpbWUsIHRoYXQgU29jaW9sb2d5IE5ldHdvcmsgVGhlb3Jpc3RzIGFyZSBjYWxsZWQgdXBvbixcclxuXHJcbmJsb2NrY2hhaW4gZGV2ZWxvcGVycyB3aWxsIGNvbnRpbnVlIHRvIGJhdCB0aGVpciBhcm1zIGluIHRoZSBkYXJrLCBzdHVtYmxpbmcgb3ZlciBhZ2FpbiB0aGUgc2FtZSBidWdzLiBTYWRseSwgdGhpc1xyXG5cclxuc2VtaS1vcGFxdWUgZnV0dXJlIGltcGxpY2F0ZXMgdGhlIHNhbWUgZmF0ZSBhcyB0aG9zZSB0aGF0IGF0dGVtcHQgdG8gdXNlIGJsb2NrY2hhaW4gZm9yIHRoZWlyIGN1cnJlbmN5LCBjb250cmFjdCxcclxuXHJcbmFuZCBvdGhlciBzb2NpZXRhbCBuZWVkcy0taW4gdGhpcyBjYXNlLCB0aGUgYmxpbmQgd291bGQgaW5kZWVkIGxlYWQgdGhlIGJsaW5kLjwvcD5cclxuXHJcblxyXG5cclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLlxyXG5cclxuPGEgaHJlZj1cImh0dHA6Ly93d3cuam91cm5hbHMudWNoaWNhZ28uZWR1L2RvaS9hYnMvMTAuMTA4Ni8yMjY1NTBcIiAgIHRhcmdldD1cIl9ibGFua1wiPiBodHRwOi8vd3d3LmpvdXJuYWxzLnVjaGljYWdvLmVkdS9kb2kvYWJzLzEwLjEwODYvMjI2NTUwPC9hPlxyXG5cclxuPGJyIC8+XHJcblxyXG48L3A+XHJcblxyXG48cD5cclxuXHJcbjIuXHJcblxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuc3RhdHMub3guYWMudWsvfnNuaWpkZXJzL3NpZW5hL1wiICB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly93d3cuc3RhdHMub3guYWMudWsvfnNuaWpkZXJzL3NpZW5hLzwvYT5cclxuXHJcbjwvcD5cclxuICBgXHJcbiAgKi9cclxuICB2YXIgYmxvZ3Bvc3QxNiA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VGhlcmUgd2FzIG9uY2UgYSB0aW1lIGZvciBBcHAgRGV2ZWxvcGVycyB0aGF0IG91ciBoYWJpdHMgZm9sbG93ZWQgb3VyIGlubmVyLXBoaWxvc29waGVycy0tYXMgYW4gRXN0ZWVtZWQgT3JkZXIgb2ZcclxuQ29kZXJzLS13ZSBoZWxkIG91cnNlbHZlcyBpbiB0aGUgaGlnaGVzdCByZWdhcmQgdG8gc2VwYXJhdGUgZm9ybSBmcm9tIGZ1bmN0aW9uLCBhbmQgc3R5bGUgZnJvbSBzdHJ1Y3R1cmFsIGRlc2lnbi5cclxuSGVuY2UsIGluIHRoZSBlYXJseSAyMDAwJiMzOTtzLCBhIHRyaS1wYXJ0aXRlLCBzZW5zaWJsZSB3b3JsZCBndWlkZWQgZXZlcnkgd2ViIGNvZGVyIHRvIGFiaWRlIGJ5IFRoZSBzY2FmZm9sZGluZ1xyXG5vZiBIVE1MLCBmdW5jdGlvbmFsaXR5IG9mIEphdmFTY3JpcHQsIGFuZCBzdHlsaW5nIG9mIENTUy4gQSBkZWNhZGUgbGF0ZXIsIHdlIG11c3QgdGhyb3cgb3V0IHRoaXMgYW50aXF1YXRlZCBkaXZpc2lvblxyXG5vZiBsYWJvciB3aXRoaW4gd2ViIGNvZGluZy48L3A+XHJcblxyXG48cD5MaWJyYXJ5IG1vZHVsYXJpemF0aW9uLCAodGhpbmsgSlF1ZXJ5LCBKU1gsIEJvb3RzdHJhcCwgZXRjLikgd2l0aGluIEphdmFzY3JpcHQgRVMxNiByZXZlYWxzIHRoYXQgbW9kdWxlcyBhbmQgY29tcG9uZW50c1xyXG5NdXN0IGhvbGQgdG9nZXRoZXIgQ1NTL0hUTUwvSlMsIHBhcnQgYnkgcGFydC4gU28sIGlmIGEgZGVjYWRlIGFnbyB0aHJlZSB0ZWFtcyBoYW5kbGVkIGh0bWwsIGpzLCBjc3MsIGl0IGlzIG5vdyByZXF1aXNpdGVcclxudG8gZGl2aWRlIHVwIDMgdGVhbXMgdG8gMyBjb21wb25lbnRzIChhIHRlYW0gZm9yIHRoZSBjYXJvdXNlbCB3aWRnZXQsIGEgdGVhbSBmb3IgdGhlIG5hdmlnYXRpb24gd2lkZ2V0cywgYW5kXHJcbjxpPlxyXG5lYWNoPC9pPiBvZiB0aGVzZSBjb21wb25lbnQgdGVhbXNcclxuPHN0cm9uZz5tdXN0PC9zdHJvbmc+IGJlIG1haW50YWluZWQgdG9nZXRoZXIsIG5vdCBzZXBhcmF0ZWx5LCB0aGUgbW9kdWxlJiMzOTtzIHJlcXVpcmVkIGh0bWwsIGpzLCBjc3MuPC9wPlxyXG5cclxuPHA+VGhpcyBtZWFucyB0aGF0IHRoZSBuZXcgRGl2aXNpb24gb2YgTGFib3VyIGNhbiBubyBsb25nZXIgZm9sbG93IHBhc3QgcGF0dGVybnMgZnJvbSA1IHllYXJzIGFnby4gT3RoZXJ3aXNlLCBhbnkgYW5kXHJcbmFsbCBjb2Rpbmcgd2lsbCBuZWNlc3NhcmlseSBiZWdpbiB0byAmIzM5O3JlaW52ZW50IHRoZSB3aGVlbC4mIzM5OyBUaGlzIGlzIGJlY2F1c2UgYW55IG1vZHVsZSwgYW55IGxpYnJhcnkgeW91IGdvXHJcbnRvLCB3aWxsXHJcbjxpPmFscmVhZHk8L2k+IGhhdmUgaXRzIEhUTUwgcHJlLWNvbmZpZ3VyZWQsIEpTIHByZS1jb25maWd1cmVkLCBDU1MgcHJlLWNvbmZpZ3VyZWQuIFRodXMsIGF0dGVtcHRzIHRvIGV4dHJpY2F0ZSBuZXdcclxuY3NzIGZyb20gb25lIG1vZHVsZSB0byBhbm90aGVyIChvciB3b3JzZSB5ZXQsIHNoYXJpbmcgY3NzIG9mIG1vZHVsZXMpLCB3aWxsIG9ubHkgaW52aXRlIGV2ZW50dWFsIG1pc2VyeSwgYWxtb3N0XHJcbmluc3RhbnRseSBzZXR0aW5nIGJvb2J5IHRyYXBzIGZvciB0aGUgbmV4dCBjb2RlcnMgdXBvbiBhcnJpdmFsLjwvcD5cclxuXHJcbjxwPlNvLCB3aGVyZSBpcyB0aGUgY3JlYXRpdml0eT8gV2hlcmUgaXMgdGhlIG9yaWdpbmFsaXR5IHRoZW4/IEl0IGlzIG5vdCBnb25lLiBJdCBoYXMgZXZvbHZlZCB0byBhIGhpZ2hlciBsZXZlbCBvZiBhYnN0cmFjdGlvbixcclxubGVhdmluZyB0byBhdXRvbWF0aW9uIHRoZSBib3Jpbmcgc3R1ZmYuIFNvLCBpZiBWYW5pbGxhIEpTIGlzIGNvbnNpZGVyZWQgbWFscHJhY3RpY2UgaW4gdGhlIG1vZGVybiB3b3JsZCwgYW5kIGlmXHJcbmFkLWhvYyBKUXVlcnkgaXMgbW9ja2VkIGFuZCBzY29mZmVkIGF0IGJ5IFJlYWN0IGNvZGVycywgdGhlbiB3aGVyZSBpcyBjcmVhdGl2aXR5PyBJZiB5ZXN0ZXJkYXkmIzM5O3MgY3JhZnQgd2FzIHRoZVxyXG5ob2lzdGluZyBvZiAxNSBqYXZhc2NyaXB0IGZ1bmN0aW9ucyBvbiBlYWNoIHBhZ2UsIHRoZSBOZXcgQXJ0IG9mIG1vZHVsYXIgY29kaW5nIGlzIGFraW4gdG8gYSBnYW1lIG9mIFRldHJpcy4gUGFydFxyXG5ieSBwYXJ0LCBtb2R1bGUgYnkgbW9kdWxlLCB0aGUgbW9kZXJuIGNvZGVyIG9wZW4tc291cmNlIHdpbmRvdy1icm93c2VzIGFuZCB3aW5kb3ctc2hvcHM7IGdvZXMgaG9tZSwgYW5kIGN1dHMgYW5kXHJcbnBhc3RlcywgYW5kIGZvbGRzIGFuZCBjbGlwcywgdGhlbiBhc3NlbWJsZXMgYW5kIGhhbmdzIHRvIGRyeS4gRG8gUHl0aG9uIHByb2dyYW1tZXJzIHJld3JpdGUgZWFjaCBwYXJ0aWN1bGFyIG1vZHVsZVxyXG5kZWZpbml0aW9uPyBUaGF0JiMzOTtzIGFic3VyZC4gRXF1YWxseSBhYnN1cmQgaXMgdGhlIGphdmFzY3JpcHQgcHJvZ3JhbW1lciB0aGF0IHJld3JpdGVzIGZyb20gc2NyYXRjaCB0aGVpciBtb2R1bGVzLjwvcD5cclxuXHJcbjxwPlRoZSBlc3RlZW1lZCBPcmRlciBvZiBKYXZhU2NyaXB0IENvZGVycyBtdXN0IHdha2UgdXAsIGFuZCByZWdhaW4gaXRzIHdvcmstbG9hZCBiYWxhbmNlIGluIHRoaXMgbmV3IGFnZS0tYW4gYWdlIHRoYXRcclxuZWFjaCB5ZWFyIHNpbmNlIDIwMTQsIHRoZSBKYXZhU2NyaXB0IGxhbmd1YWdlIGlzIHJld3JpdHRlbiwgZWFjaCB5ZWFyIG5vdywgaW4gYm90aCBzeW50YWN0aWMgc3VnYXIgYW5kIGFsc28gZnVuZGFtZW50YWxcclxuc3RydWN0dXJlLS1lc3BlY2lhbGx5IHRoZSBpbXBvcnRpbmcgYW5kIGV4cG9ydGluZyBvZiBtb2R1bGVzLiBUaGVyZWZvcmUsIHBoaWxvc29waGljYWwgSG9ub3IgYmVob292ZXMgZWFjaCBvZiB1c1xyXG50byBhIGhpZ2hlciBjb21wbGV4aXR5LCBhbmQgYSBuZXcgY29tbWl0bWVudCB0bywgdGhlICZxdW90O1NlcGFyYXRpb24gb2YgQ29uY2VybnMuJnF1b3Q7IFdlIGNhbiBhbGxvdyBvdXJzZWx2ZXNcclxuYSBicmVhaywgdGhhbmtmdWwgZm9yIFByb2dyZXNzLCBhIHByb2dyZXNzIGJ5IHdoaWNoIHdlIG11c3RcclxuPGk+U3RhbmQgb24gdGhlIFNob3VsZGVycyBvZiBHaWFudHM8L2k+LCBhbmQgQ29kZS1DcmVhdGUhPC9wPlxyXG4gIGBcclxuICB2YXIgYmxvZ3Bvc3QxNSA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RmFjZWJvb2sgU2NhbmRhbHNcclxuPHN1cD4xPC9zdXA+IG9mIHJlY2VudCBtb250aHMgaGF2ZSBkZW1vcmFsaXplZCB0aGUgbGVhZGVyc2hpcCBmb3IgYSByb2xlIG9mIG1pc2luZm9ybWF0aW9uIGluIHRoZSBUZWNoIEFnZSwgaG93ZXZlciBJXHJcbmNoYXJnZSBNYXJrIFp1Y2tlcmJlcmcmIzM5O3MgaW5ub2NlbmNlXHJcbjxpPm5vdDwvaT4gYmVjYXVzZSBhbGwgb2YgdXMsIGFzIGEgc29jaWV0eSwgd2VyZSBlcXVhbGx5IHdhcm5lZC4gUmF0aGVyLCBhcmJpdHJhcnkgbWF0aGVtYXRpY2FsIGZvcmNlcyBjcmVhdGVkIGFibm9ybWFsLFxyXG5uZXZlci1iZWZvcmUtc2VlbiBuZXR3b3JrIHN0cnVjdHVyYWwgZGVuc2l0eSBhbmQgc3ltbWV0cnkgcGF0dGVybnMuIFRlY2hub2xvZ2ljYWwgc2hpZnRzIHdlcmUgc28gZWZmaWNpZW50IGF0IG11bHRpcGx5aW5nXHJcbmFuZCBleGFjZXJiYXRpbmcgbWlzaW5mb3JtYXRpb24gYmVjYXVzZSBhIGN1cmlvdXMgc29jaW9sb2dpY2FsIG5ldHdvcmsgcGhlbm9tZW5vbiByZW5kZXJlZCBwYXJ0cyBvZiBvdXIgZGFpbHkgc29jaWFsXHJcbmxlYXJuaW5nIGFuZCBhY2N1bHR1cmF0aW5nIHByb2Nlc3MgdG8gbmV0d29yayBmb3JjZXMgb3V0IG9mIG91ciBvd24gY29udHJvbC48L3A+XHJcblxyXG48cD5BIEphbnVhcnkgMjAxNiBBbWVyaWNhbiBTb2Npb2xvZ3kgQXNzb2NpYXRpb24gTmV3c2xldHRlciBFZGl0b3JpYWxcclxuPHN1cD4gMjwvc3VwPiBmcm9tIFNhbGx5IFQuIEhpbGxzbWFuLCBpbiB3aGljaCBzaGUgZXhwbGFpbmVkIGhvdyB0aGUgc29jaWFsIG1lY2hhbmlzbXMgb2Ygb3VyIG93biBtaXNpbmZvcm1hdGlvbiB3ZXJlXHJcbm5vdCBlbnRpcmVseSB3aXRoaW4gb3VyIG93biBjb250cm9sIHRvIHJlc2lzdC4gSW4gZmFjdCwgdGhlIGFyYml0cmFyeSAob2Z0ZW4gcmFuZG9tKSBzb2NpYWwgc3RydWN0dXJhbCBjaGFuZ2VzIGZyb21cclxuaGlnaGVyIHNvY2lhbC1tZWRpYSBob3VycywgY3JlYXRlIGFuIGFyYml0cmFyeSBzb2NpYWwgbmV0d29yayBzdHJ1Y3R1cmUgd2hvc2UgbGlua3MgKGluIHRoZWlyIGNvbnRlbnQgYW5kIGluZmx1ZW5jZSlcclxuYmVnaW4gdG8gZG9taW5hdGUgb3ZlciBub2RlcyAoZWFjaCBvZiB1cykuIEluIG90aGVyIHdvcmRzLCB0aGUgc3dheSBvZiB0cmVuZHMgYW5kIG9waW5pb25hdGVkIGNyaXRpY2FsIHRob3VnaHQgYmVjb21lc1xyXG5kb21pbmF0ZWQgYnkgdGhlIHJlbGF0aW9uc2hpcHMsIGUuZy4sIHRoZSAmcXVvdDtsaWtlcyZxdW90OyBhbmQgJnF1b3Q7c2hhcmVzJnF1b3Q7LCBsZWFkaW5nIHRvIGEgc3RhdGlzdGljYWxseSBuYXR1cmFsXHJcbnByb3BlbnNpdHkgdG93YXJkIGhvbW9nZW5laXR5LS1hLmsuYS4gZ3JvdXAtdGhpbmsuIFRoZSBtZWNoYW5pc20gaXMgYWtpbiB0byBwZWFjZWZ1bGx5IHN3aW1taW5nIGNsb3NlIGFuZCBwYXJhbGxlbFxyXG50byB0aGUgY29hc3RsaW5lLCBhbmQgKGR1ZSB0byByYW5kb20gY29hc3RhbCBmbG9vciBzdHJ1Y3R1cmUpLCBhIHJpcC10aWRlIHN1ZGRlbmx5IHNoaXBzIHlvdSBmYXIgb3V0IHRvIHNlYS0tYSBmYXRhbFxyXG5hbmQgdHJhZ2ljIGZhdGUgcmVuZGVyaW5nIGV4cGVyaWVuY2VkIHN3aW1tZXJzIG91dCBvZiB0aGVpciBvd24gY29udHJvbC4gU2FtZSBwcmluY2lwbGUgd2l0aCBhbiBhcmJpdHJhcnlcclxuPGk+dW5kZXJseWluZyBhbmQgdW5zZWVuPC9pPiBuZXR3b3JrIHN0cnVjdHVyZS48L3A+XHJcblxyXG48cD5PdXIgc29jaWFsIG5ldHdvcmsgc3RydWN0dXJlcyBhbHdheXMgYXJlIHByb25lIHRvIGNvbnRpbnVhbCBzaGlmdCwgYW5kIHNvIHRoZSB1c3VhbCAmcXVvdDtpbnRlcnJ1cHRpb25zJnF1b3Q7IHRoYXRcclxucHJldmlvdXNseSBzdG9wcGVkIHRoaXMgaW53YXJkIHNoaWZ0IHNvb24gYmVnYW4gdG8gZGlzYXBwZWFyLiBIaWxsc21hbiBleHBsYWluczo8L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+TGllcywgaGFsZi10cnV0aHMsIGFuZCBtaXNpbmZvcm1hdGlvbiBzcHJlYWQgc28gcmFwaWRseSBhY3Jvc3MgdGhlIHB1YmxpYyB0aHJvdWdoIGRpZ2l0YWwgY29tbXVuaWNhdGlvbiB0aGF0IHRoZVxyXG50aW1lc3BhbiBmb3IgdGhvdWdodGZ1bCwgZWZmZWN0aXZlIGNvcnJlY3Rpb24gb3IgcmVidXR0YWwgaXMgaW5maW5pdGVzaW1hbC4gQmVjYXVzZSBvZiBjb25maXJtYXRpb24gQmlhcywgbWlzaW5mb3JtYXRpb25cclxuYW5kIG91dHJpZ2h0IGxpZXMgcXVpY2tseSBzdHJlbmd0aGVuIHByZWNvbmNlaXZlZCB0cnV0aHMgb3IgcHJlLWhlbGQgYmVsaWVmcyB0aGF0IGFyZSBhbHJlYWR5IGhhcmQgdG8gY2hhbmdlLjwvcD5cclxuXHJcbjxwPlRoZXJlZm9yZSwgZXZlbiB0aG91Z2ggd2UgYWxsIGhhdmUgYmVlbiBwb2ludGVkbHkgd2FybmVkLFxyXG48aT4gbm9uZSBvZiB1czwvaT4gd2l0aG91dCBhZHZhbmNlZCBzb2Npb2xvZ2ljYWwgYW5hbHlzaXMgc2tpbGxzIGNvdWxkIHVuZGVyc3RhbmQgdGhhdCBhIGN1cmlvdXMgbmV0d29yayBwaGVub21vbmVub24tLXVsdGltYXRlbHlcclxuZHJpdmVuIGJ5IHNvbWUgYXJiaXRyYXJ5IG1hdGhlbWF0aWNhbCBjYWxjdWxhdGlvbiBpbnZvbHZpbmcgc2l6ZSwgZGVuc2l0eSwgc3ltbWV0cnksIGNvbmRpdGlvbmFsIGluZmx1ZW5jZXMsIGFuZFxyXG50aGUgc3RyZW5ndGggb2YgdGllcyBvdXR3ZWlnaGluZyBuZXR3b3JrIG5vZGVzLiBGb3IgdGhlIHJlYXNvbnMgb2YgdGhlc2UgZmFjdG9ycywgb3VyIHNvY2lhbCBpbmNsaW5hdGlvbnMgd2VyZVxyXG48aT5vdXQgb2Ygb3VyIGNvbnRyb2w8L2k+IC0tIG5vLCBidXQgcmVhbGx5LCB0aGlzIHRpbWUgdGhleSB3ZXJlITwvcD5cclxuXHJcbjxwPkFuZCBzbywgd2UgY2FuIGxlYXJuIGZyb20gU29jaW9sb2d5IHdoYXQgc3RlcHMgdG8gdGFrZSBpbiBvcmRlciB0byBjb3VudGVyYWN0IHJhbmRvbSwgYnV0IHJpc2t5LCBuZXR3b3JrIHBoZW5vbWVuYVxyXG4tLSBiZWNhdXNlIG5vYm9keSBsaWtlcyB0byBnbyBmb3IgYSBzd2ltIGF0IHRoZSBiZWFjaCwgYW5kIHVud2l0dGluZ2x5IGdldCBzaGlwcGVkIG91dCB0byBzZWEhPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiBXaXJlZCBNYWdhemluZVxyXG48aT5JbnNpZGUgdGhlIFR3byBZZWFycyB0aGF0IFNob29rIEZhY2Vib29rLS1hbmQgdGhlIFdvcmxkPC9pPiAoRmVicnVhcnksIDIwMTgpXHJcbjxhIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvaW5zaWRlLWZhY2Vib29rLW1hcmstenVja2VyYmVyZy0yLXllYXJzLW9mLWhlbGxcIlxyXG50YXJnZXQ9XCJfYmxhbmtcIj4gV2lyZWQgTWFnYXppbmUsIDwvYT5cclxuPGJyIC8+XHJcbjxiciAvPiAyLkFTQVxyXG48aT5Gb290bm90ZXM8L2k+LiAoSmFudWFyeSwgMjAxNilcclxuPGEgaHJlZj1cImh0dHA6Ly93d3cuYXNhbmV0Lm9yZy9mb290bm90ZXMvamFuMTYvaW5kZXguaHRtbFwiIHRhcmdldD1cIl9ibGFua1wiPiB3d3cuYXNhbmV0Lm9yZy9mb290bm90ZXMvamFuMTYvPC9hPlxyXG48L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDE0ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5PdGhlciB0aGFuIGNvbGxlZ2UgcHJlLW1lZCBzdHVkZW50cywgZmV3IGtub3cgdGhlIE1DQVQgZXhhbS0tdGhlIGdhdGVrZWVwZXIgb2YgVS5TLiAmYW1wOyBDYW5hZGlhbiBNZWRpY2FsIFNjaG9vbHMtLXVuZGVyd2VudFxyXG5hIG1ham9yIG1vZGlmaWNhdGlvbiBpbiAyMDE1LlxyXG48c3VwPjI8L3N1cD4gTXVjaCBkZWVwZXIgdGhhbiBCaW9sb2dpY2FsIGFuZCBUZWNobm9sb2dpY2FsIHVwZGF0ZXMsIG1ham9yIHNlY3Rpb25zIHdlcmUgYWRkZWQgYW5kL29yIGV4cGFuZGVkIGluY2x1ZGluZ1xyXG50aGUgU29jaWFsLCBQeXNjaG9sb2dpY2FsIGFuZCBCaW9sb2dpY2FsIGZvdW5kYXRpb25zIG9mXHJcbjxpPmJlaGF2aW9yPC9pPi4gTmFtZWQgdGhlXHJcbjxpPkhlYWx0aCBTeXN0ZW1zIFNjaWVuY2U8L2k+XHJcbjxzdXA+Mzwvc3VwPiwgdGhlIEFtZXJpY2FuIE1lZGljYWwgQXNzb2NpYXRpb24mIzM5O3MgbW9kZXJuLCBob2xpc3RpYyBhcHByb2FjaCBhcnRpY3VsYXRlcyBvdXRjb21lcy1iYXNlZCBtZWFzdXJlcyBmb3JcclxuaGVhbHRoeSBsaXZpbmcgYW5kIGRpc2Vhc2UgcHJldmVudGlvbiBlZmZvcnRzLiBZb3UgY291bGQgc2F5IHRoZSBBTUEgaXMgaW5kZWVkLFxyXG48aT53b2tlPC9pPi48L3A+XHJcblxyXG48cD5CdXQgcmVhbGx5LCB3aGF0JiMzOTtzIHRoZSBkaWZmZXJlbmNlIGFuZCB3aHkgd291bGQgd2UgY2FyZT8gQW5kLCB3aG8gZG9lc24mIzM5O3Qga25vdyB0aGF0IGFuIGFwcGxlLWEtZGF5IGtlZXBzXHJcbnRoZSBkb2N0b3IgYXdheT8gRHIuIEplZmZyZXkgQm9ya2FuLCBNRCwgUEhEIG9mIEJyb3duIFVuaXZlcnNpdHkmIzM5O3MgV2FycmVuIEFscGVydCBNZWRpY2FsIFNjaG9vbCwgZXhwbGFpbnMgdGhlXHJcbmV2aWRlbnQgcm9sZSBvZiBhbGwgdGhvc2UgdW5ub3RpY2VkIHNvY2lhbCBpbnRlcmFjdGlvbnMgaW52b2x2ZWQgaW4gb2J0YWluaW5nIGFuZCBjb25zdW1pbmcgdGhhdCBhcHBsZS4gRnVydGhlcixcclxudGhlIHNwYXRpYWwgYW5kIGVjb25vbWljXHJcbjxpPmF2YWlsYWJpbGl0eTwvaT4gb2YgdGhhdCBhcHBsZSBhbHNvIHBsYXlzIGEgcm9sZSBpbiBrZWVwaW5nIHRoZSBkb2N0b3IgYXdheS4gQm9ya2FuIGV4cGxhaW5zOjwvcD5cclxuXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5JdCYjMzk7cyB0aW1lIGZvciB1cyB0byB0YWtlIGEgbGVhcCBmb3J3YXJkIGluIGVkdWNhdGluZyBwaHlzaWNpYW5zIGZvciB0aGUgaGVhbHRoIGNhcmUgZGVsaXZlcnkgbW9kZWxzIG9mIHRoZSBmdXR1cmUmbWRhc2g7dGhvc2VcclxudGhhdCBhaW0gdG8gaW1wcm92ZSBub3QganVzdCB0aGUgaGVhbHRoIG9mIHRoZSBpbmRpdmlkdWFsIHBhdGllbnQgYW5kIHRoZWlyIGZhbWlseSwgYnV0IGFsc28gdGhlIGNvbW11bml0eSBhbmQgdGhlXHJcbnBvcHVsYXRpb24uXHJcbjxzdXA+NDwvc3VwPlxyXG48L3A+XHJcblxyXG48cD5XaGF0LCB0aGVuLCBzcGVjaWZpY2FsbHksIGFyZSB0aGUgbWVjaGFuaXNtcyB0aGF0IGEgY29tbXVuaXR5IG5ldHdvcmsmIzM5O3MgYWdncmVnYXRlZCBoZWFsdGggbWF5IGJlIGluZXh0cmljYWJseVxyXG50aWVkIHVwIHdpdGhcclxuPGk+b3VyIG93bjwvaT4gaW5kaXZpZHVhbCBoZWFsdGg/IEluIHNob3J0LCB0aGV5IGFyZSB0aGUgc2hhcmluZyBvZiBoZWFsdGgtcHJvbW90aW5nIHJlc291cmNlcywgdGltZWx5IGFzc2lzdGFuY2UsXHJcbmhlYWx0aC1wcm9tb3RpbmcgaW5mb3JtYXRpb24gY2hhbm5lbHMgLS0gYWxsIHRoaXMsIGFtb25nIHRoZSBjb3VudGxlc3MgcGVya3Mgb2YgYSBoZWFsdGh5IHNvY2lhbCBjaXJjbGUhPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJjaXRhdGlvbnNcIj4xLlxyXG48YSBocmVmPVwiaHR0cDovL3d3dy5ncmVla21lZGljaW5lLm5ldC93aG9zX3doby9UaGVfSGlwcG9jcmF0aWNfT2F0aC5odG1sXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VGhlIE9hdGggb2YgSGlwcG9jcmF0ZXM8L2E+XHJcbjxiciAvPiAyLlxyXG48YSBocmVmPVwiaHR0cHM6Ly9zdHVkZW50cy1yZXNpZGVudHMuYWFtYy5vcmcvYXBwbHlpbmctbWVkaWNhbC1zY2hvb2wvYXJ0aWNsZS9jaGFuZ2luZy1tY2F0LWV4YW0vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VGhlIDIwMTUgQUFNQSBDaGFuZ2VzIHRvIHRoZSBNZWRpY2FsIENvbGxlZ2UgQWRtaXNzaW9ucyBUZXN0PC9hPlxyXG48YnIgLz4gMy5cclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYS1hc3NuLm9yZy9lZHVjYXRpb24vdGVhY2hpbmctbmV3LWNvbnRlbnQtaGVhbHRoLXN5c3RlbXMtc2NpZW5jZVwiIHRhcmdldD1cIl9ibGFua1wiPkFtZXJpY2FuIE1lZGljYWwgQXNzb2NpYXRpb24mIzM5O3NcclxuPGk+VGVhY2hpbmcgTmV3IENvbnRlbnQgSGVhbHRoIFN5c3RlbXMgU2NpZW5jZTwvaT5cclxuPC9hPlxyXG48YnIgLz4gNC5cclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmFtYS1hc3NuLm9yZy9lZHVjYXRpb24vdGVhY2hpbmctbmV3LWNvbnRlbnQtaGVhbHRoLXN5c3RlbXMtc2NpZW5jZVwiIHRhcmdldD1cIl9ibGFua1wiPmliaWQuPC9hPlxyXG48L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDEzID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIiBzdHlsZT1cImNvbG9yOmdyZWVuO1wiPkdpdmVuIHRoYXQgYSBjb21tdW5pdHkgbmV0d29yayYjMzk7cyBhZ2dyZWdhdGVkIGhlYWx0aCBpcyBpbmV4dHJpY2FibHksIGFuZCBzeW1tZXRyaWNhbGx5LCB0aWVkIHVwIHdpdGhcclxuICA8aT5vdXIgb3duPC9pPiBpbmRpdmlkdWFsIGhlYWx0aCwgYXBwLWRldmVsb3BlcnMgbWF5IGRlc2lnbiBhY3Rpdml0eS0gYW5kIGNvbW11bmljYXRpb24tYmFzZWQgYXBwcyBtb3JlIHJlc3BvbnNpYmx5LFxyXG4gIGFuZCBpbiB0b3VjaCB3aXRoIG1vZGVybiBoZWFsdGhjYXJlIHJlY29tbWVuZGF0aW9ucy4gQWZ0ZXIgYWxsLCBpZiB0aGUgU2FpbnRseSBNYXJrIFp1Y2tlcmJlcmcmIzM5O3MgY29tbXVuaWNhdGlvbi1cclxuICBhbmQgYWN0aXZpdHktYmFzZWQgYXBwIGluYWR2ZXJ0YW50bHkgbGVkIHRvIG5vdmVsLCBhbmQgZGVlcGx5IGNvbnNlcXVlbnRpYWwsIGVmZmVjdHMsIHRoZW4gLi4uPC9wPlxyXG4gIDxzcGFuIGNsYXNzPVwiYWxlcnRcIj4qIEdpdmVuIHRoZSBUcmFnaWMgRXZlbnRzIGluIHRoZSBTY2hvb2wgU2hvb3RpbmcgaW4gRmxvcmlkYSwgSSBmZWx0IGEgdG9waWMgb2YgbW9yZSBncmF2aXR5IHdhcyBpbiBvcmRlciAuLi4gOiggPC9zcGFuPlxyXG4gIFxyXG4gIDxoNiBjbGFzcz1cImNoYXB0ZXJudW1iZXJcIj5GZWIgMTQsIDIwMTg8L2g2PlxyXG4gIFxyXG4gIDxoNiBjbGFzcz1cImNoYXB0ZXJudW1iZXIgZGFpbHl0aXRsZVwiPkEgTmV3IEtlcm5lbCwgYW5kIHRoZSBNYW5pZmVzdGF0aW9uIG9mIGEgVHdvLUh1bmRyZWQgWWVhciBQcm9ibGVtIG5hbWVkXHJcbiAgPGk+QW5vbWllPC9pPlxyXG4gIDwvaDY+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkdpdmVuIHRoZSB0cmFnaWMgZXZlbnRzIGF0IGEgRmxvcmlkYSBzY2hvb2wgb3ZlciBWYWxlbnRpbmUmIzM5O3MgRGF5LCAyMDE4LCB3aG8gY2FuIHdyaXRlIGFib3V0IEZpdGJpdHM/IFNvLCB0aG91Z2h0c1xyXG5hbmQgc3ltcGF0aHkgZm9yIHRob3NlIHN0dWRlbnRzIHRvZGF5IHRoYXQgZW5kdXJlZCB0aGlzIGhvcnJvci4gMTkgeWVhcnMgYWZ0ZXIgdGhlIGZpcnN0LW9mLWl0cy1raW5kIHNjaG9vbCBzaG9vdGluZyxcclxud2UgYXMgYW4gQW1lcmljYW4gc29jaWV0eSBoYXZlIG5vdCBiZWNvbWUgJiMzOTtudW1iJiMzOTsgdG8gdGhlc2UgZXZlbnRzLiBJdCBodXJ0cyBhcyBtdWNoIGFzIGl0IGRpZCBpbiAxOTk5LjwvcD5cclxuXHJcbjxwPkRhcm4gdGhhdCBpbm5vY3VvdXMgU3ByaW5nIGRheSBpbiAxOTk5LCB3aGVuIHdlIGhlYXJkIHRoZSBtb3N0IGFic3VyZCBuZXdzLS0gc3R1ZGVudHMgYXR0YWNrZWQgdGhlaXIgb3duIGNvbGxlYWd1ZXNcclxuYXQgQ29sb21iaW5lPyBJbiBteSBibG9nIHBvc3QgZnJvbSBKYW51YXJ5IDEwLCBJIHdyb3RlIHRoYXQgQW1lcmljYW4gU29jaW9sb2d5LCBhbG9uZyB3aXRoIFF1JmVhY3V0ZTtiZWMsIGNhbWUgb2ZcclxuYWdlIG11Y2ggbGF0ZXIgdGhhbiBFdXJvcGVhbiBTb2Npb2xvZ3kuIFRoZSBwYXN0IDUwIHllYXJzJiMzOTsgc29jaWFsIGNoYW5nZXMgYW5kIG5ldyBwcm9ibGVtcyBhcmUgZ2VuZXJhbGx5IGF0cnJpYnV0ZWRcclxuZm9yIHRoZSBpbmNyZWFzaW5nIGRlbWFuZCBmb3Igc29jaW9sb2dpY2FsIGV4cGVydGlzZSBhZnRlciAxOTk5LCBhZnRlciBhIHNpbmd1bGFyLCBzZW5zZWxlc3MgdHJhZ2VkeSBvZiBhIHNjaG9vbFxyXG5zaG9vdGluZy0tdGhpcyBldmVudCwgbGlrZSBhIHNtYWxsIGtlcm5lbCBvZiBzb2NpZXRhbCBkZXNwZXJhdGlvbiBmb3IgYSBzb2x1dGlvbi0tbGVkIHRvIGEgZmx1cnJ5IG9mIHNlbGYtcHJvZmVzc2VkXHJcbnNvY2lvbG9naXN0cyAmYWdyYXZlOyBsYSBNaWNoYWVsIE1vb3JlJiMzOTtzIENvbG9tYmluZSwgYW5kIG90aGVyIHNvY2lhbC1yZXNwb25zaWJpbGl0eSB0aGVtZWQgc29jaWFsIGNvbnNjaW91c25lc3MuXHJcblNvIGZhciwgb25seSBtdXR1YWxseSBpbmNvbXBhdGlibGUgc29sdXRpb25zLiBUaGUgcHJvYmxlbSwgaG93ZXZlciwgaXMgbm90IG5ldywgb25seSB0aGUgbWFuaWZlc3RhdGlvbiBvZiBpdC48L3A+XHJcblxyXG48cD5TdWljaWRlIHJhdGVzIGluIDE5dGggY2VudHVyeSBGcmFuY2UsIGRpc3Byb3BvcnRpb25hdGVseSBoaWdoLCBhbHNvIHNlcnZlZCBhcyBhIHN5bXB0b21hdGljIG1hbmlmZXN0YXRpb24gb2YgdGhlXHJcbnNhbWUgcHJvYmxlbSwgY2FsbGVkXHJcbjxpPkFub21pZS48L2k+XHJcbjxzdXA+MTwvc3VwPiBUaGUgdGVybSxcclxuPGk+QW5vbWllPC9pPiwgY29pbmVkIGJ5IEVtaWxlIER1cmtoZWltIGluIHRoZSBsYXRlIDE4MDAmIzM5O3MsIGNhcHR1cmVkIHRoZSBzZW5zZSBvZiBpbnN0YWJpbGl0eSwgY3VsdHVyYWwgYW5kIG1vcmFsXHJcbnJlbGF0aXZpc20gdGhhdCB1bmRlcm1pbmVkIGEgc2hhcmVkIHNlbnNlIG9mIG1lYW5pbmcuIFN1aWNpZGVzLCB3ZWVrLWFmdGVyLXdlZWssIG1vbnRoLWFmdGVyLW1vbnRoPyBJbiAxODk3IEZyYW5jZSxcclxubm9vbmUgaGFkIGV2ZXIgc2VlbiBpdCBiZWZvcmUtLWF0IHN1Y2ggcmF0ZXMtLWFuZCBwZW9wbGUgd2FudGVkIGFuc3dlcnMuIEFsYXMsIGEga2VybmVsIG9mIHNvY2lhbCBkZXNwZXJhdGlvbiBsZWFkaW5nXHJcbnRvIGlucXVpcnkuPC9wPlxyXG5cclxuPHA+UGVvcGxlIHdhbnRlZCB0byBrbm93IHdoeSBzbyBtYW55IGluIHRoZSBwb3B1bGF0aW9uIHJlc3BvbmRlZCBuZWdhdGl2ZWx5IHRvIHRoZSByYXBpZCBjaGFuZ2VzLCB1cmJhbml6YXRpb24gKERyZWFkZnVsXHJcbmZhY3RvcnkgY29uZGl0aW9ucyAmYWdyYXZlOyBsYVxyXG48aT5UYXlsb3Jpc20mIzM5O3M8L2k+IGNhbGN1bGF0ZWQgZWZmaWNpZW5jeSkgbmV3IHRlY2hub2xvZ2llcywgaS5lLiBlbGVjdHJpY2l0eSwgcmFpbHJvYWRzLCBzdGVhbSBlbmdpbmVzOyB0aGVzZSBjcmVhdGVkXHJcbmFuIGFyYml0cmFyaWx5IG5ldyB3b3JsZCwgdmVyeSBzdWRkZW5seS4gU3VkZGVubHksIGxpa2UgdHJ5aW5nIGZvciB0aGUgZmlyc3QgdGltZSBhIHJvbGxlci1jb2FzdGVyLCB3aGVuIGFsbCB5b3UmIzM5O3ZlXHJcbmV2ZXIga25vd24gaGFzIGJlZW4gdGhlIGNhcm91c2VsLiBTbywgd2Ugc2VlIHRlY2hub2xvZ3kmIzM5O3Mgcm9sZSBmb3Igd2VsbCBvciBmb3IgaWxsLCBvdXIgam9iIGlzIHRvIHVuZGVyc3RhbmRcclxuaG93IHRvIGRpYWwtaW4gdGhlIHRlY2ggc3BlY3MgbmVjZXNzYXJ5IHRvIGtlZXAgc29jaWV0eSBzbWlsaW5nIG9uIHRoaXMgcm9sbGVyIGNvYXN0ZXIgdGhyb3VnaCBhbm90aGVyLCB5ZXQgbm90XHJcbmFsdG9nZXRoZXIgbmV3LCB0ZWNobm9sb2dpY2FsIHRocmlsbC1yaWRlLjwvcD5cclxuXHJcbjxwPjEuXHJcbjxhIGhyZWY9XCJodHRwczovL3d3dy5yZXNlYXJjaGdhdGUubmV0L3B1YmxpY2F0aW9uLzIyODE3MzkxMV9UaGVfU29jaW9sb2d5X29mX1N1aWNpZGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj4xODk3LCBTdWljaWRlLCAmRWFjdXRlO21pbGUgRHVya2hlaW0uPC9hPlxyXG48L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDEyID0gYFxyXG4gIDxzbWFsbCBjbGFzcz1cImphcmdvblwiPlRlY2ggYmxvY2tjaGFpbiBqYXJnb24gYWxlcnQgYWhlYWQsIHdpdGggYWxsIGVmZm9ydCBtYWRlIGZvciBjbGFyaXR5ISBJIHRyZWF0IGEgYnJvYWQgb3ZlcnZpZXcgb2YgdGhlIGV4aXN0aW5nIHRyYWplY3Rvcnlcclxub2YgYmxvY2tjaGFpbi1yZWxhdGVkIG1pY3JvLWVjb25vbWljIGFkdmFuY2VtZW50cy4gSSBtYWtlIGEgdGVjaG5pY2FsICZhbXA7IGNvbnRleHR1YWxpemluZ1xyXG48YWJiciB0aXRsZT1cInRoaXMgbGluayBqdXN0IGdvZXMgZG93biA1IHBhcmFncmFwaHMgdG8gRmViLiAxN3RoXCI+XHJcbjxhIGhyZWY9XCIjMTgtMDItMTdcIj4gdGhyZWUtcGFydCBibG9nIHNlcmllcyBpbiBteSBGZWIuIDE3LTIwIHBvc3RzPC9hPiBvbiB0aGUgbWljcm8tZWNvbm9taWMgaG9yaXpvbiBvZiBibG9ja2NoYWluIHRlY2hub2xvZ2llcy48L2FiYnI+XHJcbjwvc21hbGw+XHJcbjwvaDY+XHJcblxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+SGFzIGFueW9uZSBlbHNlIGJlZW4gdW5kZXJ3aGVsbWVkIGJ5IHRoZSBsYWNrIG9mIEJpdGNvaW4mIzM5O3MgZGFpbHlcclxuPGk+cHJlc2VuY2U8L2k+LCBkZXNwaXRlIGl0cyBldmVycHJlc2VuY2UgYXQgdGhlIGRpbm5lciB0YWJsZXMgYW5kIGNhZiZlYWN1dGU7cyBhY3Jvc3MgQW1lcmljYS4gU3VyZSwgaXQmIzM5O3MgbW9yZVxyXG5vZiBhICZxdW90O21ldHJvcG9saXRhbiZxdW90OyBwaGVub21lbm9uOyBhbmQgc3VyZSwgaXQmIzM5O3MgYmVjb21lIGFuIGFjY2VwdGVkIGdsb2JhbCBwbGF0Zm9ybS0tYWxvbmcgd2l0aCBteXJpYWRcclxub3RoZXIgY3J5cHRvLWN1cnJlbmNpZXMsIGJ1dCBpdCYjMzk7cyBleGNoYW5nZS13b3J0aGluZXNzIHJlbWFpbnMgc2hyb3dkZWQsIGFuZCBtaXN1bmRlcnN0b29kIGJ5IG1hbnkuIENyeXB0b2N1cnJlbmNpZXNcclxuYXJlIHVzZWZ1bCBhcyBhIHZlaGljbGUgZm9yIGludmVzdG1lbnQsIGFuZCB5ZXMsIHRoZXJlIGFyZSBCaXRjb2luIG1pbGxpb25haXJlcyBkdWUgdG8gdGhlIGN1cnJlbmN5JiMzOTtzIHJpc2UgdG9cclxuZmFtZSB3aXRoIGxhc3QgeWVhciYjMzk7cyBpbmNyZWFzZSBpbiB2YWx1ZSAoZnJvbSAkMSwwMDAgdG8gfiQyMCwwMDApIGV0Yy4sIGV0Yy4gQnV0LCBzbyBmYXIgaXRzIGNvbnRyaWJ1dGlvbnMsXHJcbnVzZXMsIGZhbWUgYXJlIG9uZS1zaWRlZGx5XHJcbjxpPm1hY3JvLTwvaT5lY29ub21pYy4gQSByZWNlbnQgQ05FVCBhcnRpY2xlXHJcbjxzdXA+MTwvc3VwPiwgYW1vbmcgb3RoZXJzLCBkb2N1bWVudHMgbWluaXNjdWxlIChhbmQgbm90IGltcHJvdmluZykgcGVyY2VudGFnZSBvZlxyXG48aT5hY3R1YWw8L2k+IHVzZSBhdCB0aGUgJnF1b3Q7Y2FzaC1yZWdpc3RlcnMmcXVvdDsgb2Ygc29jaWV0eS48L3A+XHJcblxyXG48cD5JcyB0aGVyZSBzb21ldGhpbmcgd3Jvbmcgd2l0aCBzdWNoIGxpdHRsZSBtaWNyby1lY29ub21pYyB1c2FnZT8gTm90IGF0IGFsbCEgQWNjb3JkaW5nIHRvIGdlbmVyYWwgc29jaW9sb2dpY2FsXHJcbjxpPkVhcmx5IEFkb3B0ZXI8L2k+IHRoZW9yeS0tYmFzZWQgb24gRXZlcmV0dCBNLiBSb2dlcnMmIzM5O1xyXG48aT5EaWZmdXNpb24gb2YgSW5ub3ZhdGlvbnM8L2k+XHJcbjxzdXA+Mjwvc3VwPi0tdGhlIHRpbWVsaW5lIG9mIHRoZSBJbm5vdmF0aW9uIEFkb3B0aW9uIExpZmVjeWNsZSBpcyBmYWlybHkgb3JkaW5hcnkuIFRoYXQgaXMsIHRoZSBSb2dlciYjMzk7cyBiZWxsIGN1cnZlXHJcbnJhbmdlcyBmcm9tIHRoZSBiZWdpbm5pbmcgaW5ub3ZhdG9ycywgdG8gZWFybHkgYWRvcHRlcnMsIGVhcmx5IG1ham9yaXR5LCBhbmQgbGF0ZSBtYWpvcml0eS4gSG93ZXZlciwgdGhlIGJsb2NrY2hhaW5cclxuYXJ0aWNsZXMgYWx3YXlzIG1pc3MgdGhlIHBvaW50LiBDdXJyZW5jaWVzIGFyZSBtb3JlIG9mIGEgZGlzdHJhY3Rpb24gY29tcGFyZWQgdG8gdGhlIGdlbnVpbmUgdXNlZnVsbmVzcyBmb3IgdGhlXHJcbmV2ZXJ5LXBlcnNvbiwgaW4gZXZlcnktZGF5IGFmZmFpcnMsIG9uIGEgZ2l2ZW4gZGF5LS1pLmUuLCBtaWNyby1lY29ub21pYyB1c2UuPC9wPlxyXG5cclxuPHA+VGhlIHRydWUgdmFsdWUsIHRoZSBraW5kIHRoYXQgbWFrZXMgb3VyIGxpdmVzIGVhc2llciBvbiBhbnkgZ2l2ZW4gZGF5LCBhbmQgZm9yIHRoZSBldmVyeS1wZXJzb24sIGlzXHJcbjxpPm5vdDwvaT4gdGhlIGN1cnJlbmN5LCBpdCBpcyB0aGUgY29udHJhY3QsIHRoYXQgYWxsb3dzIGZvciBpbmRpdmlkdWFsaXplZCwgdGFyZ2V0ZWQgc2hhcmluZyBvZiBzcGVjaWZpYyBpbmZvcm1hdGlvbi0td2hldGhlclxyXG5maW5hbmNpYWwsIGdvdmVybm1lbnRhbCwgb3IgYW55IG90aGVyIGNlbnRyYWxpemVkIGRhdGFiYXNlLiBBbiBleGFtcGxlIGlzIGluIG9yZGVyIGJlZm9yZSBJIGNvbnRpbnVlLCBzaW5jZSB3ZSBjYW5cclxuYWxsIHJlbGF0ZSB0byB0aGUgcmlzayBvZiB1c2luZyBhIGNyZWRpdCBvciBkZWJpdCBjYXJkLCB0aGUgcmlzayBtb3N0IG5vdGFibHkgY29uY2VybmluZyBUYXJnZXQgc3RvcmUgY3JlZGl0IGNhcmRcclxuaGFja3MgYSBjb3VwbGUgeWVhcnMgYWdvLjwvcD5cclxuXHJcbjxwPlN1cHBvc2UgYSBwZXJzb24gc2hvcHMgYXQgMyBkaWZmZXJlbnQgcmV0YWlsZXJzLCB1c2luZyBhIGRpZmZlcmVudCBjcmVkaXQgY2FyZCBmb3IgZWFjaC4gRm9yIHRoZXNlIDMgdHJhbnNhY3Rpb25zLFxyXG50aGlzIHBlcnNvbiBoYWQgb25seSBuZWVkZWQgdG8gcHJvdmlkZSB0d28gZGlzY3JldGUgcGllY2VzIG9mIGluZm9ybWF0aW9uIGFib3V0IHRoZW1zZWx2ZXMgZm9yIGVhY2ggdHJhbnNhY3Rpb246XHJcbnRoZXkgcHJvdmUgdGhleSBoYXZlIHRoZSAkMjcsICQyMDAsIGFuZCAkNTsgYW5kIHRoZXkgcHJvdmUgYSB0aGlyZCBwYXJ0eShpLmUuLENDIG9yIGJhbmspd2lsbCBtYWtlIHRoYXQgJDI3LCAkMjAwLFxyXG5vciAkNSBhdmFpbGFibGUsIGlmIHRoZWlyIGNsaWVudCBhZ3JlZXMuIEluc3RlYWQsIGZvciBlYWNoIHRyYW5zYWN0aW9uLCB0aGV5IG9wZW4gdGhlaXJcclxuPGk+ZW50aXJlPC9pPiBmaW5hbmNpYWwgaW5mb3JtYXRpb24sIGFuZCBjYW4gb25seSBob3BlIHRoYXQgbGF3LWVuZm9yY2VtZW50IHdpbGwgcHJldmVudCBjeWJlci10aGVmdDsgYW5kIGlmIHRoZSBzdG9yZSYjMzk7c1xyXG5kYXRhYmFzZXMgYXJlIGhhY2tlZCwgdGhlbiB0b3VnaC1sdWNrITwvcD5cclxuXHJcbjxwPkNyeXB0by1jb250cmFjdHMgcHJvdmlkZSB0aGUgdGVjaG5vbG9neSBmb3IgdGhpcyBpbmRpdmlkdWFsaXplZCwgcmlzay1mcmVlIHRyYW5zYWN0aW9uLCByYXRoZXIgdGhhbiBmb3IgZWFjaCB0cmFuc2FjdGlvbixcclxucHJvdmlkaW5nIHRoZSBnZW5lcmFsaXplZCBpbmZvcm1hdGlvbiBmb3IgaW5kaXZpZHVhbCB0cmFuc2FjdGlvbi4gSGlnaGx5IGluZWZmaWNpZW50ISBOb2JvZHkgdGhpbmtzIHRvIHdhbGsgYXJvdW5kXHJcbndpdGggdGhlaXIgbGlmZS1zYXZpbmdzIGluIGNhc2gsIHRoZW4gYXQgdGhlIDctMTEgc3RvcmUsIHRvIG9wZW4gdGhlaXIgd2FkIG9mIGNhc2ggYW5kIHBlZWwgb3V0IGEgYmlsbC4gVGhlIGNyZWRpdFxyXG5jYXJkIHN5c3RlbSwgYmxlc3NlZCBhcyBpdCBpcywgZGlkIG5vdCBwcmV2aW91c2x5IGhhdmUgdGVjaG5vbG9neSB0byBhdm9pZCB0aGlzIHZlcnkgdGhpbmcuIFNvLCBmaW5hbmNpYWwgaW5zdGl0dXRpb25zXHJcbmhhdmUgaGFkIHRvIHJlbHkgb24gdGhlIG1hbnkgbGF5ZXJzIG9mIHNlY3VyaXR5LCBwYXNzd29yZHMsIHBpbnMsIG1vdGhlcnMmIzM5OyBtYWlkZW4gbmFtZXMsIGV0Yy4gVGhlbiwgYmFzZWQgb25cclxudGhlIG1hdGhlbWF0aWNzIGJlaGluZCBwcmltZSBudW1iZXJzLCB0aGV5IGhvcGUgdG8ga2VlcCB5b3VyIG1vbmV5IHNhZmUgaW4gb25lLCBjZW50cmFsaXplZCBzcG90LS13aXRoIGEgYnJpZ2h0XHJcbnJlZCB0YXJnZXQgb24gaXQuPC9wPlxyXG5cclxuPHA+Tm93LCB0aGUgY3J5cHRvLWNvbnRyYWN0IHByb3ZpZGVzIHRoaXMgZGVjaWRlZGx5ICptaWNyby1lY29ub21pYyogZXhwZXJpZW5jZSBmb3IgdGhlIGV2ZXJ5ZGF5IHBlcnNvbi4gQW5kIHRoYXQsIG15XHJcbmZyaWVuZHMsIGhhcyBub3RoaW5nIHRvIGRvIHdpdGggY3J5cHRvLWN1cnJlbmNpZXMuIFRoZXJlIGlzIG5vIG1pY3JvLWVjb25vbWljIHZhbHVlIGluIGNyeXB0by1jdXJyZW5jeSwgaW5zdGVhZFxyXG50aGUgY3J5cHRvLVxyXG48aT5jb250cmFjdDwvaT4gaXMgdGhlIHRydWUsIHVuc3VuZyBoZXJvLCBhbmQgYSBoZXJvIHdlIHdpbGwgYWxsIGdldCB0byBrbm93LiBbcGVyc29uYWwgb3BpbmlvbiAtIHRoaXMgaGVybyYjMzk7cyBuYW1lXHJcbmlzIHRoZSBFdGhlcmV1bSBWaXJ0dWFsIE1hY2hpbmVdLiBJbiBhbnkgY2FzZSwgQ3J5cHRvLWNvbnRyYWN0cyBwcm92aWRlIHRoaXMgYWJpbGl0eSB0byBwcm92aWRlIHBpbnBvaW50ZWQsXHJcbjxpPnNwZWNpZmljLCB0YXJnZXRlZCBpbmZvcm1hdGlvbjwvaT4gYXMgY2l0aXplbnMsIHRvby4gV2hlbiB3ZSBwcm92aWRlIG91ciBkcml2ZXJzIGxpY2Vuc2UgbnVtYmVyLCBmb3IgdGhlIHNha2Ugb2ZcclxucmVudGluZyB0aGF0IGNhciwgd2UgcHJvdmlkZSBldmVyeSBhc3BlY3Qgb2YgaW5mb3JtYXRpb24gb2Ygb3Vyc2VsdmVzIHRvIEhlcnR6LiBUaGV5IGRvbiYjMzk7dCBuZWVkIHRoaXMuIFRoZXkgbmVlZFxyXG50byBrbm93IG9ubHkgYW5kIGV4Y2x1c2l2ZWx5IGRyaXZpbmctcmVjb3JkIHJlbGF0ZWQgZGV0YWlscy0tbm90IHRoZSBlbnRpcmUgZ292ZXJubWVudGFsIGRhdGFiYXNlIG9mIGluZm9ybWF0aW9uXHJcbmFib3V0IHlvdSE8L3A+XHJcblxyXG48cD4xLlxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy9iaXRjb2luLWNyeXB0b2N1cnJlbmN5LWJpZy1pbi1pbnZlc3RpbmctYnV0LXN0aWxsLWxvdXN5LWZvci1idXlpbmctYS1zYW5kd2ljaC9cIlxyXG50YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9uZXdzL2JpdGNvaW4tY3J5cHRvY3VycmVuY3ktYmlnLWluLWludmVzdGluZy1idXQtc3RpbGwtbG91c3ktZm9yLWJ1eWluZy1hLXNhbmR3aWNoLzwvYT5cclxuPC9wPlxyXG5cclxuPHA+Mi5cclxuPGEgaHJlZj1cImh0dHBzOi8vZXJpYy5lZC5nb3YvP2lkPUVEMDY1OTk5XCIgdGFyZ2V0PVwiX2JsYW5rXCI+Um9nZXJzLCBFLiBNLiwgJmFtcDsgU2hvZW1ha2VyLCBGLiBGLiAoMTk3MSkuIENvbW11bmljYXRpb24gb2YgSW5ub3ZhdGlvbnM7IEEgQ3Jvc3MtQ3VsdHVyYWwgQXBwcm9hY2guPC9hPlxyXG48L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDExID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5HaXZlbiB0aGF0IG91ciBhcHAtdXNlIGlzIGluZXh0cmljYWJseSB0aWVkIHVwIHdpdGggb3VyIG93biBiZWhhdmlvciwgYWN0aXZpdHkvY29tbXVuaWNhdGlvbi1iYXNlZCBhcHAgZGV2ZWxvcGVyc1xyXG5oYXZlIGluIHRoZSBwYXN0IHllYXIgYWNjZXB0ZWQgKG1vc3RseSBpbiB3b3JkKSBhIHJlbmV3ZWQgcmVzcG9uc2liaWxpdHkuIE1vcmUgbGlrZSByZXNwb3NpYmlsaXR5IGZvciBhIG11bHRpLWZhY2V0ZWRcclxucG93ZXIgb2YgaW5mbHVlbmNlIGdyYW50ZWQgdG8gYW4gaW5kdXN0cnksIHN1ZGRlbmx5LCBkaXNwcm9wb3J0aW9uYXRlbHkgZ3JlYXQsIGFuZFxyXG48aT5zZW1pLWFyYml0cmFyaWx5IHJlbGF0ZWQ8L2k+IHRvIHRoZSBkZXNpZ25lciYjMzk7cyBpbnRlbnQgKGFuZCBjb250cm9sISkuIEFmdGVyIGFsbCwgaWYgdGhlIFNhaW50bHkgTWFyayBadWNrZXJiZXJnJiMzOTtzXHJcbmFjdGl2aXR5L2NvbW11bmljYXRpb24tYmFzZWQgYXBwIGluYWR2ZXJ0YW50bHkgbGVkIHRvIG5vdmVsLCBhbmQgZGVlcGx5IGNvbnNlcXVlbnRpYWwsIGVmZmVjdHMsIHRoZW4gYW55b25lIGNvdWxkLjwvcD5cclxuXHJcbjxwPkFmdGVyIGFsbCwgd2hvIGNvdWxkIGd1ZXNzXHJcbjxpPmhvdzwvaT4gdGhlc2UgYXBwLWRlc2lnbiBlZmZlY3RzIHdvdWxkIGFmZmVjdCB0aGUgdXNlcnMsIHllYXJzIGxhdGVyLiBXaG8gZG8gd2UgdGhpbmsgcHJvZ3JhbW1lcnMgYXJlLCBzb2Npb2xvZ2lzdHM/XHJcbk1vcmUgc3BlY2lmaWNhbGx5LCB3aG8gY291bGQga25vd1xyXG48aT53aGljaDwvaT4gbXVuZGFuZSBjb2RpbmcgcHJhY3RpY2VzLCBhcmJpdHJhcnkgYXBwLWRlc2lnbi0tbGlrZSBzaGFyaW5nIHBlcm1pc3Npb25zL2ZlYXR1cmVzPyBTdXJlLCBldmVyeW9uZSBkZWVwXHJcbmRvd24ga25ldyB0aGVpciBjb21wYW55IHByYWN0aWNlcyB5aWVsZCB1bmZhdGhvbWFibGUgcG93ZXIgb2YgaW5mbHVlbmNlIG92ZXIgdGhlIGRhaWx5IGhhYml0cyBvZiBjZWxsLXVzZXJzLCBhLmsuYS5cclxuZXZlcnlvbmUuIFRoZSBlYXN5IHBhcnQgaXMga25vd2luZzsgdGhlIGhhcmQgcGFydCBpcyBsZWFybmluZyBob3cgYW5kIHdoeSBjZXJ0YWluIGFwcC1mZWF0dXJlcyBsZWFkIHRvIGJlaGF2aW9yYWxcclxucmlza3MuPC9wPlxyXG5cclxuPHA+VGhlcmUgY291bGQgYmUgbm8gYmV0dGVyIGV4YW1wbGUgdGhhbiB0aGUgQWxjb2hvbGljIGZhY2VkIHdpdGggYW4gaW50ZXJ2ZW50aW9uIGJ5IGEgbG92aW5nIGZhbWlseSBsb25naW5nIGZvciBjaGFuZ2UuXHJcblRoZSBhbGNvaG9saWMgY291bGQgYmUgZm9yZ2l2ZW4gZm9yIHBhc3QgbWlzZGVlZHMsIGJ1dCB3aXRob3V0IGFjdHVhbFxyXG48aT5BY2tub3dsZWRnZW1lbnQ8L2k+IG9mIGEgY3Jpc2lzIGluIGRpcmVjdGlvbiwgd2hpY2ggbmVjZXNzaXRhdGVzIHByb2Zlc3Npb25hbCBoZWxwIGZyb20gc29jaWFsIHNjaWVudGlzdHMuIFRoZXJlZm9yZSxcclxudGhlIHJlY2VudFxyXG48aT5hY2tub3dsZWRnbWVudHM8L2k+IHNpZ25pZnkgc29tZXRoaW5nIGRlZXBlci0tdGhleSBzaWduaWZ5IGEgaHVtaWxpdHkgdGhhdCBhcHAtZGVzaWduZXJzIGFyZSBub3Qgc29jaW9sb2dpc3RzLCBnZW5lcmFsbHlcclxuc3BlYWtpbmcuIDxzIHN0eWxlPVwiY29sb3I6cHVycGxlXCI+U28sIHRoYXQgbWVhbnMgaGlyaW5nIHNvY2lvbG9naXN0cywgcHN5Y2hvbG9naXN0cywgYW50aHJvcG9sb2dpc3RzIGZvciBldmVyeSBOXHJcbjxzbWFsbD50aDwvc21hbGw+IGFwcC1jb2RlciBhbmQgZW5naW5lZXIuPHM+IEhpc3RvcnkgY2FuJiMzOTt0IGJlIHJld3JpdHRlbiwgYnV0IGl0IGNhbiBiZSBpbnRlcnByZXRlZCBhbmQgbGVhcm5lZFxyXG5mcm9tLiBUaGUgYWNrbm93bGVkZ21lbnQgaXMgaXRzZWxmIGEgdmljdG9yeSBpZiBpdCBpbmR1Y2VzIGxlYXJuaW5nIGZyb20gdGhlIHJhdywgc29jaWFsIHNjaWVuY2VzLCB3aG9zZSBleHBlcnRpc2VcclxuPGk+Y2FuPC9pPiBwcmVkaWN0IGhvdyBvciB3aHkgY2VydGFpbiAmcXVvdDtsaWZlJnF1b3Q7LWZlYXR1cmVzLCBwcmFjdGljZXMsIGFuZCBwb2xpY2llcyBvZnRlbiB1bmZvbGQgd2l0aCB1bmR1ZSBhbmRcclxudW5pbnRlbmRlZCBzb2NpYWwgY29uc2VxdWVuY2VzLjwvcD5cclxuXHJcbjxwPldhdGVyIHVuZGVyIHRoZSBicmlkZ2UsIGJ1dCBnb2luZyBmb3J3YXJkLCBpdCBpcyBvbmUgdGhpbmcgdG8gY2xhaW0gYSAmcXVvdDtyZW5ld2VkIHNlbnNlIG9mIHJlbW9yc2UmcXVvdDssIGFub3RoZXJcclxudG8gYWNrbm93bGVkZ2UsIGxlYXJuIGFuZCBjaGFuZ2UuIExpa2UgbGFzdCBOb3ZlbWJlclxyXG48c3VwPjE8L3N1cD4gd2hlbiBGYWNlYm9vayBjby1mb3VuZGVyIFNlYW4gUGFya2VyIGNvbmZlc3NlZCBjZXJ0YWluIGRlc2lnbnMgbGlrZSAmcXVvdDtzb2NpYWwtdmFsaWRhdGlvbiBmZWVkYmFjayBsb29wJnF1b3Q7XHJcbmFuZCBvdGhlciBhcHAtZGVzaWduIGludGVudGlvbnMsIHdoaWxlIGlnbm9yaW5nIHBvdGVudGlhbCBzZWNvbmRhcnkgZWZmZWN0cyBvbiBzb2NpZXR5LiBTbywgdGhlXHJcbjxpPkFja25vd2xlZGdtZW50PC9pPiBpcyB0aGUgYmlnIHdpbiBoZXJlLS1ub3Qgc28gbXVjaCB0aGUgcmVtb3JzZSE8L3A+XHJcblxyXG48cD4xLlxyXG48YSBocmVmPVwiaHR0cHM6Ly9kaWdpdGFsYWRkaWN0c2Jsb2cuY29tL2ZhY2Vib29rLWNvLWZvdW5kZXItc2F5cy1jb21wYW55LWJ1aWx0LXRvLWV4cGxvaXQteW91L1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vZGlnaXRhbGFkZGljdHNibG9nLmNvbS9mYWNlYm9vay1jby1mb3VuZGVyLXNheXMtY29tcGFueS1idWlsdC10by1leHBsb2l0LXlvdS88L2E+XHJcbjwvcD5cclxuICBgXHJcbiAgdmFyIGJsb2dwb3N0MTAgPSBgXHJcbiAgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj43IEV0aGVyZXVtLWJhc2VkIHRlY2hub2xvZ2ljYWwgZmVhdHVyZXMgb2ZmZXIgdXMgYSBuZXcgd29ybGQgLS0gYSBkZWNlbnRyYWxpemVkIG5ldyB3b3JsZCwgbm90IGRlcGVuZGVudCBvbiB0aGUgY2VudHJhbGl6ZWRcclxuc2VydmVycyBhbmQgYmFuZHdpZHRoIG9mIEluc3RhZ3JhbSwgQ29tY2FzdCwgVC1Nb2JpbGUsIEFtYXpvbiwgR29vZ2xlLCBldGMuIFdpdGggdGhhdCBzdGF0ZW1lbnQgZW5kcyBnZW5lcmFsIGNvbnNlbnN1cyBhbW9uZyBibG9ja2NoYWluXHJcbmV4cGVydHMsIHB1bmRpdHMsIGFuZCBhdXRob3JzLiBIb3dldmVyLCBpZiB0aGUgY3VycmVudCBsb2dpc3RpY2FsIG9ic3RhY2xlcyBwcm92aWRlIGNvbnRyb3ZlcnN5IGFuZCBjb21wZXRpbmcgYWxnb3JpdGhtc1xyXG5vdmVyIHN1c3RhaW5hYmlsaXR5LCBzZWN1cml0eSwgYW5kIHNjYWxhYmlsaXR5LCB0aGVuIHRoZXkgcmV2ZWFsIG11Y2ggbW9yZSBhYm91dCB0aGUgZ2VuZXJhbCBwYXRod2F5IG9mIHNvY2lhbCB1c2VzXHJcbihhbmQgcG90ZW50aWFsIGVmZmVjdHMpIHRoYW4gdGhleSBoaWRlLiBJbiBteSBGZWJydWFyeSAxNXRoXHJcbjxhIGhyZWY9XCIjMTgtMDItMTVcIj5ibG9nPC9hPiwgSSB0b3VjaGVkIG9uIGEgZmV3IGZlYXR1cmVzIG9mIG1pY3JvLWVjb25vbWljIHVzZXMgc28gYXMgdG8gZGlzdGluZ3Vpc2ggdGhlIG1vcmUgY2VydGFpbiBhc3BlY3RzIG9mIHRoZVxyXG5jcnlwdG8tY29udHJhY3QgaG9yaXpvbi48L3A+XHJcblxyXG48cD5cclxuPHN0cm9uZz5Qcm9sb2d1ZTwvc3Ryb25nPlxyXG48L3A+XHJcblxyXG48cD5Tbywgd2hhdCBhcmUgc29tZSBjb3JlIGZlYXR1cmVzIG9mIGJsb2NrLWNoYWluIHRlY2hub2xvZ3kgdGhhdCBhZmZlY3QgdGhlIHF1YWxpdHkgb2Ygb3VyIGxpdmVzLCBhbmQgdGhlXHJcbjxpPnByb2R1Y3Rpdml0eTwvaT4gb2Ygb3VyIHdvcmsgYXMgYSBzb2NpZXR5IG9mIGFjYWRlbWljcywgcHVibGljLXNlY3RvciBhbmQgcHJpdmF0ZS1zZWN0b3IgcHJvZmVzc2lvbmFscz8gRmlyc3QsIGFcclxubGl0dGxlIGJhY2tncm91bmQgYW5kIGNvbnRleHQgYmVmb3JlIEkgb3V0bGluZSBzZXZlbiBibG9ja2NoYWluIGZ1bmN0aW9uYWxpdGllcy4gVGhlIEV0aGVyZXVtIGJsb2NrY2hhaW4gaGVscHMgZGlzdGluZ3Vpc2hcclxuaXRzZWxmLS1hbmQgaXRzIGJsb2NrY2hhaW4tbmF0aXZlIGxhbmd1YWdlIFNvbGlkaXR5LS1mcm9tIGVhcmxpZXIgdGVjaCwgbGlrZSBCaXRjb2luIGFuZCBvdGhlciBQcm9vZiBvZiBXb3JrLWJhc2VkXHJcbmJsb2NrY2hhaW5zLiBFdGhlcmV1bSBibG9ja2NoYWluIG9mZmVycyBhIHN5bnRheCBhbmQgcHJvZ3JhbW1pbmcgZmVhdHVyZXMsIGUuZy4gJnF1b3Q7bG9vcGluZyZxdW90OywgJnF1b3Q7cmVjdXJzaW9uJnF1b3Q7LFxyXG53aXRoIHRoZSBmdWxsIHBvd2VyIG9mIGFcclxuPGk+VHVyaW5nIENvbXBsZXRlPC9pPiBsYW5ndWFnZS0tdGhhdCBpcywgZ2l2ZW4gZW5vdWdoIHJlc291cmNlcywgdGhlIGxhbmd1YWdlIGNhbiBzb2x2ZSBhbnkgcHJvZ3JhbW1hYmxlIHByb2JsZW0uPC9wPlxyXG5cclxuPHA+TW9yZSBiYWNrZ3JvdW5kIGFuZCBhIGNsYXJpZnlpbmcgbWV0YXBob3IgYXJlIGluIG9yZGVyOiBUaGUgQml0Y29pbiBibG9ja2NoYWluIHRyYW5zYWN0aW9uIHJlc2VtYmxlcyB0aGUgYWNjb3VudGluZ1xyXG5zeXN0ZW0gb2YgYSBmb29zLWJhbGwgdGFibGUgcG9pbnQgcmFjayB3aXRoIGEgYmFzaWMgY2FsY3VsYXRvciBnbHVlZCB0byB0aGUgc2lkZS4gSW4gY29udHJhZGlzdGluY3Rpb24sIEFuIEV0aGVyZXVtXHJcbmJsb2NrY2hhaW4gdHJhbnNhY3Rpb24gd291bGQgcmVzZW1ibGUgYSBuZXR3b3JrIG9mIGNvbXB1dGVycyxcclxuPGk+d2hpY2ggaXMgaXRzZWxmLDwvaT4gYSBjb21wdXRlci0taGVuY2UsIHRoZSBuYW1lIEV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZS4gVGhpcyBhbGxvd3MgZm9yIFF1aWNrYm9va3MgdG8gY2FsY3VsYXRlXHJcbmludG8gYSBQREYgdG8gYmUgc2VudCB2aWEgYW4gZW1haWwgY29udHJhY3Qtc2lnbmluZyBwcm9ncmFtLiBNdWNoIG1vcmUgdXNlZnVsITwvcD5cclxuXHJcbjxwPlRoZXJlZm9yZSwgRXRoZXJldW0mIzM5O3MgQmxvY2tjaGFpbiBpcyBtb3JlIHRoYW4gYSBuZXR3b3JrZWQsIGNoYWluZWQgbGlzdCBvZiBibG9ja3MsIGxpa2UgQml0Y29pbi4gVGhlIEV0aGVyZXVtXHJcbmJsb2NrY2hhaW4gaXMgYWN0dWFsbHkgYSAmcXVvdDtWaXJ0dWFsIE1hY2hpbmUmcXVvdDssIGxpa2UgYSBhIGJpZyBuZXR3b3JrZWQgJnF1b3Q7aG9tZSBjb21wdXRlciZxdW90Oy4gVGhlIG5hdGl2ZVxyXG5sYW5ndWFnZSBvZiB0aGUgYmxvY2tjaGFpbiwgU29saWRpdHksIGFsbG93cyBmb3IgYW5cclxuPGk+YXBwbGljYXRpb24gYmluYXJ5IGludGVyZmFjZTwvaT4sIEFCSS4gU28sIGZvciBleGFtcGxlLCBJIGNhbiB0eXBlIHVwIGFuIEV0aGVyZXVtIGNvbnRyYWN0IG9uIG15IGhvbWUgY29tcHV0ZXIsXHJcbnRoZW4gZGlyZWN0bHkgYWNjZXNzIGJ5IGNvbW1hbmQgbGluZSB0aGUgYmxvY2tjaGFpbiBpdHNlbGYuIEluIGxheW1hbiYjMzk7cyB0ZXJtcywgdGhlIG1hbm5lciB0aGF0IG1vZGVybi1kYXkgYXBwLFxyXG5mb3IgZXhhbXBsZSBJbnN0YWdyYW0sIGlzIGEgY2VudHJhbGl6ZWQgQVBJIChBcHBsaWNhdGlvbiBQcm9ncmFtbWluZyBJbnRlcmZhY2UpIHRoYXQgYWxsb3dzIG9uZSBwcm9ncmFtbWluZyBzeXN0ZW1cclxudG8gaW50ZXJhY3Qgd2l0aCBhbm90aGVyLCBzdWNoIGFzIEluc3RyYWdyYW0gb2ZmZXJzIGEgJnF1b3Q7c2hhcmluZyBBUEkmcXVvdDsgdGhhdCBjb25uZWN0cyB0byBoYXJkd2FyZSBjb250YWN0cyxcclxudGh1cyBmYWNpdGlsYXRpbmcgY29tbXVuaWNhdGluZyB3aXRoIHRoaXJkLXBhcnR5IGFwbGljYXRpb25zLCBsaWtlIHNoYXJpbmcgeW91ciBpbnN0YWdyYW0gcGljdHVyZSB0byB5b3VyIEZhY2Vib29rXHJcbmFjY291bnQsIHZpYSB5b3VyIFQtTW9iaWxlIHBob25lJiMzOTtzIGNvbnRhY3RzIGxpc3QuIFRoaXMgQVBJIHJlbGF0aW9uc2hpcCBicm9hZGx5IGRlc2NyaWJlcyB0aGUgbW9kZXJuIHdvcmxkIHdlXHJcbmxpdmUgaW4sIHdoZXJlaW4gYSBDaHJ5c2VyIGRyaXZpbmcgc3lzdGVtIGV4Y2hhbmdlcyBBUEkgaW5mb3JtYXRpb24gd2l0aCB5b3VyIFQtTW9iaWxlIEJsdWV0b290aCBuZXR3b3JrIHN5c3RlbSxcclxud2hpY2ggZXhjaGFuZ2VzIEFQSSBpbmZvcm1hdGlvbiB3aXRoIHlvdXIgb3duIGNvbnRhY3QgbGlzdCwgYW5kIHNvIG9uLCBhbmQgb3VyIGxpdmVzIGFyZSBtYWRlIGVhc2llci48L3A+XHJcblxyXG48cD5TbywgYXJlIHdlIG91dCBvZiB0aGUgd29vZHM/IEhhcyBFdGhlcmV1bSBzb2x2ZWQgdGhlIGJsb2NrY2hhaW4gcXVlc3Rpb24/IFllcywgaWYgaXQgd2VyZSB0aGUgMTkyMCBwcmUtcmVsYXRpdml0eVxyXG5kYXlzOyBIb3dldmVyLCB3aXRoIHRoZSBhZHZlbnQgb2YgcXVhbnR1bSBjb21wdXRpbmcsIHBvdGVudGlhbCBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgaW1tZWRpYXRlbHkgYXJpc2UuIFRoZSByZWFzb25cclxuYmVpbmcgdGhhdCBkaWdpdGFsIG1hdGggdXNlcyBiaW5hcnkgJnF1b3Q7b24vb2ZmJnF1b3Q7IGNhbGN1bGF0aW9ucywgd2hpbGUgcXVhbnR1bSBtYXRoIGltcGxpY2F0ZXMgYSB0ZXJ0aWFyeSxcclxuPGk+cXViaXQ8L2k+ICZxdW90O3NpbXVsdGFuZW91cyBzdGF0ZXMmcXVvdDsuIFRoZXJlZm9yZSwgd2UgaGF2ZSBub3cgZW50ZXJlZCB0aGUgM3JkIGdlbmVyYXRpb24gb2YgYmxvY2tjaGFpbiB0ZWNobm9sb2d5LFxyXG5ib3RoIHByb2dyYW1tYWJsZSwgYnV0IGFsc28gcXVhbnR1bS1wcm9vZiBkdWUgdG8gbWF0aGVtYXRpY2FsIGdyYXBoIGZlYXR1cmVzLiBGb3IgZXhhbXBsZSwgSU9UQSYjMzk7cyBibG9ja2NoYWluXHJcbmRlc2lnbiB1dGlsaXplcyBhXHJcbjxpPldpbnRlcm5pdHogT25lLVRpbWUgU2lnbmF0dXJlPC9pPiwgYnkgd2hpY2ggb25lJiMzOTtzIHRyYW5zYWN0aW9uIGlzIGVudGVyZWQgaW50byB3aXRoIGEgcHJpdmF0ZS1rZXksIGFuZCB0aGUgYmxvY2tjaGFpblxyXG5tb3Jlc28gcmVzZW1ibGVzIGEgJnF1b3Q7VGFuZ2xlJnF1b3Q7IG9mIGEgZGlyZWN0ZWQgZ3JhcGgsIHdoaWNoIGFsbG93cyBmb3IgY29tcHV0YXRpb25hbCAmcXVvdDtzdGF0ZXMmcXVvdDsuIElPVEFcclxucmVjZW50bHkgZ2FybmVyZWQgY3JpdGljaXNtIGluIEphbnVhcnkgMjAxOCBkdWUgdG8gYW4gdW5mb3J0dW5hdGUgY3J5cHRvLWhhY2ssIHRoYXQgZXhwb3NlZCBhbiBhcHBhcmVudCB2dWxuZXJhYmlsaXR5LlxyXG5JbiB0cnV0aCwgdGhpcyB3YXMgYSBjYXNlIG9mIHVzZXItZXJyb3IgYmVjYXVzZSB1c2VycyB3ZXJlXHJcbjxpPnJlLXVzaW5nPC9pPiB0aGVpciBvbmUtdGltZSBrZXlzLCB3aGljaCBzaWduaWZpY2FudGx5IGRlY3JlYXNlcyBzZWN1cml0eSB0byB0aGUgcG9pbnQgdGhhdCBhIGhvbWUgY29tcHV0ZXIgY291bGRcclxuY3JhY2sgdGhlIGNvZGUhIEkgY2hvb3NlIHRvIG5vdCBkaWdyZXNzIGZ1cnRoZXIsIGFuZCBxdWFudHVtIGNvbXB1dGluZyBpcyBub3QgcXVpdGUgYWR2YW5jZWQgZW5vdWdoIG5vdyB0byBjYXVzZVxyXG5kYW1hZ2UsIGJ1dCBpbiB0aGUgZnV0dXJlIGNvdWxkIHBvdGVudGlhbGx5IHNwbGl0IHRoZSBibG9ja2NoYWluIGluIHR3bywgb3Igb3RoZXIgcXVhbnR1bSBwb3NzaWJpbGl0aWVzLjwvcD5cclxuXHJcbjxwPkluIHN1bSwgdGhlIHRlY2huaWNhbCBvYnN0YWNsZXMgY2hhbmdlIGVhY2ggbW9udGgsIGhvd2V2ZXIgb25lIG11c3Qgbm90IGxvc2Ugc2lnaHQgb2YgdGhlIGZvcmVzdCBmb3IgdGhlIHRyZWVzLiBTb2NpYWxcclxudXNlYWJsaXR5LCBwb3RlbnRpYWwgc2NvcGUgYW5kIG9mIGNvdXJzZSB1bmludGVuZGVkIGNvbnNlcXVlbmNlcyBoYXZlIGFsbCBmaW5hbGx5IGJlZ3VuIHRvIGVtZXJnZSwgYXQgbGVhc3QgaW4gZm9ybSxcclxud2l0aCBsaXR0bGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSAybmQgZ2VuZXJhdGlvbiBibG9ja2NoYWluIG9yIHRoZSAzcmQgZ2VuZXJhdGlvbiBQYXRyaWNpYW4gZGlyZWN0ZWQgZ3JhcGggYmxvY2tjaGFpbi5cclxuVGhlIHVuZGVybHlpbmcgcHJpbmNpcGxlIG9mIHRoZSBibG9ja2NoYWluJiMzOTtzIG1pY3JvLWVjb25vbWljIHV0aWxpaXR5IHRocm91Z2ggY3J5cHRvLVxyXG48aT5jb250cmFjdHM8L2k+IGlzIHRoZSBzYW1lLCBhcyBvcHBvc2VkIHRvIHBsYWluIGNyeXB0by1jdXJyZW5jeS4geW91IGtub3cgdGhlIHVzdWFsIGJhcnRlcmluZyBzb2x1dGlvbnMgZm9yIFN1cHBseVxyXG4mYW1wOyBEZW1hbmQgbGVhZGluZyB0byBFY29ub21pY3MgR2FtZSBUaGVvcnksIGV0Yy4gVGhpcyBpcyB3aGVyZSB3ZSBtdXN0IHRha2Ugb3VyIGxlYXZlIG9mIHRoZSBIYXJkIFNjaWVuY2VzIG9mXHJcbk1hdGhlbWF0aWNzLCBhbmQgZW50ZXIgdGhlIHJlYWxtIG9mIFNvY2lvbG9neSwgUHN5Y2hvbG9neSwgQW50aHJvcG9sb2d5IGFuZCBFY29ub21pY3MuPC9wPlxyXG4gIGBcclxuICB2YXIgYmxvZ3Bvc3Q5ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGUgZ3VpZGluZyBsaWdodCB0aHJvdWdoIHRoZSBjZW50dXJpZXMgb2Ygc2NpZW50aWZpYyBwYXJhZGlnbXMsIGluIHRoZSBLdWhuaWFuIHNlbnNlXHJcbjxzdXAgPjE8L3N1cD4sIGhhdmUgZGVyaXZlZCBmcm9tIGRlZHVjdGl2ZSBpZGVhcyBmcm9tIGFib3ZlIC0gd2hldGhlciBwcmllc3RseSBvciByb3lhbCBkZWNyZWUuIFRoZW4sIHRoZSBwcmltYWN5IG9mIHRoZVxyXG48aT5TY2llbnRpZmljIE1ldGhvZDwvaT4gZnJvbSB0aGUgUmVuYWlzc2FuY2UgZm9yd2FyZC0tcHVuY3R1YXRlZCBmaXJzdCBieSBDb3Blcm5pY2FuIEhlbGlvY2VudHJpc20sIHRoZW4gb3RoZXIgUGFyYWRpZ21cclxuU2hpZnRzLS1oYXMgZGlyZWN0ZWQgcmF0aW9uYWwgYW5kIGV0aGljYWwgbm9ybXMgaW4gZWFjaCByZXNwZWN0aXZlIHBlcmlvZCwgZS5nLiBFbmxpZ2h0ZW5tZW50IGF1dGhvcnMgb2YgMTd0aCwgMTh0aFxyXG5jZW50dXJ5LiBGYXN0IGZvcndhcmQgdG8gdGhlIG1vZGVybiBwZXJpb2QsIHdoZXJlaW4gdGhlIGN1cnJlbnQgZXJhJiMzOTtzIGVtZXJnaW5nIHBhcmFkaWdtIGhvbGRzIFNoYXJpbmcgYXMgYSBjb2xsZWN0aXZlLXByaW9yaXR5XHJcbmFuZCByZXNwb25zaWJpbGl0eSwgdGhlbiBhbiBhbWF6aW5nIHBoaWxvc29waGljYWwgbW9tZW50LlxyXG48aT5IaXN0b3JpY2FsIE1hdGVyaWFsaXNtPC9pPlxyXG48c3VwPjI8L3N1cD4gcHJlc2NyaWJlcyB3aGF0IGlzIGRpcmVjdGx5IGhlcmUgYSBub3ZlbCBQYXJhZGlnbSBTaGlmdCBieSB3aGljaCBhdXRob3JpdHkgaXMgbm90IGRlcml2ZWQgZnJvbSBnb3Zlcm5tZW50YWwsXHJcbmZpbmFuY2lhbCBzb3VyY2VzLCBidXQgcmF0aGVyIHRoZVxyXG48aT5zaGFyZWQ8L2k+c29jaWV0YWwgY29uc2Vuc3VzIGFib3V0IGNyeXB0b2dyYXBoaWMsIG1hdGhlbWF0aWNhbCBwcm9vZnMgYXMgdHJ1ZSBhdXRob3JpdHkuIEZ1cnRoZXIsIHRoZSByZXZvbHV0aW9uYXJ5XHJcbnNoaWZ0IGFsc28gaW5uYXRlbHkgcHJvdmlkZXMgdG9vbHMgZm9yIGltcGxlbWVudGlvbiB0aHJvdWdoIGRlY2VudHJhbGl6ZWQsIHByb2dyYW1tYWJsZSBkYXRhLXNoYXJpbmcuIENyeXB0b2dyYXBoeVxyXG5oYXMgaW4gYSBzZW5zZSBiZWNvbWUgYVxyXG48aT5kZSBqdXJlPC9pPiBtaWRkbGUtcGVyc29uIGZvciBpZGVudGlmaWNhdGlvbiBhbmQgdmVyaWZpY2F0aW9uIG9mIHByb3BlcnR5LjwvcD5cclxuXHJcbjxwPlxyXG48c3Ryb25nPkkuIFByb3RlY3RpbmcgcmlnaHRzIHRocm91Z2ggaW1tdXRhYmxlIHJlY29yZHM8L3N0cm9uZz5cclxuPGJyIC8+IEluYWxpZWFibGUgUmlnaHRzIGNhbiBub3cgYmUgaWRlbnRpZmllZCBhbmQgdmVyaWZpZWQgYnkgdGhlIGNyeXB0b2dyYXBoaWMgYXV0aG9yaXR5IG9mIGEgbWF0aGVtYXRpY2FsIHByb29mLCByYXRoZXJcclxudGhhbiBleGNsdXNpdmVseSB0aHJvdWdoIGdvdmVybm1lbnRhbCBvciBmaW5hbmNpYWwgaW5zdGl0dXRpb25zIGZyb20gYWJvdmUuIFRoZSBtb2Rlcm4gcGVyaW9kIGFsc28gaGFzIGhlbGQgdGhpc1xyXG5kZWNlbnRyYWxpemVkLCBpbmRpdmlkdWFsIGF1dGhvcml0eSBhcyB0aGVcclxuPGk+YSBwcmlvcmk8L2k+IHN0YXJ0aW5nIHBvaW50cyBmb3IgcGhpbG9zb3BoaWNhbCBwcm9vZnMuIFByZW1pc2VzIGFib3V0IHRydXRoIGJlZ2luIHdpdGggdGhlIGNvbmRpdGlvbnMgb2YgaHVtYW5raW5kLFxyXG5ub3QgaWRlYWxvZ2llcy4gSW4gZmFjdCwgaXQgd2FzIHRoZVxyXG48aT5Zb3VuZyBIZWdlbGlhbnM8L2k+IG9mIGVhcmx5IDE5dGggY2VudHVyeSBWaWVubmEgJmFtcDsgQmVybGluLCB3aG8gdXNoZXJlZCBpbiB0aGUgTW9kZXJuIEVyYSBvZiBXZXN0ZXJuIFBoaWxvc29waHksXHJcbmJ5IGxheWluZyBvdXQgVHJ1dGggYXMgaW52ZXJ0ZWQsIGJlZ2lubmluZyBmcm9tIHRoZSBlbXBpcmljYWwgJnF1b3Q7Z3JvdW5kJnF1b3Q7IHVwd2FyZC4gVGhpcyAmcXVvdDt1cHNpZGUtZG93blxyXG50cmVlJnF1b3Q7IGRlZmluZXMgcGhpbG9zb3BoaWNhbCBtb2Rlcm5pdHkuIEplYW4tUGF1bCBTYXJ0cmUgd3JvdGUgdGhhdCB0aGUgd2hvbGUgb2ZcclxuPGk+RXhpc3RlbnRpYWxpc208L2k+IGFuZCAyMHRoIGNlbnR1cnkgcGhpbHNvcGh5IGlzIGEgbWVyZSBzdWJzZXQsIGFuZCBuZXZlciBlc2NhcGVzIENvbnRpbmVudGFsIE1hdGVyaWFsaXNtLCBhcyBhcmd1ZWRcclxuaW4gU2FydHJlJiMzOTtzXHJcbjxpPlNlYXJjaCBmb3IgYSBNZXRob2Q8L2k+LlxyXG48c3VwPjM8L3N1cD5cclxuPC9wPlxyXG5cclxuPHA+QWxsIG9mIHRoZSBTY2llbmNlcywgcHJvZGRlZCBieSB0aGlzIFRydXRoIG9mIEVtcGlyaWNpc20sIGZvbGxvd2VkIHN1aXQgdGhyb3VnaCBhbGwgdGhlIHRlY2ggaW5ub3ZhdGlvbnMgc2luY2UgSGVnZWwuXHJcbkkmIzM5O20gc28gc3VycHJpc2VkIGJ5IHRoaXMsIGJlY2F1c2UgZm9yIG1lLCB0aGUgcm9sZSBvZiBjcnlwdG9ncmFwaHkgaXMgc2hvY2tpbmcgb24gdHdvIGxldmVscy4gRmlyc3QsIGNyeXB0b2dyYXBoeVxyXG5yZXNlbWJsZWVzIHBoaWxvc29waHkgcmF0aGVyIHRoYW4gdGhlIEVtcGlyaWNpc20gdGhhdCBJIGhhZCBlbnZpc2lvbmVkIHdvdWxkIGdvdmVybiBzb2NpYWwgcnVsZSAoU29tZSBvbmNlIHRob3VnaHRcclxubnVjbGVhciBzY2llbmNlcyBoZWxkIHRoaXMgcm9sZS0tbm8gbG9uZ2VyISBNYXRoZW1hdGljcyB0YWtlcyB0aGUgY3Jvd24uIFNlY29uZGx5LCBJJiMzOTttIHN0aWxsIGR1bWJmb3VuZGVkIHRoYXRcclxuYSBQYXJhZGlnbSBTaGlmdFxyXG48aT5maXJzdDwvaT4gb2ZmZXJzIHRoZSB0b29scyB0byBmdWxmaWxsIGl0c2VsZj8gU3RhZ2dlcmluZyB0byBjb25zaWRlciB0aGUgYXJiaXRyYXJ5IGNoYW5nZXMgYWhlYWQgZm9yIGEgc29jaWV0eSB0aGF0XHJcbmlzIHByb3ZpZGVkIHRoZSB0b29scyBvZiBzb2NpYWwgc3RydWN0dXJhbCBjaGFuZ2UgZmlyc3QsIGJ1dCBob3cgcXVpdGUgY29udmVuaWVudCE8L3A+XHJcblxyXG48cD5cclxuPHN0cm9uZz5JSS4gQnVyZWF1Y3JhdGljIEF0b21pemF0aW9uIGluIGEgVHJ1ZSBTaGFyaW5nIEVjb25vbXk8L3N0cm9uZz5cclxuPC9wPlxyXG5cclxuPHA+SXQgaXMgc2F0aXNmeWluZ2x5IHJlYXNzdXJpbmcgdG8gc2VlIHRoZSBnb29kLW5hdHVyZWQsIGFsdHJ1aXN0aWMgZWZmb3J0cyBhbW9uZyB0aGUgdGhvdXNhbmRzLCB1cG9uIHRob3VzYW5kcyBvZlxyXG5vcGVuLXNvdXJjZSB2b2x1bnRlZXJzLCBhbmQgYmxvY2tjaGFpbiBpbm5vdmF0b3JzLCBsaWtlIFZpdGFsaWsgQnV0ZXJpbiBhdXRob3Igb2YgRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lLCB3aG9zZVxyXG5haW1zIGFuZCBlZmZvcnRzIG1ha2Ugc3RhZ2dlcmluZyBwcm9ncmVzcyBlYWNoIHF1YXJ0ZXIuIFRoZSBwb3RlbnRpYWwgZm9yIHJlbW92aW5nIHRoZSAmcXVvdDttaWRkbGUtcGVyc29uJnF1b3Q7XHJcbmZyb20gdGhlIGRheS10by1kYXksIG1pY3JvLWVjb25vbWljICZxdW90O2Nvc3Qgb2YgbGl2aW5nJnF1b3Q7LiBUaGlzIGdvZXMgZm9yIGZvciB0aGUgZXhjaGFuZ2luZyBvZiB0aXRsZXMsIGxlZ2FsXHJcbmRvY3VtZW50cywgZXRjLjwvcD5cclxuXHJcbjxwPlNoYXJpbmcgb2YgUmVzb3VyY2VzIGlzLCBpbiBteSBwZXJzb25hbCBvcGluaW9uLCBjcml0aWNhbCB0byBnbG9iYWwgZnV0dXJlLS1ib3RoIG91dCBvZiBpbmNyZWFzaW5nIG5lY2Vzc2l0eSBpbiBhbGxvY2F0aW5nXHJcbmluY3JlYXNpbmdseSBsaW1pdGVkIHJlc291cmNlczsgYW4gYXJiaXRyYXJ5IHJlYXJyYW5nZW1lbnQgb2ZcclxuPGk+U29jaWFsIFN0cnVjdHVyZTwvaT4gYW5kIGRpc3RyaWJ1dGlvbiBvZiBpdHMgcmVzb3VyY2VzLiBXaGlsZSB0aGUgZXhwb25lbnRpYWwgcG9wdWxhdGlvbiBncm93dGggbG9vbXMgb24gdGhlIG5lYXJcclxuaG9yaXpvbiwgYSBjbGVhciwgcHJlLWV4aXN0aW5nIHNvbHV0aW9uIGJlZ2lucyB3aXRoIGEgZm9jdXMgb25cclxuPGk+c21hcnQ8L2k+LCBlZmZlY3RpdmUgc2hhcmluZyBvZiByZXNvdXJjZXMuIFRoZSBkcml2aW5nIHByaW5jaXBsZSBvZiBzdXN0YWluYWJpbGl0eSBpcyBtYWRlIGNvbnZlbmllbnQgYnkgbWVhbnMgb2ZcclxuYmxvY2tjaGFpbiB0ZWNobm9sb2d5LCBleHRlbmRpbmcgZm9yIGV4YW1wbGUgdG8gbG9jYWwgZWNvbm9taWVzLCBjb29wZXJhdGl2ZXMsIHJpZGUtc2hhcmluZywgZXRjLjwvcD5cclxuXHJcbjxwPlxyXG48c3Ryb25nPklJSS4gUmVtb3ZpbmcgRG91YmxlLURpcHBpbmcgZnJvbSBJbnRlcm5hdGlvbmFsIFJlbWl0dGFuY2VzIDwvc3Ryb25nPlxyXG48L3A+XHJcblxyXG48cD5cclxuPGk+JnF1b3Q7UGVyZmVjdGlvbiBpcyBhY2hpZXZlZCwgbm90IHdoZW4gdGhlcmUgaXMgbm90aGluZyBtb3JlIHRvIGFkZCwgYnV0IHdoZW4gdGhlcmUgaXMgbm90aGluZyBsZWZ0IHRvIHRha2UgYXdheS4mcXVvdDtcclxuPC9pPlxyXG48YnIgLz4gLS1BbnRvaW5lIGRlIFNhaW50LUV4dXAmZWFjdXRlO3J5LCAxOTM5PC9wPlxyXG5cclxuPHA+VGF4ZXMgYW5kIHRhcmlmZnMgYXJlIGRpZmZpY3VsdCBlbm91Z2gsIHRoZSBkb3VibGUtZGlwcGluZyBvZiB0aGUgY3VycmVudCBpbnRlcm5hdGlvbmFsIHJlbWl0dGFuY2Ugc3lzdGVtLCAmYWFjdXRlO1xyXG5sYSBXZXN0ZXJuIFVuaW9uLCBkb2VzIG5vdCByZWZsZWN0IHRoZSBnbG9iYWwsIHNoYXJpbmcgRWNvbm9teSBvZiAyMDE4LiBUaGUgZXhpc3RpbmcgcmVtaXR0YW5jZSBzeXN0ZW0gKG5vdCBzcGVha2luZ1xyXG50b1xyXG48aT5jZW50cmFsaXplZDwvaT4sIG1pZGRsZS1tYW4gYWx0ZXJuYXRpdmVzIGxpa2UgUGF5UGF5LCBldGMuKS0tc3VwcG9zaW5nIGlmIEkgd2lyZSAkMiBMb29uaWUgdG8gYSBDYW5hZGlhbiBmcmllbmQmIzM5O3NcclxuQ2FuYWRpYW4gQmFuay0tcmVxdWlyZXMgcGF5bWVudHMgZXhlY3V0ZWQgdGhyb3VnaCB0d28gc2VwYXJhdGUgYmFuayB0cmFuc2FjdGlvbnMgaW4gdHdvIG5hdGlvbmFsIHBheW1lbnRzIHN5c3RlbXMsXHJcbnRodXMgdGhlIHNlbmRpbmcgY291bnRyeSBhbmQgcmVjZWl2aW5nIGNvdW50cnkgZWFjaCB0YWtlIGEgY3V0LiBMaWtlIGV2ZXJ5dGhpbmcgZWxzZS0tYyYjMzk7ZXN0IGxhIHZpZS4gT3IgaXMgaXQ/XHJcblRoZSBiZWF1dHkgb2YgRXRoZXJldW0gaXMgdGhhdCBpdCAmcXVvdDt0YWxrcyZxdW90OyB3ZWxsIHdpdGggb3RoZXJzIGFuZCBhY3Jvc3MgYm9yZGVycywgd2hpbGUgQml0Y29pbiByZW1haW5zIG9mXHJcbmxpdHRsZSB1c2UgZm9yIG1pY3JvLXRyYW5zYWN0aW9ucyB0aGF0IGludm9sdmUgc2VtaS1iYXNpYyBjYWxjdWxhdGlvbnMuIFRoZSByZWFzb24gYmVpbmcgdGhhdCBCaXRjb2luIGJsb2NrY2hhaW5cclxubGFuZ3VhZ2UsIFNjcmlwdCwgY2Fubm90IHN1cHBvcnQgbG9vcHMgKHdoaWxlIHN0YXRlbWVudHMsIGV0Yy4pPC9wPlxyXG5cclxuPHA+Q3VycmVudGx5LCBib3RoIEVPUyBhbmQgRXRoZXJldW0gYmxvY2tjaGFpbnMgYXBwZWFyIHBvaXNlZCBmb3IgdGhlIG1vc3QgZmluYW5jaWFsLWZyaWVuZGx5IGJsb2NrY2hhaW4gdGVjaC48L3A+XHJcblxyXG48cD4xLlxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuZWNvbm9taXN0LmNvbS9uZXdzL2J1c2luZXNzLzIxNzIyODY5LWFudGktZXN0YWJsaXNobWVudC10ZWNobm9sb2d5LWZhY2VzLWlyb25pYy10dXJuLWZvcnR1bmUtZ292ZXJubWVudHMtbWF5LWJlLWJpZy1iYWNrZXJzXCJcclxudGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZWNvbm9taXN0LmNvbS9uZXdzL2J1c2luZXNzLzIxNzIyODY5LWFudGktZXN0YWJsaXNobWVudC10ZWNobm9sb2d5LWZhY2VzLWlyb25pYy10dXJuLWZvcnR1bmUtZ292ZXJubWVudHMtbWF5LWJlLWJpZy1iYWNrZXJzPC9hPlxyXG48L3A+XHJcblxyXG48cD4yLlxyXG48YSBocmVmPVwiaHR0cHM6Ly9ibG9nLmV0aGVyZXVtLm9yZy8yMDE2LzAyLzA5L2N1dC1hbmQtdHJ5LWJ1aWxkaW5nLWEtZHJlYW0vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9ibG9nLmV0aGVyZXVtLm9yZy8yMDE2LzAyLzA5L2N1dC1hbmQtdHJ5LWJ1aWxkaW5nLWEtZHJlYW0vPC9hPlxyXG48L3A+XHJcblxyXG48cD4zLlxyXG48YSBocmVmPVwiaHR0cDovL3d3dy5iYXJkLmVkdS9saWJyYXJ5L2FyZW5kdC9wZGZzL1NhcnRyZS1TZWFyY2gucGRmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbjxpPiBTZWFyY2ggZm9yIGEgTWV0aG9kPC9pPiwgSmVhbi1QYXVsIFNhcnRyZSwgMTk1NzwvYT4uXHJcbjxiciAvPlxyXG48c21hbGw+U2FydHJlIHdvdWxkIGxhdGVyIGJlIGF3YXJkZWQgdGhlIE5vYmVsIFByaXplIGluIDE5NjQsIGJ1dCBkZWNsaW5lZCBpdC48L3NtYWxsPlxyXG48L3A+XHJcblxyXG48cD5cclxuPGEgaHJlZj1cImh0dHBzOi8vcHJvamVrdGludGVncmFjaWphLnByYXZvLmhyL19kb3dubG9hZC9yZXBvc2l0b3J5L0t1aG5fU3RydWN0dXJlX29mX1NjaWVudGlmaWNfUmV2b2x1dGlvbnMucGRmXCIgdGFyZ2V0PVwiX2JsYW5rXCI+NC4gS3VobiwgVGhvbWFzLCBUaGUgU3RydWN0dXJlIG9mIFNjaWVudGlmaWMgUmV2b2x1dGlvbnMsIDwvYT5cclxuPC9wPlxyXG5cclxuPHA+XHJcbjxhIGhyZWY9XCJodHRwczovL2hici5vcmcvMjAxNy8wMS90aGUtdHJ1dGgtYWJvdXQtYmxvY2tjaGFpblwiIHRhcmdldD1cIl9ibGFua1wiPjUuIEhhcnZhcmQgQnVzaW5lc3MgUmV2aWV3LFxyXG48aT5UaGUgVHJ1dGggYWJvdXQgQmxvY2tjaGFpbiwgRmViLiAyMDE3LiAoVGhpcyBpcyBhbiBvbGRlciBhcnRpY2xlLCBidXQgdmVyeSBjbGVhciAmYW1wOyBpbnNpZ2h0ZnVsKTwvaT5cclxuPC9hPlxyXG48L3A+XHJcbiAgYFxyXG5cclxuXHJcbiAgdmFyIGJsb2dwb3N0OCA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+SSBmZWVsIHRoYXQgZGF0YSBpcyBvbmUgb2YgdGhlIG1vcmUgdW5kZXJlc3RpbWF0ZWQgbmV3IGNvbW1vZGl0aWVzIG9mIHRoZSBhZ2UuIE1vc3QgdmlzdWFsaXplIGRhdGEgYXMgcm93cyBhbmQgY29sdW1ucyxcclxuYW5kIGF0IG1vc3Qgb25seSBub24tY29uZGl0aW9uYWwgZHluYW1pYyBkYXRhLiBEYXRhIGFyZSBub3Qgc28gbXV0ZSEgRGF0YSwgaW4gbW9zdCBvYmplY3Qtb3JpZW50ZWQgbGFuZ3VhZ2VzIGF0XHJcbmxlYXN0LCByZXByZXNlbnRzXHJcbjxpPmZ1bmN0aW9uczwvaT4sIGNvbmRpdGlvbnMsIGFuZCBwcmVkaWN0ZWQgdmFsdWVzLiBBbmQgc28sIG91ciBvd24gYmVoYXZpb3IsIGNvdXBsZWQgd2l0aCBvdXIgbmV0d29ya3MmIzM5OyBiZWhhdmlvcixcclxuY291cGxlZCB3aXRoIHByZWRpY3RpdmUgYW5hbHl0aWNzLS10aGlzIHJlcHJlc2VudHMgYSB3ZWFsdGggb2YgaW5mb3JtYXRpb24gYmV5b25kIG91ciBhdHRyaWJ1dGVkIG9yIGluaGVyaXRlZCB0cmFpdHMuXHJcblRoZSBwcm9ncmFtbWluZyBpc1xyXG48aT5pbjwvaT4gdGhlIGRhdGEsIGhvd2V2ZXIsIGNpdGl6ZW5zIGhhdmUgYmVjb21lIGxlc3MgYW5kIGxlc3MgaW52b2x2ZWQsIGNlZGluZyBhcHAgYnkgY2VudHJhbGl6ZWQgYXBwIG91ciBvd24gaW5mb3JtYXRpb25cclxuYW5kIGVuc3VyaW5nIHByb2ZpdCB0byAzcmQgcGFydHkgbWFya2V0ZXJzLiBUaGUgY2VudHJhbGl6ZWQgbmF0dXJlIG9mIHRoZSBpbnRlcm5ldCBhbGxvd3MgZm9yIHRoaXMsIHdoaWxlIHRoZSBuZXdcclxubGFuZHNjYXBlIG9mXHJcbjxpPmRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb25zPC9pPiAoREFQUCkgY29tcGxldGVseSB1cGVuZHMgdGhpcyBzdHJ1Y3R1cmUgb2YgdGhlIHN0YXR1cyBxdW8uPC9wPlxyXG5cclxuPHA+XHJcbjxzdHJvbmc+SVYuIEVuYWJsaW5nIGNpdGl6ZW5zIHRvIG93biAmYW1wOyBtb25ldGl6ZSB0aGVpciBkYXRhICgmYW1wOyBwcm90ZWN0IHByaXZhY3kpPC9zdHJvbmc+XHJcbjxiciAvPiBFdGhlcmV1bSBvZmZlcnMgYSBkZWNlbnRyYWxpemVkIHNvbHV0aW9uIHRvICZxdW90O293bmluZyZxdW90OyBvbmUmIzM5O3Mgb3duIGRhdGEsIGFzIGRhdGEgY2FuIGJlIGRlY2VudHJhbGl6ZWRcclxuYW5kIHJldHVybmVkIHRvIHRoZSBpbmRpdmlkdWFsJiMzOTtzIGNvbnRyb2wsIGFuZFxyXG48aT5wcm9maXQ8L2k+LiBBcyBzdXJlIGFzIHRoZSAxOXRoIGNlbnR1cnkmIzM5O3MgJnF1b3Q7bGFib3ItaG91ciZxdW90OyBiZWNhbWUgY29tbW9kaWZpZWQgdG8gYSBjYWxjdWxhYmxlIGFzc2V0LCBpLmUuXHJcbnByb3BlcnR5LCB3aGljaFxyXG48aT5hbm90aGVyPC9pPiBwYXJ0eSBjb250cm9scyBhbmQgbWFrZXMgcHJvZml0OyBBbmQgYXMgc3VyZSBhcyB0aGUgMjB0aCBjZW50dXJ5JiMzOTtzIGRhdGEgYW5hbHl0aWNzIGJlY2FtZSBjb21tb2RpZmllZFxyXG5pbnRvIGNhbGN1bGFibGUgYXNzZXRzIGZvciBhbm90aGVyIHBhcnR5IHRvIHRha2UgY29udHJvbCBhbmQgbWFrZSBwcm9maXQ7IHRoZW4gb25seSBub3cgaW4gdGhpcyAyMXN0IGNlbnR1cnkgZG9lc1xyXG50ZWNobm9sb2d5IG9mZmVyIGEgbmV3LCBtb3JlIGVnYWxpdGFyaWFuIHBhdGguPC9wPlxyXG5cclxuPHA+XHJcbjxzdHJvbmc+Vi4gRW5zdXJpbmcgY29tcGVuc2F0aW9uIGZvciB0aGUgQ3JlYXRvcnMgb2YgVmFsdWUgPC9zdHJvbmc+XHJcbjxiciAvPiBTbywgaG93IHdvdWxkIGRlY2VudHJhbGl6ZWQgaW5ub3ZhdGlvbnMgb2YgYmxvY2tjaGFpblxyXG48aT5kaXN0cmlidXRlZCBsZWRnZXI8L2k+IHRlY2hub2xvZ3kgY29tcGVuc2F0ZSB0aG9zZSB3aG9zZSBhY3Rpb25zLCBiZWhhdmlvciwgb3BpbmlvbnMsIGZyaWVuZC1uZXR3b3JrcywgYXJ0d29yayxcclxubXVzaWMsIHZpZGVvcyBhbmQgb3RoZXIgY29udHJpYnV0aW9ucyBwcm9maXQgdGhlIGNyZWF0b3I/PC9wPlxyXG5cclxuPHA+XHJcbjxzdHJvbmc+VkkuIFRoZSBIYWxjeW9uIEFnZSBvZiBUcmFuc2FjdGlvbi1DaGFpbiBFbnRlcnByaXNlPC9zdHJvbmc+XHJcbjwvcD5cclxuXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5BY2NvcmRpbmcgdG8gR3JlZWsgTXl0aG9sb2d5LCB0aGUgZGF5cyBvZiBlZXJ5LCBub3RpY2VhYmxlIGxhY2sgb2Ygc3Rvcm1zIGhhdmUgbmV2ZXIgYmVlbiBpbnRlcnByZXRlZCBhcyBhIHBlcmlvZFxyXG5vZiBncmFjZS4gTW9yZXNvLFxyXG48aT5IYWxjeW9uPC9pPiB0cmFucXVpbGl0eSBvbmx5IG1lYW5zIGEgdGVtcG9yYXJ5IG1vcmF0b3JpdW0gb24gdGhlIHdpbmRzIGFuZCB3YXZlcywgaW1wb3NlZCBieSBBZW9sdXMsIEdvZCBvZiBXaW5kLFxyXG50byBwcm90ZWN0IHRoZSBuZXN0aW5nIGVnZ3Mgb2YgQWxjeW9uZSwgaGlzIGRhdWdodGVyLjwvcD5cclxuXHJcbjxwPklmIGJsb2NrY2hhaW4gdGVjaCBjaGFuZ2VzIGhvdyB3ZSBkbyByZXNlYXJjaCwgYW5hbHlzaXMsIGFuZCBmb3JlY2FzdGluZywgYXMgbXVjaCBhcyBpdCBjaGFuZ2VzIGludGVybmF0aW9uYWwsIGFuZFxyXG5jcm9zcy1pbmR1c3RyeSB0cmFuc2FjdGlvbnMsIHRoZW4gYXJlIHdlIGZhY2VkIHdpdGggYSBzaW1pbGFyIGRpbGVtbWEgYXMgdGhlICZxdW90O25vdmVsdHkmcXVvdDssIGFuZCBkb3VibGUtZGVhbGluZyxcclxub2YgbXVsdGktbmF0aW9uYWxzIG9mIHRoZSAxOTkwcz8gTm8sIGJlY2F1c2UgYmxvY2tjaGFpbiByZW5kZXJzIG9yZ2FuaXphdGlvbnMsIGV2ZW4gdGhvc2Ugd2l0aCBhIHNwb3R0eSBwYXN0LCBpbnRvXHJcbnRyYW5zcGFyZW50LCBkZW1vY3JhdGljLCBlZmZpY2llbnQsIHNlY3VyZSBhbmQgZWFzaWx5IHNjcnV0aW5pemVkLjwvcD5cclxuXHJcbjxwPkFmdGVyIGFsbCwgd2l0aG91dCB0cmFuc3BhcmVudCBwcm9vZiwgaG93IGVsc2Ugd291bGQgSSBrbm93IG15IGJhbmFuYXMgYXJlIHRoZSAmcXVvdDtwdXJhIHZpZGEmcXVvdDsgQ29zdGEgUmlxdWUmbnRpbGRlO1xyXG5vbmVzPyBNb3JlIGltcG9ydGFudGx5LCB3aGF0IHdhcyB0aGUgY2FyYm9uIGZvb3RwcmludCBvZiB0aGF0IGJhbmFuYSYjMzk7cyBqb3VybmV5IGZyb20gaXRzIG5hdGl2ZSBzb2lsIHRvIG15IGJyZWFrZmFzdFxyXG50YWJsZT8gTmV3IGJsb2NrY2hhaW4gY29tcGFuaWVzIGxpa2VcclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LnByb3ZlbmFuY2Uub3JnL1wiPlByb3ZlbmFuY2Uub3JnPC9hPixcclxuPGEgaHJlZj1cImh0dHA6Ly93d3cuc2t1Y2hhaW4uY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPnNrdWNoYWluPC9hPixcclxuPGEgaHJlZj1cImh0dHA6Ly93d3cuYmxvY2t2ZXJpZnkuaW8vXCI+aHR0cDovL3d3dy5ibG9ja3ZlcmlmeS5pby88L2E+IGFyZSBhIGZldyBub3RpY2VhYmxlIGdhbWUtY2hhbmdlcnMuIFNvLCBmb3IgYmFuYW5hcyBub3QgYmFja2VkIGJ5IG1hdGhlbWF0aWNhbCBwcm9vZnMsXHJcbkkgcmVhbGx5IGhhdmUgdG8gYXNrIG15c2VsZiwgaXMgaXRcclxuPGk+cmVhbGx5PC9pPiBhbiBhdXRoZW50aWMgRmFpciBUcmFkZSBiYW5hbmE/PC9wPlxyXG5cclxuPHA+VHJhbnNhY3Rpb25zIGFyZSBoYXJkbHkgdmFsdWFibGUgaW4gdGhlIHByb2R1Y3RzIHRoZW1zZWx2ZXMsIGlmIHJlbW92ZWQgZnJvbSB0aGUgdmFsdWUgb2YgdGhlXHJcbjxpPnRyYW5zYWN0aW9uIHBlciBzZTwvaT4uIEludGVybmF0aW9uYWwgc3VwcGx5IGNoYWluIHRyYW5zYWN0aW9ucywgYnkgdmlydHVlIG9mIGEgcmVjZW50bHkgcG9zc2libGUgZGVjZW50cmFsaXplZCxcclxucGVybWFuZW50IHJlY29yZCBhbmQgbW9uaXRvcmluZywgaGF2ZSBiZWd1biB0byBtYWtlIGlucm9hZHMgaW4gYWdyaWN1bHR1cmUsIHBldHJvbGV1bSwgcGhhcm1hY2V1dGljYWxzLCBmb29kLXN1cHBseVxyXG5hbmQgb3RoZXIgbXVsdGktc3RhZ2UgaW5kdXN0cmllcy48L3A+XHJcblxyXG48cD5JZiBjb3Jwb3JhdGUgYW5kIGdvdmVybm1lbnRhbCB0cmFuc2FjdGlvbnMgYXJlIHRvIGJlIG1hZGUgcHVibGljLS1tYW55IGJlYXJpbmcgZW50ZXJwcmlzZSBvciBTdGF0ZSBzZWNyZXRzLCB0aGVuXHJcbndpbGwgZm9yZWNhc3RpbmcgYWxzbyBnbyB0aGUgd2F5IG9mIGJpcmRzPyBQb3NzaWJseS4gT25saW5lIHBsYXRmb3JtcyBsaWtlIEF1Z3VyXHJcbjxzdXAgID44PC9zdXA+YXJlIGNyZWF0aW5nIGdsb2JhbCwgZGVjZW50cmFsaXplZCBwcmVkaWN0aW9uIG1hcmtldHMsIGluIGRvbWFpbnMgbGlrZSBzcG9ydHMgYmV0dGluZywgZmluYW5jaWFsIG1hcmtldHNcclxuc3BlY3VsYXRpb24gYW5kIHNvIGZvcnRoLiBBcm1lZCB3aXRoIHZhc3QsIHRyYW5zcGFyZW50IGtub3dsZWRnZSwgdGhlIGV2ZXJ5ZGF5IHBlcnNvbiBjYW4gbm93IGFjY2VzcyB0aGUgd2hpbXMgYW5kXHJcbnBvd2VyIG9mIEFlb2x1cywgYW5kIGZvcmVjYXN0aW5nIHRoZSB3aW5kcyBvZiBGb3J0dW5lLjwvcD5cclxuXHJcbjxwPlxyXG48c3Ryb25nPlZJSS4gUmVpbnZlbnRpbmcgR292ZXJubWVudCAmYW1wOyBEZW1vY3JhY3k8L3N0cm9uZz5cclxuPGJyIC8+IC4uLnRvIGJlIGNvbXBsZXRlZC4uLjwvcD5cclxuXHJcbjxwPjEuXHJcbjxhIGhyZWY9XCJodHRwczovL3d3dy5wcm92ZW5hbmNlLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly93d3cucHJvdmVuYW5jZS5vcmcvIDwvYT5cclxuPC9wPlxyXG5cclxuPHA+Mi5cclxuPGEgaHJlZj1cImh0dHA6Ly93d3cuc2t1Y2hhaW4uY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPiBodHRwOi8vd3d3LnNrdWNoYWluLmNvbS8gPC9hPlxyXG48L3A+XHJcblxyXG48cD4zLlxyXG48YSBocmVmPVwiaHR0cDovL3d3dy5ibG9ja3ZlcmlmeS5pby9cIiB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cDovL3d3dy5ibG9ja3ZlcmlmeS5pby8gPC9hPlxyXG48L3A+XHJcbiAgYFxyXG5cclxuICB2YXIgYmxvZ3Bvc3Q3ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Ub2RheSwgSSYjMzk7bSBnb2luZyB0byB3cml0ZSBhYm91dCBkYXRhIHN0cnVjdHVyZXMsIGFuZCBjaGFsbGVuZ2VzIHRoYXQgZmFjZSBWaXRhbGlrIEJ1dGVyaW4gYW5kIG90aGVyIGJsb2NrY2hhaW5cclxuYXJjaGl0ZWN0cy4gJiMzOTsgTm93LCB3aHkgaW4gdGhlXHJcbjxpPndvcmxkPC9pPiB3b3VsZCBJIG9yIGFueW9uZSBlbHNlIGNhcmUgYWJvdXQgb29oLCBtZXJnZSBzb3J0cywgYnViYmxlIHNvcnRzLCBjbGFzc2lmaWNhdG9yeSB0cmVlcywgYW5kIHRoZSBhZHZlbnRcclxub2YgYSB0aGlyZCBmb3JtIG9mIGRhdGEgc3RydWN0dXJlPzwvcD5cclxuXHJcbjxwPlRvZGF5LCB3ZSBsaXZlIGluIGFuIGV2ZXIgbW9yZSByZWxhdGlvbmFsIHdvcmxkLiBXaXRoIGFsbCBvdXIgdGVjaG5vbG9neSwgd2UganVzdCBjYW4mIzM5O3Qgd2FpdCB0byBoZWFyIHRoZSBsYXRlc3RcclxuZ29zc2lwIGFib3V0IHNpc3RlciBCZWNreSYjMzk7cyBCb3lmcmllbmQmIzM5O3MgQnJvdGhlciYjMzk7cyBGcmllbmQgdGhhdFxyXG48aT5hbHNvPC9pPiBnb3QgdG8gbWVldCBTaGFraXJhLiBHb3NzaXAgdG8gb25lIHBlcnNvbiBpcyBhIHZhbHVhYmxlIGFzc2V0IHRvIHRoZSBkYXRhIGFuYWx5c3QuIEJlY2F1c2UsIGhvdyBlbHNlIGNvdWxkXHJcbmFuIGFsZ29yaXRobSBkcmF3IHNpbXVsdGFuZW91cyBjb25jbHVzaW9ucyBhYm91dCB0d28gZnJpZW5kcyB0aGF0ICZxdW90O2xpa2VkJnF1b3Q7IHRoZSBzYW1lIFNhbXN1bmcgVlIsIGFuZCB0aGF0XHJcbnRoZXkgYXJlIGJvdGggbG9jYXRlZCBuZWFyIEJlc3QgQnV5LiBUaGFua3MgdG8gY2xhc3NpZmljYXRvcmlhbCB3aXNkb20gb2YgQUkgJmFtcDsgcGxhaW4gbWFjaGluZS1sZWFybmluZz88L3A+XHJcblxyXG48cD5UaGVzZSByZWxhdGlvbmFsIHF1ZXJpZXMgYXJlIHNpbXBseSB0b28gZGlmZmljdWx0IGZvciByZWxhdGlvbmFsLCByb3cgJmFtcDsgY29sdW1uIFNRTCBkYXRhIHN0cnVjdHVyZXMuIEluIGZhY3QsXHJcbm1hbnkgcXVlcmllcyBhcmUgaW1wb3NzaWJsZSwgZHVlIHRvIHVucHJlc2NpZW50IGRhdGFiYXNlIHNjaGVtYSBhcmNoaXRlY3R1cmVzLiBOZXh0LCB3aXRoIHRoZSBuZWVkIHRvICZxdW90O29iamVjdGlmeSZxdW90O1xyXG5kYXRhIGludG8gbm9uLXJlbGF0aW9uYWwgb2JqZWN0cywgcmF0aGVyIHRoYW4gYW4gYW50aXF1YXRlZCwgcmlnaWQgcm93LWFuZC1jb2x1bW4gZGVzaWduLiBUaHVzLCB0aGUgc2Vjb25kIG1ham9yXHJcbnR5cGUgb2YgZGF0YSBzdHJ1Y3R1cmUgaXMgbW9yZSBmbGV4aWJsZSBhbmQgYWRlcHQgaW4gZmluZGluZyB0aGVzZSByZWxhdGlvbmFsIHF1ZXJpZXMgdGhhdCBhcmUgZXZlciBtb3JlIGluIHZvZ3VlLlxyXG5Ib3dldmVyLCB0aGUgY3J5c3RhbC1saWtlLCBwcmlzdGluZSBub24tcmVsYXRpb25hbCwgTm8tU1FMIGRlc2lnbnMgcXVpY2tseSB0dXJuIHRvIHNwYWdoZXR0aSwgYW5kIGFyZSBwb29yIGZvciBzY2FsYWJpbGl0eS5cclxuQmV0d2VlbiBhIHJvY2sgYW5kIGEgaGFyZCBwbGFjZSwgYSB0aGlyZCBkYXRhIHN0cnVjdHVyZSBoYXMgZW1lcmdlZCBpbiByZWNlbnQgeWVhcnMuPC9wPlxyXG5cclxuPHA+R3JhcGggRGF0YSBTdHJ1Y3R1cmVzXHJcbjxzdXA+Mjwvc3VwPiBhbGxvdyBkYXRhIHF1ZXJpZXMgdGhhdCBoYWQgb3RoZXJ3aXNlIGJlZW4gaW1wb3NzaWJsZSB0byBjYXB0dXJlIGluIGFuIGVudGl0eSByZWxhdGlvbnNoaXAgZGlhZ3JhbS4gVGhlXHJcbmlkZWFsIGV4YW1wbGUgdG8gY2xhcmlmeSBpcyB0aGUgbWFubmVyIHRoYXQgdGhlIFN3aXNzIGJhbmtzJiMzOTsgYWNjb3VudHMgd2VyZSBkaXNjb3ZlcmVkIHRvIGJlIGhpZGluZyB2YXN0IGFtb3VudHNcclxub2YgaGlkZGVuIHRheGVzLCBldGMuIFRoZSBjb3Zlci11cCB3YXMgc28gd2VsbC1jb25zdHJ1Y3RlZCB0aGF0IG5vdCB1bnRpbCBuZXcsIGdyYXBoIGRhdGFiYXNlIHF1ZXJpZXMgZGlzY292ZXJlZFxyXG5wYXR0ZXJucyBvZiBtb25leSBmbG93XHJcbjxzdXA+MTwvc3VwPjo8L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+VGhlIGRhdGEgd2FzIHRoZW4gdHVybmVkIGludG8gYSBncmFwaCBmb3JtYXQgdG8gZGV0ZWN0IHRoZW4gZmluZS10dW5lIHRoZSBjb25uZWN0aW9ucyBiZXR3ZWVuIHRoZSBub2Rlcy4gVGhlIFN3aXNzXHJcbkxlYWsgaGVsZCBhcm91bmQgNjAsMDAwIGZpbGVzIHRoYXQgY29udGFpbmVkIGluZm9ybWF0aW9uIGFib3V0IG92ZXIgMTAwLDAwMCBjbGllbnRzIGluIDIwMyBjb3VudHJpZXMsIHdoaWNoIG1lYW5zXHJcbnRoYXQgdGhlIHJlc3VsdGluZyBncmFwaCBkYXRhYmFzZSBoYWQgbW9yZSB0aGFuIDI3NSwwMDAgbm9kZXMgd2l0aCA0MDAsMDAwIHJlbGF0aW9uc2hpcHMgYW1vbmcgdGhlbS48L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+QnkgYmVpbmcgYWJsZSB0byBlYXNpbHkgdmlzdWFsaXNlIHRoZSBuZXR3b3JrcyBhcm91bmQgY2xpZW50cyBhbmQgYWNjb3VudHMsIHRoZSByZXBvcnRlcnMgZm91bmQgbWFueSBtb3JlIGNvbm5lY3Rpb25zXHJcbnRoYW4gdGhleSBoYWQgYmVmb3JlLCB3aGljaCBsZWFkIHRvIHRoZSBTd2lzcyBMZWFrcyByZXZlbGF0aW9ucyBzb29uIGJlaW5nIHNoYXJlZCB3aXRoIHRoZSBwdWJsaWMgYW5kIHJlZ3VsYXRvcnNcclxuYWNyb3NzIHRoZSBnbG9iZS48L3A+XHJcblxyXG48cD5BbmQgeW91IHRob3VnaHQgdGhhdCBwbGFnaWFyaXNtLWRldGVjdGluZyBzb2Z0d2FyZSB3YXMgaW1wcmVzc2l2ZSBmb3IgY29tcGxleGl0eSEgVGhlIGJlYXV0eSBvZiB0aGlzIG5ld2x5IGF2YWlsYWJsZVxyXG5zb2Z0d2FyZSAoZXZlbiBNaWNyb3NvZnQganVtcGVkIG9uIGJvYXJkIGluIHJlY2VudCB5ZWFycykgbWVhbnMgdGhhdCBzb2Npb2xvZ2lzdHMsIGVjb25vbWlzdHMgY2FuIGJlZ2luIHRvIG1ha2VcclxuYmV0dGVyIGhlYWR3YXkgaW4gdGhlIHdheSB0aGF0IG91ciBtYW55IGludGVyYWN0aW9ucyBiZWNvbWUgbW9yZSBjb21wbGV4IHdpdGggbW9yZSBkYXRhLiBSZW1lbWJlciwgaW4gdGhlIHBhc3QgdGVuXHJcbm1pbnV0ZXMsIG1vcmUgZGF0YSBpbmZvcm1hdGlvbiB3YXMganVzdCBwcm9kdWNlZCB0aGFuIG1vc3Qgb2YgaHVtYW4gaGlzdG9yeSEgVGh1cywgbmV3IGFuZCB1cGNvbWluZyBuZWVkcyBpbiBkb21haW5zXHJcbmxpa2UgY29udGVudCBtYW5hZ2VtZW50ICZhbXA7IGFjY2VzcyBjb250cm9sLCBnZW8tcm91dGluZyAocHVibGljIHRyYW5zcG9ydGF0aW9uKSwgZ2VuZSBzZXF1ZW5jaW5nLCBiaW8taW5mb3JtYXRpY3MsXHJcbmFuZCBzbyBvbi4gU28sIGFzIHRlY2hub2xvZ3kgdGFrZXMgdXMgZm9yd2FyZCwgYW5kIHdlIG1ha2Ugb3VyIGNvbnNpZGVyYXRpb25zLCBsZXQmIzM5O3Mgc3RpY2sgYnkgdGhlIGdvbGRlbiBydWxlc1xyXG5vZiBwYXJhbGxlbCBwcm9jZXNzaW5nLCBzY2FsYWJpbGl0eSwgYW5kLCBub3csIGdyYXBoLW5ldHdvcmsgbWluZGVkbmVzcyBmb3IgdGhlIG5ldyBkYXRhIHN0cnVjdHVyZXMsIGFuZCBzY2hlbWEsXHJcbm9mIHRoZSBFcmEhPC9wPlxyXG5cclxuPHA+MS5cclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmdsb2JhbGJhbmtpbmdhbmRmaW5hbmNlLmNvbS9ob3ctYS1ncmFwaC1kYXRhYmFzZS11bmVhcnRoZWQtbWFqb3ItZmluYW5jaWFsLWltcHJvcHJpZXRpZXMvXCJcclxudGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vd3d3Lmdsb2JhbGJhbmtpbmdhbmRmaW5hbmNlLmNvbS9ob3ctYS1ncmFwaC1kYXRhYmFzZS11bmVhcnRoZWQtbWFqb3ItZmluYW5jaWFsLWltcHJvcHJpZXRpZXMvIDwvYT5cclxuPC9wPlxyXG5cclxuPHA+Mi5cclxuPGEgaHJlZj1cImh0dHBzOi8vbmVvNGouY29tL2Jsb2cvYW5hbHl6aW5nLXBhbmFtYS1wYXBlcnMtbmVvNGovXCI+QnkgYmVpbmcgYWJsZSB0byBlYXNpbHkgdmlzdWFsaXNlIHRoZSBuZXR3b3JrcyBhcm91bmQgY2xpZW50cyBhbmQgYWNjb3VudHMsIHRoZSByZXBvcnRlcnMgZm91bmQgbWFueSBtb3JlIGNvbm5lY3Rpb25zXHJcbnRoYW4gdGhleSBoYWQgYmVmb3JlLCB3aGljaCBsZWFkIHRvIHRoZSBTd2lzcyBMZWFrcyByZXZlbGF0aW9ucyBzb29uIGJlaW5nIHNoYXJlZCB3aXRoIHRoZSBwdWJsaWMgYW5kIHJlZ3VsYXRvcnNcclxuYWNyb3NzIHRoZSBnbG9iZS4gPC9hPlxyXG48YnIgLz4gT3RoZXIgbWFqb3IgdmVuZG9ycyBpbiBncmFwaCBkYXRhIHN0cnVjdHVyZXMgYmFzZWQgb24gTmVvNGo6IE9yaWVudERCLCBBcmFuZ29EQiwgVGl0YW4sIG1vbmdvREIsIENvbXBsZXhpYmxlIFN0YXJkb2csXHJcbmFuZCBGcmFueiBBbGxlZ3JvR3JhcGguPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0NiA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2hpbGUgSSYjMzk7dmUgaGFkIGJsb2NrY2hhaW4tcmVsYXRlZCB0b3BpY3Mgb24gdGhlIG1pbmQgbGF0ZWx5LCBpdCBzZWVtcyBJIGNhbiYjMzk7dCBlc2NhcGUgaXQgYXMgSSBicm9hY2ggbmV3IGZpZWxkcy0tYmxvY2tjaGFpblxyXG4gIGlzIGV2ZXJ5d2hlcmUhIFdlbGwsIEkgaGFkIGJlZ3VuIG15IGJsb2cgd2l0aCBpbnRlbnRpb25zIGFib3V0IHRoZSBhY2NlbGVyYXRlZCBzcGVlZCBvZiBsYW5ndWFnZSBhbmQgc3ludGF4IGZvcm1hdGlvbixcclxuICBhbmQgdGhlIGN1cmlvdXMgcGhlbm9tZW5vbiBJJiMzOTtkIGNhbGwsIGZvciBsYWNrIG9mIGEgYmV0dGVyIHdvcmQgb3Igb3IgbXkgb3duIHJlYWRpbmcsICZxdW90O2RlY2xhcmF0aXZlLXN5bnRheC1tZXJnaW5nJnF1b3Q7LlxyXG4gIFRoaXMgaW52b2x2ZXMgdGhlIGN1cmlvdXMsIGFuZCBsYXJnZWx5IHVua25vd24sIGdyb3d0aCBvZiBKYXZhU2NyaXB0IHNjcmlwdGluZyBsYW5ndWFnZSBpbnRvIGFsbW9zdCBldmVyeSBkb21haW5cclxuICBvZiB3ZWIgYXBwcywgZGF0YSBhbmFseXNpcywgYW5kIGV2ZW4gdGhlIGJvdW5kcyBvZlxyXG4gIDxpPkxvZ2ljPC9pPiBpdHNlbGYuIFRob3VnaCBJIHdvbiYjMzk7dCBzdWJtaXQgbXkgcmVhZGVycyB0byBhIGhpc3Rvcnkgb2YgYSBsYW5ndWFnZSwgc3VmZmljZSBpdCB0byBzYXkgdGhhdCwgJnF1b3Q7SWZcclxuICBhIGNlcnRhaW4gYWxnb3JpdGhtLCBkZXZpY2UsIG9yIG9iamVjdCBpcyBwcm9ncmFtbWFibGUsIHRoZW4gaXQgd2lsbCBldmVudHVhbGx5IGJlIHByb2dyYW1tZWQgaW4gSmF2YVNjcmlwdC4mcXVvdDs8L3A+XHJcbiAgXHJcbiAgPHA+V2l0aG91dCBnZXR0aW5nIGludG8gdGVjaG5pY2FscywgSSYjMzk7bGwgaW5zdGVhZCB1c2UgYSBwZXJmZWN0IG1ldGFwaG9yLS10aGUgbWFubmVyIGJ5IHdoaWNoIEVuZ2xpc2ggbWVyZ2VkIHdpdGhcclxuICBGcmVuY2gsIGJlZ2lubmluZyB3aXRoIHRoZSBjb25xdWVzdHMgb2YgV2lsbGlhbSBvZiBOb3JtYW5keSwgYXJvdW5kIDEwOTYgb253YXJkLiBBbG1vc3QgYSB0aG91c2FuZCB5ZWFycyBsYXRlcixcclxuICB3ZSBjYW4gc2VlIGhvdyBFbmdsaXNoIGdyYW1tYXIgaW5oZXJpdGVkIGl0JiMzOTtzIEFuZ2xvLVNheG9uIExpbmd1aXN0aWMgcm9vdHMsIGFsb25nIHdpdGggdGhlIGNvcmUgdm9jYWJ1bGFyeTtcclxuICBUaGVuLCBhcyBFbmdsaXNoIHZvY2FidWxhcnkgbW92ZXMgcGFzdCB0aGUgZmlyc3QgZmV3IHRob3VzYW5kIGNvcmUgd29yZHMsIGUuZy4gJnF1b3Q7bWlsayZxdW90OyBvciAmcXVvdDtob3VzZSZxdW90O1xyXG4gIGZyb20gJnF1b3Q7bWVsY2hlJnF1b3Q7IG9yICZxdW90O2hhdXMmcXVvdDssIHRoZW4gbW9yZSB0aGFuIDcwJSBvZiBFbmdsaXNoIFZvY2FidWxhcnkgaXMgZGlyZWN0bHkgaW5oZXJpdGVkIGZyb21cclxuICBGcmVuY2gsIGUuZy4gJnF1b3Q7bGFjdG9zZSZxdW90OyBvciAmcXVvdDttYW5zaW9uJnF1b3Q7IGZyb20gJnF1b3Q7bGFpdCZxdW90OyBvciAmcXVvdDttYWlzb24mcXVvdDsuPC9wPlxyXG4gIFxyXG4gIDxwPlNpbWlsYXJseSwgdGhlIGxhbmd1YWdlIG9mIHRoZSB3ZWIgYW5kIG9yaWdpbmFsIGJyb3dzZXJzLCBKYXZhU2NyaXB0LCBoYXMgc2ltaWxhcmx5IG1vcnBoZWQgaW50byBhIG5ldyBsYW5ndWFnZSBjYWxsZWRcclxuICBTb2xpZGl0eSwgYnV0IGluIG9ubHkgYSBtaWNyby1mcmFjdGlvbiBvZiBFbmdsaXNoJiMzOTtzIHRpbWUuIFRoZSB1c3VhbCBGT01PIGxvZ2ljIHByb3BlbHMgY29kaW5nIGxhbmd1YWdlIHVzZSxcclxuICBmb3IgZXhhbXBsZSBGT01PIGluZHVjZWQgTWljcm9zb2Z0JiMzOTtzIGZsYWdzaGlwIFRleHQgRWRpdG9yLCBWaXN1YWwgQ29kZSwgdG8gYWRvcHQgaXQgeWVhcnMgYWdvLlxyXG4gIDxzdXAgPjE8L3N1cD4gVGhlIGxhbmd1YWdlIG9mIEV0aGVyZXVtIEJsb2NrY2hhaW4gaXMgU29saWRpdHksIHdoaWNoIGxpa2UgdGhlIGFib3ZlIGV4YW1wbGUsIGhhcyB0d28gcGFyZW50cywgb25lIG5vbi1sZWdpdGltYXRlLlxyXG4gIEl0IGlzIGluIGFsbCByZXNwZWN0cyB0b3RhbGx5IEphdmFTY3JpcHQsIHlldCB3aXRoIG9iamVjdC1vcmllbnRlZCBlbGVtZW50cyBvZiBDKysuIEZvciB0aGUgbGF5cGVyc29uLCBsZXQmIzM5O3NcclxuICBqdXN0IHNheSBTb2xpZGl0eSByZXNlbWJsZXMgYSAmcXVvdDtMaWdlciZxdW90OywgaW4gaXQgaXMgYXQgaXQmIzM5O3MgY29yZSBKYXZhU2NyaXB0LCB5ZXQgd2l0aCBpbmNyZWFzaW5nIHNvcGhpc3RpY2F0aW9uXHJcbiAgYmFzZWQgb24gQysrIGxvZ2ljLCBpdHMgaGVhZCBhbmQgdG9yc28gaGFzIGJlZ3VuIHRvIHJlc2VtYmxlIHRoZSBwb3dlcmZ1bCBtYWNoaW5lLWNvZGUgb2YgQysrIGV2ZXIgbW9yZS4gQW5kIGl0XHJcbiAgaXMgYSBiZWF1dGlmdWwsIGJ1dCBjdXJpb3VzIHBoZW5vbW9uZW5vbi48L3A+XHJcbiAgXHJcbiAgPHA+XHJcbiAgPGEgaHJlZj1cImh0dHA6Ly93d3cuaWJ0aW1lcy5jby51ay9taWNyb3NvZnQtYWRkcy1ldGhlcmV1bS1sYW5ndWFnZS1zb2xpZGl0eS12aXN1YWwtc3R1ZGlvLTE1NTIxNzFcIj5odHRwOi8vd3d3LmlidGltZXMuY28udWsvbWljcm9zb2Z0LWFkZHMtZXRoZXJldW0tbGFuZ3VhZ2Utc29saWRpdHktdmlzdWFsLXN0dWRpby0xNTUyMTcxPC9hPlxyXG4gIDwvcD5cclxuIFxyXG4gIGBcclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDUgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPjEuNCBtaWxsaW9uXHJcbiAgPGk+bmV3PC9pPiBqb2JzIGJ5IDIwMjA7IEVuZCBvdmVyIGVuZCwgeWVhciBhZnRlciB5ZWFyLCB0aGUgY29tcHV0ZXIgcHJvZ3JhbW1pbmcgaW5kdXN0cnkgY29udGludWVzIHRvIGFkZCBhbm90aGVyXHJcbiAgMjAlIG1vcmUgam9icyBlYWNoIHllYXIsIGZvciB0aGUgbmV4dCBmaXZlIHllYXJzLiBUaGlzIGlzIHRoZSBvbmx5IGZpZWxkIHRoYXQgZGVtYW5kIG91dHN0cmlwcyB0aGUgc3VwcGx5LS1hbmQgaW5jcmVhc2luZ2x5XHJcbiAgc2hvcnQgc3VwcGx5LiBTbyBtdWNoIHNvLCB0aGUgVVMgRGVwYXJ0bWVudCBvZiBMYWJvciBmb3JlY2FzdHMgVS5TLiBjaXRpemVucyB3aWxsIGJlIGFibGUgdG8gZmlsbCAzOSUgb2YgdGhvc2UgcG9zaXRpb25zO1xyXG4gIHRoZXJlIGFyZSBub3QgZW5vdWdoIEltbWlncmF0aW9uIHZpc2FzIChlc3BlY2lhbGx5IGluIHRoZSBUcnVtcGlhbiBlcmEgb2YgaXNvbGF0aW9uaXNtKSB0byBtYWtlIHVwIHRoZSByZXN0LjwvcD5cclxuICBcclxuICA8cD4mbmJzcDs8L3A+XHJcbiAgXHJcbiAgPHA+U28sIGhvdyBpcyBpdCB0aGF0IG9ubHkgMTQlIG9mIGZlbWFsZXMgaW4gdGhlIGVudGlyZSBmaWVsZCBvZiBjeWJlcnNlY3VyaXR5PyBTaWxpY29uIFZhbGxleSBpcywgYXQgaXRzIGJlc3QsIG9ic2NlbmVseVxyXG4gIG9uZS1zaWRlZC4gQXQgR29vZ2xlLCBvbmx5IDE3JSBvZiB0aGUgY29tcGFueSYjMzk7cyB0ZWNoIGpvYnMgYXJlIGZpbGxlZCBieSB3b21lbi4gRmFjZWJvb2sgd29tZW4gc3RhZmYgb25seSAxNSVcclxuICBvZiB0ZWNoIGpvYnMsIGFuZCBUd2l0dGVyPyAxMCUgZmVtYWxlLiBUaGUgZmlndXJlcyBvbiB3b21lbiBpbiBjb21wdXRlciBzY2llbmNlIGFjcm9zcyB0aGUgbmF0aW9uLCBhY3Jvc3MgdGhlIGVudGlyZVxyXG4gIGluZHVzdHJ5IGFyZSBub3QgaW1wcm92aW5nLCBidXRcclxuICA8aT5kZWNsaW5pbmc8L2k+P1xyXG4gIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICBcclxuICA8cD5PZiBjb3Vyc2UsIHdlJiMzOTt2ZSBoZWFyZCB0aGVzZSBzdGF0aXN0aWNzIGZyb20gYW55IGdpdmVuIGhlYWRsaW5lLCBhbmQgaW4gdGhlIGhhbGxzIGFjcm9zcyB0aGUgdW5pdmVyc2l0eSBsYW5kc2NhcGUsXHJcbiAgc3RhcnRpbmcgd2l0aCBXb21lbiBpbiBTVEVNIChTY2llbmNlLCBUZWNoLCBFbmdpbmVlcmluZywgTWF0aGVtYXRpY3MpIHByb2dyYW1zLlxyXG4gIDxzdXA+Mzwvc3VwPiBZZXQsIHdoeSwgd2l0aCBzbyBtdWNoIG1vbmV5LCBzbyBtYW55IHByb2dyYW1zLCBzbyBtYW55IG5vbi1nb3Zlcm5tZW50YWwsIG5vbi1wcm9maXQgZWZmb3J0PzwvcD5cclxuICBcclxuICA8cD5JIGFyZ3VlIHRoYXQgdGVjaFxyXG4gIDxpPmNsaW1hdGUgPC9pPiBpcyBkaXJlY3RseSB0byBibGFtZS4gV2hvIHRoZW4/IE5vdCBhIHBlcnNvbiwgYnV0IHByaW5jaXBsZXMgYXJlIHRvIGJsYW1lLiBDdWx0dXJlLS1vZnRlbiBkZWZpbmVkIGFzXHJcbiAgc2hhcmVkIGJlbGllZnMsIG5vcm1zLCBsYW5ndWFnZSBhbmQgYmVoYXZpb3JzLS1jYW4gaGFyZGx5IGJlIGNoYW5nZWQsIGJ1dCBpdCBjYW4gYmUgdW5kZXJzdG9vZC5cclxuICA8YnIgLz4gVGhlcmUgaXMgYSBib29rLCBjYWxsZWQgJnF1b3Q7UHJvZ3JhbSBvciBiZSBQcm9ncmFtbWVkXHJcbiAgPHN1cCBpZD1cIjI0LTRcIj40PC9zdXA+XHJcbiAgPC9wPlxyXG4gICwgYnkgd2hpY2ggdGhlIGF1dGhvciBleHBsYWlucyBzb2NpYWwgY29uc2VxdWVuY2VzIG9mIGEgZGljaG90b21pemVkIHNvY2lldHktLWJldHdlZW4gdGhvc2UgdGhhdCBtYW5pcHVsYXRlIHRoZSBlbnZpcm9ubWVudFxyXG4gIGFyb3VuZCB0aGVtLCB3aGV0aGVyIGF1dG9tYXRpbmcgdGFza3MgYXQgd29yaywgb3Igc2ltcGx5IGZpeGluZyBhIHNpbXBsZSBzb2Z0d2FyZSBidWcsIGJ5IGFkZGluZyBhIGNvbW1hLiBUaGlzIGxpdGVyYWN5XHJcbiAgb2YgdGhlIEN1cnJlbnQgRXJhIGlzIGFraW4gdG8gdGhlIDI2LWxldHRlciBhbHBoYWJldCBvZiB3cml0dGVuIHNlbnRlbmNlcyBhbmQgcGFyYWdyYXBocywgYW5kLS1ub3QgdG8gYmUgdGFrZW4gZm9yXHJcbiAgZ3JhbnRlZC0taXMgdGhlIGV4Y2x1c2l2ZSBmb3JtIG9mIGNvbW11bmljYXRpb24sIG91dHNpZGUgb2YgYSAxMDAtZm9vdCBwZXJpbWV0ZXIsIHVwIHVudGlsIDE1MCB5ZWFycyBhZ28uIEtub3dsZWRnZVxyXG4gIGlzIG5vdCBwb3dlciwgdGhlIGNvbW11bmljYXRpb24gb2Yga25vd2xlZGdlIGlzIHBvd2VyLlxyXG4gIFxyXG4gIDxwPiZuYnNwOzwvcD5cclxuICBcclxuICA8cD5JIGFyZ3VlIHRoYXQgdG9kYXksIHRoZSBwb3dlciBpcyB0byBwcm9ncmFtIG9uZSBhcHBsaWNhdGlvbiBwcm9ncmFtbWluZyBpbnRlcmZhY2UgKEFQSSkgdG8gdGFsayB0byBhbm90aGVyIEFQSS4gSW5cclxuICBvdGhlciB3b3JkcywgdGhlIGFiaWxpdHkgdG8gZGlyZWN0bHkgY29tbXVuaWNhdGUgd2l0aCBzb2Z0d2FyZSBhdCB0aGUgY29tbWFuZC1saW5lIGlzIG5vdCBub3cgYSByZXF1aXNpdGUgc2tpbGwsXHJcbiAgYnV0IHByb21vdGlvbnMgd291bGQgbm90IGVzY2FwZSB0aGlzIG5lY2Vzc2l0eSEgU28sIG5vdyByZXZlcnRpbmcgYmFjayB0byB0aGUgc3ViamVjdCBvZiB3b21lbiBpbiB0ZWNoLCBBbWVyaWNhblxyXG4gIGxlYWRlcnNoaXAgaXMgaW4gZGVlcCBwZXJpbCB3aXRob3V0IG1vcmUgZmVtYWxlIGluc2lnaHQuIEkgd2lsbCBmaW5pc2ggYnkgY2l0aW5nIHRoYXQgQXJlcywgdGhlIHZpb2xlbnQsIHVudGFtZWRcclxuICBHcmVla1xyXG4gIDxpPmdvZCBvZiB3YXI8L2k+LCBjYW5ub3QgYWx3YXlzIGRyaXZlIHRoZSBDYXBpdGFsaXN0IGVuZ2luZTsgYmVjYXVzZSBTaGUsIEF0aGVuYSwgdGhlXHJcbiAgPGk+Z29kZGVzcyBvZiBpbnRlbGxpZ2VuY2U8L2k+IHJlcHJlc2VudHMgdHJ1ZSBzdHJhdGVneSE8L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaHVmZmluZ3RvbnBvc3QuY29tLzIwMTUvMDMvMjcvd29tZW4taW4tdGVjaF9uXzY5NTU5NDAuaHRtbFwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lmh1ZmZpbmd0b25wb3N0LmNvbS8yMDE1LzAzLzI3L3dvbWVuLWluLXRlY2hfbl82OTU1OTQwLmh0bWw8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPjIuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vZmFpcnlnb2Rib3NzLmNvbS9hcnRpY2xlcy93b21lbi1pbi10ZWNoLWZhY3RzLWZpZ3VyZXMtYW5kLXBlcmNlbnRhZ2VzXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9mYWlyeWdvZGJvc3MuY29tL2FydGljbGVzL3dvbWVuLWluLXRlY2gtZmFjdHMtZmlndXJlcy1hbmQtcGVyY2VudGFnZXM8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPjMuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmFhdXcub3JnL3Jlc2VhcmNoL3doeS1zby1mZXcvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYWF1dy5vcmcvcmVzZWFyY2gvd2h5LXNvLWZldy88L2E+XHJcbiAgPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0NCA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2hpbGUgY29kaW5nIHVwIGEgYmV0dGVyIHNoZWxsIGZvciB0aGlzIHdlYnNpdGUsIEkgdGhvdWdodCBpdCYjMzk7cyByZW1hcmthYmxlIGhvdyBvdXIgbGl2ZXMgZ2V0IGVhc2llciBhbmQgZWFzaWVyXHJcbiAgd2l0aCBlYWNoIHBhc3NpbmcgeWVhciBvZiB0ZWNoLiBVc2luZyBKYXZhU2NyaXB0LS10aGUgcHJpbW9yZGlhbCB3ZWItY29kaW5nIGxhbmd1YWdlLS1JIG1hcnZlbCBhdCB0aGUgY29udmVuaWVuY2VcclxuICBvZiBkZWxlZ2F0aW5nIG11bmRhbmRlIGNvZGluZyBzdHVmZiB0byB0YXNrcnVubmVycywgbGlrZVxyXG4gIDxpPkd1bHA8L2k+LS1hIHByb2dyYW1tYWJsZSBwYWNrYWdlIG1hbmFnZXIgdGhhdCAmcXVvdDtidW5kbGVzJnF1b3Q7IHVwIHRoZSBsaWJyYXJpZXMgdG8gYmUgdXNlZCBpbiB0aGUgYXBwLiBJdCBpc1xyXG4gIHRydWx5IGEgam95ITwvcD5cclxuICBcclxuICA8cD5JIHdyaXRlIGZvdXIgc3R5bGluZ1xyXG4gIDxpPmZ1bmN0aW9uczwvaT4sIHdpdGggYWJvdXQgMTZcclxuICA8aT52YXJpYWJsZXM8L2k+IGFuZCB2b2lsJmFncmF2ZTshIEkgZmluaXNoIGluIDMgaG91cnMgd2hhdCB3b3VsZCBoYXZlIHRha2VuIG1lIDE1IGhvdXJzLCB0aGVuIGFub3RoZXIgNSBob3VycyBhIG1vbnRoXHJcbiAgZm9yIHVwa2VlcC4gSW5zdGVhZCwgbm93LCBpdCYjMzk7cyBhcyB0aG91Z2ggSSB3aW5kIHVwIHRoZSBjbG9jaywgYW5kIG5lZWQgb25seSBwZXJpb2RpY2FsbHkgY2hlY2ssIGFuZCBwZXJoYXBzXHJcbiAgdXBkYXRlIGEgdmFyaWFibGUgb3IgdHdvIC4uLiBUZWNobm9sb2d5LiBJJiMzOTttIGd1c2hpbmcgZm9yIGpveS48L3A+XHJcbiAgXHJcbiAgPHA+VGhpcyB3YXMgbWVyZSBKYXZhU2NyaXB0LS13aXRoIGEgdHJ1bHlcclxuICA8aT5UdXJpbmcgQ29tcGxldGU8L2k+LS1wYW4tYWxnb3JpdGhtIHN0YXR1cy0tbGFuZ3VhZ2VzLCB0aGUgcG9zc2liaWxpdGllcyBhcmUgMTAwLWZvbGQgd2l0aCBQeXRob24gbGFuZ3VhZ2UgbGlicmFyeVxyXG4gIGNvbGxlY3Rpb247IHRoaXMgbGlicmFyeSBjb2xsZWN0aW9uIGluY2x1ZGVzIE5BU0EgbW9kdWxlcywgbWF0aGVtYXRpY2FsIHByb29mcywgYW5kIGxpbWl0bGVzcyB1c2VzIGZyb20gd2ViLXNjcmFwaW5nXHJcbiAgZm9yIHVuc3RydWN0dXJlZCBkYXRhIHRvIGFuIGV4Y2VsbGVudCBkYXRhIHZpc3VhbGl6YXRpb24gY29sbGVjdGlvbi4gU29tZXRpbWVzIEkgZmVlbCBsaWtlIEkmIzM5O20gaW4gdGhlIExpYnJhcnlcclxuICBvZiBDb25ncmVzcywgYW5kIGJldHRlciB5ZXQgYmVjYXVzZSwgUElQLCB0aGUgUHl0aG9uIHBhY2thZ2UgbWFuYWdlciBhY3RzIGFuZCBhdXRvbWF0ZXMgbGlrZSBhIGN5Ym9yZyBsaWJyYXJpYW4sXHJcbiAgZm9yIGxhY2sgb2YgYmV0dGVyIGltYWdlcnkuPC9wPlxyXG4gIFxyXG4gIDxwPkkganVzdCBoYXZlIHNvIG11Y2ggam95IHdhdGNoaW5nIGEgcHJvamVjdCBjb21lIHRvIGxpZmUsIGFuZCBpdCYjMzk7cyBldmVuIGEgZ3JlYXRlciBkZWxpZ2h0IGlmIHRoaXMgcHJvamVjdCBjb21lc1xyXG4gIHRvIGxpZmUgYW5kIHN0YXlzIGFsaXZlLCB0aHJvdWdoIHRoZSBqb3lzIG9mIGF1dG9tYXRpb24hPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MyA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+SSBtdXN0IGNvbmZlc3MgdGhhdCBvbiB0aGUgdmVyeSBkYXkgdGhhdCBPdXIgRGFpbHkgVGVjaCBCbG9nIGdldHMgYW4gdW5kZXItdGhlLWhlYWQgbWFrZS1vdmVyIGZvciBzZWN1cml0eSYjMzk7c1xyXG4gIHNha2UsIEkgd3JvdGUgdGhlIG5ldyBmb3JtYXR0aW5nIGZpbGUgcmlnaHQgb3ZlciB0b2RheSYjMzk7cyBwb3N0LiBBbWF6aW5nLCBhbmQgdGhlIHR3byBvY2N1cnJlZCBuZWFybHkgc2ltdWx0YW5lb3VzbHlcclxuICBhcyBJIHdvcmtlZCBvbiB0aGVtLCB0aGVpciBwYXRocyBjcm9zc2VkIGFuZCBwb29mLCBnb25lISBTYW1lIHBsYXRmb3JtLCBhbmQgSSBwYWlkIHRoZSBwcmljZSEgV2hldGhlciBJIGNoYW5nZSBteVxyXG4gIHdheXMgaXMgeWV0IHRvIGJlIHNlZW4sIGJ1dCBJIHNoYWxsIGNvbnRpbnVlIHdpdGggbXkgb3JpZ2luYWwgdGhlbWUgZm9yIHRoZSBkYXksIG5hbWVseSwgU3VzdGFpbmFiaWxpdHksIGEuay5hLlxyXG4gIENhcmJvbiBGb290cHJpbnQuPC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5Qb3dlciBjb25zdW1wdGlvbiBpcyBvbmUgb2YgdGhlIG1ham9yIGNvc3RzIG9mIGJpdGNvaW4gbWluaW5nLCBhcyBkZWRpY2F0ZWQgbWFjaGluZXMgY3J1bmNoIHRoZSBhbGdvcml0aG1zIHRoYXQgYnVpbGRcclxuICBhIHJlY29yZCBvZiBldmVyeSBzaW5nbGUgYml0Y29pbiB0cmFuc2FjdGlvbiBhbmQgYXJlIHJld2FyZGVkIHdpdGggdGlueSBmcmFjdGlvbnMgb2YgYSBiaXRjb2luIGZvciB0aGVpciBlZmZvcnRzLlxyXG4gIDxzdXAgPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+VG9kYXkgSSBoYXZlIGEgbWlsZCBDcml0aXF1ZSBhbmQgUHJhaXNlIGZvciB0aGUgYmxvY2tjaGFpbiBzdXN0YWluYWJpbGl0eSBwcm9ibGVtIGNhdXNlZCBieSBza3ktaGlnaCBlbGVjdHJpY2l0eVxyXG4gIGJpbGxzISBDb21wdXRlciBhbGdvcml0aG1zIGRvIHdhc3RlIGVsZWN0cmljaXR5LCBub3QgbGlrZSB5b3VyIFdpZGVzY3JlZW4uIE1vcmUgZWxlY3RyaWNpdHkgaXMgZ29iYmxlZCB1cCBieSBzbWFsbFxyXG4gIGFuZCBsYXJnZSBtaW5pbmcgb3BlcmF0aW9ucyBpbiBuZWFybHkgZXZlcnkgY291bnRyeSB0aGFuIHNtYWxsIG5hdGlvbnMhXHJcbiAgPHN1cCA+MTwvc3VwPi4gRXRoZXJldW0sIEJpdGNvaW4gYW5kIGEgaGFuZGZ1bCBvZiBvdGhlciAmcXVvdDtQcm9vZi1vZi1Xb3JrJnF1b3Q7IGRlc2lnbnMgcmVxdWlyZSBlbGVjdHJpY2l0eSBiZWNhdXNlXHJcbiAgdGhlIGludmVzdG1lbnQgaW4gZXF1aXBtZW50IGl0c2VsZiBpcyBpbnZlc3RtZW50LCBidXQgbW9yZSBpbXBvcnRhbnRseSwgdHdvLXdheSBpbmNlbnRpdmF0aW9uIGZvciBtaW5pbmcgZHJpdmVzXHJcbiAgdGhlIHN5c3RlbSwgYW5kIHRoZSBzY2FyY2l0eSBkZW1hbmQgdGhyb3VnaCBkaWZmaWN1bHR5IGNvbXB1dGF0aW9ucy48L3A+XHJcbiAgXHJcbiAgPHA+U28sIGlzIHRoZSBlbGVjdHJpY2l0eSBjb25zdW1wdGlvbiByZWFsbHlcclxuICA8aT5jb3JyZWxhdGVkPC9pPiB3aXRoIHRoZSB2YWx1ZSwgc2NhcmNpdHksIG9mIHRoZSBjdXJyZW5jeT8gWWVzLiBEaWdpY29ub21pc3QtLWEgY3J5cHRvY3VycmVuY3kgYW5hbHlzaXMgc2l0ZVxyXG4gIDxzdXBcclxuICBpZD1cImRpZ2ljb25vbWlzdFwiPjM8L3N1cD4gZXN0aW1hdGVzXHJcbiAgPGk+ZWFjaDwvaT5FdGhlcmV1bSB0cmFuc2FjdGlvbiByZXByZXNlbnRzIGEgNDUgS2lsb3dhdHQtaG91ciBvZiBlbGVjdHJpY2l0eSYjMzk7cyBtaW5pbmcuIChBIHZpc2EgY3JlZGl0IGNhcmQgdHJhbnNhY3Rpb25cclxuICBpcyAwLjAwNjUxIGtXaC4gVGhlIGVudGlyZSBFdGhlcmV1bSBnbG9iYWwgYmxvY2tjaGFpbiBjb3VsZCBiZSAmcXVvdDt1c2luZyBhcyBtdWNoIGFzIDQuMiBUZXJhd2F0dC1ob3VycyAodFdoKSxcclxuICBvciBzbGlnaHRseSBtb3JlIHRoYW4gdGhlIGNvdW50cnkgb2YgQ3lwcnVzXHJcbiAgPHN1cCAgPjE8L3N1cD4uJnF1b3Q7IFNvLCBlbGVjdHJpY2l0eSBjb21wYXJpc29ucyBhcmUgdGVsbGluZywgYnV0IGhvdyBkb2VzIHRoaXMgcmVsYXRlIHRvIGl0cyBlbnZpcm9ubWVudCBpbXBhY3QsIHN1c3RhaW5hYmlsaXR5XHJcbiAgaXRzZWxmPzwvcD5cclxuICBcclxuICA8cD5DYXJib24gRm9vdHByaW50LCBvdXIgZW5lcmd5IGNvbnN1bXB0aW9uIGluZGV4LCBjYW4gYmUgY29tcGFyZWQgdG8gYW5vdGhlciBlbGVtZW50IG9mIHNjYXJjaXR5LCB3aGljaCBkaWN0YXRlcyBmbHVjdHVhdGlvbnNcclxuICBpbiB2YWx1ZTogR29sZC4gQWNjb3JkaW5nIHRvXHJcbiAgPGk+RGlnaWNvbm9taXN0PC9pPiwgYW4gYXZlcmFnZSBob3VzZWhvbGQmIzM5O3MgQ2FyYm9uIEZvb3RwcmludCBpcyBhYm91dCAxMCB0b25zIG9mIENPMiBwZXIgeWVhci4gVGhlIGFydGljbGUgZG9lc1xyXG4gIHRoZSBtYXRoIGZvciB1cyB2ZXJ5IHN1Y2NpbmN0bHk6PC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5PbiB0b3Agb2YgdGhpcywgd2UgY2FuIGZpbmQgdGhhdCB0aGUgcHJvY2VzcyBvZiBtaW5pbmcgQml0Y29pbiBpc24mcnNxdW87dCBqdXN0IG1vcmUgZW5lcmd5LWludGVuc2l2ZSwgYnV0IGFsc28gaGFzXHJcbiAgYSBiaWdnZXIgZW52aXJvbm1lbnRhbCBpbXBhY3QuIFRvIHJlYWNoIHRoYXQgY29uY2x1c2lvbiwgd2UgZmlyc3QgbmVlZCB0byBlc3RpbWF0ZSB0aGUgY2FyYm9uIGZvb3RwcmludCBmb3IgYm90aC5cclxuICBGb3IgQml0Y29pbiB3ZSBjYW4sIGFnYWluLCBnZXQgdGhpcyBudW1iZXIgZnJvbSB0aGUgQml0Y29pbiBFbmVyZ3kgQ29uc3VtcHRpb24gSW5kZXguIEZvciBnb2xkLCB3ZSBhc3N1bWUgYSBjYXJib25cclxuICBmb290cHJpbnQgb2YgMjAgdG9ucyBvZiBDTzJlIHBlciBldmVyeSBraWxvZ3JhbSBvZiBnb2xkIG1pbmVkXHJcbiAgPHN1cCA+Mzwvc3VwPi48L3A+XHJcbiAgXHJcbiAgPHA+VGhlIGFydGljbGUgY29udGludWVzIHRvIGNsYXJpZnkgdGhhdCAzMywwMDAga2lsb2dyYW1zIG9mIENPMiBwZXIgdW5pdCBtaW5lcyAoY29tcGFyYXRpdmVseSwgb25lIEJpdGNvaW4mIzM5O3Mgd29ydGhcclxuICBvZiBHb2xkIGlzIDQsMDAwIGtpbG9ncmFtcyBvZiBDTzIpLiBBdCB0aGUgZW5kIG9mIHRoZSBkYXksIHRoZSBlbGVjdHJpY2l0eSBjb3N0cy0taWYgbm90IHN1c3RhaW5hYmxlIGxvbmctdGVybS0tY291bGRcclxuICBzcGVsbCB0cm91YmxlLiBIZW5jZSwgdGhlIHRocmVlIFMmIzM5O3MsIG1lbnRpb25lZCBsYXN0LCBzdXN0YWluYWJpbGl0eSBpcyBwZXJoYXBzIGEgbGFyZ2VyIGlzc3VlIHRoYW4gYmxvY2tjaGFpblxyXG4gIFNlY3VyaXR5IGFuZCBTY2FsYWJpbGl0eSBjaGFsbGVuZ2VzLiBBZ2FpbiwgdGhpcyBpcyBhIHByb2JsZW0gdGhhdCB0aGUgdGhpcmQgbGFyZ2VzdCBjcnlwdG9jdXJyZW5jeSBkb2VzIG5vdCBoYXZlOlxyXG4gIDxpPlJpcHBsZTwvaT4sIHdoaWNoIGRvZXMgbm90IGJlYXIgYSBjYXJib24gZm9vdHByaW50XHJcbiAgPHN1cCA+NDwvc3VwPi48L3A+XHJcbiAgXHJcbiAgPHA+Jm5ic3A7PC9wPlxyXG4gIFxyXG4gIDxwPjAuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNuZXQuY29tL2hvdy10by9iaXRjb2luLWV0aGVyZXVtLW9yLWxpdGVjb2luLXdoaWNoLWNyeXB0b2N1cnJlbmN5LWlzLWJlc3QtZm9yLXlvdS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9ob3ctdG8vYml0Y29pbi1ldGhlcmV1bS1vci1saXRlY29pbi13aGljaC1jcnlwdG9jdXJyZW5jeS1pcy1iZXN0LWZvci15b3UvPC9hPlxyXG4gIDxiciAvPiBGb3IgdGhvc2UgbmV3IHRvIGNyeXB0b2N1cnJlbmNpZXMsIHRoaXMgaXMgYSBmYWlybHkgc3VjY2luY3QgYXJ0aWNsZSB0byBjcnlwdG9jdXJyZW5jaWVzLCBhbmQgdGhlaXIgdW5kZXJseWluZ1xyXG4gIHN0cnVjdHVyZS48L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9tb3RoZXJib2FyZC52aWNlLmNvbS9lbl91cy9hcnRpY2xlL2Qzem45YS9ldGhlcmV1bS1taW5pbmctdHJhbnNhY3Rpb24tZWxlY3RyaWNpdHktY29uc3VtcHRpb24tYml0Y29pblwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9tb3RoZXJib2FyZC52aWNlLmNvbS9lbl91cy9hcnRpY2xlL2Qzem45YS9ldGhlcmV1bS1taW5pbmctdHJhbnNhY3Rpb24tZWxlY3RyaWNpdHktY29uc3VtcHRpb24tYml0Y29pbjwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiaHR0cDovL3d3dy53aXJlZC5jby51ay9hcnRpY2xlL2hvdy1tdWNoLWVuZXJneS1kb2VzLWJpdGNvaW4tbWluaW5nLXJlYWxseS11c2VcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vd3d3LndpcmVkLmNvLnVrL2FydGljbGUvaG93LW11Y2gtZW5lcmd5LWRvZXMtYml0Y29pbi1taW5pbmctcmVhbGx5LXVzZTwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9kaWdpY29ub21pc3QubmV0L2JpdGNvaW4tbWluaW5nLW1vcmUtcG9sbHV0aW5nLXRoYW4tZ29sZC1taW5pbmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2RpZ2ljb25vbWlzdC5uZXQvYml0Y29pbi1taW5pbmctbW9yZS1wb2xsdXRpbmctdGhhbi1nb2xkLW1pbmluZzwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+NC5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9yaXBwbGUuY29tL3hycC9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3JpcHBsZS5jb20veHJwLzwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDIgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkluIG15IHJlZmxlY3Rpb25zIGFib3V0IGVudmlyb25tZW50IHN1c3RhaW5hYmlsaXR5IGlzc3VlcywgSSBjb25mZXNzIEkmIzM5O20gc29ydCBvZiBhIGh5cG9jcml0ZSAuLi4gVGhlIHdob2xlIG1hdHRlclxyXG50aGF0IGNhdXNlZCBteSBvd24gaW50cm9zcGVjdGlvbiBiZWdpbnMgd2l0aCBteSB1c3VhbCBkYWlseSB2ZXhhdGlvbjogVGFuZ2xlcyBvZiB3aXJlcyFcclxuPGJyIC8+ICZuYnNwOyAuLi4gSSYjMzk7dmUgYmVlbiBoYXZpbmcgZWxlY3RyaWNpdHkgaXNzdWVzLCBoZXJlIGFzIG9mIGxhdGUgLi4uPC9wPlxyXG5cclxuPHA+T24gb25lIHNpZGUsIG15IHRpbnkgWW9nYSBVbHRyYWJvb2sgdXN1YWxseSBsaWtlcyB0byBjaGFyZ2UganVzdCBmaW5lIHdpdGggbXkgcGhvbmUgY2hhcmdlci0taWYgSSYjMzk7bSBzdHVjayB3aXRob3V0XHJcbm15IGNoYXJnZXIuIEFuZCBkdWUgdG8gYW4gdW50aW1lbHkgZW5kIHRvIHRoZSBjaGFyZ2VyLCBJIG5lZWRlZCBhIHJlcGxhY2VtZW50LiBTbywgc2luZ3VsYXIgZXJyYW5kIG9mIHRoZSBkYXkgd2FzXHJcbmEgdHJpcCB0byBCZXN0IEJ1eSB0byBwZXJ1c2UgZm9yIGEgNDUtV2F0dCBVU0ItQyBjaGFyZ2VyICggdGhlIG5ldyBvdmFsIGNoYXJnaW5nIHBvcnQgb24gU2Ftc3VuZyA4JiMzOTtzLCBMRyBHNiYjMzk7c1xyXG5hbmQgbmV3ZXIgQXBwbGUgcHJvZHVjdHMpLjwvcD5cclxuXHJcbjxwPk1lYW53aGlsZSwgbXkgY3JlZGl0LWNhcmQgc2l6ZWQgUmFzcGJlcnJ5IFBpIGNvbXB1dGVyIHJ1bnMgb24gYW4gb2xkLXNjaG9vbCBVU0IgY2hhcmdlci0tYSB3aG9sZSBMaW51eCBTZXJ2ZXIgVG93ZXJcclxub24gYSBjZWxsLXBob25lIGNoYXJnZXIuIFRoZW4sIHdlIGhhdmUgbXkgdHJ1c3R5IERlbGwgKGFjdHVhbCkgVG93ZXIgd2l0aCAxNiBHaWdzIG9mIFJBTSwgMi10ZXJhYnl0ZXMsIGV0Yy4gdGhhdFxyXG5hbHNvIHNlZW1zIHRvIG5lZWQgYW4gZXh0cmEgZmFuIHRvIHN0YXkgY29vbC0tcHJvYmFibHkgdGhlIHN1c3RhaW5hYmlsaXR5IG9mIDEwMCBSYXNwYmVycnkgY29tcHV0ZXJzLiBNeSBlbnRpcmVcclxuY2FyYm9uIGZvb3RwcmludCBjaGFuZ2VzIG1vcmUgd2l0aCB0aGUgZWxlY3RyaWNhbCBwcm9kdWN0cyB0aGF0IEkgdXNlLCB0aGFuIG15IHZlaGljbGUhIFdlbGwsIEkgYWxzbyBjb25mZXNzIG15XHJcbkplZXAgQ2hlcm9rZWUgY2FuJiMzOTt0IGV2ZW4gYm9hc3QgMjAgbWlsZXMgcGVyIGhvdXIgLi4uIG9vcHMsIGNvbnNjaWVuY2UgcGFuZ3MsIG91Y2ggLi4uIFdlbGwsIGh5cG9jcml0aWNhbCwgc2xpZ2h0bHksXHJcbmJ1dCBmb3VuZCBub3QgZ3VpbHR5IHNpbmNlIEkmIzM5O20gYSBiaWtlLWNvbW11dGVyIGZvciBsaWZlITwvcD5cclxuYFxyXG4gIHZhciBibG9ncG9zdDEgPSBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5FbnZpcm9ubWVudGFsIFN1c3RhaW5hYmlsaXR5LCBhZ2FpbiwgYW5kIGEgaGlnaGVyLWxldmVsIHZpZXcgb2YgdGhlIGRpbGVtbWVhLi4uSSBjb3VsZG4mIzM5O3QgcmVzaXN0OlxyXG48YnIgLz4gQml0Y29pbiYjMzk7cyBJbml0aWFsIENvaW4gT2ZmZXJpbmcgd2FzIDIwMTEgb3Igc28sIHRoZW4gRXRoZXJldW0sIHdpdGggRXRoZXIgZm9yIGN1cnJlbmN5IHdhcyAyMDE1OyBUaGVzZSB0d28sXHJcbmV2ZXIgc28gcHJlc2NpZW50IGRlc2lnbnMsIGFsc28gaGF2ZSB0aGVpciBBY2hpbGxlcyBIZWFsLiBUaGVzZSB0d28gYXJlXHJcbjxzdHJvbmc+JnF1b3Q7UHJvb2Ygb2YgV29yayZxdW90OyBjdXJyZW5jeSBhbGdvcml0aHNtczwvc3Ryb25nPi4gVGhpcyBtZWFucyB0aGF0IHRoZSAmcXVvdDtEZW1hbmQmcXVvdDsgc2lkZSBvZiBzdXBwbHktYW5kLWRlbWFuZCxcclxuZGVyaXZlcyBmcm9tXHJcbjxpPmRpZmZpY3VsdHkgbGV2ZWxzPC9pPiBvZiBjcnlwdG8tYmxvY2tzIHRvIG1pbmUuIFNvLCBtaW5lcnMgYXJlIGluY2VudGl2aXplZCB0byBzcGVuZCAkMTUwMCBvbiBhIHNlbWktbWVkaW9jcmUtZ29vZFxyXG5taW5pbmcgcmlnICh3aGljaCBpcyBiYXNpY2FsbHkgMjAgTlZJRElBIEdyYXBoaWNzIENhcmRzIHRpZWQgdG9nZXRoZXIgdG8gc3RhY2sgb2YgdHdvLWJ5LWZvdXJzIHdpdGggbG90cyBvZiBmYW5zXHJcbi4uLiBlcmhlbSwgc3VzdGFpbmFiaWxpdHk/Li4uPC9wPlxyXG5cclxuPHA+QW5kIGZvciBlYWNoIGJsb2NrIHRoYXQgaXMgJnF1b3Q7c29sdmVkJnF1b3Q7LCBoZW5jZSB0aGUgYmxvY2sgYmVpbmcgdmFsaWRhdGVkLCBhbmQgc29tZWJvZHkmIzM5O3MgY3J5cHRvY3VycmVuY3lcclxucHVyY2hhc2UvdHJhbnNhY3Rpb24gaXMgcmVzb2x2ZWQhICh0YWtlcyBhYm91dCAxMiBtaW51dGVzIGZvciB0aGUgd2hvbGUgZ2xvYmFsIGJsb2NrY2hhaW4gdG8gY3ljbGUsIGFuZCBFdGhlcmV1bVxyXG5pcyBsZXNzIHRoYW4gYSBtaW51dGUpLiBTbywgdGhlIHdob2xlIGN5Y2xlIGNvbnRpbnVlcywgY2h1cm5pbmcgdGhyb3VnaCBjb2FsLSBhbmQgY2FyYm9uLXN0YWluZWQgaGFuZHMgb2YgdGhlIGVsZWN0cmljaXR5XHJcbmZlZCB0byB0aGVzZSBjcnlwdG8tbWluaW5nIHJpZ3NcclxuPHN1cD4xPC9zdXA+LiBGb3IgbWFueSBpdCYjMzk7cyBhIGhvYmJ5LCBsaWtlIHRoZSBCcml0aXNoIEhvYmJ5aXN0cyYjMzk7IGxvdmUgZm9yIGhhbS0gYW5kIHNob3J0LXdhdmUgcmFkaW8gc2V0dXBzLCB5ZXRcclxudGhpcyBwcm9maXRhYmxlLCB5ZXQgcGFydGljdWxhciBob2JieSByZXNlbWJsZXMgdGhlIDE4NzAmIzM5O3MgY29hbCBmYWN0b3J5IHNtb2tlIHN0YWNrcyBpbiBTb3V0aCBMb25kb24hPC9wPlxyXG5cclxuPHA+TGV0JiMzOTtzIGZhY2UgaXQsIGlmIEV0aGVyZXVtIGlzIGFibGUgdG8gc3VjY2Vzc2Z1bGx5IGhhcmQtZm9yayB0byBhIFByb29mLW9mLVN0YWtlIHN5c3RlbSBzb29uLS1hbmQgVml0YWxpayBCdXRlcmluXHJcbmFuZCBoaXMgY3JldyBhc3N1cmUgdXMgaXQgaXMgY29taW5nXHJcbjxzdXA+Mjwvc3VwPi0tdGhlbiBncmVhdC0tcHJvYmxlbSBzb2x2ZWQsIGV2ZXJ5dGhpbmcgZXZlbnR1YWxseSBjb252ZXJ0cyB0byBFdGhlcmV1bS4gSWZcclxuPGk+bm90PC9pPnRoZXkgZmFjZSBhbiBleGlzdGVudGlhbCB0aHJlYXQuIEJlY2F1c2UsIGluIGEgbW9yZSBlbmxpZ2h0ZW5lZCB0ZW4geWVhcnMgZnJvbSBub3csIHRob3NlIG1pbmluZyBkZXBvdHNcclxuPGk+d291bGQ8L2k+IGxvb2sgbGlrZSB1bmZldHRlcmVkIGZhY3Rvcnkgc21va2Utc3RhY2tzLiBQcm9vZi1vZi1TdGFjaywgd2hvc2UgY3VycmVuY3kgdmFsdWUgaXMgbm90IHNldCB0byBkaWZmaWN1bHRcclxub2YgYWxnb3JpdGhtIHB1enpsZSAoaGVuY2UsXHJcbjxpPnByb29mLW9mLXdvcms8L2k+LCBidXQgcmF0aGVyIHRvIG93bmVyc2hpcCBvZiAmcXVvdDt2b3RpbmcgcG9vbHMmcXVvdDssIHdoaWNoIGlzIGFcclxuPGk+XHJcbjxzdHJvbmc+Q29uc2Vuc3VzLUJhc2VkIEJsb2NrY2hhaW4gYWxnb3JpdGhtPC9zdHJvbmc+XHJcbjwvaT4gW0NvbXBsZXggc3ViamVjdCBiZXN0IHJlc2VydmVkIGZvciBhIHJhaW55IGRheSwgb3IgYmV0dGVyIHlldCwgbm8gZGF5ISBJIG1heSByZXZpc2l0IHRoaXMgYWx0ZXJuYXRpdmUgaW4gYSBmdW5uZXJcclxud2F5LCBoZXJlJiMzOTtzIGEgZ2xpbXBzZSBmcm9tIFZpdGFsayYjMzk7cyBAVml0YWxpa0J1dGVyaW4gdHdlZXQgeWVzdGVyZGF5OjwvcD5cclxuXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5RdWVzdGlvbiBmb3IgbWF0aGVtYXRpY2lhbnM6IGlzIHRoZXJlIGEgYXNzdW1lZC10by1iZS1ub3JtYWwgbnVtYmVyIChpZS4gZGlnaXRzIGFyZSByYW5kb20sIGxpa2UgcGkgb3IgZSkgd2hlcmUgeW91XHJcbmNhbiBjYWxjdWxhdGUgdGhlIG50aCBkaWdpdCBpbiBsb2cobikgKG9yIGV2ZW4gcG9seWxvZyhuKSkgdGltZT8gSWYgc28sIHRoZW4gSCh4KSA9IGRpZ2l0c1t4IC4uLiB4KzEwMF0gc2VlbXMgbGlrZVxyXG5pdCB3b3VsZCBiZSBhIGNvb2wgY3J5cHRvZ3JhcGhpYyBoYXNoIGFsZ28uPC9wPlxyXG5cclxuPHA+Tm93LCBJIGFtIGJ5IG5vIG1lYW5zIGEgZGV0ZWN0aXZlLCBidXQgYnkgdGhlIHNvdW5kIG9mIHRob3NlIHR3ZWV0cywgdGhlIFByb29mLW9mLVdvcmsgYWxnb3JpdGhtIHNlZW1zIHRvIHN0aWxsIGJlXHJcbm9mIHV0bW9zdCBpbXBvcnRhbmNlIC4uLjwvcD5cclxuXHJcbjxwPjEuXHJcbjxhIGhyZWY9XCJodHRwczovL2Jsb2NrZXhwbG9yZXIuY29tL25ld3MvZXRoZXJldW0tbGF1bmNoZXMtY2FzcGVyLXRlc3RuZXQtcGF2aW5nLXdheS1wcm9vZi1zdGFrZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2Jsb2NrZXhwbG9yZXIuY29tL25ld3MvZXRoZXJldW0tbGF1bmNoZXMtY2FzcGVyLXRlc3RuZXQtcGF2aW5nLXdheS1wcm9vZi1zdGFrZS88L2E+IGFuZCBhbHNvLFxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cudHJ1c3Rub2Rlcy5jb20vMjAxNy8xMS8yOC9ldGhlcmV1bXMtcHJvb2Ytc3Rha2UtY2FzcGVyLXRlc3RuZXQtbmVhcnMtbGF1bmNoXCJcclxudGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudHJ1c3Rub2Rlcy5jb20vMjAxNy8xMS8yOC9ldGhlcmV1bXMtcHJvb2Ytc3Rha2UtY2FzcGVyLXRlc3RuZXQtbmVhcnMtbGF1bmNoPC9hPlxyXG48L3A+IFxyXG5cclxuPHA+Q29weXJpZ2h0ICZjb3B5OyAyMDE4IEFsbCBSaWdodHMgUmVzZXJ2ZWQuICZuYnNwOyB8ICZuYnNwO1xyXG48YSBocmVmPVwiaHR0cDovL3d3dy50aG9tYXNtYWVzdGFzLm5ldFwiIHRpdGxlPVwiQ29udGFjdCBJbmZvcm1hdGlvbjogdGhvbWFzbWFlc3Rhcy5uZXQvXCI+XHJcbiAgdGhvbWFzbWFlc3Rhcy5uZXQ8L2E+Jm5ic3A7IHwgJm5ic3A7XHJcbjxpbWcgc3JjPVwiZGlzdC9pbWcvcGF5cGFsLlBOR1wiIGFsdD1cIlBheVBhbCBFbWJsZW1cIiBoZWlnaHQ9XCJcclxuMTVcIj48L2ltZz5cclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LnBheXBhbC5jb20vcGF5cGFsbWUvVGhvbWFzTWFlc3Rhc1wiIHN0eWxlPVwiY29sb3I6d2hpdGU7dGV4dC1kZWNvcmF0aW9uOm5vbmU7XCI+XHJcbiAgJm5ic3A7IEJsb2cgU3VwcG9ydCBBcHByZWNpYXRlZCE8L2E+XHJcbjwvcD5cclxuYFxyXG4gIHZhciB1cmwgPSAgXHJcbiAgICAgWyAvKlxyXG4gICAgICAge1xyXG4gICAgaWQ6ICcxNycsXHJcbiAgICBkaWQ6ICcxOC0wMi0xMCcsXHJcbiAgICBkYXRlOiAnRmViIDEwLCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4gPGg2PkZpcnN0IEJsb2cgUG9zdCE8L2g2PicsXHJcbiAgICB0aXRsZTogJ1doeSBhcmUgU29jaW9sb2dpc3RzIG5vdyB0aGUgS2V5IFBsYXllcnMgaW4gRGF0YSBBbmFseXNpcyB3aXRoaW4gdGhlIERvbWFpbiBvZiBCbG9ja2NoYWluIFRlY2hub2xvZ2llcz8nLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxNyxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSwgXHJcbiAgKi9cclxuIHtcclxuICAgIGlkOiAnMTYnLFxyXG4gICAgZGlkOiAnMTgtMDItMTEnLFxyXG4gICAgZGF0ZTogJ0ZlYiAxMSwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICB0aXRsZTogJ0hvdyBDYW4gV2UgQmVzdCBNb2R1bGFyaXplIG91ciBBcHAgRGVzaWducyBpbiBPcmRlciB0byBBY2hpZXZlIHRoZSBNdWNoIFZhdW50ZWQgJnF1b3Q7U2VwYXJhdGlvbiBvZiBDb25jZXJucyZxdW90Oz8nLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxNixcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzE1JyxcclxuICAgIGRpZDogJzE4LTAyLTEyJyxcclxuICAgIGRhdGU6ICdGZWIgMTIsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgdGl0bGU6ICdNYXJrIFp1Y2tlcmJlcmcmIzM5O3MgSW5ub2NlbmNlJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MTUsXHJcbiAgICBkb25lOiB0cnVlLFxyXG4gIH0sXHJcblxyXG4gIHtcclxuICAgIGlkOiAnMTQnLFxyXG4gICAgZGlkOiAnMTgtMDItMTMnLFxyXG4gICAgZGF0ZTogJ0ZlYiAxMywgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgdGl0bGU6ICczcmQgR2VuZXJhdGlvbiBCbG9ja2NoYWluOiBIb3cgRmFzdCBjYW4gdGhlIEJsb2NrY2hhaW4gT3BlcmF0ZT8gUGFydCBJSUk6IDogVGhlIENoYWxsZW5nZXMgZm9yIHRoZSBEaXJlY3RlZCBBY3ljbGljIEdyYXBoIChEQUcpIHdpdGggUmlwcGxlIGFuZCAgSW90YSBDb2luJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MTQsXHJcbiAgICBkb25lOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICcxMycsXHJcbiAgICBkaWQ6ICcxOC0wMi0xNCcsXHJcbiAgICBkYXRlOiAnRmViIDE0LCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICB0aXRsZTogJ0EgTmV3IEtlcm5lbCwgYW5kIHRoZSBNYW5pZmVzdGF0aW9uIG9mIGEgVHdvLUh1bmRyZWQgWWVhciBQcm9ibGVtIG5hbWVkIDxpPkFub21pZTwvaT4nLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxMyxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzEyJyxcclxuICAgIGRpZDogJzE4LTAyLTE1JyxcclxuICAgIGRhdGU6ICdGZWIgMTUsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTogJ0FmdGVyIFllc3RlcmRheSYjMzk7cyBTY2F0aGluZyBQb3N0LCBBIExvb2sgYXQgbXkgb3duIENhcmJvbiBGb290cHJpbnQnLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxMixcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzExJyxcclxuICAgIGRpZDogJzE4LTAyLTE2JyxcclxuICAgIGRhdGU6ICdGZWIgMTYsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgdGl0bGU6ICdUZWNoIG9uIHRoZSBSZWdyZXQ6IFVuaW50ZW5kZWQsIHNlY29uZGFyeSBlZmZlY3RzIG9mIGNvbW11bmljYXRpb24tIGFuZCBhY3Rpdml0eS1iYXNlZCBhcHAtZGVzaWducycsXHJcbiAgICBwb3N0OiBibG9ncG9zdDExLFxyXG4gICAgZG9uZTogdHJ1ZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnMTAnLFxyXG4gICAgZGlkOiAnMTgtMDItMTcnLFxyXG4gICAgZGF0ZTogJ0ZlYiAxNy0xOCwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiAnQmxvY2tjaGFpbnMsIEJpdGNvaW5zIGFuZCBUaGUgVW5uZWNlc3NhcnkgUmlzayBvZiBTaG9wcGluZyBhdCBUYXJnZXQgd2l0aCBhIENyZWRpdCBDYXJkLCBQYXJ0IElJOjxiciAvPjxiciAvPiBTZXZlbiBOdXRzICZhbXA7IEJvbHRzIEZlYXR1cmVzIG9mIHRoZSBOZXcgQmxvY2tjaGFpbiBNaWNyby1FY29ub215JyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MTAsXHJcbiAgICBkb25lOiB0cnVlLFxyXG5cclxuICB9LFxyXG5cclxuICB7XHJcbiAgICBpZDogJzknLFxyXG4gICAgZGlkOiAnMTgtMDItMTknLFxyXG4gICAgZGF0ZTogJ0ZlYiAxOSwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiAnQmxvY2tjaGFpbnMsIEJpdGNvaW5zIGFuZCBUaGUgVW5uZWNlc3NhcnkgUmlzayBvZiBTaG9wcGluZyBhdCBUYXJnZXQgd2l0aCBhIENyZWRpdCBDYXJkLCBQYXJ0IElJSTo8YnIgLz4gU2V2ZW4gRmVhdHVyZXMgb2YgdGhlIE5ldyBCbG9ja2NoYWluIE1pY3JvLUVjb25vbXknLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3Q5LFxyXG4gICAgZG9uZTogdHJ1ZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnOCcsXHJcbiAgICBkaWQ6ICcxOC0wMi0yMCcsXHJcbiAgICBkYXRlOiAnRmViIDIwLCAyMDE5JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6ICdDcnlwdG9jdXJyZW5jeSYjMzk7cyBDdW1iZXJzb21lIENhcmJvbiBGb290cHJpbnQnLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3Q4LFxyXG4gICAgZG9uZTogdHJ1ZSxcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnNycsXHJcbiAgICBkaWQ6ICcxOC0wMi0yMScsXHJcbiAgICBkYXRlOiAnRmViIDIxLCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6ICdGYWNlYm9vay1GcmllbmRseSBUaGlyZC1HZW5lcmF0aW9uIERhdGEgU3RydWN0dXJlcycsXHJcbiAgICBwb3N0OiBibG9ncG9zdDcsXHJcbiAgICBkb25lOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICc2JyxcclxuICAgIGRpZDogJzE4LTAyLTIyJyxcclxuICAgIGRhdGU6ICdGZWIgMjIsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTogJ0xhbmd1YWdlcycsXHJcbiAgICBwb3N0OiBibG9ncG9zdDYsXHJcbiAgICBkb25lOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICc1JyxcclxuICAgIGRpZDogJzE4LTAyLTIzJyxcclxuICAgIGRhdGU6ICdGZWIgMjMsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgIHRpdGxlOiAnMS40IE1pbGxpb24gUmVhc29ucyBmb3IgbW9yZSBXb21lbiBpbiBUZWNoJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0NSxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuXHJcbiAge1xyXG4gICAgaWQ6ICc0JyxcclxuICAgIGRpZDogJzE4LTAyLTI0JyxcclxuICAgIGRhdGU6ICdGZWIgMjQtMjUsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgdGl0bGU6ICczcmQgR2VuZXJhdGlvbiBCbG9ja2NoYWluOiBIb3cgRmFzdCBjYW4gdGhlIEJsb2NrY2hhaW4gT3BlcmF0ZT8gUGFydCBJSUk6IDogVGhlIENoYWxsZW5nZXMgZm9yIHRoZSBEaXJlY3RlZCBBY3ljbGljIEdyYXBoIChEQUcpIHdpdGggUmlwcGxlIGFuZCAgSW90YSBDb2luJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0NCxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzMnLFxyXG4gICAgZGlkOiAnMTgtMDItMjYnLFxyXG4gICAgZGF0ZTogJ0ZlYiAyNiwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiAnQ3J5cHRvY3VycmVuY3kmIzM5O3MgQ3VtYmVyc29tZSBDYXJib24gRm9vdHByaW50JyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MyxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJzInLFxyXG4gICAgZGlkOiAnMTgtMDItMjcnLFxyXG4gICAgZGF0ZTogJ0ZlYiAyNywgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiAnQWZ0ZXIgWWVzdGVyZGF5JiMzOTtzIFNjYXRoaW5nIFBvc3QsIEEgTG9vayBhdCBteSBvd24gQ2FyYm9uIEZvb3RwcmludCcsXHJcbiAgICBwb3N0OiBibG9ncG9zdDIsXHJcbiAgICBkb25lOiB0cnVlLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICcxJyxcclxuICAgIGRpZDogJzE4LTAyLTI4JyxcclxuICAgIGRhdGU6ICdGZWIgMjgsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTogJ09uZSBMYXN0IFdvcmQgYWJvdXQgQml0Y29pbiYjMzk7cyBDYXJib24gRm9vdHByaW50JyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MSxcclxuICAgIGRvbmU6IHRydWUsXHJcbiAgfVxyXG5dO1xyXG5cclxuICBmb3IgKGk9MDtpPHVybC5sZW5ndGg7aSsrKXsgXHJcbiAgICB2YXIgY2F0ID0gYCBcclxuICAgIDxkaXYgaWQ9XCIke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2XCI+IFxyXG4gICAgPGhyIC8+ICBcclxuICAgIDxhIGhyZWY9XCIjdG9wXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICBcclxuICAgIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gXHJcbiAgICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gICAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICAgIDxiciAvPlxyXG4gICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fVxyXG4gICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gIFxyXG4gICAgXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1mZWJcIikuaW5uZXJIVE1MICs9IGNhdDtcclxuICB9XHJcbiAgXHJcbnZhciBpO1xyXG4gIGZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICAgIHZhciBjYXRNb2QgPSBgXHJcbiAgICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfV9tb2RcIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcbiAgICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gICAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9PC9kaXY+XHJcbiAgICA8L2Rpdj5gO1xyXG4gICAgXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWZlYi1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDtcclxufSBcclxuXHJcbmNvbnNvbGUubG9nKCdibG9nZ2VyLWZlYicpO1xyXG4gIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG5cclxufTtcclxuXHJcbmJsb2dnZXJGZWIoKTsiLCIvLyBodHRwczovL3d3dy5kaWdpdGFsdHJlbmRzLmNvbS9ob21lL211aS13b29kLXNtYXJ0LWRpc3BsYXktY2VzLTIwMTkvJ3VzZSBzdHJpY3QnOyBodHRwczovL3d3dy5sYXRpbWVzLmNvbS9idXNpbmVzcy9sYS1maS1zcGFjZXgtbGF5b2Zmcy0yMDE5MDExMS1zdG9yeS5odG1sXHJcbi8vICd1c2Ugc3RyaWN0JzsgIFxyXG4gXHJcbi8vanVuZSBcclxuLy8gaHR0cDovL25hdXRpbC51cy9pc3N1ZS82NC90aGUtdW5zZWVuL3RoZS1mb3VydGgtY29wZXJuaWNhbi1yZXZvbHV0aW9uXHJcbi8vIGh0dHBzOi8vd3d3LnRoZWF0bGFudGljLmNvbS9zY2llbmNlL2FyY2hpdmUvMjAxOC8wOS95b3VyLWRuYS1pcy1ub3QteW91ci1jdWx0dXJlLzU3MTE1MC9cclxuXHJcbnZhciBibG9nZ2VySmFuID0gZnVuY3Rpb24gKCkgeyAgXHJcblxyXG4gIHZhciBibG9ncG9zdDE3OTAgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkJpdGNvaW4ncyBjYXJib24gZm9vdHByaW50IC0tIG1hdGNoaW5nIHllYXJseSBLaWxvd2F0dCB1c2FnZSBhcyBQb3J0dWd1bCAtLSBzaG93cyBhbiBleGFtcGxlIG9mIHRoZSBuZWVkIHRvIGltcHJvdmUgdGhlIHRlY2hub2xvZ3kuIFRoZSBFbGVjdHJpY2FsIGRyYWluIGZyb20gXCJQcm9vZi1vZi1Xb3JrXCIgYmxvY2tjaGFpbiBkZXNpZ25zLCBsaWtlIEV0aGVyZXVtIGFuZCBCaXRjb2luLCBtYWtlcyB0aGUgZGVtYW5kIG9mIHNjYXJjaXR5IHRocm91Z2ggY29tcHV0YXRpb25hbGx5IGRpZmZpY3VsdCAnYmxvY2tzJy4gVGhhdCBpcyB0aGUgJ3dlaWdodCcgd29ydGggaW4gZ29sZCwgYXQgbGVhc3QgY3J5cHRvZ3JhcGhpY2FsbHk6IDxzdHJvbmc+QSBjb21wdXRlciBoYWQgdG8gc3dlYXQgYWxvdCBzbyB0aGF0IDxpPkk8L2k+IGNvdWxkIG93biBhIHBpZWNlIG9mIGJpdGNvaW4uPC9zdHJvbmc+IFRoZSBwcm9ibGVtIGlzIHRoaXMgbWFrZXMgZm9yIGEgbG90IG9mIGhvdCBjb21wdXRpbmcgYXJvdW5kIHRoZSBnbG9iZS0tYSBwcm9ibGVtIHRoYXQgZ3Jvd3Mgd2l0aCBtb3JlIGVjb2xvZ2ljYWwgY2xpbWF0ZSBjaGFuZ2UuPC9wPlxyXG5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+RGV2ZWxvcGVycyBwbGFuIHRvIGRpdGNoIHByb29mLW9mLXdvcmssIHRoZSBhbGdvcml0aG0gdGhhdCB0aGUgbmV0d29yayBjdXJyZW50bHkgdXNlcyB0byBkZXRlcm1pbmUgd2hpY2ggdHJhbnNhY3Rpb25zIGFyZSB2YWxpZCBhbmQgcHJvdGVjdCBpdCBmcm9tIHRhbXBlcmluZywgaW4gZmF2b3Igb2YgcHJvb2Ygb2Ygc3Rha2UsIHdoZXJlIHRoZSBuZXR3b3JrIGlzIHNlY3VyZWQgYnkgdGhlIG93bmVycyBvZiB0b2tlbnMuXHJcbjxiciAvPjxiciAvPlxyXG4gIElmIGFuZCB3aGVuIHRoYXQgYWxnb3JpdGhtIGlzIHJvbGxlZCBvdXQsIHByb29mLW9mLXN0YWtlIGNvdWxkIGJlIGEgbWVhbnMgZm9yIGFjaGlldmluZyBkaXN0cmlidXRlZCBjb25zZW5zdXMgdGhhdCB1c2VzIGZld2VyIHJlc291cmNlcy48c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+U28gdGhpcyBpcyB0aGUgY29udW5kcnVtIHdpdGggYSBsb25nLXRlcm0gYmxvY2tjaGFpbiBwbGFucyBmb3IgZWNvbG9naWNhbCByZXNwb25zaWJpbGl0eS4gUmlnaHQgbm93LCBFbnZpcm9ubWVudGFsIGhvcGVzLCBsaWtlIG1pbmUsIGFyZSBpbnZlc3RlZCBpbiBFdGhlcmV1bSdzIHBsYW5uZWQgbWlncmF0aW9uIHRvIGEgXCJQcm9vZi1vZi1TdGFrZVwiIGRlc2lnbi4uLiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiAgIEF0IHRoZSBjdXR0aW5nIGVkZ2Ugb2YgYmxvY2tjaGFpbiByZXNlYXJjaCBpcyBhIHBvdGVudGlhbCAkMTUgbWlsbGlvbiBkb2xsYXIgdmVudHVyZSBieSB0aGUgRXRoZXJldW0gRm91bmRhdGlvbiBjZW50ZXJlZCBhcm91bmQgYSB0ZWNobm9sb2d5IGNhbGxlZCBWZXJpZmlhYmxlIERlbGF5IEZ1bmN0aW9ucyAoVkRGcykuXHJcblxyXG4gIEFjdGluZyBhcyBhIHNvdXJjZSBvZiBjb21wdXRlci1nZW5lcmF0ZWQgcmFuZG9tbmVzcyB0aGF0IGlzIHVucHJlZGljdGFibGUgYW5kIHVuYmlhcy1hYmxlLCBWREZzIGFyZSBlbnZpc2lvbmVkIGZvciB1c2UgaW4gYSBoaWdobHktYW50aWNpcGF0ZWQg4oCccHJvb2Ytb2Ytc3Rha2XigJ0oUG9TKSBzeXN0ZW0gY2FsbGVkIFNlcmVuaXR5IHdoaWNoIHRoZSBldGhlcmV1bSBuZXR3b3JrIHdpbGwgbWlncmF0ZSB0byBpbiB0aGUgbmV4dCBmZXcgeWVhcnMuXHJcbiAgXHJcbiAgV2hhdOKAmXMgbW9yZSwgdGhlIGFiaWxpdHkgdG8gZ2VuZXJhdGUgc2VjdXJlIHJhbmRvbWl6ZWQgbnVtYmVycyDigJMgaWYgaW1wbGVtZW50ZWQgaW4gU2VyZW5pdHkg4oCTIHdvdWxkIGJlIGEgZmVhdHVyZSB0aGF0IGNhbiBiZSBsZXZlcmFnZWQgYnkgYWxsIGRlY2VudHJhbGl6ZWQgYXBwbGljYXRpb25zIChkYXBwcykgb24gdGhlIHBsYXRmb3JtIG9uY2UgaW50ZWdyYXRlZCBpbnRvIHRoZSBldGhlcmV1bSBjb2RlYmFzZS5cclxuPGJyIC8+XHJcbiAgICA8YnIgLz4gIFxyXG4gICAgU3BlYWtpbmcgdG8gY3VycmVudCB2aWFiaWxpdHkgc3R1ZGllcyBvbiBWREYgdGVjaG5vbG9neSwgRXRoZXJldW0gRm91bmRhdGlvbiByZXNlYXJjaGVyIEp1c3RpbiBEcmFrZSB0b2xkIENvaW5EZXNrOlxyXG4gICAgXHJcbiAgICDigJxXZeKAmXJlIGJhc2ljYWxseSBkb2luZyBhbGwgdGhpcyBncm91bmR3b3JrIHRvIG1ha2UgYW4gaW5mb3JtZWQgZ28sIG5vLWdvIGRlY2lzaW9uIG9uIHRoZSBiaWdnZXIgcHJvamVjdC4gVGhlIGJpZ2dlciBwcm9qZWN0IGlzIDE1IG1pbGxpb24gZG9sbGFycyBvbiB0aGF0IG9yZGVyIG9mIG1hZ25pdHVkZS4gU28gd2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBpZiB3ZSBkbyBnbyBhaGVhZCBpdOKAmXMgZ29pbmcgdG8gYmUgc3VjY2Vzc2Z1bC7igJ08c3VwPjI8L3N1cD5cclxuICA8L3A+IFxyXG4gIDxiciAvPlxyXG4gIDxpbWcgc3JjPVwiZGlzdC9pbWcvYml0Y29pbi5qcGdcIiBjbGFzcz1cInpvb21cIiAgIC8+PGJyIC8+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+UGhvdG86IDxhIGhyZWY9XCJodHRwczovL2RpZ2ljb25vbWlzdC5uZXQvYml0Y29pbi1lbmVyZ3ktY29uc3VtcHRpb25cIj5odHRwczovL2RpZ2ljb25vbWlzdC5uZXQvYml0Y29pbi1lbmVyZ3ktY29uc3VtcHRpb248L2E+PC9wPiBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3OTAgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gKGJhY2tncm91bmQpPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9ldGhlcmV1bS1mb3VuZGF0aW9uLXdlaWdocy0xNS1taWxsaW9uLWJpZC10by1idWlsZC1yYW5kb21uZXNzLXRlY2hcIj5cclxuICBodHRwczovL3d3dy5jb2luZGVzay5jb20vZXRoZXJldW0tZm91bmRhdGlvbi13ZWlnaHMtMTUtbWlsbGlvbi1iaWQtdG8tYnVpbGQtcmFuZG9tbmVzcy10ZWNoPC9hPjwvcD4gIFxyXG5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2luZm9ybWF0aW9uL2V0aGVyZXVtLW1pbmluZy13b3Jrc1wiPlxyXG4gIGh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9pbmZvcm1hdGlvbi9ldGhlcmV1bS1taW5pbmctd29ya3M8L2E+PC9wPiAgXHJcbiAgYDsgIFxyXG4gXHJcbiBcclxuICB2YXIgYmxvZ3Bvc3QxNzg5ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5PcmFjbGUgdGhlIEdyZWF0LiBPcmFjbGUgdGhlIEZhc3QuIE9yYWNsZSB0aGUgU2VjdXJlIERhdGFiYXNlIHN0YW5kcyBoaWdoIGFtb25nIGFsbCBUZWNoIEdpYW50cy4gQWZ0ZXIgYWxsLCBhcmVuJ3QgOTkgb3V0IG9mIGEgaHVuZHJlZCBTQVAgc2V0dXBzIG9uIE9yYWNsZSBEQnM/IC4uLndpdGggbWF5YmUgYW4gSUJNIERCMiBvbiBhIGJsdWUgbW9vbi4gVGhlIENsb3VkIEdyZWF0cyBsaWtlIEFtYXpvbiwgZm9yIGluc3RhbmNlLCBydW4gdGhlaXIgb3duIHNlcnZlcnMgdXNpbmcgT3JhY2xlIGhhcmR3YXJlLS1ldmVuIHRoZWlyIEF1cm9yYSBEQiBpcyBhIHJlbmRpdGlvbiBvZiBPcmFjbGUncyBsZWdhY3kgTXlTUUwgLi4uICBcclxuICA8L3A+PHA+U3VjaCBwb3dlciA8aT5yZXF1aXJlczwvaT4gdHJ1c3QgaW4gb3JkZXIgdG8gdGhyaXZlLiBZZXQgaXQgbG9va3MgbGlrZSBPcmFjbGUncyBoeXBlci1jb21wZXRpdGl2ZSA8aT5hbmQgcG9zc2libHkgc3VzcGVjdDwvaT4gY29sbGVjdGluZyBoYWJpdCBvZiBwZXJzb25hbCBhbmQgbWFya2V0aW5nIGRhdGEgbWFrZXMgZm9yIGEgcmVhbCwgZXZlbiBleGlzdGVudGlhbCwgY29uZmxpY3Qgb2YgaW50ZXJlc3QgdmlzLSZhZ3JhdmU7LXZpcyBjdXN0b21lcnMsIGFuZCBjdXN0b21lcnMgb2YgY3VzdG9tZXJzOiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5GYWNpbmcgdG91Z2ggcXVlc3Rpb25zIGFib3V0IGl0cyBwcmFjdGljZXMgb3ZlciB0aGUgcGFzdCB5ZWFyLCBPcmFjbGXigJlzIGFkdmVydGlzaW5nIHNvZnR3YXJlIGRpdmlzaW9uLCBrbm93biBhcyBEYXRhIENsb3VkLCBoYXMgaW1wbGVtZW50ZWQgcHJldmlvdXNseSB1bnJlcG9ydGVkIGRpc21pc3NhbHMuIFdoaWxlIERhdGEgQ2xvdWQgaGFzIGFsd2F5cyBiZWVuIGEgc21hbGwgcGFydCBvZiBPcmFjbGXigJlzIG92ZXJhbGwgc2FsZXMsIEh1cmQsIGNvLWZvdW5kZXIgTGFycnkgRWxsaXNvbiwgYW5kIG90aGVyIGV4ZWN1dGl2ZXMgcmVwZWF0ZWRseSBjaXRlZCBpdCBvdmVyIHRoZSB5ZWFycyBhcyBhIGJyaWdodCBzcG90IGluIHRoZWlyIG90aGVyd2lzZSBodW1kcnVtIGJ1c2luZXNzLiBUaGF0IGFwcGVhcnMgdG8gYmUgb3Zlci4gSW52ZXN0bWVudCBiYW5rIFN0aWZlbCBOaWNvbGF1cyAmIENvLiBlc3RpbWF0ZXMgdGhhdCBEYXRhIENsb3VkIGRlbGl2ZXJlZCBvbmx5IGFib3V0ICQ1MDAgbWlsbGlvbiBvZiBPcmFjbGXigJlzICQ0MCBiaWxsaW9uIGluIHNhbGVzIGxhc3QgeWVhci4g4oCcV2hhdCBoYXBwZW5lZCBvdmVyIHRoZSBwYXN0IGNvdXBsZSB5ZWFycyBpcywgdGhlIG5lYnVsb3VzIGNvbmNlcm5zIHBlb3BsZSBtYXkgaGF2ZSBoYWQgYWJvdXQgd2hhdCBjb21wYW5pZXMgd2VyZSBkb2luZyB3aXRoIHBlcnNvbmFsIGRhdGEgYWxsIG9mIGEgc3VkZGVuIGJlY2FtZSB2ZXJ5IHJlYWws4oCdIHNheXMgQmxhaXIgSGFubGV5IEZyYW5rLCBhbiBhbmFseXN0IGF0IElTRywgYSB0ZWNobm9sb2d5IHJlc2VhcmNoIGFuZCBhZHZpc29yeSBmaXJtLiDigJxUaGUgcmlzayB0byBPcmFjbGUgaW4gYWxsIG9mIHRoaXMgaXMgd2hhdCBzZWVtZWQgbGlrZSBhIHNvbWV3aGF0IGlnbm9yYWJsZSB2YWx1ZS1hZGQgYnVzaW5lc3MgYSBmZXcgeWVhcnMgYWdvIGNvdWxkIGFsbCBvZiBhIHN1ZGRlbiBiZWNvbWUgYSBiaWcgc2NhcnkgYnVnYmVhci7igJ1cclxuICA8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3ODkgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE5LTAyLTA2L29yYWNsZS1kaWRuLXQtc2VlLXRoZS1kYXRhLXJlY2tvbmluZy1jb21pbmdcIj5cclxuICBodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOS0wMi0wNi9vcmFjbGUtZGlkbi10LXNlZS10aGUtZGF0YS1yZWNrb25pbmctY29taW5nPC9hPjwvcD4gIFxyXG4gXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTc4OCA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+T3JhY2xlJ3MgbG9mdHkgcm9sZSBvZiBwcm92aWRpbmcgdGhlIGdsb2JlJ3MgZmluZXN0IGFuZCBmYXN0ZXN0IGRhdGFiYXNlcywgYWxzbyBtZWFucyBhIGNvbW1pdG1lbnQtLXRvIHNvbWUgZGVncmVlLS1vZiByZXNwZWN0IGZvciBwcml2YWN5IGRhdGEuIFRoaXMgcG93ZXIgZG9lcyByZXF1aXJlIHRydXN0IGluIG9yZGVyIHRvIHN1cnZpdmU6IEFuZCwgaXQgbG9va3MgbGlrZSBPcmFjbGUncyBoeXBlci1jb21wZXRpdGl2ZSA8aT5hbmQgcG9zc2libHkgc3VzcGVjdDwvaT4gKG9yIG5lZ2xpZ2VudCBhdCBiZXN0KSBoYWJpdCBlcXVhdGVzIDxpPmFuZCBpbiB0dXJuIGhlbHBzIG1vbmV0aXplPC9pPiB0aGUgdGllcyBhbmQgYm91bmRhcmllcyBiZXR3ZWVuIHBlcnNvbmFsIGRhdGEgYW5kIG1hcmtldGluZyBkYXRhIC4uLiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gICBcclxuICAgIElmIENvbXBhbnkgWCB3YW50cyB0bywgaXQgY2FuIGFzayBPcmFjbGUgdG8gZmluZCBwZW9wbGUgbG9va2luZyBhdCBpbWFnZXMgb2YgaXRzIFNVViwgYWRkIHRoZSBpbmZvcm1hdGlvbiB0byBpdHMgY29uc3VtZXIgcHJvZmlsZXMsIGFuZCB0aGVuIHVwbG9hZCB0aGUgZGF0YSB0byBGYWNlYm9vaywgd2hlcmUgdGhlIGNhcm1ha2VyIGNhbiB0YXJnZXQgdGhvc2UgcGVvcGxlIHdpdGggYWRzIGZvciB0aGUgc2FtZSBtb2RlbC5cclxuICBcclxuICAgIDxiciAvPlxyXG4gICAgVGhhdCBsYXN0IHBhcnQgaGFzIGdvdHRlbiB0b3VnaGVyIGluIHRoZSBwYXN0IHllYXIuIEluIE1hcmNoLCBhZnRlciB0aGUgQ2FtYnJpZGdlIEFuYWx5dGljYSBzY2FuZGFsIHJldmVhbGVkIGp1c3QgaG93IGNhc3VhbGx5IEZhY2Vib29rIEluYy4gaGFkIHNoYXJlZCB1c2VyIGRhdGEgd2l0aCBvdGhlciBjb21wYW5pZXMgZm9yIHllYXJzLCB0aGUgc29jaWFsIG5ldHdvcmvigJlzIGNsYW1wZG93biBvbiBpdHMgb3duIHN5c3RlbXMgYmVjYW1lIGEgc2VyaW91cyBwcm9ibGVtIGZvciBPcmFjbGUgLi4uPHN1cD4xPC9zdXA+XHJcbiAgPC9wPiBcclxuICA8YnIgLz5cclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL29yYWNsZS5qcGdcIiBjbGFzcz1cInpvb21cIiB3aWR0aD1cIjM0MHB4XCIgLz4gYDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNzg4ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOS0wMi0wNi9vcmFjbGUtZGlkbi10LXNlZS10aGUtZGF0YS1yZWNrb25pbmctY29taW5nXCI+XHJcbiAgaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTktMDItMDYvb3JhY2xlLWRpZG4tdC1zZWUtdGhlLWRhdGEtcmVja29uaW5nLWNvbWluZzwvYT48L3A+ICBcclxuIFxyXG4gIGA7ICBcclxuICAgdmFyIGJsb2dwb3N0MTc4NiA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+SGVjZHJhY2xpdHVzJyBpY29uaWMgbWF4aW0sIFwidGhhdCBubyBtYW4gaGFzIHN0ZXBwZWQgaW50byB0aGUgc2FtZSByaXZlciB0d2ljZSwgZm9yIGl0J3Mgbm90IHRoZSBzYW1lIHJpdmVyIDxpPiBhbmQgaGUncyBub3QgdGhlIHNhbWUgbWFuLjwvaT5cIiBUaGlzIHBocmFzaW5nIHVuZGVyc2NvcmVzIHRoYXQgRWFydGggaXMgYSBsaXZpbmcsIGV2b2x2aW5nIG9yZ2FuaWMgRWNvc3lzdGVtLCBqdXN0IGxpa2UgbWFuL3dvbWFuLWtpbmQgbWFrZXMgZm9yIGFuIGV2b2x2aW5nIGJlaW5nLCB0b28uIEhvdyBtdWNoIG1vcmVzbywgZ2l2ZW4gb3VyIHN5bWJpb3NpcyB3aXRoIEVhcnRoLiBTbywgdGhlIGZ1dHVyZSBpcyBkb3VibGUgYmxpbmQtLW1ha2luZyBMaWZlIGFsbCB0aGUgbW9yZSBpbnRlcmVzdGluZyE8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG5cclxuICBNYWduZXRpYyBub3J0aCBoYXMgbmV2ZXIgc2F0IHN0aWxsLiBJbiB0aGUgbGFzdCBodW5kcmVkIHllYXJzIG9yIHNvLCB0aGUgZGlyZWN0aW9uIGluIHdoaWNoIG91ciBjb21wYXNzZXMgc3RlYWRmYXN0bHkgcG9pbnQgaGFzIGx1bWJlcmVkIGV2ZXIgbm9ydGh3YXJkLCBkcml2ZW4gYnkgRWFydGgncyBjaHVybmluZyBsaXF1aWQgb3V0ZXIgY29yZSBzb21lIDEsODAwIG1pbGVzIGJlbmVhdGggdGhlIHN1cmZhY2UuIFlldCBpbiByZWNlbnQgeWVhcnMsIHNjaWVudGlzdHMgbm90aWNlZCBzb21ldGhpbmcgdW51c3VhbDogTWFnbmV0aWMgbm9ydGgncyByb3V0aW5lIHBsb2QgaGFzIHNoaWZ0ZWQgaW50byBoaWdoIGdlYXIsIHNlbmRpbmcgaXQgZ2FsbG9waW5nIGFjcm9zcyB0aGUgTm9ydGhlcm4gSGVtaXNwaGVyZeKAlGFuZCBubyBvbmUgY2FuIGVudGlyZWx5IGV4cGxhaW4gd2h5LlxyXG4gIDxiciAvPjxiciAvPiAgXHJcbiAgVGhlIGNoYW5nZXMgaGF2ZSBiZWVuIHNvIGxhcmdlIHRoYXQgc2NpZW50aXN0cyBiZWdhbiB3b3JraW5nIG9uIGFuIGVtZXJnZW5jeSB1cGRhdGUgZm9yIHRoZSBXb3JsZCBNYWduZXRpYyBNb2RlbCwgdGhlIG1hdGhlbWF0aWNhbCBzeXN0ZW0gdGhhdCBsYXlzIHRoZSBmb3VuZGF0aW9ucyBmb3IgbmF2aWdhdGlvbiwgZnJvbSBjZWxsIHBob25lcyBhbmQgc2hpcHMgdG8gY29tbWVyY2lhbCBhaXJsaW5lcy4gQnV0IHRoZW4gdGhlIFUuUy4gZ292ZXJubWVudCBzaHV0IGRvd24sIHBsYWNpbmcgdGhlIG1vZGVsJ3Mgb2ZmaWNpYWwgcmVsZWFzZSBvbiBob2xkLCBhcyBOYXR1cmUgTmV3cyBmaXJzdCByZXBvcnRlZCBlYXJsaWVyIHRoaXMgeWVhci48c3VwPjE8L3N1cD5cclxuICA8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3ODYgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm5hdGlvbmFsZ2VvZ3JhcGhpYy5jb20vc2NpZW5jZS8yMDE5LzAyL21hZ25ldGljLW5vcnRoLXVwZGF0ZS1uYXZpZ2F0aW9uLW1hcHNcIj5cclxuICBodHRwczovL3d3dy5uYXRpb25hbGdlb2dyYXBoaWMuY29tL3NjaWVuY2UvMjAxOS8wMi9tYWduZXRpYy1ub3J0aC11cGRhdGUtbmF2aWdhdGlvbi1tYXBzPC9hPjwvcD4gIFxyXG4gXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTc4NSA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TWVtb3JpemF0aW9uIGlzIGEgY3VsdHVyYWwgdG9waWMgYW5kLCBjb250cmFyeSB0byBtYW55IG9waW5pb25zLCB0ZWNobm9sb2d5IGNhbid0IGJlIGRpcmVjdGx5IGJsYW1lZCBmb3Igd2FuaW5nIGludGVyZXN0LiBJIGhlbHBlZCBqdWRnZSBhIFNwZWVjaCBhbmQgRGViYXRlIFRvdXJuZW1lbnQgbGFzdCBtb250aCwgYW5kIHRoZXJlIGFyZSBubyBzaG9ydGFnZSBvZiB0ZXh0aW5nIGhpZ2gtc2Nob29sZXJzIHRoYXQgPGk+YWxzbyBoYXBwZW4gdG8gbWVtb3JpemUgbG9uZyBwYXNzc2FnZXMgb2YgaGlzdG9yaWNhbCBhbmQgcG9saXRpY2FsIHdvcmtzPC9pPi4gWWV0LCB0aGlzIGF1dGhvciBtYWtlcyBzb21lIHBvaW50cyBhYm91dCBob3cgZmFyIHNvY2lldHkgaGFzIGRyaWZ0ZWQgLi4uPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5CZWZvcmUgZXZlcnkgc21pZGdlbiBvZiBrbm93bGVkZ2Ugd2FzIGEgbWVyZSBHb29nbGUgc2VhcmNoIGF3YXksIGl0IHdhcyBjdXN0b21hcnkgZm9yIHN0dWRlbnRzIHRvIG1lbW9yaXplIGdyZWF0IHdvcmtzLCBmcm9tIHBvZW1zIHRvIGZhbW91cyBwb2xpdGljYWwgc3BlZWNoZXMgdG8gcmVsaWdpb3VzIHBhc3NhZ2VzLiBJbiBhbnRpcXVpdHksIFwidGhlcmUgd2VyZSBlbGFib3JhdGUgbW5lbW90ZWNobmljIHdheXMgb2YgbWVtb3JpemluZyBzcGVlY2hlcyxcIiBleHBsYWluZWQgS2F0aGFyaW5hIFZvbGssIHRoZSBkaXJlY3RvciBvZiB1bmRlcmdyYWR1YXRlIENsYXNzaWNzIHN0dWRpZXMgYXQgQ29sdW1iaWEgVW5pdmVyc2l0eSwgY2l0aW5nIHRoZSBtZXRob2Qgb2YgSW9jaSBhbmQgQXJzIE1lbW9yYXRpdmEuICBcclxuICA8YnIgLz48YnIgLz4gXHJcbiAgIEl0IHdhcyBhbHNvIGN1c3RvbWFyeSB0byBtZW1vcml6ZSBmYXIgbW9yZSBwcm9zYWljIHdvcmtzOiBJbiB0aGUgVS5TLiBhbmQgVS5LLiBpbiB0aGUgMTl0aCBjZW50dXJ5LCBcIm1lbW9yaXphdGlvbiB3YXMgdGhlIGRlZmF1bHQgbGVhcm5pbmcgdGVjaG5pcXVlIGFjcm9zcyB0aGUgd2hvbGUgY3VycmljdWx1bSxcIiBzYWlkIENhdGhlcmluZSBSb2Jzb24sIHRoZSBhdXRob3Igb2YgSGVhcnQgQmVhdHM6IEV2ZXJ5ZGF5IExpZmUgYW5kIHRoZSBNZW1vcml6ZWQgUG9lbS4gXCJUbyBsZWFybiB5b3VyIGxlc3NvbiB3YXMgdG8gbGVhcm4gdGhlIHBhc3NhZ2UgaW4gdGhlIHRleHRib29rIGFib3V0IHRoZSBnZW9ncmFwaHkgb2YgSW93YS4gV2hlbiBpdCB3YXMgeW91ciB0dXJuIHRvIGJlIGV4YW1pbmVkIGJ5IHRoZSB0ZWFjaGVyLCBpbiB0aGUgVS5TLiBzeXN0ZW0geW91IHdvdWxkIGdvIHVwIHRvIHRoZSByZWNpdGF0aW9uIGJlbmNoIGFuZCB5b3Ugd291bGQgcmVjaXRlIHRoYXQgcGFyYWdyYXBoLlwiXHJcbiBcclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+U28sIGlzIHRoZSBkZWNsaW5pbmcgcHJhY3RpY2Ugb2YgbWVtb3JpemF0aW9uIGEgZnVuY3Rpb24gb2YgY3VsdHVyZSBvciB0ZWNobm9sb2d5LCBvciByYXRoZXIgbWVyZWx5IGEgY3VsdHVyYWwgYWJlcnJhdGlvbiB0aGF0IG1pZ2h0IHJldml2ZSwgYW5kIGNhdGNoIG9uIGxpa2UgdGhlIG5leHQgYmlnIGZhZD88L3A+YDsgXHJcbiAgICBcclxuICB2YXIgYmxvZ2NpdGUxNzg1ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3RoZXdlZWsuY29tL2FydGljbGVzLzgyMDE5Ny9sb3N0LWFydC1tZW1vcml6YXRpb25cIj5cclxuICBodHRwczovL3RoZXdlZWsuY29tL2FydGljbGVzLzgyMDE5Ny9sb3N0LWFydC1tZW1vcml6YXRpb248L2E+PC9wPiAgXHJcbiBcclxuICBgOyBcclxuICB2YXIgYmxvZ3Bvc3QxNzg0ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5HYXRlcycgcHJlZGljdGlvbjogXCJBdXRvbWF0ZWQgcHJpY2UgY29tcGFyaXNvbiBzZXJ2aWNlcyB3aWxsIGJlIGRldmVsb3BlZCwgYWxsb3dpbmcgcGVvcGxlIHRvIHNlZSBwcmljZXMgYWNyb3NzIG11bHRpcGxlIHdlYnNpdGVzLCBtYWtpbmcgaXQgZWZmb3J0bGVzcyB0byBmaW5kIHRoZSBjaGVhcGVzdCBwcm9kdWN0IGZvciBhbGwgaW5kdXN0cmllcy5cIlxyXG4gIDxiciAvPjxiciAvPiBcclxuICBHYXRlcycgcHJlZGljdGlvbjogXCInUGVyc29uYWwgY29tcGFuaW9ucycgd2lsbCBiZSBkZXZlbG9wZWQuIFRoZXkgd2lsbCBjb25uZWN0IGFuZCBzeW5jIGFsbCB5b3VyIGRldmljZXMgaW4gYSBzbWFydCB3YXksIHdoZXRoZXIgdGhleSBhcmUgYXQgaG9tZSBvciBpbiB0aGUgb2ZmaWNlLCBhbmQgYWxsb3cgdGhlbSB0byBleGNoYW5nZSBkYXRhLiBUaGUgZGV2aWNlIHdpbGwgY2hlY2sgeW91ciBlbWFpbCBvciBub3RpZmljYXRpb25zLCBhbmQgcHJlc2VudCB0aGUgaW5mb3JtYXRpb24gdGhhdCB5b3UgbmVlZC4gV2hlbiB5b3UgZ28gdG8gdGhlIHN0b3JlLCB5b3UgY2FuIHRlbGwgaXQgd2hhdCByZWNpcGVzIHlvdSB3YW50IHRvIHByZXBhcmUsIGFuZCBpdCB3aWxsIGdlbmVyYXRlIGEgbGlzdCBvZiBpbmdyZWRpZW50cyB0aGF0IHlvdSBuZWVkIHRvIHBpY2sgdXAuIEl0IHdpbGwgaW5mb3JtIGFsbCB0aGUgZGV2aWNlcyB0aGF0IHlvdSB1c2Ugb2YgeW91ciBwdXJjaGFzZXMgYW5kIHNjaGVkdWxlLCBhbGxvd2luZyB0aGVtIHRvIGF1dG9tYXRpY2FsbHkgYWRqdXN0IHRvIHdoYXQgeW91J3JlIGRvaW5nLlwiXHJcbiBcclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+VGhlIGF1dGhvciBvZiBmdXR1cmUgdGVjaG5vbG9naWVzIGRvZXMgb2ZmZXIgYSBjZXJ0YWluIHZhbnRhZ2UgcG9pbnQgb3ZlciB0aGUgaG9yaXpvbiAuLi48L3A+YDsgXHJcbiAgICBcclxuICB2YXIgYmxvZ2NpdGUxNzg0ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5lbnRyZXByZW5ldXIuY29tL3NsaWRlc2hvdy8zMjcyMjlcIj5odHRwczovL3d3dy5lbnRyZXByZW5ldXIuY29tL3NsaWRlc2hvdy8zMjcyMjk8L2E+PC9wPiAgXHJcbiBcclxuICBgOyBcclxuICBcclxuICB2YXIgYmxvZ3Bvc3QxNzggPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlBob3RvZ3JhcGh5J3MgdHJhamVjdG9yeSBzcGFubmluZyB0aHJlZSBjZW50dXJpZXMgbWFrZXMgZm9yIGEgY29tbW9uIHRocmVhZCBvZiBleHBlcmllbmNlOiA8aT5UaGUgQXJ0IG9mIHRoZSBJbWFnZSBDYXB0dXJlPC9pPiBsaXZlcyBhYm92ZSB0aGUgbWVyZSB0b29scyBmb3IgdGhlIGpvYi0td2hldGhlciBhIGZsYXNoLWJ1bGIsIG9yIGRhcmstcm9vbSwgb3IgeWVzLCBhbiBleHBlcmllbmNlIHdpdGggdGhlIGxpa2VzIG9mICdUYXBweScgdGhlIEV4dHJhb3JkaW5hcnkgUGhvbmUgQm90ITwvcD4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBJdCB0YWtlcyBhIGxvdCBvZiB0aW1lIGFuZCBwcm9jZXNzaW5nIHBvd2VyIHRvIHRyYWluIGFuIGFsZ29yaXRobSBsaWtlIHRoaXMsIGJ1dCBhZnRlciB0aGUgZGF0YSBjZW50ZXJzIGhhdmUgZG9uZSB0aGVpciB0aGluZywgaXQgY2FuIGJlIHJ1biBvbiBsb3ctcG93ZXJlZCBtb2JpbGUgZGV2aWNlcyB3aXRob3V0IG11Y2ggdHJvdWJsZS4gVGhlIGhlYXZ5LWxpZnRpbmcgd29yayBoYXMgYWxyZWFkeSBiZWVuIGRvbmUsIHNvIG9uY2UgeW91ciBwaG90b3MgYXJlIHVwbG9hZGVkIHRvIHRoZSBjbG91ZCwgR29vZ2xlIGNhbiB1c2UgaXRzIG1vZGVsIHRvIGFuYWx5emUgYW5kIGxhYmVsIHRoZSB3aG9sZSBsaWJyYXJ5LiBBYm91dCBhIHllYXIgYWZ0ZXIgR29vZ2xlIFBob3RvcyB3YXMgbGF1bmNoZWQsIEFwcGxlIGFubm91bmNlZCBhIHBob3RvIHNlYXJjaCBmZWF0dXJlIHRoYXQgd2FzIHNpbWlsYXJseSB0cmFpbmVkIG9uIGEgbmV1cmFsIG5ldHdvcmssIGJ1dCBhcyBwYXJ0IG9mIHRoZSBjb21wYW554oCZcyBjb21taXRtZW50IHRvIHByaXZhY3kgdGhlIGFjdHVhbCBjYXRlZ29yaXphdGlvbiBpcyBwZXJmb3JtZWQgb24gZWFjaCBkZXZpY2XigJlzIHByb2Nlc3NvciBzZXBhcmF0ZWx5IHdpdGhvdXQgc2VuZGluZyB0aGUgZGF0YS4gVGhpcyB1c3VhbGx5IHRha2VzIGEgZGF5IG9yIHR3byBhbmQgaGFwcGVucyBpbiB0aGUgYmFja2dyb3VuZCBmb2xsb3dpbmcgc2V0dXAuPHN1cD4gMTwvc3VwPlxyXG4gICc8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3OCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGhldmVyZ2UuY29tLzIwMTkvMS8zMS8xODIwMzM2My9haS1hcnRpZmljaWFsLWludGVsbGlnZW5jZS1waG90b2dyYXBoeS1nb29nbGUtcGhvdG9zLWFwcGxlLWh1YXdlaVwiPlxyXG4gIGh0dHBzOi8vd3d3LnRoZXZlcmdlLmNvbS8yMDE5LzEvMzEvMTgyMDMzNjMvYWktYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UtcGhvdG9ncmFwaHktZ29vZ2xlLXBob3Rvcy1hcHBsZS1odWF3ZWk8L2E+PC9wPiAgXHJcbiBcclxuICBgOyBcclxuXHJcblxyXG4gIFxyXG4gIHZhciBibG9ncG9zdDE3NyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VVJMIGRyYW1hcyBhcmUgbmV2ZXIgc2hvcnQgb2YgY29udHJvdmVyc3ktLXRoaXMsIG1ha2luZyB0aGUgdGhlbWUgb2YgbXkgPGEgaHJlZj1cIiMwOS0wNC0xOFwiPlNlcHQuIDR0aCBwb3N0IDwvYT5leHBsb3JpbmcgdGhlIHVuZmF0aG9tYWJsZSB0YXNrLiBUaGVyZSBpcyBidXQgb25lIGxpa2VseSBvdXRjb21lOiBhIGJpZnVyY2F0ZWQgaW50ZXJuZXQ6IEltYWdpbmUgZnV0cmUgaGFuZy11cHMgcmVzZW1ibGluZyBpbmNvbnNpc3RlbmNpZXMgYW5kIGluY29tcGF0aWJsZSBleHBlcmllbmNlcywgPGk+bGlrZSwgc2F5IC4uLiB0aGUgc2VlbWluZ2x5IEltbW9ydGFsIGFuZCBQZXJzaXN0ZW50bHkgQXdrd2FyZCBJbnRlcm5ldCBFeHBsb3JlciAxMTwvaT4uPC9wPiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiAgIFxyXG4gIEluIFNlcHRlbWJlciwgbWVtYmVycyBvZiBHb29nbGUncyBDaHJvbWUgc2VjdXJpdHkgdGVhbSBwdXQgZm9ydGggYSByYWRpY2FsIHByb3Bvc2FsOiBLaWxsIG9mZiBVUkxzIGFzIHdlIGtub3cgdGhlbS4gVGhlIHJlc2VhcmNoZXJzIGFyZW4ndCBhY3R1YWxseSBhZHZvY2F0aW5nIGEgY2hhbmdlIHRvIHRoZSB3ZWIncyB1bmRlcmx5aW5nIGluZnJhc3RydWN0dXJlLiBUaGV5IGRvLCB0aG91Z2gsIHdhbnQgdG8gcmV3b3JrIGhvdyBicm93c2VycyBjb252ZXkgd2hhdCB3ZWJzaXRlIHlvdSdyZSBsb29raW5nIGF0LCBzbyB0aGF0IHlvdSBkb24ndCBoYXZlIHRvIGNvbnRlbmQgd2l0aCBpbmNyZWFzaW5nbHkgbG9uZyBhbmQgdW5pbnRlbGxpZ2libGUgVVJMc+KAlGFuZCB0aGUgZnJhdWQgdGhhdCBoYXMgc3BydW5nIHVwIGFyb3VuZCB0aGVtLiBJbiBhIHRhbGsgYXQgdGhlIEJheSBBcmVhIEVuaWdtYSBzZWN1cml0eSBjb25mZXJlbmNlIG9uIFR1ZXNkYXksIENocm9tZSB1c2FibGUgc2VjdXJpdHkgbGVhZCBFbWlseSBTdGFyayBpcyB3YWRpbmcgaW50byB0aGUgY29udHJvdmVyc3ksIGRldGFpbGluZyBHb29nbGUncyBmaXJzdCBzdGVwcyB0b3dhcmQgbW9yZSByb2J1c3Qgd2Vic2l0ZSBpZGVudGl0eS48c3VwPjE8L3N1cD5cclxuICA8L3A+PHA+QW5kIHlldCwgYXMgbXkgU2VwdGVtYmVyIHBvc3Qgd29uZGVyZWQ6IFNpbmNlIHRoZXJlIDxpPmFyZTwvaT4gbmVlZHMsIGFzIG11Y2ggYXMgdGhlcmUgd2FzIGEgbmVlZCBmb3IgYXNwaGFsdCByb2FkcywgZGlyZWN0bHkgZm9sbG93aW5nIHRoZSA8aT52dWxrYW5pemluZzwvaT4gbmV3IG9wcG9ydHVuaXRpZXMgZm9yIHJ1YmJlciB0aXJlcy4gVGhlIGluZXZpdGFibGUgVW5pdm9ybSBSZXNvdXJjZSBMb2NhdG9yIHJldm9sdXRpb24gZG9lcyBsb29tLCBidXQgPGk+aXMgTm93PC9pPiB0aGUgdGltaW5nIHJpZ2h0IGZvciB0aGUgdGltZXM/PHN1cD4gMTwvc3VwPjwvcD5gOyBcclxuICAgIHZhciBibG9nY2l0ZTE3NyA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2dvb2dsZS1jaHJvbWUta2lsbC11cmwtZmlyc3Qtc3RlcHNcIj5cclxuICBodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvZ29vZ2xlLWNocm9tZS1raWxsLXVybC1maXJzdC1zdGVwczwvYT48L3A+ICBcclxuIFxyXG4gIGA7IFxyXG5cclxuICBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTc2ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj48aT5UYXBweTwvaT4gbWF5IG5vdCBsb29rIGxpa2UgYSBraW5kIG9mIGhpZ2gtc3Rha2VzIHZhbHVlLWl0ZW0sIGNvbXBhcmVkIHdpdGggYSBIb2xseXdvb2Qgc3RvcnkgbGlrZSBcIkNoYXBwaWVcIiB3aXRoIEh1Z2ggSmFja21hbi4gQSBzdG9yeSBmZWF0dXJpbmcgIEZhY3Rpb25zIGZpZ2h0aW5nIG92ZXIgY29udHJvbCBvZiBvbmUgYXJ0aXN0aWMsIHRhbGVudGVkIGRyb2lkLWJvdC4gWWV0LCB3aXRoIGVxdWFsbHkgaGlnaCBkcmFtYSwgaXQgc291bmRzIGxpa2UgdGhlIHN0YWtlcyBnb3QgcmFpc2VkIHRvIGludGVybmF0aW9uYWwgcHJvcG9ydGlvbnMsIGZvci4uLiBmb3IgYSBwaGVub21lbmFsIFQtTW9iaWxlIHBob25lLXRlc3RlciBib3QuLi4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5BIGdyYW5kIGp1cnkgaW4gU2VhdHRsZSBoYXMgY2hhcmdlZCBIdWF3ZWkgd2l0aCBjb25zcGlyYWN5IHRvIHN0ZWFsIHRyYWRlIHNlY3JldHMsIGF0dGVtcHRlZCB0aGVmdCBvZiB0cmFkZSBzZWNyZXRzLCBzZXZlbiBjb3VudHMgb2Ygd2lyZSBmcmF1ZCBhbmQgb25lIGNvdW50IG9mIG9ic3RydWN0aW9uIG9mIGp1c3RpY2UgZm9yIHRoZSBjb21wYW554oCZcyBhbGxlZ2VkIGF0dGVtcHRzIHRvIG1vdmUgcG90ZW50aWFsIHdpdG5lc3NlcyBiYWNrIHRvIENoaW5hLiBUaGUgaW5kaWN0bWVudHMgZ3JldyBvdXQgb2YgYSBjaXZpbCBzdWl0IGRhdGluZyBhbGwgdGhlIHdheSBiYWNrIHRvIDIwMTQgaW4gd2hpY2ggVC1Nb2JpbGUgc3VlZCBIdWF3ZWkgZm9yIHN0ZWFsaW5nIHRyYWRlIHNlY3JldHMgcmVsYXRlZCB0byBhIHJvYm90aWMgcGhvbmUtdGVzdGluZyBkZXZpY2Uga25vd24gYXMg4oCcVGFwcHku4oCdIDxzdXA+MTwvc3VwPjwvcD5cclxuIDxwPkl0IGxvb2tzIGxpa2UgaGlnaCBqdXN0aWNlIHdpbGwgYmUgc2VydmVkIGZvciBcIlRhcHB5XCIgdGhlIDxpPnBoZW5vbWVuYWw8L2k+IHBob25lLXRlc3RlciBib3QuLi4gVGFsayBhYm91dCBkcmFtYXRpYyBlc2NhbGF0aW9uITxwPlxyXG4gIDwvcD4gIGA7IFxyXG4gICAgdmFyIGJsb2djaXRlMTc2ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3RlY2hjcnVuY2guY29tLzIwMTkvMDEvMjgvaHVhd2VpLXVzLW1lbmctd2FuemhvdS1kb2pcIj5cclxuICBodHRwczovL3RlY2hjcnVuY2guY29tLzIwMTkvMDEvMjgvaHVhd2VpLXVzLW1lbmctd2FuemhvdS1kb2o8L2E+PC9wPiAgXHJcbiBcclxuICBgOyBcclxuICB2YXIgYmxvZ3Bvc3QxNzUgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRlY2hDcnVuY2ggRGlzcnVwdCEgMjAxOCBoYWlsZWQgYW4gQS5JLiBzdGFydHVwIG5hbWVkIEthaXJvczxzdXA+IDA8L3N1cD4gdGhhdCBhZGRyZXNzZWQgdGhpcyBzYW1lIGRpbGVtbWE6IEhvdyBkbyB5b3UgYWNjdXJhdGVseSByZXBvcnQgcmVzdWx0cyB3aGVuIGZhY2VkIHdpdGggZGlzcHJvcG9ydGlvbmF0ZSBzYW1wbGluZyBkdWUgdG8gIHZhcmlhbmNlIGRpZmZlcmVuY2VzIGJldHdlZW4gc3RyYXRpZmljYXRpb24gbGF5ZXJzPyBDYW4geW91IGJhbGFuY2Ugb25lIGdyb3VwIHdpdGggb25lLWh1bmRyZWQgZm9sZCBtb3JlIGRhdGEtcG9pbnRzPyBBbmQsIGVxdWFsbHkgcG9sYXJpemVkIGlzIHRoZSBpbmZlcmVudGlhbCBmcmVlZG9tcyBuZWVkZWQgdG8gcmVwb3J0IHN0YXRpc3RpY2FsbHkgc2lnbmlmaWNhbnQgcmVzdWx0cyB3aXRoIHNtYWxsLXNhbXBsZSBhbGdvcml0aG1zLjwvcD4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5BbWF6b24ncyBSZWtvZ25pdGlvbiBzb2Z0d2FyZSBpbmNvcnJlY3RseSBpZGVudGlmaWVkIHdvbWVuIGFzIG1lbiAxOSBwZXJjZW50IG9mIHRoZSB0aW1lLCBhY2NvcmRpbmcgdG8gdGhlIHN0dWR5LiBJbiBhZGRpdGlvbiwgaXQgaW5jb3JyZWN0bHkgaWRlbnRpZmllZCBkYXJrZXItc2tpbm5lZCB3b21lbiBhcyBtZW4gMzEgcGVyY2VudCBvZiB0aGUgdGltZSwgaXQgc2F5cy4gU29mdHdhcmUgZnJvbSBNaWNyb3NvZnQsIGJ5IGNvbXBhcmlzb24sIGlkZW50aWZpZWQgZGFya2VyLXNraW5uZWQgd29tZW4gYXMgbWVuIDEuNSBwZXJjZW50IG9mIHRoZSB0aW1lLlxyXG48YnIgLz48YnIgLz5cclxuTWF0dCBXb29kLCBnZW5lcmFsIG1hbmFnZXIgb2YgYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgYXQgQW1hem9uIFdlYiBTZXJ2aWNlcywgc2FpZCB0aGF0IHRoZSBzdHVkeSdzIHRlc3QgcmVzdWx0cyBhcmUgYmFzZWQgb24gZmFjaWFsIGFuYWx5c2lzLCBub3QgZmFjaWFsIHJlY29nbml0aW9uLiBBbmFseXNpcywgaGUgc2FpZCwgY2FuIGZpbmQgZmFjZXMgaW4gdmlkZW9zIG9yIGltYWdlcyBhbmQgYXNzaWduIGdlbmVyaWMgYXR0cmlidXRlcywgc3VjaCBhcyB0aGUgd2VhcmluZyBvZiBnbGFzc2VzLiBSZWNvZ25pdGlvbiwgaGUgc2FpZCwgbWF0Y2hlcyBhbiBpbmRpdmlkdWFsJ3MgZmFjZSB0byBpbWFnZXMgaW4gdmlkZW9zIGFuZCBwaG90b2dyYXBocy4gVGhlIFJla29nbml0aW9uIHRlY2hub2xvZ3kgaW5jbHVkZXMgYm90aCBvZiB0aGVzZSBmdW5jdGlvbmFsaXRpZXMuIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD4gXHJcbiAgPHA+XHJcbiAgPHA+U28sIHNvZnR3YXJlIGNvbnNpZGVyYXRpb25zIGNhbiBiZSBlcXVhbGx5IGltcG9ydGFudCB0byBwbGFpbi1vbGQgaGFyZHdhcmUgbGltaXRhdGlvbnMuIFNvIGluIGFsbCBmYWlybmVzcywgbXVzdCB0ZWNobm9sb2d5J3MgY2FwYWJpbGl0aWVzIGtlZXAgcGFjZSB3aXRoIHBvbGl0aWNhbGx5LWNvcnJlY3QgcmVzdWx0cz8gQXMgdGhleSBzYXksIFdoeSBtYWtlIGl0IGEgZmVkZXJhbCBjYXNlPyBcclxuICA8L3A+XHJcbiAgYDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNzUgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNuZXQuY29tL25ld3MvYW1hem9ucy1mYWNpYWwtdGVjaC1zaG93cy1nZW5kZXItcmFjaWFsLWJpYXMtbWl0LXN0dWR5LXNheXMvXCI+XHJcbiAgaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy9hbWF6b25zLWZhY2lhbC10ZWNoLXNob3dzLWdlbmRlci1yYWNpYWwtYmlhcy1taXQtc3R1ZHktc2F5cy88L2E+PC9wPiAgXHJcblxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjAuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5rYWlyb3MuY29tXCI+XHJcbiAgaHR0cHM6Ly93d3cua2Fpcm9zLmNvbTwvYT48L3A+ICBcclxuIFxyXG4gIGA7IFxyXG4gIHZhciBibG9ncG9zdDE3NCA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+SGlzdG9yeSBkb2VzIGl0cyBvd24gc3R1bnRzLiBJbnRlcm5ldCBIaXN0b3J5IGFsbCB0aGUgbW9yZSwgYW5kIHRoZSBjYXN0IGFuZCBjcmV3IGNvdWxkIG5vdCBoYXZlIGJlZW4gYmV0dGVyIHBpY2tlZDogSGVyZSBpcyBhbiAgXHJcbkFyY2hpdmFsIEJlc3RzOiA8aT5KdWx5IDIwMTY8L2k+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgaW50ZXJuZXQgaXMgc28gdmFzdCBhbmQgZm9ybWxlc3MgdGhhdCBpdOKAmXMgaGFyZCB0byBpbWFnaW5lIGl0IGJlaW5nIGludmVudGVkLiBJdOKAmXMgZWFzeSB0byBwaWN0dXJlIFRob21hcyBFZGlzb24gaW52ZW50aW5nIHRoZSBsaWdodGJ1bGIsIGJlY2F1c2UgYSBsaWdodGJ1bGIgaXMgZWFzeSB0byB2aXN1YWxpemUuIFlvdSBjYW4gaG9sZCBpdCBpbiB5b3VyIGhhbmQgYW5kIGV4YW1pbmUgaXQgZnJvbSBldmVyeSBhbmdsZS5cclxuPGJyIC8+PGJyIC8+XHJcblRoZSBpbnRlcm5ldCBpcyB0aGUgb3Bwb3NpdGUuIEl04oCZcyBldmVyeXdoZXJlLCBidXQgd2Ugb25seSBzZWUgaXQgaW4gZ2xpbXBzZXMuIFRoZSBpbnRlcm5ldCBpcyBsaWtlIHRoZSBob2x5IGdob3N0OiBpdCBtYWtlcyBpdHNlbGYga25vd2FibGUgdG8gdXMgYnkgdGFraW5nIHBvc3Nlc3Npb24gb2YgdGhlIHBpeGVscyBvbiBvdXIgc2NyZWVucyB0byBtYW5pZmVzdCBzaXRlcyBhbmQgYXBwcyBhbmQgZW1haWwsIGJ1dCBpdHMgZXNzZW5jZSBpcyBhbHdheXMgZWxzZXdoZXJlLlxyXG48YnIgLz48YnIgLz5cclxuVGhpcyBmZWF0dXJlIG9mIHRoZSBpbnRlcm5ldCBtYWtlcyBpdCBzZWVtIGV4dHJlbWVseSBjb21wbGV4LiBTdXJlbHkgc29tZXRoaW5nIHNvIHViaXF1aXRvdXMgeWV0IGludmlzaWJsZSBtdXN0IHJlcXVpcmUgZGVlcCB0ZWNobmljYWwgc29waGlzdGljYXRpb24gdG8gdW5kZXJzdGFuZC4gQnV0IGl0IGRvZXNu4oCZdC4gVGhlIGludGVybmV0IGlzIGZ1bmRhbWVudGFsbHkgc2ltcGxlLiBBbmQgdGhhdCBzaW1wbGljaXR5IGlzIHRoZSBrZXkgdG8gaXRzIHN1Y2Nlc3MuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPiAgYDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNzQgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS90ZWNobm9sb2d5LzIwMTYvanVsLzE1L2hvdy10aGUtaW50ZXJuZXQtd2FzLWludmVudGVkLTE5NzYtYXJwYS1rYWhuLWNlcmZcIj5cclxuICBodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE2L2p1bC8xNS9ob3ctdGhlLWludGVybmV0LXdhcy1pbnZlbnRlZC0xOTc2LWFycGEta2Fobi1jZXJmPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG5cclxuICBcclxuICB2YXIgYmxvZ3Bvc3QxNzMgICAgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBNeSBuZXcgU2Ftc3VuZyA0MFwiIEJlc3QgQnV5IFNwZWNpYWwgaGFzIHNoaW5lZCB5ZXQgIGhhcyBhbHNvIGhhZCB0cnlpbmcgbW9tZW50cy4gQW4gZXZlcnktb25jZS1pbi1hLXdoaWxlIGZyb3plbiBkZXNrdG9wIHNjcmVlbiAtLSA8aT5wZXJtYS1mcm96ZW4gdW50aWwgYSBjb3VwbGUgaGFyZCByZXNldHMuPC9pPiBJbiBteSBvcGluaW9uLCBub3RoaW5nJ3Mgb3V0IG9mIHRoZSBvcmRpbmFyeS0tdGhleSdyZSBqdXN0IGZpbmlja3ksIGp1c3QgbGlrZSB0aGUgOTAncyBjb21wdXRlcnMsIGl0J3MgY2FsbGVkIGJpZyBwbGFucyB3aXRoIHNtYWxsIGhhcmR3YXJlIHBsYXRmb3Jtcy0tbW9sZSBoaWxscyBiZWNvbWUgbW91bnRhaW5zLiBTZXJ2aWNlIGluLWZpZ2h0aW5nIGZvciBwcmVjaW91cyBtZW1vcnkgcmVzb3VyY2VzISBUaGUgaGFyZCB0aGlua2luZyBhbmQgdGhlIGhhcmRlc3QgcHJvYmxlbXMsIHN0YXJ0aW5nIHdpdGggLi4uSSdtIGZyb3plbiwgaG93IGRvIEkgdHVybiBvbiBhbmQgb2ZmPy4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5JIHRyaWVkIHRoZSBvYnZpb3VzIHRoaW5ncy4gSSB0dXJuZWQgb2ZmIHRoZSBUViBhbmQgdHVybmVkIGl0IGJhY2sgb24uIFNhbWUgcHJvYmxlbS4gVW5wbHVnZ2VkLCByZXBsdWdnZWQuIEhhcHBlbmVkIGFnYWluLiBSZXNldCB0aGUgY2FibGUgYm94IGp1c3QgdG8gdHJ5IGl0LiBBZ2Fpbi4gTWFkZSB0aGUgc2lnbiBvZiB0aGUgY3Jvc3MuIENoZWNrZWQgZm9yIHNvZnR3YXJlIHVwZGF0ZXMgZm9yIHRoZSB0ZWxldmlzaW9uLiBUaHJldyBteSBwaG9uZS4gU2NyZWFtZWQgaW50byB0aGUgYWJ5c3MuIEJ1dC4gSXQuIEp1c3QuIEtlcHQuIEhhcHBlbmluZy5cclxuXHJcbiAgRmluYWxseSwgSSB0dXJuZWQgdG8gdGhlIGNvbnN1bWVyIG1pY3JvLXNvbGlkYXJpdHkgYXZhaWxhYmxlIGluIHRoZSBzdXBwb3J0IGZvcnVtcy4gQmFzZWQgb24gdGhlIG91dHJhZ2VkIHJlc3BvbnNlcyBvZiBvdGhlciBTYW1zdW5nIFRWIG93bmVycywgdGhlIGlzc3VlIGJlZ2FuIHNvbWV0aW1lIGluIFNlcHRlbWJlci4gTm8gb25lIGtub3dzIGhvdyB0byBmaXggaXQuIEFuZCBiZWNhdXNlIG9mIGEgZGVhbCB0aGF0IFNhbXN1bmcgc3RydWNrIHdpdGggYXBwIG1ha2VycywgeW91IGNhbuKAmXQgZGVsZXRlIHRoZSBhcHAgZnJvbSB5b3VyIG93biBUVi48c3VwPjE8L3N1cD5cclxuICA8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3MyA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGhlYXRsYW50aWMuY29tL3RlY2hub2xvZ3kvYXJjaGl2ZS8yMDE5LzAxL3NtYXJ0LXR2cy1hcmUtZHVtYi81ODEwNTkvXCI+XHJcbiAgaHR0cHM6Ly93d3cudGhlYXRsYW50aWMuY29tL3RlY2hub2xvZ3kvYXJjaGl2ZS8yMDE5LzAxL3NtYXJ0LXR2cy1hcmUtZHVtYi81ODEwNTkvPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG5cclxuXHJcbiAgdmFyIGJsb2dwb3N0MTcyID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5ZZXQgYW5vdGhlciByZWFzb24gdG8gbW9kZXJhdGUgb24gdGhhdCBFY28tRXhwZW5zaXZlIHJlZCBtZWF0IC4uLiAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gV2Ugbm93IGhhdmUgc28gbWFueSBpbnRlcmNvbm5lY3RlZCBmb29kLXJlbGF0ZWQgY3Jpc2VzIOKAlCBjbGltYXRlIGNoYW5nZSwgcG9sbHV0aW9uLCBhbmQgZm9vZCB3YXN0ZSwgbm90IHRvIG1lbnRpb24gbWFsbnV0cml0aW9uIGFuZCBvYmVzaXR5IOKAlCB0aGF0IGl0IHdpbGwgYmUgaW1wb3NzaWJsZSB0byBmZWVkIHRoZSAxMCBiaWxsaW9uIHBlb3BsZSBleHBlY3RlZCBieSAyMDUwIHVubGVzcyB3ZSBtYWtlIGRyYW1hdGljIGNoYW5nZXMgdG8gb3VyIGRpZXRzIGFuZCBmYXJtaW5nIHByYWN0aWNlcywgdGhlIHJlc2VhcmNoZXJzIGFyZ3VlLjxiciAvPjxiciAvPlxyXG5cclxuICBXaGF04oCZcyBuZWVkZWQsIGFjY29yZGluZyB0byB0aGUgcGVlci1yZXZpZXdlZCByZXBvcnQsIHRpdGxlZCDigJxGb29kIGluIHRoZSBBbnRocm9wb2NlbmU6IFRoZSBFQVQtTGFuY2V0IENvbW1pc3Npb24gb24gaGVhbHRoeSBkaWV0cyBmcm9tIHN1c3RhaW5hYmxlIGZvb2Qgc3lzdGVtcyzigJ0gaXMgYSBuZXcgcGhpbG9zb3BoeSBmb3IgaG93IHRvIGVhdCBvbiBwbGFuZXQgRWFydGguIFRob3VnaCB0aGVyZSBhcmUgaHVnZSB2YXJpYXRpb25zIGFyb3VuZCB0aGUgd29ybGQgaW4gd2hhdCBhbmQgaG93IG11Y2ggd2UgY29uc3VtZSwgd2UgYXJlIGFsbCBpbiB0aGlzIGV4aXN0ZW50aWFsIGNyaXNpcyB0b2dldGhlci48c3VwPjE8L3N1cD5cclxuICA8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE3MiA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudm94LmNvbS8yMDE5LzEvMjMvMTgxODU0NDYvY2xpbWF0ZS1jaGFuZ2UtcGxhbmV0LWJhc2VkLWRpZXQtbGFuY2V0LWVhdC1jb21taXNzaW9uXCI+XHJcbiAgaHR0cHM6Ly93d3cudm94LmNvbS8yMDE5LzEvMjMvMTgxODU0NDYvY2xpbWF0ZS1jaGFuZ2UtcGxhbmV0LWJhc2VkLWRpZXQtbGFuY2V0LWVhdC1jb21taXNzaW9uPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG4gIHZhciBibG9ncG9zdDE3MSA9IGA8cCBjbGFzcz1cInF1b3RlXCI+UG9wdWxhciBNZWNoYW5pY3MgcmVwb3J0czpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBUaGUgdGhpbmcgdGhhdOKAmXMgY291bnRlcmludHVpdGl2ZSBhYm91dCB0aGUgc3RhaW5sZXNzIHN0ZWVsIGlzLCBpdOKAmXMgb2J2aW91c2x5IGNoZWFwLCBpdOKAmXMgb2J2aW91c2x5IGZhc3TigJRidXQgaXTigJlzIG5vdCBvYnZpb3VzbHkgdGhlIGxpZ2h0ZXN0LiBCdXQgaXQgaXMgYWN0dWFsbHkgdGhlIGxpZ2h0ZXN0LiBJZiB5b3UgbG9vayBhdCB0aGUgcHJvcGVydGllcyBvZiBhIGhpZ2gtcXVhbGl0eSBzdGFpbmxlc3Mgc3RlZWwsIHRoZSB0aGluZyB0aGF0IGlzbuKAmXQgb2J2aW91cyBpcyB0aGF0IGF0IGNyeW9nZW5pYyB0ZW1wZXJhdHVyZXMsIHRoZSBzdHJlbmd0aCBpcyBib29zdGVkIGJ5IDUwIHBlcmNlbnQuPHN1cD4xPC9zdXA+IFxyXG4gIDwvcD4gIGA7IFxyXG4gICAgdmFyIGJsb2djaXRlMTcxID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5wb3B1bGFybWVjaGFuaWNzLmNvbS9zcGFjZS9yb2NrZXRzL2EyNTk1MzY2My9lbG9uLW11c2stc3BhY2V4LWJmci1zdGFpbmxlc3Mtc3RlZWwvXCI+XHJcbiAgaHR0cHM6Ly93d3cucG9wdWxhcm1lY2hhbmljcy5jb20vc3BhY2Uvcm9ja2V0cy9hMjU5NTM2NjMvZWxvbi1tdXNrLXNwYWNleC1iZnItc3RhaW5sZXNzLXN0ZWVsLzwvYT48L3A+ICBcclxuICBcclxuICBgOyBcclxuICB2YXIgYmxvZ3Bvc3QxNzA1ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Db3B5IENhdCBBY2N1c2F0aW9ucyBmcm9tIHRoZSBmZXcgbWVhbiBhIHNsb3dlciwgbW9yZSBleHBlbnNpdmUsIGFkLWRyaXZlbiBpbnRlcm5ldCBleHBlcmllbmNlISBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlNpbXBseSBwdXQsIHRoZSBEaXJlY3RpdmUgb24gQ29weXJpZ2h0IHBsYWNlcyBtb3JlIHJlc3BvbnNpYmlsaXR5IG9uIHdlYnNpdGVzIHN1Y2ggYXMgWW91VHViZSwgRmFjZWJvb2sgYW5kIFR3aXR0ZXIgdG8gbWFrZSBzdXJlIHRoYXQgY29weXJpZ2h0ZWQgbWF0ZXJpYWxseSBpc27igJl0IGJlaW5nIGlsbGVnYWx5IHNoYXJlZCBvbiB0aGVpciBwbGF0Zm9ybXMuIFVudGlsIG5vdywgdGhlIG9udXMgaGFzIG1vc3RseSBiZWVuIG9uIHRoZSBjb3B5cmlnaHQgaG9sZGVycyDigJMgdXN1YWxseSB0aGUgY29tcGFuaWVzIHRoYXQgcHJvZHVjZSBhdWRpbywgdmlkZW8gb3Igd3JpdHRlbiBjb250ZW50IOKAkyB0byBlbmZvcmNlIGNvcHlyaWdodCBwcm90ZWN0aW9uIGJ1dCB1bmRlciB0aGUgbmV3IGxhdyB0aGlzIHJlc3BvbnNpYmlsaXR5IHdpbGwgc2hpZnQgb250byB0aGUgbWFqb3IgcGxhdGZvcm1zIHRoZW1zZWx2ZXMuXHJcbjxiciAvPjxiciAvPlxyXG4gIEF0IHRoZSBoZWFydCBvZiB0aGUgRGlyZWN0aXZlIG9uIENvcHlyaWdodCBhcmUgdHdvIGRpdmlzaXZlIGFydGljbGVzIOKAkyBBcnRpY2xlIDExIGFuZCBBcnRpY2xlIDEzIOKAkyB0aGF0IGhhdmUgYmVlbiBkdWJiZWQgdGhlIOKAnGxpbmsgdGF44oCdIGFuZCDigJxtZW1lIGJhbuKAnSBhcnRpY2xlcyByZXNwZWN0aXZlbHkuIENyaXRpY3Mgb2YgdGhlIERpcmVjdGl2ZSBvbiBDb3B5cmlnaHQgYXJndWUgdGhhdCB0aGVzZSBhcnRpY2xlcyBtZWFuIHRoYXQgcGxhdGZvcm1zIHdpbGwgaGF2ZSB0byBwYXkgYSBmZWUgdG8gc2hhcmUgYSBsaW5rIHRvIGEgbmV3cyBhcnRpY2xlIGFuZCBoYXZlIHRvIHN0YXJ0IGZpbHRlcmluZyBhbmQgcmVtb3ZpbmcgbWVtZXMuPHN1cD4xPC9zdXA+ICBcclxuICA8L3A+ICBcclxuICA8cD5UaGUgZWZmb3J0IGludm9sdmVkIGluIHJvcGluZyBpbiBpbnRlcm5ldCBjcmVhdGl2aXR5IGlzIC4uLjxpPiBsaWtlIGhlcmRpbmcgY2F0cz88L2k+ICA8L3A+YDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNzA1ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jby51ay9hcnRpY2xlL3doYXQtaXMtYXJ0aWNsZS0xMy1hcnRpY2xlLTExLWV1cm9wZWFuLWRpcmVjdGl2ZS1vbi1jb3B5cmlnaHQtZXhwbGFpbmVkLW1lbWUtYmFuXCI+ICBodHRwczovL3d3dy53aXJlZC5jby51ay9hcnRpY2xlL3doYXQtaXMtYXJ0aWNsZS0xMy1hcnRpY2xlLTExLWV1cm9wZWFuLWRpcmVjdGl2ZS1vbi1jb3B5cmlnaHQtZXhwbGFpbmVkLW1lbWUtYmFuPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG5cclxuICBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTcwMDUgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlxyXG4gIEF0IHRoZSBlbmQgb2YgdGhlIGRheSwgZXZlcnkgc2VjcmV0IGxhaXIgZGVwZW5kcyBvbiB0aGUgc29mdHdhcmUgYW5kIGhhcmR3YXJlIHN0ZXdhcmRzIG9mIHRoZSB3b3JsZDogVGhhbmsgZ29vZG5lc3MgZm9yIHRoaXMgc3BlY2lhbCBjbGFzcyBvZiBjcmFmdHNtZW4gLS0gPGk+ZGVmYWN0bzwvaT4gYWxvdHRlZCB0aGUgcm9sZSBvZiBjb25uZWN0aW5nIGV2ZXJ5IHBhcnQgb2YgdGhlIHdvcmxkIC4uLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gIEEgZnJpZ2h0ZW5lZCBSb2RyaWd1ZXogZmlyc3QgbWV0IEd1em1hbiBpbiAyMDA4LCBhdCBhIG1lZXRpbmcgaW4gdGhlIG1vdW50YWlucyB3aGVyZSB0aGUgU2luYWxvYSBDYXJ0ZWwgbGVhZGVyIGhhZCBiZWVuIGhpZGluZyBmcm9tIGF1dGhvcml0aWVzIGFmdGVyIGhpcyBsYXVuZHJ5LWNhcnQgZXNjYXBlIGZyb20gYSBNZXhpY2FuIHByaXNvbiB5ZWFycyBlYXJsaWVyLiBSb2RyaWd1ZXogZGVzY3JpYmVkIGJlaW5nIHRha2VuIHRvIGEgY2xhbmRlc3RpbmUgYWlyc3RyaXAgdG8gYmUgZmxvd24gdG8gdGhlIG1lZXRpbmcsIGFuZCBzYXlzIGhlIHdhcyBtZXQgb24gdGhlIGdyb3VuZCBieSBcImFybWVkIG1pbGl0YXJ5LlwiIFJvZHJpZ3VleidzIHdvcmsgaW5pdGlhbGx5IGludm9sdmVkIGNyZWF0aW5nIGFuIG9mZmljZS1saWtlIHBob25lIGV4dGVuc2lvbiBzeXN0ZW0gZm9yIFNpbmFsb2EgQ2FydGVsIGFzc29jaWF0ZXMgdGhhdCB3b3VsZCBhbGxvdyB0aGVpciBjb252ZXJzYXRpb25zIHRvIGJlIGVuY3J5cHRlZCwgb3IgdW5hYmxlIHRvIGJlIGludGVyY2VwdGVkIGJ5IGF1dGhvcml0aWVzLiBHdXptYW4sIHdobyBkaWQgbm90IGVuam95IHdvcmtpbmcgb24gY29tcHV0ZXJzLCB3YXMgcGxlYXNlZCB3aXRoIHRoZSBhYmlsaXR5IHRvIGhhdmUgcHJvdGVjdGVkIHBob25lIGNvbnZlcnNhdGlvbnMuICA8c3VwPjE8L3N1cD4gIFxyXG4gIDwvcD4gIGA7IFxyXG4gICAgdmFyIGJsb2djaXRlMTcwMDUgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNubi5jb20vMjAxOS8wMS8wOS9hbWVyaWNhcy9lbC1jaGFwby1pdC10ZWNobmljaWFuLXJvZHJpZ3Vlei9pbmRleC5odG1sXCI+aHR0cHM6Ly93d3cuY25uLmNvbS8yMDE5LzAxLzA5L2FtZXJpY2FzL2VsLWNoYXBvLWl0LXRlY2huaWNpYW4tcm9kcmlndWV6L2luZGV4Lmh0bWxcclxuICAgPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG5cclxudmFyIGJsb2dwb3N0MTcwID0gYDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gVGhlIGdlbmUgdGhlcmFweSB3b3VsZCBpbnN0ZWFkIGdpdmUgdGhlaXIgYm9kaWVzIGEgd29ya2luZyBnZW5lIGZvciB0aGVtIHRvIG1ha2UgdGhlaXIgb3duIGZhY3RvciBWSUlJLiBCdXQgdHJhbnNmZXJyaW5nIGEgZ2VuZSBpbnRvIGEgcGVyc29uIGlzIG5vIGVhc3kgZmVhdC4gR2VuZXMgYXJlIGxvbmcgc3RyaW5ncyBvZiBETkEgdGhhdCBkb24ndCByZWFkaWx5IGdldCBpbnNpZGUgY2VsbHMuIFNvIHRoZXJhcGllcyB0eXBpY2FsbHkgcmVseSBvbiB2aXJ1c2VzLCB3aGljaCBzcXVpcnQgRE5BIGludG8gY2VsbHMnIG51Y2xlaSBhcyBhIHdheSBvZiBsaWZlLiBJbiB0aGlzIGNhc2UsIGEgdmlydXMsIG1vZGlmaWVkIHNvIHRoYXQgaXQgZG9lc24ndCBjYXVzZSBkaXNlYXNlLCBhbmQgd2l0aCB0aGUgaGVhbHRoeSBodW1hbiBmYWN0b3IgVklJSSBnZW5lIGFkZGVkIHRvIGl0cyBETkEsIGlzIGluamVjdGVkIGludG8gdGhlIGJvZHkuIEl0IHRoZW4gZW50ZXJzIHRoZSBib2R5J3MgY2VsbHMgdG8gZGVwb3NpdCBpdHMgY2FyZ28sIGxlYXZpbmcgaXQgYXMgYSBzZXBhcmF0ZSBwaWVjZSBvZiBETkEgaW4gdGhlIG51Y2xldXMgbmV4dCB0byB0aGUgaG9zdCBjZWxsJ3MgZ2Vub21lLjxzdXA+MTwvc3VwPiAgXHJcbiAgPC9wPiAgYDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNzAgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly9kaWdnLmNvbS8yMDE5L2dlbmUtdGhlcmFwaWVzLWltbXVuaXR5XCI+aHR0cDovL2RpZ2cuY29tLzIwMTkvZ2VuZS10aGVyYXBpZXMtaW1tdW5pdHlcclxuICAgPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7IFxyXG4gIHZhciBibG9ncG9zdDE2OSA9IGA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IEluIGhpcyBibG9nLCBIdW50IHNheXMgYSBsYXJnZSBmaWxlIG9mIDEyLDAwMCBzZXBhcmF0ZSBmaWxlcyBhbmQgODdHQiBvZiBkYXRhIGhhZCBiZWVuIHVwbG9hZGVkIHRvIE1FR0EsIGEgcG9wdWxhciBjbG91ZCBzZXJ2aWNlLiBUaGUgZGF0YSB3YXMgdGhlbiBwb3N0ZWQgdG8gYSBwb3B1bGFyIGhhY2tpbmcgZm9ydW0gYW5kIGFwcGVhcnMgdG8gYmUgYW4gYW1hbGdhbWF0aW9uIG9mIG92ZXIgMiwwMDAgZGF0YWJhc2VzLiBUaGUgdHJvdWJsaW5nIHRoaW5nIGlzIHRoZSBkYXRhYmFzZXMgY29udGFpbiDigJxkZWhhc2hlZOKAnSBwYXNzd29yZHMsIHdoaWNoIG1lYW5zIHRoZSBtZXRob2RzIHVzZWQgdG8gc2NyYW1ibGUgdGhvc2UgcGFzc3dvcmRzIGludG8gdW5yZWFkYWJsZSBzdHJpbmdzIGhhcyBiZWVuIGNyYWNrZWQsIGZ1bGx5IGV4cG9zaW5nIHRoZSBwYXNzd29yZHMuXHJcbjxiciAvPlxyXG4gIFNvIHdoYXQgZG9lcyB0aGlzIG1lYW4gZm9yIHRoZSBhdmVyYWdlIHBlcnNvbj8gQWNjb3JkaW5nIHRvIEh1bnQsIGl0IG1lYW5zIGNvbXByb21pc2VkIGVtYWlsIGFuZCBwYXNzd29yZCBjb21ib3MgYXJlIG1vcmUgdnVsbmVyYWJsZSBmb3IgYSBwcmFjdGljZSBjYWxsZWQgY3JlZGVudGlhbCBzdHVmZmluZy4gQmFzaWNhbGx5LCBjcmVkZW50aWFsIHN0dWZmaW5nIGlzIHdoZW4gYnJlYWNoZWQgdXNlcm5hbWUgb3IgZW1haWwvcGFzc3dvcmQgY29tYm9zIGFyZSB1c2VkIHRvIGhhY2sgaW50byBvdGhlciB1c2VyIGFjY291bnRzLiBUaGlzIGNvdWxkIGltcGFjdCBhbnlvbmUgd2hvIGhhcyB1c2VkIHRoZSBzYW1lIHVzZXJuYW1lIGFuZCBwYXNzd29yZCBjb21ibyBhY3Jvc3MgbXVsdGlwbGUgc2l0ZXMuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPiAgYDsgXHJcbiAgICB2YXIgYmxvZ2NpdGUxNjkgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vZ2l6bW9kby5jb20vbW90aGVyLW9mLWFsbC1icmVhY2hlcy1leHBvc2VzLTc3My1taWxsaW9uLWVtYWlscy0yMS1tLTE4MzE4MzM0NTZcIj5odHRwczovL2dpem1vZG8uY29tL21vdGhlci1vZi1hbGwtYnJlYWNoZXMtZXhwb3Nlcy03NzMtbWlsbGlvbi1lbWFpbHMtMjEtbS0xODMxODMzNDU2XHJcbiA8L2E+PC9wPiAgXHJcbiAgXHJcbiAgYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2dwb3N0MTY4ID0gYDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gT24gT2N0b2JlciAxOSwgMjAxNywgYXN0cm9ub21lcnMgYXQgdGhlIFVuaXZlcnNpdHkgb2YgSGF3YWlpIHNwb3R0ZWQgYSBzdHJhbmdlIG9iamVjdCB0cmF2ZWxsaW5nIHRocm91Z2ggb3VyIHNvbGFyIHN5c3RlbSwgd2hpY2ggdGhleSBsYXRlciBkZXNjcmliZWQgYXMg4oCcYSByZWQgYW5kIGV4dHJlbWVseSBlbG9uZ2F0ZWQgYXN0ZXJvaWQu4oCdIEl0IHdhcyB0aGUgZmlyc3QgaW50ZXJzdGVsbGFyIG9iamVjdCB0byBiZSBkZXRlY3RlZCB3aXRoaW4gb3VyIHNvbGFyIHN5c3RlbTsgdGhlIHNjaWVudGlzdHMgbmFtZWQgaXQg4oCYT3VtdWFtdWEsIHRoZSBIYXdhaWlhbiB3b3JkIGZvciBhIHNjb3V0IG9yIG1lc3Nlbmdlci4gVGhlIGZvbGxvd2luZyBPY3RvYmVyLCBBdmkgTG9lYiwgdGhlIGNoYWlyIG9mIEhhcnZhcmTigJlzIGFzdHJvbm9teSBkZXBhcnRtZW50LCBjby13cm90ZSBhIHBhcGVyICh3aXRoIGEgSGFydmFyZCBwb3N0ZG9jdG9yYWwgZmVsbG93LCBTaG11ZWwgQmlhbHkpIHRoYXQgZXhhbWluZWQg4oCYT3VtdWFtdWHigJlzIOKAnHBlY3VsaWFyIGFjY2VsZXJhdGlvbuKAnSBhbmQgc3VnZ2VzdGVkIHRoYXQgdGhlIG9iamVjdCDigJxtYXkgYmUgYSBmdWxseSBvcGVyYXRpb25hbCBwcm9iZSBzZW50IGludGVudGlvbmFsbHkgdG8gRWFydGjigJlzIHZpY2luaXR5IGJ5IGFuIGFsaWVuIGNpdmlsaXphdGlvbi7igJ0gTG9lYiBoYXMgbG9uZyBiZWVuIGludGVyZXN0ZWQgaW4gdGhlIHNlYXJjaCBmb3IgZXh0cmF0ZXJyZXN0cmlhbCBsaWZlLCBhbmQgaGUgcmVjZW50bHkgbWFkZSBmdXJ0aGVyIGhlYWRsaW5lcyBieSBzdWdnZXN0aW5nIHRoYXQgd2UgbWlnaHQgY29tbXVuaWNhdGUgd2l0aCB0aGUgY2l2aWxpemF0aW9uIHRoYXQgc2VudCB0aGUgcHJvYmUuIOKAnElmIHRoZXNlIGJlaW5ncyBhcmUgcGVhY2VmdWwsIHdlIGNvdWxkIGxlYXJuIGEgbG90IGZyb20gdGhlbSzigJ0gaGUgdG9sZCBEZXIgU3BpZWdlbC48c3VwPjE8L3N1cD5cclxuICA8L3A+ICBgOyBcclxuICAgIHZhciBibG9nY2l0ZTE2OCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubmV3eW9ya2VyLmNvbS9uZXdzL3RoZS1uZXcteW9ya2VyLWludGVydmlldy9oYXZlLWFsaWVucy1mb3VuZC11cy1hLWhhcnZhcmQtYXN0cm9ub21lci1vbi10aGUtbXlzdGVyaW91cy1pbnRlcnN0ZWxsYXItb2JqZWN0LW91bXVhbXVhXCI+IGh0dHBzOi8vd3d3Lm5ld3lvcmtlci5jb20vbmV3cy90aGUtbmV3LXlvcmtlci1pbnRlcnZpZXcvaGF2ZS1hbGllbnMtZm91bmQtdXMtYS1oYXJ2YXJkLWFzdHJvbm9tZXItb24tdGhlLW15c3RlcmlvdXMtaW50ZXJzdGVsbGFyLW9iamVjdC1vdW11YW11YVxyXG4gPC9hPjwvcD4gICAgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj4yPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vYmxvZ3Muc2NpZW50aWZpY2FtZXJpY2FuLmNvbS9vYnNlcnZhdGlvbnMvNi1zdHJhbmdlLWZhY3RzLWFib3V0LXRoZS1pbnRlcnN0ZWxsYXItdmlzaXRvci1vdW11YW11YS9cIj4gaHR0cHM6Ly9ibG9ncy5zY2llbnRpZmljYW1lcmljYW4uY29tL29ic2VydmF0aW9ucy82LXN0cmFuZ2UtZmFjdHMtYWJvdXQtdGhlLWludGVyc3RlbGxhci12aXNpdG9yLW91bXVhbXVhL1xyXG4gPC9hPjwvcD4gIFxyXG4gXHJcbiAgYDsgIFxyXG4gIHZhciBibG9ncG9zdDE2NyA9IGA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gRXhhbWluZSBob3cgYW5kIHdoZW4geW91IHNldCBzdGFuZGFyZHMuIFBlcmZlY3Rpb25pc3RpYyBsZWFkZXJzIG9mdGVuIGRvbuKAmXQgY29tbXVuaWNhdGUgdGhlaXIg4oCcaGlnaCBzdGFuZGFyZHPigJ0gdW50aWwgb3RoZXJzIG1pc3MgdGhlaXIgZXhwZWN0YXRpb25zLiBXaGVuIHlvdSBvYnNlcnZlIGEgZ2FwIGJldHdlZW4gd2hhdCB5b3UgZ2V0IGFuZCB3aGF0IHlvdSB3YW50ZWQsIHBhdXNlIGJlZm9yZSByZWFjdGluZy4gQXNrIHlvdXJzZWxmIGlmIHRoZSBwZXJzb24gd2hvIGZlbGwgc2hvcnQgdW5kZXJzdG9vZCB3aGF0IHlvdSBleHBlY3RlZC4gVGhlbiwgYXNrIHlvdXJzZWxmIGlmIHdoYXQgeW91IHdhbnRlZCB3YXMgcmVhbGlzdGljIGdpdmVuIHRoZSBjaXJjdW1zdGFuY2VzIGFuZCBhYmlsaXRpZXMgb2YgeW91ciB0ZWFtLiBCZWluZyBob25lc3QgYWJvdXQgd2hhdCB5b3UgYmFzZSB5b3VyIGV4cGVjdGF0aW9ucyBvbiwgYW5kIGNsZWFybHkgY29udmV5aW5nIHRoZW0gdG8gb3RoZXJzIGluIGEgdGltZWx5IG1hbm5lciwgZW5zdXJlcyB5b3VyIHN0YW5kYXJkcyBhcmVu4oCZdCBqdXN0IGhpZ2gsIGJ1dCByZWFsaXN0aWMgYW5kIGZhaXIuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPiAgYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTY3ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2hici5vcmcvMjAxOS8wMS9hcmUteW91ci1oaWdoLWV4cGVjdGF0aW9ucy1odXJ0aW5nLXlvdXItdGVhbVwiPmh0dHBzOi8vaGJyLm9yZy8yMDE5LzAxL2FyZS15b3VyLWhpZ2gtZXhwZWN0YXRpb25zLWh1cnRpbmcteW91ci10ZWFtXHJcbiA8L2E+PC9wPiAgXHJcbiAgXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTY2ID0gYDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkFtZXJpY2FucyBsb3ZlIGNvbnZlbmllbnQgcmVjeWNsaW5nLCBidXQgY29udmVuaWVudCByZWN5Y2xpbmcgaW5jcmVhc2luZ2x5IGRvZXMgbm90IGxvdmUgdXMuIFdhc3RlIGV4cGVydHMgY2FsbCB0aGUgc3lzdGVtIG9mIGR1bXBpbmcgYWxsIHRoZSByZWN5Y2xhYmxlcyBpbnRvIG9uZSBiaW4g4oCcc2luZ2xlLXN0cmVhbSByZWN5Y2xpbmcu4oCdIEl04oCZcyBwb3B1bGFyLiBCdXQgdGhlIGNvc3QtYmVuZWZpdCBtYXRoIG9mIGl0IGhhcyBjaGFuZ2VkLiBUaGUgYmVuZWZpdCDigJQgbW9yZSBwYXJ0aWNpcGF0aW9uIGFuZCB0aHVzIG1vcmUgbWF0ZXJpYWwgcHV0IGZvcndhcmQgZm9yIHJlY3ljbGluZyDigJQgbWF5IGhhdmUgYmVlbiBvdmVydGFrZW4gYnkgdGhlIGNvc3Qg4oCUIHVucmVjeWNsYWJsZSByZWN5Y2xhYmxlcy4gT24gYXZlcmFnZSwgYWJvdXQgMjUgcGVyY2VudCBvZiB0aGUgc3R1ZmYgd2UgdHJ5IHRvIHJlY3ljbGUgaXMgdG9vIGNvbnRhbWluYXRlZCB0byBnbyBhbnl3aGVyZSBidXQgdGhlIGxhbmRmaWxsLCBhY2NvcmRpbmcgdG8gdGhlIE5hdGlvbmFsIFdhc3RlIGFuZCBSZWN5Y2xpbmcgQXNzb2NpYXRpb24sIGEgdHJhZGUgZ3JvdXAuIEp1c3QgYSBkZWNhZGUgYWdvLCB0aGUgY29udGFtaW5hdGlvbiByYXRlIHdhcyBjbG9zZXIgdG8gNyBwZXJjZW50LCBhY2NvcmRpbmcgdG8gdGhlIGFzc29jaWF0aW9uLjxzdXA+MTwvc3VwPiAgXHJcbiAgPC9wPiAgYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTY2ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2ZpdmV0aGlydHllaWdodC5jb20vZmVhdHVyZXMvdGhlLWVyYS1vZi1lYXN5LXJlY3ljbGluZy1tYXktYmUtY29taW5nLXRvLWFuLWVuZC9cIj5odHRwczovL2ZpdmV0aGlydHllaWdodC5jb20vZmVhdHVyZXMvdGhlLWVyYS1vZi1lYXN5LXJlY3ljbGluZy1tYXktYmUtY29taW5nLXRvLWFuLWVuZC9cclxuPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7ICBcclxuICB2YXIgYmxvZ3Bvc3QxNjQgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPiAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4g4oCcVG8gY29udGludWUgZGVsaXZlcmluZyBmb3Igb3VyIGN1c3RvbWVycyBhbmQgdG8gc3VjY2VlZCBpbiBkZXZlbG9waW5nIGludGVycGxhbmV0YXJ5IHNwYWNlY3JhZnQgYW5kIGEgZ2xvYmFsIHNwYWNlLWJhc2VkIGludGVybmV0LCBTcGFjZVggbXVzdCBiZWNvbWUgYSBsZWFuZXIgY29tcGFueSzigJ0gdGhlIEhhd3Rob3JuZS1iYXNlZCBjb21wYW55IHNhaWQgaW4gYSBzdGF0ZW1lbnQuIOKAnEVpdGhlciBvZiB0aGVzZSBkZXZlbG9wbWVudHMsIGV2ZW4gd2hlbiBhdHRlbXB0ZWQgc2VwYXJhdGVseSwgaGF2ZSBiYW5rcnVwdGVkIG90aGVyIG9yZ2FuaXphdGlvbnMuIFRoaXMgbWVhbnMgd2UgbXVzdCBwYXJ0IHdheXMgd2l0aCBzb21lIHRhbGVudGVkIGFuZCBoYXJkd29ya2luZyBtZW1iZXJzIG9mIG91ciB0ZWFtLuKAnVxyXG4gIDwvcD48c3VwPjE8L3N1cD4gICAgYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTY0ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5sYXRpbWVzLmNvbS9idXNpbmVzcy9sYS1maS1zcGFjZXgtbGF5b2Zmcy0yMDE5MDExMS1zdG9yeS5odG1sXCI+XHJcbiAgaHR0cHM6Ly93d3cubGF0aW1lcy5jb20vYnVzaW5lc3MvbGEtZmktc3BhY2V4LWxheW9mZnMtMjAxOTAxMTEtc3RvcnkuaHRtbDwvYT48L3A+ICBcclxuICBcclxuICBgOyBcclxuICAgIHZhciBibG9ncG9zdDE2MyA9ICAgYCA8cCBjbGFzcz1cInF1b3RlXCI+IFNtYXJ0cGhvbmVzIGFyZSBhcyBjZW50cmFsIHRvIHRoZSBlY29ub215IGFzIGNhcnMgYW5kIGNyZWRpdCBjYXJkcywgYW5kIGEgbG90IG9mIHBlb3BsZSBoYXZlIGxpdHRsZSBtZWFuaW5nZnVsIG9wcG9ydHVuaXR5IHRvIHF1aXQuIFxyXG4gICAgQW5kIHRoZSDigJxvZmZsaW5l4oCdIHdvcmxkIGlzIG5vdyBydWxlZCBieSB3aGF0IGhhcHBlbnMgb25saW5lLiBFc2NhcGUgaXMgaW1wb3NzaWJsZS4gUXVpcHMgb24gVHdpdHRlciBhcmUgaW5kaXJlY3RseSBwcm9ncmFtbWluZyBjYWJsZSBuZXdzIFxyXG4gICAgPHN1cD4xPC9zdXA+IC4uLjxiciAvPjxiciAvPi0tTllUIE9wLUVkXHJcbiAgICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRlY2hub2xvZ3kgaXMgdG9vIG9mdGVuIHRoZSBzY2FwZWdvYXQgZm9yIHByb2JsZW1zIHdpdGggLi4uIDxpPihvdXIpPC9pPiBoYWJpdHMuIFdoZXRoZXIgaXRzIDxpPnNjcmVlbjwvaT4gdGltZSwgc2VsZmllLWFkZGljdGlvbiBvciBtZW50YWwgZGVwZW5kYW5jZSwgaXQncyBuZXZlciB1cyBhcyBhIHNvY2lldHkuIEkgYXJndWUgaW50ZXJhY3RpdmUgdGVjaCBzYXZlZCBhIHdvcmxkIG9mIHBhc3NpdmUgTW92aWUgJiBUViB3YXRjaGluZywgcGFzc2l2ZSByZWFkaW5nIC4uLiBsZWF2aW5nIG9ubHkgdGhlIDxpPnByb2Zlc3Npb25hbHM8L2k+IHRvIGZpbG0sIHJlY29yZCBtdXNpYywgcHVibGlzaCBhbmQgYWN0aXZlbHkgcHVyc3VlIGxlaXN1cmUuIE5vdywgZXZlcnlib2R5IHdpdGggYSB0ZWxlcGhvbmUgPGk+Y2FuIGRvPC9pPiBhbnl0aGluZy48L3A+XHJcbiAgPHA+VGVjaG5vbG9neSBoYXMgZXhwYW5kZWQgYXZlcmFnZSBrbm93bGVkZ2UgYnJlYWR0aCA8aT5hbmQ8L2k+IGRlcHRoIGZhciBtb3JlIHRoYW4gaXQgaGFzIHVuZGVyY3V0IG91ciBwb3RlbnRpYWwuIDI1IHllYXJzIGFnbywgc3BlY2lhbGl6ZWQga25vd2VkZ2UgcmVxdWlyZWQgYSBsaWJyYXJ5LiBCZXNpZGVzIHRoZSBwZXJzZXZlcmVuY2UgdG8gZ2V0IHRoZXJlLiA8L3A+PHA+SWYgMTh0aCBjZW50dXJ5IEJlcmxpbiBpbnZlbnRlZCBjb21wdWxzb3J5IHNlY29uZGFyeSBzY2hvb2xpbmcsIHRoZXJlYnkgcmFpc2luZyBsaXRlcmFjeSBmcm9tIDEwJSB0byA3MCQgaW4gb25lIGdlbmVyYXRpb247IFNpbWlsYXJseSwgaWYgMTl0aCBjZW50dXJ5IFBhcmlzIGludmVudGVkIGNvbXB1bHNvcnkgc2Vjb25kYXJ5IHNjaG9vbGluZyBhbmQgcmV2b2x1dGlvbmFsaXplZCBsZWFybmluZyBhcyBhIG5hdGlvbmFsIGZvcmNlLCBhbmQgSm9obiBIb3BraW5zIHRoZSBmaXJzdCA8aT5tb2Rlcm48L2k+IHVuaXZlcnNpdHkgdGVtcGxhdGUgZm9yIG1hc3MgSGlnaGVyLUVkOyBUaGVuLCBieSBkZSBGYWN0byBtZWFucywgU2lsaWNvbiBWYWxsZXkgaGFzIHByb3ZpZGVkIG1ldGEta25vd2xlZGdlIHRoYXQgY29tcHJpc2VzIGEgZmFyIG1vcmUgaW1wb3J0YW50IGtub3dsZWRnZTogVHlpbmcgdW5saW1pdGVkIGtub3dsZWRnZSB0byBvdXIgbW9zdCA8aT5zb2NpYWw8L2k+IGRldmljZTogZWwgdGVsZWZvbm8uIFRodXMsIGJldHdlZW4gdGhlIFdpa2lwYWRpYSB0aWxlIGFuZCB0aGUgVHdpdHRlciB0aWxlLCBvbmUgZ2VuZXJhdGlvbiBjYXRhcHVsdHMgb3ZlciBhbGwgcHJldmlvdXMgZ2VuZXJhdGlvbnMtLWF0IGxlYXN0IGluIHRlcm1zIG9mIFlvdVR1YmUga25vdy1ob3cgYW5kIHNvY2lhbCBhd2FyZW5lc3MuIEFybWllcyBvZiBidXJlYXVjcmF0cyBhbmQgZWR1Y2F0b3JzIGNvdWxkIG5vdCBoYXZlIGFjaGlldmVkIG9uZS10ZW50aCEgVGhhbmsgeW91LCBDYWxpZm9ybmlhLCBmb3IgYXVndXJpbmcgc3VjaCBncmVhdCBwb3RlbnRpYWwgZm9yIG91ciBhZ2UuIDwvcD48cD5PbmUgTllUIG9wLWVkIHdyaXRlciBlbmNhcHN1bGF0ZXMgdGhlIGxlc3Mgb3B0aW1pc3RpYyB2aWV3IG9mIG9ubGluZSBsaWZlLS1hIGxpZmUgdmlld2VkIGFzICdjYXB0aXZlIHRvIHRlY2hub2xvZ3knLlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+ICBTbWFydHBob25lcyBhcmUgYXMgY2VudHJhbCB0byB0aGUgZWNvbm9teSBhcyBjYXJzIGFuZCBjcmVkaXQgY2FyZHMsIGFuZCBhIGxvdCBvZiBwZW9wbGUgaGF2ZSBsaXR0bGUgbWVhbmluZ2Z1bCBvcHBvcnR1bml0eSB0byBxdWl0LiBcclxuICBBbmQgdGhlIOKAnG9mZmxpbmXigJ0gd29ybGQgaXMgbm93IHJ1bGVkIGJ5IHdoYXQgaGFwcGVucyBvbmxpbmUuIEVzY2FwZSBpcyBpbXBvc3NpYmxlLiBRdWlwcyBvbiBUd2l0dGVyIGFyZSBpbmRpcmVjdGx5IHByb2dyYW1taW5nIGNhYmxlIG5ld3MgLi4uXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICBgOyBcclxuICBcclxuICB2YXIgYmxvZ2NpdGUxNjMgPSBgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE5LzAxLzA5L29waW5pb24vbWVkaXRhdGlvbi1pbnRlcm5ldC5odG1sXCI+XHJcbiAgaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOS8wMS8wOS9vcGluaW9uL21lZGl0YXRpb24taW50ZXJuZXQuaHRtbDwvYT48L3A+ICBcclxuICBcclxuICBgOyBcclxuICAgIHZhciBibG9ncG9zdDE2MiA9ICAgYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+U29mdHdhcmUsIEhhcmR3YXJlLCBhbmQgYnkgbG9naWNhbCBjb25jbHVzaW9uIC4uLjxpPiBLaXRjaGVud2FyZSE8L2k+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUga2l0Y2hlbiBvZiB0aGUgZnV0dXJlIGlzIGhlcmUsIGFuZCBpdOKAmXMgb25lIHRoYXQgbm8gb25lIGFza2VkIGZvci4gQ0VTIDIwMTksIHRoaXMgeWVhcuKAmXMgaXRlcmF0aW9uIG9mIHRoZSBhbm51YWwgQ29uc3VtZXIgRWxlY3Ryb25pY3MgU2hvdywganVzdCBvcGVuZWQgaW4gTGFzIFZlZ2FzLCBhbmQgYXMgcGVyIHVzdWFsLCB0aGUgZ2FkZ2V0cyB1bnZlaWxlZCBzbyBmYXIgcmV2ZWFsIGEgdW5pcXVlIHBlcnNwZWN0aXZlIG9uIHRoZSBldmVyeWRheSBsaWZlc3R5bGUgcHJvYmxlbXMgdGhhdCBjb25zdW1lcnMgYXBwYXJlbnRseSB3YW50IHNvbHZlZC4gVGhlIHByb2JsZW1zPyBUb28gbXVjaCBwcml2YWN5IGluIGtpdGNoZW5zISBBbmQgbm90IGVub3VnaCB0aGluZ3MgdGhhdCBjYW4gYmUgc29sdmVkIGJ5IGFwcCEgIDxiciAvPlxyXG4gIDxiciAvPlxyXG4gIEFzIFJvc2UgRWx2ZXRoIHdyb3RlIGZvciBFYXRlciBpbiAyMDE1LCDigJxFbmdpbmVlcnMuLi4gb3BlcmF0ZSBvbiB0aGUgcHJlbWlzZSB0aGF0IHBlb3BsZSBkb27igJl0IGtub3cgd2hhdCB0aGV5IG5lZWQgdW50aWwgaXTigJlzIGJ1aWx0IGZvciB0aGVtLi4uIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgb2YgcG90ZW50aWFsIGZ1dHVyZXMgdGhhdCBhcmUgc3RyYW5nZWx5IGJvdGggdW5hd2FyZSBvZiB0aGUgY3VsdHVyZSBmcm9tIHdoaWNoIHRoZXkgc3ByaW5nLCBhbmQgYXQgdGhlIHNhbWUgdGltZSBjb25zdHJhaW5lZCBieSBpdC4gVGhlIGtpdGNoZW4gb2YgdGhlIGZ1dHVyZSBpcyBhIG9uZS1zaXplLWZpdHMgYWxsLCBhaGlzdG9yaWNhbCwgYWN1bHR1cmFsIHJvb20sIG9uZSB0aGF0IHNlcnZlcyBubyBvbmUgd2VsbC7igJ0gXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICBgOyBcclxuICBcclxuICB2YXIgYmxvZ2NpdGUxNjIgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmVhdGVyLmNvbS8yMDE5LzEvOC8xODE3Mzg0My9jZXMtMjAxOS1raXRjaGVuLXRlY2gtZ2Utc2Ftc3VuZy13aGlybHBvb2xcIj5cclxuICBodHRwczovL3d3dy5lYXRlci5jb20vMjAxOS8xLzgvMTgxNzM4NDMvY2VzLTIwMTkta2l0Y2hlbi10ZWNoLWdlLXNhbXN1bmctd2hpcmxwb29sPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7XHJcblxyXG4gIFxyXG4gIHZhciBibG9ncG9zdDE2MDAgPSAgIGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkNFUyAyMDE5IG9mZmVyZWQgdGhlIHJhbmdlIG9mIElvVCB3aXphcmRyeSB0aGF0IGV2ZW4gUGhpbG9zb3BoeSBoYXMgYmVlbiB2aXJ0dWFsaXplZCBpbnRvIExFRC1lbWJlZGRlZCB3b29kISBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPldoYXQgZG9lcyBpdCBtZWFuIHRoYXQgb25lIG9mIG15IGZhdm9yaXRlIGRlbW9zIGF0IENFUyAyMDE5IOKAlCB0aGUgd29ybGTigJlzIGZvcmVtb3N0IHRlY2hub2xvZ3kgc2hvdyDigJQgd2FzIGEgYmxvY2sgb2Ygd29vZD8gTWF5YmUgdGhhdCBJ4oCZdmUgYmVlbiBzcGVuZGluZyB0b28gbXVjaCB0aW1lIGluIG15IGdhcmFnZSB3aXRoIGEgdGFibGUgc2F3LiBNYXliZSB0aGF0IHdl4oCZcmUgY29sbGVjdGl2ZWx5IHN1ZmZlcmluZyBmcm9tIGEgYmFkIGNhc2Ugb2Ygc2NyZWVuIGZhdGlndWUuIE1heWJlIGJvdGguIEJ1dCBpZiB0aGUgY3Jvd2Qgc3Vycm91bmRpbmcgTXVpIGlzIGFueSBpbmRpY2F0aW9uLCBJ4oCZbSBub3QgdGhlIG9ubHkgb25lIHNtaXR0ZW4gd2l0aCB0aGUgS3lvdG8tYmFzZWQgY29tcGFueeKAmXMgaGVhZC1zbWFja2luZ2x5IHNpbXBsZSBhcHByb2FjaCB0byB0ZWNobm9sb2d5LlxyXG48c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTYwMCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuZGlnaXRhbHRyZW5kcy5jb20vaG9tZS9tdWktd29vZC1zbWFydC1kaXNwbGF5LWNlcy0yMDE5LyAgICAgICBcIj5odHRwczovL3d3dy5kaWdpdGFsdHJlbmRzLmNvbS9ob21lL211aS13b29kLXNtYXJ0LWRpc3BsYXktY2VzLTIwMTkvPC9hPjwvcD4gIFxyXG4gIFxyXG4gIGA7XHJcbiAgXHJcbiAgdmFyIGJsb2dwb3N0MTYxID0gICBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5SZWxlbnRsZXNzIGNyaXRpY2lzbXMgaHVybGVkIGF0IHRoZSBUZWNoIEdyZWF0cyBsaWtlIEZhY2Vib29rIGNhbid0IHJlYWxseSBleHBsYWluIGEgbG90IG9mIHRoZSBjb25uaXZlcnkgaW4gdGhlIDIxc3QgY2VudHVyeSB3b3JsZC4gU28sIHRoZSBsYWJlbCBvZiBhIFNpbGljb24tVmFsbGV5IGN1bHR1cmUgdGhhdCBlc3BvdXNlcyB0ZWFtd29yayBjYW4ndCBiZSBibGFtZWQ6IEl0J3MgdGhlIG5hdHVyZSBvZiBTb2Z0d2FyZSBFbmdpbmVlcnMgdG8gZGV2ZWxvcCBnYXJnYW50dWFubHkgY29tcGxleCBwcm9ncmFtbWVkIHByb2R1Y3RzLCB0aGF0IGRpc3NlbnQgYW5kIGNyaXRpY2FsIHRoaW5raW5nIGhhdmUgbXVjaCBsZXNzIHBsYWNlIHRoYW4gbW9zdCBqb2JzLiBUaGlzIGFydGljbGUgaXMgbGF1Z2hhYmxlLCBidXQgbWF5IGJlYXIgYSBoaW50IG9mIHRydXRoIC4uLiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBlcGlzb2RlIHNwZWFrcyB0byBhbiBhdG1vc3BoZXJlIGF0IEZhY2Vib29rIGluIHdoaWNoIGVtcGxveWVlcyBmZWVsIHByZXNzdXJlIHRvIHBsYWNlIHRoZSBjb21wYW55IGFib3ZlIGFsbCBlbHNlIGluIHRoZWlyIGxpdmVzLCBmYWxsIGluIGxpbmUgd2l0aCB0aGVpciBtYW5hZ2Vy4oCZcyBvcmRlcnMgYW5kIGZvcmNlIGNvcmRpYWxpdHkgd2l0aCB0aGVpciBjb2xsZWFndWVzIHNvIHRoZXkgY2FuIGFkdmFuY2UuIFNldmVyYWwgZm9ybWVyIGVtcGxveWVlcyBsaWtlbmVkIHRoZSBjdWx0dXJlIHRvIGEg4oCcY3VsdC7igJ1cclxuPGJyIC8+PGJyIC8+XHJcblRoaXMgY3VsdHVyZSBoYXMgY29udHJpYnV0ZWQgdG8gdGhlIGNvbXBhbnnigJlzIHdlbGwtcHVibGljaXplZCB3YXZlIG9mIHNjYW5kYWxzIG92ZXIgdGhlIGxhc3QgdHdvIHllYXJzLCBzdWNoIGFzIGdvdmVybm1lbnRzIHNwcmVhZGluZyBtaXNpbmZvcm1hdGlvbiB0byB0cnkgdG8gaW5mbHVlbmNlIGVsZWN0aW9ucyBhbmQgdGhlIG1pc3VzZSBvZiBwcml2YXRlIHVzZXIgZGF0YSwgYWNjb3JkaW5nIHRvIG1hbnkgcGVvcGxlIHdobyB3b3JrZWQgdGhlcmUgZHVyaW5nIHRoaXMgcGVyaW9kLiBUaGV5IHNheSBGYWNlYm9vayBtaWdodCBoYXZlIGhhdmUgY2F1Z2h0IHNvbWUgb2YgdGhlc2UgcHJvYmxlbXMgc29vbmVyIGlmIGVtcGxveWVlcyB3ZXJlIGVuY291cmFnZWQgdG8gZGVsaXZlciBob25lc3QgZmVlZGJhY2suICBcclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIGA7IFxyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTE2MSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOS8wMS8wOC9mYWNlYm9vay1jdWx0dXJlLWN1bHQtcGVyZm9ybWFuY2UtcmV2aWV3LXByb2Nlc3MtYmxhbWVkLmh0bWxcIj5odHRwczovL3d3dy5jbmJjLmNvbS8yMDE5LzAxLzA4L2ZhY2Vib29rLWN1bHR1cmUtY3VsdC1wZXJmb3JtYW5jZS1yZXZpZXctcHJvY2Vzcy1ibGFtZWQuaHRtbDwvYT48L3A+ICAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxNjAwMSA9IGBcclxuICBcclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL3RodWxlMC5qcGdcIiBjbGFzcz1cInpvb21cIiAvPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5VbHRpbWEgVGh1bGUgLi4uPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBPbiBOZXcgWWVhcnMnIEV2ZSwgZm9sbG93aW5nIGEgMTMteWVhciB0cmlwIHRvIGRlZXAgc3BhY2UsIE5BU0EncyBOZXcgSG9yaXpvbnMgc3BhY2VjcmFmdCBtYWRlIGEgY2xvc2UgcGFzcyBvZiBVbHRpbWEgVGh1bGUsIGEgc21hbGwsIGljeSB3b3JsZCBkcmlmdGluZyA0IGJpbGxpb24gbWlsZXMgZnJvbSB0aGUgc3VuIGluIHRoZSB1bmV4cGxvcmVkIFwidGhpcmQgem9uZVwiIG9mIG91ciBzb2xhciBzeXN0ZW0uIFRoZSBwcm9iZSB6aXBwZWQgYnkgYXQgdXB3YXJkcyBvZiAzMSwwMDAgbWlsZXMgcGVyIGhvdXIsIGFib3V0IHRoZSBzYW1lIHNwZWVkIGl0IHdhcyBnb2luZyB3aGVuIGl0IHBhc3NlZCBQbHV0byBpbiAyMDE1LiBCdXQgUGx1dG8gaXMgMTAwIHRpbWVzIHRoZSBzaXplIG9mIFVsdGltYSwgd2hpY2ggbWVhc3VyZXMganVzdCAyMCBtaWxlcyBsb25nLiBTbyBOZXcgSG9yaXpvbnMgaGFkIGRheXMgdG8gY2FwdHVyZSBwaG90b2dyYXBocyBhbmQgc3BlY3Ryb2dyYXBoaWMgcmVhZGluZ3Mgb2YgdGhlIGZvcm1lciBwbGFuZXQsIGJ1dCBmb3IgdGhpcyBzbWFsbGVyIGNvc21pYyBxdWFycnksIGl0IG9ubHkgaGFkIGEgbWF0dGVyIG9mIG1pbnV0ZXMuIE5ldyBIb3Jpem9ucycgdmlzaXQgd2FzIGJyaWVmLCBidXQgbW9tZW50b3VzOiBUaGUgbWlzc2lvbidzIHN1Y2Nlc3MgbWFrZXMgVWx0aW1hIFRodWxlIGJ5IGZhciB0aGUgbW9zdCBkaXN0YW50IG9iamVjdCBldmVyIHRvIGJlIGltYWdlZCB1cCBjbG9zZS48c3VwPjE8L3N1cD48L3A+XHJcblxyXG4gPGltZyBzcmM9XCJkaXN0L2ltZy90aHVsZS5qcGdcIiBjbGFzcz1cInpvb21cIiAvPlxyXG4gIGA7XHJcblxyXG4gIHZhciBibG9nY2l0ZTE2MDAxID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvbmV3LWhvcml6b25zLWZpcnN0LXBob3Rvcy11bHRpbWEtdGh1bGVcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvbmV3LWhvcml6b25zLWZpcnN0LXBob3Rvcy11bHRpbWEtdGh1bGU8L2E+PC9wPiAgIFxyXG4gIFxyXG4gIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTYwID0gICBgPHAgY2xhc3M9XCJxdW90ZVwiPkFzdHJvbm9tZXJzIGhhdmUgcmV2ZWFsZWQgZGV0YWlscyBvZiBteXN0ZXJpb3VzIHNpZ25hbHMgZW1hbmF0aW5nIGZyb20gYSBkaXN0YW50IGdhbGF4eSwgcGlja2VkIHVwIGJ5IGEgdGVsZXNjb3BlIGluIENhbmFkYS4gXHJcblRoZSBwcmVjaXNlIG5hdHVyZSBhbmQgb3JpZ2luIG9mIHRoZSBibGFzdHMgb2YgcmFkaW8gd2F2ZXMgaXMgdW5rbm93bi4gXHJcbkFtb25nIHRoZSAxMyBmYXN0IHJhZGlvIGJ1cnN0cywga25vd24gYXMgRlJCcywgd2FzIGEgdmVyeSB1bnVzdWFsIHJlcGVhdGluZyBzaWduYWwsIGNvbWluZyBmcm9tIHRoZSBzYW1lIHNvdXJjZSBhYm91dCAxLjUgYmlsbGlvbiBsaWdodCB5ZWFycyBhd2F5LiBcclxuU3VjaCBhbiBldmVudCBoYXMgb25seSBiZWVuIHJlcG9ydGVkIG9uY2UgYmVmb3JlLCBieSBhIGRpZmZlcmVudCB0ZWxlc2NvcGUuIFxyXG5cIktub3dpbmcgdGhhdCB0aGVyZSBpcyBhbm90aGVyIHN1Z2dlc3RzIHRoYXQgdGhlcmUgY291bGQgYmUgbW9yZSBvdXQgdGhlcmUsXCIgc2FpZCBJbmdyaWQgU3RhaXJzLCBhbiBhc3Ryb3BoeXNpY2lzdCBmcm9tIHRoZSBVbml2ZXJzaXR5IG9mIEJyaXRpc2ggQ29sdW1iaWEgKFVCQykuXHJcbiBcclxuPHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICBNb3JzZSBjb2RlIGFjcm9zcyB0aGUgR2FsYXhpZXMgLSB3aGF0IGEgY29uY2VwdCEgXHJcbiAgPC9wPlxyXG4gIDxpbWcgc3JjPVwiZGlzdC9pbWcvZ2V0dHlpbWFnZXMtODMxNTAyOTEwLmpwZ1wiIHdpZHRoPVwiMzUwXCIgY2xhc3M9XCJ6b29tXCIgLz48aHIgd2lkdGg9XCIyMDBcIi8+XHJcblxyXG4gIDxzcGFuIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7XCI+R0VUVFkgSU1BR0VTPC9zcGFuPlxyXG4gYDsgXHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTYwPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmJiYy5jb20vbmV3cy9zY2llbmNlLWVudmlyb25tZW50LTQ2ODExNjE4XCI+aHR0cHM6Ly93d3cuYmJjLmNvbS9uZXdzL3NjaWVuY2UtZW52aXJvbm1lbnQtNDY4MTE2MTg8L2E+PC9wPiAgXHJcbiAgYDtcclxuIFxyXG4gXHJcblxyXG4gICAgICB2YXIgdXJsID0gWyAgICBcclxuICAgICAgICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTc5MCcsXHJcbiAgICAgICAgICBkaWQ6ICcwMi0wOC0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnRmVicnVhcnkgOCwgMjAxOScsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgICAgdGl0bGU6ICdTdXN0YWluYWJsZSBCbG9ja2NoYWluIFRlY2gsIFBhcnQgSTo8YnIgLz5UaGUgQ29zdCBvZiBQcm9vZi1vZi1Xb3JrIE1vZGVscycsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE3OTAsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzkwIFxyXG4gICAgICAgIH0sICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxNzg5JyxcclxuICAgICAgICAgIGRpZDogJzAyLTA3LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdGZWJydWFyeSA3LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdPcmFjbGUgdGhlIEdyZWF0LCBQYXJ0IElJPGJyIC8+SXMgT3JhY2xlIGFsc28gR29vZD8nLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzg5LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTc4OSBcclxuICAgICAgICB9LCAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTc4OCcsXHJcbiAgICAgICAgICBkaWQ6ICcwMi0wNi0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnRmVicnVhcnkgNiwgMjAxOScsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnT3JhY2xlIHRoZSBHcmVhdCwgUGFydCBJPGJyIC8+SXMgT3JhY2xlIGFsc28gVHJ1c3R3b3J0aHk/JyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTc4OCxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE3ODggXHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxNzg2JyxcclxuICAgICAgICAgIGRpZDogJzAyLTA0LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdGZWJydWFyeSA0LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgIHRpdGxlOiAnRHVlIE5vcnRoOiBUaW1lIHRvIENhbGlicmF0ZSB0aGUgQ29tcGFzcz8nLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzg2LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTc4NiBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTc4NScsXHJcbiAgICAgICAgICBkaWQ6ICcwMi0wMi0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnRmVicnVhcnkgMi0zLCAyMDE5PGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnRm91ciBTY29yZSBhbmQgU2V2ZW4gWWVhcnMgQWdvIC4uLicsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE3ODUsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzg1IFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxNzg0JyxcclxuICAgICAgICAgIGRpZDogJzAyLTAxLTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdGZWJydWFyeSAxLCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdGb3VyIFNjb3JlIGFuZCBTZXZlbiBZZWFycyBGcm9tIE5vdyAuLi4nLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzg0LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTc4NCBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTc4JyxcclxuICAgICAgICAgIGRpZDogJzAxLTMxLTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDMxLCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgICAgICB0aXRsZTogJ1NlZWluZyBXaG8gU2F5cywgXFwnU2F5IENoZWVzZSFcXCcnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzgsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzggXHJcbiAgICAgICAgfSwgICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTc3JyxcclxuICAgICAgICAgIGRpZDogJzAxLTI5LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDI5LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdDb25zdHJ1Y3Rpb24gb24gdGhlIEludGVybmV0IFN1cGVyLUhpZ2h3YXknLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzcsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzcgXHJcbiAgICAgICAgfSwgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE3NicsXHJcbiAgICAgICAgICBkaWQ6ICcwMS0yOC0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnSmFudWFyeSAyOCwgMjAxOScsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgdGl0bGU6ICdTYXZpbmcgVGFwcHksIHRoZSBFeHRyYW9yZGluYXJ5IFBob25lLVRlc3RlciBCb3QnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzYsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzYgXHJcbiAgICAgICAgfSwgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE3NScsXHJcbiAgICAgICAgICBkaWQ6ICcwMS0yNi0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnSmFudWFyeSAyNi0yNywgMjAxOScsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgdGl0bGU6ICdXaG8gRGlzJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTc1LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTc1IFxyXG4gICAgICAgIH0sICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxNzQnLFxyXG4gICAgICAgICAgZGlkOiAnMDEtMjUtMTknLFxyXG4gICAgICAgICAgZGF0ZTogJ0phbnVhcnkgMjUsIDIwMTknLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICB0aXRsZTogJ0ludGVybmV0IFBoYWVub21lbiBbR3JlZWtdOiBUbyBTaGluZTsgVG8gQXBwZWFyPGJyIC8+PHNtYWxsPkhvdyB0aGUgSW50ZXJuZXQgd2FzIEludmVudGVkJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTc0LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTc0IFxyXG4gICAgICAgIH0sICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTczJyxcclxuICAgICAgICAgIGRpZDogJzAxLTI0LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDI0LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdXaGF0XFwncyBpdCBUYWtlIHRvIERldGhhdyBGcm96ZW4gVFZcXCdzPycsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE3MyxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE3MyBcclxuICAgICAgICB9LCAgICAge1xyXG4gICAgICAgIGlkOiAnMTcyJyxcclxuICAgICAgICBkaWQ6ICcwMS0yMy0xOScsXHJcbiAgICAgICAgZGF0ZTogJ0phbnVhcnkgMjMsIDIwMTknLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgdGl0bGU6ICdGb29kIGZvciBUaG91Z2h0JyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDE3MixcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNzIgXHJcbiAgICAgIH0sICAgICAge1xyXG4gICAgICAgIGlkOiAnMTcxJyxcclxuICAgICAgICBkaWQ6ICcwMS0yMi0xOScsXHJcbiAgICAgICAgZGF0ZTogJ0phbnVhcnkgMjIsIDIwMTknLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgdGl0bGU6ICdNYXRlcmlhbCBUaGlua2luZycsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNzEsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTcxIFxyXG4gICAgICB9LCBcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAnMTcwNScsXHJcbiAgICAgICAgZGlkOiAnMDEtMjEtMTknLFxyXG4gICAgICAgIGRhdGU6ICdKYW51YXJ5IDIxLCAyMDE5JyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgdGl0bGU6ICdXb3JsZCBvZiBPcGVuU291cmNlLCBwYXJ0IElJOjxiciAvPlRoZSBDb3B5UmlnaHQgU3RyaWtlcyBCYWNrJyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDE3MDUsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTcwNSBcclxuICAgICAgfSwgXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogJzE3MDA1JyxcclxuICAgICAgICBkaWQ6ICcwMS0xOS0xOScsXHJcbiAgICAgICAgZGF0ZTogJ0phbnVhcnkgMTksIDIwMTknLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICB0aXRsZTogJ1RoZSBDYWJsZSBHdXknLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MTcwMDUsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTcwMDUgXHJcbiAgICAgIH0sICBcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAnMTcwJyxcclxuICAgICAgICBkaWQ6ICcwMS0xOC0xOScsXHJcbiAgICAgICAgZGF0ZTogJ0phbnVhcnkgMTgsIDIwMTknLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgdGl0bGU6ICdHZW5lcyBmb3IgYSBDaGFuZ2UnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MTcwLFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE3MCBcclxuICAgICAgfSwgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTY5JyxcclxuICAgICAgICAgIGRpZDogJzAxLTE3LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDE3LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdUaGUgVmlydHVlcyBvZiBhIE1vbm9tYWdvdXMgUGFzc3dvcmQnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjksXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNjkgXHJcbiAgICAgICAgfSwgIHtcclxuICAgICAgICAgIGlkOiAnMTY4JyxcclxuICAgICAgICAgIGRpZDogJzAxLTE2LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDE2LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgIHRpdGxlOiAnVGhhdCBGdW5ueSBWaXNpdG9yXFwncyBOb24tRWxsaXB0aWNhbCBPcmJpdCcsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE2OCxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2OCBcclxuICAgICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgIGlkOiAnMTY3JyxcclxuICAgICBkaWQ6ICcwMS0xNS0xOScsXHJcbiAgICAgZGF0ZTogJ0phbnVhcnkgMTUsIDIwMTknLFxyXG4gICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICB0aXRsZTogJ1ByYWN0aWNpbmcgYXQgSW1wZXJmZWN0aW9uJyxcclxuICAgICBwb3N0OiBibG9ncG9zdDE2NyxcclxuICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNjcgXHJcbiAgIH0sIFxyXG4gICAgICAgIHtcclxuICAgICBpZDogJzE2NicsXHJcbiAgICAgZGlkOiAnMDEtMTQtMTknLFxyXG4gICAgIGRhdGU6ICdKYW51YXJ5IDE0LCAyMDE5JyxcclxuICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgIHRpdGxlOiAnTWluaW1hbGlzbSB0byB0aGUgUmVzY3VlIScsXHJcbiAgICAgcG9zdDogYmxvZ3Bvc3QxNjYsXHJcbiAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTY2IFxyXG4gICB9LCBcclxuICAgICAgICB7XHJcbiAgICAgaWQ6ICcxNjQnLFxyXG4gICAgIGRpZDogJzAxLTEyLTE5JyxcclxuICAgICBkYXRlOiAnSmFudWFyeSAxMi0xMywgMjAxOTxiciAvPldlZWtlbmQnLFxyXG4gICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICB0aXRsZTogJ0UuVS5cXCdzIE92ZXJyZWFjaGluZyBHRFBSIFJ1bGVzJyxcclxuICAgICBwb3N0OiBibG9ncG9zdDE2NCxcclxuICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNjQgXHJcbiAgIH0sICAgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTYzJyxcclxuICAgICAgICAgIGRpZDogJzAxLTExLTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDExLCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdJdFxcJ3Mgbm90IEZhaXIgU2NhcGVnb2F0aW5nIFRlY2ggZm9yICpPdXIqIEJhZCBIYWJpdHMnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjMsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNjMgXHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE2MicsXHJcbiAgICAgICAgICBkaWQ6ICcwMS0xMC0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnSmFudWFyeSAxMCwgMjAxOScsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnT3ZlciB0aGUgRWRnZSB3aXRoIEdhZGdldHJ5OiBDRVMgMjAxOScsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE2MixcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2MiBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTYwMCcsXHJcbiAgICAgICAgICBkaWQ6ICcwMS0wOS0xOScsXHJcbiAgICAgICAgICBkYXRlOiAnSmFudWFyeSA5LCAyMDE5JyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgIHRpdGxlOiAnVGhhdFxcJ3MgT25lIFNtYXJ0IEJsb2NrIG9mIFdvb2QhLi4ub3IgYSBSYXNwYmVycmkgUGknLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjAwLFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTYwMCBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTYxJyxcclxuICAgICAgICAgIGRpZDogJzAxLTA4LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDgsIDIwMTknLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICAgICAgdGl0bGU6ICdXaGF0XFwncyBXcm9uZyB3aXRoIGEgbGl0dGxlIEVzcHJpdCBkZSBDb3Jwcz8nLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjEsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNjEgXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE2MDAxJyxcclxuICAgICAgICAgIGRpZDogJzAxLTA3LTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDcsIDIwMTknLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICAgICAgdGl0bGU6ICdJdCBUYWtlcyBUd28gdG8gRGFuY2UnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNjAwMSxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2MDAxIFxyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTYwJyxcclxuICAgICAgICAgIGRpZDogJzAxLTAyLTE5JyxcclxuICAgICAgICAgIGRhdGU6ICdKYW51YXJ5IDIsIDIwMTknLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICB0aXRsZTogJ0ludGVyR2FsYWN0aWMgQ29kZScsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE2MCxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2MCBcclxuICAgICAgICB9IFxyXG4gIFxyXG4gIF07XHJcbnZhciBpO1xyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cInN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gXHJcbiAgICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICAgIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCJjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWphbjE5XCIpLmlubmVySFRNTCArPSBjYXQ7XHJcbiAgfVxyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgdXJsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY2F0TW9kID0gYFxyXG4gIDxkaXYgaWQ9XCJtb2RfJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0Rpdk1vZFwiPiBcclxuICA8aHIgLz4gIFxyXG4gIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwic3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cImF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cImNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWphbjE5LW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG4gIH1cclxuICBcclxuY29uc29sZS5sb2coJ2Jsb2dnZXItamFuMTknKTtcclxuICAgIC8vICBjb25zb2xlLmxvZyhhbmd1bGFyLnRvSnNvbih1cmwpKTsgXHJcbn07XHJcbmJsb2dnZXJKYW4oKTsiLCJcclxuICB2YXIgYmxvZ2dlckp1bHkgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gXHJcblxyXG4gdmFyIGJsb2dwb3N0MjQgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkNsb3VkLmdvb2dsZS5jb20gd2lucyB0aGUgZGF5IGZvciBvZmZlcmluZyB0aGUgV2lsbHkgV29ua2EncyBvZiBUZWNobm9sb2dpY2FsIENhbmR5IGF0IGEgZnJlZSB0b3VyJ3MgdmlldzogWW91IHdvbiB0aGUgR29sZGVuIFRpY2tldC4gR29vZ2xlIENsb3VkIENFTyBEaWFuZSBHcmVlbmUgZXhwbGFpbnMgdGhhdCBwcmlvcml0aXppbmcgY3VzdG9tZXJzJyBuZWVkcyByYXRoZXIgdGhhbiBkcmlmdGluZyB3aXRoIG1hcmtldCBmb3JjZXMgb2ZmZXJzIHNvbGlkIGdyb3d0aCBtb3ZpbmcgcGFzdCB0ZWNobm9sb2dpY2FsIHNoaWZ0cyBhbmQgZHJpZnRzIHdpdGggbGl0dGxlIGNvdXJzZSBjb3JyZWN0aW9uLjwvcD5cclxuIDxwIGNsYXNzPVwicXVvdGVcIj5XaGlsZSBHb29nbGUgaXMgc3RpbGwgbG9va2luZyB1cCBhdCBBbWF6b24gV2ViIFNlcnZpY2VzIGFuZCBNaWNyb3NvZnQgQXp1cmUgd2hlbiBpdCBjb21lcyB0byBpbmZyYXN0cnVjdHVyZSBjbG91ZCBjb21wdXRpbmcsIGl0IGFwcGVhcnMgdG8gYmUgZmluZGluZyB0aGUgYmFsYW5jZSBiZXR3ZWVuIGtlZXBpbmcgZW5naW5lZXJzIGhhcHB5IHdpdGggY2xvdWQtbmF0aXZlIGNvbXB1dGluZyB0b29scyBhbmQgY291cnRpbmcgZW50ZXJwcmlzZSBjb21wYW55IHN1aXRzIHdpdGggc2VydmljZS1sZXZlbCBhZ3JlZW1lbnRzIGFuZCBzdGVhayBkaW5uZXJzLjxzdXA+MTwvc3VwPjwvcD5gO1xyXG4gdmFyIGJsb2djaXRlMjQgPSAgIGBcclxuIFxyXG4gPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tXHJcbiA8L2E+XHJcbiA8L3A+PHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmdlZWt3aXJlLmNvbS8yMDE4L2dvb2dsZS1jbG91ZC1jZW8tZGlhbmUtZ3JlZW5lLXdhbmUtY2xvdWQtcHJpY2luZy13YXJzLW5ldmVyLXdhbnQtd2luLXByaWNlL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZ2Vla3dpcmUuY29tLzIwMTgvZ29vZ2xlLWNsb3VkLWNlby1kaWFuZS1ncmVlbmUtd2FuZS1jbG91ZC1wcmljaW5nLXdhcnMtbmV2ZXItd2FudC13aW4tcHJpY2UvXHJcbiA8L2E+XHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ3Bvc3QyMyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UGxhbmV0IEdyZWVuIGRvZGdlZCBhIGJ1bGxldCByZWNlbnRseSwgYXMgYWN0aXZpc3RzJyBjbGltYXRlIGNoYW5nZSByZXNlYXJjaCBvZmZpY2lhbGx5IGdhaW5zIGxlZ2l0aW1hY3kgZnJvbSB0aGUgU3VwcmVtZSBDb3VydCwgYWxiZWl0IGEgZmV3IG9mIHRoZWlyIHF1YWxtcyAuLi4gQnV0IHdobyBjb3VsZCBkZW55IHRoYXQgaWYgdGhlcmUgaXMgb25lIHRoaW5nIHRoYXQgd2lsbCBzYXZlIHRoZSBlYXJ0aCwgaXQncyBrbm93bGVkZ2UsIGtub3dsZWRnZSBmYXIgb3V0d2VpZ2hzIGFueSBvdGhlciBzYWx2by4gVGhpcyBpcyBiZWNhdXNlIHRoZSBtb3JlIGRhdGEsIHRoZSBtb3JlIGFjY3VyYXRlIHRoZSBtb2RlbHMgdG8gaW5kaWNhdGUgc3BlY2lmaWMgZW52aXJvbm1lbnRhbCBuZWVkcyBhbmQgdGhyZWF0cy0tPGk+bm90IHRvIG1lbnRpb24gYWxsIHRoZSBjbHVlcyB0aGUgZGF0YSBjb3VsZCByZXZlYWwgdG93YXJkIGhlbHBpbmcgZWFydGggcmVnYWluIGJhbGFuY2UuIDwvaT48L3A+PHA+QS5JLiB0cmFpbmluZyB3b3VsZCBzdGFydmUgaWYgdGhlIFN1cHJlbWUgQ291cnQgd291bGQgaGF2ZSBhbGxvd2VkIGFkbWluaXN0cmF0aW9uIGNsYW1wLWRvd25zIG9uIGtub3dsZWRnZS4gQWZ0ZXIgYWxsLCB0aGUgb3ZlcndoZWxtaW5nIHBvcHVsYXIgYW5kIHByb2Zlc3Npb25hbCBvcGluaW9ucyBmYXZvciBlYXJ0aC1mcmllbmRseSBwb2xpY2llcy4gXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5UaGUgU3VwcmVtZSBDb3VydCBvbiBNb25kYXkgZGVuaWVkIHRoZSBUcnVtcCBhZG1pbmlzdHJhdGlvbuKAmXMgcGxlYSB0byBoYWx0IHByb2NlZWRpbmdzIGluIGEgbGFuZG1hcmsgbGF3c3VpdCBieSB5b3VuZyBwZW9wbGUgc2Vla2luZyBzdHJvbmdlciBmZWRlcmFsIGFjdGlvbiBvbiBjbGltYXRlIGNoYW5nZS48c3VwPjE8L3N1cD5cclxuPC9wPmA7XHJcbnZhciBibG9nY2l0ZTIzID0gYDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHA6Ly90aGVoaWxsLmNvbS9wb2xpY3kvZW5lcmd5LWVudmlyb25tZW50LzM5OTU2Mi1zdXByZW1lLWNvdXJ0LWRlbmllcy10cnVtcC1hZG1pbi1yZXF1ZXN0LXRvLWhhbHQteW91dGgtY2xpbWF0ZVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3RoZWhpbGwuY29tL3BvbGljeS9lbmVyZ3ktZW52aXJvbm1lbnQvMzk5NTYyLXN1cHJlbWUtY291cnQtZGVuaWVzLXRydW1wLWFkbWluLXJlcXVlc3QtdG8taGFsdC15b3V0aC1jbGltYXRlXHJcbjwvYT5cclxuPC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cDovL3RoZWhpbGwuY29tL3BvbGljeS9lbmVyZ3ktZW52aXJvbm1lbnQvMzk5NTYyLXN1cHJlbWUtY291cnQtZGVuaWVzLXRydW1wLWFkbWluLXJlcXVlc3QtdG8taGFsdC15b3V0aC1jbGltYXRlXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vdGhlaGlsbC5jb20vcG9saWN5L2VuZXJneS1lbnZpcm9ubWVudC8zOTk1NjItc3VwcmVtZS1jb3VydC1kZW5pZXMtdHJ1bXAtYWRtaW4tcmVxdWVzdC10by1oYWx0LXlvdXRoLWNsaW1hdGVcclxuPC9hPlxyXG48L3A+XHJcbiBgO1xyXG52YXIgYmxvZ3Bvc3QyMiA9IGBcclxuPHAgY2xhc3M9XCJxdW90ZVwiPjxpPuKAnEl0IGZlZWxzIGxpa2UgYSBtYWdpY2FsIG1pcnJvciB0aGF0IHJlZmxlY3RzIHlvdXIgbW92ZXMgd2l0aCBpbWFnZXMgb2YgYWxsIGtpbmRzIG9mIGh1bWFuIGFjdGl2aXR5IOKAkyBmcm9tIHNwb3J0cyBhbmQgZGFuY2UgdG8gbWFydGlhbCBhcnRzLCBhY3RpbmcgYW5kIGJleW9uZC7igJ08L2k+PC9icj48L2JyPlxyXG4tLUdvb2dsZSBjcmVhdGl2ZSB0ZWNobm9sb2dpc3QgSXJlbmUgQWx2YXJhZG8gXHJcbjwvcD5cclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPk1hZ2ljYWwgTWlycm9yIGlzIGEgd29uZGVyZnVsIHRvb2wgZm9yIEEuSS4tcG93ZXJlZCB2aWRlbyBpbWFnaW5nIGFuZCBtaW1pY3J5LiBHb29nbGUncyBzb29uLXRvLWJlIG9wZW4gc291cmNlIHNvZnR3YXJlIGlzIGZyZWVseSBhdmFpbGFibGUgZm9yIEEuSS4gZGV2ZWxvcGVycyAuLi4gbm93IHRoYXQgc2hvdWxkIGJlIGFtdXNpbmcgdG8gaGF2ZSBsaWZlLWxpa2UgcGVyc29uYWwgYXZhdGFycyB3aWxsIGNlcnRhaW5seSBtYWtlIGZvciBzb21lIGludGVyZXN0aW5nIHVzZXMuIFxyXG4gVGhlIHBvd2VyIG9mIEJpZyBEYXRhIHJlYWxseSBwcm92ZXMgaXRzZWxmLCBidXQgR29vZ2xlJ3MgYWxnb3JpdGhtLXNoYXJpbmcgcHJvdmlkZXMgYSByZWFsIGRlbW9jcmFjeSBvZiBBLkkuIHRlY2hub2xvZ3kgZm9yIGV2ZXJ5b25lIHRvIHVzZS4gIE9uIHRoZSBvdGhlciBzaWRlIG9mIHRoZSBjb2luLCBhY2N1cmFjeSBpbiB2aWRlbyBhbmQgdm9pY2UgbWltaWNyeSBub3cgbWVhbnMgQS5JLi1kcml2ZW4gYXV0aGVudGljaXR5IGRldGVjdG9ycyB3aWxsIHNvb24gcHJvdmUgcHJldHR5IGRhcm4gdXNlZnVsIVxyXG48L3A+XHJcbmBcclxudmFyIGJsb2djaXRlMjIgPSBgPHAgY2xhc3M9XCJjaXRlXCI+IFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy5zdGFuZGFyZC5jby51ay90ZWNoL2dvb2dsZS1tb3ZlLW1pcnJvci1kYW5jaW5nLWdpZi1hMzg5MjQ3MS5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5zdGFuZGFyZC5jby51ay90ZWNoL2dvb2dsZS1tb3ZlLW1pcnJvci1kYW5jaW5nLWdpZi1hMzg5MjQ3MS5odG1sXHJcbjwvYT5cclxuPC9wPiBcclxuPC9wPmBcclxudmFyIGJsb2dwb3N0MjEgPSAgIGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2lyZWQuY29tIC4uLjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBcclxuXCJCdXQgYmlnIHJldGFpbGVycyBjYW4gc2VsbCBtaWxsaW9ucyBvZiBwcm9kdWN0cywgc28gaXQncyBub3QgZmVhc2libGUgdG8gaGF2ZSB3b3JrZXJzIGJyb3dzZSBlYWNoIGl0ZW0gYW5kIG1hbnVhbGx5IGFkanVzdCBwcmljZXMuIEluc3RlYWQsIHRoZSBjb21wYW5pZXMgZW1wbG95IHNvZnR3YXJlIHRvIHNjYW4gcml2YWwgd2Vic2l0ZXMgYW5kIGNvbGxlY3QgcHJpY2VzLCBhIHByb2Nlc3MgY2FsbGVkIOKAnHNjcmFwaW5nLuKAnSBGcm9tIHRoZXJlLCB0aGUgY29tcGFuaWVzIGNhbiBhZGp1c3QgdGhlaXIgb3duIHByaWNlcy5cIjxiciAvPjxiciAvPlxyXG5cIlJldGFpbGVycyB3YW50IHRvIHNlZSB3aGF0IHRoZWlyIHJpdmFscyBhcmUgZG9pbmcsIGJ1dCB0aGV5IHdhbnQgdG8gcHJldmVudCByaXZhbHMgZnJvbSBzbm9vcGluZyBvbiB0aGVtOyByZXRhaWxlcnMgYWxzbyB3YW50IHRvIHByb3RlY3QgaW50ZWxsZWN0dWFsIHByb3BlcnR5IGxpa2UgcHJvZHVjdCBwaG90b3MgYW5kIGRlc2NyaXB0aW9ucywgd2hpY2ggY2FuIGJlIHNjcmFwZWQgYW5kIHJldXNlZCB3aXRob3V0IHBlcm1pc3Npb24gYnkgb3RoZXJzLiBTbyBtYW55IGRlcGxveSBkZWZlbnNlcyB0byBzdWJ2ZXJ0IHNjcmFwaW5nIC4uLlwiIDxzdXA+MTwvc3VwPjwvcD5gO1xyXG52YXIgYmxvZ2NpdGUyMSA9IGAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9zY3JhcGVyLWJvdHMtYW5kLXRoZS1zZWNyZXQtaW50ZXJuZXQtYXJtcy1yYWNlL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L3NjcmFwZXItYm90cy1hbmQtdGhlLXNlY3JldC1pbnRlcm5ldC1hcm1zLXJhY2UvXHJcbjwvYT5cclxuPC9wPiAgIGA7XHJcblxyXG4gIHZhciBibG9ncG9zdDIwID0gIGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+U3BhY2UuY29tIC4uLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XCJOQVNBJ3MgUm9ib25hdXQgcHJvZ3JhbSBhbmQgUm9zY29zbW9zJyBGRURPUiBwcm9ncmFtIHNlZW0gdG8gc2hhcmUgdGhlIGdvYWwgb2YgY3JlYXRpbmcgcm9ib3RzIHRoYXQgbWFrZSBpdCBzYWZlciBmb3IgaHVtYW5zIHRvIGFjY29tcGxpc2ggdGhpbmdzIGluIHNwYWNlIHRoYXQgb3RoZXJ3aXNlIHdvdWxkIGJlIHRvbyBkYW5nZXJvdXMgZm9yIGh1bWFucyB0byBhdHRlbXB0LjxpPiBTdGlsbCwgdGhlIEZFRE9SIGFuZHJvaWRzJyBndW4td2llbGRpbmcgZGVzaWduIG1pZ2h0IHJhaXNlIGEgZmV3IGV5ZWJyb3dzLlwiPC9pPjxzdXA+MTwvc3VwPjwvcD5cclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL2Ryb2lkLmpwZ1wiIGNsYXNzPVwiem9vbVwiIHdpZHRoPVwiMjg4cHhcIiAvPlxyXG4gIGA7XHJcbnZhciBibG9nY2l0ZTIwID0gYCBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuc3BhY2UuY29tLzQxMjUzLXJ1c3NpYW4tcm9ib3RzLWZseS10by1zcGFjZS5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5zcGFjZS5jb20vNDEyNTMtcnVzc2lhbi1yb2JvdHMtZmx5LXRvLXNwYWNlLmh0bWxcclxuPC9wPiAgIGA7XHJcbiAgXHJcbiAgdmFyIGJsb2dwb3N0MTk9XHJcbiAgYDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICA8aT4gT25lIHBlcnNvbiBmYW1pbGlhciB3aXRoIHRoZSBtYXR0ZXIgZGVzY3JpYmVkIHRoZSBvZmZpY2Ugc2NlbmUgYXMg4oCcY2hhb3RpY+KAnSBhbmQgc2FpZCBhdCBvbmUgcG9pbnQgbW9yZSB0aGFuIDMwMCBwZW9wbGUgdHVuZWQgaW4gdG8gYW4gZW1lcmdlbmN5IGNvbmZlcmVuY2UgY2FsbC4gIOKAnEN1cnJlbnRseSBvdXQgb2YgY2FwYWNpdHkgZm9yIHNjYWxpbmcs4oCdIG9uZSBvZiB0aGUgdXBkYXRlcyBzYWlkIGFib3V0IHRoZSBzdGF0dXMgb2YgQW1hem9u4oCZcyBzZXJ2ZXJzLCByb3VnaGx5IGFuIGhvdXIgYWZ0ZXIgUHJpbWUgRGF54oCZcyBsYXVuY2guIOKAnExvb2tpbmcgYXQgc2NhdmVuZ2luZyBoYXJkd2FyZS7igJ0gPHN1cD4xPC9zdXA+PC9pPiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlByaW1lIERheSdzIHNhZ2Egb2YgY2FzY2FkaW5nIGZhaWx1cmVzIHN0ZW1taW5nIGZyb20gYW4gaW50ZXJuYWwgc29mdHdhcmUgcmV2ZWFscyB0aGUgPGk+IHJlbGVudGxlc3MgY2hhbGxlbmdlIG9mIFNjYWxhYmlsaXR5PC9pPi4gSW4gdGhlaXIgd29yZHMsIHRoZSByb290IGNhdXNlIHdhcyBhIFwiYnJlYWtkb3duIGluIGF1dG8tc2NhbGluZywgYSBjcml0aWNhbCBjb21wb25lbnQgd2hlbiBkZWFsaW5nIHdpdGggdW5leHBlY3RlZCB0cmFmZmljIHNwaWtlc1wiPHN1cD4xPC9zdXA+LiBTbyB0aGUgZXhwb25lbnRpYWwgc3Bpa2VzIG1heSBiZSBoYXJkIHRvIGV4cGVjdCBiZWNhdXNlIHRoZWlyIG5hdHVyZSBpcyBib3RoIHNwb250YW5lb3VzLCBidXQgdGhlIGluZmxlY3Rpb24gaXMgY2FsY3VsYWJsZSEgLi4ub25seSBkcmFtYXRpY2FsbHkgcmVwcmVzZW50ZWQgYXMgdGhlIGZvbGRpbmcgYSBzaGVldCBvZiBwYXBlciA0MiB0aW1lcyB0byByZWFjaCB0aGUgbW9vbiAuLi5cclxuICA8L3A+XHJcbiAgPGltZyBzcmM9XCJkaXN0L2ltZy9wYXBlci5wbmdcIiB3aWR0aD1cIjM0MHB4XCIgY2xhc3M9XCJ6b29tXCIgLz5cclxuICA8cD48c21hbGw+SW1hZ2UgQ3JlZGl0czogQ29kZXIncyBSZXZvbHV0aW9uPC9zbWFsbD48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiAgQW1hem9uIHdhc24ndCBhYmxlIHRvIGhhbmRsZSB0aGUgdHJhZmZpYyBzdXJnZSBhbmQgZmFpbGVkIHRvIHNlY3VyZSBlbm91Z2ggc2VydmVycyB0byBtZWV0IHRoZSBkZW1hbmQgb24gUHJpbWUgRGF5LCBhY2NvcmRpbmcgdG8gZXhwZXJ0IHJldmlldyBvZiBpbnRlcm5hbCBkb2N1bWVudHMgb2J0YWluZWQgYnkgQ05CQy48YnIgLz48YnIgLz5cclxuICBUaGF0IGxlZCB0byBhIGNhc2NhZGluZyBzZXJpZXMgb2YgZmFpbHVyZXMsIGluY2x1ZGluZyBhIHNsb3dkb3duIGluIGl0cyBpbnRlcm5hbCBjb21wdXRhdGlvbiBhbmQgc3RvcmFnZSBzZXJ2aWNlIGNhbGxlZCBTYWJsZSBhbmQgb3RoZXIgc2VydmljZXMgdGhhdCBkZXBlbmQgb24gaXQsIGluY2x1ZGluZyBQcmltZSwgYXV0aGVudGljYXRpb24gYW5kIHZpZGVvIHBsYXliYWNrLlxyXG4gIEFtYXpvbiBpbW1lZGlhdGVseSBsYXVuY2hlZCBhIHNjYWxlZC1kb3duIFwiZmFsbGJhY2tcIiBmcm9udCBwYWdlIHRvIHJlZHVjZSB3b3JrbG9hZCBhbmQgdGVtcG9yYXJpbHkga2lsbGVkIGFsbCBpbnRlcm5hdGlvbmFsIHRyYWZmaWMgdG9vLiBcclxuICA8L3A+PHA+QW5kIHNvLCB0aGUgc2FtZSBCZXpvc2lhbiBsZWFkZXJzaGlwIHRoYXQgbWFuYWdlcyBzcGFjZSBleHBsb3JhdGlvbidzIDxzdHJvbmc+Qmx1ZSBPcmlnaW48L3N0cm9uZz4gaW5zcGlyZWQgYSBzeXN0ZW0gb2YgZmFsbC1iYWNrIHJlZHVuZGVuY2llcyB0byBnZXQgYmFjayB1cCB0byBzcGVlZCBkcmFtYXRpY2FsbHkgd2l0aGluIDgwIG1pbnV0ZXMuIFBlcmhhcHMgdGhlIHF1aWNrLCBhbGJlaXQgdW5jb252ZW50aW9uYWwgcmVjb3Zlcnkgc3RyYXRlZ3kgZGVzZXJ2ZXMgZ3JlYXQgcmVzcGVjdC0tYmVjYXVzZSBjaGFuY2UgaGFwcGVucyB0byBhbGwhICAgXHJcbiAgPC9wPlxyXG4gIGA7IFxyXG5cclxuICB2YXIgYmxvZ2NpdGUxOSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj5JbWFnZSBDcmVkaXQ6IDxhIGhyZWY9XCJodHRwOi8vd3d2di5jb2RlcnNyZXZvbHV0aW9uLmNvbS9ibG9nL3dpbGwtYS1waWVjZS1vZi1wYXBlci1mb2xkZWQtNDItdGltZXMtcmVhY2gtdGhlLW1vb25cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly93d3Z2LmNvZGVyc3Jldm9sdXRpb24uY29tL2Jsb2cvd2lsbC1hLXBpZWNlLW9mLXBhcGVyLWZvbGRlZC00Mi10aW1lcy1yZWFjaC10aGUtbW9vblxyXG4gIDwvYT5cclxuICA8L3A+ICAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNuYmMuY29tLzIwMTgvMDcvMTkvYW1hem9uLWludGVybmFsLWRvY3VtZW50cy13aGF0LWNhdXNlZC1wcmltZS1kYXktY3Jhc2gtY29tcGFueS1zY3JhbWJsZS5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmJjLmNvbS8yMDE4LzA3LzE5L2FtYXpvbi1pbnRlcm5hbC1kb2N1bWVudHMtd2hhdC1jYXVzZWQtcHJpbWUtZGF5LWNyYXNoLWNvbXBhbnktc2NyYW1ibGUuaHRtbFxyXG48L2E+XHJcbjwvcD4gICBcclxuIGA7XHJcbiAgdmFyIGJsb2dwb3N0MTg9XHJcbiAgYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5CdXNpbmVzcyBtb2RlbHMgb2YgYWxsIHNoYXBlcyBhbmQgc2l6ZXMsIGFuZCB0aGUgZGl2ZXJzaXR5IG9mIHRlY2ggdGhhdCBjb21lcyB3aXRoIHRoZW0sIGFyZSB0aGUgbmF0dXJhbCBjb25zZXF1ZW5jZSBvZjxpPiB1bmxpbWl0ZWQgPHN0cm9uZz5jcmVhdGl2ZTwvc3Ryb25nPiBwb3RlbnRpYWwgaW4gVGVjaC4gU28sIGEgc21hbGwgYnVzaW5lc3Mgd2l0aCBmZXcgcmVzb3VyY2VzIG5vdyBoYXMgdW5saW1pdGVkIHJlc291cmNlcyBpbiB0aGUgY2xvdWQgd2l0aCBnYW1lLWNoYW5naW5nIGFjY2VzcyB0byBBLkkuPC9pPiBMdWNraWx5LCBpbnZlc3RtZW50cyBpbiBzbWFsbGVyIHRlY2ggc291cmNlcyBjb3ZlciBhbGwgc2VjdG9yczo8L3A+XHJcbiBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIEVuZXJneSBEZXBhcnRtZW50IGhhcyBhbm5vdW5jZWQgdGhhdCBpdCB3aWxsIGF3YXJkIDk1IGdyYW50cyB3b3J0aCBhIHRvdGFsIG9mICQ5NSBtaWxsaW9uIHRvIDgwIHNtYWxsIGJ1c2luZXNzZXMgbG9jYXRlZCBpbiAyNiBzdGF0ZXMgYXMgcGFydCBvZiBpdHMgU21hbGwgQnVzaW5lc3MgSW5ub3ZhdGlvbiBSZXNlYXJjaCBhbmQgU21hbGwgQnVzaW5lc3MgVGVjaG5vbG9neSBUcmFuc2ZlciBwcm9ncmFtcy4gPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlNvLCBmb3IgYXMgbXVjaCBhcyB0ZWNoIGdpYW50cyBncm93IG91dCBvZiBwcm9wb3J0aW9uLCBzbyBkbyBzbWFsbGVyIGJ1c2luZXNzZXM7IGJlY2F1c2Ugbm90IG9ubHkgaXMgdGhlIGVjb25vbWljIGhvcml6b24gIG5vdCBhIHplcm8tc3VtIHRlY2ggcGllLCBidXQgZ3Jvd2luZy4gU2Vjb25kbHksIHRoZSBwYWNlIG9mIGV2b2x2aW5nIG5lZWRzIGFuZCB0ZWNoIGNhcGFiaWxpdGllcyBmYXZvciBzbWFsbGVyLCBtb3JlIG1hbmV1dnJhYmxlIGVudHJlcHJlbmV1ci1wcm9kdWNlcnMuYDtcclxuICBcclxuICB2YXIgYmxvZ2NpdGUxOCA9IGAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHA6Ly93d3cuZXhlY3V0aXZlZ292LmNvbS8yMDE4LzA3L2RvZS10by1hd2FyZC1yZC1ncmFudC1mb3ItaW5ub3ZhdGl2ZS10ZWNoLXRvLTgwLXNtYWxsLWJ1c2luZXNzZXMvXHJcbiAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vd3d3LmV4ZWN1dGl2ZWdvdi5jb20vMjAxOC8wNy9kb2UtdG8tYXdhcmQtcmQtZ3JhbnQtZm9yLWlubm92YXRpdmUtdGVjaC10by04MC1zbWFsbC1idXNpbmVzc2VzL1xyXG4gIFxyXG48L2E+XHJcbjwvcD4gICBcclxuIGA7XHJcblxyXG4gIHZhciBibG9ncG9zdDE3ID1cclxuICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBDbG91ZCBjb21wdXRpbmcgaGFzIG5ldmVyIG9mZmVyZWQgbW9yZSBjb252ZW5pZW5jZS0tZXNwZWNpYWxseSBpbiBlLWNvbW1lcmNlLiBXYWxtYXJ0IHJhbXBzIHVwIG9ubGluZSBwcmVzZW5jZSwgQW1hem9uJ3MgV2hvbGUgRm9vZHMgcmFtcHMgdXAgb2ZmbGluZSBwcmVzZW5jZS4gTW9yZSBpbXBvcnRhbnRseSwgZXZlcnl0aGluZyBhbmQgYWxsIGJ1c2luZXNzZXMgaW4gYmV0d2VlbiB0aGVzZSB0d28gdm9ydGljZXMgaGFzIHRoZSBvcHBvcnR1bml0eSB0byByaWRlIHRoZSBzYW1lIHdhdmUgb2YgcGxhdGZvcm0gYW5kIHN1cHBseSBjaGFpbiBpbnRlZ3JhdGlvbi4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gUmV0YWlsIGdpYW50IFdhbG1hcnQgSW5jIHNhaWQgb24gVHVlc2RheSBpdCBlbnRlcmVkIGludG8gYSBzdHJhdGVnaWMgcGFydG5lcnNoaXAgd2l0aCBNaWNyb3NvZnQgQ29ycCBmb3Igd2lkZXIgdXNlIG9mIGNsb3VkIGFuZCBhcnRpZmljaWFsIGludGVsbGlnZW5jZSB0ZWNobm9sb2d5LCBpbiBhIHNpZ24gb2YgbWFqb3Igcml2YWxzIG9mIEFtYXpvbi5jb20gSW5jIGNvbWluZyB0b2dldGhlci5cclxuPGJyIC8+PGJyIC8+XHJcbiAgVGhlIGZpdmUteWVhciBhZ3JlZW1lbnQgd2lsbCBsZXZlcmFnZSB0aGUgZnVsbCByYW5nZSBvZiBNaWNyb3NvZnQncyBjbG91ZCBzb2x1dGlvbnMsIGluY2x1ZGluZyBNaWNyb3NvZnQgQXp1cmUgYW5kIE1pY3Jvc29mdCAzNjUsIHRvIG1ha2Ugc2hvcHBpbmcgZmFzdGVyIGFuZCBlYXNpZXIgZm9yIGN1c3RvbWVycywgdGhlIEJlbnRvbnZpbGxlIEFya2Fuc2FzLWJhc2VkIGNvbXBhbnkgc2FpZC5cclxuICBcclxuICBBcyBwYXJ0IG9mIHRoZSBwYXJ0bmVyc2hpcCwgV2FsbWFydCBhbmQgTWljcm9zb2Z0IGVuZ2luZWVycyB3aWxsIGNvbGxhYm9yYXRlIHRvIG1pZ3JhdGUgYSBzaWduaWZpY2FudCBwb3J0aW9uIG9mIHdhbG1hcnQuY29tIGFuZCBzYW1zY2x1Yi5jb20gdG8gQXp1cmUsIFdhbG1hcnQgYWRkZWQuIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTE3ID0gYCBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cudXNuZXdzLmNvbS9uZXdzL3RlY2hub2xvZ3kvYXJ0aWNsZXMvMjAxOC0wNy0xNy93YWxtYXJ0LW1pY3Jvc29mdC1pbi1wYXJ0bmVyc2hpcC10by11c2UtY2xvdWQtdGVjaFxyXG4gIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudXNuZXdzLmNvbS9uZXdzL3RlY2hub2xvZ3kvYXJ0aWNsZXMvMjAxOC0wNy0xNy93YWxtYXJ0LW1pY3Jvc29mdC1pbi1wYXJ0bmVyc2hpcC10by11c2UtY2xvdWQtdGVjaFxyXG4gIFxyXG48L2E+XHJcbjwvcD4gICBcclxuIGA7XHJcblxyXG4gIHZhciBibG9ncG9zdDE2ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BbGliYWJhLS1hIENoaW5lc2Ugc2VhcmNoIGdpYW50IGFraW4gdG8gR29vZ2xlLS1kd2FyZnMgdGhlIG1hcmtldCB2YWx1ZSBvZiBBbWF6b24uIFNvIG11Y2ggc28sIHRoYXQgQWxpYmFiYSdzIGVhcm5pbmdzIGxhc3QgeWVhciBkb24ndCBjb21wZXRlIHdpdGggQW1hem9uJ3MgeWVhciwgPGk+YnV0ICBwYXN0IHNldmVyYWwgeWVhcnM8L2k+LjxzdXA+MTwvc3VwPiBUaGVpciBzdWNjZXNzIGlzbid0IGEgaGFwaGF6YXJkIGV2ZW50LCBidXQgeWVhcnMgb2Ygc3RyYXRlZ3kgdGhhdCBmb2N1c2VkIG9uIGludGVncmF0aW5nIHNlcnZpY2VzLCB3aGV0aGVyIG9ubGluZSBvciBvZmZsaW5lIG9yaWdpbnMsIGEgdHJ1ZSBzdXBwbHkgY2hhaW4gbm8gbG9uZ2VyIGRpc2NyaW1pbmF0aW5nIG1hcmtldHBsYWNlcywgbG9naXN0aWNzLCBjbG91ZCBjb21wdXRpbmcgYW5kIHBheW1lbnRzLiBXaXRoIHVubGltaXRlZCBnbG9iYWwgcmVhY2gsIGJpZyBnZXRzIGJpZ2dlciBhbmQgYmlnZ2VyLiA8L3A+XHJcbiBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+ICBcIkFsaWJhYmEgQ2xvdWQgaGFzIGFsd2F5cyBiZWVuIGRlZGljYXRlZCB0byBlbXBvd2VyIGVudGVycHJpc2VzIG9mIGRpZmZlcmVudCBzaXplcyB0byB0YXAgaW50byBvcHBvcnR1bml0aWVzIGluIHRoZSBkaWdpdGFsIGFnZS4gV2l0aCBkaWdpdGFsIHRyYW5zZm9ybWF0aW9uIHBvaXNlZCB0byBhZGQgY2xvc2UgdG8gJDE1NCBiaWxsaW9uIHRvIEluZGlhJ3MgR0RQLCB0aGlzIGlzIGEgZ3JlYXQgb3Bwb3J0dW5pdHkgZm9yIHVzIHRvIGRvIGJ1c2luZXNzIGluIEluZGlhLFwiIEFsZXggTGksIEdlbmVyYWwgTWFuYWdlciBvZiBBbGliYWJhIENsb3VkIEFzaWEgUGFjaWZpYywgc2FpZCBpbiBhIHN0YXRlbWVudC48c3VwPjI8L3N1cD4gXHJcbiAgIDwvcD5cclxuICAgPHA+XHJcbiAgIFVsdGltYXRlbHksIHdoYXQgZ29lcyB1cCBkb2VzIG5vdCBuZWNlc3NhcmlseSBjb21lIGJhY2sgZG93biB3aXRoIGNsb3VkIGNvbXB1dGluZy4gQW5kIHRoZSBmdXJ0aGVyIGludGVncmF0ZWQgc3lzdGVtcyBiZWNvbWUsIHRoZSBsZXNzIGZlYXNpYmxlIHRvIGRpdmlkZSwgbm8gbWF0dGVyIHdoaWNoIHBhcnQgb2YgdGhlIGdsb2JlLjxzdXA+Mzwvc3VwPjwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTE2ID0gYFxyXG4gIDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cIlxyXG4gIGh0dHBzOi8vd3d3LmxlbW9uZGUuZnIvaWRlZXMvYXJ0aWNsZS8yMDE4LzA3LzEwL2NvbW1lbnQtYWxpYmFiYS12YS10dWVyLWFtYXpvbl81MzI5MTcwXzMyMzIuaHRtbFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubGVtb25kZS5mci9pZGVlcy9hcnRpY2xlLzIwMTgvMDcvMTAvY29tbWVudC1hbGliYWJhLXZhLXR1ZXItYW1hem9uXzUzMjkxNzBfMzIzMi5odG1sXHJcbiAgPC9hPlxyXG4gIDwvcD4gICAgXHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly9lY29ub21pY3RpbWVzLmluZGlhdGltZXMuY29tL3NtYWxsLWJpei9zdGFydHVwcy9uZXdzYnV6ei9pbmRpYS1wcmVzZW50cy1ncmVhdC1idXNpbmVzcy1vcHBvcnR1bml0aWVzLWFsaWJhYmEtY2xvdWQvYXJ0aWNsZXNob3cvNjQ5NzQ5ODkuY21zXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2Vjb25vbWljdGltZXMuaW5kaWF0aW1lcy5jb20vc21hbGwtYml6L3N0YXJ0dXBzL25ld3NidXp6L2luZGlhLXByZXNlbnRzLWdyZWF0LWJ1c2luZXNzLW9wcG9ydHVuaXRpZXMtYWxpYmFiYS1jbG91ZC9hcnRpY2xlc2hvdy82NDk3NDk4OS5jbXNcclxuICA8L2E+XHJcbiAgPC9wPiAgICAgIDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lndzai5jb20vYXJ0aWNsZXMvYnJlYWtpbmctdXAtYmlnLXRlY2gtaXMtaGFyZC10by1kby0xNTMyMjkwMTIzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53c2ouY29tL2FydGljbGVzL2JyZWFraW5nLXVwLWJpZy10ZWNoLWlzLWhhcmQtdG8tZG8tMTUzMjI5MDEyM1xyXG4gIDwvYT5cclxuICA8L3A+ICAgIFxyXG4gYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTUgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkV0aGVyZXVtIEFyY2hpdGVjdCBWaXRhbGlrIEJ1dGVyaW4ncyB1bndhdmVyaW5nIGNvbW1pdG1lbnQgdG8gdGhlIENyeXB0by1jb250cmFjdCBjdXJyZW5jeSBmaW5hbGx5IHBheXMgb2ZmLiBJbiBteSBGZWJydWFyeSBibG9ncG9zdHMsIEkgcmVjb3VudGVkIHRoZSB0ZWNobmljYWwgY2hhbGxlbmdlcyB0aGF0IEV0aGVyZXVtIHN0aWxsIGZhY2VkOiBBcyBhIFwiUHJvb2Ygb2YgV29ya1wiIGN1cnJlbmN5IHRoYXQgcmVxdWlyZXMgRXRoZXIgKGluIDxpPldlaTwvaT4pIGN1cnJlbmN5IGZvciBlYWNoIHRyYW5zYWN0aW9uIGhpbmRlcmVkIG1vcmUgd2lkZXNwcmVhZCBhZG9wdGlvbi4gQWZ0ZXIgdGhlIGJpZyBib29zdCBmcm9tIGxhc3QgbW9udGgncyBTd2l0emVybGFuZCdzIENyeXB0byBWYWxsZXkgQ29uZmVyZW5jZSwgRXRoZXJldW0gd2Fsa2VkIGF3YXkgaGFuZGlseSB3aXRoIHNjb3JlcyBvZiBpbnZlc3RvcnMgYW5kIHJlbmV3ZWQgbW9tZW50dW0uIFRoZSAyMy15ZWFyIG9sZCBoZXJvIG9mIHRoZSBwbGF0Zm9ybSBhbG1vc3QgYXBwZWFycyBwcmVjb2Npb3VzIGZvciB0aGUgcmVjZW50IGZlYXR1cmUgaW4gRm9ydHVuZSBNYWdhemluZSdzIFRvcCA0MCBVbmRlciA0MC48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIFtCdXRlcmluJ3NdIHZpc2lvbmFyeSBwcm9qZWN0IGhhcyByb2NrZXRlZCB0byBhIG1hcmtldCBjYXAgb2YgbmVhcmx5ICQzMCBiaWxsaW9u4oCUYXMgaGlnaCBhcyB0aGUgcHJpdmF0ZSB2YWx1YXRpb25zIEFpcmJuYiBhbmQgU25hcGNoYXQgYWNoaWV2ZWTigJRmcm9tICQxIGJpbGxpb24gYSB5ZWFyIGFnbywgd2hlbiBGb3J0dW5lIGZpcnN0IHBsYWNlZCBoaW0gb24gaXRzIDQwIHVuZGVyIDQwIGxpc3QuPHN1cD4yPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlRvIHJlY2FwIHRoZSBlbm9ybW91cyBhZHZhbnRhZ2VzIG9mIEV0aGVyZXVtIGZ1bmN0aW9ucyBhcyBhIDxpPiBnbG9iYWwgb3BlcmF0aW5nIHN5c3RlbS0tVGhlIEV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZS0tPC9pPiAgdGhlIHBsYXRmb3JtIHVwb24gd2hpY2ggc2hhcmVkLCBkaXN0cmlidXRlZCBhcHBsaWNhdGlvbnMgY2FuIGJlIGRlc2lnbmVkIGFuZCBkZXBsb3llZC4gVW5saWtlIEJpdGNvaW4ncyBmdW5jdGlvbi1sZXNzIHBsYXRmb3JtLCBjb250cmFjdHMgZnJvbSBiYW5raW5nIHRvIGJldHRpbmcgdG8gcmVhbC1lc3RhdGUgY2FuIGVhc2lseSBiZSBkcmF3biB1cCBpbiBTb2xpZGl0eSBjb2RlLCBpbnRvIHRoZSBEQVBQLCA8aT5EaXN0cmlidXRlZCBBcHBsaWNhdGlvbiAgZGVwbG95ZWQgb250byBhIEZpbnRlY2ggbmV0d29yayBzbyBleHBhbnNpdmU8L2k+LCBubyB3b25kZXIgdGhhdCBldmVuIGEgY3J5cHRvLWN1cnJlbmN5IG5lZWRzIGEgU3dpc3MgYmFuayBhY2NvdW50IVxyXG4gIDwvcD5cclxuICBgO1xyXG5cclxuICB2YXIgYmxvZ2NpdGUxNSA9IGA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJcclxuaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8wNy8xOC9ldGhlcmV1bS1pcy1hLWxlYWRpbmctZHJpdmVyLWluLWJsb2NrY2hhaW4tc2F5cy1jaXJjbGUtY2VvLmh0bWxcclxuXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8wNy8xOC9ldGhlcmV1bS1pcy1hLWxlYWRpbmctZHJpdmVyLWluLWJsb2NrY2hhaW4tc2F5cy1jaXJjbGUtY2VvLmh0bWxcclxuPC9hPiBcclxuPC9wPlxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuIDxhIGhyZWY9XCJcclxuaHR0cDovL2ZvcnR1bmUuY29tLzQwLXVuZGVyLTQwL3ZpdGFsaWstYnV0ZXJpbi0xMC9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly9mb3J0dW5lLmNvbS80MC11bmRlci00MC92aXRhbGlrLWJ1dGVyaW4tMTAvXHJcbjwvYT5cclxuPC9wPiAgIFxyXG4gYDtcclxuIFxyXG4gIHZhciBibG9ncG9zdDE0ID0gYFxyXG4gPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlByaW1lJ3MgQWxsdXJlIGJlZ2lucyB3aXRoIHRoZSBncmVhdGVzdCBkZWFscywgdGhlIG1vc3QgY29udmVuaWVudCBkZWxpdmVyaWVzLCBhbmQgYSBuZXcgQWNjZXNzaWJpbGl0eSBvZiBXaG9sZSBGb29kcyBCcmVhZHMsIFBhc3RyaWVzLCBhbmQgSG9uZXlDcmlzcCBBcHBsZXMgdG8gZXZlcnkgY2l0aXplbiE8L3A+XHJcbiA8cD5PbiBhIGRhcmtlciBub3RlLCBtYW55IGFydGljbGVzIGFuZCBzdHVkaWVzIGZvY3VzIG9uIHRoZSB2ZW5kb3JzJyBzaWRlIG9mIHRoZSBBbWF6b24gZWZmZWN0LCBpLmUuIHRoZSBwdXNoIHRvIHJlbW90ZSBzaG9wcGluZzs8c3VwPjE8L3N1cD4gQnV0IHRoZSBjb25zdW1lciBzaWRlIG9mIHRoZSBBbWF6b24gZWZmZWN0IGlzIG1vcmUgaW5zaWRpb3VzOiB0aGUgc2hlZXIgb2ZmLXNjYWxlIHVuZGVycHJpY2luZyBvZiBnb29kcywgbW9jayBob2xpZGF5cywgYW5kIHNob3BwaW5nLW1lbWJlcnNoaXBzIHB1c2ggbmV3IHNwZW5kaW5nIGhhYml0cy4gPGk+VGhlIG1vcmUgY29udmVuaWVudCBzaG9wcGluZyB3aXRoICdvbmUtY2xpY2sgYnV5JyBiZWNvbWVzLCB0aGUgJ2xlc3MgY29udmVuaWVudCcgYmVjb21lcyB0aGUgZXhwbG9yYXRpdmUsIGV4Y2l0aW5nLS9kZWJhdGUtZmlsbGVkIHNob3BwaW5nIGV4cGVyaWVuY2VzIHRoYXQgcmV3YXJkIHRoZSBDcmVhdGl2ZSBFbnRyZXByZW5ldXJzJzwvaT4gY3VsdHVyYWwgaW50ZXJhY3Rpb24gd2l0aCBjb25zdW1lcnMgIFxyXG5cclxuYDtcclxuICB2YXIgYmxvZ2NpdGUxNCA9IGBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiXHJcbmh0dHBzOi8vd3d3LnN0YXRpc3RhLmNvbS9jaGFydC8xMDI5NS9zaG9wcGluZy1vbi1hbWF6b24vXHJcblwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbmh0dHBzOi8vd3d3LnN0YXRpc3RhLmNvbS9jaGFydC8xMDI5NS9zaG9wcGluZy1vbi1hbWF6b24vXHJcbjwvYT5cclxuPC9wPiAgIFxyXG5gO1xyXG52YXIgYmxvZ3Bvc3QxMyA9IGBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBOb3cgdGhhdCA0OSUgb2YgQW1lcmljYW4gZS1jb21tZXJjZSBwYXNzZXMgdGhyb3VnaCBBbWF6b24ncyBnYXRlcywgaXQncyBvZmZpY2lhbDogPGk+NTAlIG1hcmtldCBzaGFyZSBzaWduaWZpZXMgYSBiYWxhbmNlIG9mIHBvd2VyIHNoaWZ0aW5nIHVuZGVybmVhdGggdGhlIGNvbW1lcmNpYWwgc3RyYXRhIG9mIEFtZXJpYW4gQ3VsdHVyZS48L2k+IEZyb20gdGhlIHJlbWFpbmluZyA1MCUgb2YgdGhlIE9ubGluZSBTaG9wcGluZyBwaWUgZ29lcyB0byAgdGhlIG5leHQgdG9wIG5pbmUsIDIyJTogXHJcbjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG5lQmF5IChFQkFZKTogNi42JTxiciAvPjxiciAvPlxyXG5BcHBsZSAoQUFQTCk6IDMuOSU8YnIgLz48YnIgLz5cclxuV2FsbWFydCAoV01UKTogMy43JTxiciAvPjxiciAvPlxyXG5Ib21lIERlcG90IChIRCk6IDEuNSU8YnIgLz48YnIgLz5cclxuQmVzdCBCdXkgKEJCWSkgMS4zJTxiciAvPjxiciAvPlxyXG5RVkMgR3JvdXAgKFFWQ0EpOiAxLjIlPGJyIC8+PGJyIC8+XHJcbk1hY3kncyAoTSk6IDEuMiU8YnIgLz48YnIgLz5cclxuQ29zdGNvIChDT1NUKTogMS4yJTxiciAvPjxiciAvPlxyXG5XYXlmYWlyIChXKTogMS4xJTxiciAvPjxiciAvPlxyXG48c21hbGwgc3R5bGU9XCJhbGlnbjpyaWdodDtcIj5CdXNpbmVzcyBJbnNpZGVyLCBKdWx5IDIwMTggPC9zbWFsbD48L3A+XHJcbjwvcD5cclxuPHA+VGhlcmUgYXJlIG1hbnkgbW9yZSBvcmdhbml6YXRpb25zLCBhcyB5b3Ugc3RpbGwgaGF2ZSB0aGUgbG9mdHksIGJlYXV0aWZ5IEFwcGxlIHByb2R1Y3RzLCBhbmQgd2hvIGRvZXNuJ3QgbG92ZSB0aGUgdW1icmVsbGEtY2FuZSBvbmx5IGF2YWlsYWJsZSBvbiBRVkMgbGltaXRlZCBxdWFudGl0aWVzIGRvIGFwcGx5ITwvcD5cclxuPHA+XHJcbk9mIGNvdXJzZSwgdGhlIHJlbWFpbmluZyBmcmVlIGJpcmRzLCB0aGUgMjglLCBjb21wcmlzZSB0aGUgbWlsbGlvbnMgb2YgaG9tZS1vZmZpY2UsYnJpY2stYW5kLW1vcnRhcnMsIGFuZCBvbmxpbmUgbWFya2V0IGVudHJlcHJlbmV1cnMuIChUaGVzZSBkbyBub3QgaW5jbHVkZSB0aGUgaW5kZXBlbmRlbnQgdmVuZG9yIHNhbGVzIHVzaW5nIEFtYXpvbidzIE1hcmtldHBsYWNlKS4gPC9wPjxwPlNvIHdoeSBkb2VzIHRoaXMgMjgtcGVyY2VudGlsZSBzbGljZSBvZiBlLWNvbW1lcmNlIHJlcHJlc2VudCB0aGUgaW50ZWdyYWwgY29yZSBvZiBBbWVyaWNhbiBDdWx0dXJlPyBUaGUgQ3JlYXRpdmUgU3Bpcml0IGFsd2F5cyBzdXJ2aXZlcyBhbmQgYWRhcHRzLCBldmVuIHRocml2ZXMgd2hlbiBhbnl0aGluZyBvdGhlci0tb3RoZXIgdGhhbiBwdXJlIFplaXRnZWlzdC0td2lsbCBmYWlsOyBidXQgaXQgY2hhbmdlcywgYW5kIDxpPiBjcmVhdGl2ZSB2ZXJ2ZSB0YWtlcyBvbiBhIHJlc2hhcGVkIGZvcm0gYW5kIGEgbmV3IHBhY2UsIGZpdHRpbmcgdG8gYnVyZWF1Y3JhdGljIGNvbnN0cmFpbnRzIGFuZCBwcmljaW5nIHNjaGVtYS4gPC9wPiAgIGA7XHJcblxyXG4gIHZhciBibG9nY2l0ZTEzID0gYFxyXG4gIDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cIlxyXG4gIGh0dHA6Ly93d3cuYnVzaW5lc3NpbnNpZGVyLmNvbS9hbWF6b24taXMtY2xvc2luZy1pbi1vbi1vd25pbmctaGFsZi1vZi10aGUtZS1jb21tZXJjZS1tYXJrZXQtMjAxOC03P3V0bV9zb3VyY2U9ZmVlZGJ1cm5lciZhbXAlM0J1dG1fbWVkaXVtPXJlZmVycmFsJnV0bV9tZWRpdW09ZmVlZCZ1dG1fY2FtcGFpZ249RmVlZCUzQStidXNpbmVzc2luc2lkZXIlMkZ0cmF2ZWwrJTI4QnVzaW5lc3MrSW5zaWRlciUyOSZyPVVTJklSPVQmSVI9VFxyXG4gIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cDovL3d3dy5idXNpbmVzc2luc2lkZXIuY29tL2FtYXpvbi1pcy1jbG9zaW5nLWluLW9uLW93bmluZy1oYWxmLW9mLXRoZS1lLWNvbW1lcmNlLW1hcmtldC0yMDE4LTcgXHJcbiAgPC9hPlxyXG4gIDwvcD4gICAgIFxyXG5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDEyID0gYFxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5GaW50ZWNoJ3MgcmV2ZXJlZCBcIkNyeXB0byBWYWxsZXkgQ29uZmVyZW5jZSBvbiBCbG9ja2NoYWluIFRlY2hub2xvZ3lcIiBpbiBadWcsIFN3aXR6ZXJsYW5kLCBmZWF0dXJlZCBibG9ja2NoYWluIGV4cGVydGlzZSBmcm9tIGFsbCBjb3JuZXJzLCBpbmNsdWRpbmcgS2V5bm90ZSBTcGVha2VycywgU3RlZmFuIFRob21hcyBDVE8gb2YgUmlwcGxlIFtjcnlwdG9jdXJyZW5jeV0gYW5kIFByb2Zlc3NvciBFbWluIEcmdXVtbDtuIFNpcmVyIG9mIENvcm5lbGwgVW5pdmVyc2l0eSwgYWxvbmcgd2l0aCBFY29ub21pc3RzIGFuZCBTd2lzcyBHb3Zlcm5tZW50IG9mZmljaWFscy4gV29ybGQtY2xhc3MgZWNvbm9taXN0cywgaW52ZXN0b3JzLCBhbmQgUmVndWxhdGlvbiBhdXRob3JpdGllcyBhc2lkZSwgdGhlIGhvc3QtY291bnRyaWVzIHdob2xlLWhlYXJ0ZWQgY29tbWl0bWVudCB0byBjcnlwdG9jdXJyZW5jeSBpcyBldmlkZW50OiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPuKAnFRoZXkgd2FudCBTd2l0emVybGFuZCB0byBiZSB0aGUgcGxhY2UgdG8gbWFrZSBpdCBoYXBwZW4g4oCUIGJ1dCB0aGV5IGRvbuKAmXQgd2FudCB0byBiZSBzZWVuXHJcbiAgYXMgdGhlIOKAmHdpbGQgd2VzdOKAmS4gSXQgaXMgU3dpc3MgcHJhZ21hdGlzbSzigJ0gc2F5cyBNYXJ0aW4gRWNrZXJ0LCBwYXJ0bmVyIGF0IE1NRSwgYSBTd2lzcyBsYXcgZmlybS4gPGJyIC8+PGJyIC8+IFxyXG4gIERpZ2l0YWwgcGlvbmVlcnMgc2F5IFN3aXR6ZXJsYW5kIGVtZXJnZWQgYXMgYW4gSUNPIGh1YiBiZWNhdXNlIGl0IGhhcyBhIGNsdXN0ZXIgb2YgcmljaFxyXG4gIGludmVzdG9ycyBhbmQgdGVjaG5vbG9neSBzcGVjaWFsaXN0cy4gVGhlIHNtYWxsIGNhbnRvbiBvZiBadWcsIG5lYXIgWnVyaWNoLCBoYXMgdW5vZmZpY2lhbGx5XHJcbiAgU3dpdHplcmxhbmQgZW1icmFjZXMgY3J5cHRvY3VycmVuY3kgY3VsdHVyZSBTZWl0ZSAyIHZvbiA3XHJcbiAgMjUuMDEuMjAxOFxyXG4gIGJlY29tZSDigJxDcnlwdG8gVmFsbGV54oCdLjxzdXA+NDwvc3VwPlxyXG4gIDwvcD5cclxuICA8aW1nIHNyYz1cImRpc3QvaW1nL3N3aXNzQmxvY2tjaGFpbi5wbmdcIiB3aWR0aD1cIjM1MFwiIGNsYXNzPVwiem9vbVwiIC8+XHJcbiAgPHA+PHNtYWxsPkltYWdlIENyZWRpdDogU291cmNlIEx5a2tlLCBDb2luZGVzazwvc21hbGw+PC9wPlxyXG5gO1xyXG4gIHZhciBibG9nY2l0ZTEyID0gYDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+My4gPGEgaHJlZj1cIlxyXG4gIGh0dHBzOi8vd3d3LmNyeXB0b3ZhbGxleWNvbmZlcmVuY2UuY29tXHJcbiAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICBcclxuICBodHRwczovL3d3dy5jcnlwdG92YWxsZXljb25mZXJlbmNlLmNvbVxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj40LiA8YSBocmVmPVwiXHJcbiAgaHR0cHM6Ly93d3cuY3J5cHRvLWZpbmFuY2UtY29uZmVyZW5jZS5jb20vcmVzb3VyY2VzL3B1YmxpYy9sYXZhMy9tZWRpYS9zd2l0emVybGFuZC1lbWJyYWNlcy1jcnlwdG9jdXJyZW5jeS1jdWx0dXJlLnBkZlxyXG4gIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgXHJcbiAgaHR0cHM6Ly93d3cuY3J5cHRvLWZpbmFuY2UtY29uZmVyZW5jZS5jb20vcmVzb3VyY2VzL3B1YmxpYy9sYXZhMy9tZWRpYS9zd2l0emVybGFuZC1lbWJyYWNlcy1jcnlwdG9jdXJyZW5jeS1jdWx0dXJlLnBkZlxyXG4gIDwvYT5cclxuICA8L3A+XHJcbmA7XHJcbiAgdmFyIGJsb2dwb3N0MTEgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPjxpPlplbiBvZiBQeXRob246IFwiQmVhdXRpZnVsIGlzIGJldHRlciB0aGFuIHVnbHkuPGk+IEV4cGxpY2l0IGlzIGJldHRlciB0aGFuIGltcGxpY2l0LjwvaT4gIFNpbXBsZSBpcyBiZXR0ZXIgdGhhbiBjb21wbGV4LiAgQ29tcGxleCBpcyBiZXR0ZXIgdGhhbiBjb21wbGljYXRlZC4gRmxhdCBpcyBiZXR0ZXIgdGhhbiBuZXN0ZWQuICBTcGFyc2UgaXMgYmV0dGVyIHRoYW4gZGVuc2VcIjxiciAvPjwvaT4gLS0gUHl0aG9uZWVyIFRpbSBQZXRlcnM8cD4gSW4gbXkgQXByaWwgMTl0aCBwb3N0LCBJIHJlY291bnQgUHl0aG9uJ3MgbmVhci1teXN0aWNhbCBhdXRob3IgYW5kIGxlYWRlciBvZiBsYW5ndWFnZSdzIGRldmVsb3BtZW50IHVwIHRvIHRoaXMgbW9udGgncyByZXRpcmVtZW50OiAgQWJvdXQgR3VpZG8gdmFuIFJvc3N1bSwgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5BZnRlciBhbG1vc3QgMzAgeWVhcnMgb2Ygb3ZlcnNlZWluZyB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIHdvcmxkJ3M8aT4gbW9zdCBwb3B1bGFyIGxhbmd1YWdlLCBQeXRob24sIGl0cyBmb3VuZGVyIGFuZCBCZW5ldm9sZW50IERpY3RhdG9yIEZvciBMaWZlXCIgKEJERkwpLCBHdWlkbyB2YW4gUm9zc3VtLDwvaT4gaGFzIGRlY2lkZWQgaGUgd291bGQgbGlrZSB0byByZW1vdmUgbXlzZWxmIGVudGlyZWx5IGZyb20gdGhlIGRlY2lzaW9uIHByb2Nlc3MuPHN1cD4yPC9zdXA+IDwvcD48cD5cclxuUHl0aG9uIGlzIE5BU0EncyBkcnVnLW9mLWNob2ljZSBiZWNhdXNlIG9mIHRoZSBsYW5ndWFnZSdzIHN1cGVyaW9yIGhhbmRsaW5nIG9mIHByZWNpc2lvbiBtYXRoZW1hdGljcywgYW5kIHlldCB0aGUgc3ludGF4IGFuZCBtb2R1bGUgbGlicmFyaWVzIG1ha2VzIHRoZSBsYW5ndWFnZSBlYXN5IGZvciBhbnlvbmUgdG8gcGljayB1cC4gRmV3IGNvdWxkIGFyZ3VlIGFnYWluc3QgR3VpZG8gdmFuIFJvc3N1bSdzIHJlZHVjdGlvbmlzdCBwaGlsb3NvcGh5IHRoYXQgaW5zcGlyZXMgdGhlIGNsZWFyLCBleHBhbnNpdmUgc3RydWN0dXJlLiBTbywgZmFyZXdlbGwgdG8gdGhlIGdyZWF0IEd1aWRvIHZhbiBSb3NzdW0ncyBvZmZpY2lhbCBsZWFkZXJzaGlwIGFuZCBUaGFuayBZb3UhIFxyXG48L3A+XHJcbmA7XHJcbiAgdmFyIGJsb2djaXRlMTEgPSBgIDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+PGE+MS4gVGltIFBldGVycyA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9weXRob24tbGFuZ3VhZ2UtZm91bmRlci1zdGVwcy1kb3duLyAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICBodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9weXRob24tbGFuZ3VhZ2UtZm91bmRlci1zdGVwcy1kb3duLyA8L2E+XHJcbiAgPC9wPlxyXG5cclxuYDtcclxuICB2YXIgYmxvZ3Bvc3QxMCA9IGA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbi4uLlRoZSBjb2xvc3NhbCBzaGlmdCBpbiB0aGUgY2hpcCB3b3JsZCBjYW1lIHdpdGggdGhlIGFkdmVudCBvZiBhcnRpZmljaWFsIGludGVsbGlnZW5jZSAoQUkpIGFuZCBtYWNoaW5lIGxlYXJuaW5nIChNTCkuIFdpdGggdGhlc2UgZW1lcmdpbmcgdGVjaG5vbG9naWVzLCBhIGZsb29kIG9mIG5ldyBwcm9jZXNzb3JzIGhhcyBhcnJpdmVk4oCUYW5kIHRoZXkgYXJlIGNvbWluZyBmcm9tIHVubGlrZWx5IHNvdXJjZXMuIDxiciAvPjxiciAvPlxyXG5NaWNyb3NvZnQgaXMgcHJlcGFyaW5nIGFuIEFJIGNoaXAgZm9yIGl0cyBIb2xvTGVucyBWUi9BUiBoZWFkc2V0LCBhbmQgdGhlcmXigJlzIHBvdGVudGlhbCBmb3IgdXNlIGluIG90aGVyIGRldmljZXMuIFxyXG48aT4gR29vZ2xlIGhhcyBhIHNwZWNpYWwgQUkgY2hpcCBmb3IgbmV1cmFsIG5ldHdvcmtzIGNhbGxlZCB0aGUgVGVuc29yIFByb2Nlc3NpbmcgVW5pdCwgb3IgVFBVLCB3aGljaCBpcyBhdmFpbGFibGUgZm9yIEFJIGFwcHMgb24gdGhlIEdvb2dsZSBDbG91ZCBQbGF0Zm9ybS4gPC9pPkFwcGxlIGlzIHdvcmtpbmcgb24gYW4gQUkgcHJvY2Vzc29yIGNhbGxlZCB0aGUgTmV1cmFsIEVuZ2luZSB0aGF0IHdpbGwgcG93ZXIgU2lyaSBhbmQgRmFjZUlELiAgPHN1cD4xPC9zdXA+PC9wPlxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QWxsIC4uLiBBbGwgdGhlIEEuSS4gVG9vbHMgYSBidXN5IGJlZSBjb3VsZCBhc2sgZm9yIVxyXG48L3A+XHJcbiBgO1xyXG4gIHZhciBibG9nY2l0ZTEwID0gYFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJcclxuaHR0cHM6Ly9hcnN0ZWNobmljYS5jb20vZ2FkZ2V0cy8yMDE4LzA3L3RoZS1haS1yZXZvbHV0aW9uLWhhcy1zcGF3bmVkLWEtbmV3LWNoaXBzLWFybXMtcmFjZS9cclxuXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuaHR0cHM6Ly9hcnN0ZWNobmljYS5jb20vZ2FkZ2V0cy8yMDE4LzA3L3RoZS1haS1yZXZvbHV0aW9uLWhhcy1zcGF3bmVkLWEtbmV3LWNoaXBzLWFybXMtcmFjZS9cclxuPC9hPlxyXG48L3A+ICAgICBcclxuYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0OSA9IGAgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Nb29yZSdzIExhdy0tYSBmdW5jdGlvbiBvZiB0cmFuc2lzdG9yIGNvdW50LS1oYXMgZ3VpZGVkIENQVSBiZW5jaC1tYXJrIGV4cGVjdGF0aW9ucyBhbG9uZyBhIGZhaXJseSBsaW5lYXIgcGF0aCB5ZWFyLWJ5LXllYXIuIEhvd2V2ZXIsIGNvbXB1dGluZyByZXF1aXJlbWVudHMgaGF2ZSBtdWx0aXBsaWVkIHdoaWxlIHRoZSBtYXRoZW1hdGljYWwgcmVsZXZlbmNlIG9mIHRoZSBsYXcgd2FuZXMuIDxiciAvPjxiciAvPlxyXG48aW1nIHNyYz1cImRpc3QvaW1nL21vb3Jlc19sYXcuanBnXCIgd2lkdGg9XCI0MDBweFwiIGNsYXNzPVwiem9vbVwiIHRpdGxlPVwiTW9vcmUncyBMYXcgR3JhcGhpY1wiIC8+PGJyIC8+SW1hZ2UgQ3JlZGl0OiBvdXJ3b3JsZGluZGF0YS5vcmcgPGJyIC8+PGJyIC8+IDxpPkVudGVyIHRoZSBEZWNpc2lvbiBUcmVlLCB0aGUgUmFuZG9tIEZvcmVzdCwgTmEmaXVtbDt2ZSBCYXllcywgYW5kIEstTmVhcmVzdCBOZWlnaGJvcnM8L2k+OiBUaGUgbWFjaGluZSBsZWFybmluZyB0b29scyBhbmQgdGhlb3JldGljYWwgYnVpbGRpbmcgYmxvY2tzIHRvIGdldCBtb3JlIGJhbmcgZm9yIHRoZSBidWNrIGZyb20gYWxsIHRoYXQgY29tcHV0aW5nIHBvd2VyLiBIb3c/IDxpPiBUZWFjaGluZyBzb2Z0d2FyZSB0byB0ZWFjaCBpdHNlbGYsIHdoaWNoIGlzIHRoZSBwYXRod2F5IG91dCBvZiBjb21wdXRpbmctcG93ZXIgZGVmaWNpdHMgYW5kIHRoZSBtb3ZlIGZyb20gdGhlb3JldGljYWwgdG8gcHJhY3RpY2FsPC9pPiAuLi48L3A+IFxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbkV2ZXJ5IHRlY2hub2xvZ3kgZm9sbG93cyBhIHNpbWlsYXIgcGF0aCBvZiBkaXN6Y292ZXJ5LCBlbmdpbmVlcmluZywgYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiB0aGUgY2FzZSBvZiBlbGVjdHJpY2l0eSwgRmFyYWRheSB1bmNvdmVyZWQgbmV3IHByaW5jaXBsZXMsIGJ1dCBubyBvbmUgcmVhbGx5IGtuZXcgaG93IHRvIG1ha2UgdGhlbSB1c2VmdWwuIFRoZXkgZmlyc3QgaGFkIHRvIGJlIHVuZGVyc3Rvb2Qgd2VsbCBlbm91Z2ggdGhhdCBwZW9wbGUgc3VjaCBhcyBFZGlzb24sIFdlc3Rpbmdob3VzZSwgYW5kIFRlc2xhIGNvdWxkIGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgdGhpbmdzIHRoYXQgcGVvcGxlIHdvdWxkIGJlIHdpbGxpbmcgdG8gYnV5LlxyXG4gXHJcbjxiciAvPjxiciAvPiAgVGhlIGRpZ2l0YWwgcmV2b2x1dGlvbiwgZm9yIGFsbCBvZiBpdHMgY2hhcm1zLCBoYXMgaGFkIGEgZmFpcmx5IGxpbWl0ZWQgZWNvbm9taWMgaW1wYWN0LCBjb21wYXJlZCB3aXRoIGVhcmxpZXIgdGVjaG5vbG9naWVzIHN1Y2ggYXMgZWxlY3RyaWNpdHkgYW5kIHRoZSBpbnRlcm5hbCBjb21idXN0aW9uIGVuZ2luZS4gRXZlbiBub3csIGluZm9ybWF0aW9uIHRlY2hub2xvZ2llcyBtYWtlIHVwIG9ubHkgYWJvdXQgNiUgb2YgR0RQIGluIGFkdmFuY2VkIGVjb25vbWllcy4gQ29tcGFyZSB0aGF0IHRvIG1hbnVmYWN0dXJpbmcsIGhlYWx0aCBjYXJlLCBhbmQgZW5lcmd5LCB3aGljaCBtYWtlIHVwIDE3JSwgMTAlLCBhbmQgOCUgb2YgZ2xvYmFsIEdEUCwgcmVzcGVjdGl2ZWx5LCBhbmQgeW91IGNhbiBzZWUgaG93IHRoZXJlIGlzIHZhc3RseSBtb3JlIHBvdGVudGlhbCB0byBtYWtlIGFuIGltcGFjdCBiZXlvbmQgdGhlIGRpZ2l0YWwgd29ybGQuXHJcbjxzdXA+Mjwvc3VwPjwvcD5cclxuPHA+QXMgdGhlIHNheWluZyBnb2VzLCA8aT5PbmUgY3Jvd2RlZCBob3VyIG9mIGdsb3Jpb3VzIGxpZmUgaXMgd29ydGggYW4gYWdlIHdpdGhvdXQgYSBuYW1lLjwvaT48c3VwPjM8L3N1cD4gQW5kIG5vdyB0aGUgdGlkZSBpcyBoaWdoIGZvciBUZWNoIHRvIHZlbnR1cmUgb3V0IGludG8gdGhlIHdvcmxkIGFuZCBtYWtlIGEgbmFtZSBmb3IgaGVyc2VsZiFcclxuYDtcclxuICB2YXIgYmxvZ2NpdGU5ID0gYDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vb3Vyd29ybGRpbmRhdGEub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEzLzA1L1RyYW5zaXN0b3ItQ291bnQtb3Zlci10aW1lLnBuZ0FydGljbGVcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vb3Vyd29ybGRpbmRhdGEub3JnL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEzLzA1L1RyYW5zaXN0b3ItQ291bnQtb3Zlci10aW1lLnBuZzwvYT5cclxuPC9wPlxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuIDxhIGhyZWY9XCJodHRwczovL2hici5vcmcvMjAxOC8wNy90aGUtaW5kdXN0cmlhbC1lcmEtZW5kZWQtYW5kLXNvLXdpbGwtdGhlLWRpZ2l0YWwtZXJhXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2hici5vcmcvMjAxOC8wNy90aGUtaW5kdXN0cmlhbC1lcmEtZW5kZWQtYW5kLXNvLXdpbGwtdGhlLWRpZ2l0YWwtZXJhPC9hPlxyXG48L3A+XHJcblxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjMuIFRob21hcyBPc2JlcnQgTW9yZGF1bnRgXHJcblxyXG4gIHZhciBibG9ncG9zdDggPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkFkdmFuY2VzIGluIGNvbXB1dGVyIHNjaWVuY2UgYW5kIGRhdGEgcmVzZWFyY2ggZm9sbG93IHRoZSBwYXRoIG9mIHRoZSB0b29scyB0aGF0IHBhdmUgYSBkZXZlbG9wZXIncyBwYXRoOiBUaGUgdG9vbHMgbWFrZSB0aGUgd29ya2VyLCBhbmQgdGhlcmVmb3JlIHRoZSB3b3JrLiBGb3IgZXhhbXBsZSwgYW55IG9mIHRoZSBJbmR1c3RyaWFsIFJldm9sdXRpb25zIGxlYXBlZCBmb3J3YXJkIHdpdGggZXZlcnkgbmV3IHRvb2wuIDxpPk5vdywgQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2UgcmVzZWFyY2ggYW5kIGRlc2lnbiAgbHVyY2hlcyBmb3J3YXJkIGJ5IHRoZSB0b29saW5nLCBidXQgaW4gYSBuZXcgZmFzaGlvbjogT3BlbiBzb3VyY2UgdG9vbHMgb3duZWQgYW5kIG9wZXJhdGVkIGJ5IHRoZSBjb21tdW5pdHksIHRoZSB3b3JrIGJ5IGFuZCBmb3IgYW55IGNvbW11bml0eS48L2k+XHJcbjwvcD5cclxuPHA+IE5ldXJhbCBuZXR3b3JrIHRvb2xzIGxpa2UgVGVuc29yRmxvdy5qcywgYSBcIkphdmFTY3JpcHQgbGlicmFyeSBmb3IgdHJhaW5pbmcgYW5kIGRlcGxveWluZyBNYWNoaW5lIExlYXJuaW5nIG1vZGVscyBpbiB0aGUgYnJvd3NlciBhbmQgb24gTm9kZS5qc1wiIDxzdXA+MTwvc3VwPiAgYWxvbmcgd2l0aCBvdGhlciBwcm9ncmFtbWluZy1saWJyYXJ5IGZyYW1ld29ya3MsIGFic3RyYWN0IGF3YXkgYSBsYXllciBvZiB0aGUgdmlzaWJsZSBtZWNoYW5pY3MuIE9uIHRoZSBvbmUgaGFuZCwgaXQgaXMgdGhlIGRlbW9jcmF0aXphdGlvbiBvZiBjdXR0aW5nLWVkZ2UgdGVjaG5vbG9neSwgZm9ybWVybHkgc2lsb2VkIGFwYXJ0IGFuZCB1bmRlciBnb3Zlcm5tZW50LCBjb3Jwb3JhdGUgb3IgdW5pdmVyc2l0eSBjb250cm9scy4gPC9wPlxyXG48cD5cclxuVGhlIGdlbmllIGlzIGRlZmluaXRlbHkgb3V0IG9mIHRoZSBib3R0bGUsIHlldCBoZSBvciBzaGUgaXMgbm93IGF0IHRoZSBrZXlib2FyZHMgYWNyb3NzIHRoZSBnbG9iZS4gVGhpcyBoYXMgYSBjbGVhciBlZmZlY3QgaW4gYnJpbmdpbmcgdGVjaG5vbG9naWNhbCBpbm5vdmF0aW9uIHRvIHRoZSBjb21tdW5pdHksIHRvIHRoZSBjb2ZmZWVzaG9wcyBhbmQgbWVldC11cCBncm91cHMsIGluc3RlYWQgb2YgY2xlYXJseSBkZWZpbmVkLCBidXJlYXVjcmF0aWNhbGx5LWRpcmVjdGVkIHJlc2VhcmNoIGVuZHMuIDwvcD5cclxuPHA+VGhlcmVmb3JlLCAgYm9vdHN0cmFwcGluZyBvcGVuLXNvdXJjZSBwcm9qZWN0cyBicmluZ3MgdGhlIGNvbW11bml0eSB0byB0aGUgZm9yZWZyb250IG9mIHRlY2hub2xvZ2ljYWwgaW5ub3ZhdGlvbiEgVGhvdWdoIHRoZSBjb21tb24gbW9iaWxlIGFwcCBoYXMgZ3Jvd24gZmFtaWxpYXIgZm9yIGNoYW5naW5nIGxhbmRzY2FwZXMsIHRob3NlIGFwcHMgY2hpZWZseSBsZXZlcmFnZSB0aGUgc29jaWFsIG5ldHdvcmsgKGxpbmtzKSBvZiBmcmllbmRzIGFuZCBwcm9mZXNzaW9uYWxzOyB3aGlsZSB0aGUgY29tbW9uLXVzZSBzcHJlYWQgb2YgbWFjaGluZS1sZWFybmluZyByZXNlYXJjaCBwcm92aWRlcyBsZXZlcmFnZSB0byB0aGUgYWN0dWFsIHdvcmsgKG5vZGVzKSBvZiBwcm9ncmVzczwvcD5cclxuPHA+VGhlcmVmb3JlLCB0aGUgdG9vbHMgcHJvdmlkZSBvbmUgZGltZW5zaW9uIG9mIEEuSS4ncyBwYXRoLCB3aGlsZSB0aGUgZGVtb2NyYXRpemVkIGRpc3RyaWJ1dGlvbiBvZiB0b29scyBhY3Jvc3Mgc29jaWFsIG5ldHdvcmtzIHByb3ZpZGVzIGEgc2Vjb25kIGRpbWVuc2lvbmFsIHBhdGguIFRoaXMgYWx0ZXJzIHRoZSBBLkkuIGV2b2x1dGlvbiBpbiB0aGUgbG9uZy10ZXJtLCBieSBtZWFucyBvZiBzaG9ydC10ZXJtIGFuZCBmcmVxdWVudCB0b29saW5nIHJldm9sdXRpb25zLiAgIDwvcD5cclxuYDtcclxuICB2YXIgYmxvZ2NpdGU4ID0gYFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCIgaHR0cHM6Ly9qcy50ZW5zb3JmbG93Lm9yZy9cIiAgIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL2pzLnRlbnNvcmZsb3cub3JnLzwvYT5cclxuPC9wPiAgIFxyXG5gO1xyXG4gIHZhciBibG9ncG9zdDcgPSBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5QYW5pYyBhbmQgYW54aWV0eSBjb3ZlciB0aGUgU25hcGNoYXQgY291bnRyaWVzIGFjcm9zcyBmYXItZmx1bmcgbG9jYWxlcyBmcm9tIExhdHZpYSB0byBEZW52ZXIgdG8gU3BhaW4tLTwvaT5hbmQgaW4gb25lIGNhc2UgYmxpZ2h0aW5nIHRoZSBlbnRpcmUgaXNsYW5kIG9mIHRoZSBVbml0ZWQgS2luZ2RvbS4uLjwvaT48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5Tb21lIHVzZXJzIHdlbnQgdG8gVHdpdHRlciBhbmQgc2hhcmVkIHRoZWlyIGZydXN0cmF0aW9uLlxyXG5cIkkndmUgYmVlbiBzZW5kaW5nIHBlb3BsZSBhYnVzZSBvbiBzbmFwY2hhdCBmb3Igbm90IHJlcGx5aW5nIHRvIG1lIG9ubHkgdG8gZGlzY292ZXIgaXRzIGRvd24uIE9vcHM/XCIgb25lIHVzZXIgdHdlZXRlZC48YnIgLz48YnIgLz5cclxuXCJTbmFwY2hhdCBqdXN0IHdlbnQgZG93bi4gSSBjYW4gbGl0ZXJhbGx5IGZlZWwgdGhlIHBhbmljIG9mIGEgdGhvdXNhbmQgZ2VuZXJhdGlvbnMgaW4gbXkgYm9uZXMuICNzbmFwY2hhdCxcIiBhbm90aGVyIHVzZXIgcG9zdGVkLlxyXG5TbmFwY2hhdCBjdXJyZW50bHkgaGFzIDE2NiBtaWxsaW9uIHVzZXJzIGdsb2JhbGx5LiA8c3VwPjI8L3N1cD5cclxuPC9wPlxyXG48cD4gQSBjaHJvbmljIHRlY2huaWNhbCBwcm9ibGVtIGJlZm9yZSBNYXkgMjAxOCB3aGVuIFNuYXBDcmFzaCB3ZW50IHB1YmxpYyAgIGRhdGluZyB0byBPY3RvYmVyLiA8c3VwPjE8L3N1cD4gLS0gc2NhbGFiaWxpdHkgY2hhbGxlbmdlcyBzdHJpa2UgYWdhaW4hPC9wPiBcclxuPGltZyBzcmM9XCJkaXN0L2ltZy9zbmFwY2hhdC5qcGdcIiB3aWR0aD1cIjM1MFwiIGNsYXNzPVwiem9vbVwiIC8+PGJyIC8+PGJyIC8+XHJcbjxwPkJ1dCBpbnF1aXJpbmcgbWluZHMgd2FudCB0byBrbm93LCA8aT5XaGF0J3MgdGhlIFN0b3J5IHdpdGggU25hcGNoYXQ/IDwvaT5Ob3QgdG8gbWVudGlvbiB0aGUgQ29uc3BpcmFjeSBUaGVvcmlzdHMgdGhhdCBibGFtZSBTbmFwY2hhdCdzIGRldm90aW9uIHRvIEFkdmVydGlzZXJzLS10b28gbWFueSBkaXN0cmFjdGlvbnM/PC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbltTbmFwY2hhdF0gdHdlZXRlZDog4oCcU29tZSBTbmFwY2hhdHRlcnMgYXJlIGhhdmluZyB0cm91YmxlIHdpdGggdGhlIGFwcC4gV2XigJlyZSBhd2FyZSBvZiB0aGUgaXNzdWUgYW5kIHdvcmtpbmcgb24gYSBmaXghIFdlIHJlY29tbWVuZCBzdGF5aW5nIGxvZ2dlZCBpbnRvIHlvdXIgYWNjb3VudC7igJ1cclxuPGJyIC8+PGJyIC8+XHJcblNuYXBjaGF0IHJlY2VudGx5IGNvbmZpcm1lZCB0aGF0IGl0IGlzIHRlc3Rpbmcgc2l4LXNlY29uZCBsb25nIGFkcyBpbiBTaG93cyBvbiBpdHMgRGlzY292ZXIgc2VjdGlvbiB0aGF0IHdvbuKAmXQgYnVkZ2Ugbm8gbWF0dGVyIGhvdyBtYW55IHRpbWVzIGEgdXNlciB0cmllcyB0byB0YXAgdG8gc2tpcCB0aGVtLjxiciAvPjxiciAvPlxyXG5cclxuVGhpcyBkZXZlbG9wbWVudCBoYXMgYmVlbiBjb21pbmcgZm9yIHNvbWUgdGltZSBhcyBTbmFwY2hhdCBsb29rcyB0byBwbGFjYXRlIGFkdmVydGlzZXJzIHdobyBoYXZlIGdyb3duIGZydXN0cmF0ZWQgYnkgdXNlcnMgd2hvLCBvbiBhdmVyYWdlLCBvbmx5IHN0YXkgb24gYW4gYWQgZm9yIHR3byBzZWNvbmRzIGJlZm9yZSBza2lwcGluZy48L3A+IFxyXG48cD5FdmVyeSBraW5kIG9mIFNlcnZlciBtYWxmdW5jdGlvbiBwYWxlcyBpbiBjb21wYXJpc29uIHRvIHRoZSBBZmZvcmRhYmxlIEhlYWx0aGNhcmUgQWN0IHdlYi1hcHAncyBhYnlzbWFsIGZpcnN0IGZldyBtb250aHMuPGk+IEdldCBXZWxsIFNvb24sIFNuYXBjaGF0LS15b3UncmUgYnJlYWtpbmcgb3VyIGhlYXJ0ITwvaT48L3A+YDtcclxuICB2YXIgYmxvZ2NpdGU3ID0gYFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCIgaHR0cHM6Ly93d3cuaW5kZXBlbmRlbnQuY28udWsvbGlmZS1zdHlsZS9nYWRnZXRzLWFuZC10ZWNoL3NuYXBjaGF0LWRvd24tbm90LXdvcmtpbmctYW5kcm9pZC1icm9rZW4tbWVzc2FnZS1zbmFwLWluYy1oZWxwLWE4NDQzMjM2Lmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL3d3dy5pbmRlcGVuZGVudC5jby51ay9saWZlLXN0eWxlL2dhZGdldHMtYW5kLXRlY2gvc25hcGNoYXQtZG93bi1ub3Qtd29ya2luZy1hbmRyb2lkLWJyb2tlbi1tZXNzYWdlLXNuYXAtaW5jLWhlbHAtYTg0NDMyMzYuaHRtbDwvYT5cclxuPC9wPiAgICBcclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cIiBodHRwOi8vd3d3LnRyaWJ1bmVpbmRpYS5jb20vbmV3cy9zY2llbmNlLXRlY2hub2xvZ3kvc25hcGNoYXQtb3V0YWdlLWhpdHMtdXNlcnMtZ2xvYmFsbHkvNDgwMDY4Lmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPiBodHRwOi8vd3d3LnRyaWJ1bmVpbmRpYS5jb20vbmV3cy9zY2llbmNlLXRlY2hub2xvZ3kvc25hcGNoYXQtb3V0YWdlLWhpdHMtdXNlcnMtZ2xvYmFsbHkvNDgwMDY4Lmh0bWw8L2E+XHJcbjwvcD4gICAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vb3V0YWdlLnJlcG9ydC9zbmFwY2hhdFwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vb3V0YWdlLnJlcG9ydC9zbmFwY2hhdDwvYT48L3A+XHJcbiBgO1xyXG4gIHZhciBibG9ncG9zdDYgPSBgXHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+PHN1cD4wPC9zdXA+PHN0cm9uZz48c21hbGw+XHJcbiBUaGUgdGVybSDigJxleHRyb3B5LOKAnSBjb2luZWQgaW4gMTk2NywgaXMgZ2VuZXJhbGx5IHVzZWQgdG8gZGVzY3JpYmUgbGlmZeKAmXMgY2FwYWNpdHkgdG8gcmV2ZXJzZSB0aGUgc3ByZWFkIG9mIGVudHJvcHkgYWNyb3NzIHNwYWNlIGFuZCB0aW1lLiA8L3NtYWxsPjwvc3Ryb25nPjxzdXA+MTwvc3VwPlxyXG4gPC9wPlxyXG4gPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlxyXG4gUGhpbG9zb3BoaWVzIG9mIEEuSS4gcmFuZ2UgZnJvbSB0aGUgQWxvb2YgdG8gQWxhcm1lZCwgZnJvbSBQdW5jaC1kcnVuayBPcHRpbWlzbSB0byBIYXJyb3dpbmcgUGFyYW5vaWE6IEEgZmV3IHZhbnRhZ2UgcG9pbnRzIGZyb20gYSBMZWdhY3kgTmV3IFlvcmtlcjo8L3A+XHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiBMYXN0IHN1bW1lciwgT3JlbiBFdHppb25pLCB0aGUgQy5FLk8uIG9mIHRoZSBBbGxlbiBJbnN0aXR1dGUgZm9yIEFydGlmaWNpYWwgSW50ZWxsaWdlbmNlLCBpbiBTZWF0dGxlLCByZWZlcnJlZCB0byB0aGUgZmVhciBvZiBtYWNoaW5lIGludGVsbGlnZW5jZSBhcyBhIOKAnEZyYW5rZW5zdGVpbiBjb21wbGV4LuKAnSBBbm90aGVyIGxlYWRpbmcgcmVzZWFyY2hlciBkZWNsYXJlZCwg4oCcSSBkb27igJl0IHdvcnJ5IGFib3V0IHRoYXQgZm9yIHRoZSBzYW1lIHJlYXNvbiBJIGRvbuKAmXQgd29ycnkgYWJvdXQgb3ZlcnBvcHVsYXRpb24gb24gTWFycy7igJ08c3VwPjE8L3N1cD48L3A+XHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiBKYXJvbiBMYW5pZXIsIGEgTWljcm9zb2Z0IHJlc2VhcmNoZXIgYW5kIHRlY2ggY29tbWVudGF0b3IsIHRvbGQgbWUgdGhhdCBldmVuIGZyYW1pbmcgdGhlIGRpZmZlcmluZyB2aWV3cyBhcyBhIGRlYmF0ZSB3YXMgYSBtaXN0YWtlLiDigJxUaGlzIGlzIG5vdCBhbiBob25lc3QgY29udmVyc2F0aW9uLOKAnSBoZSBzYWlkLiDigJxQZW9wbGUgdGhpbmsgaXQgaXMgYWJvdXQgdGVjaG5vbG9neSwgYnV0IGl0IGlzIHJlYWxseSBhYm91dCByZWxpZ2lvbiwgcGVvcGxlIHR1cm5pbmcgdG8gbWV0YXBoeXNpY3MgdG8gY29wZSB3aXRoIHRoZSBodW1hbiBjb25kaXRpb24uIFRoZXkgaGF2ZSBhIHdheSBvZiBkcmFtYXRpemluZyB0aGVpciBiZWxpZWZzIHdpdGggYW4gZW5kLW9mLWRheXMgc2NlbmFyaW/igJRhbmQgb25lIGRvZXMgbm90IHdhbnQgdG8gY3JpdGljaXplIG90aGVyIHBlb3BsZeKAmXMgcmVsaWdpb25zLuKAnVxyXG4gPHN1cD4xPC9zdXA+PC9wPlxyXG4gPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gQm9zdHJvbSBoYWQgbGl0dGxlIGludGVyZXN0IGluIGNvbnZlbnRpb25hbCBwaGlsb3NvcGh54oCUbm90IGxlYXN0IGJlY2F1c2UgaGUgZXhwZWN0ZWQgdGhhdCBzdXBlcmludGVsbGlnZW50IG1pbmRzLCB3aGV0aGVyIGJpb2xvZ2ljYWxseSBlbmhhbmNlZCBvciBkaWdpdGFsLCB3b3VsZCBtYWtlIGl0IG9ic29sZXRlLiDigJxTdXBwb3NlIHlvdSBoYWQgdG8gYnVpbGQgYSBuZXcgc3Vid2F5IGxpbmUsIGFuZCBpdCB3YXMgdGhpcyBncmFuZCB0cmFucy1nZW5lcmF0aW9uYWwgZW50ZXJwcmlzZSB0aGF0IGh1bWFuaXR5IHdhcyBlbmdhZ2VkIGluLCBhbmQgZXZlcnlib2R5IGhhZCBhIGxpdHRsZSByb2xlLOKAnSBoZSB0b2xkIG1lLiDigJxTbyB5b3UgaGF2ZSBhIGxpdHRsZSBzaG92ZWwuIEJ1dCBpZiB5b3Uga25vdyB0aGF0IGEgZ2lhbnQgYnVsbGRvemVyIHdpbGwgYXJyaXZlIG9uIHRoZSBzY2VuZSB0b21vcnJvdywgdGhlbiBkb2VzIGl0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHNwZW5kIHlvdXIgdGltZSB0b2RheSBkaWdnaW5nIHRoZSBiaWcgaG9sZSB3aXRoIHlvdXIgc2hvdmVsPyBNYXliZSB0aGVyZSBpcyBzb21ldGhpbmcgZWxzZSB5b3UgY291bGQgZG8gd2l0aCB5b3VyIHRpbWUuIE1heWJlIHlvdSBjb3VsZCBwdXQgdXAgYSBzaWducG9zdCBmb3IgdGhlIGdyZWF0IHNob3ZlbCwgc28gaXQgd2lsbCBzdGFydCBkaWdnaW5nIGluIHRoZSByaWdodCBwbGFjZS7igJ0gSGUgY2FtZSB0byBiZWxpZXZlIHRoYXQgYSBrZXkgcm9sZSBvZiB0aGUgcGhpbG9zb3BoZXIgaW4gbW9kZXJuIHNvY2lldHkgd2FzIHRvIGFjcXVpcmUgdGhlIGtub3dsZWRnZSBvZiBhIHBvbHltYXRoLCB0aGVuIHVzZSBpdCB0byBoZWxwIGd1aWRlIGh1bWFuaXR5IHRvIGl0cyBuZXh0IHBoYXNlIG9mIGV4aXN0ZW5jZeKAlGEgZGlzY2lwbGluZSB0aGF0IGhlIGNhbGxlZCDigJx0aGUgcGhpbG9zb3BoeSBvZiB0ZWNobm9sb2dpY2FsIHByZWRpY3Rpb24u4oCdIFxyXG4gPHN1cD4xPC9zdXA+PC9wPlxyXG4gPHA+QXQgdGhlIGVuZCBvZiB0aGUgZGF5LCB3ZSBjYW4gYXNrIFwiYXJlIHdlIHRoZXJlIHlldD9cIiBvdmVyIGFnYWluLCBidXQgYSBtb3JlIHBvaW50ZWQgcXVlcnkgYXNrcyBub3QgYWJvdXQgdGltZSwgYnV0IGFib3V0IHBsYWNlOiBcIkl0IG1heSBiZSBoaWdobHkgdW5wcmVkaWN0YWJsZSB3aGVyZSBhIHRyYXZlbGxlciB3aWxsIGJlIG9uZSBob3VyIGFmdGVyIHRoZSBzdGFydCBvZiBoZXIgam91cm5leSwgeWV0IHByZWRpY3RhYmxlIHRoYXQgYWZ0ZXIgZml2ZSBob3VycyBzaGUgd2lsbCBiZSBhdCBoZXIgZGVzdGluYXRpb24u4oCdXHJcbiBgO1xyXG4gIHZhciBibG9nY2l0ZTYgPSBgXHJcbiBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiIGh0dHBzOi8vd3d3Lm5ld3lvcmtlci5jb20vbWFnYXppbmUvMjAxNS8xMS8yMy9kb29tc2RheS1pbnZlbnRpb24tYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2Utbmljay1ib3N0cm9tXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly93d3cubmV3eW9ya2VyLmNvbS9tYWdhemluZS8yMDE1LzExLzIzL2Rvb21zZGF5LWludmVudGlvbi1hcnRpZmljaWFsLWludGVsbGlnZW5jZS1uaWNrLWJvc3Ryb208L2E+XHJcbjwvcD4gICAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vbmlja2Jvc3Ryb20uY29tL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vbmlja2Jvc3Ryb20uY29tLzwvYT5cclxuPC9wPiAgXHJcblxyXG4gYDtcclxuICB2YXIgYmxvZ3Bvc3Q1ID0gYFxyXG4gPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkl0IHR1cm5zIG91dCB0aGF0IGRhdGEgaXMgdW5ldmVubHkgZGlzdHJpYnV0ZWQgYmV0d2VlbiBzZWN0b3JzLCBsZWFkaW5nIHRvIG1vbm9wb2xlcyBvZiBkb21pbmFuY2U6IEFmdGVyIGFsbCwgd2hvIGNvbnRyb2xzIHRoZSBkYXRhLCBjb250cm9scyB0aGUgY29tbWFuZGluZyBoZWlnaHRzLiBBbmQgeWV0LCB0aGUgdmVyeSBzdWJzdGFuY2Ugb2YgQmlnIERhdGEgZGVyaXZlcyBmcm9tIGFuZCBiZWxvbmdzIHByZWNpc2VseSB0byAgaW5kaXZpZHVhbHMsIGFnZ3JlZ2F0ZWQsIHRoYXQgY2hlY2tlZCBcIkFncmVlXCIgdG8gYSBnaXZlbiBhcHAncyBQcml2YWN5IFBvbGljeSwgZnJvbSBhIGdpdmVuIEludGVybmV0IFNlcnZpY2UgUHJvdmlkZXIsIHVzaW5nIGEgZ2l2ZW4gQnJvd3NlciAuLi4uPC9wPlxyXG4gPHA+Tm93IHRoYXQgcGh5c2ljYWwgcHJvZHVjdHMgbG9zZSByZWxhdGl2ZSB2YWx1ZSBmb3IgbWFueSByZWFzb25zIChub3QgdG8gbWVudGlvbiBlYXN5IGRvd25sb2FkcyBmb3IgMy1EIHByaW50aW5nKSwgYW5kIGFsdGVybmF0ZWx5PGk+IGluZm9ybWF0aW9uYWwgZGF0YSBwcm9kdWN0cyBnYWluIHZhbHVlIGluIHRoZSBkaWdpdGFsIGVjb25vbXk6IGhlbmNlIHRoZSBwcm9ibGVtIG9mIGFsbG9jYXRpbmcgdGhlIHZhbHVlIG9mIHBlcnNvbmFsIGRhdGEgYmFjayB0byB0aGUgcGVyc29uIDwvaT4uLi4gVG8gdGhpcywgdGhlIENhbmFkaWFuIEEuSS4gTWFmaWEgY2hpbWVzIGluOjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+QSBwZXJzaXN0ZW50IGNoYWxsZW5nZSBmb3IgRWxlbWVudCBpcyB0aGUgZGVhcnRoIG9mIGdvb2QgZGF0YS4gVGhlIHNpbXBsZXN0IHdheSB0byB0cmFpbiBBLkkuIG1vZGVscyBpcyB0byBmZWVkIHRoZW0gbG90cyBvZiB3ZWxsLWxhYmVsZWQgZXhhbXBsZXPigJR0aG91c2FuZHMgb2YgY2F0IGltYWdlcywgb3IgdHJhbnNsYXRlZCB0ZXh0cy4gQmlnIFRlY2ggaGFzIGFjY2VzcyB0byBzbyBtdWNoIGNvbnN1bWVyLW9yaWVudGVkIGRhdGEgdGhhdCBpdOKAmXMgYWxsIGJ1dCBpbXBvc3NpYmxlIGZvciBhbnlvbmUgZWxzZSB0byBjb21wZXRlIGF0IGJ1aWxkaW5nIGxhcmdlLXNjYWxlIGNvbnN1bWVyIHByb2R1Y3RzLiBCdXQgYnVzaW5lc3NlcywgZ292ZXJubWVudHMsIGFuZCBvdGhlciBpbnN0aXR1dGlvbnMgb3duIGh1Z2UgYW1vdW50cyBvZiBwcml2YXRlIGluZm9ybWF0aW9uLiBFdmVuIGlmIGEgY29ycG9yYXRpb24gdXNlcyBHb29nbGUgZm9yIGVtYWlsLCBvciBBbWF6b24gZm9yIGNsb3VkIGNvbXB1dGluZywgaXQgZG9lc27igJl0IHR5cGljYWxseSBsZXQgdGhvc2UgdmVuZG9ycyBhY2Nlc3MgaXRzIGludGVybmFsIGRhdGFiYXNlcyBhYm91dCBlcXVpcG1lbnQgbWFsZnVuY3Rpb25zLCBvciBzYWxlcyB0cmVuZHMsIG9yIHByb2Nlc3NpbmcgdGltZXMuIDxiciAvPlxyXG4gIDxiciAvPlRoYXTigJlzIHdoZXJlIEVsZW1lbnQgc2VlcyBhbiBvcGVuaW5nLiBJZiBpdCBjYW4gYWNjZXNzIHNldmVyYWwgY29tcGFuaWVz4oCZIGRhdGFiYXNlcyBvZiwgc2F5LCBwcm9kdWN0IGltYWdlcywgaXQgY2FuIHRoZW7igJR3aXRoIGN1c3RvbWVyc+KAmSBwZXJtaXNzaW9u4oCUdXNlIGFsbCBvZiB0aGF0IGluZm9ybWF0aW9uIHRvIGJ1aWxkIGEgYmV0dGVyIHByb2R1Y3QtcmVjb21tZW5kYXRpb24gZW5naW5lLiBCaWcgVGVjaCBjb21wYW5pZXMgYXJlIGFsc28gc2VsbGluZyBBLkkuIHByb2R1Y3RzIGFuZCBzZXJ2aWNlcyB0byBidXNpbmVzc2Vz4oCUSUJNIGlzIHNxdWFyZWx5IGZvY3VzZWQgb24gaXTigJRidXQgbm8gb25lIGhhcyBjb3JuZXJlZCB0aGUgbWFya2V0LiBFbGVtZW504oCZcyBiZXQgaXMgdGhhdCBpZiBpdCBjYW4gZW1iZWQgaXRzZWxmIGluIHRoZXNlIG9yZ2FuaXphdGlvbnMsIGl0IGNhbiBzZWN1cmUgYSBjb3Jwb3JhdGUgZGF0YSBhZHZhbnRhZ2Ugc2ltaWxhciB0byB0aGUgb25lIEJpZyBUZWNoIGhhcyBpbiBjb25zdW1lciBwcm9kdWN0cy48c3VwPjEuPC9zdXA+PC9wPlxyXG4gIDxwPlxyXG4gICA8cD5TbyB3aWxsIHRoaXMga2luZCBvZiBkYXRhIGRlbW9jcmF0aXphdGlvbiB3b3JrPyBOb3Qgb25seSBzbywgYnV0IHRoZSBDYW1icmlkZ2UgQW5hbHl0aWNhIGZpYXNjbyBvbmx5IGJyaWVmbHkgYXdha2VuZWQgcHVibGljIGF0dGVudGlvbiB0byB0aGUgZGVlcCBzY2llbmNlIHVuZGVybHlpbmcgZWFjaCBvZiBvdXIgXCJvbmxpbmUgZGlnaXRhbCBzaWduYXR1cmVzXCIgLi4uIHRoZSByYWNlIGlzIG9uIGFtb25nIHRoZSBUZWNoIEdpYW50cyB0byB1c2UgQS5JLiB0byB1bmRlcnN0YW5kIG91ciBsaXZlcywgb3VyIGtleXN0cm9rZXMsIG91ciBidXlpbmcgcHJlZmVyZW5jZXMgYmV0dGVyIHRoYW4gd2UgdW5kZXJzdGFuZC4gQW5kIGluIHR1cm4sIHByb3ZpZGUgYSBncmVhdCB1dGlsaXR5LCBhbmQgd2luIG91ciBmaW5hbmNpYWwgYWxsZWdpYW5jZSFcclxuYDtcclxuXHJcblxyXG4gIHZhciBibG9nY2l0ZTUgPSBgXHJcblxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJodHRwOi8vZm9ydHVuZS5jb20vbG9uZ2Zvcm0vZWxlbWVudC1haS1zdGFydHVwLXRlY2gvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vZm9ydHVuZS5jb20vbG9uZ2Zvcm0vZWxlbWVudC1haS1zdGFydHVwLXRlY2gvPC9hPlxyXG48L3A+ICAgIFxyXG5cclxuYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0NCA9IGAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkluIHRoZSBNb2Rlcm4gRmllbGQgb2YgQXJ0aWlmaWNpYWwgSW50ZWxsaWdlbmNlLCBhbGwgcm9hZHMgc2VlbSB0byBsZWFkIHRvIHRocmVlIHJlc2VhcmNoZXJzIHdpdGggdGllcyB0byBDYW5hZGlhbiB1bml2ZXJzaXRpZXMuIFRoZSBmaXJzdCwgR2VvZmZyZXkgSGludG9uLCBhIDcwLXllYXItb2xkIEJyaXQgd2hvIHRlYWNoZXMgYXQgdGhlIFVuaXZlcnNpdHkgb2YgVG9yb250bywgcGlvbmVlcmVkIHRoZSBzdWJmaWVsZCBjYWxsZWQgZGVlcCBsZWFybmluZyB0aGF0IGhhcyBiZWNvbWUgc3lub255bW91cyB3aXRoIEEuSS4gVGhlIHNlY29uZCwgYSA1Ny15ZWFyLW9sZCBGcmVuY2htYW4gbmFtZWQgWWFubiBMZUN1biwgd29ya2VkIGluIEhpbnRvbuKAmXMgbGFiIGluIHRoZSAxOTgwcyBhbmQgbm93IHRlYWNoZXMgYXQgTmV3IFlvcmsgVW5pdmVyc2l0eS4gVGhlIHRoaXJkLCA1NC15ZWFyLW9sZCBZb3NodWEgQmVuZ2lvLCB3YXMgYm9ybiBpbiBQYXJpcywgcmFpc2VkIGluIE1vbnRyZWFsLCBhbmQgbm93IHRlYWNoZXMgYXQgdGhlIFVuaXZlcnNpdHkgb2YgTW9udHJlYWwuIFRoZSB0aHJlZSBtZW4gYXJlIGNsb3NlIGZyaWVuZHMgYW5kIGNvbGxhYm9yYXRvcnMsIHNvIG11Y2ggc28gdGhhdCBwZW9wbGUgaW4gdGhlIEEuSS4gY29tbXVuaXR5IGNhbGwgdGhlbSB0aGUgQ2FuYWRpYW4gTWFmaWEuPHN1cD4xLjwvc3VwPjwvcD5cclxuXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkEgY3VyaW91cyBwYXRoIG9mIHB1bmN0dWF0ZWQgYWR2YW5jZW1lbnQgZHVlIHRvIGluc3VmZmljaWVudCBtZW1vcnkgYW5kIGNwdSBwb3dlciwgY2hhcmFjdGVyaXplZCBsYXRlIDIwdGggY2VudHVyeSBBLkkuIGRldmVsb3BtZW50OiBEZWVwIExlYXJuaW5nIGRldmVsb3BtZW50ICAgbHVsbHMgaW50ZXJydXB0ZWQgYnkgcmFwaWQgZ3Jvd3RoIHdpdGggZWFjaCBzdWNjZXNzaXZlIHRlY2hub2xvZ2ljYWwgcGVyaW9kLlxyXG4gICBUb3JvbnRvJ3MgRHIuIEdlb2ZmIEhpbnRvbidzIHNpbmdsZS1sYXllcmVkIEEuSS4gYWxnb3JpdGhtIGdhaW5lZCBicmllZiBmYW1lLCB5ZXQgQS5JLiByZXNlYXJjaCBubyBsb25nZXIgYWR2YW5jZWQgIGZvciB0ZW4geWVhcnMuIDwvcD5cclxuICAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gICBQcm9ncmFtcyB0aGF0IHBlcmZvcm1lZCB3ZWxsIGluIHRoZSBsYWJvcmF0b3J5IHdlcmUgdXNlbGVzcyBpbiBldmVyeWRheSBzaXR1YXRpb25zOyBhIHNpbXBsZSBhY3QgbGlrZSBwaWNraW5nIHVwIGEgYmFsbCB0dXJuZWQgb3V0IHRvIHJlcXVpcmUgYW4gb3ZlcndoZWxtaW5nIG51bWJlciBvZiBjb21wdXRhdGlvbnMuXHJcblxyXG5UaGUgcmVzZWFyY2ggZmVsbCBpbnRvIHRoZSBmaXJzdCBvZiBzZXZlcmFsIOKAnEEuSS4gd2ludGVycy7igJ0gQXMgQm9zdHJvbSBub3RlcyBpbiBoaXMgYm9vaywg4oCcQW1vbmcgYWNhZGVtaWNzIGFuZCB0aGVpciBmdW5kZXJzLCDigJhBLkku4oCZIGJlY2FtZSBhbiB1bndhbnRlZCBlcGl0aGV0LuKAnTxzdXA+MTwvc3VwPiBcclxuPC9wPlxyXG48cD5cclxuVGhlbiBjYW1lIHRoZSBHUFUgd2l0aCBBbGV4IEtocmVzaGluc2tpJ3MgZmFtb3VzIGltYWdlLXJlY29nbml0aW9uIGNvbXBldGl0aW9uLXdpbm5pbmcgcGVubWFuc2hpcCBkZXRlY3Rvciwgd2hpY2ggbm90YWJseSBpcyBzdGlsbCBpbiB1c2UgYnkgdGhlIGJhbmtpbmcgc3lzdGVtLiBUaGlzIG5vdmVsIHVzZSBvZiB0aGUgR1BVIHRvIGFjY29tcGxpc2ggcGFyYWxsZWwgY2FsY3VsYXRpb25zIHJld3JvdGUgdGhlIHRoZSBBLkkuIGZpZWxkIG92ZXJuaWdodC4gQWxzbyBrbm93biBhcyB0aGUgXCJDYW1icmlhbiBFeHBsb3Npb25cIiwgdGhpcyBldmVudCAoYW5kIHJlYWxseSBqdXN0IHRoZSBhbGdvcml0aG0pIHNldCBvZmYgd2lkZXNwcmVhZCBhZHZhbmNlbWVudHMgaW4gdGhlIHdlZWtzIGFuZCBtb250aHMgZm9sbHdvaW5nLCBsZWFkaW5nIHRvIG5ldyBzcGVjaWF0aW9uIHJhbmdpbmcgZnJvbSB0aGUgQU5OLCBOZXVyYWwgTmV0d29yaywgdG8gYSB3aG9sZSBhbHBoYWJldCBzb3VwIGZyb20gQ29udm9sdXRpb25hbCBOZXVyYWwgTmV0d29ya3MgKENOTikgPGk+dG8gZmFyLXJlYWNoaW5nIG11dGF0aW9ucyBvZiBSZWluZm9yY2VtZW50IExlYXJuaW5nPC9pPi48c3VwPjI8L3N1cD5cclxuICA8L3A+XHJcbiBcclxuICA8cD4gQWxvbmcgd2l0aCBIaW50b24ncyBjbG9zZSBjb2xsYWJvcmF0b3IgdGhyb3VnaG91dCB0aGUgMTk4MCdzIGFuZCA5MCdzLCBEci4gWW9zaHVhIEJlbmdpbyBvZiB0aGUgVW5pdmVyc2l0eSBvZiBNb250ciZlYWN1dGU7YWwsIHRoZSByZXNlYXJjaGVycyByZW1haW4gY29tbWl0dGVkIHRvIGh1bWFuaXR5J3Mgc2VydmljZTo8L3A+XHJcbiAgIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBIaW50b24gbW92ZWQgZnJvbSB0aGUgVS5TLiB0byBDYW5hZGEgaW4gcGFydCBkdWUgdG8gZGlzaWxsdXNpb25tZW50IHdpdGggUmVhZ2FuLWVyYSBwb2xpdGljcyBhbmQgZGlzYXBwcm92YWwgb2YgbWlsaXRhcnkgZnVuZGluZyBvZiBhcnRpZmljaWFsIGludGVsbGlnZW5jZS5bMjJdIEhlIGJlbGlldmVzIHBvbGl0aWNhbCBzeXN0ZW1zIHdpbGwgdXNlIEFJIHRvIFwidGVycm9yaXplIHBlb3BsZVwiLiBIaW50b24gaGFzIHBldGl0aW9uZWQgYWdhaW5zdCBsZXRoYWwgYXV0b25vbW91cyB3ZWFwb25zLiBSZWdhcmRpbmcgZXhpc3RlbnRpYWwgcmlzayBmcm9tIGFydGlmaWNpYWwgaW50ZWxsaWdlbmNlLCBIaW50b24gaGFzIHN0YXRlZCB0aGF0IHN1cGVyaW50ZWxsaWdlbmNlIHNlZW1zIG1vcmUgdGhhbiA1MCB5ZWFycyBhd2F5LCBidXQgd2FybnMgdGhhdCBcInRoZXJlIGlzIG5vdCBhIGdvb2QgdHJhY2sgcmVjb3JkIG9mIGxlc3MgaW50ZWxsaWdlbnQgdGhpbmdzIGNvbnRyb2xsaW5nIHRoaW5ncyBvZiBncmVhdGVyIGludGVsbGlnZW5jZVwiLiBBc2tlZCBpbiAyMDE1IHdoeSBoZSBjb250aW51ZXMgcmVzZWFyY2ggZGVzcGl0ZSBoaXMgZ3JhdmUgY29uY2VybnMsIEhpbnRvbiBzdGF0ZWQgXCJJIGNvdWxkIGdpdmUgeW91IHRoZSB1c3VhbCBhcmd1bWVudHMuIEJ1dCB0aGUgdHJ1dGggaXMgdGhhdCB0aGUgcHJvc3BlY3Qgb2YgZGlzY292ZXJ5IGlzIHRvbyBzd2VldC5cIiBIaW50b24gaGFzIGFsc28gc3RhdGVkIHRoYXQgXCJJdCBpcyB2ZXJ5IGhhcmQgdG8gcHJlZGljdCBiZXlvbmQgZml2ZSB5ZWFyc1wiIHdoYXQgYWR2YW5jZXMgQUkgd2lsbCBicmluZy48c3VwPjE8L3N1cD48L3A+XHJcbiAgXHJcbiAgPHA+V2hpbGUgSGludG9uIGFuZCBjb21wYW55IGFyZW4ndCBuZWNlc3NhcmlseSBNYWhhdG1hIEdhbmRoaS1saWtlLCB0aGVpciBkZXZvdGlvbiB0byBhIHNjaWVuY2UgcHJpb3JpdGl6ZWQgdG8gaHVtYW5pdHknIHNlcnZpY2UgYW5kIGxvbmctdGVybSBiZXN0IGludGVyZXN0LS1mcmVlIGZyb20gbW9uZXRhcnkgb3Igb3RoZXIgaW5mbHVlbmNlIGlzIGFkbWlyYWJsZS4gTm8gd29uZGVyIHRoZWlyIG91dGxvb2sgb24gQS5JLidzIHV0aWxpdHkgaXMgc28gbXVjaCBicmlnaHRlciB0aGFuIHRoYXQgb2YgUGVzc2ltaXN0IEVsb24gTXVzayBhbmQgY29tcGFueSAuLi4gYmFhaC1odW1idWchXHJcbiA8L3A+XHJcbiAgIFxyXG4gXHJcbiAgYDtcclxuXHJcblxyXG4gIHZhciBibG9nY2l0ZTQgPSBgXHJcblxyXG5cclxuICA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJodHRwOi8vZm9ydHVuZS5jb20vbG9uZ2Zvcm0vZWxlbWVudC1haS1zdGFydHVwLXRlY2gvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vZm9ydHVuZS5jb20vbG9uZ2Zvcm0vZWxlbWVudC1haS1zdGFydHVwLXRlY2gvPC9hPlxyXG4gIDwvcD4gICAgXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYmVuemluZ2EuY29tL3ByZXNzcmVsZWFzZXMvMTgvMDYvcDExODQ2OTI0L2pvaW4tYWktcGlvbmVlci1nZW9mZnJleS1oaW50b24taW4tdG9yb250by1hbmQtbGVhcm4tZnJvbS1nbG9iYWwtbGVhZGVcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJlbnppbmdhLmNvbS9wcmVzc3JlbGVhc2VzLzE4LzA2L3AxMTg0NjkyNC9qb2luLWFpLXBpb25lZXItZ2VvZmZyZXktaGludG9uLWluLXRvcm9udG8tYW5kLWxlYXJuLWZyb20tZ2xvYmFsLWxlYWRlPC9hPlxyXG4gIDwvcD4gICAgIFxyXG5cclxuXHJcbiAgYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MyA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkFscmVhZHkgQS5JLiBoYXMgc2hvd24gaXRzIHRydWUgY29sb3JzIGFzIGFuIGlkZWFsIHRvb2wgZm9yIHNvbHZpbmcgZGlzcHJvcG9ydGlvbmF0ZWx5IGxhcmdlLCBjb21wbGV4IGRhdGEgcHJvYmxlbXM6IFNpbWlsYXIgdG8gV2F0c29uJ3MgbWVkaWNhbCByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gbWlsbGlvbnMgb2YgcGFnZXMgcmVhZCwgdGhlIG9mZi10aGUgc2NhbGUgYW1vdW50IG9mIHBhZ2VzIGZyb20gZXZlcnkgdGVjaCBjb21wYW55IGlzIHRoZSBpdGVtIG9mIGludGVyZXN0LiBUaGlzIGlzIHRoZSBmbHVycnktdG8tc25vd3N0b3JtIG9mIFByaXZhY3kgUG9saWNpZXMgc2ltdWx0YW5lb3VzbHkgcmVsZWFzZWQgaW4gcmVzcG9uc2UgdG8gdGhlIEUuVS4ncyBNYXkgMjV0aCBHZW5lcmFsIERhdGEgUHJvdGVjdGlvbiBSZWd1bGF0aW9ucy4gIEluIHJlZmVyZW5jZSB0byBteSBKdW5lIDMwdGggcG9zdCBvbiBBLkkuIHdvcmtwbGFjZSBzb2x1dGlvbnMsIG1vbnRocyBvZiBidXN5LXJlYWRpbmctd29yayBhbGwgZGlzdGlsbGVkIHRvIGEgZnJhY3Rpb24gb2YgdGhlIHRpbWUgdG8gYW5hbHl6ZSB0aG9zZSBwb2xpY2llcy4gR3Vlc3Mgd2hhdD8gVGhlIHJ1bGUtYnJlYWtpbmcgaXMgd2VsbCB1bmRlciB3YXkhPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5SZXNlYXJjaGVycyBmcm9tIHRoZSBFdXJvcGVhbiBVbmlvbiBJbnN0aXR1dGUgaW4gRmxvcmVuY2Ugd29ya2VkIHdpdGggYW4gRVUgY29uc3VtZXIgb3JnYW5pemF0aW9uIHRvIGNyZWF0ZSB0aGUgc29mdHdhcmUuIFRoZXkgdGhlbiB1c2VkIHRoZSBwcm9ncmFtIHRvIGV4YW1pbmUgdGhlIHByaXZhY3kgcG9saWNpZXMgb2YgMTQgbWFqb3IgdGVjaG5vbG9neSBidXNpbmVzc2VzLCBpbmNsdWRpbmcgYnkgQWxwaGFiZXQgSW5jLiwgQW1hem9uLmNvbSBJbmMuLCBhbmQgRmFjZWJvb2sgSW5jLjxiciAvPjxiciAvPlxyXG4gXHJcbiAgVGhleSBmb3VuZCB0aGF0IGEgdGhpcmQgb2YgdGhvc2UgY2xhdXNlcyB3ZXJlIFwicG90ZW50aWFsbHkgcHJvYmxlbWF0aWNcIiBvciBjb250YWluZWQgXCJpbnN1ZmZpY2llbnQgaW5mb3JtYXRpb24uXCIgQW5vdGhlciAxMSBwZXJjZW50IG9mIHRoZSBwb2xpY3nigJlzIHNlbnRlbmNlcyB1c2VkIHVuY2xlYXIgbGFuZ3VhZ2UsIHRoZSBhY2FkZW1pY3Mgc2FpZC4gIFRoZSByZXNlYXJjaGVycyBkaWRu4oCZdCBtYWtlIHB1YmxpYyB3aGljaCBjb21wYW5pZXPigJkgcG9saWNpZXMgdmlvbGF0ZWQgd2hpY2ggcHJvdmlzaW9ucyBvZiB0aGUgbGF3LCBwdWJsaXNoaW5nIG9ubHkgYWdncmVnYXRlIGZpbmRpbmdzIGZvciBhbGwgb2YgdGhlIGNvbXBhbmllcyBpbiB0aGUgc3R1ZHkuPHN1cD4xPC9zdXA+PC9wPlxyXG4gXHJcbiAgPHA+QWhhISA8aT5UaGUgcHJhY3RpY2VzIG9mIFRlY2ggY29tcGFuaWVzJyB1c2Ugb2YgQS5JLiB0byBhbmFseXplIGN1c3RvbWVycycgcHJpdmF0ZSBkYXRhIGlzIHdlbGwta25vd24sIGJ1dCA8c3Ryb25nPndoYXQgZG8gd2UgYWN0dWFsbHkga25vdzwvc3Ryb25nPiBiZXlvbmQganVzdCB0aGF0PyBCZWhpbmQgdGhlIHZlaWwgb2YgY29tbWVyY2lhbCBzZWNyZXQsIG11Y2ggbGVzcyBpcyBrbm93biB0aGFuIGlzIGxlZCBvbiAuLi4gdW50aWwgbm93LiBOb3csIEEuSS4gYmVjb21lcyBpbmNyZWFzaW5nbHkgdXNlZnVsIGFzIGEgdGF0dGxlLXRhbGUhIDwvaT4gU28gYnkgdGhlIHNhbWUgdG9rZW4gdGhhdCB0ZWNoIGNyZWF0ZXMgcHJvYmxlbXMsIFRlY2ggaXMgdGhlIGZpcnN0IHRvIHByb3ZpZGUgYSBzb2x1dGlvbi4gQnV0IEEuSS4gcnVsZS1jaGVja2luZyBzb3VuZHMgZ29vZCBidXQgcmFpc2VzIGFub3RoZXIgcXVlc3Rpb246IFdobyBvd25zLCBvciBjYW4gYWNjZXNzIGJ5IGFsdGVybmF0ZSBtZWFucywgdGhlIHBlcnNvbmFsIGRhdGEgd2UgaGF2ZSBzdHJld24gYWNyb3NzIHRoZSBpbnRlcm5ldD8gQW5kIHdoYXQgcXVhbGl0eSBvZiBkYXRhIGRvZXMgZWFjaCBwYXJ0eSBoYXZlLCBvciBzaGFyZXM/ICA8L3A+XHJcbiAgYDtcclxuXHJcbiAgdmFyIGJsb2djaXRlMyA9IGBcclxuICBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDctMDQvbmV3LWFpLXRpcHMtb2ZmLXJlZ3VsYXRvcnMtdG8tcG9zc2libGUtZXUtZGF0YS1wcml2YWN5LWZhdWx0c1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDctMDQvbmV3LWFpLXRpcHMtb2ZmLXJlZ3VsYXRvcnMtdG8tcG9zc2libGUtZXUtZGF0YS1wcml2YWN5LWZhdWx0czwvYT5cclxuPC9wPiAgICBcclxuICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QyID1cclxuICAgIGBcclxuPHAgY2xhc3M9XCJxdW90ZVwiPjxpPlBvd2VyIGlzIOKAnHZhcmlvdXMgZm9ybXMgb2YgZG9taW5hdGlvbiBhbmQgc3Vib3JkaW5hdGlvbiBhbmQgdGhlIGFzeW1tZXRyaWNhbCBiYWxhbmNlIG9mIGZvcmNlcyB3aGljaCBvcGVyYXRlIHdoZW5ldmVyIGFuZCB3aGVyZXZlciBzb2NpYWwgcmVsYXRpb25zIGV4aXN0LuKAnSAgPC9pPjxzdXA+MTwvc3VwPjxiciAvPjxiciAvPi0tTWljaGVsIEZvdWNhdWx0PC9wPlxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VGllcyBhbmQgYmFsYW5jZXMgb2YgcG93ZXIsIGF0IHRoZWlyIGZ1bmRhbWVudGFsIGNvcmUgYXJlIGNvbnN0YW50bHkgY2hhbmdpbmcgdmFyaWF0aW9ucyBvZiBzeW1tZXRyeSBiZXR3ZWVuIHR3byBhZ2VudHMsIHdoZXRoZXIgdW5pbGF0ZXJhbCBvciBiaWxhdGVyYWw6IFR3byBub2RlcyBpbnRlcmxpbmtlZC4gTWFnbmlmaWVkIGJ5IG92ZXJsYXBwaW5nIG5ldHdvcmtzIGFuZCBsYXllcnMgb2YgcmVsYXRpb25zLCBpdCdzIGVhc3kgdG8gc2VlIHdoeSBsb25nLXN0YW5kaW5nIGluc3RpdHV0aW9ucyBhcmUgaW50ZXJsb2NrZWQsIGZvciBiZXR0ZXIgb3Igd29yc2UgLi4uIENsZWFybHkgdGhlIHRyZW5kIG9mIHR1cmJ1bGVuY2UgYW5kIHBvd2VyIGdyYWJzIHJlYWNoZXMgZmFyIGFuZCB3aWRlOlxyXG4gPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+UG9sYW5kIHdhcyBvbmNlIGEgYmVhY29uIGZvciBjb3VudHJpZXMgc3RydWdnbGluZyB0byBlc2NhcGUgdGhlIHlva2Ugb2YgdGhlIFNvdmlldCBVbmlvbiBhbmQgZW1icmFjZSBXZXN0ZXJuIGRlbW9jcmFjeS4gQnV0IGl0IGlzIG5vdyBpbiBsZWFndWUgd2l0aCBuZWlnaGJvcmluZyBuYXRpb25zLCBsaWtlIEh1bmdhcnksIHdob3NlIGxlYWRlcnMgaGF2ZSB0dXJuZWQgdG8gYXV0aG9yaXRhcmlhbiBtZWFucyB0byB0aWdodGVuIHRoZWlyIGdyaXAgb24gcG93ZXIsIHByZXNlbnRpbmcgYSBncmF2ZSBjaGFsbGVuZ2UgdG8gYSBFdXJvcGVhbiBVbmlvbiBhbHJlYWR5IGdyYXBwbGluZyB3aXRoIG5hdGlvbmFsaXN0LCBwb3B1bGlzdCBhbmQgYW50aS1pbW1pZ3JhbnQgbW92ZW1lbnRzLjxiciAvPjxiciAvPlxyXG5cclxuVGhlIGZvcmNlZCByZXRpcmVtZW50cyBvZiB1cCB0byAyNyBvZiA3MiBTdXByZW1lIENvdXJ0IGp1c3RpY2VzLCBpbmNsdWRpbmcgdGhlIHRvcCBqdWRnZSwgYW5kIHRoZSBjcmVhdGlvbiBvZiBhIGp1ZGljaWFsIGRpc2NpcGxpbmFyeSBjaGFtYmVyIHdlcmUgdGhlIGxhdGVzdCBpbiBhIHNlcmllcyBvZiBzdGVwcyBieSBQb2xhbmTigJlzIHJpZ2h0LXdpbmcgTGF3IGFuZCBKdXN0aWNlIFBhcnR5IHRvIHRha2Ugb3ZlciB0aGUganVzdGljZSBzeXN0ZW0uXHJcbjwvcD5cclxuPHA+QXMgaXQgYWx3YXlzIGlzIGluIGZpbG0sIGl0IGlzIHNvIG5vdyB0aGF0IGRpcmUgc2l0dWF0aW9ucyBoYXZlIHRvIGNhbGwgdXBvbiB0aGUgdHJ1ZSBTdXBlciBNYW4sIFRlY2hub2xvZ3ksIHRvIHNhdmUgdGhlIGRheTogQW5kIHdoYXQgZm9ybSB0aGlzIHRpbWU/IEJsb2NrY2hhaW4gdGVjaG5vbG9neSwgd2hpY2ggcHJlc2VudHMgYSBjcnlwdG9ncmFwaGljIHNvbHV0aW9uIHRvIHRoZSBwcm9ibGVtIG9mIHRydXN0OjxpPiBJZiB0d28gYWdlbnRzIGNhbiBhZ3JlZSBvbiBhIHRoaXJkIGNyeXB0b2dyYXBoaWMgaW50ZXJtZWRpYXJ5LCB0aGVuIGEgYnJpZGdlIG9mIHRydXN0IGlzIGJ1aWx0LS10aGUga2luZCB0aGF0IGluIHRoZSBwYXN0IG9ubHkgaW5zdGl0dXRpb25zIGNvdWxkIGJyb2tlciE8L2k+LiA8L3A+XHJcbjxwPkFuZCBzbywgdHdvIGh1bWFucyBkZXZpc2UgYSBuZXcgbWVhbnMgdG8gZXhjaGFuZ2Ugd2l0aG91dCBkaXNydXB0aW9uLS1hbiBpbmRlc3RydWN0YWJsZSBzY2FmZm9sZGluZyBmaXJtbHkgc2V0IGluIHRoZSBmb3JlZ3JvdW5kIGZyb20gdG9kYXkncyBjcmVha2luZyBhbmQgc3dheWluZyBpbnN0aXR1dGlvbnMuIFNvdW5kcyBnb29kLCBidXQgd2hlcmUncyB0aGUgbXVzaWM/IFRoZXJlIHNlZW1zIHRvIGJlIGEgc3VidGxlIGludGVybHVkZSBiZXR3ZWVuIHRoZSBob25leW1vb24gc3RhZ2Ugb2YgaW52ZXN0aW5nIGFuZCBpbnZlbnRpbmcgbmV3IGN1cnJlbmNpZXMsIGFuZCBsaXR0bGUgaW4gdGhlIHdheSBvZiBtaWNyby10cmFuc2FjdGlvbnMgYW5kIDxpPiB0aGUgYWN0dWFsIDxzdHJvbmc+dXNpbmc8L3N0cm9uZz4gaXQ8L2k+LiBJdCB0YWtlcyBhIGxpdHRsZSB0cnVzdCB0byBtYWtlIHRydXN0LCBzbyB0aGUgZWZmb3J0IGlzIG9uIHRvIG1ha2UgYSBicmlkZ2UgZnJvbSB0aGUgPGk+ZWFybHkgYWRvcHRlcnM8L2k+IHN0YWdlIHRvIDxpPm1haW5zdHJlYW0gYWRvcHRpb248L2k+Li4uPHN1cD4zPC9zdXA+ICBcclxuPC9wPlxyXG5gO1xyXG4gIHZhciBibG9nY2l0ZTIgPVxyXG4gICAgYFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuIDxhIGhyZWY9XCJodHRwczovL2Jvb2tzLmdvb2dsZS5jb20vYm9va3M/aWQ9NnJmUDBINVRTbVlDJnByaW50c2VjPWZyb250Y292ZXJcIiAgIHRhcmdldD1cIl9ibGFua1wiPkZvdWNhdWx0LCBNaWNoZWwuIERpc2NpcGxpbmUgYW5kIHB1bmlzaDogVGhlIGJpcnRoIG9mIHRoZSBwcmlzb24uIFZpbnRhZ2UsIDIwMTIuPC9hPlxyXG48L3A+ICAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDcvMDMvd29ybGQvZXVyb3BlL3BvbGFuZC1zdXByZW1lLWNvdXJ0LXByb3Rlc3QuaHRtbFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOC8wNy8wMy93b3JsZC9ldXJvcGUvcG9sYW5kLXN1cHJlbWUtY291cnQtcHJvdGVzdC5odG1sPC9hPlxyXG48L3A+ICAgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDcvMDEvdGVjaG5vbG9neS9jcnlwdG9jdXJyZW5jeS1yaXBwbGUuaHRtbD9ycmVmPWNvbGxlY3Rpb24lMkZzZWN0aW9uY29sbGVjdGlvbiUyRnRlY2hub2xvZ3kmYWN0aW9uPWNsaWNrJmNvbnRlbnRDb2xsZWN0aW9uPXRlY2hub2xvZ3kmcmVnaW9uPXN0cmVhbSZtb2R1bGU9c3RyZWFtX3VuaXQmdmVyc2lvbj1sYXRlc3QmY29udGVudFBsYWNlbWVudD05JnBndHlwZT1zZWN0aW9uZnJvbnRcIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDcvMDEvdGVjaG5vbG9neS9jcnlwdG9jdXJyZW5jeS1yaXBwbGUuaHRtbDwvYT5cclxuPC9wPiBcclxuXHJcbmA7XHJcblxyXG4gIHZhciBibG9ncG9zdDEgPSBcclxuICAgIGBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+QSB2YXN0IG1ham9yaXR5IG9mIHRoZSBoYWxmLW1pbGxpb24gYm9kaWVzIGluIHRoZSBpbm5lciBhc3Rlcm9pZCBiZWx0IG1heSBpbiBmYWN0IGJlIHNocmFwbmVsIGZyb20gYXMgZmV3IGFzIGZpdmUgcGFyZW50IGJvZGllcyBjYWxsZWQgXCJwbGFuZXRlc2ltYWxzLFwiIHNjaWVudGlzdHMgc2F5LiBCdXQgdGhlIHRhbmdsZWQgb3JiaXRzIG9mIHRob3NlIGxvc3Qgd29ybGRzIG1lYW50IHRoZXkgd2VyZSBkb29tZWQgdG8gY29sbGlkZSwgcHJvZHVjaW5nIGZyYWdtZW50cyB0aGF0IGFsc28gY29sbGlkZWQsIHByb2R1Y2luZyBzdGlsbCBtb3JlIGZyYWdtZW50cyBpbiBhIGNhdGFjbHlzbWljIGNhc2NhZGUgdGhhdCdzIGJlZW4gZ29pbmcgb24gZm9yIG1vcmUgdGhhbiA0IGJpbGxpb24geWVhcnMuPHN1cD4xPC9zdXA+PC9wPjxwPiBcclxuPC9wPlxyXG5gO1xyXG5cclxuICB2YXIgYmxvZ2NpdGUxID0gYDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lndhc2hpbmd0b25wb3N0LmNvbS9uZXdzL3NwZWFraW5nLW9mLXNjaWVuY2Uvd3AvMjAxOC8wNy8wMy9tYW55LWFzdGVyb2lkcy1taWdodC1iZS1yZW1uYW50cy1vZi1maXZlLWRlc3Ryb3llZC13b3JsZHMtc2NpZW50aXN0cy1zYXkvP25vcmVkaXJlY3Q9b24mdXRtX3Rlcm09LjRmMWUwMDBjYzYzMlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL25ld3Mvc3BlYWtpbmctb2Ytc2NpZW5jZS93cC8yMDE4LzA3LzAzL21hbnktYXN0ZXJvaWRzLW1pZ2h0LWJlLXJlbW5hbnRzLW9mLWZpdmUtZGVzdHJveWVkLXdvcmxkcy1zY2llbnRpc3RzLXNheS8/bm9yZWRpcmVjdD1vbiZ1dG1fdGVybT0uNGYxZTAwMGNjNjMyPC9hPlxyXG48L3A+IFxyXG5gO1xyXG4gIHZhciB1cmwgPSAgWyAgIFxyXG4gICAgICAgeyBpZDogJzI0JyxcclxuICAgICAgIGRpZDogJzA3LTI4LTE4JyxcclxuICAgICAgICBkYXRlOiAnSnVseSAyOC0yOSwgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QyNCxcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyNFxyXG4gICAgICB9LCBcclxuICAgICAgIHtcclxuIGlkOiAnMjMnLFxyXG4gICAgZGlkOiAnMDctMjctMTgnLFxyXG4gICAgZGF0ZTogJ0p1bHkgMjcsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgdGl0bGU6ICdIb29yYXkgZm9yIFBsYW5ldCBHcmVlbiEnLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QyMyxcclxuICAgIGJsb2djaXRlOiBibG9nY2l0ZTIzXHJcbiAgIH0sIFxyXG4gIFxyXG4gICAge1xyXG4gICAgICBpZDogJzIyJyxcclxuICAgICAgZGlkOiAnMDctMjYtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAyNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0JvdCBNZXJjZW5hcmllczo8YnIgLz4nLFxyXG4gICAgICB0aXRsZTogJ0FzIExvbmcgYXMgSSBDYW4gRmVlbCB0aGUgQmVhdCwgQmFieSBJIGRvblxcJ3QgTmVlZCBEb2xsYXIgQmlscyB0byBIYXZlIEZ1biBUb25pZ2h0PGJyIC8+PHNwYW4gY2xhc3M9XCJwdWxsLWxlZnRcIj4gLSBTaWEnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDIyLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMlxyXG4gICAgfSwgIFxyXG4gICAgIHtcclxuICAgIGlkOiAnMjEnLFxyXG4gICAgZGlkOiAnMDctMjUtMTgnLFxyXG4gICAgZGF0ZTogJ0p1bHkgMjUsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICB0aXRsZTogJ0JvdCBNZXJjZW5hcmllczo8YnIgLz5Bcm1pZXMgb2YgU2VjcmV0IFNob3BwZXJzJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MjEsXHJcbiAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMVxyXG4gIH0sICB7XHJcbiAgICBpZDogJzIwJyxcclxuICAgIGRpZDogJzA3LTI0LTE4JyxcclxuICAgIGRhdGU6ICdKdWx5IDI0LCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgIHRpdGxlOiAnQm90IE1lcmNlbmFyaWVzOjxiciAvPldhcnJpb3IgQm90cyBpbiBTcGFjZScsXHJcbiAgICBwb3N0OiBibG9ncG9zdDIwLFxyXG4gICAgYmxvZ2NpdGU6IGJsb2djaXRlMjBcclxuICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzE5JyxcclxuICAgICAgZGlkOiAnMDctMjMtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAyMywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnQW1hem9uXFwncyBQcmltZSBEYXkgU2NhbGluZyBTbGlwIGFuZCBSZWNvdmVyeTo8YnIgLz5BIEhvdy1UbyBHdWlkZSB0byBHcmFjZWZ1bCBFcnJvciBIYW5kbGluZycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTksXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE5XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzE4JyxcclxuICAgICAgZGlkOiAnMDctMjEtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAyMS0yMiwgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0Nsb3VkIFdhcnMsIFBhcnQgSUlJOjxiciAvPkNyZWF0aXZpdHkgdGhhdCBUdXJucyBvbiBhIERpbWUnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE4LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxOFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNycsXHJcbiAgICAgIGRpZDogJzA3LTIwLTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgMjAsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdDbG91ZCBXYXJzLCBQYXJ0IElJOjxiciAvPkVaLUNvbW1lcmNlICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTcsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE3XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgaWQ6ICcxNicsXHJcbiAgICBkaWQ6ICcwNy0xOS0xOCcsXHJcbiAgICBkYXRlOiAnSnVseSAxOSwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgIHRpdGxlOiAnQ2xvdWQgV2FycywgUGFydCBJOjxiciAvPkJlaG9tZXRocyBmcm9tIEFjcm9zcyB0aGUgU2VhICAnLFxyXG4gICAgcG9zdDogYmxvZ3Bvc3QxNixcclxuICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2XHJcbiAgfSx7XHJcbiAgICAgIGlkOiAnMTUnLFxyXG4gICAgICBkaWQ6ICcwNy0xOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdKdWx5IDE4LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ0J5IHRoZSBMaWdodCBvZiBFdGhlcmV1bScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTUsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE1XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzE0JyxcclxuICAgICAgZGlkOiAnMDctMTctMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAxNywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ0FubnVhbCBQcmltZSBEYXkgLCBQYXJ0IElJOjxiciAvPiBUaGUgQ3JlZGl0IENhcmQgSGFuZ292ZXInLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE0LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMycsXHJcbiAgICAgIGRpZDogJzA3LTE2LTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgMTYsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1ByaW1lIERheVxcJ3MgQW5udWFsIEFsbC1Zb3UtQ2FuLUVhdCBCdWZmZXQsIFBhcnQgSTxiciAvPicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTMsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEyJyxcclxuICAgICAgZGlkOiAnMDctMTQtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAxNC0xNSwgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnQ3J5cHRvIFZhbGxleSwgU3dpdHplcmxhbmQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEyLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMScsXHJcbiAgICAgIGRpZDogJzA3LTEzLTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgMTMsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1NpbXBsZSBpcyBiZXR0ZXIgdGhhbiBDb21wbGV4LiBDb21wbGV4IGlzIEJldHRlciB0aGFuIENvbXBsaWNhdGVkLjxiciAvPjxzbWFsbD4tLVRpbSBQZXRlcnM8L3NtYWxsPicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTEsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTExXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgaWQ6ICcxMCcsXHJcbiAgICAgIGRpZDogJzA3LTEyLTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgMTIsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgIHRpdGxlOiAnVG9vbHMgb2YgdGhlIEEuSS4gVHJhZGUsIFBhcnQgSUlJOjxiciAvPiAgT3BlcmF0aW9uIEFyY2hpdGVjdHVyZSBEcmlsbGRvd24nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEwLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMFxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnOScsXHJcbiAgICAgIGRpZDogJzA3LTExLTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgMTEsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1Rvb2xzIG9mIHRoZSBBLkkuIFRyYWRlLCBQYXJ0IElJOjxiciAvPk1hY2hpbmUgTGVhcm5pbmdcXCdzIFBlZGFsIHRvIHRoZSBNZXRhbCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0OSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlOVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc4JyxcclxuICAgICAgZGlkOiAnMDctMTAtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAxMCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdUb29scyBvZiB0aGUgQS5JLiBUcmFkZSwgUGFydCBJOiA8YnIgLz5UaGUgUHJvbGlmZXJhdGlvbiBvZiBNYWNoaW5lIExlYXJuaW5nIE1vZGVsaW5nIExpYnJhcmllcyAnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDgsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZThcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNycsXHJcbiAgICAgIGRpZDogJzA3LTA5LTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgOSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnMTg3IG1pbGxpb24gU25hcGNoYXQgVXNlcnMgYW5kIEVucXVpcmluZyBNaW5kcyB3YW50IHRvIEtub3c6IERpZCBNdWx0aXBsZSBDbHVzdGVycyBGYWlsIGF0IG9uY2U/Li4ub3IgaXMgdGhlcmUgRm91bCBQbGF5PycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlN1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc2JyxcclxuICAgICAgZGlkOiAnMDctMDctMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSA3LTgsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnVGhlb3JpZXMgb2YgRXh0cm9weSA8c3VwPjA8L3N1cD4nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDYsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTZcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNScsXHJcbiAgICAgIGRpZDogJzA3LTA2LTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdUaGUgQ2FuYWRpYW4gTWFmaWEsIFBhcnQgSUkuPGJyIC8+RGF0YSBCZXR0ZXIgUmVjb2xsZWN0ZWQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDUsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTVcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzQnLFxyXG4gICAgICBkaWQ6ICcwNy0wNS0xOCcsXHJcbiAgICAgIGRhdGU6ICdKdWx5IDUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgIHRpdGxlOiAnVGhlIENhbmFkaWFuIE1hZmlhLCBQYXJ0IEkuPGJyIC8+IE9uIHRoZSBHb29kLU5hdHVyZWQgVmlzaW9uIG9mIHRoZSBHb2RmYXRoZXJzIG9mIEEuSS4nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDQsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMycsXHJcbiAgICAgIGRpZDogJzA3LTA0LTE4JyxcclxuICAgICAgZGF0ZTogJ0p1bHkgNCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdUcmFpbmluZyBEYXRhLCBCaWcgYW5kIEJlbG92ZWQgRGF0YTxiciAvPkJpZyBEYXRhXFxzIE1vc3QgTm90b3Jpb3VzIFJ1bGUtQnJlYWtlciBhbmQgUnVsZS1FbmZvcmNlcjogQS5JLicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlM1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcyJyxcclxuICAgICAgZGlkOiAnMDctMDMtMTgnLFxyXG4gICAgICBkYXRlOiAnSnVseSAzLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ1doYXRcXCdzIEJlaGluZCB0aGUgUmViaXJ0aCBvZiB0aGUgTmF0aW9uLVN0YXRlPzxiciAvPlRoZXJlXFwncyBhIDxpPkJsb2NrY2hhaW4gREFQUDwvaT4gZm9yIHRoYXQhJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEnLFxyXG4gICAgICBkaWQ6ICcwNy0wMi0xOCcsXHJcbiAgICAgIGRhdGU6ICdKdWx5IDIsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdDZWxlc3RpYWwgQm9kaWVzOiBBbHdheXMgT3V0IHRvIEltcHJlc3MhJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxXHJcbiAgICB9XHJcblxyXG4gIF07XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWp1bHlcIikuaW5uZXJIVE1MICs9IGNhdDtcclxuICB9XHJcblxyXG4gIHZhciBpO1xyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXRNb2QgPSBgXHJcbiAgPGRpdiBpZD1cIm1vZF8ke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2TW9kXCI+IFxyXG4gIDxociAvPiAgXHJcbiAgPGEgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcbiAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gIFxyXG4gIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgPGg2ICBpZD1cInRpdGxlXCIgICBjbGFzcz1cImRhaWx5dGl0bGUgY2hhLXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWp1bHktbW9kXCIpLmlubmVySFRNTCArPSBjYXRNb2Q7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCdibG9nZ2VyLWp1bHknKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5ibG9nZ2VySnVseSgpOyIsIlxyXG52YXIgYmxvZ2dlckp1bmUgPSBmdW5jdGlvbiAoKSB7XHJcbiBcclxudmFyIGJsb2dwb3N0MTQgPSBcclxuYFxyXG48cCBjbGFzcz1cInF1b3RlXCI+PGk+XHJcbkFsbCBwZW9wbGUgZ29pbmcgdG8gdGhlIEludGVybmF0aW9uYWwgU3BhY2UgU3RhdGlvbiBtdXN0IGRvIHNvIHRocm91Z2ggS2F6YWtoc3RhbiB0b2RheS4gU2luY2UgdGhlIHNwYWNlIHNodXR0bGUgcmV0aXJlZCBpbiAyMDExLCB0aGVyZSdzIG5vIG90aGVyIHNoaXAgY2FwYWJsZSBvZiBjYXJyeWluZyBwZW9wbGUgdXAgdGhlcmUgYmVzaWRlcyBTb3l1eiwgdGhlIFJ1c3NpYW4gd29ya2hvcnNlIG9mIG1hbnkgZGVjYWRlcy4gTkFTQSBwdXJjaGFzZXMgc2VhdHMgZm9yIGl0cyBhc3Ryb25hdXRzOyBlYWNoIG1pc3Npb24gaXMgd29ydGggdGVucyBvZiBtaWxsaW9ucyBvZiBkb2xsYXJzLiBCdXQgdGhlIHNpdHVhdGlvbiBpcyBnb2luZyB0byBjaGFuZ2Ugc29vbi4gXHJcblR3byBjb21wYW5pZXMg4oCUIEJvZWluZyBhbmQgU3BhY2VYIOKAlCBhcmUgZGV2ZWxvcGluZyBjb21tZXJjaWFsIGNyZXcgdmVoaWNsZXMgdG8gY2FycnkgYXN0cm9uYXV0cyB0byB0aGUgSVNTLiBUaGV5IHNob3VsZCBzdGFydCBmbHlpbmcgY3Jld3MgaW4gdGhlIG5leHQgeWVhciBvciB0d28uLi48L2k+PHN1cD4xPC9zdXA+XHJcbjwvcD5cclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPklmIHRoZXJlIGlzIGV2ZXIgYSBnbG9iYWwgc3RhZ2UgbWFya2VkIGJ5IGNhbWFkZXJpZSBiZXNpZGVzIHRoZSBXb3JsZCBDdXAsIHNwYWNlIHdvdWxkIGhhdmUgdG8gdGFrZSBhIHN0cm9uZyAybmQgcGxhY2UtLUlTUyBjb2xsYWJvcmF0aW9uIGJyZWFrcyBhbGwgYm91bmRzISBCdXQgd2hhdCdzIHJlYWxseSBnb2luZyBvbiB3aXRoIHRoYXQgcGxhY2UgYW55d2F5PyBQYXN0IDIwMjQtLWFwcGFyZW50bHkgbm90IG11Y2gsIGJ1dCB0aGF0J3MgYmVjYXVzZSB0aGUgbW9vbiBpcyBnb2luZyBvbiAuLi48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5UaGUgbGF0ZXN0IFtDb25ncmVzc2lvbmFsIEJ1ZGdldCBPZmZpY2Unc10gcmVxdWVzdCBoYXMgbm8gbW9uZXkgZm9yIHRoZSBzcGFjZSBzdGF0aW9uIHBhc3QgdGhlblsyMDI0XS4gVGhhdCdzIHNvIHRoYXQgTkFTQSBjYW4gZm9jdXMgaXRzIHJlc291cmNlcyBvbiB0aGUgRGVlcCBTcGFjZSBHYXRld2F5LCBhIGx1bmFyIHNwYWNlIHN0YXRpb24gdGhhdCBwbGF5cyBhIHBhcnQgaW4gdGhlIGFkbWluaXN0cmF0aW9uJ3MgcmVxdWVzdCB0byBzZW5kIGFzdHJvbmF1dHMgdG8gdGhlIG1vb24gYWdhaW4gYmVmb3JlIGdvaW5nIG9uIHRvIE1hcnMuXHJcbjxiciAvPjxiciAvPlxyXG5UaGUgRXVyb3BlYW5zIGhhdmUgZXhwcmVzc2VkIHNvbWUgaW50ZXJlc3QgaW4gdGhlIERlZXAgU3BhY2UgR2F0ZXdheSwgYnV0IGFzIGZvciBbUnVzc2lhbl0gUm9zY29zbW9zLCB0aGVpciBkaXJlY3Rpb24gaXMgdW5jbGVhci4gVGhlIFtSdXNzaWFuXSBhZ2VuY3kgY291bGQgam9pbiBOQVNBIG9uIGFub3RoZXIgc3BhY2Ugc3RhdGlvbiwgZ28gb24gaXRzIG93biwgb3IgYWxseSBpdHNlbGYgd2l0aCBuZXdlciBzcGFjZSBwb3dlcnMgKHN1Y2ggYXMgQ2hpbmEpIGZvciBvdGhlciB3b3JrLjxzdXA+MTwvc3VwPlxyXG48L3A+XHJcbjxwPkJlc2lkZXMgdGhlIG1vb24sIEkgd291bGRuJ3QgYmUgb3Bwb3NlZCB0byBhIHllYXItYW5kLWEtaGFsZiBsb25nIHRyaXAgdG8gTWFycy0tc28gbG9uZyBhcyBJIGhhZCBwbGVudHkgb2YgcmVhZGluZyBtYXRlcmlhbCwgYW5kIGEgcm91bmQtdHJpcCB0aWNrZXQhXHJcbmBcclxudmFyIGJsb2djaXRlMTQgPSBcclxuYFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy5zcGFjZS5jb20vNDEwMzgtcm9zY29zbW9zLXJ1c3NpYW4tc3BhY2Utc3RyYXRlZ3ktY29tbWVyY2lhbC1jcmV3Lmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnNwYWNlLmNvbS80MTAzOC1yb3Njb3Ntb3MtcnVzc2lhbi1zcGFjZS1zdHJhdGVneS1jb21tZXJjaWFsLWNyZXcuaHRtbDwvYT5cclxuPC9wPiAgIFxyXG5gXHJcbnZhciBibG9ncG9zdDEzID0gXHJcbmBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPklmIHRoZXJlIHdhcyBldmVyIGEgdGhpbmcgY2FsbGVkIFwiQ29udGludWluZyBFZHVjYXRpb24sXCIgdGhhdCB0aGluZyBoYXMgYmVjb21lIGEgbGVhcm5pbmcsIHRoaW5raW5nIG1hbmRhdGUgaW4gdGhlIG1vZGVybiBwcm9mZXNzaW9uYWwgd29ybGQuIExlYXJuaW5nIHRvIHdvcmsgc2lkZS1ieS1zaWRlIHdpdGggb3VyIEEuSS4gXCJhdXRvbWF0aW9uIHdvcmttYXRlc1wiIGhhcyBiZWNvbWUgYSBzb21ld2hhdCBwYXJhZG94aWNhbCBidXJkZW4gd2hlcmVieSB0aGUgbW9yZSB3ZSBsZWFybiwgdGhlIG1vcmUgd2UgZ2V0IHRvIHNob3ZlbCBvdXIgd29yayBvbnRvIG91ciA8aT5FdmVyLUNoZWVyZnVsIGF1dG9tYXRvcnM8L2k+LCBhbmQgdGhpcyBpcyB0aGUgbGVhc3Qgb25lcm91cyBidXJkZW4gSSBoYXZlIGV2ZXIgaGFkIHRvIGJlYXIuLi48L2k+IEl0J3MgY2FsbGVkIHRoZSA8aT5BYm9saXRpb24gb2YgYm9yaW5nIHRhc2tzITwvaT4gPC9wPlxyXG48cD5NYW55IHdyaXRlcnMgaGF2ZSB0b3VjaGVkIG9uIHRoZSBmcmVlZG9tIHRoYXQgZGlnaXRhbCBhdXRvbWF0aW9uIGFmZm9yZHMgdXM6IFRoZSByZXBldGl0aXZlLCBtdW5kYW5lIChpLmUuIG1pbmRsZXNzKSB0YXNrcyB0aGF0IG9uY2Ugb2NjdXBpZWQgZGF5cyBhbmQgd2Vla3Mgb2Ygb3VyIHRpbWUgY2FuIG5vdyBiZSBldmFwb3JhdGVkIGF3YXkgaW4gaG91cnMgd2hlbiB3ZSBqdXN0IGFzayBmb3IgaGVscCBmcm9tIG91ciBkaWdpdGFsIGF1dG9tb3RvbnMtLWJ1dCB3ZSBmaXJzdCBoYXZlIHRvIGFzayEgPC9wPlxyXG48cD5BbmQgc28sIHRoZSB3b3JrIGlzIG5vIGxvbmdlciB0aGUgd29yayB3ZSBkbzogPGk+T3VyIHdvcmsgaXMgbGVhcm5pbmcgbmV3IGRpZ2l0YWxseSBhdXRvbWF0ZWQgc2hvcnQtY3V0cywgaGFja3MsIGFuZCBjbGV2ZXIgd29yay1hcm91bmRzIHRvIGJldHRlciBzaG92ZWwgdGhlIHdvcmsgb2ZmIHRvIG91ciBhdXRvbW90b25zPC9pPi4gQnV0IHdlIGNhbiBvbmx5IGJlIHNvIGNsZXZlciwgYW5kIHNvIHdlIGhhdmUgdG8gbGVhcm4gdG8gYmUgbW9yZSBjbGV2ZXI6IGhlbmNlIHRoZSBsYXRlc3QgcmFnZSBmcm9tIGNvbGxlZ2VzIGFuZCB1bml2ZXJzaXRpZXMgd2l0aCBwcm9ncmFtcyBvZmZlcmluZyAncGVycGV0dWFsIGxlYXJuaW5nLicgVGhlIFdhc2hpbmd0b24gUG9zdCByZXBvcnRzLDwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG5cclxuSW4gdGhlIGZ1dHVyZSBvZiB3b3JrLCByb2JvdHMgYXJlIHN1cHBvc2VkIHRvIHdpcGUgb3V0IHRvbnMgb2Ygam9icywgY3JlYXRlIGEgYnVuY2ggb2YgbmV3IG9uZXMgb3IgZGVsaXZlciBzb21lIGNvbWJpbmF0aW9uIG9mIGJvdGguIEVjb25vbWlzdHMgcHJlZGljdCBhbnkgb2YgdGhlc2Ugc2NlbmFyaW9zIHdpbGwgZm9yY2UgdGhlIGF2ZXJhZ2Ugd29ya2VyIHRvIGRvIHByYWN0aWNhbGx5IHRoZSBzYW1lIHRoaW5nIHRocm91Z2hvdXQgdGhlaXIgY2FyZWVyczoga2VlcCBsZWFybmluZyBhbmQgbGVhcm5pbmcgYW5kIGxlYXJuaW5nLlxyXG48YnIgLz48YnIgLz5cclxuU29tZSBjb2xsZWdlcyBpbiB0aGUgVW5pdGVkIFN0YXRlcyBhcmUgYWxyZWFkeSBwcmVwYXJpbmcgZm9yIHRoaXMgYWdlIG9mIHBlcnBldHVhbCBlZHVjYXRpb24sIGluY2x1ZGluZyB0aGUgVW5pdmVyc2l0eSBvZiBNaWNoaWdhbuKAmXMgUm9zcyBTY2hvb2wgb2YgQnVzaW5lc3MuIFRoZSBBbm4gQXJib3Igc2Nob29sIGxhdW5jaGVkIGEgc2Nob2xhcnNoaXAgcHJvZ3JhbSB0aGF0IHBheXMgZm9yIGdyYWR1YXRlcyB0byB0YWtlIGNsYXNzZXMgdGhlcmUgZm9yZXZlciwgYW5kIHRoZSBudW1iZXIgb2Ygc3R1ZGVudHMgaXMgc2xvd2x5IGdyb3dpbmcuPHN1cD4xPC9zdXA+PC9wPlxyXG48cD5cclxuPHA+QnV0IHdoYXQgcmVhbGx5IGlzIHRoZSB0aW1lLXNjYWxlIG9uIHRoaXMgYmlnIHRyYW5zZm9ybWF0aW9uPyBNb3N0IHRoaW5ncyBvcGVyYXRlIGxpa2UgdGhleSBhbHdheXMgaGF2ZSwgYW5kIGhvbmVzdGx5LCBtYXliZSB3ZSBjYW4gYmUgYSBsaXR0bGUgbW9yZSBwaWNreSBhYm91dCB3aGF0LCBob3csIGFuZCA8c3Ryb25nPndoeSAgd2UgXCJvcHRpbWl6ZVwiIHRoZSB0aGluZ3Mgd2UgZG8uIEJ1dCB0aGF0IGtpbmQgb2Ygb2xkLWZhc2hpb25lZCBMdWRkaXRpc20gaXMgbm90IHRoZSBhZ2Ugd2UgbGl2ZSBpbi4gVG9kYXksIGV2ZXJ5dGhpbmcgaGFzIHRvIGNoYW5nZSB0byBzdGF5IGNvbXBhdGlibGUhICBBIG1vcmUgdGVsbGluZyBkZXRhaWwgZnJvbSB0aGUgTmV3IFlvcmsgVGltZXM6PC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+QW5kIHdl4oCZdmUgZGlnaXRpemVkIG9ubHkgYWJvdXQgMjAgcGVyY2VudCBvZiB0aGUgZWNvbm9teSwgbWVhbmluZyB0aGVyZeKAmXMgdHJlbWVuZG91cyB0ZWNobm9sb2dpY2FsIGNsaW1hdGUgY2hhbmdlIHlldCBhaGVhZC4gVGhlc2UgY2xpbWF0ZSBjaGFuZ2VzIGFyZSByZXNoYXBpbmcgdGhlIGVjb3N5c3RlbSBvZiB3b3JrIOKAlCB3aXBpbmcgb3V0IGh1Z2UgbnVtYmVycyBvZiBtaWRkbGUtc2tpbGxlZCBqb2JzIOKAlCBhbmQgdGhpcyBpcyByZXNoYXBpbmcgdGhlIGVjb3N5c3RlbSBvZiBsZWFybmluZywgbWFraW5nIGxpZmVsb25nIGxlYXJuaW5nIHRoZSBuZXcgYmFzZWxpbmUgZm9yIGFkdmFuY2VtZW50LjxzdXA+Mjwvc3VwPjwvcD5cclxuPHA+MjAlPyBSZWFsbHk/IFNvLCBpdCBzb3VuZHMgbGlrZSBvdXIgcHJvZHVjdGl2aXR5IGlzIDxpPmludmVyc2VseSBwcm9wb3J0aW9uYWwgdG8gd29yayA8c3Ryb25nPndlPC9zdHJvbmc+IGRvPC9pPiwgYnV0IHJhdGhlciB0aGUgd29yay0tYm9yaW5nLCBtdW5kYW5lIHdvcmstLXRoYXQgd2UgY2FuIGVmZmVjdGl2ZWx5IGhhbmQgb2ZmIHRvIG91ciBhdXRvbW9uIHBhcnRuZXJzLS13aGF0ZXZlciB0aGUgc2VjdG9yLiAgXHJcblxyXG5gXHJcbnZhciBibG9nY2l0ZTEzID0gXHJcbmBcclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDYvMjYvb3Bpbmlvbi9wb2xpdGljYWwtcGFydGllcy1jbGltYXRlLmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDYvMjYvb3Bpbmlvbi9wb2xpdGljYWwtcGFydGllcy1jbGltYXRlLmh0bWw8L2E+XHJcbjwvcD4gXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lndhc2hpbmd0b25wb3N0LmNvbS9uZXdzL3dvbmsvd3AvMjAxOC8wNi8wNi9pbi10aGUtZnV0dXJlLWNvbGxlZ2UtbmV2ZXItcmVhbGx5LWVuZHMvP25vcmVkaXJlY3Q9b24mdXRtX3Rlcm09LjRkNzgxMDk1MmViN1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL25ld3Mvd29uay93cC8yMDE4LzA2LzA2L2luLXRoZS1mdXR1cmUtY29sbGVnZS1uZXZlci1yZWFsbHktZW5kcy8/bm9yZWRpcmVjdD1vbiZ1dG1fdGVybT0uNGQ3ODEwOTUyZWI3PC9hPlxyXG48L3A+ICBcclxuXHJcbmBcclxuIFxyXG52YXIgYmxvZ3Bvc3QxMiA9IFxyXG5gXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5PYm5veGlvdXMgbWlzdXNlIG9mIEEuSS5UZWNoIGlzIGEgcmFyZSB0aGluZyBiZWNhdXNlIGRldmVsb3BlcnMgYXJlIGFtb25nIHRoZSBzbWFydGVzdCBhbmQgbW9zdCBodW1hbmUgYW1vbmcgYWxsIHByb2Zlc3Npb25zLCBpZiBJIG15IGh1bWJseSBjbGFpbS4gIEJ1dCA8aT5UZWNoIGNvbnN1bWVycyBhcmUgbm90IG5lY2Vzc2FyaWx5IGJvdW5kIGJ5IHN1Y2ggdGhvdWdodGZ1bCBzb2xpZGFyaXR5LjwvaT4gVGhlIGZvbGxvd2luZyBleGVtcGxpZmllcyB0aGUgZGFya2VyIHNpZGUgb2YgQS5JLiB0ZWNoLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+Q29naXRvIGlzIG9uZSBvZiBzZXZlcmFsIGNvbXBhbmllcyBkZXZlbG9waW5nIGFuYWx5dGljcyB0b29scyB0aGF0IGdpdmUgYWdlbnRzIGZlZWRiYWNrIGFib3V0IGhvdyBjb252ZXJzYXRpb25zIHdpdGggY3VzdG9tZXJzIGFyZSBnb2luZy4gSXRzIHNvZnR3YXJlIG1lYXN1cmVzIGluIHJlYWwgdGltZSB0aGUgdG9uZSBvZiBhbiBhZ2VudOKAmXMgdm9pY2UsIHRoZWlyIHNwZWVjaCByYXRlLCBhbmQgaG93IG11Y2ggZWFjaCBwZXJzb24gaXMgdGFsa2luZywgYWNjb3JkaW5nIHRvIERyLiBQbGFjZS4g4oCcV2UgbWVhc3VyZSB0aGUgY29udmVyc2F0aW9uYWwgZGFuY2Us4oCdIGhlIHNheXMuXHJcblxyXG5UaGF0IGRhbmNlIGlzIHNvbWV0aW1lcyBvdXQgb2Ygc3luYywgc3VjaCBhcyB3aGVuIGFuIGFnZW50IHNwZWFrcyB0b28gcXVpY2tseSBvciB0b28gbXVjaCwgY3V0cyBhIGN1c3RvbWVyIG9mZiwgaGFzIGV4dGVuZGVkIHBlcmlvZHMgb2Ygc2lsZW5jZSBvciBzb3VuZHMgdGlyZWQuXHJcbjxiciAvPjxiciAvPlxyXG5XaGVuIHRoZSBzb2Z0d2FyZSBkZXRlY3RzIHRoZXNlIG1pc3Rha2VzLCBhIG5vdGlmaWNhdGlvbiBwb3BzIHVwIG9uIGEgd2luZG93IG9uIGFuIGFnZW504oCZcyBzY3JlZW4gdG8gY29heCB0aGVtIHRvIGNoYW5nZSB0aGVpciBzdHJhdGVneS4gVGhlIGFsZXJ0cyBhcmUgdXNlZnVsIG5vdCBqdXN0IGZvciB0aGUgYWdlbnRzLCBidXQgYWxzbyBmb3IgdGhlaXIgc3VwZXJ2aXNvcnMsIENvZ2l0byBzYXlzLjxzdXA+MTwvc3VwPjwvcD5cclxuPHA+Rm9yIGFsbCB0aGUgZmFuZmFyZSBvZiBBLkkuIGFuZCBMZWFybmluZyBhbGdvcml0aG1zLCBsZXQncyBob3BlIHRoYXQgdGhvc2Ugd2hvIHdpZWxkIHN1Y2ggcG93ZXIgd2lsbCBub3QgeWllbGQgdG8gb2Jub3hpb3VzIG1pc3VzZS4gRmFtZWQgU29jaW9sb2dpc3QgTWF4IFdlYmVyIHdyb3RlIG9uIHRoZSBvdmVyLXJhdGlvbmFsaXppbmcgdGVuZGVuY2llcyBvZiBidXJlYXVjcmF0aWMgZGV2b3Rpb24gdG8gbWFzcyBwcm9kdWN0aW9uLiBIZSBjYWxscyBpdCB0aGUgaXJvbiBzaGVsbCwgYW5kIHRoZSAuLi4gPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+XCJtb3JlIGNvbXBsZXggaWRlYSB0aGF0IFdlYmVyIGhpbXNlbGYgc291Z2h0IHRvIGV2b2tlIHdpdGggdGhlIFwic2hlbGwgYXMgaGFyZCBhcyBzdGVlbFwiOiBhIHJlY29uc3RpdHV0aW9uIG9mIHRoZSBodW1hbiBzdWJqZWN0IHVuZGVyIGJ1cmVhdWNyYXRpYyBjYXBpdGFsaXNtIGluIHdoaWNoIFwic3RlZWxcIiBiZWNvbWVzIGVtYmxlbWF0aWMgb2YgbW9kZXJuaXR5IC4uLiBGdXJ0aGVyLCB3aGVyZWFzIGEgY2FnZSBjb25maW5lcyBodW1hbiBhZ2VudHMsIGJ1dCBsZWF2ZXMgdGhlaXIgcG93ZXJzIG90aGVyd2lzZSBpbnRhY3QsIGEgXCJzaGVsbFwiIHN1Z2dlc3RzIC4uLiBhIG5ldyBraW5kIG9mIGJlaW5nLjwvaT5cIiA8c3VwPjI8L3N1cD48L3A+XHJcbjxwPlRoaXMgMTl0aCBjZW50dXJ5IHNvY2lvbG9naXN0IERyLiBXZWJlciBsaXZlZCBpbiBzaW1wbGVyIHRpbWVzLCBwcmUtZGF0aW5nIHRoZSAxOTEwJ3MgIGluZHVzdHJ5LXdpZGUgYWRvcHRpb24gb2YgXCJUYXlsb3Jpc3RpY1wiIGNhbGN1bGF0aW9ucyBpbiBmYWN0b3J5IHNldHRpbmdzIGZvciBvcHRpbWl6ZWQgYW5kIG1heGltdW0gZWZmaWNpZW5jeS0tYWxsIGludmVudGVkIGJ5IGEgRmFjdG9yeSBTdXBlcnZpc29yIG5hbWVkIEZyZWRlcmljayBUYXlsb3IsIGFybWVkIHdpdGggYSBwZW5jaWwgYW5kIGEgaGVhdnktZHV0eSBjbGlwYm9hcmQhXHJcbjwvcD48cD5cclxuTm93IGltYWdpbmUgc3RhcnRpbmcgYSBuZXcgam9iIHdpdGggYSBmZWlzdHkgcm9ib3QsIGFzIG9uZSBwcm91ZCBzdXBlcnZpc29yIHByb2NsYWltczogPGk+XCJPbmUgb2YgaGVyIDE0IGFnZW50cyBzYWlkIHRoZSBzb2Z0d2FyZSBub3RpY2VkIGhlIHdhc27igJl0IHNwZWFraW5nIHdpdGggZW5vdWdoIGVuZXJneSwgc28gaXQgcHJvbXB0ZWQgaGltIHdpdGggYSBtZXNzYWdlIHRvIHBlcCB1cCBwbHVzIGEgY29mZmVlLWN1cCBpY29uLCBzaGUgc2F5cy5cIiA8L2k+PHN1cD4xPC9zdXA+XHJcbjwvaT4gVGhlIGhvcnJvciwgdGhlIGhvcnJvci48L3A+XHJcbjwvcD5cclxuYDtcclxudmFyIGJsb2djaXRlMTIgPSBgXHJcblxyXG5cclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cud3NqLmNvbS9hcnRpY2xlcy9jYWxsLWNlbnRlci1hZ2VudHMtZ2V0LWEtaHVtYW4tdG91Y2gtMTUyODk4NDgwMT9tb2Q9Zm9lc3VtbWFyaWVzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53c2ouY29tL2FydGljbGVzL2NhbGwtY2VudGVyLWFnZW50cy1nZXQtYS1odW1hbi10b3VjaC0xNTI4OTg0ODAxP21vZD1mb2VzdW1tYXJpZXM8L2E+XHJcbjwvcD4gXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmpzdG9yLm9yZy9zdGFibGUvMjY3ODAyOT9zZXE9MSNwYWdlX3NjYW5fdGFiX2NvbnRlbnRzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5qc3Rvci5vcmcvc3RhYmxlLzI2NzgwMjk/c2VxPTEjcGFnZV9zY2FuX3RhYl9jb250ZW50czwvYT5cclxuPC9wPiBcclxuYDtcclxudmFyIGJsb2dwb3N0MTEgPSBcclxuYFxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QXMgaWYgQXBwbGUgbmVlZGVkIGFueSBtb3JlIG1vbmV5LS1ub3cgU2Ftc3VuZyB3aWxsIGJlIHdyaXRpbmcgYSBoYWxmLWJpbGxpb24gZG9sbGFyIGNoZWNrIHRvIHJpZ2h0IHRoZSB3cm9uZ3Mgb2YgcGF0ZW50IGluZnJpbmdlbWVudCBhbmQgXCJzbGF2aXNoXCIgY29weWluZy48c3VwPjE8L3N1cD4gV2VsbCwgaGlzdG9yeSBjZXJ0YWlubHkgcmVwZWF0cyBpdHNlbGYgYXMgaXQgd2FzIElCTSB0aGF0IHBsYXllZCB0aGUgcmVsZW50bGVzcyBjb3B5LWNhdCBvZiBBcHBsZSdzIHRlY2hub2xvZ2ljYWwgbGVhZGVyc2hpcCB3YXktYmFjay13aGVuLiBcclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkFwcGxlIEluYyBhbmQgU2Ftc3VuZyBFbGVjdHJvbmljcyBDbyBMdGQgb24gV2VkbmVzZGF5IHNldHRsZWQgYSBzZXZlbi15ZWFyIHBhdGVudCBkaXNwdXRlIG92ZXIgQXBwbGXigJlzIGFsbGVnYXRpb25zIHRoYXQgU2Ftc3VuZyB2aW9sYXRlZCBpdHMgcGF0ZW50cyBieSDigJxzbGF2aXNobHnigJ0gY29weWluZyB0aGUgZGVzaWduIG9mIHRoZSBpUGhvbmUuPGJyIC8+PGJyIC8+SW4gTWF5LCBhIFUuUy4ganVyeSBhd2FyZGVkIEFwcGxlICQ1MzkgbWlsbGlvbiwgYWZ0ZXIgU2Ftc3VuZyBoYWQgcHJldmlvdXNseSBwYWlkIEFwcGxlICQzOTkgbWlsbGlvbiB0byBjb21wZW5zYXRlIGZvciBwYXRlbnQgaW5mcmluZ2VtZW50LiBTYW1zdW5nIHdvdWxkIG5lZWQgdG8gbWFrZSBhbiBhZGRpdGlvbmFsIHBheW1lbnQgdG8gQXBwbGUgb2YgbmVhcmx5ICQxNDAgbWlsbGlvbiBpZiB0aGUgdmVyZGljdCB3YXMgdXBoZWxkLjxzdXA+MTwvc3VwPlxyXG48L3A+PHAgY2xhc3M9XCJwYXJhZ3JhcGhcIj5Jc24ndCBpdCB0cnVlIHRoYXQgQXBwbGUgaXMgbWFkZSBieSBhbmQgd2hvbGx5IGRldm90ZWQgdG8gdGhlIENyZWF0aXZlcyBmcm9tIGV2ZXJ5IHNlY3Rvcj8gQW5kIHRodXMgdGhlIENyZWF0b3Igd2lsbCBpbmV2aXRhYmx5IGNyZWF0ZSBmb2xsb3dlcnMgLi4uIEkgZ3Vlc3MgaW4gcmV0cm9zcGVjdCBteSB2YXJpb3VzIFNhbXN1bmcgcGhvbmVzIGFuZCBwcm9kdWN0cyBoYXZlIGJlZW4gXCJpbnNwaXJlZFwiIGJ5IEFwcGxlLi4uc28gY2xvc2UsIHlldCBzbyBmYXIgYXdheS0tYW5vdGhlciBjYXNlIG9mIHRoZSBzaXgtZGVncmVlcyBvZiBjb25uZWN0aW9ucyB0byBhIGNlbGVicml0eSEgXHJcbjwvcD5cclxuPHA+TXkgbG92ZSBhZmZhaXIgd2l0aCBBcHBsZSBwcm9kdWN0cyBpcyBzdGlsbCByaWRpbmcgdGhlIHBpbmsgY2xvdWQtLWxlc3MgdGhhbiBhIHllYXIgbm93LiBJIGhhdmUgdGhlIGdvb2QgbHVjayB0byB1c2UgYSBNYWNib29rIFBybyB0aGF0IGZlZWxzLCB0eXBlcywgYW5kIHZpZXdzIGxpa2UgYSBzcG9ydHMgY2FyLiBZb3UgY2FuIHJldiB0aGUgZW5naW5lIGJ5IHJ1bm5pbmcgc29tZSBoZWF2eS1kdXR5IG1hcCBpbWFnaW5nIGZyb20gZGF0YSBjYWxjdWxhdGlvbnMtLTxpPnRhbGsgYWJvdXQgdGhlIE1hY0Jvb2sncyBncmFjZSBhbmQgcG93ZXIsIHdoZW4gbG8sIHlvdXIgcm9vdCBpcyBzaXR0aW5nIHJpZ2h0IG9uIHRvcCBvZiBhIExpbnV4IFNoZWxsLiBUaGVzZSB3b3JkcyBjb21lIGZyb20gYSAyNS15ZWFyIHNlcmYgdG8gTWljcm9zZnQncyBvd25lcnNoaXAuPC9pPiBUaGUgZmVlbCBvZiBhIDE5NjcgQ29ydmV0dGUgd2l0aCB2ZXJ5IGxpdHRsZSBiZXR3ZWVuIHlvdSBhbmQgMzUwIEhvcnNlIFBvd2VyLiBJIGhvbmVzdGx5IGhhdmVuJ3QgZXhwZXJpZW5jZWQgdGhpcyBoaWdoIHF1YWxpdHkgc2luY2UgdGhlIGZpcnN0IHRpbWUgSSBsaXN0ZW5lZCB0byBSYWRpb2hlYWQgb24gbXkgZnJpZW5kJ3MgbmV3IEktcG9kIGluIDIwMDcuICBcclxuPC9wPlxyXG48cD5BbiBPZGUgdG8gQXBwbGUgcHJvZHVjdHM6IEFwcGxlISBZb3UgYXJlIG91ciBDcmVhdGl2ZSBMZWFkZXJzaGlwIGFuZCB5b3VyIEFwcGxlIFdhdGNoIGlzIGJleW9uZCBvdXIgcmVhbG0tLWEgcG9zdGNhcmQgZnJvbSBhbm90aGVyIHdvcmxkLiBBcHBsZSwgeW91IGFsb25lIGJlYXIgdGhlIGhpZ2ggc3RhbmRhcmQgb2YgcXVhbGl0eSB0ZWNoIHByb2R1Y3RzLS1iZWNhdXNlIHlvdSwgQXBwbGUsIGRvIG9jY3VweSB0aGUgaGlnaGVzdCwgYW5kIHdlYWx0aGllc3QsIHNlYXQgYW1vbmcgdGhlIFRlY2ggR2lhbnRzIVxyXG48L3A+XHJcbmA7XHJcblxyXG52YXIgYmxvZ2NpdGUxMSA9IGBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cucmV1dGVycy5jb20vYXJ0aWNsZS91cy1hcHBsZS1zYW1zdW5nLWVsZWMvYXBwbGUtc2Ftc3VuZy1zZXR0bGUtdS1zLXBhdGVudC1kaXNwdXRlLWlkVVNLQk4xSk4yUzRcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtYXBwbGUtc2Ftc3VuZy1lbGVjL2FwcGxlLXNhbXN1bmctc2V0dGxlLXUtcy1wYXRlbnQtZGlzcHV0ZS1pZFVTS0JOMUpOMlM0PC9hPlxyXG48L3A+IFxyXG5cclxuYDtcclxudmFyIGJsb2dwb3N0MTAgPSBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj41RyBUZWNobm9sb2d5LCBldmVyIHNvIGNsb3NlIHRvIGxpZmUtY2hhbmdpbmcgaW1wbGVtZW50YXRpb24sIGNvbmp1cmVzIHVwIGZhbnRhc3RpYyBtdXNpbmcgb3ZlciBob3cgb3VyIGV2ZXJ5ZGF5IHByb2R1Y3RzIHdpbGwgaW50ZXJhY3QgaW4gcmVhbC10aW1lIHdpdGggb3VyIHBlcnNvbmFsaXplZCBkYXRhLWNsb3VkLiBDZXJ0YWlubHkgSW9UIChJbnRlcm5ldCBvZiBUaGluZ3MpIHByb2R1Y3RzIHdpbGwgYmUgY2FycnlpbmcgYSB3aG9sZSBsb3Qgb2YgbWFjaGluZS10by1tYWNoaW5lIHRvIG1hY2hpbmUgY29tbXVuaWNhdGlvbi4gRnJvbSB0aGUgSW9UIGVkZ2UgKGVuY2lyY2xpbmcgYSByb3V0ZXIsIGZvciBpbnN0YW5jZSkgdG8gY29tbXVuaWNhdGUgc2Vuc29ycyB0byBtaWQtcmFuZ2UgXCJsaXN0ZW5lcnNcIi48L3A+XHJcbjxwPlNvLCBhbHRob3VnaCBTcHJpbnQtVC1Nb2JpbGUgT25lbmVzcyBzcGVsbHMgbW9ub3BvbHksIHRoZSBzY2FsZSBvZiB3b3JrIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB0byBjb252ZXJ0IGV2ZXJ5dGhpbmcgdG8gNUcgPGk+bWVhbnMgd2UgTmVlZCBhIGdyZWF0IHRlY2ggaW5ub3ZhdG9yIGxpa2UgVC1Nb2JpbGUncyBKb2huIExlZ2VyZSB0byBwdXNoIHdpdGggZmVydm9yIHRoZSByaWdodCB3YXlzIHRvIGRlbGl2ZXIgNUcgY29ubmVjdGl2aXR5IHRvIGV2ZXJ5IEFtZXJpY2FuLCBhbnl3aGVyZS48L2k+IE15PGEgaHJlZj1cIiMxOC0wNC0yN1wiPiBBcHJpbCAyNyBwb3N0PC9hPiB0YWxrcyBtb3JlIG9uIHRoZWlyIGFmZmFpciwgYnV0IHRoZSByZWFsaXR5IGlzIHRoYXQgU3ByaW50IGRvZXNuJ3QgY29udHJpYnV0ZSB2YWx1ZSB0byBBbWVyaWNhbiBpbm5vdmF0aW9uOyB0aGF0IGNsYWltZWQsIDxpPlNwcmludCdzIGJhbmR3aWR0aCByaWdodHMgYW5kIHNwYXJlIHBhcnRzIHJlYWxseSA8c3Ryb25nPndpbGwgdHJ1bHk8L3N0cm9uZz4gIGFkZCB2YWx1ZTwvaT4gdG8gQW1lcmljYW4gVGVjaCE8L3A+XHJcbmA7XHJcbnZhciBibG9nY2l0ZTEwID0gYDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtc3ByaW50LWNvcnAtbS1hLXQtbW9iaWxlLXVzL3NwcmludC10LW1vYmlsZS1kZWZlbmQtcHJvcG9zZWQtdGllLXVwLWJlZm9yZS11LXMtc2VuYXRlLXBhbmVsLWlkVVNLQk4xSk4zM0FcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtc3ByaW50LWNvcnAtbS1hLXQtbW9iaWxlLXVzL3NwcmludC10LW1vYmlsZS1kZWZlbmQtcHJvcG9zZWQtdGllLXVwLWJlZm9yZS11LXMtc2VuYXRlLXBhbmVsLWlkVVNLQk4xSk4zM0EvYT5cclxuPC9wPiBcclxuYDtcclxuXHJcbnZhciBibG9ncG9zdDkgPWBcclxuPHAgIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuV2h5IHRoZSBHUFUgcmF0aGVyIHRoYW4gQ1BVIGZvciBzcGVlZD8gOTAlIG9mIGRlZXAgbGVhcm5pbmcgYWxnb3JpdGhtcyB1c2UgZGlzdHJpYnV0ZWQsIHBhcmFsbGVsIHByb2JsZW0tY2FsY3VsYXRpb25zLiBTbywgd2hvIG5lZWRzIGEgc3RlZXJpbmcgd2hlZWwgcmFjaW5nIG9uIHRoZSBCb25uZXZpbGxlIFNhbHQgRmxhdHM/IENlcnRhaW4ga2luZHMgb2YgYWxnb3JpdGhtcyBkbywgdGhvdWdoLCBzdWNoIGFzIHJlY3Vyc2l2ZSwgdHJlZS10cmF2ZXJzaW5nIGtpbmRzLiBCdXQgSSdtIGp1c3QgYSB0b3VyaXN0LlxyXG48L3A+IFxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPjxpPlxyXG5bQWxleCBLaHJpemhldnNreV0gc2F5cyBoZSByZWNhbGxzIHJlYWRpbmcgc29tZSBwYXBlciBhYm91dCBtYXRyaXggbXVsdGlwbGljYXRpb24gYWxnb3JpdGhtcyBvbiB0aGUgR1BVIChJIGRvbuKAmXQga25vdyB0aGUgc3BlY2lmaWMgb25lKSwgYW5kIGJhc2ljYWxseSB0aGUgaWRlYSBoZSBoYWQgYXQgdGhlIHRpbWUgd2FzIGp1c3QgdG8gcmUtaW1wbGVtZW50IHRoZSBvcmlnaW5hbCBMZW5ldCBhcmNoaXRlY3R1cmVbMV0sIGJ1dCB1c2UgdGhlIEdQVSB0byB0cmFpbiBhIG5ldHdvcmsgKG9mIHVucHJlY2VkZW50ZWQgc2l6ZSBpbiAyMDEyKSByZWFsbHkgZmFzdC5cclxuPC9pPjxzdXA+IDE8L3N1cD48L3A+XHJcblxyXG48cD5Fdm9sdXRpb24gb2YgdGhlc2UgbmV3IEFJJ3MsIGFuZCBBSSdzIGRlc2lnbmluZyBBSXMsIHJlcXVpcmUgdm9yYWNpb3VzIGFtb3VudHMgb2YgdHJhaW5pbmcgZGF0YSB0byBpbXBsZW1lbnQgYW5kIGltcHJvdmUgbGVhcm5pbmcgZGVzaWducy4gIFNvIHdoZXJlIHdvdWxkIEFJIHJlc2VhcmNoIHN0YW5kIGlmIG5vdCBmb3IgdGhlIHVsdHJhLWZhc3QgYW5kIGVmZmljaWVudCBtb2Rlcm4tZGF5IEdyYXBoaWNhbCBQcm9jZXNzaW5nIFVuaXQ/IEJldHRlciBhc2tlZCwgd2hhdCBpbnNwaXJlZCBLcml6aGV2c2tpJ3Mgbm92ZWwsIHBhcmFkaWdtLXNoYXR0ZXJpbmcgZGVzaWduPyAgQ2xlYXJseSA8aT50aGUgTmVlZCBmb3IgU3BlZWQhPC9pPiA8L3A+XHJcbiBcclxuICBgO1xyXG52YXIgYmxvZ2NpdGU5ID0gXHJcbmBcclxuPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cucXVvcmEuY29tL0hvdy1kaWQtQWxleC1Lcml6aGV2c2t5LWNvbWUtdXAtd2l0aC10aGUtaWRlYS1vZi1BbGV4TmV0LUhvdy1kb2VzLXRoZS1kZXNpZ25lci10aGlua1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cucXVvcmEuY29tL0hvdy1kaWQtQWxleC1Lcml6aGV2c2t5LWNvbWUtdXAtd2l0aC10aGUtaWRlYS1vZi1BbGV4TmV0LUhvdy1kb2VzLXRoZS1kZXNpZ25lci10aGluazwvYT5cclxuPC9wPlxyXG5cclxuIFxyXG5gO1xyXG4gIHZhciBibG9ncG9zdDggPSBcclxuICBgICA8cCBjbGFzcz1cInF1b3RlXCI+PGk+XHJcbkRlZXAgbGVhcm5pbmcgYWxsb3dzIGNvbXB1dGF0aW9uYWwgbW9kZWxzIHRoYXQgYXJlIGNvbXBvc2VkIG9mIG11bHRpcGxlIHByb2Nlc3NpbmcgbGF5ZXJzIHRvIGxlYXJuIHJlcHJlc2VudGF0aW9ucyBvZiBkYXRhIHdpdGggbXVsdGlwbGUgbGV2ZWxzIG9mIGFic3RyYWN0aW9uLiBUaGVzZSBtZXRob2RzIGhhdmUgZHJhbWF0aWNhbGx5IGltcHJvdmVkIHRoZSBzdGF0ZS1vZi10aGUtYXJ0IGluIHNwZWVjaCByZWNvZ25pdGlvbiwgdmlzdWFsIG9iamVjdCByZWNvZ25pdGlvbiwgb2JqZWN0IGRldGVjdGlvbiBhbmQgbWFueSBvdGhlciBkb21haW5zIHN1Y2ggYXMgZHJ1ZyBkaXNjb3ZlcnkgYW5kIGdlbm9taWNzLiBEZWVwIGxlYXJuaW5nIGRpc2NvdmVycyBpbnRyaWNhdGUgc3RydWN0dXJlIGluIGxhcmdlIGRhdGEgc2V0cyBieSB1c2luZyB0aGUgYmFja3Byb3BhZ2F0aW9uIGFsZ29yaXRobSB0byBpbmRpY2F0ZSBob3cgYSBtYWNoaW5lIHNob3VsZCBjaGFuZ2UgaXRzIGludGVybmFsIHBhcmFtZXRlcnMgdGhhdCBhcmUgdXNlZCB0byBjb21wdXRlIHRoZSByZXByZXNlbnRhdGlvbiBpbiBlYWNoIGxheWVyIGZyb20gdGhlIHJlcHJlc2VudGF0aW9uIGluIHRoZSBwcmV2aW91cyBsYXllci4gRGVlcCBjb252b2x1dGlvbmFsIG5ldHMgaGF2ZSBicm91Z2h0IGFib3V0IGJyZWFrdGhyb3VnaHMgaW4gcHJvY2Vzc2luZyBpbWFnZXMsIHZpZGVvLCBzcGVlY2ggYW5kIGF1ZGlvLCB3aGVyZWFzIHJlY3VycmVudCBuZXRzIGhhdmUgc2hvbmUgbGlnaHQgb24gc2VxdWVudGlhbCBkYXRhIHN1Y2ggYXMgdGV4dCBhbmQgc3BlZWNoLjwvaT48c3VwPjEuPC9zdXA+XHJcbjwvcD4gXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkFydGlmaWNpYWwgSW50ZWxsaWdlbmNlIGhhcyBldm9sdmVkIGZyb20gYSBwcm90b3R5cGFsIGV2ZW50IGtub3duIGFzIHRoZSBcIkNhbWJyaWFuIEV4cGxvc2lvbiwgb25seSBmaXZlIHllYXJzIGFnby5cIjxzdXA+MTwvc3VwPiBBbiBhcmNoaXRlY3QgbmFtZWQgQWxleCBLcml6aGV2c2t5IG9mZmVyZWQgYSBuZXcgcGFyYWRpZ20gZm9yIDxpPmRlZXAgbGVhcm5pbmc8L2k+IGF0IGFuIGltYWdlIHJlY29nbml0aW9uIGV2ZW50LCBJbWFnZW5ldCBDb21wZXRpdGlvbi4gTXIuIEtyaXpoZXZza3kncyBcIkFsZXggTmV0XCIgYmVjYW1lIHRoZSBwaXZvdGFsIDxpPkNvbnZvbHV0aW9uYWwgTmV1cmFsIE5ldHdvcms8L2k+LCB3aXRoIGEgbWVyZSA4IGxheWVycycgZGVwdGggKHRoaW5rIG9mIHRoZSBkZWNpc2lvbiB0cmVlIG1lbnRpb25lZCBpbiBwb3N0IDYvMjApICZhbXA7IG1pbGxpb25zIG9mIHBhcmFtZXRlcnMuIDwvcD5cclxuXHJcbjxwPlRoZSBoYW5kd3JpdGluZy1zaWduYXR1cmUgcmVjb2duaXRpb24gYWxnb3JpdGhtIGlzIHN0aWxsIGluIHVzZSB0b2RheSEgVGhlIGRlc2lnbi0tdXNpbmcgYSB0cmFpbmluZyB0ZWNobmlxdWUgY2FsbGVkIFwiU3RvY2hhc3RpYyBHcmFkaWVudCBEZXNjZW50XCIsIGJ5IEdlb2ZmIEhpbnRvbi0tYmxldyB0aGUgY29tcGV0aXRpb24gYXdheSBhbmQgcmV2b2x1dGlvbmVkIG1hY2hpbmUgbGVhcm5pbmcuIDwvcD5cclxuPHA+VG9kYXksIG5ldXJhbCBuZXR3b2tzIGJvYXN0IDxpPmh1bmRyZWRzIG9mIGxheWVycyBhbmQgYmlsbGlvbnMgb2YgcGFyZW1ldGVyczogVGhlIGxhc3QgZml2ZSB5ZWFycyBoYXMgYmVlbiBidXN5ITwvaT4gQW5kIHRoZSB2YXJpZWQgc3BlY2llcyBvZiBkZXNpZ25zIHNpbmNlIHRoZSBvcmlnaW5hbCBDb252b2x1dGlvbmFsIE5ldXJhbCBOZXR3b3JrIChDTk4pIGluY2x1ZGUgUmVjdXJyZW50IE5ldXJhbCBOZXR3b3JrcyAoUk5OKSwgR2VuZXJhdGl2ZSBBZHZlcnNlcmlhbCBOZXR3b3JrcyAoR0FOKSBhbmQgUmVpbmZvcmNlbWVudCBMZWFybmluZy5cclxuPC9wPiBcclxuYDtcclxudmFyIGJsb2djaXRlOCA9IFxyXG5gPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uYXR1cmUxNDUzOVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9uYXR1cmUxNDUzOTwvYT5cclxuPC9wPiBcclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vcGFwZXJzLm5pcHMuY2MvcGFwZXIvNDgyNC1pbWFnZW5ldC1jbGFzc2lmaWNhdGlvbi13aXRoLWRlZXAtY29udm9sdXRpb25hbC1uZXVyYWwtbmV0d29ya3NcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vcGFwZXJzLm5pcHMuY2MvcGFwZXIvNDgyNC1pbWFnZW5ldC1jbGFzc2lmaWNhdGlvbi13aXRoLWRlZXAtY29udm9sdXRpb25hbC1uZXVyYWwtbmV0d29ya3M8L2E+PGJyIC8+XHJcblBERjogIDxhIGhyZWY9XCJodHRwczovL3d3dy5udmlkaWEuY24vY29udGVudC90ZXNsYS9wZGYvbWFjaGluZS1sZWFybmluZy9pbWFnZW5ldC1jbGFzc2lmaWNhdGlvbi13aXRoLWRlZXAtY29udm9sdXRpb25hbC1ubi5wZGZcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm52aWRpYS5jbi9jb250ZW50L3Rlc2xhL3BkZi9tYWNoaW5lLWxlYXJuaW5nL2ltYWdlbmV0LWNsYXNzaWZpY2F0aW9uLXdpdGgtZGVlcC1jb252b2x1dGlvbmFsLW5uLnBkZjwvYT4gIFxyXG48L3A+IFxyXG5gXHJcblxyXG52YXIgYmxvZ3Bvc3Q3ID0gXHJcbiAgYCAgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkkgc2F0IG9uZSBldmVuaW5nIGluIG15IGxhYm9yYXRvcnk7IHRoZSBzdW4gaGFkIHNldCwgYW5kIHRoZSBtb29uIHdhcyBqdXN0IHJpc2luZyBmcm9tIHRoZSBzZWE7IEkgaGFkIG5vdCBzdWZmaWNpZW50IGxpZ2h0IGZvciBteSBlbXBsb3ltZW50LCBhbmQgSSByZW1haW5lZCBpZGxlLCBpbiBhIHBhdXNlIG9mIGNvbnNpZGVyYXRpb24gb2Ygd2hldGhlciBJIHNob3VsZCBsZWF2ZSBteSBsYWJvdXIgZm9yIHRoZSBuaWdodCwgb3IgaGFzdGVuIGl0cyBjb25jbHVzaW9uIGJ5IGFuIHVucmVtaXR0aW5nIGF0dGVudGlvbiB0byBpdC4gQXMgSSBzYXQsIGEgdHJhaW4gb2YgcmVmbGVjdGlvbiBvY2N1cnJlZCB0byBtZSwgd2hpY2ggbGVkIG1lIHRvIGNvbnNpZGVyIHRoZSBlZmZlY3RzIG9mIHdoYXQgSSB3YXMgbm93IGRvaW5nLiA8YnIgLz5cclxuICA8YnIgLz5cclxuICAtLVZpY3RvciBGcmFua2Vuc3RlaW48c3VwPjE8L3N1cD5cclxuICA8L2k+PGJyIC8+IFxyXG48L3A+XHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5OdmlkaWEncyBsYXRlc3QgMTJcIiBieSA0XCIgYnkgNFwiIEdQVSBhY2NlbGVyYXRlcyBhbGdvcml0aG1pYyB3b3JrIGZyb20gMTxzdXA+MS8yPC9zdXA+IG1vbnRocyB0byA0IGRheXMuIFRoZSBtb3N0IHJlY2VudCBleHBvbmVudGlhbCBsZWFwcyBpbiBjb21wdXRpbmcgcG93ZXItLW1vc3Qgbm90YWJseSBmb3IgQS5JLiBwdXJwb3NlcywgYXJlIHRoYW5rcyBvbmx5IHRvIHRoZSBHcmFwaGljYWwgUHJvY2Vzc2luZyBVbml0LiBQcm9ncmVzcyBmb2xsb3dlZCBhIGxpbmVhciBwYXRoIGluIGFzIDE5OTggd29ybGQsIGEgd29ybGQgZW5saWdodGVuZWQgYnkgdGhlIHBpdm90YWwgQS5JLiBwdWJsaWNhdGlvbiwgXCJDb252b2x1dGlvbmFsIE5ldXJhbCBOZXRvd3JrcyBmb3IgSGFuZHdyaXR0ZW4gRGlnaXRhbCBSZWNvZ25pdGlvblwiIChMZWN1biwgQm90dG91LCA8c3Ryb25nPkJlbmdpbzwvc3Ryb25nPiwgSGFmZm5lciwgMTk5OCkgdG8gdGhlIHByZXNlbnQgdXNlIGluIGJsb2NrY2hhaW4gY29tcHV0aW5nIGFuZCBkZWVwIGxlYXJuaW5nIGFsZ29yaXRobXMsIGFtb25nIG1hbnkgb3RoZXIgcHVycG9zZXMuIFRoZSB0ZWNobmljYWwgYWR2YW50YWdlIG9mZmVyZWQgYnkgTnZpZGlhIGV4cGxhaW5lZCBieSAyMDEyJ3MgXCJJbWFnZU5ldCBDbGFzc2lmaWNhdGlvbiB3aXRoIE5WSURJQSBHUFVzIChLcml6aGV2c2t5LCBIaW50b3UsIGV0IGFsLikuIFRlbiB5ZWFycyBhZ28sIERhbmllbGUgRy4gU3BhbWludGF0byBhbmQgQW5uZSBDLiBFbHN0ZXJ5IG9mZmVyIGEgc3VjY2luY3QgZXhwbGFuYXRpb246XHJcbjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPk9wdGltaXphdGlvbiBhbGdvcml0aG1zIGFyZSBiZWNvbWluZyBpbmNyZWFzaW5nbHkgbW9yZSBpbXBvcnRhbnQgaW4gbWFueSBhcmVhcywgc3VjaCBhcyBmaW5hbmNlIGFuZCBlbmdpbmVlcmluZy4gVHlwaWNhbGx5LCByZWFsIHByb2JsZW1zIGludm9sdmUgc2V2ZXJhbCBodW5kcmVkcyBvZiB2YXJpYWJsZXMsIGFuZCBhcmUgc3ViamVjdCB0byBhcyBtYW55IGNvbnN0cmFpbnRzLiBTZXZlcmFsIG1ldGhvZHMgaGF2ZSBiZWVuIGRldmVsb3BlZCB0cnlpbmcgdG8gcmVkdWNlIHRoZSB0aGVvcmV0aWNhbCB0aW1lIGNvbXBsZXhpdHkuIE5ldmVydGhlbGVzcywgd2hlbiBwcm9ibGVtcyBleGNlZWQgcmVhc29uYWJsZSBzaXplcyB0aGV5IGVuZCB1cCBiZWluZyB2ZXJ5IGNvbXB1dGF0aW9uYWxseSBpbnRlbnNpdmUuIEhldGVyb2dlbmVvdXMgc3lzdGVtcyBjb21wb3NlZCBieSBjb3VwbGluZyBjb21tb2RpdHkgQ1BVcyBhbmQgR1BVcyBhcmUgYmVjb21pbmcgcmVsYXRpdmVseSBjaGVhcCwgaGlnaGx5IHBlcmZvcm1pbmcgc3lzdGVtcy5cclxuPGJyIC8+XHJcbjxiciAvPiBSZWNlbnQgZGV2ZWxvcG1lbnRzIG9mIEdQR1BVIHRlY2hub2xvZ2llcyBnaXZlIGV2ZW4gbW9yZSBwb3dlcmZ1bCBjb250cm9sIG92ZXIgdGhlbS4gSW4gdGhpcyBwYXBlciwgd2Ugc2hvdyBob3cgd2UgdXNlIGEgcmV2aXNlZCBzaW1wbGV4IGFsZ29yaXRobSBmb3Igc29sdmluZyBsaW5lYXIgcHJvZ3JhbW1pbmcgcHJvYmxlbXMgb3JpZ2luYWxseSBkZXNjcmliZWQgYnkgRGFudHppZyBmb3IgYm90aCBvdXIgQ1BVIGFuZCBHUFUgaW1wbGVtZW50YXRpb25zLiBQcmV2aW91c2x5LCB0aGlzIGFwcHJvYWNoIGhhcyBzaG93ZWQgbm90IHRvIHNjYWxlIGJleW9uZCBhcm91bmQgMjAwIHZhcmlhYmxlcy4gSG93ZXZlciwgYnkgdGFraW5nIGFkdmFudGFnZSBvZiBtb2Rlcm4gbGlicmFyaWVzIHN1Y2ggYXMgQVRMQVMgZm9yIG1hdHJpeC1tYXRyaXggbXVsdGlwbGljYXRpb24sIGFuZCB0aGUgTlZJRElBIENVREEgcHJvZ3JhbW1pbmcgbGlicmFyeSBvbiByZWNlbnQgR1BVcywgd2Ugc2hvdyB0aGF0IHdlIGNhbiBzY2FsZSB0byBwcm9ibGVtIHNpemVzIHVwIHRvIGF0IGxlYXN0IDIwMDAgdmFyaWFibGVzIGluIG91ciBleHBlcmltZW50cyBmb3IgYm90aCBhcmNoaXRlY3R1cmVzLiBPbiB0aGUgR1BVLCB3ZSBhbHNvIGFjaGlldmUgYW4gYXBwcmVjaWFibGUgcHJlY2lzaW9uIG9uIGxhcmdlIHByb2JsZW1zIHdpdGggdGhvdXNhbmRzIG9mIHZhcmlhYmxlcyBhbmQgY29uc3RyYWludHMgd2hpbGUgYWNoaWV2aW5nIGJldHdlZW4gMlggYW5kIDIuNVggc3BlZWQtdXBzIG92ZXIgdGhlIHNlcmlhbCBBVExBUy1iYXNlZCBDUFUgdmVyc2lvbi4gV2l0aCBmdXJ0aGVyIHR1bmluZyBvZiBib3RoIHRoZSBhbGdvcml0aG0gYW5kIGl0cyBpbXBsZW1lbnRhdGlvbnMsIGV2ZW4gYmV0dGVyIHJlc3VsdHMgc2hvdWxkIGJlIGFjaGlldmFibGUgZm9yIGJvdGggdGhlIENQVSBhbmQgR1BVIHZlcnNpb25zLjxzdXA+Mjwvc3VwPjwvcD5cclxuPHA+U28sIGdpdmVuIHRoZSBleHBvbmVudGlhbCBkZXZlbG9wbWVudCBhZHZhbnRhZ2VzIG9mIEdQVSB1c2UsIGl0J3MgY2xlYXIgdGhlIGhvcml6b24gZm9yIG1vcmUgYW5kIG1vcmUgZGV2ZWxvcGVycyBpbXBsaWNhdGVzIGhpZ2ggY29tcHV0aW5nIG5lZWRzLiAgU28sIHdoYXQgZXhhY3RseSBpcyBub3ZlbCB5ZXQgaW5jcmVhc2luZ2x5IGEgaG91c2Vob2xkIGRldmVsb3BlciB0b29sPyA8L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5cclxuQ1VEQcKuIGlzIGEgcGFyYWxsZWwgY29tcHV0aW5nIHBsYXRmb3JtIGFuZCBwcm9ncmFtbWluZyBtb2RlbCBkZXZlbG9wZWQgYnkgTlZJRElBIGZvciBnZW5lcmFsIGNvbXB1dGluZyBvbiBncmFwaGljYWwgcHJvY2Vzc2luZyB1bml0cyAoR1BVcykuIFdpdGggQ1VEQSwgZGV2ZWxvcGVycyBhcmUgYWJsZSB0byBkcmFtYXRpY2FsbHkgc3BlZWQgdXAgY29tcHV0aW5nIGFwcGxpY2F0aW9ucyBieSBoYXJuZXNzaW5nIHRoZSBwb3dlciBvZiBHUFVzLjxiciAvPjxiciAvPlxyXG5cclxuSW4gR1BVLWFjY2VsZXJhdGVkIGFwcGxpY2F0aW9ucywgdGhlIHNlcXVlbnRpYWwgcGFydCBvZiB0aGUgd29ya2xvYWQgcnVucyBvbiB0aGUgQ1BVIOKAkyB3aGljaCBpcyBvcHRpbWl6ZWQgZm9yIHNpbmdsZS10aHJlYWRlZCBwZXJmb3JtYW5jZSDigJMgd2hpbGUgdGhlIGNvbXB1dGUgaW50ZW5zaXZlIHBvcnRpb24gb2YgdGhlIGFwcGxpY2F0aW9uIHJ1bnMgb24gdGhvdXNhbmRzIG9mIEdQVSBjb3JlcyBpbiBwYXJhbGxlbC4gV2hlbiB1c2luZyBDVURBLCBkZXZlbG9wZXJzIHByb2dyYW0gaW4gcG9wdWxhciBsYW5ndWFnZXMgc3VjaCBhcyBDLCBDKyssIEZvcnRyYW4sIFB5dGhvbiBhbmQgTUFUTEFCIGFuZCBleHByZXNzIHBhcmFsbGVsaXNtIHRocm91Z2ggZXh0ZW5zaW9ucyBpbiB0aGUgZm9ybSBvZiBhIGZldyBiYXNpYyBrZXl3b3Jkcy5cclxuPGJyIC8+PGJyIC8+XHJcblRoZSBDVURBIFRvb2xraXQgZnJvbSBOVklESUEgcHJvdmlkZXMgZXZlcnl0aGluZyB5b3UgbmVlZCB0byBkZXZlbG9wIEdQVS1hY2NlbGVyYXRlZCBhcHBsaWNhdGlvbnMuIFRoZSBDVURBIFRvb2xraXQgaW5jbHVkZXMgR1BVLWFjY2VsZXJhdGVkIGxpYnJhcmllcywgYSBjb21waWxlciwgZGV2ZWxvcG1lbnQgdG9vbHMgYW5kIHRoZSBDVURBIHJ1bnRpbWUuXHJcbjxzdXA+Mzwvc3VwPjwvcD5cclxuPHA+QW5kLCB0aGlzIHRlY2ggaXMgYXJyaXZpbmcgYXQgYm90aCB0aGUgbWFpbnN0cmVhbSBQQy1vcHRpbWl6YXRpb24gbGV2ZWwgYXMgbXVjaCBhcyB0eXBpY2FsIHVuaXZlcnNpdHkgcmVzZWFyY2gsIHRoZSBwb3RlbnRpYWwgb2YgYm90aCBsYWlkIG91dCBpbiBhIEp1bmUgMjAxOCBXaXJlZCBNYWdhemluZSBhcnRpY2xlOjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlBDcyB0aGF0IHdvcmsgb24gc21hcnRwaG9uZSBwYXJ0cy4gRGV2aWNlcyB0aGF0IHJ1biBhbGwgZGF5LCBidXQgZm9yIHJlYWwgdGhpcyB0aW1lLiBBIDMyLWNvcmUgaGVsbGJlYXN0IHByb2Nlc3Nvci4gVGhlIGZpcnN0IEdQVSBzaHJ1bmsgZG93biB0byBhIDdubSBwcm9jZXNzLiBBbHdheXMtY29ubmVjdGVkIDVHIGxhcHRvcHMuIEFuZCB3aGlsZSBub3QgYSBQQywgdGhlIEFTVVMgUk9HIHB1dCB2YXBvciBjb29saW5nIGluIGdhbWluZy1mb2N1c2VkIHNtYXJ0cGhvbmUuIChWYXBvciBjb29saW5nLiBJbiBhIHNtYXJ0cGhvbmUuKSBcclxuPGJyIC8+IC4gLiAuXHJcbjxiciAvPkFuZCB0aGVuIHRoZXJlJ3MgYXJndWFibHkgdGhlIHJlYWwgc3RhciBvZiB0aGUgc2hvdywgYW4gQU1EIHByb3RvdHlwZSBvZiB0aGUgZmlyc3QtZXZlciBHUFUgYnVpbHQgb24gYSA3bm0gcHJvY2Vzcy4gVW5saWtlIHNvbWUgb2YgdGhlIG90aGVyIGJsb2NrYnVzdGVyIGFubm91bmNlbWVudHMgb3V0IG9mIFRhaXBlaSB0aGlzIHdlZWssIHRoaXMgb25lIHdvbid0IG1ha2UgaXRzIHdheSB0byB5b3VyIGNvbXB1dGVyIGFueSB0aW1lIHNvb24uIEl0J2xsIGZpbmQgYSBob21lIGluIGRhdGEgY2VudGVycywgaGVscGluZyBBSSBhbmQgbWFjaGluZSBsZWFybmluZyBjb21wdXRlIGF0IGJsaXN0ZXJpbmcgc3BlZWRzLCB1c2luZyBhIGxvdCBsZXNzIGVuZXJneSB0byBkbyBzby48c3VwPjQ8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+QW5kIHNvLCB3aXRoIGJsaXN0ZXJpbmcgc3BlZWQgYW5kIHRoZSBqb2luaW5nIG9mIGRpc2NpcGxpbmVzIG9mIHNjaWVuY2UsIHRoZSBzcGVhcidzIHRpcCBvZiBpbm5vdmF0aW9uIGFjY2VsZXJhdGVzIC4uLiB3aXRob3V0IGEgc3BhcmUgbmFub3NlY29uZCBmb3IgcmVmbGVjdGlvbiFcclxuICBgO1xyXG5cclxuICB2YXIgYmxvZ2NpdGU3ID0gIGA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIEZyYW5rZW5zdGVpbiwgb3IgTW9kZXJuIFByb21ldGhldXMsIE1hcnkgU2hlbGxleSwgMTgxOC4gPGJyIC8+PGEgaHJlZj1cImh0dHBzOi8vd3d3Lmd1dGVuYmVyZy5vcmcvZmlsZXMvODQvODQtaC84NC1oLmh0bVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+IFBERiBodHRwczovL3d3dy5ndXRlbmJlcmcub3JnL2ZpbGVzLzg0Lzg0LWgvODQtaC5odG08L2E+XHJcbiAgPC9wPiAgXHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4yLiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmd1dGVuYmVyZy5vcmcvZmlsZXMvODQvODQtaC84NC1oLmh0bVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+MjAwOSBJRUVFIEludGVybmF0aW9uYWwgU3ltcG9zaXVtIG9uIFBhcmFsbGVsICYgRGlzdHJpYnV0ZWQgUHJvY2Vzc2luZzwvYT5cclxuICA8L3A+ICBcclxuICA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjMuICA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubnZpZGlhLmNvbS9jdWRhLXpvbmVcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vZGV2ZWxvcGVyLm52aWRpYS5jb20vY3VkYS16b25lPC9hPlxyXG4gIDwvcD4gXHJcbiAgICAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj40LiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9jb21wdXRleC0yMDE4LW5ldy1jaGlwcy1xdWFsY29tbS1hbWQtaW50ZWwvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvY29tcHV0ZXgtMjAxOC1uZXctY2hpcHMtcXVhbGNvbW0tYW1kLWludGVsLzwvYT5cclxuICA8L3A+ICBcclxuICBcclxuICBgO1xyXG4gXHJcbnZhciBibG9ncG9zdDYgPSBcclxuICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5TbWFsbCwgb25saW5lIGJ1c2luZXNzZXMgZmFjZSB0aGUgbXVzaWMgdG9kYXkgdG8gcGF5IHN0YXRlIHNhbGVzIHRheGVzLCB0aGFua3MgdG8gdGhlIFN1cHJlbWUgQ291cnQncyA8aT5XYXlmYWlyIFYuIFNvdXRoIERha290YTwvaT4uPHN1cD4yPC9zdXA+IE15IDxhIGhyZWY9XCIjMTgtMDQtMTRcIj5BcHJpbCAxNHRoIHZhciBibG9nPC9hPiwgPGk+Q2xhc2ggb2YgdGhlIEJyaWNrICZhbXA7IE1vcnRhcnMgYWdhaW5zdCBPbmxpbmUgU3RvcmVzPC9pPiBnb2VzIG1vcmUgaW4gZGVwdGguLi4gPC9wPlxyXG4gIDxwPldoYXQgdGhpcyBtZWFucyBpcyB0aGF0IGltbWluZW50bHksIDUwIHZhcmlhdGlvbnMgb2YgbmV3bHkgcGVybWl0dGVkIFN0YXRlIGludGVybmV0IHNhbGVzIHRheGVzIGZvciBzbWFsbCBidXNpbmVzc2VzLjxzdXA+Mjwvc3VwPiBUaGlzIHdpbGwgaW5ldml0YWJseSBodXJ0IHZhcmlldHksIGFuZCBsaWtlbHkgbGVhZCB0byBhIGxvdCBvZiBpbnRlci1zdGF0ZSBjb25mdXNpb246IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIG5ldyBsYXcgbWF5IHNlZW0gc3RyYWlnaHRmb3J3YXJkLCBidXQgdGhlcmUgYXJlIGZhaXJseSBjb21wbGljYXRlZCBzcGVjaWZpY3Mgd2hlbiBpdCBjb21lcyB0byBkaWZmZXJlbnQganVyaXNkaWN0aW9ucyBhbmQgY2F0ZWdvcml6YXRpb24gb2YgZ29vZHMuXHJcbjxiciAvPjxiciAvPlxyXG4gIEZvciBleGFtcGxlLCBOZXcgSmVyc2V5IHBsYWNlcyBhIHRheCBvbiBtYXJzaG1hbGxvd3MsIHdoaWNoIGFyZSBjb25zaWRlcmVkIGNhbmR5IGFuZCBhIGx1eHVyeSwgYnV0IHRoZXkgZG9u4oCZdCB0YXggbWFyc2htYWxsb3cgZmx1ZmYgd2hpY2ggaXMgY29uc2lkZXJlZCBmb29kLiBJbiBzb21lIHN0YXRlcyBLaXRrYXQgYmFycyBhcmUgY2F0ZWdvcml6ZWQgYXMgZm9vZCBiZWNhdXNlIHRoZXkgY29udGFpbiBmbG91ciwgYnV0IGEgc25pY2tlcnMgYmFyIGlzIGNhbmR5LiBNZWFud2hpbGUgYSBzbmlja2VycyBpY2UgY3JlYW0gYmFyLCB3aGljaCBuZWVkcyB0byBiZSByZWZyaWdlcmF0ZWQsIHdvdWxkIGJlIGNvbnNpZGVyZWQgZm9vZCBhbmQgbm90IHRheGVkLjxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD5TbWFsbCwgb25saW5lIGJ1c2luZXNzZXM6IEdldCB5b3VyIGNhbGN1bGF0b3JzIHJlYWR5IVxyXG4gIDwvcD4gXHJcbiBgO1xyXG4gIFxyXG4gXHJcblxyXG4gIHZhciBibG9nY2l0ZTYgPSAgYCBcclxuICA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9hZHZpc29yLzIwMTgvMDYvMjEvc3RhdGUtc2FsZXMtdGF4LXdoaWNoLXN0YXRlcy1hcmUtbW9zdC1hZmZlY3RlZC1ieS10aGUtc3VwcmVtZS1jb3VydC1vbmxpbmUtcmV0YWlsLXJ1bGluZy8jNzkxYTA1MzgzZTY2XCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5mb3JiZXMuY29tL3NpdGVzL2Fkdmlzb3IvMjAxOC8wNi8yMS9zdGF0ZS1zYWxlcy10YXgtd2hpY2gtc3RhdGVzLWFyZS1tb3N0LWFmZmVjdGVkLWJ5LXRoZS1zdXByZW1lLWNvdXJ0LW9ubGluZS1yZXRhaWwtcnVsaW5nLyM3OTFhMDUzODNlNjY8L2E+XHJcbiAgPC9wPiBcclxuICBcclxuICA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuICA8YSBocmVmPVwiaHR0cDovL21vbmV5LmNubi5jb20vMjAxOC8wNi8yMS90ZWNobm9sb2d5L3dheWZhaXItdnMtc291dGgtZGFrb3RhL2luZGV4Lmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly9tb25leS5jbm4uY29tLzIwMTgvMDYvMjEvdGVjaG5vbG9neS93YXlmYWlyLXZzLXNvdXRoLWRha290YS9pbmRleC5odG1sPC9hPlxyXG4gIDwvcD4gXHJcbiAgXHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3Q1ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V2hhdCBkaWZmZXJlbmNlIGRvZXMgaXQgbWFrZSBmb3IgTmV0IE5ldXRyYWxpdHkgdG8gbW9ycGggaW50byA1MCBkaWZmZXJlbnQgdmFyaWF0aW9ucyBub3cgdGhhdCB0aGUgbmV1dHJhbGl0eSBwcm90ZWN0aW9ucyBsZWF2ZSB0aGUgZmVkZXJhbCBhcmVuYSB0byBmYWxsIGludG8gIHN0YXRlIGxlZ2lzbGF0aW9uPzxzdXA+MTwvc3VwPiBXaG8gY2FuIHRlbGwuIFVuZm9ydHVuYXRlbHksIGEgcG90ZW50aWFsIG1pY3JvLWJhbGthbml6YXRpb24gb2YgYmFuZHdpdGggcnVsZXMgd2l0aGluIGFuIGludGVyZGVwZW5kZW50IG5ldHdvcmsgZG9lc24ndCBzcGVsbCBmYXN0ZXIgc2VydmljZSBmb3IgYW55b25lLiA8L3A+XHJcbiAgXHJcbiAgPHA+XHJcbiAgV2hhdCBwZW9wbGUgc2VlbSB0byBmb3JnZXQgaXMgdGhhdCB0aGUga2V5IHdpbiBmb3IgdGhlIDIwMTUgbmV0IG5ldXRyYWxpdHkgbGF3cyB3ZXJlIG1lcmVseSA8aT5hIHNtYWxsIHJlZmxlY3Rpb24gb2YgdGhlIGxhcmdlciBzaWduaWZpY2FuY2Ugb2YgPHN0cm9uZz50aGUgbmV0J3MgcmVjbGFzc2lmaWNhdGlvbiBhcyBhIHNlcnZpY2UsIGxpa2Ugd2F0ZXIsIG5hdHVyYWwgZ2FzLCBhbmQgZWxlY3RyaWNpdHkuPC9pPjwvc3Ryb25nPiBTdGF0ZSBsZWdpc2xhdG9ycyBuZWVkIHRvIGZvY3VzIG9uIHRoZSBhaXIgd2UgYnJlYXRoZSBhcyBjcml0aWNhbCB0byBwcm92aWRpbmcgZW5vdWdoIGF0IHJlYXNvbmFibGUgY29zdCwgdG8gbWVyZWx5IHN1cnZpdmUgaW4gdGhlIHRpbWVzLjwvcD5cclxuICA8cD5BZnRlciBhbGwsIHRoZSBpbnRlcm5ldCB2ZW51ZXMgYXJlIHdoYXQgY29sb3IgdGhlIHdlYi4uLnRoZSBsYXN0IHRoaW5nIHdlIG5lZWQgaXMgdGhlIHZhc3QgYW5kIHZhcmllZCBpbWFnaW5hdGlvbiBvZiA1IHVtYnJlbGxhIGNvbnRlbnQtcHJvdmlkZXJzLiBXaXJlZCBNYWdhemluZSBtYWtlcyBhIGdvb2QgcG9pbnQgdGhhdCA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkNhbGlmb3JuaWEncyBjdXJyZW50IGxlZ2lzbGF0aXZlIGRlYmF0ZXMgbWF5IGxlYWQgdGhlIHByZWNlZGVudCBmb3Igb3RoZXJzLCBtb3JlIGluZmx1ZW50aWFsIHRoYW4gU2VhdHRsZSdzLS1DYWxpZm9ybmlhJ3MgZWNvbm9teSBpcyBlcXVhbGx5IHNpemVkIHdpdGggRnJhbmNlIGF0IDIuNSB0cmlsbGlvbi4gXHJcbiAgPGJyIC8+XHJcbiAgPGJyIC8+W0NhbGlmb3JuaWEgU3RhdGUgU2VuYXRvciBTY290dCBXaWVuZXInc10gb3JpZ2luYWwgYmlsbCBpbmNsdWRlZCBhbGwgdGhlIG1ham9yIHByb3Zpc2lvbnMgb2YgdGhlIEZDQydzIG9sZCBydWxlcywgd2hpY2ggYmFubmVkIGJyb2FkYmFuZCBwcm92aWRlcnMgZnJvbSBibG9ja2luZywgdGhyb3R0bGluZywgb3Igb3RoZXJ3aXNlIGRpc2NyaW1pbmF0aW5nIGFnYWluc3QgbGF3ZnVsIGNvbnRlbnQuIEJ1dCBpdCB3ZW50IGZ1cnRoZXIgdGhhbiB0aGUgRkNDIHJ1bGVzIGJ5IGJhbm5pbmcgY29tcGFuaWVzIGZyb20gYmxvY2tpbmcgb3IgdGhyb3R0bGluZyBjb250ZW50IGFzIGl0IGVudGVycyB0aGVpciBuZXR3b3JrIGZyb20gb3RoZXIgbmV0d29ya3MsIHVuZGVyIHNvLWNhbGxlZCBpbnRlcmNvbm5lY3Rpb24gYWdyZWVtZW50cy48c3VwPjI8L3N1cD4gPC9wPiAgIFxyXG4gIDxwPlRoZSBJbnRlcm5ldCwgYWZ0ZXIgYWxsLCBpcyBhIE5ldHdvcmssIGFuZCBhIG5ldHdvcmsgaXMgYnkgZGVmaW5pdGlvbiBhIHNpbmd1bGFyIGVudGl0eS48L3A+XHJcbiAgYDtcclxuIFxyXG5cclxuICB2YXIgYmxvZ2NpdGU1ID0gIGAgXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiAgPGEgaHJlZj1cImh0dHA6Ly93d3cubGF0aW1lcy5jb20vcG9saXRpY3MvbGEtbmEtcG9sLWNvdXJ0LW9ubGluZS10YXhlcy0yMDE4MDYyMS1zdG9yeS5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vd3d3LmxhdGltZXMuY29tL3BvbGl0aWNzL2xhLW5hLXBvbC1jb3VydC1vbmxpbmUtdGF4ZXMtMjAxODA2MjEtc3RvcnkuaHRtbDwvYT5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4yLiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9jYWxpZm9ybmlhLW5ldC1uZXV0cmFsaXR5LWJpbGwtd2FzLWhpamFja2VkLWxhd21ha2VyLXNheXMvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvY2FsaWZvcm5pYS1uZXQtbmV1dHJhbGl0eS1iaWxsLXdhcy1oaWphY2tlZC1sYXdtYWtlci1zYXlzLzwvYT5cclxuICA8L3A+XHJcbiAgICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3Q0ID0gIGA8cCBjbGFzcz1cInF1b3RlXCI+PGk+XHJcbiAgVGhleSBsZWZ0IFRoZSBEZW52ZXIgUG9zdCBhbWlkIG5ld3Nyb29tIGxheW9mZnMgYW5kIGludGVyZmVyZW5jZSBpbiB0aGUgZWRpdG9yaWFsIHByb2Nlc3MgYnkgdGhlIG5ld3NwYXBlcuKAmXMgaGVkZ2UtZnVuZCBvd25lcnMuIEFuZCBub3cgdGhvc2UgcmVwb3J0ZXJzIGFuZCBlZGl0b3JzIGFyZSBjcmVhdGluZyB0aGVpciBvd24gbmV3cyBvdXRsZXQsIFRoZSBDb2xvcmFkbyBTdW4uICBUaGV5IHdpbGwgYmUgcGFydG5lcmluZyB3aXRoIHRoZSBDaXZpbCBNZWRpYSBDb21wYW55LCBhbiBhbWJpdGlvdXMgTmV3IFlvcmsgc3RhcnQtdXAgdGhhdCBhaW1zIHRvIHVzZSBibG9ja2NoYWluIHRlY2hub2xvZ3kgYW5kIGNyeXB0byBlY29ub21pY3MgdG8gc3RhcnQgMSwwMDAgcHVibGljYXRpb25zIG5hdGlvbndpZGUgYnkgdGhlIGVuZCBvZiB0aGUgeWVhci4gPC9pPlxyXG4gIDxiciAvPjxiciAvPi0gTmV3IFlvcmsgVGltZXMsIEp1bmUgMTcsIDIwMTg8L3A+PGJyIC8+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlBvd2VyIGZyb20gdGhlIDR0aCBFc3RhdGUgdGVuZHMgdG8gZmxvdyBpbiB0aGUgZm9ybSBvZiBwcmludGVycycgaW5rLCBob3dldmVyIEJsb2NrY2hhaW4gVGVjaCBlbXBvd2VycyBqb3VybmFsaXN0cyB3aXRoICBuZXcgcmVzb3VyY2VzIGZvciB0aGVpciB0cmFkZTogZnJlZSBtb25leSBhbmQgZGF0YSwgYW5kIG1vcmUgaW1wb3J0YW50bHksIGFuIGVtcG93ZXJlZCByZWFkZXJzaGlwIGluIENvb3BlcmF0aXZlIGZvcm06IFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgVGhlIG5ldyBwdWJsaWNhdGlvbiB3aWxsIGhhdmUgYSBjb252ZW50aW9uYWwgd2Vic2l0ZSB3aG9zZSBkYXRhIHdpbGwgYmUgd3JpdHRlbiBwZXJtYW5lbnRseSBpbnRvIHRoZSBzZWN1cmUgZGlnaXRhbCBsZWRnZXIga25vd24gYXMgdGhlIGJsb2NrY2hhaW4uIEV4cGVuc2VzIGZvciB0aGUgZmxlZGdsaW5nIG91dGxldCB3aWxsIGJlIGNvdmVyZWQgYnkgYSBncmFudCBmcm9tIENpdmlsLCB3aG9zZSBzb2xlIGludmVzdG9yLCBmb3Igbm93LCBpcyBDb25zZW5TeXMsIGEgQnJvb2tseW4tYmFzZWQgYmxvY2tjaGFpbiBzb2Z0d2FyZSB0ZWNobm9sb2d5IGNvbXBhbnkgZm91bmRlZCBieSB0aGUgQ2FuYWRpYW4gZW50cmVwcmVuZXVyIEpvc2VwaCBMdWJpbi4gTXIuIEx1YmluIGlzIGFsc28gYSBjby1mb3VuZGVyIG9mIHRoZSBFdGhlcmV1bSwgYSB2aXJ0dWFsIGN1cnJlbmN5IGFuZCBibG9ja2NoYWluIGRhdGFiYXNlIHBsYXRmb3JtLiBBcyBwYXJ0IG9mIGl0cyBwbGFuIHRvIGZ1bmQgbmV3IG1lZGlhIGVudGl0aWVzLCBDaXZpbCBwbGFucyB0byB1bnZlaWwgYSBuZXcgdG9rZW4gdGhpcyBzdW1tZXIgY2FsbGVkIENWTC5cclxuPGJyIC8+PGJyIC8+XHJcblBlb3BsZSB3aG8gcHVyY2hhc2UgdGhlIENWTCB0b2tlbiwgYSBmb3JtIG9mIGNyeXB0b2N1cnJlbmN5LCB3aWxsIGhhdmUgYSBzYXkgY29uY2VybmluZyB0aGUgcHJvamVjdHMgaG9zdGVkIGJ5IENpdmlsIOKAlCBtZWFuaW5nIHRoYXQgdGhleSBjYW4gdm90ZSBvbiB3aGV0aGVyIG9uZSBvZiBpdHMgd2Vic2l0ZXMgdmlvbGF0ZXMgdGhlIGNvbXBhbnnigJlzIGpvdXJuYWxpc20gc3RhbmRhcmRzLCB3aGljaCBhcmUgb3V0bGluZWQgaW4gdGhlIENpdmlsIENvbnN0aXR1dGlvbi48c3VwPjE8L3N1cD4gXHJcbiAgPC9wPlxyXG4gIDxwPldobyB3b3VsZCBoYXZlIGd1ZXNzZWQgdGhhdCB0aHJvdWdoIENyeXB0by1DdXJyZW5jeSBmb3IgbW9uZXkgYW5kIERpc3RyaWJ1dGVkIExlZGdlciBUYWJsZXMgZm9yIGRhdGEsIG1vZGVybiBKb3VybmFsaXNtIHdvdWxkIHJpc2UgZnJvbSB0aGUgYXNoZXMgb2YgdGVjaC1pbmR1Y2VkIGltcG92ZXJpc2htZW50IGFuZCBzby1jYWxsZWQgJ2Zha2UtbmV3cycgZGVsZWdpdGltaXphdGlvbiB0byByZWdhaW4gbGltaXRsZXNzIGluayBmb3IgaW5mbHVlbmNlLCB3aXRoIGEgcmVuZXdlZCBhbmQgZGVtb2NyYXRpemVkIGxlZ2l0aW1hY3kuICA8YnIgLz5cclxuICA8YnIgLz5cclxuICBUaGFuayB5b3UsIEJsb2NrY2hhaW4sIGZvciByZXN0b3JpbmcgVHJ1dGggdG8gUG93ZXIhXHJcbiAgPC9wPlxyXG4gIGA7XHJcblxyXG4gIHZhciBibG9nY2l0ZTQgPSAgYFxyXG4gIDxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzA2LzE3L2J1c2luZXNzL21lZGlhL2RlbnZlci1wb3N0LWJsb2NrY2hhaW4tY29sb3JhZG8tc3VuLmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDYvMTcvYnVzaW5lc3MvbWVkaWEvZGVudmVyLXBvc3QtYmxvY2tjaGFpbi1jb2xvcmFkby1zdW4uaHRtbDwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgYDtcclxudmFyIGJsb2dwb3N0MyA9ICBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkRlZXAgTGVhcm5pbmctLWEgNzAncyB0aGluZy0tY2xlYXJseSBwcmVkYXRlcyAgIHBlcnNvbmFsIGNvbXB1dGluZywgdGhlIHdlYiwgYW5kIGV2ZW4gdGhlIDcwJ3MgU2hvdy4gQnV0IHRoZSB0cnVlIGFkdmFuY2VzIGhhdmUgYmVlbiBhIGxvbmcgdGltZSBpbiBkZXZlbG9wbWVudCwgYW5kIGNyZWRpdCBiZWxvbmdzIHRvIFN0YXRpc3RpY3MgYW5kIERhdGEgU2NpZW5jZSwgYW5kIHNwZWNpZmljYWxseSBxdWFudGl0YXRpdmUgYW5hbHlzaXMnIGV2ZXIgY2xldmVyZXIgY2xhc3NpZmljYXRpb24gdHJlZXMgdGhhdCBkZWxpdmVyIHRoZSBnb29kcyB3aXRoIGdyZWF0ZXIgYWNjdXJhY3ksIGNvdXBsZWQgd2l0aCBsZXNzIGludGVuc2l2ZSBjb21wdXRpbmcgY29zdHMuIEFuZCB0aGlzIG9yaWdpbiBpcyBpbnRlcmVzdGluZyBpbiBpdHNlbGY6IDwvcD5cclxuIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuRmlmdHkgeWVhcnMgaGF2ZSBwYXNzZWQgc2luY2UgdGhlIHB1YmxpY2F0aW9uIG9mIHRoZSBmaXJzdCByZWdyZXNzaW9uIHRyZWUgYWxnb3JpdGhtLiBOZXcgdGVjaG5pcXVlcyBoYXZlIGFkZGVkIGNhcGFiaWxpdGllcyB0aGF0IGZhciBzdXJwYXNzIHRob3NlIG9mIHRoZSBlYXJseSBtZXRob2RzLiBNb2Rlcm4gY2xhc3NpZmljYXRpb24gdHJlZXMgY2FuIHBhcnRpdGlvbiB0aGUgZGF0YSB3aXRoIGxpbmVhciBzcGxpdHMgb24gc3Vic2V0cyBvZiB2YXJpYWJsZXMgYW5kIGZpdCBuZWFyZXN0IG5laWdoYm9yLCBrZXJuZWwgZGVuc2l0eSwgYW5kIG90aGVyIG1vZGVscyBpbiB0aGUgcGFydGl0aW9ucyAuLi4gPGJyIC8+XHJcbjxiciAvPkNsYXNzaWZpY2F0aW9uIEFuZCBSZWdyZXNzaW9uIFRyZWVzIChDQVJUKSAoQnJlaW1hbiBldCBhbC4sIDE5ODQpIHdhcyBpbnN0cnVtZW50YWwgaW4gcmVnZW5lcmF0aW5nIGludGVyZXN0IGluIHRoZSBzdWJqZWN0LiBJdCBmb2xsb3dzIHRoZSBzYW1lIGdyZWVkeSBzZWFyY2ggYXBwcm9hY2ggYXMgIEF1dG9tYXRpYyBJbnRlcmFjdGlvbiBEZXRlY3Rpb24gKEFJRCkgYW5kIFRIZXRhIEF1dG9tYXRpYyBJbnRlcmFjdGlvbiBEZXRlY3Rpb24gKFRIQUlEKSwgYnV0IGFkZHMgc2V2ZXJhbCBub3ZlbCBpbXByb3ZlbWVudHMuIEluc3RlYWQgb2YgdXNpbmcgc3RvcHBpbmcgcnVsZXMsIGl0IGdyb3dzIGEgbGFyZ2UgdHJlZSBhbmQgdGhlbiBwcnVuZXMgdGhlIHRyZWUgdG8gYSBzaXplIHRoYXQgaGFzIHRoZSBsb3dlc3QgY3Jvc3MtdmFsaWRhdGlvbiBlc3RpbWF0ZSBvZiBlcnJvci4gVGhlIHBydW5pbmcgcHJvY2VkdXJlIGl0c2VsZiBpcyBpbmdlbmlvdXMsIGJlaW5nIGJhc2VkIG9uIHRoZSBpZGVhIG9mIHdlYWtlc3QtbGluayBjdXR0aW5nLCB3aXRoIHRoZSBsaW5rcyBpbmRleGVkIGJ5IHRoZSB2YWx1ZXMgb2YgYSBjb3N0LWNvbXBsZXhpdHkgcGFyYW1ldGVyLiBUaGlzIHNvbHZlcyB0aGUgdW5kZXItZml0dGluZyBhbmQgb3Zlci1maXR0aW5nIHByb2JsZW1zIG9mICBBSUQgYW5kIFRIZXRhIEF1dG9tYXRpYyBJbnRlcmFjdGlvbiBEZXRlY3Rpb24gKFRIQUlEKSwgYWx0aG91Z2ggd2l0aCBpbmNyZWFzZWQgY29tcHV0YXRpb24gY29zdC48c3VwPjE8L3N1cD5cclxuPC9wPlxyXG48cD5Ub2RheSwgTWFjaGluZSBMZWFybmluZyBjdXJyaWN1bGEgdXN1YWxseSBiZWdpbiB3aXRoIHRoZSBzYW1lIHNhbXBsZSBkYXRhc2V0cyBvbiBJcmlzIGNoYXJhY3RlcmlzdGljcyAocGljdHVyZWQgYmVsb3cpPC9wPlxyXG48aW1nIHN0eWxlPVwibWluLXdpZHRoOjMwMHB4O1wiICBzcmM9XCJkaXN0L2ltZy9sZWFybmluZ0RhdGEuUE5HXCI+PGJyIC8+PGJyIC8+XHJcbjxwPlNvIGhvdyBkb2VzIGl0IHJlYWxseSB3b3JrLCBpbiBvdmVyc2ltcGxpZmllZCB0ZXJtcz8gQ29udHJhcnkgdG8gbW9zdCBhbGdvcml0aG1zJyBzdGVwLWJ5LXN0ZXAgbWFudWFsIGRlY2lzaW9uLW1ha2luZyB0aHJvdWdoIGZvci0gYW5kIHdoaWxlLWxvb3BzLCBpZi1lbHNlLCBhbmQgc28gb24sIHRoZSBzY2FsYWJpbGl0eSBvZiBkZXNpZ24gY2xlYXJseSBmYWxscyBvZmYuIEVudGVyIERlZXAgTGVhcm5pbmcsIHdoaWNoIGlzIG5vdGhpbmcgbW9yZSBteXN0aWNhbCB0aGFuIHNpbXBsZSBjbGFzc2lmaWNhdGlvbi0taS5lLiBkZWNpc2lvbi0tdHJlZXMuIEJlZ2lubmluZyB3aXRoIGEgbWlsbGlvbiBjaG9pY2VzLCBhIGRlY2lzaW9uIHBhc3NlcyB0aHJvdWdoIG11bHRpcGxlIGxheWVycyB0aGF0IG1heSBvciBtYXkgbm90IGJlIGFjdGl2YXRlZCwgYW5kIHdpdGggZWFjaCBhY3RpdmF0ZWQgbGF5ZXIsIGEgZGVjaXNpb24gaXMgbmFycm93ZWQgZG93biwgdW50aWwgZmluYWxseSBhIGRlY2lzaW9uIGlzIHJlYWNoZWQgYmV0d2VlbiByZWNvZ25pemluZyBhIGRvZyBhbmQgYSBjYXQhXHJcbjwvcD48aW1nIHN0eWxlPVwibWluLXdpZHRoOjMwMHB4O1wiIHNyYz1cImRpc3QvaW1nL2NsYXNzaWZUcmVlLlBOR1wiPlxyXG48L3A+PGltZyBzdHlsZT1cIm1pbi13aWR0aDozMDBweDtcIiBzcmM9XCJkaXN0L2ltZy9jbGFzc2lmVHJlZTIuUE5HXCI+PGJyIC8+PGJyIC8+XHJcbjxwPkFuZCB5ZXQsIGZvciBhbGwgb2YgdGhpcyBzY2llbmNlLCB1cCB1bnRpbCAyMDExLCB0aGUgZXJyb3IgcmF0ZSBmb3Igc2ltcGxlIHNoYXBlIHJlY29nbml0aW9uLCBsaWtlIHNheSBhIGRvZyBmcm9tIGEgY2F0IHN0aWxsIGF2ZXJhZ2VkIGEgMjYlIGVycm9yIHJhdGUhIEEgbWVyZSA3IHllYXJzIGxhdGVyPyBUb2RheSwgdGhhdCBlcnJvciByYXRlIGF2ZXJhZ2VzIGxlc3MgdGhhbiAzJSBlcnJvciwgbW9zdCByZWNlbnRseSBkdWUgdG8gY29tcHV0aW5nLCBwb3dlciwgYW5kIG1lbW9yeSBhZHZhbmNlcy4gICBUaG9zZSBjb21lIGluIGhhbmR5IGZvciBkZWxpdmVyaW5nIGEgd2FyZWhvdXNlIHdvcnRoIG9mIGNvbXB1dGluZyBvbnRvIHlvdXIgc21hcnRwaG9uZSEgVGhhdCdzIGEgYm9vbiBmb3IgZGVsaXZlcmluZyBzZW5zb3JzLCBpLmUuIHRyYWluaW5nIGRhdGEsIGludG8gdGhlIGVudmlyb25tZW50LiBNeSBsYXN0IHBvc3QgbWVudGlvbmVkIEdvb2dsZSdzIHVwY29taW5nLCB5ZXQgdW5uYW1lZCBBbmRyb2lkIE9TLi4uYnV0IHdlIGRvIGtub3cgaXQncyBhIGNhbmR5IHRoYXQgc3RhcnRzIHdpdGggXCJQXCIuLi5teSBndWVzcyBpcyBQZXBwZXJtaW50IFBhdHRpZXM/IE9yIG1heWJlIFBleiBoYXMgbW9yZSBvZiBhIHJpbmcgdG8gaXQuPC9wPiAgXHJcbjxwICA+XHJcbldoYXRldmVyIHRoZSBuZXcgT1MgaXMgY2FsbGVkLCBpdCBjb21lcyB3aXRoIGEgZGV2ZWxvcGluZyBwb3RlbnRpYWwgdG8gZXhwb25lbnRpYWxseSBhZHZhbmNlIDxpPlRyZWUgU2NpZW5jZTwvaT46ICBNTCBLaXQgYmVoYXZlcyBsaWtlIGFuIEFQSSBsYXllciBjb25uZWN0aW5nIHRoZSBNTCBzb2Z0d2FyZSB0byB0aGUgYXBwIGRldmVsb3BlcnMnIG1vZGVscywgbWFraW5nIGRldiBlYXN5IHRvIHJ1biBhbmQgZGVwbG95IHdpdGggYW4gXCJleHBlcmltZW50YWwgbW9kZWwgY29tcHJlc3Npb24gZmxvdyB0aGF0IGFpbXMgdG8gcmVkdWNlIG1vZGVsIHNpemUgKHVwIHRvIG9yZGVycyBvZiBtYWduaXR1ZGVzKSB3aGlsZSBtYWludGFpbmluZyBzaW1pbGFyIGFjY3VyYWN5LlwiPHN1cD4zPC9zdXA+IFRhbGsgYWJvdXQgbWF0dXJpbmcgZXhwb25lbnRpYWxseSBxdWlja2x5ISBOb3csIHRoaXMgb3JpZ2luIHN0b3J5IGNhbid0IGNvbXBldGUgd2l0aCBXb2x2ZXJpbmUncyBub3IgSGFuIFNvbG8ncywgYnV0IHRoaXMgZ2VtIGNhcnJpZXMgYSBteXRoaWNhbCBhbmQgZnV0dXJpc3RpYyBwb3RlbnRpYWwgdG8gc2F0aXNmeSBzY3JlZW4tZ29lcnMgZnJvbSBhbGwgZGV2aWNlcywgZnJhbWUtc2l6ZXMsIGFuZCBwbGF0Zm9ybXMhPC9wPlxyXG5gO1xyXG5cclxudmFyIGJsb2djaXRlMyA9IGBcclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gTG9oLCBXLiBZLiAoMjAxNCkuIEZpZnR5IHllYXJzIG9mIGNsYXNzaWZpY2F0aW9uIGFuZCByZWdyZXNzaW9uIHRyZWVzLiBJbnRlcm5hdGlvbmFsIFN0YXRpc3RpY2FsIFJldmlldywgODIoMyksIDMyOS0zNDguXHJcbjxhIGhyZWY9XCJodHRwczovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL2RvaS9mdWxsLzEwLjExMTEvaW5zci4xMjAxNlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9vbmxpbmVsaWJyYXJ5LndpbGV5LmNvbS9kb2kvZnVsbC8xMC4xMTExL2luc3IuMTIwMTY8L2E+XHJcbjwvcD5cclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+Mi4gQ2xhc3NpZmljYXRpb24gYW5kIFJlZ3Jlc3Npb24gVHJlZXMgTGVvIEJyZWltYW4sIEplcm9tZSBGcmllZG1hbiwgQ2hhcmxlcyBKLiBTdG9uZSwgUi5BLiBPbHNoZW4gKDE5ODQpLlxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cudGF5bG9yZnJhbmNpcy5jb20vYm9va3MvOTc4MTM1MTQ2MDQ5MVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGF5bG9yZnJhbmNpcy5jb20vYm9va3MvOTc4MTM1MTQ2MDQ5MTwvYT5cclxuPC9wPiBcclxuXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+My4gXHJcbjxhIGhyZWY9XCJodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tbC1raXQvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWwta2l0LzwvYT5cclxuPC9wPlxyXG48cD5JbWFnZXM6TWF1cmljZSBSb3V4XHJcblVuaXZlcnNpdMOpIE1hcnNlaWxsZSAzXHJcblNhaW50LUrDqXLDtG1lPC9wPlxyXG5gO1xyXG5cclxudmFyIGJsb2dwb3N0MiA9IFxyXG5gXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuVGhlIHVwY29taW5nIEFuZHJvaWQgJ1AnIE9TLS1zdGlsbCBpbiBiZXRhIGFuZCBvbmx5IGF2YWlsYWJsZSBvbiBQaXhlbCBwaG9uZXMsIEVzc2VudGlhbCwgYW5kIGEgZmV3IG90aGVycy0tcHJvbWlzZXMgYSBuZXcgZXJhIGluIG1vYmlsZSBhcHAgZGV2ZWxvcG1lbnQ8c3VwPjE8L3N1cD4gIE1vc3QgZmVhdHVyZXMsIGxpa2UgZXhwYW5kaW5nIE1hcHMnIGluZG9vciBmdW5jdGlvbmFsaXR5LCBpbmNsdXNpdmUgRW1vamlzLCBhbmQgYSByZXZhbXBlZCBuYXZpZ2F0aW9uIGJhciBhcmUgYWxsIG5pY2UsIGJ1dCBvbmUgZWxlbWVudCBvZiB0aGUgYnVpbGQgZW1wb3dlcnMgYXBwIGRldmVsb3BlcnMnIGFjY2VzcyB0byBtYWNoaW5lLWxlYXJuaW5nIGNvZGU6IFxyXG48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gV2l0aCAgTUwsIGkuZS4gbWFjaGluZS1sZWFybmluZywgS2l0LCBhcHAgZGV2ZWxvcGVycyBjYW4gdXNlIEdvb2dsZeKAmXMgbWFjaGluZSBsZWFybmluZyB0YXNrcyB3aXRoaW4gdGhlaXIgb3duIGFwcHMuIE1MIEtpdCBhbGxvd3MgZGV2ZWxvcGVycyB0byB1c2UgdGhlIGNhbWVyYSBmb3IgZmFjZSBkZXRlY3Rpb24sIGxhbmRtYXJrIHJlY29nbml0aW9uLCB0ZXh0IHJlY29nbml0aW9uLCBhbmQgYSBob3N0IG9mIG90aGVyIHJlY29nbml0aW9uIGZlYXR1cmVzLjxzdXA+Mjwvc3VwPjwvcD5cclxuPHA+XHJcblNvLCBpbiBjb25jZXB0dWFsIHRlcm1zLCB0aGlzIG1lYW5zIGRldmVsb3BpbmcgYXBwLWRhdGEgbW9kZWxzIHRoYXQgYXJlIDxpPm9wdGltaXplZCBmb3IgbW9iaWxlIGluZmVyZW5jZTwvaT4uIFRoaXMgbWVhbnMgdGhhdCB0aGUgbG9uZyBwcm9jZXNzIG9mIGFjcXVpcmluZyBlbm91Z2ggdHJhaW5pbmcgZGF0YSB0byBvcHRpbWl6ZSBhbiBhcHAncyBkZXNpZ24gb3IgYmVoYXZpb3IgKGdlbmVyYWxseSBvciBzcGVjaWZpY2FsbHkgdXNlciBwZXJzb25hbGl6YXRpb24pLCBjYW4gbm93IGJlIHNob3J0ZW5lZCB3aXRoIGJldHRlciBxdWFudGl0eSBhbmQgcXVhbGl0eSBvZiB0cmFpbmluZyBkYXRhICZhYWN1dGU7IGxhIG1hY2hpbmUgbGVhcm5pbmcuIFNvIGluIGNvbmNyZXRlIHRlcm1zLCB0aGUgcGFzdCAxNSB5ZWFycycgb2YgR29vZ2xlIE1MIHJlc2VhcmNoIGlzIG5vdyBkaXN0aWxsZWQgaW50byAoYWdhaW4sIHN0aWxsIGJldGEpIGFuIFNESyAoc29mdHdhcmUgZGV2ZWxvcGVycycga2l0KSB0aGF0IGZhY2lsaXRhdGVzIGRldiBpbnRlZ3JhdGlvbiB3aXRob3V0IG5lZWRpbmcgdG8gaGFuZC1tYWtlIGEgbW9kZWwgdG8gYWNjZXNzIHRoZSBydW4tdGltZSBlbnZpcm9ubWVudC4gXHJcbjwvcD5cclxuPHA+SW4gb3RoZXIgd29yZHMsIHBhc3Qgc2VydmVyLXNpZGUgaW5mZXJlbmNlcyBub3cganVtcCB0byB0aGUgbW9iaWxlIGRldmljZSwgYW5kIHRhcCBpbnRvICAgb24tZGV2aWNlIG1hY2hpbmUgbGVhcm5pbmcgbGlicmFyeSBmcmFtZXdvcmsgYW5kIHRvb2xraXQtLWkuZS4gVGVuc29yRmxvd0xpdGUuIFRoaXMganVtcC1zdGFydHMgY3VzdG9taXplZCBhcHBsaWNhdGlvbiBvZiBtYWNoaW5lIGxlYXJuaW5nIGFscmVhZHkgaW4gcHJvZHVjdGlvbi0tdGhhdCBpcywgQW5kcm9pZCBkZXZpY2VzJyA8aT5OZXVyYWwgTmV0d29ya3MgQVBJPC9pPiBhbmQgPGk+aU9TJyBNZXRhbDwvaT4uICBcclxuPC9wPlxyXG48cD5XaGF0IG1ha2VzIHRoaXMgbmV3IHByb2dyYW1taW5nIGhvcml6b24gbW9zdCBpbnRlcmVzdGluZyBpcyB0aGF0IGFuIGVxdWFsbHkgbmV3IGZlYXR1cmUsIGNhbGxlZCBcIkFjdGlvbnNcIiBhbmQgXCJTbGljZXNcIiwgIGFsbG93cyBmb3IgY2VydGFpbiBhcHAgZmVhdHVyZXMgdG8gYmUgYWNjZXNzZWQgYnkgdGhlIHBob25lIGl0c2VsZiBvdXRzaWRlIG9mIHRoZSBhcHAuIEEgTWF5IDh0aCBWZXJnZSBhcnRpY2xlIGV4cGxhaW5zOlxyXG5cclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbkdvb2dsZSBpcyBpbnRyb2R1Y2luZyBkZXZlbG9wZXJzIHRvIGEgY291cGxlIG9mIHRlcm1zOiDigJxBY3Rpb25z4oCdIGFuZCDigJxTbGljZXMu4oCdIFRoZXkgYXJlIGVzc2VudGlhbGx5IGRlZXAgbGlua3MgaW50byBhcHBzIHRoYXQgYXJlIGFibGUgdG8gc3VyZmFjZSBpbiBvdGhlciBwYXJ0cyBvZiB0aGUgb3BlcmF0aW5nIHN5c3RlbS4gQWN0aW9ucyBhcmUgYW5hbG9nb3VzIHRvIEFjdGlvbnMgb24gR29vZ2xlIEFzc2lzdGFudDsgU2xpY2VzIGFyZSBhIHN1YnNldCB0aGF0IGNhbiBzaG93IHRoZSBhcHDigJlzIG93biBVSSB3aGVuIHlvdSB0eXBlIG91dCBhIGdsb2JhbCBzZWFyY2ggb24gdGhlIHBob25lLlxyXG48YnIgLz48YnIgLz5cclxuVGhlIGlkZWEgYmVoaW5kIGJvdGggb2YgdGhlc2UgY29uY2VwdHMgaXMgdG8gYnJlYWsgb3V0IHRoZSBkaWZmZXJlbnQgcGllY2VzIG9mIHRoZSBhcHBzIHlvdSB1c2UgaW50byB0aGUgbGFyZ2VyIG9wZXJhdGluZyBzeXN0ZW0uIFNhbWF0IGNhbGxzIGl0IHRoZSDigJxkZWNvbXBvc2l0aW9uIG9mIGFwcHMs4oCdIHRob3VnaCB3aXRob3V0IHRoZSBjb25ub3RhdGlvbnMgb2YgZGVhdGguIOKAnFllYWgsIHlvdSB3YW50IHRvIGdvIHRoZSBhcHAs4oCdIGhlIHNheXMsIOKAnGJ1dCBhY3R1YWxseSB3aGF0IHlvdSB3YW50IHRvIGRvIGlzIGdvIHRvIHlvdXIgaG91c2Ugb3IgcmVvcmRlciBmcm9tIEluc3RhY2FydC7igJ1cclxuPGJyIC8+PGJyIC8+XHJcbkRldmVsb3BlcnMgd2lsbCBuZWVkIHRvIGJ1aWxkIHNvbWUgZnJhbWV3b3JrcyBpbnRvIHRoZWlyIGFwcHMgdG8gbWFrZSBBY3Rpb25zIGFuZCBTbGljZXMgYXZhaWxhYmxlIHRvIHRoZSBzeXN0ZW0uIFdoZW4gdGhleSBkbywgdGhlIEFJIGluIEFuZHJvaWQgUCB3aWxsIHRyeSB0byB1bmRlcnN0YW5kIHdoYXQgdGhvc2UgYXBwcyBjYW4gYWN0dWFsbHkgZG8gYW5kIHN1Z2dlc3QgdGhvc2UgYWN0aW9ucyB0byB5b3UuIOKAnFdoZW4geW91IG1vZHVsYXJpemUgdGhlIGFwcCwgaXTigJlzIG5vdCBqdXN0IGFuIEFQSSBjYWxsLOKAnSBTYW1hdCBzYXlzLiDigJxZb3UgaGF2ZSB0aGVzZSBjb21wb25lbnRzIHRoYXQgY2FuIGJlIHVuZGVyc3Rvb2QgYnkgdGhlIHN5c3RlbSwgcHJlZGljdGVkIGJ5IHRoZSBzeXN0ZW0sIGFuZCB0aGVuIHJlbmRlcmVkIGJ5IHRoZSBzeXN0ZW0u4oCdPHN1cD4zPC9zdXA+XHJcbjwvcD5cclxuPHA+U28gd2hhdCBkb2VzIHRoaXMgbWVhbj8gQmV0dGVyLCBoaWdoZXItcXVhbGl0eSB0aW1lIHNwZW50IHdpdGggeW91ciB3b3JrIG9yIHBsYXksIHJhdGhlciB0aGFuIGhvcHBpbmcgZnJvbSBvbmUgaWNvbiB0byB0aGUgbmV4dCBmb3IgZWFjaCBhbmQgZXZlcnkgdGFzay4uLmA7XHJcbiAgdmFyIGJsb2djaXRlMiA9IGBcclxuXHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLlxyXG5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vcHJldmlldy9kZXZpY2VzL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3ByZXZpZXcvZGV2aWNlcy88L2E+XHJcbiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJmb290bm90ZXNcIj4yLlxyXG5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZGlnaXRhbHRyZW5kcy5jb20vbW9iaWxlL2dvb2dsZS1hbmRyb2lkLXAtbmV3cy9cIiAgIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL3d3dy5kaWdpdGFsdHJlbmRzLmNvbS9tb2JpbGUvZ29vZ2xlLWFuZHJvaWQtcC1uZXdzLzwvYT5cclxuIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjMuXHJcblxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy50aGV2ZXJnZS5jb20vMjAxOC81LzgvMTczMjczMDIvYW5kcm9pZC1wLXVwZGF0ZS1uZXctZmVhdHVyZXMtY2hhbmdlcy12aWRlby1nb29nbGUtaW8tMjAxOFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vd3d3LnRoZXZlcmdlLmNvbS8yMDE4LzUvOC8xNzMyNzMwMi9hbmRyb2lkLXAtdXBkYXRlLW5ldy1mZWF0dXJlcy1jaGFuZ2VzLXZpZGVvLWdvb2dsZS1pby0yMDE4PC9hPlxyXG4gXHJcbiAgPC9wPlxyXG5cclxuICBgXHJcbiAgLypcclxudmFyIGJsb2dwb3N0MSA9ICBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkJsb2NrY2hhaW4gdGVjaG5vbG9naWVzLCBpLmUuIEdvdmVybm1lbnQgY29udHJhY3RzLCBCdXNpbmVzcyBjb250cmFjdHMsIEJpdGNvaW4gYW5kIG90aGVyXHJcblxyXG5jcnlwdG9jdXJyZW5jaWVzLCBhbGwgcmVseSBvbiBuZXR3b3JrIGdyYXBoIHRoZW9yeSwgYm90aCBvbiB0aGUgbG93LWxldmVsIHByb2dyYW1taW5nIHRlY2hub2xvZ3kgKHBlZXItdG8tcGVlciBnbG9iYWxcclxuXHJcbmlwIG5ldHdvcmtzKSBhY3Jvc3MgdGhlIHNwZWN0cnVtIHRvIGhpZ2gtbGV2ZWwgaW50ZXJmYWNlcyBmb3IgaW5zdGl0dXRpb25hbCwgY29ycG9yYXRlLCBpbmRpdmlkdWFsIG5lZWRzIGFuZCB1c2VzLlxyXG5cclxuVGhlc2UgYmxvY2tjaGFpbiAmcXVvdDtuZXR3b3JrJnF1b3Q7IGFuYWx5c2VzIGRlcGVuZCBvbiBoaWdobHkgdmFyaWFibGUtLWFuZCBzaW11bHRhbmVvdXMtLW5ldHdvcmsgY2hhbmdlcywgbm9kZVxyXG5cclxuY2hhbmdlcywgYW5kIGxpbmsgY2hhbmdlczsgYW5kLCB0aGUgbGF0dGVyIHRocmVlIG1heSBhcmJpdHJhcmlseSBjaGFuZ2UgaW50ZXJkZXBlbmRhbnRseSBvciBub3QuPC9wPlxyXG5cclxuXHJcblxyXG48cD5UaGVyZWZvcmUsIGJsb2NrY2hhaW4gdGVjaG5vbG9naWVzIG11c3QgZmlyc3QgYWNjb21vZGF0ZSAgY29tcGxleCBub2RlIHZhcmlhYmxlcywgaW5jbHVkaW5nIG9uZS0gb3IgdHdvLXdheSBjb250cmFjdHMgKHJlbGF0aW9uc2hpcHMpIHRoYXRcclxuXHJcbiBkZXBlbmQgb248aT4gYXJiaXRyYXJpbHkgaGllcmFyY2hpY2FsIG1hcHBpbmdzIGFuZCBjb25kaXRpb25hbCBkYXRhIHN0cnVjdHVyZXMuPC9pPiBTZWNvbmRseSwgYmxvY2tjaGFpbiB0ZWNoIG11c3QgZmFjZSBhbmFseXRpY2FsXHJcblxyXG5jaGFsbGVuZ2VzIHRoYXQgYXJpc2UgZnJvbSBpbmZvcm1hbCBwcmFjdGljZXM8c3VwPjE8L3N1cD48c3BhbiBjbGFzcz1cIm5ld1wiPi0teW91IGNhbiBzdXJ2ZXkgb3BpbmlvbnMsIGJ1dCBob3cgZG8geW91IG1lYXN1cmUgd2hpbT88L3NwYW4+XHJcblRoZSBvcmdhbml6YXRpb25hbCBub2RlcyAoZW1wbG95ZWVzKSBjaG9vc2UgdG8gZGV2aWF0ZSBmcm9tIHRoZWlyIGVtcGxveW1lbnQgcm9sZXMmIzM5OyBwcm90b2NvbCA8c3BhbiBjbGFzcz1cIm5ld1wiPmJlY2F1c2UgaXQgaXQgaXMgc3Vubnkgb3V0c2lkZSwgb3IgbWF5YmUgYmVjYXVzZSB0aGUgdHJhZmZpYyB3YXMgbG9uZyB0b2RheSwgb3IgYmVjYXVzZSBhIGJ1dHRlcmZseSdzIHdpbmctc3dpc2ggY29vbGVkIGEgcmFzaCBkZWNpc2lvbiBkb3duIHRvIHJlYXNvbi4gIFRoYXQgc21hbGwgZGV0YWlsIG9mdGVuIHRydW1wcyBzdGF0aXN0aWNhbCBwYXR0ZXJucyBvZiBlZmZpY2llbmN5LCBjb252ZW5pZW5jZSwgY29tcGFueSBjdWx0dXJlLCBhbmQgbXVsdGlwbGUgb3RoZXIgbGV2ZWxzIG9mIGFuYWx5c2lzIG9mIGh1bWFuIGZhY3RvcnMuPC9wPlxyXG5cclxuXHJcblxyXG48cD5Tb2Npb2xvZ2lzdHMgTWV5ZXIgJmFtcDsgUm93YW4mIzM5O3MgKDE5NzcpXHJcblxyXG48aT5OZXcgSW5zdGl0dXRpb25hbGlzbTwvaT4gZXhwbGFpbnMgaG93IGVtcGxveWVlcyBjaGFuZ2UgcHJhY3RpY2VzIGFuZCBkZWNvdXBsZVxyXG5cclxuPGk+YWN0dWFsPC9pPiBvcmdhbml6YXRpb25hbCBzdHJ1Y3R1cmUgZnJvbSByZWNvcmRlZCBydWxlcywgYXMgYSBmdW5jdGlvbiBvZiBvcmdhbml6YXRpb25hbCBzaXplLCB0aW1lLCBjb252ZW5pZW5jZSxcclxuXHJcbmV0Yy4gTm9vbmUgY2FuIGFyZ3VlIGFnYWluc3QgdGhpcyB3YWxsIG9mIHJlYXNvbi4gPHNwYW4gY2xhc3M9XCJuZXdcIj48aT4gVGhlIHByb2JsZW0gaXMgbm90IHRoZSByZWFzb24sIHRoZSBwcm9ibGVtIGlzIHRoZSBzdGF0aWMsIGZyb3plbiB3YWxsIGNhbGxlZCBTb2NpYWwgU2NpZW5jZSBUaGVvcnksIGNvbnN0cnVjdGVkIGZyb20gYSBwYXN0aWNoZSBvZiBkaWZmZXJlbnQgbWVhbmluZ3M8L2k+IGFuZCBhcmJpdHJhcnkgdGhlb3JldGljYWwgc3RhcnRpbmcgcG9pbnRzLiAgPHNwYW4gY2xhc3M9XCJuZXdcIj5UaGUgZXN0ZWVtZWQgU2Nob2xhciBvZiBDb21wYXJhdGl2ZSBQb2xpdGljcywgRHIuIEVsbGVuIE0uIEltbWVyZ3V0LCB1bmRlcm1pbmVkIG1vZGVybiBzb2Npb2xvZ3kgY29uY2VwdHMgaW4gMTk5OC0tYSBsb2dpY2FsIGJsb3cgZnJvbSB3aGljaCBTb2Npb2xvZ3kgaGFzIG5ldmVyIHJlY292ZXJlZCAobm9yIHlldCBmYWNlZCkuIFNoZSB3cml0ZXM6PC9zcGFuPlxyXG48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGUgbmV3XCI+XHJcbkZ1cnRoZXIgY29uZnVzaW9uIGhhcyBhcmlzZW4gYmVjYXVzZSB0aGUgbmV3IGluc3RpdHV0aW9uYWxpc3RzIGRvIG5vdCBwcm9wb3NlIG9uZSBnZW5lcmFsbHkgYWNjZXB0ZWQgZGVmaW5pdGlvbiBvZiBhbiBpbnN0aXR1dGlvbiwgbm9yIGRvIHRoZXkgYXBwZWFyIHRvIHNoYXJlIGEgY29tbW9uIHJlc2VhcmNoIHByb2dyYW0gb3IgbWV0aG9kb2xvZ3kuIEluIGZhY3QsIHRocmVlIHNlcGFyYXRlIGJyYW5jaGVzIG9mIHNjaG9sYXJzaGlwLS1yYXRpb25hbCBjaG9pY2UsIG9yZ2FuaXphdGlvbmFsIHRoZW9yeSwgYW5kIGhpc3RvcmljYWwgaW5zdGl0dXRpb25hbGlzbSAtLSBhbGwgbGF5IGNsYWltIHRvIHRoZSBsYWJlbCwgc2VlbWluZ2x5IHdpdGhvdXQgYWRoZXJpbmcgdG8gYW4gb3ZlcmFyY2hpbmcgdGhlb3JldGljYWwgZnJhbWV3b3JrLjxzdXA+Mzwvc3VwPjwvcD5cclxuPHAgY2xhc3M9XCJuZXdcIj5cclxuSW4gb3RoZXIgd29yZHMsIHRoZSBsb25nLXN0YW5kaW5nIENpdmlsIFdhciB3aXRoaW4gdGhlIGRpc2NpcGxpbmUgb2YgU29jaW9sb2d5IChiZWdpbm5pbmcgd2l0aCBGdW5jdGlvbmFsaXN0cycgaXJyZWNvbmNpbGFibGUgY29udHJhZGljdGlvbnMgb2YgQ29uZmxpY3QgVGhlb3Jpc3RzJyBlbnRpcmUgV29ybGQtVmlldy0tYW5kIHZpY2UtdmVyc2EpLiBGcm9tIHRoaXMgaW5pdGlhbCBzY2hpc20gYmVnaW5zIHRoZSBkaXNhc3NlbWJsaW5nIG9mIHRoZSBkaXNjaXBsaW5lLS1hcyBpdCBzdGFuZHMgdW50aWwgdG9kYXkuIFxyXG5BbGwgb2YgdGhhdCB0YWxlbnQgYW5kIG5vIHNpbmdsZSB2aXNpb24gdG8gaGFybmVzcyBhIGxhc3RpbmcgZXhwbGFuYXRvcnkgcGxhdGZvcm0uICBBbmQgdGhpcyBpcyA8aT5iZWZvcmU8L2k+IGFkZHJlc3NpbmctLWZyb20gYSBTY2llbnRpZmljIE1ldGhvZCBQYXJhZGlnbS0tdGhlIHByb2JsZW0gb2YgY29udGludWFsbHkgbmV3LCB1bmtub3duIGNvbnN0cmFpbnRzIG9uIGRhdGEgdGhhdCBtdXN0IGJlIGludGltYXRlbHkgdW5kZXJzdG9vZCB3aXRob3V0IGZhbGxpbmcgYmFjayB0byB0aGUgb2xkLCBcIlVTQSBUb2RheVwiIGhhYml0cyBvZiAnVGhlb3JldGljYWwgUmVsYXRpdmlzbScuPC9wPlxyXG48L3NwYW4+XHJcbjxwPlxyXG5TbywgaG93IGRvIHdlIHJlY29nbml6ZSB1bndyaXR0ZW4sIHNvZnQgcnVsZXMgYW5kIGJlaGF2aW9ycyBvZiBhIGJhbmssIGEgcGVyc29uLFxyXG5cclxub3IgYSBjb21wYW55JiMzOTtzIGludGVybmFsIGJvdD88L3A+IFxyXG5cclxuPHA+VGhlIGhhcmQgc2NpZW5jZXMgZG9tYWluIG9mIFNvZnR3YXJlIEVuZ2luZWVyaW5nLCBDb21wdXRlciBTY2llbmNlLCBhbmQgTWF0aGVtYXRpY3MgaGF2ZSBicmlsbGlhbnRseSBicm91Z2h0IHRoZVxyXG5cclxud29ybGQgdGhlIGJsb2NrY2hhaW4gdG9vbCwgYmFzZWQgb24gYSA8c3BhbiBjbGFzcz1cIm5ld1wiPjxpPnRlY2huaWNhbCwgbnVtZXJpY2FsIGFwdGl0dWRlLS1udW1lcmFjeS0tZm9yIHdoaWNoIHRoZSBIYXJkIFNjaWVuY2VzIGNhbiBhbmQgbXVzdCBzaGFyZSBhbmQgcHJvcG9nYXRlIGl0J3MgdGVjaG5pY2FsIGV4cGVydGlzZSBhbmQgaGlnaGVyIHN0YW5kYXJkIG9mIG1ldHJpYyB0cnV0aDwvaT48cyBzdHlsZT1cImNvbG9yOnB1cnBsZVwiIGNsYXNzPVwic3RyaWtlLXB1cnBsZVwiPiBub3QgY29udHJpYnV0ZSBldmVyeXRoaW5nLCBlc3BlY2lhbGx5IHJlbGF0aW5nIHdpdGg8L3M+IHRvIHRoZSBvdGhlciBzY2llbmNlcyB0aGF0IGFyZSBzdGlsbCBsYWdnaW5nIGJlaGluZC0tbmFtZWx5IFRoZSBEaXNjaXBsaW5lIG9mIFNvY2lvbG9neTwvcz4gdG93YXJkIGFjY2xpbWF0aW5nIHRvIHRoZSBtb2Rlcm4gYWdlJ3Mgc29jaWFsIHByaW9yaXRpZXMgYW5kIG5lZWRzLiBBc2sgeW91cnNlbGYsIGhvdyB3ZWxsIGRvIDEsMDAwIHRvcCBibG9ja2NoYWluLXJlbGF0ZWQgcHJvZ3JhbW1lcnMgdW5kZXJzdGFuZCB0aGUgbXVsdGktZGltZW5zaW9uYWwgbGF5ZXJzIG9mIGhpZXJhcmNoaWNhbCBzb2NpYWwsIGNvcnBvcmF0ZSwgYW5kIGdvdmVybm1lbnRhbCByZWxhdGlvbnNoaXAgbmV0d29ya3MtLXByb2JhYmx5IDcwMCBvZiB0aGUgMSwwMDAuIEFuZCBob3cgbWFueSBzb2NpYWwgc2NpZW50aXN0cyBjYW4gdW5kZXJzdGFuZCB0aGUgdGVjaG5vbG9naWNhbCBzY2llbmNlcz8gUHJvYmFibHkgMjAwIG91dCBvZiAxLDAwMC4gVGhpcyBtZWFucyB0aGF0IDxpPmEgY2h1bmsgb2YgdGhlIHNjaWVudGlmaWMgZGlzcGxpbmVzIHN1ZmZlciBmcm9tIGFjdXRlIGlubnVtZXJhY3k8L2k+LiBTbyBob3cgZG8gd2UgYnJpZGdlIHRoaXMgbWFzc2l2ZSBrbm93bGVkZ2UgZ2FwIGJldHdlZW4gcXVhbGl0YXRpdmUgbWVhbmluZyBpbiB0aGUgc21hcnQtY29udHJhY3Q/PC9zcGFuPjwvcD5cclxuXHJcbjxwPkluIHRoZSBwYXN0LCB0aGUgbGF5ZXJzIG9mIGFic3RyYWN0aW9uIGZyb20gcmF3IHRlY2hub2xvZ2ljYWwgdG9vbCB0byBzb2NpZXRhbCB1c2Ugd2FzIHJlZmluZWQsIGltcHJvdmVkLCBpbnRlZ3JhdGVkIHRocm91Z2ggbXVsdGlwbGUgbGF5ZXJzIG9mICZxdW90O21pZGRsZW1lbiZxdW90Oywgc3VjaCBhcyBsYXd5ZXJzLCBjb3Jwb3JhdGUgbGF3eWVycywgZ292ZXJubWVudCBpbnN0aXR1dGlvbnMsIG5vbi1nb3Zlcm5tZW50YWwsIG5vbi1wcm9maXQgYW5kIGZvci1wcm9maXQgYWN0b3JzLiBCbG9ja2NoYWluIHRlY2hub2xvZ3ksIGJ5IGl0cyB2ZXJ5IG5hdHVyZSwgZXJhc2VzIHRoZSBtaWRkbGVtZW4uIFN1ZGRlbmx5LCBvbmUgcHJvZ3JhbW1lciwgZm9yIGV4YW1wbGUsIGlzIHdyaXRpbmcgdGhlIHNhbWUgaGVhbHRoY2FyZSBpbnN1cmFuY2UgY3J5cHRvLWNvbnRyYWN0LCB0aGF0IGxhc3QgbW9udGggYW4gZW50aXJlIHRlYW0gb2YgaG9zcGl0YWwgZW1wbG95ZWVzIHNwZW50IGEgbW9udGggd3JpdGluZzsgdGhlbiBvdmVyc2VlaW5nIGFuZCBtYW5hZ2luZyBkaWZmZXJlbnQgZmFjZXRzIG9mIHRoaXMgc2FtZSB0aGluZy48L3A+XHJcblxyXG5cclxuXHJcbjxwPkhvd2V2ZXIsIHRoZSBjcnlwdG8tY29udHJhY3QsIG9uY2UgZGVwbG95ZWQgdG8gdGhlIGJsb2NrY2hhaW4sIGF1dG8tbWFuYWdlcyB0aGUgcmVzdCwgZm9yZXZlciBvciBmb3IgdGhlIGxpZmUgb2ZcclxudGhlIGNvbnRyYWN0LiBUaGVyZWZvcmUsIHJhdGhlciB0aGFuIHJlZG9pbmcgdGhlIHRyaWFscyBhbmQgZXJyb3JzIG9mIDIwMCB5ZWFycyYjMzk7IFNvY2lvbG9neSBOZXR3b3JrIEFuYWx5c3RzJiMzOTtcclxucmVzZWFyY2ggYW5kIGFuYWx5dGljYWwgZGV2ZWxvcG1lbnQuIDxzcGFuIGNsYXNzPVwibmV3XCI+IFRoZXJlZm9yZSwgbXVjaCBvZiB0aGUgc29jaWFsIHNjaWVudGlzdHMgaGF2ZSBhcnJpdmVkIGF0IHRoZSBlbmQgb2YgdGhlIGxpbmUgb2YgdGVjaG5vbG9neSwgc3RpbGwgc2hhY2tsZWQgdG8gYW5hbG9nIG1ldGhvZG9sb2d5IHJlbGVnYXRlZCB0byB0aGUgU2luZSBhbmQgQ29zaW5lIG9mIHByb2dyZXNzOyB3aGlsZSB0aGUgV29ybGQgbGVhdmVzIGl0IGJlaGluZCwgbGVkIGJ5IHRoZSBIYXJkIFNjaWVuY2VzIG9mIFNvZnR3YXJlIEVuZ2luZWVyaW5nLS10aGUgbmV3IHNvY2lhbCBmYWJyaWMgb2YgdGhlIDIxc3QgQ2VudHVyeS4gU28sIGNhbiB0aGUgYW50aHJvcG9sb2dpY2FsIGFuZCBzb2NpYWwgZG9tYWlucyBzdXJ2aXZlIHRoaXMgZXhpc3RlbnRpYWwgdGhyZWF0IHRvIGFueSBhdXRob3JpdHktLXRoYXQgZGVwZW5kcyBpZiB0aGUgSGFyZCBTY2llbmNlcywgR2F0ZWtlZXBlcnMgb2YgRW1waXJpY2FsIFNjaWVuY2Ugd2lsbCBleHRlbmQgYW4gb3BlbiBkb29yIGFuZCBwcm8tYWN0aXZlbHkgc2hhcmUgdGVjaG5pY2FsIGluc3RydWN0aW9ucyBmb3IgdGhlIHNvZnQgc2NpZW5jZXMuICBUaGVyZWZvcmUsIHRoZSBzb2NpYWwgc2NpZW5jZXMgYXJlIG5vdCBzYWZlIGhpZGluZyBhdCBob21lLCB3aXRoaW4gdGhlIGFjYWRlbWljXHJcbnRvd2VyLS1mYXIgcmVtb3ZlZCBmcm9tIHRoZSBwYWNlIG9mIHNvY2lldGFsIGFuZCB0ZWNobm9sb2dpY2FsIGNoYW5nZS4gIFxyXG4gPC9wPlxyXG4gXHJcblxyXG48cCBjbGFzcz1cIm5ld1wiPlRoZSBwb2ludCBpcyB0aGlzOiBUaGUgaW5udW1lcmFjeSBvZiB0aGUgU29mdCBTY2llbmNlcyBpbmNyZWFzaW5nbHkgbG9zZXMgYXV0aG9yaXR5LCB3aXRoIHRoZSBsZXNzIGl0IGNhbiBwcm92ZSBhdCB0aGUgQ29tbWFuZCBMaW5lIEludGVyZmFjZS4gU28sIGhvdyB3aWxsIGFuIGFuYWxvZyBhY2FkZW1pYyBmaWVsZCBpbiB0aGUgZWFybHkgMjFzdCBjZW50dXJ5IGNvbXBldGUgd2l0aCBhcnRpZmljYWwgaW50ZWxsaWdlbmNlPyBQcm9ibGVtcyBncm93IGV4cG9uZW50aWFsbHkgaW4gdGhlIG1vZGVybiBhZ2UsIGFuZCBvbmx5IHRoZSBzY2llbmNlcyB3aXRoICBtYWNoaW5lLWxlYXJuaWcgb24gdGhlaXIgc2lkZSBjYW4gZXhwZWN0IHRvIHRocml2ZSBieSBhcHBseWluZyBleHRyYW9yZGluYXJ5IGFwcGxpY2F0aW9ucyBvZiBtYWNoaW5lLWxlYXJuaW5nIHRvIG5ldHdvcmsgdGhlb3JpZXMuIDxzcGFuIGNsYXNzPVwibmV3XCI+XHJcbiBTb2Npb2xvZ2lzdHMgZGVhbCB3aXRoIHJlYWwtdGltZSwgbG9naWNhbCBhbmQgaGllcmFyY2hpY2FsIG5ldHdvcmsgbWFwcGluZ3MgdGhhdCBhcHBlYXIgYXJiaXRyYXJ5LCB5ZXQgYXJlIGNoYXJhY3Rlcml6ZWQgYnkgZml4ZWQgcGF0dGVybnMuIFRoaXMgaW1wbGllcyBhIGhpZ2hlciBsZXZlbCBvZiBjb21wZXRlbmN5IHRvIGFjY3VyYXRlbHkganVkZ2UgYSBwb2ludC1vZi12aWV3IHdpdGhvdXQgdGhlIGFiaWxpdHkgdG8gZGlyZWN0bHkgY29uc3VsdCBtYWNoaW5lIGxlYXJuaW5nLiA8aT5UaGlzIGlzIGEgQ29kZSBvciBCZSBDb2RlZCBtb21lbnQgaW4gdGhlIGxpZmUgdHJhamVjdG9yeSBvZiB0aGUgc29jaWFsIHNjaWVuY2VzLjwvaT48L3NwYW4+PC9wPlxyXG5cclxuXHJcblxyXG48cD4gIDxpPnRoZSBQb3dlciAgb2YgdGhlIFNvY2lhbCBTY2llbmNlcywgZXZlbiB3aGlsZSBwYXJhbGl5emVkLCBjYW5ub3QgYmUgdW5kZXJlc3RpbWF0ZWQ6PC9pPiBObyBvdGhlciBhY2FkZW1pYyBmaWVsZCB0aGFuIHNvY2lvbG9neSBoYXMgYWR2YW5jZWQgaW50byB0aGUgZGV0YWlscywgYW5kIGVuZGxlc3MgbmV0d29yayByYWJiaXQtaG9sZXMgdGhhdCBjaGFyYWN0ZXJpemUgc29jaWV0YWwgYmVoYXZpb3IuIE5vdCB1bnRpbCB0aGlzIHNlY29uZCBtaWxsZW5pYWwgZGVjYWRlIGNvdWxkIHRoZSBtYXJyaWFnZSBvZiBMYXJnZSBOdW1iZXIgU3RhdGlzdGljYWwgVGhlb3J5XHJcblxyXG5iZWNvbWUgY29uc3VtYXRlZCB3aXRoIHRoZSBicmlsbGlhbmNlIG9mIGVhcmx5IDE5MDAmIzM5O3MgU29jaW9sb2dpY2FsIEZyZW5jaCBOZXR3b3JrIFRoZW9yaWVzLCBsaWtlIE1hdXJpY2UgSGFsYnN3YWNoJiMzOTtzXHJcblxyXG53b3JrIG9uIHRoZSBjbGVhcmx5IGRlZmluZWQgbmV0d29yayBwYXR0ZXJucyBvZiBhIHNvY2lldHkmIzM5O3MgQ29sbGVjdGl2ZSBNZW1vcnkuPC9wPlxyXG5cclxuXHJcblxyXG48cD5TbywgY3VycmVudCBzb2Npb2xvZ3ksIGhhdmluZyBjb2xsZWN0ZWQgYW5kIHJlZmluZWQga25vd2xlZGdlIG9uIG5ldHdvcmsgYXJiaXRyYXJpbmVzcywgc3VjaCB0aGF0IEVjb25vbWljJiMzOTtzICZxdW90O2lycmF0aW9uYWxcclxuXHJcbmJlaGF2aW9ycyZxdW90OyBhbmQgTWF0aGVtYXRpY2FsICZxdW90O2NvbXBsZXhpdHkgbW9kZWxzJnF1b3Q7IGRvIG5vdFxyXG5cclxuPGk+dG91Y2ggdG8gdGhlIGJvbmU8L2k+IHRoZSBtZWFuaW5nLCB0aGUgaW50ZXJzZWN0aW9uYWxpdHkgb2YgbmV0d29yayBhbmFseXNpcywgd2hpY2ggbXVzdCBpbmNvcnBvcmF0ZSBzaW11bHRhbmVvdXNcclxuXHJcbm5vZGUgY2hhbmdlcyAocGVyc29uIGdldHMgam9iIC9vci8gZG9lcyBub3QgZ2V0IGpvYiksIG5ldHdvcmsgY2hhbmdlcyAoQWxsIGdldCBqb2JzIC9vci8gb25seSAzIG9mIDE1IG5ldHdvcmsgZ3JvdXBzXHJcblxyXG5nZXQgam9icyksIGFuZCBtb3N0IGltcG9ydGFudGx5IHRoZVxyXG5cclxuPGk+cmVsYXRpb25zaGlwPC9pPiBjaGFuZ2VzIChhbGwgam9icyBhbHdheXMgdXNlZnVsIC9vci8gaGFsZiBvZiBqb2IgZ3JvdXBzIG5vIGxvbmdlciB1c2VmdWwpIGFjcm9zcyB0aW1lIGFuZCBmaXhlZC48L3A+XHJcblxyXG5cclxuXHJcbjxwPkZpbmUuIFNvLCB3aHkgaXMgU29jaW9sb2d5JiMzOTtzIG5ldHdvcmsgdGhlb3J5IHNvIHZhbHVhYmxlLCB5ZXQgaW5hY2Nlc3NpYmxlLCBiZXlvbmQganVzdCB0aGUgbmV0d29yayBpbnNpZ2h0cyBnbGVhbmVkIGZyb20gMTl0aCBhbmRcclxuXHJcbjIwdGggY2VudHVyaWVzJiMzOTsgbmV0d29yayBwcm9ibGVtcz8gIEV1cm9wZWFuIHNvY2lvbG9neSBjYW1lIG9mIGFnZSBpbiB0aGUgYW5hbG9nIHNvY2lhbCBlcmEsIHdoaWxlIE5vcnRoXHJcblxyXG5BbWVyaWNhbiBTb2Npb2xvZ3kgb25seSByZWNlbnRseSBjb21lIG9mIGFnZSAoUXVlYmVjIGluIHRoZSAxOTYwJiMzOTtzIFtwb3N0LTE5NjhdLCBVLlMuIGluIHRoZSAxOTkwJiMzOTtzW3Bvc3QtMTk5OV0sXHJcblxyXG5pbiB0aGUgZGlnaXRhbCBzb2NpYWwgZXJhLiBUaGVyZWZvcmUsIHRoZSBwcm9ibGVtLXNvbHZpbmcgcGF0dGVybnMgb2YgcGFzdCBzb2Npb2xvZ3kgYXJlIGluaGVyZW50bHkgc21hbGwtZGF0YSBhbmRcclxuXHJcbm1vcmUgcXVhbGl0YXRpdmUgYW5hbHlzaXMsIGFuZCB0aHVzIG9ubHkgU29jaW9sb2d5IGluY29ycG9yYXRlcyAmcXVvdDtodW1hbi1uZXNzJnF1b3Q7IGludG8gdGhlIGJpbGxpb24gcm93cyBhbmRcclxuXHJcbmNvbHVtbnMgb2YgcXVhbnRpdGF0aXZlLS1udW1iZXJzLW9ubHktLWFuYWx5c2lzLjwvcD5cclxuXHJcblxyXG5cclxuPHA+Rm9yIGV4YW1wbGUsIE94Zm9yZC1kZXZlbG9wZWQgUy5JLkUuTi5BLiBTb2Z0d2FyZSBhY2NvbXBsaXNoZXMgdGhpcyB0YXNrLiBTSUVOQS0tbmFtZWQgZm9yIFNpbXVsYXRpb24gSW52ZXN0aWdhdGlvblxyXG5cclxuZm9yIEVtcGlyaWNhbCBOZXR3b3JrIEFuYWx5c2lzLS1zb2Z0d2FyZSBjYWxjdWxhdGVzIHRoZSByZWFsLXRpbWUgdmFsdWVzLCBkaXJlY3Rpb24sIGFuZCBjb25kaXRpb25zIG9mIGVhY2ggcmVsYXRpb25zaGlwXHJcblxyXG4obGluaykgaW4gYSBuZXR3b3JrLCBzaW11bHRhbmVvdXNseSBhcyBlYWNoIG5vZGUsIG5ldHdvcmssIG9yIGFsdGVyLWxpbmsgY2hhbmdlcyBvciBpcyBjaGFuZ2VkOyB3aXRoIHRoaXMsIGl0IGlzXHJcblxyXG5wb3NzaWJsZSB0byBpc29sYXRlIGRpcmVjdGlvbmFsLCBjb25kaXRpb25hbFxyXG5cclxuPGk+aW5mbHVlbmNlIGNoYW5nZTwvaT4gaW4gcmVhbC10aW1lLiBSZWFsLXRpbWUgc291bmRzIGltcG9zc2libGUsIGhvd2V2ZXIsIHRoZSBTSUVOQSBkb2N1bWVudGF0aW9uXHJcblxyXG48c3VwICA+Mjwvc3VwPiBkZXNjcmliZXMgaXRzIHByb2dyYW0gYWxnb3JpdGhtIHRvIHRoZSBzdGF0aXN0aWNhbCBhbmFseXNpcyBvZiBuZXR3b3JrIGRhdGEsIHdpdGggdGhlIGZvY3VzIG9uIHNvY2lhbCBuZXR3b3Jrcy48L3A+XHJcblxyXG5cclxuXHJcbjxwPkFuIGVhc3kgZXhhbXBsZSB0byBncmFzcCB0aGlzIGlzIHRoZSBjb25jZXB0IG9mIHdoZXRoZXIgYSBwZXJzb25cclxuXHJcbjxpPnNlbGYtc2VsZWN0cyA8L2k+KGUuZy4sIGR1ZSB0byBzdWJjb25zY2lvdXMgbGVhbmluZ3MpIGludG8gYSBncm91cCBhbmQgdGh1cyBtYXRjaGVzIHRvIGZydWl0aW9uIHRoZSBncm91cCYjMzk7c1xyXG5cclxuYmVoYXZpb3Igd2l0aCBsaXR0bGUgZ3JvdXAgaW5mbHVlbmNlPyBPciBkb2VzIHRoaXMgc2FtZSBwZXJzb24gam9pbiBhIGdyb3VwIGFuZCBlbXVsYXRlcyB0aGUgZ3JvdXAmIzM5O3MgYmVoYXZpb3IsXHJcblxyXG5ieSB0aGUgZ3JvdXAmIzM5O3MgaW5mbHVlbmNlIG92ZXIgdGltZS4gU29jaW9sb2dpY2FsIG5ldHdvcmsgYW5hbHlzaXMsIHVzaW5nIFNuamRlciYjMzk7cyBTSUVOQSBzb2Z0d2FyZSwgYWNoaWV2ZXNcclxuXHJcbnRoZSBpbXBvc3NpYmxlIHdpdGggdGhlIGNsb3NlZCwgZGlyZWN0ZWQgZ3JhcGggbmV0d29ya3MgdGhhdCBjaGFyYWN0ZXJpemUgYmxvY2tjaGFpbiB0ZWNobm9sb2d5LiBUaGUgbmV0d29yayBncmFwaFxyXG5cclxuY2FuIGJlIGhlcmUgdW5kZXJzdG9vZCBhcyBlbnRpcmUgKGNvbXBsZXRlKSBuZXR3b3JrcyAoaS5lLCB0aGUgYmxvY2tjaGFpbiBpbiBpdHMgZW50aXJldHkgd2l0aG91dCBoYXJkIGZvcmtzKSwgbm90XHJcblxyXG5hcyBwZXJzb25hbCAoZWdvY2VudGVyZWQpIG5ldHdvcmtzOiBVc2luZyB0aGlzIFNJRU5BIG1vZGVsIGFsbG93cyBmb3IgdGhlIG5lY2Vzc2FyeSBhc3N1bXB0aW9ucyB0aGF0IGEgc2V0IG9mIG5vZGVzXHJcblxyXG4oc29jaWFsIGFjdG9ycykgaXMgZ2l2ZW4sIGFuZCBhbGwgdGllcyAobGlua3MpIGJldHdlZW4gdGhlc2Ugbm9kZXMgYXJlIGtub3duIC0gZXhjZXB0IHBlcmhhcHMgZm9yIGEgbW9kZXJhdGUgYW1vdW50IFxyXG5vZiBtaXNzaW5nIGRhdGE8L3A+IFxyXG5cclxuPHA+SWYsIGFuZCBvbmx5IGlmLCB0aGlzIGxldmVsIG9mIGFuYWx5c2lzIG1heSBiZSBhY2hpZXZlZCwgdGhlIGJsb2NrY2hhaW4gZGV2ZWxvcG1lbnQgbWF5IGZvbGxvdyBhIGxpbmVhciwgZGlyZWN0ZWRcclxuXHJcbnBhdGggb2YgbWF0dXJpdHkgd2l0aCBzb2NpYWwgYW5kIHdvcmxkIG5lZWRzLjxzcGFuIGNsYXNzPVwibmV3XCI+IFVudGlsICAgU29jaWFsIFNjaWVuY2UgTmV0d29yayBUaGVvcmlzdHMgc3RvcCBmcm9tIGJhc2luZyB0aGVpciBudW1lcmljYWwgYW5hbHlzaXMgb24gdGhlIG11dGFibGUgc2FuZCBvZiB0aGVvcnksIHJhdGhlciB0aGFuIHRoZW9yeSBiYXNlZCBvbiB0aGUgICBmb3VuZGF0aW9uIG9mIG51bWVyaWNhbCBzY2llbmNlLCA8aT5hbnkgYXR0ZW1wdCBhdCBjb25jbHVzaW9uLi4ueW91IGd1ZXNzZWQgaXQuLi5jYW5ub3QgYmUgY29uY2x1c2l2ZS48L2k+U28sIHRoZSBzb2NpYWwgc2NpZW5jZXMgbXVzdCBjb25zdWx0IHRoZSBoYXJkIHNjaWVuY2VzLCBvdGhlcndpc2UgdGhleSByaXNrIHNxdWFuZGVyaW5nIGNvdW50bGVzcyB5ZWFycyBvZiB0YWxlbnRlZCB0aGVvcmlzdHMnIHdvcms7IDxpPnRoZSBkaXNjaXBsaW5lJ3MgZXhlY3V0aXZlIGZ1bmN0aW9ucyBhcmUgY3V0IG9mZiBmcm9tIGl0J3MgaW5jcmVhc2luZ2x5IGluYWNjZXNzaWJsZSAoYW5kIGluY3JlYXNpbmdseSBwb3dlcmZ1bCkga25vd2xlZGdlIGJhc2UuPC9pPiAtLVN1Y2ggYSB0YWxlbnRlZCwgcG93ZXJmdWwgVGhvcm91Z2hicmVkIG9mIGEgU2NpZW5jZSwgdGhhdCBzdGlsbCB3YW5kZXJzIHdpdGhvdXQgYSBoZWFkIGZvciB0ZWNobmljYWwgZGlyZWN0aW9uLjwvc3Bhbj48L3A+XHJcbmA7XHJcbnZhciBibG9nY2l0ZTEgPSBgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gXHJcbjxhIGhyZWY9XCJodHRwOi8vd3d3LmpvdXJuYWxzLnVjaGljYWdvLmVkdS9kb2kvYWJzLzEwLjEwODYvMjI2NTUwXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cDovL3d3dy5qb3VybmFscy51Y2hpY2Fnby5lZHUvZG9pL2Ficy8xMC4xMDg2LzIyNjU1MDwvYT5cclxuIFxyXG5cclxuPC9wPlxyXG5cclxuPHA+IFxyXG4yLiBcclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LnN0YXRzLm94LmFjLnVrL35zbmlqZGVycy9zaWVuYS9cIiAgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vd3d3LnN0YXRzLm94LmFjLnVrL35zbmlqZGVycy9zaWVuYS88L2E+XHJcbjxiciAvPlxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjMuIFRoZSBUaGVvcmV0aWNhbCBDb3JlIG9mIHRoZSBOZXcgSW5zdGl0dXRpb25hbGlzbSwgRWxsZW4gTS4gSW1tZXJndXQ6IFBvbGl0aWNzICZhbXA7IFNvY2lldHksIFZvbC4gMjYsIElzc3VlIEksIHBwLiA1LTM0IFxyXG48YSBocmVmPVwiaHR0cDovL2pvdXJuYWxzLnNhZ2VwdWIuY29tL2RvaS9hYnMvMTAuMTE3Ny8wMDMyMzI5Mjk4MDI2MDAxMDAyP2pvdXJuYWxDb2RlPXBhc2FcclxuXCIgIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly9qb3VybmFscy5zYWdlcHViLmNvbS9kb2kvYWJzLzEwLjExNzcvMDAzMjMyOTI5ODAyNjAwMTAwMj9qb3VybmFsQ29kZT1wYXNhXHJcbjwvYT5cclxuPC9wPlxyXG5gIDtcclxuKi9cclxuICB2YXIgdXJsID0gIFxyXG4gIFsgXHJcbiAge1xyXG4gICAgaWQ6JzE0JywgXHJcbiAgZGlkOicwNi0zMC0xOCcsXHJcbiAgZGF0ZTonSnVuZSAzMC1KdWx5IDEsIDIwMTg8YnIgLz5XZWVrZW5kICcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgdGl0bGU6J1RoZSBTcGFjZSBQb3dlcnMgdGhhdCBCZTo8YnIgLz5XaGVuIEJvZWluZyBpc3N1ZXMgYSBUaWNrZXQgdG8gdGhlIE1vb24nLCBcclxuICAgIHBvc3Q6YmxvZ3Bvc3QxNCxcclxuICAgYmxvZ2NpdGU6YmxvZ2NpdGUxNFxyXG4gfSx7XHJcbiAgaWQ6JzEzJywgXHJcbmRpZDonMDYtMjktMTgnLFxyXG5kYXRlOidKdWx5IDI5LCAyMDE4JyxcclxuICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICBjYXQzOidBLkkuTm93JyxcclxuICB0aXRsZTonQS5JLiAmYW1wOyBXb3JrLCBQYXJ0IElJPGJyIC8+TGVhcm5pbmcgdG8gTGVhcm4gYWxvbmdzaWRlIGEgQ2hlZXJmdWwgQXV0b21vdG9uIFdvcmstUGFydG5lcicsIFxyXG4gIHBvc3Q6YmxvZ3Bvc3QxMyxcclxuIGJsb2djaXRlOmJsb2djaXRlMTNcclxufSxcclxuIHtcclxuICAgIGlkOicxMicsXHJcbiAgIFxyXG4gIGRpZDonMDYtMjgtMTgnLFxyXG4gIGRhdGU6J0p1bmUgMjgsIDIwMTggJyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzonQS5JLk5vdycsXHJcbiAgICB0aXRsZTonQS5JLiAmYW1wOyBXb3JrLCBQYXJ0IEk8YnIgLz5GaWdodGluZyBPYnNlc3NpdmUgQ29tcHVsc2l2ZSBRdWFudGl0YXRpdmUgT3B0aW1pemF0aW9uIERpc29yZGVyIGFuZCB0aGUgU2xpZGUgaW50byBhIFdlYmVyaWFuIElyb24gU2hlbGwnLFxyXG5cclxuICAgIHBvc3Q6YmxvZ3Bvc3QxMixcclxuICAgYmxvZ2NpdGU6YmxvZ2NpdGUxMlxyXG4gfSx7XHJcbiAgICBpZDonMTEnLFxyXG4gICBcclxuICBkaWQ6JzA2LTI3LTE4JyxcclxuICBkYXRlOidKdW5lIDI3LCAyMDE4ICcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICB0aXRsZTonQXBwbGU6IFlvdSBhcmUgb3VyIFRlY2ggTGVhZGVyIScsXHJcblxyXG4gICAgcG9zdDpibG9ncG9zdDExLFxyXG4gICBibG9nY2l0ZTpibG9nY2l0ZTExXHJcbiB9LCB7XHJcbiAgaWQ6JzEwJyxcclxuICBkaWQ6JzA2LTI2LTE4JyxcclxuICBkYXRlOidKdW5lIDI2LCAyMDE4ICcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgdGl0bGU6J1QtTmF0aW9uIE1ha2VzIHRoZSBDYXNlOiBTcHJpbnQgTWVyZ2VyIHRha2VzIG9uIHRoZSBTZW5hdGUnLFxyXG4gICAgXHJcbiAgcG9zdDpibG9ncG9zdDEwLFxyXG4gYmxvZ2NpdGU6YmxvZ2NpdGUxMFxyXG59LCAge1xyXG4gICAgaWQ6JzknLFxyXG4gICAgZGlkOicwNi0yNS0xOCcsXHJcbiAgICBkYXRlOidKdW5lIDI1LCAyMDE4ICcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J0EuSS5Ob3cnLFxyXG4gICAgdGl0bGU6J01vZGVybiBQcm9tZXRoZXVzLCBQYXJ0IElJSTogPGJyIC8+QWNjZWxlcmF0aW5nIEV2b2x1dGlvbiBvZiBOZXVyYWwgTmV0d29ya3MgJmFncmF2ZTsgbGEgTnZpZGlhIEdQVScsXHJcbiAgICBwb3N0OmJsb2dwb3N0OSxcclxuICAgYmxvZ2NpdGU6YmxvZ2NpdGU5XHJcbiB9LCAge1xyXG4gICAgaWQ6JzgnLFxyXG4gICAgZGlkOicwNi0yMy0xOCcsXHJcbiAgICBkYXRlOidKdW5lIDIzLTI0LCAyMDE4PGJyIC8+V2Vla2VuZCcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J0EuSS5Ob3cnLFxyXG4gICAgdGl0bGU6J01vZGVybiBQcm9tZXRoZXVzLCBQYXJ0IElJOiA8YnIgLz5Ccm9hZGVuaW5nIEV2b2x1dGlvbiBvZiBEZWVwIExlYXJuaW5nIFNwZWNpZXMgJmFncmF2ZTsgbGEgTmV1cmFsIE5ldHdvcmsnLFxyXG4gICAgcG9zdDpibG9ncG9zdDgsXHJcbiAgIGJsb2djaXRlOmJsb2djaXRlOFxyXG4gICB9LCAgIHsgXHJcbiAgICBpZDonNycsXHJcbiAgICBkaWQ6JzA2LTIyLTE4JyxcclxuICAgIGRhdGU6J0p1bmUgMjIsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOidBLkkuTm93JyxcclxuICAgIHRpdGxlOidNb2Rlcm4gUHJvbWV0aGV1cywgUGFydCBJLjxiciAvPk1hZGUgZnJvbSA4IGJpbGxpb24gdHJhbnNpc3RvcnMgYW5kIDEsMDAwIEN1ZGEgQ29yZXM6PGJyIC8+IFRvZGF5XFwncyBJcnJlcGxhY2VhYmxlIE5WaWRpYSBHUFUnLFxyXG4gICAgcG9zdDpibG9ncG9zdDcsXHJcbiAgIGJsb2djaXRlOmJsb2djaXRlN1xyXG4gICB9LCB7IFxyXG4gICAgaWQ6JzYnLFxyXG4gICAgZGlkOicwNi0yMS0xOCcsXHJcbiAgICBkYXRlOidKdW5lIDIxLCAyMDE4JyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzonU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICB0aXRsZTonXCJUYXhhdGlvbiBXaXRob3V0IFJlcHJlc2VudGF0aW9uIGlzIFR5cmFubnkhXCI8YnIgLz48YnIgLz4tLSBKYW1lcyBPdGlzLCAxNzc2JyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3Q2LFxyXG4gICBibG9nY2l0ZTpibG9nY2l0ZTZcclxuICAgfSwgXHJcbiAgIHsgXHJcbiAgICBpZDonNScsXHJcbiAgICBkaWQ6JzA2LTIwLTE4JyxcclxuICAgIGRhdGU6J0p1bmUgMjAsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOidTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgIHRpdGxlOidBIEhlYWx0aHkgSW50ZXJuZXQgaXMgYSBGYXN0LCBDb29wZXJhdGl2ZSBJbnRlcm5ldDogPGJyIC8+TmV0IE5ldXRyYWxpdHkgUHJvdGVjdGlvbnMgbW92ZSB0byBTdGF0ZS1MZXZlbCBMZWdpc2xhdGlvbicsXHJcbiAgICBwb3N0OmJsb2dwb3N0NSxcclxuICAgYmxvZ2NpdGU6YmxvZ2NpdGU1XHJcbiAgIH0sIHsgXHJcbiAgICBpZDonNCcsXHJcbiAgICBkaWQ6JzA2LTE5LTE4JyxcclxuICAgIGRhdGU6J0p1bmUgMTksIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOidNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTonUmlzZSBvZiB0aGUgRW1iYXR0bGVkIDR0aCBFc3RhdGUnLFxyXG4gICAgcG9zdDpibG9ncG9zdDQsXHJcbiAgIGJsb2djaXRlOmJsb2djaXRlNFxyXG4gICB9LCAgIFxyXG4gICAgeyBcclxuICAgIGlkOiczJyxcclxuICAgIGRpZDonMDYtMTgtMTgnLFxyXG4gICAgZGF0ZTonSnVuZSAxOCwgMjAxOCcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6J0EuSS5Ob3cnLFxyXG4gICAgdGl0bGU6J01hY2hpbmUgTGVhcm5pbmcsIERlbW9jcmF0aXplZDo8YnIgLz5QYXJ0IElJOiBEZWVwIExlYXJuaW5nXFwncyBPcmlnaW4gU3RvcnknLFxyXG4gICAgcG9zdDpibG9ncG9zdDMsXHJcbiAgIGJsb2djaXRlOmJsb2djaXRlM1xyXG4gICB9LCAgeyBcclxuICAgIGlkOicyJyxcclxuICAgIGRpZDonMDYtMTYtMTgnLFxyXG4gICAgZGF0ZTonSnVuZSAxNi0xNywgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOidTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgIHRpdGxlOidNYWNoaW5lIExlYXJuaW5nLCBEZW1vY3JhdGl6ZWQ8YnIgLz5QYXJ0IEk6IEdvb2dsZVxcJ3MgTUwgS2l0JyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3QyLFxyXG4gICBibG9nY2l0ZTpibG9nY2l0ZTJcclxuICAgfSAgXHJcbiAgIC8qXHJcbiAgICB7IFxyXG4gICAgaWQ6JzEnLFxyXG4gICAgZGlkOicwNi0xNS0xOCcsXHJcbiAgICBkYXRlOidKdW5lIDE1LCAyMDE4JyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzonTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6JyBUaGUgU3BlY3RyZSBvZiBhIEhlYWRsZXNzIEhvcnNlbWFuOjxiciAvPiBXaHkgIFNvY2lvbG9naXN0cyA8aT4gYXJlPHNwYW4gY2xhc3M9XCJuZXdcIj5uXFwndCA8L3NwYW4+PC9pPiBLZXkgUGxheWVycyBpbiBEYXRhIEFuYWx5c2lzIHdpdGhpbiB0aGUgRG9tYWluIG9mIEJsb2NrY2hhaW4gVGVjaG5vbG9naWVzPzxiciAvPjxzcGFuIGNsYXNzPVwibmV3XCI+QSBSZS1EbyBvZiBteSA8cyA+RmViIDEwLDIwMTg8L3M+IHBvc3Q8L3NwYW4+JyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3QxLFxyXG4gICBibG9nY2l0ZTpibG9nY2l0ZTFcclxuICAgfSovXHJcbiAgIFxyXG4gICBdIDtcclxuXHJcbiAgIGZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YCA7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLWp1bmVcIikuaW5uZXJIVE1MICs9IGNhdDsgXHJcbn0gXHJcbiBcclxudmFyIGk7XHJcbmZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICB2YXIgY2F0TW9kID0gYFxyXG4gIDxkaXYgaWQ9XCJtb2RfJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0Rpdk1vZFwiPiBcclxuICA8aHIgLz4gIFxyXG4gIDxhIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCIgIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtanVuZS1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDsgXHJcbn07IFxyXG4gXHJcbmNvbnNvbGUubG9nKCdibG9nZ2VyLWp1bmUnKTtcclxuICAvLyBjb25zb2xlLmxvZyhhbmd1bGFyLnRvSnNvbih1cmwpKTtcclxufTtcclxuYmxvZ2dlckp1bmUoKTsgIFxyXG5cclxuIiwiXHJcblxyXG52YXIgYmxvZ2dlck1hciA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDIxID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5XYXNoaW5ndG9uIEQuQy4gIFxyXG4gIE5vdCBOb3JtYWxseSBkb2VzIFdvbmRlcldvbWFuIFNob3cgaGVyIEZhY2UsIGJ1dCB0aGUgc3R1ZGVudCBwcm90ZXN0IHRha2VzIHRoZSBkYXkgb24gZ3VuIGNvbnRyb2wuIEVtbWEgR29uemFsZXotLW9uZSBvZiB0aGUgUGFya2xhbmQgU2Nob29sIFNob290aW5nIHN1cnZpdm9ycywgYWRkcmVzc2VkLCBhbmQgbWFyY2hlZCB3aXRoLCBodW5kcmVkcyBvZiB0aG91c2FuZHMgb2YgbWlkZGxlLSBhbmQgaGlnaC1zY2hvb2xlcnMsIHRvb2sgdG8gdGhlIHN0cmVldHMgb2YgRC5DLiB0byBwcm90ZXN0IGxheCBndW4tY29udHJvbCwgZS5nLiBBSy00NydzIHJlYWRpbHkgYXZhaWxhYmxlIGF0IGEgbW9tZW50J3Mgbm90aWNlIC4uLiBmb3IgaG9tZSBwcm90ZWN0aW9uPyBJIHdvdWxkbid0IHdhbnQgdG8gYmUgYSBuZWlnaGJvciBmb3IgZmVhciBvZiBjb2xsYXRlcmFsIGRhbWFnZSEgU28gdGVjaG5vbG9neSBrZWVwcyBvbmUtdXBwaW5nIHRoZSBvbCcgc2l4LXNob290ZXIgdG8gc29tZXRoaW5nIGVhc2lseSBsYWJlbGVkIGFzIDxpPiBhIFdlYXBvbiBvZiBNYXNzIERlc3RydWN0aW9uPC9pPiAuLi4gc28gaXMgaXQgc3RpbGwgYSBndW4/XHJcbiAgPC9wPlxyXG4gIDxwID5MYXN0IHdlZWsgYW5kIHRoaXMgd2VlaywgdGhlIG91dC1vZi1jb250cm9sIGhhbmRndW4gcHJvYmxlbSBpcyBpbiB0aGUgbmV3cy4gVGhpcyBsZWFkcyBvbmUgdG8gYmVsaWV2ZSB0aGVyZSBpcyB0aGUgcm9vdCBwcm9ibGVtIHdpdGggdGhlIDxpPmRlZmluaXRpb248L2k+IG9mIGEgZ3VuLiBBcyBhbHdheXMuIERlZmluaXRpb25zIHN0YXJ0IHdhcnMgYW5kIHdvcmxkIHdhcnMtLWFmdGVyIGFsbCBvZiBsYXN0IGNlbnR1cnksIGRpZCBhbnlvbmUgZGVjaWRlIHdobyBjb250cm9scyB0aGUgQ29hbCBvZiBTdWRldGVubGFuZD8gIFlvdSBjYW4gYmV0IGV2ZXJ5b25lIHRoZXJlIHNwZWFrcyB0d28gbGFuZ3VhZ2VzLCBzdGlsbC4gVGhlIDxpPmRlZmluaXRpb25hbCA8L2k+IGFuc3dlciBtYWtlcyB0aGUgYW5zd2VyOiBCdXQgdGhpcyBpcyBhIHByb2JsZW0gaW4gdGhlIHRlY2ggYWdlIGJlY2F1c2UgZGVmaW5pdGlvbnMgY2hhbmdlLCA8aT5zY2FsZSBvZiBlZmZlY3QgY2hhbmdlczwvaT4sIGFuZCB0aGlzIG1ha2VzIHRoZSBkZWZpbml0aW9uIGltcG9zc2libGUgdG8gcGluIGRvd24uIFRoZSBkZWZpbml0aW9uIGlzIGFzIHJlbGF0aXZlIGFzIHRoZSB0ZWNobm9sb2dpY2FsIGNoYW5nZSBtYWtlcyBpdC4gIFxyXG4gIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cDovL3d3dy5sYXRpbWVzLmNvbS9sb2NhbC9jYWxpZm9ybmlhL2xhLW1lLXNhdHVyZGF5LXdhbGtvdXRzLWxpdmV1cGRhdGVzLWVtbWEtZ29uemFsZXotbGVhZHMtcmVtYXJrYWJsZS1tb21lbnQtb2YtMTUyMTkxNjkzMS1odG1sc3RvcnkuaHRtbFwiPmh0dHA6Ly93d3cubGF0aW1lcy5jb20vbG9jYWwvY2FsaWZvcm5pYS9sYS1tZS1zYXR1cmRheS13YWxrb3V0cy1saXZldXBkYXRlcy1lbW1hLWdvbnphbGV6LWxlYWRzLXJlbWFya2FibGUtbW9tZW50LW9mLTE1MjE5MTY5MzEtaHRtbHN0b3J5Lmh0bWw8L2E+IDwvcD5gXHJcblxyXG4gIHZhciBibG9ncG9zdDIwID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5MYXN0IHdlZWsgYW5kIHRoaXMgd2VlaywgdGhlIG91dC1vZi1jb250cm9sIGhhbmRndW4gcHJvYmxlbSBpcyBpbiB0aGUgbmV3cy4gVGhpcyBsZWFkcyBvbmUgdG8gYmVsaWV2ZSB0aGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgPGk+ZGVmaW5pdGlvbjwvaT4gb2YgYSBndW4uIEFzIGFsd2F5cy4gRGVmaW5pdGlvbnMgc3RhcnQgd2FycyBhbmQgd29ybGQgd2Fycy0tYWZ0ZXIgYWxsIG9mIGxhc3QgY2VudHVyeSwgZGlkIGFueW9uZSBkZWNpZGUgd2hvIGNvbnRyb2xzIHRoZSBDb2FsIG9mIFN1ZGV0ZW5sYW5kPz8gWW91IGNhbiBiZXQgZXZlcnlvbmUgdGhlcmUgc3BlYWtzIHR3byBsYW5ndWFnZXMsIHN0aWxsLiBUaGUgPGk+ZGVmaW5pdGlvbmFsIDwvaT4gYW5zd2VyIG1ha2VzIHRoZSBhbnN3ZXI6IFRoaXMgaXMgd2h5IEJsb2NrY2hhaW4gdGVjaG5vbG9neS0tc3RyYWRkbGVkIGJldHdlZW4gbXlyaWFkIHN0YXJ0LXVwcywgY291bnRsZXNzIGluc3RpdHV0aW9ucyBhbmQgYSBodW5kcmVkIGJyaWxsaWFudCBtaW5kcyBpcyBUaGUgYW5zd2VyIHRvIG91ciBzY2FsYWJpbGl0eSBwcm9ibGVtcy4gICBcclxuXHJcbiAgPC9wPjxwPlRoZSBwcm9ibGVtIGlzIHRoYXQgZGF0YSBzdHJ1Y3R1cmVzIGdyb3cgYXQgZGlmZmVyZW50aWFsIHJhdGVzLCBzb21lIGV4cG9uZW50aWFsLCBzb21lIGxpbmVhciwgc29tZSBzbG93ZXIsIHNvbWUgYXMgYSBmdW5jdGlvbiBvZiB0aW1lIG9yIG90aGVyIHZhcmlhYmxlLiAgWWV0LCBvdXIgZGF0YSBhbmFseXNpcyBuZWVkcyBhcmUgY2xlYXI6IFdlIG5lZWQgYSBuZXcgdGVjaG5vbG9neSB0byBoYW5kbGUgcXVpY2tseSwgc2VjdXJlbHkgYW5kIGVmZmljaWVudGx5IHRoZSA8aT5OZXR3b3JrZWQsIFJlbGF0aW9uYWwgRGF0YSBQcm9ibGVtPC9pPiwgd2hpY2ggc2NhbGVzIGV4cG9uZW50aWFsbHkgd2l0aCB0cmFkaXRpb25hbCBkYXRhIHN0cnVjdHVyZXMsIGxpa2Ugb2xkLWZhc2hpb25lZCBFeGNlbC1saWtlIFJvdy0mYW1wOy1Db2x1bW4gZGF0YSBzdHJ1Y3R1cmVzLiBZZXQsIGFzIG9uZSB3b3VsZCBsb2dhcml0aG1pemUgdGhlIGVxdWF0aW9uIHRvIGJlc3QgYWRhcHQgbmV3IGRhdGEsIHNvIG11c3QgdGhlIGNvbXB1dGVyIGRhdGEgc3RydWN0dXJlIGFkanVzdCBhY2NvcmRpbmdseS4gPC9wPlxyXG4gIDxwPlRvbyByaWdpZCwgdGhlIHdvcmxkIHR1cm5lZCB0byByZWxhdGlvbmFsLCBub24tU3RydWN0dXJlZCBRdWVyeSBMYW5ndWFnZSAoU1FMKSBkYXRhLCBwYXJ0aWFsbHkgZm9yIHRoZSBuZWVkIHRvIGRpc2xhdGUgPGk+ZGF0YSBvYmplY3RzPC9pPiBmcm9tIHRoZWlyIHRhYmxlcy4gVGhlIHdvcmxkIG5lZWRlZCB0aGF0IGNlbGwgYXMgYSBmcmVlLXJhZGljYWwgaW4gb3JkZXIgdG8gbWltaWMgdGhlIGRhdGEgc3RydWN0dXJlIG9mIHNvY2lldGFsbHktbmV0d29ya2VkIHNvY2lldHkuICBBbGFzLCBhIHNjaWVuY2UgYWxyZWFkeSBhdCBoYXJkIHdvcmsgd2l0aCBDYW1icmlkZ2UgQW5hbHl0aWNhLS1hZ2FpbiB3aGF0J3MgdGhhdCBmaWVsZCBvZiBzdHVkeSBjYWxsZWQgYWdhaW4sIFNvY2lvbG9neSwgcmlnaHQ/IDwvcD5cclxuICA8cD5cclxuICBcclxuICA8L3A+YFxyXG4gIHZhciBibG9ncG9zdDE5ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5JIG1pc3Rha2VubHkgbGFpZCB3YXN0ZSB0byBBLkkuJ3MgcmVwdXRhdGlvbiBpbiBteSBsYXN0IHBvc3QuIEl0IDxpPmRpZDwvaT4gbGV0IHVzLCBvdXIgd2hvbGUgc29jaWV0eSwgbGV0IHVzIGRvd24sIGFuZCBtYXliZSB0aGUgZm9yZW5zaWNzIHdpbGwgZ2l2ZSB1cyA8aT5hIGZldyBleGN1c2VzPC9pPiBkb3duIG9uIHRoZSByb2FkLiBIb3dldmVyLCBcImhvbWljaWRlIGJ5IEEuSS4gKGFrYSBVYmVyKVwiIHdpbGwgbmVlZCB0byBiZSB1cGRhdGVkIGluIHJlY29yZHMuIEJ1dCwgYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2UgaXMgbm90IGF0IGZhdWx0LiBUaGVyZSBhcmUgYSBmZXcgc29mdHdhcmUgZW5naW5lZXJzIHRoYXQgZGlkIHRoZSBiZXN0IHRoZXkgY291bGQtLXdpdGggdGhlIHRpbWUgdGhlaXIgc3VwZXJpb3JzIGdhdmUgdGhlbS4gIFViZXIgbGVhZGVyc2hpcCwgbGV0J3MgaG9wZSwgd2lsbCBiZSBkZXRlcnJlZCBmcm9tIGZ1dHVyZSBjYXJlbGVzc25lcyB0byBjb21lLiAgIDwvcD5cclxuXHJcbiAgPHA+VGhhdCBkaWF0cmliZSBzYWlkLCBJIGRvIGFwcHJlY2lhdGUgYW4gVWJlcidzIHByb3hpbWl0eSB3aGVuIEknbSBzdHJhbmRlZCBhdCAyOjAwIGFtIGluIGEgYmFkIHBhcnQgb2YgdG93bi4gV2h5PyBCZWNhdXNlIEkgZG9uJ3QgbmVlZCB0byBwbGFuIGFoZWFkIC0tIFViZXIgaXMgdGhlcmUhIEFuZCwgc2FkbHksIEkgZG9uJ3QgbmVlZCB0byByZWFkIG9yIHN0dWR5IC0tIEdvb2dsZSBpcyB0aGVyZSEgQnV0IHdhaXQsIGRvbid0IGp1ZGdlIG1lLCBJJ20gbm90IGxhenkhIFRoYXQgYmVpbmcgc2FpZCwgSSBoYXZlIG15IG93biBzb3VsLXNlYXJjaGluZyB0byBkbzogVEVDSE5PTE9HWSBBSURTIEFORCBBQkVUUyBNRSBBTkQgTVkgQUNUSU9OUywgYnV0IGl0IGRvZXMgbm90IHJ1biBteSBzaG93PiBPbmx5IEkgdGFrZSByZXNwb25zaWJpbGl0eSBmb3IgbXkgb3duIGFjdGlvbnM6IEkgYWxsb3cgdGVjaG5vbG9neSBpbnRvIG15IGxpZmUgYXMgYSB0b29sLCBhbmQgeWV0IEkgICBob2xkIHRoZSBwb3dlciBjb3JkLiBJIHRha2UgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSB0ZWNoIHRoYXQgZm9sbG93cyBtZS0tYW5kIGJlbGlldmUgbWUsIEkgbmVlZCB0aGF0IHRlY2guIEFuZCBzbyBkbyB5b3UuIE5vdCBvbmx5IHNvLCBidXQgdGhlIHdvcmxkLCBhbmQgdGhlIGVjb2xvZ2ljYWwgZmF0ZSBvZiBvdXIgPGkgc3R5bGU9XCJjb2xvcjpncmVlblwiPmdyZWVuIGVhcnRoPC9pPj4gYWxzbyBkZXBlbmRzIG9uIHRlY2gsIEEuSS4gc3BlY2lmaWNhbGx5LiA8L3A+XHJcbiAgPHA+XHJcbiAgSHVtYW5raW5kIGhhcyBhbHJlYWR5IGR1ZyBhbiBlY29sb2dpY2FsIChkYXJlIEkgc2F5ICdhbGthbGluZScpIHBpdCBkZWVwZXIgdGhhbiBjYW4gYmUgZHVnIG91dCBvZjogRmxvb2RpbmcsIGZvcmVzdCBmaXJlcywgYW5kIFNwZWNpZXMgRXh0aW5jdGlvbnMuIEEuSS4gaXMgPGkgc3R5bGU9XCJjb2xvcjpicm93blwiPiBpcyA8L2k+PiB0aGUgb25seSB2aWFibGUgaG9wZSBzbyB3ZSwgaS5lLiBVYmVyLCBzaG91bGRuJ3QgcHJlbWF0dXJlbHkgc3BvaWwgaXRzIGRldmVsb3BtZW50LiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlNldmVyYWwgcXVlc3Rpb25zIHJhaXNlIHRoZWlyIHVnbHkgaGVhZCB3aGVuIEEuSS4gY2FuJ3QgaGVscCBFYXJ0aCBvciBodW1hbmtpbmQuIExpa2UgaXQgb3Igbm90LCBBLkkuIHdpbGwgbmVlZCB0byAzLUQgcHJpbnQgdGhlIGR5a2VzIGZvciB0aGUgc3Vua2VuIGNvYXN0YWwgY2l0aWVzLS1saWtlIHRpbnkgaXNsYW5kIERlbiBIYWFndWUsIHRoZSBtb3N0IGJlYXV0aWZ1bCBjaXR5IGluIHRoZSB3b3JsZC4gTmV4dCwgQS5JLiB3aWxsIG1ha2UgaXJyZWxldmFudCBmb3NzaWwgZnVlbHMgYnkgMjAzMCwgaWYgbm90IGJlZm9yZTsgYW5kIHRob3NlIGNhdWdodCBwb2xsdXRpbmcgd291bGQgYmUgZmluZWQgdG8gZGVhdGgsIGFueXdheS4gV2l0aG91dCBBLkkuLCBub25lIG9mIHRoZXNlIHdvcnRod2hpbGUgZ29hbHMgYXJlIHBvc3NpYmxlLiBUaGlzIHByZWNhcmlvdXMsIGRpZmZpY3VsdCBhbmQgbW9zdCBvZiBhbGwgbGFib3Jpb3VzIGpvYiBvZiBkZXNpZ25pbmcgb3VyIG93biBzb2x1dGlvbnMgd2lsbCB0YWtlIHRpbWU6IEZvciB0aGlzIHJlYXNvbiwgVWJlciBzaG91bGQgYmUgc2hhbWVkIGV2ZW4gZnVydGhlciBmb3IgdGhlaXIgc2hvcnQtY3V0cywgYW5kIGV2ZW50dWFsIGVycm9ycyBvZiBpbnRlcm5hbCwgb3JnYW5pemF0aW9uYWwgcHJvYmxlbXMuIDxpPlViZXIncyBleHBlcmllbWVudGFsLCB0YXgtZnJlZSBcIlRlc3RpbmcgU2FuZGJveFwiIGNhbm5vdCBiZSB0aGUgZXJzdHdoaWxlIHNhZmUgbmVpZ2hib3Job29kcyBvZiBTdXJidXJiYW4gUGhvZW5peCwgd2l0aG91dCBwcm9wZXIgY2F1dGlvbi48L2k+IDwvcD5cdFx0XHJcbiAgPHA+QXJlIFViZXIncyBjb3Jwb3JhdGUgZGVzaXJlcywgbWFya2V0IHN0cm9uZ2hvbGQsIGFuZCBzaGFyZWhvbGRlcnMnIGRlbGlnaHQgbW9yZSB3b3J0aHdoaWxlIHRoYW4gPGk+YW4gZW50aXJlIHNlbnNpdGl2ZSBmaWVsZCBvZiBtYWNoaW5lLWxlYXJuaW5nIHJlc2VhcmNoPzwvaT4gTm8uIFViZXIgbXVzdCBiZSB3YXJuZWQgdG8gbm90IHN0ZWFsIGNvcnBvcmF0ZSBzZWNyZXRzIGZyb20gV2F5bW8sIHRoZW4gcHJvY2VlZCB0byBiZSA4NidkIGZyb20gQ2FsaWZvcm5pYSwgdGhlbiBicnVzaCBhc2lkZSB3aXRoIGV4Y3VzZXMgdGhlIDxpPmtpbGxpbmcgb2YgYW4gaW5ub2NlbnQgQXJpem9uYSBiaWN5Y2xpc3Q8L2k+LjwvcD5cclxuICA8cD5cclxuICBXaG8gY2FuIGNvdW50IHRoZSBudW1iZXIgb2YgdmVyeSBmZWlzdHkgdGF4aS1tZW4gYW5kIC13b21lbiB0aGF0IGFyZSBub3QgZmFucyBvZiB0aGUgaW5mYW1vdXNseSBoYXN0eSBjdWx0dXJlIG9mIFViZXIuIFRoZSB0ZWFtIG9mIGxhd3llcnMgbmVlZGVkIHRvIGJlIDg2J2QgZnJvbSBGcmFuY2U/IFViZXIgYWxyZWFkeSBrbm93cywgYmVjYXVzZSBtYXliZSB0aGV5IGtub3cgQi5ELk8hIFxyXG4gIDwvcD5cclxuICA8cD48L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxNy9hcHIvMDcvdWJlci13YXltby1sYXdzdWl0LWxpZGFyXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxNy9hcHIvMDcvdWJlci13YXltby1sYXdzdWl0LWxpZGFyPC9hPlxyXG4gIDwvcD5gXHJcblxyXG4gIHZhciBibG9ncG9zdDE4ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BLkkuIGdlbmVyYWxseSwgYW5kIHNwZWNpZmljYWxseSBVYmVyJ3MgU2VsZi1Ecml2aW5nIFRlY2gsIGJvdGggaGF2ZSBmYWlsZWQgc29jaWV0eSB0aGlzIHdlZWsuIEFsdGhvdWdoIHdlIGNvdWxkIGFsbCBkZWJhdGUgdGhlIG1lcml0cyBvZiBcIkxpZGFyXCIsIGkuZS4gbGFzZXItYmFzZWQgdmlzaW9uLCB0aGUgcHJpbWFyeSBjb25jZXJuLCBpbiBteSB2aWV3LCBpcyBVYmVyJ3Mgb2J2aW91cyBjYXJlbGVzc25lc3MgaW4gcnVzaGluZyB0aGVpciBzZWxmLWRyaXZpbmcgdGVjaC4gIEFsdGhvdWdoIHNpeCB0aG91c2FuZCAoNiwwMDAgdG9vIG1hbnkpIHBlZGVzdHJpYW5zIGFyZSBraWxsZWQgaW4gdGhlIFUuUy4gYW5udWFsbHksIEknZCBvbmx5IGhvcGUgQUkgd291bGRuJ3QgYWRkIHRvIHRoZSBwcm9ibGVtLjxzdXA+Mjwvc3VwPiBUaGUgQXJpem9uYSB2aWN0aW0gd2FzIHdhbGtpbmcgaGVyIGJpY3ljbGUgd2hlbiBzdHJ1Y2ssIGFuZCBJIGFzIGJpa2UtY29tbXV0ZXIgY2FuJ3QgaGVscCBidXQgdGFrZSB0aGUgYWZmYWlyIHBlcnNvbmFsbHkuIDwvcD5cclxuICA8cD5UaGlzIGZpcnN0IGh1bWFuIGRlYXRoIGlzIGF0IGxlYXN0IGEgPHN0cm9uZz5iaWcgV2FrZS1VcCBtb21lbnQ8L3N0cm9uZz4gZm9yIHRoZSBpbmR1c3RyeSBpbiBpdHMgaGFzdGUgdG8gcm9sbCBvdXQgQS5JLiB0ZWNoLiAgQWZ0ZXIgYWxsLCBVYmVyJ3MgcXVlc3Rpb25hYmxlIGxlYWRlcnNoaXAgbW9yYWxzPHN1cD4yPC9zdXA+IGFuZCBiZWluZyBraWNrZWQgb3V0IG9mIFNhbiBGcmFuY2lzY28gZm9yIHJ1bm5pbmcgbW9yZSB0aGFuIHNpeCByZWQtbGlnaHRzIHJhaXNlcyBleWVicm93cyB0byBiZWdpbiB3aXRoLjxzdXA+Mzwvc3VwPiBNeSBwcm9ibGVtIHdpdGggVWJlciBpcyB0aGF0IHRoZSBjYXIncyBhbGdvcml0aG0sIHdpdGggcGVyZmVjdCBMaWRhciB2aXNpb24sIGRpZCBub3QgZmxpbmNoIG9yIHNsb3cgZG93biBmb3IgdHdvIHNlY29uZHMgYXMgaXQga2lsbGVkIHRoZSB2aWN0aW0uIEh1bWFucyBmbGluY2ggYW5kIGh1bWFucyBzd2VydmUsIGJlY2F1c2UgcHJvdGVjdGluZyBmZWxsb3cgaHVtYW5zIGlzIGluIG91ciBETkEsIG5vdCBpbiBBLkkuJ3MuIFNvLCB3aGlsZSB3ZSBub3cga25vdyBVYmVyJ3Mgc29mdHdhcmUgaGFzbid0IGNhdWdodCB1cCB3aXRoIGl0cyBBLkkuLUxpZGFyIGhhcmR3YXJlLS1sZXQncyBob3BlIHdlIHNlZSBkZWZlbnNpdmUgZHJpdmluZyBhbmQgc29tZSA8aT5UTEM8L2k+IHByb2dyYW1tZWQgaW50byB0aG9zZSBBLkkuIEFsZ29yaXRobXMhXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS90ZWNobm9sb2d5LzIwMTgvbWFyLzIyL3ZpZGVvLXJlbGVhc2VkLW9mLXViZXItc2VsZi1kcml2aW5nLWNyYXNoLXRoYXQta2lsbGVkLXdvbWFuLWluLWFyaXpvbmFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE4L21hci8yMi92aWRlby1yZWxlYXNlZC1vZi11YmVyLXNlbGYtZHJpdmluZy1jcmFzaC10aGF0LWtpbGxlZC13b21hbi1pbi1hcml6b25hPC9hPlxyXG4gIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE3L2Fwci8wNy91YmVyLXdheW1vLWxhd3N1aXQtbGlkYXJcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE3L2Fwci8wNy91YmVyLXdheW1vLWxhd3N1aXQtbGlkYXI8L2E+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuXHJcbiAgPGEgaHJlZj1cImh0dHA6Ly9mb3J0dW5lLmNvbS8yMDE3LzAyLzI2L3ViZXItc2VsZi1kcml2aW5nLWNhci1yZWQtbGlnaHRzL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly9mb3J0dW5lLmNvbS8yMDE3LzAyLzI2L3ViZXItc2VsZi1kcml2aW5nLWNhci1yZWQtbGlnaHRzLzwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG5cclxuICB2YXIgYmxvZ3Bvc3QxNyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgVW5pdmVyc2l0aWVzLCBwcml2YXRlIG9yIHB1YmxpYyBpbnN0aXR1dGlvbnMsIHNlcnZlIGFzIGEgYmVhY29uIGZvclxyXG4gIDxzdHJvbmc+dGhlIEZlYXJsZXNzIFByb3RlY3Rpb24gYW5kIEV0aGljYWwgUmVndWxhdGlvbjwvc3Ryb25nPiBvZiBpbmZvcm1hdGlvbiBhbmQgZGF0YS4gVGhpcyBpcyBiZWNhdXNlIGRhdGEgYW5kIGRhdGEgcmVzZWFyY2hcclxuICBpcyBpbm5hdGUgdG8gdGhlIHVuaXZlcnNpdHkncyBNaXNzaW9uIFN0YXRlbWVudCwgd2hlcmVhcyBidXNpbmVzcyBhbmQgZ292ZXJubWVudGFsIGluc3RpdHV0aW9ucyBhcmUgcmVsYXRpdmVseSBuZXdcclxuICB0byB0aGUgZ2FtZSwgYW5kIG9mdGVuIGF0IG9kZHMgd2l0aCB0aGVcclxuICA8aT5BY2FkZW15PC9pPiwgYW5kIG9jY2FzaW9uYWxseSBhZ2FpbnN0IGVhY2ggb3RoZXIuIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhyZWF0cyB0byBzdHVkZW50IGRhdGEgcHJpdmFjeSBleGlzdGVkIGxvbmcgYmVmb3JlIHRoZSBpbnRlcm5ldC4gVGhlIEZCSSB1bmRlciBKLiBFZGdhciBIb292ZXIgaW5maWx0cmF0ZWQgQmVya2VsZXlcclxuICBzdHVkZW50IGdyb3VwcyB0byBjb3VudGVyIGNvbW11bmlzbSBpbiB0aGUgMTk2MHMuIEFyb3VuZCB0aGUgc2FtZSB0aW1lLCB0aGUgQ0lBIG1hbmlwdWxhdGVkIHRoZSBOYXRpb25hbCBTdHVkZW50XHJcbiAgQXNzb2NpYXRpb24gZm9yIGludGVsbGlnZW5jZSBnYXRoZXJpbmcgaW4gb3RoZXIgYW50aS1jb21tdW5pc20gZWZmb3J0cy4gQnV0IHRoZSBwcml2YWN5IGlzc3VlIGlzIG1vcmUgYWN1dGUgbm93XHJcbiAgdGhhdCB0aGUgYW1vdW50IG9mIHN0dWRlbnQgZGF0YSBpbiBjbG91ZC1iYXNlZCBzeXN0ZW1zIGhhcyBncm93biBleHBvbmVudGlhbGx5IGFuZCBpcyBtb3JlIHdpZGVseSBkaXNwZXJzZWQuXHJcbiAgPHN1cD4yPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPiBUaGUgVW5pdmVyc2l0eSdzIGV4cGVydGlzZSBvdmVyIGV0aGljYWxseSByZWd1bGF0ZWQgZGF0YSBjb2xsZWN0aW9uIGFuZCBtYW5hZ2VtZW50LCBpcyBiZXR0ZXIgdGhhbiBnb3Zlcm5tZW50LCBidXNpbmVzcyxcclxuICBhbmQgZXZlbiBtZWRpY2FsIGRvbWFpbnMgZm9yIHR3byByZWFzb25zLiBGaXJzdCwgdGhlIGluc3RpdHV0aW9uJ3MgbG9uZyBoaXN0b3J5IGFuZCBldGhpY2FsIG1vdGl2ZXMgd2l0aCBkYXRhIGFyZVxyXG4gIHVuaXF1ZS4gVGhlIG5vcm1zIG9mIGRhdGEtaGFuZGxpbmcgaGF2ZSBiZWVuIGNvZGlmaWVkIHRocm91Z2ggdGhlIFVuaXZlcnNpdHkncyBJbnN0aXR1dGlvbmFsIFJldmlldyBCb2FyZCBiYXNlZFxyXG4gIG9uIGl0c1xyXG4gIDxzdHJvbmc+c3RhdGVkIG1pc3Npb248L3N0cm9uZz4uIEluIG90aGVyIHdvcmRzLCBVbml2ZXJzaXRpZXMgdGFrZSBkYXRhIHNlcmlvdXNseVxyXG4gIDxpPmZvciByZWFzb25zIG90aGVyIHRoYW4gY29ycG9yYXRlIHByb2ZpdCBvciBnb3Zlcm5tZW50YWwgY29udHJvbDwvaT4uIEFuIGV4YW1wbGUgb2YgcGVyc29uYWwgZGF0YSBwcmVjYXV0aW9ucyBoYXNcclxuICBwbGF5ZWQgb3V0IHdpdGggSGFydmFyZCdzIHJlY2VudCBkYXRhIHRpZmZzIGxlYWRpbmcgdG8gdGhlIFN1cHJlbWUgQ291cnQsIGlsbHVzdHJhdGVkIGJ5IGEgMjAxNiBhcnRpY2xlOiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkxhc3Qgd2VlayB1bmRlcmdyYWR1YXRlcyBhdCBIYXJ2YXJkIFVuaXZlcnNpdHkgcmFpc2VkIGNvbmNlcm5zIGFib3V0IHRoZSBpbnN0aXR1dGlvbiBoYW5kaW5nIG92ZXIgdGhlaXIgZGF0YSB0byBhblxyXG4gIGFudGktYWZmaXJtYXRpdmUgYWN0aW9uIGdyb3VwIGFzIHBhcnQgb2YgYSBsYXdzdWl0LiBTdHVkZW50cyBmb3IgRmFpciBBZG1pc3Npb25zLCB3aGljaCBpcyBzdWluZyB0aGUgdW5pdmVyc2l0eVxyXG4gIGZvciBhbGxlZ2VkbHkgZGlzY3JpbWluYXRpbmcgYWdhaW5zdCBBc2lhbiBBbWVyaWNhbiBhcHBsaWNhbnRzLCB3aWxsIGhhdmUgYWNjZXNzIHRvIOKAnGFjYWRlbWljLCBleHRyYWN1cnJpY3VsYXIsXHJcbiAgZGVtb2dyYXBoaWMgYW5kIG90aGVyIGluZm9ybWF0aW9u4oCdIGZyb20gYWxsIHVuZGVyZ3JhZHMgd2hvIGFwcGxpZWQgdG8gSGFydmFyZCBiZXR3ZWVuIHRoZSBmYWxsIDIwMDkgYW5kIHNwcmluZyAyMDE1LFxyXG4gIG9taXR0aW5nIG5hbWVzIGFuZCBTb2NpYWwgU2VjdXJpdHkgbnVtYmVycy5cclxuICA8c3VwPjI8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+VGhlIHNlY29uZCByZWFzb24gd2h5IFVuaXZlcnNpdGllcyB1bmRlcnN0YW5kIGV0aGljYWwgaW1wbGljYXRpb25zIGZvciBkYXRhIGlzIHRoYXQgZGF0YSBhbmQgbW9yZSBicm9hZGx5IGRhdGEgYW5kXHJcbiAgaHVtYW4gaW5mb3JtYXRpb25cclxuICA8aT5yZXNlYXJjaDwvaT4gaXMgdGhlIGluc3RpdHV0aW9ucycgc2Vjb25kIGhpZ2hlc3QgcHJpb3JpdHksIGFsb25nIHdpdGggdGVhY2hpbmcgYW5kIHNlcnZpY2UuIEZvciBleGFtcGxlLCBpbiByZXNwb25zZVxyXG4gIHRvIHRoZSB1bmV0aGljYWwgUHVibGljIEhlYWx0aCByZXNlYXJjaCBpblxyXG4gIDxpPlR1c2tlZ2VlIFN5cGhpbGlzIGV4cGVyaWVtZW50czwvaT4sIHRoZSBVbml2ZXJzaXR5IGluc3R1dGlvblxyXG4gIDxpPnN0ZXBwZWQgaW48L2k+IHRvIGhlbHAgZGVzaWduIHRoZSAxOTc4XHJcbiAgPHN0cm9uZz5CZWxtb250IFByaW5jaXBsZXM8L3N0cm9uZz4uIEN1cnJlbnRseSwgdGhlIFVuaXZlcnNpdHkgSW5zdGl0dXRpb25hbCBSZXZpZXcgQm9hcmQgaW5jb3Jwb3JhdGVzIHRoaXMgd2l0aCB0aGUgTnVyZW1idXJnXHJcbiAgQ29kZSAoZGV2ZWxvcGVkIGFmdGVyIFdXSUkgTkFaSSByZXNlYXJjaCksIGluIGhhbmRsaW5nIGRhdGEgcmVzZWFyY2guXHJcbiAgPC9wPlxyXG4gIDxwPkluIHJlY2VudCBkYXlzLFxyXG4gIDxpPnByaXZhdGUgY29tcGFuaWVzPC9pPiBjbGFpbSBleHBlcnRpc2UgZm9yIHJlZ3VsYXRpbmcgXCJGYWtlIE5ld3NcIiwgYW5kIHlvdSBndWVzc2VkIGl0LFxyXG4gIDxzdHJvbmc+cmVndWxhdGlvbiBvZiBkYXRhIHByaXZhY3kgJmFtcDsgY29uZmlkZW50aWFsaXR5Ljwvc3Ryb25nPjxzdXA+Mzwvc3VwPiBUaGUgZXRoaWNhbCBhdXRob3JpdHkgb3ZlciBkYXRhIHByaXZhY3kgbm9ybXMgYXJlIG5vd2hlcmVcclxuICBlbHNlIHRoYW4gdGhlIFVuaXZlcnNpdHkgY2FtcHVzLCBjYXNlIGluIHBvaW50IEhhcnZhcmQuLi4gTGV0IHRoZSBnb3Zlcm5tZW50cyBnb3Zlcm4gYW5kIHRoZSBlbnRlcnByaXNlcyBlbnRlcnByaXNlLFxyXG4gIGFuZCBsZWF2ZSB0aGVcclxuICA8aT50aG91Z2h0ZnVsLCBldGhpY2FsIHJlZ3VsYXRpb24gb2YgZGF0YSBjb2xsZWN0aW9uIGFuZCBwcmVjYXV0aW9uIDwvaT4gdG8gdGhlIEl2b3J5IFRvd2VyLiBDb3Jwb3JhdGUgYW5kIEdvdmVybm1lbnRcclxuICBzZWxmLXJlZ3VsYXRpb24gaXMgb3BhcXVlIGVub3VnaCE8L3A+XHJcbiAgXHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxOC9tYXIvMjEvbWFyay16dWNrZXJiZXJnLXJlc3BvbnNlLWZhY2Vib29rLWNhbWJyaWRnZS1hbmFseXRpY2FcIlxyXG4gIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS90ZWNobm9sb2d5LzIwMTgvbWFyLzIxL21hcmstenVja2VyYmVyZy1yZXNwb25zZS1mYWNlYm9vay1jYW1icmlkZ2UtYW5hbHl0aWNhPC9hPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5lZHN1cmdlLmNvbS9uZXdzLzIwMTYtMTAtMjYtcHVyc3VpbmctYWNhZGVtaWMtZnJlZWRvbS1hbmQtZGF0YS1wcml2YWN5LWlzLWEtYmFsYW5jaW5nLWFjdFwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZWRzdXJnZS5jb20vbmV3cy8yMDE2LTEwLTI2LXB1cnN1aW5nLWFjYWRlbWljLWZyZWVkb20tYW5kLWRhdGEtcHJpdmFjeS1pcy1hLWJhbGFuY2luZy1hY3Q8L2E+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTAzLTIxL3BhdWwtZm9yZC1mYWNlYm9vay1pcy13aHktd2UtbmVlZC1hLWRpZ2l0YWwtcHJvdGVjdGlvbi1hZ2VuY3lcIlxyXG4gIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTAzLTIxL3BhdWwtZm9yZC1mYWNlYm9vay1pcy13aHktd2UtbmVlZC1hLWRpZ2l0YWwtcHJvdGVjdGlvbi1hZ2VuY3k8L2E+XHJcbiAgPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTYgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRvZGF5LCBVUyBpbnNlcnRlZCBpdHNlbGYgaW50byBhIGxhcmdlLCBkZWVwIGRlYmF0ZSBhYm91dCBjcnlwdG8tbGVnaXRpbWFjeSBieSBpbXBvc2luZyBuZXcgc2FuY3Rpb25zIG9uIFZlbmV6dWVsYS5cclxuICBJbiBjYXNlIHlvdSBoYWRuJ3QgaGVhcmQsIGhlcmUncyBhIHF1aWNrIHJlY2FwOjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIGFkbWluaXN0cmF0aW9u4oCZcyBhbm5vdW5jZW1lbnQgY2FtZSBhIGZldyBob3VycyBhZnRlciBNci4gVHJ1bXAgc2lnbmVkIGFuIGV4ZWN1dGl2ZSBvcmRlciBiYXJyaW5nIHRoZSB1c2Ugb2YgYW55XHJcbiAgZGlnaXRhbCBjdXJyZW5jeSBpc3N1ZWQgYnkgdGhlIE1hZHVybyBnb3Zlcm5tZW50IHNpbmNlIEphbi4gOS4gTXIuIE1hZHVybyBhbm5vdW5jZWQgbGFzdCBtb250aCB0aGF0IGhpcyBjb3VudHJ5XHJcbiAgaGFkIGJlZ3VuIGEgcHJlc2FsZSBvZiB0aGUgUGV0cm8sIGJhY2tlZCBieSB0aGUgbmF0aW9u4oCZcyB2YXN0IHBldHJvbGV1bSByZXNlcnZlcy5cclxuICA8YnIgLz5cclxuICA8YnIgLz5UaGUgVmVuZXp1ZWxhbiBnb3Zlcm5tZW50IGNhbGxlZCB0aGUgbGF1bmNoIGEgcmVzcG9uc2UgdG8gYSBmaW5hbmNpYWwgY3Jpc2lzIHRoYXQgaGFzIHByb21wdGVkIGEgcHJvZm91bmQgZGV2YWx1YXRpb25cclxuICBvZiB0aGUgbmF0aW9uYWwgY3VycmVuY3ksIHRoZSBib2zDrXZhciwgYW5kIHF1YWRydXBsZS1kaWdpdCBpbmZsYXRpb24uXHJcbiAgPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlxyXG4gIFRoaXMgdHVybiBvZiBldmVudHMsIGJvdGggTWFkdXJvIGV0IGFsLidzIGZpbmFuY2lhbCBjbGV2ZXJuZXNzIGFuZCBUcnVtcCdzIGFjdGlvbiB0byBkZS1sZWdpdGltYXRlIHRoZSBQZXRybyBjcnlwdG8tY3VycmVuY3ksXHJcbiAgYXJlIGV4YW1wbGVzIG9mIHRoZSB1bmRlZmluZWQsIG5lYXItbGltaXRsZXNzIHBvbGl0aWNhbCB1c2VzIGZvciBCbG9ja2NoYWluIFRlY2gsIGJvdGggb2ZmZW5zaXZlbHkgYW5kIGRlZmVuc2l2ZWx5LlxyXG4gIEluIGZhY3QsIHRoZSBlbnN1aW5nIGV2ZW50cyBtYXkgYmUgb2YgZ3JlYXQgaW50ZXJlc3QgYXMgd2Ugd2lsbCB3aXRuZXNzIGEgbWFqb3IgZmlyc3QgYWN0dWFsIHVzZS1jYXNlIG9mIHRoZSBkZWNlbnRyYWxpemluZ1xyXG4gIGFpbXMgb2YgY3J5cHRvLXRlY2hub2xvZ3kgdG9vbC4gQSB0b29sIHRoYXQgc29mdGVucyB0aGUgZmluYW5jaWFsIGxldmVyYWdlIHdpZWxkZWQgYnkgY2VudHJhbGl6ZWQgYXV0aG9yaXRpZXMsIHdoZXRoZXJcclxuICBnb3Zlcm5lbW50YWwgb3IgcHJpdmF0ZS5cclxuICA8L3A+XHJcbiAgPHA+SSB1c2VkIHRoZSB0ZXJtIFwiZGUtbGVnaXRpbWF0ZVwiIGFib3ZlIGJlY2F1c2UgdGhlcmUgYXJlIHR3byBwcm9jZXNzZXMgYXQgd29yazogRmlyc3QsIGNyeXB0by1jdXJyZW5jaWVzIGFyZVxyXG4gIDxpPmluIHRoZW1zZWx2ZXM8L2k+IG5vdCBsZWdpdGltYXRlLiBBXHJcbiAgPHN0cm9uZz5jcnlwdG8tY3VycmVuY3kgcGxhdGZvcm0gZ2FpbnMgbGVnaXRpbWFjeSB0aHJvdWdoIGEgc2VyaWVzIG9mIGJvdGggdGVjaG5pY2FsIGFuZCBmaW5hbmNpYWwgdHJ1c3QtYnVpbGRpbmcgc3RhZ2VzPC9zdHJvbmc+LlxyXG4gIFNvIGxlZ2l0aW1hY3kgaXMgZWFybmVkIGZpcnN0IHByaXZhdGVseSwgYW5kIHNvbWUgY3VycmVuY3kgcGxhdGZvcm1zIGNvbnRpbnVlIHB1YmxpY2x5IHRvIEluaXRpYWwgQ29pbiBPZmZlcmluZyxcclxuICBhbmQgc28gb24tLXB1cmVseSBmaW5hbmNpYWwgYW5kIHRlY2huaWNhbCBsZWdpdGltYWN5LlxyXG4gIDwvcD5cclxuICA8cD5BbmQgdGhlbiwgdGhlcmUgaXMgdGhlIGFub3RoZXIga2luZCBvZiBsZWdpdGltYWN5LCB3aGljaCBpbnZvbHZlcyBwb2xpdGljYWwgbGV2ZXJhZ2UgLi4uIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzAzLzE5L3dvcmxkL2FtZXJpY2FzL3RydW1wLXZlbmV6dWVsYS1zYW5jdGlvbnMtcGV0cm8uaHRtbFwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDMvMTkvd29ybGQvYW1lcmljYXMvdHJ1bXAtdmVuZXp1ZWxhLXNhbmN0aW9ucy1wZXRyby5odG1sPC9hPlxyXG4gIDwvcD5cclxuICBgXHJcbiAgdmFyIGJsb2dwb3N0MTUgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPklvdGEgYW5kIFJpcHBsZSBjcnlwdG9jdXJyZW5jaWVzIHVzZSBkaWZmZXJlbnQgdGVjaG5vbG9neSB0aGFuIHRyYWRpdGlvbmFsIGJsb2NrY2hhaW4gaW4gb3JkZXIgdG8gYWNoaWV2ZSB0aGVpciBkaXN0cmlidXRlZFxyXG4gIGxlZGdlcnMuIFRyYWRpdGlvbmFsbHksIG91dHNpZGUgXCJtaW5lcnNcIiB2YWxpZGF0ZSB0aGUgYmxvY2snc1xyXG4gIDxpPiB0cmFuc2FjdGlvbiByZWNvcmRzPC9pPiBhcyBpdCByZXBsaWNhdGVzIHRvIHRoZSBuZXh0IFwiYmxvY2suXCIgRm9yIGV4YW1wbGUsIGEgdHJhbnNhY3Rpb24gaXMgdmFsaWRhdGVkIDIgb3IgdGhyZWVcclxuICB0aW1lcywgYW5kIHNpbmNlIHRocmVlIG1pbmVycycgdmFsaWRhdGlvbnMgYWxsIGFncmVlLCBvbmUgaXMga2VwdCBhbmQgdHdvIGFyZSBkZXN0cm95ZWQsIGluIGEgbnV0c2hlbGw7IG9uZSBleGFtcGxlXHJcbiAgb2YgY29tcHV0YXRpb25zIChcclxuICA8c3Ryb25nPmFuZCBoZW5jZSBjb2FsPC9zdHJvbmc+KSB0aGF0IGNvc3QgdG9vIG11Y2ggdGltZSBhbmQgZW5lcmd5LjwvcD5cclxuICA8cD5Vbmxpa2UgdGhpcyBhcnJhbmdlbWVudCwgSW90YSwgUmlwcGxlLCBhbmQgSGVkZXJhIHVzZSBhIGRpcmVjdGVkLWFjeWNsaWMtZ3JhcGggKERBRykgZGF0YSBzdHJ1Y3R1cmUgKHNoYXBlZCBsaWtlXHJcbiAgYSBzaWRld2F5cyBnZW5lYWxvZ3kgdHJlZSkgdGhhdCByZWxpZXMgb24gXCJjb25zZW5zdXNcIiBmcm9tIGl0cyBuZWFyZXN0IG5laWdoYm9yIHRyYW5zYWN0aW9uIG5vZGVzLlxyXG4gIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5Fbm91Z2ggd2l0aCB0aGUgamFyZ29uISBUaGUgYm90dG9tIGxpbmUgaXMgdGhhdCBCaXRjb2luJ3MgdGVjaCBpcyBub3QgZWNvLXN1c3RhaW5hYmxlLFxyXG4gIDxzdXA+Mjwvc3VwPiBhbmQgc28gYWx0ZXJuYXRpdmVzIGFyZSBhbHJlYWR5IGNsb3NpbmcgaW4gb24gQml0Y29pbi4gSW90YSwgdGhlIDh0aCBsYXJnZXN0IGNyeXB0b2N1cnJlbmN5IElvdGEgZGVsaXZlcnNcclxuICBvcGVuLXNvdXJjZSB0cmFuc3BhcmVuY3ksIGxpZ2h0bmluZyBzcGVlZCwgYW5kIHlldCBpcyBpdCBjcnlwdG9ncmFwaGljYWxseSBzb3VuZD8gTm90IGFjY29yZGluZyB0byBzb21lIHRlY2ggcHVuZGl0czpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPllvdSBtaWdodCB0aGluayB0aGF0IElPVEEsIGEgY3J5cHRvY3VycmVuY3kgd29ydGggb3ZlciBhIGJpbGxpb24gZG9sbGFycywgYW5kIHdvcmtpbmcgd2l0aCBvcmdhbml6YXRpb25zIGxpa2UgTWljcm9zb2Z0LFxyXG4gIFVuaXZlcnNpdHkgQ29sbGVnZSBMb25kb24sIElubm9neSwgYW5kIEJvc2NoLCBCTlkgTWVsbG9uLCBDaXNjbywgYW5kIEZveGNvbm4gKHRocm91Z2ggdGhlIFRydXN0ZWQgSU9UIEFsbGlhbmNlKVxyXG4gIHdvdWxkIG5vdCBoYXZlIGZhaXJseSBvYnZpb3VzIHZ1bG5lcmFiaWxpdGllcywgYnV0IHVuZm9ydHVuYXRlbHksIHRoYXTigJlzIG5vdCB0aGUgY2FzZS4gV2hlbiB3ZSB0b29rIGEgbG9vayBhdCB0aGVpclxyXG4gIHN5c3RlbSwgd2UgZm91bmQgYSBzZXJpb3VzIHZ1bG5lcmFiaWxpdHkgYW5kIHRleHRib29rIGluc2VjdXJlIGNvZGUuXHJcbiAgPGJyIC8+XHJcbiAgPGJyIC8+IOKAnEluIDIwMTcsIGxlYXZpbmcgeW91ciBjcnlwdG8gYWxnb3JpdGhtIHZ1bG5lcmFibGUgdG8gZGlmZmVyZW50aWFsIGNyeXB0YW5hbHlzaXMgaXMgYSByb29raWUgbWlzdGFrZS4gSXQgc2F5cyB0aGF0XHJcbiAgbm8gb25lIG9mIGFueSBjYWxpYnJlIGFuYWx5emVkIHRoZWlyIHN5c3RlbSwgYW5kIHRoYXQgdGhlIG9kZHMgdGhhdCB0aGVpciBmaXggbWFrZXMgdGhlIHN5c3RlbSBzZWN1cmUgaXMgbG93LOKAnSBzdGF0ZXNcclxuICBCcnVjZSBTY2huZWllciwgcmVub3duZWQgc2VjdXJpdHkgdGVjaG5vbG9naXN0LCBhYm91dCBJT1RBIHdoZW4gd2Ugc2hhcmVkIG91ciBhdHRhY2suXHJcbiAgPHN1cD4zPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPkFuZCBzbywgd2l0aCBhIDEuOSBiaWxsaW9uIG1hcmtldCBjYXAsIEkgc29tZXRpbWVzIGhhdmUgdG8gcmVmbGVjdCBvbiB0aGUgaW1tZW5zaXR5IGFuZCBub24tcmVsYXRpb25hbCBmYWN0IGFuZCBmaWd1cmVzXHJcbiAgb2Ygb3VyIHRlY2hub2xvZ2ljYWwgd29ybGQhIFNlY3VyaXR5IGFuZCBvdGhlciBidWdzIGFyZSBoYXJkIHRvIGF2b2lkIHdoZW4gYW4gaW5kdXN0cnkgaXMgbW92aW5nIHRvbyBmYXN0IGZvciB0aG9yb3VnaGx5XHJcbiAgdGVzdGVkIGJldGFzOyBhbmQgZWFjaCBpdGVyYXRpb24gaW52b2x2ZXMgYSBzZXJpZXMgb2YgYnVnLXBhdGNoZXMsIHdpdGggc2hvcnQtIGFuZCBsb25nLXRlcm0gcHJpb3JpdGllcyBzdHJldGNoZWRcclxuICB3aXRoIG5ldyBkZXNpZ24gJmFtcDsgZnVuY3Rpb24gdHJhZGUtb2Zmcy48L3A+XHJcbiAgPHA+XHJcbiAgRnVsbCBsaWZlLWN5Y2xlIHNvZnR3YXJlIGRldmVsb3BtZW50LCBmcm9tIG5hcGtpbi1pZGVhIHRvIHJvbGxpbmcgc3BlY3MsIGFsd2F5cyBmb2xsb3dzIHRoZXNlIHBhdHRlcm5zIHlldCBub3QgYWx3YXlzIHdpdGhcclxuICBzbyBtdWNoIG1vbmV5IG9uIHRoZSBsaW5lISBIZXJlJ3MgYSBjbG9zZXIgbG9vayBhdCBvbmUgY3JpdGlxdWUgb2YgSW90YTo8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIElPVEEgZGV2ZWxvcGVycyBoYWQgd3JpdHRlbiB0aGVpciBvd24gaGFzaCBmdW5jdGlvbiwgaXQgd2FzIGEgaHVnZSByZWQgZmxhZyAuLi4gSSB0aGluayBpdOKAmXMgaW1wb3J0YW50IHRvIHJlaXRlcmF0ZSB0aGF0XHJcbiAgdGhlIElPVEEgZGV2ZWxvcGVycyBkbyBub3QgYWdyZWUgd2l0aCBvdXIgY2hhcmFjdGVyaXphdGlvbiBvZiB0aGlzIGFzIGFuIGlzc3VlIG9mIGNvbmNlcm4uIE91ciByZXBvcnQgbGF5cyBvdXQgbW9yZVxyXG4gIGRldGFpbHMgYWJvdXQgd2h5IHdlIGFyZSBjb25jZXJuZWQuXHJcbiAgPGJyIC8+XHJcbiAgPGJyIC8+IFRoZXJlIGFyZSBvdGhlciByZWQgZmxhZ3PigIrigJTigIp1bmxpa2UgZXZlcnkgb3RoZXIgcHJvZ3JhbSBydW5uaW5nIG9uIHlvdXIgbGFwdG9wIG9yIHBob25lLCBJT1RBIHVzZXMgdGVybmFyeSBpbnN0ZWFkXHJcbiAgb2YgYmluYXJ5LiBTaW5jZSBhbGwgY29tcHV0ZXIgaGFyZHdhcmUgdG9kYXkgdXNlcyBiaW5hcnksIElPVEEgY29udmVydHMgdG8gdGVybmFyeSBpbiBzb2Z0d2FyZSwgd2hpY2ggaXMgbGVzcyBlZmZpY2llbnRcclxuICBhbmQgbW9yZSBjb21wbGV4LiBUaGlzIGNvbXBsZXhpdHkgcHJldmVudHMgSU9UQSBmcm9tIGJlbmVmaXRpbmcgZnJvbSBleGlzdGluZyBzZWN1cml0eSBhbmFseXNpcyB0b29scyB0aGF0IGFyZSBkZXNpZ25lZFxyXG4gIHRvIHdvcmsgd2l0aCBiaW5hcnksIGFuZCBtYWtlcyB0aGUgY29kZSBoYXJkZXIgdG8gcmVhZCBhbmQgdW5kZXJzdGFuZC5cclxuICA8YnIgLz5cclxuICA8YnIgLz4gVGhlIGN1cnJlbnQgSU9UQSB0YW5nbGUgcmVxdWlyZXMgYSB0cnVzdGVkIHBhcnR5ICh0aGUgY29vcmRpbmF0b3IpIGZvciBzZWN1cml0eSwgc3VnZ2VzdGluZyB0aGF0IGluIGl0cyBjdXJyZW50XHJcbiAgZm9ybSBpdOKAmXMgbm90IHJlYWR5IHRvIHJ1biBhcyBhIHRydWx5IHBlcm1pc3Npb25sZXNzLCBkZWNlbnRyYWxpemVkIHN5c3RlbS5cclxuICA8c3VwPjM8L3N1cD5cclxuICA8L3A+PHA+XHJcbiAgT3B0aW1pemluZywgbm90IHNhY3JpZmljaW5nLCBzaG91bGQgYmUgdGhlIG5hbWUgb2YgdGhlIGdhbWUgYXMgVGVjaCBjbG9zZXMgaW4gb24gQmxvY2tjaGFpbiBjaGFsbGVuZ2VzIG9mIHNlY3VyaXR5LCBzY2FsYWJpbGl0eSxcclxuICBhbmQgdGhhdCBldmVycy1zby1jb3N0bHlcclxuICA8c3Ryb25nPlN1c3RhaW5hYmlsaXR5ITwvc3Ryb25nPlxyXG4gIDwvcD5cclxuICA8cD4xLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wMi0xNC9uZXh0LWdlbmVyYXRpb24tY3J5cHRvLWxlZGdlcnMtdGFrZS10aGUtYmxvY2stb3V0LW9mLWJsb2NrY2hhaW5cIlxyXG4gIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTAyLTE0L25leHQtZ2VuZXJhdGlvbi1jcnlwdG8tbGVkZ2Vycy10YWtlLXRoZS1ibG9jay1vdXQtb2YtYmxvY2tjaGFpbjwvYT5cclxuICA8L3A+XHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiXHJcbiAgaHR0cHM6Ly9kaWdpY29ub21pc3QubmV0L2JpdGNvaW4tZWxlY3RyaWNpdHktY29uc3VtcHRpb24tc3VycGFzc2VzLXNpbmdhcG9yZS1wb3J0dWdhbFxyXG4gIFwiIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL2RpZ2ljb25vbWlzdC5uZXQvYml0Y29pbi1lbGVjdHJpY2l0eS1jb25zdW1wdGlvbi1zdXJwYXNzZXMtc2luZ2Fwb3JlLXBvcnR1Z2FsIDwvYT5cclxuICA8L3A+XHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiXHJcbiAgaHR0cHM6Ly9tZWRpdW0uY29tL0BuZWhhL2NyeXB0b2dyYXBoaWMtdnVsbmVyYWJpbGl0aWVzLWluLWlvdGEtOWE2YTlkZGM0MzY3XHJcbiAgXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vbWVkaXVtLmNvbS9AbmVoYS9jcnlwdG9ncmFwaGljLXZ1bG5lcmFiaWxpdGllcy1pbi1pb3RhLTlhNmE5ZGRjNDM2NzwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDE0ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5TdXN0YWluYWJpbGl0eSBmb3IgdGhlIGVudmlyb25tZW50IG1lYW5zIGFuIGFjY2VsZXJhdGVkIHRyYW5zaXRpb24gdG8gcmVuZXdhYmxlcy4gV2hpbGUgb3RoZXIgbmF0aW9ucyBoYXZlIHVuZGVydGFrZW5cclxuICBiaWcgc3RlcHMgdG93YXJkIHdpbmQgYW5kIHNvbGFyIC0gZXZlbiBDaGluYSdzIHBvbGx1dGlvbiBkZWNsaW5lZCBpbiAyMDE0IGZvciB0aGUgZmlyc3QgdGltZVxyXG4gIDxzdXA+MTwvc3VwPi4gRVUgaXMgbm93IDMwJSByZW5ld2FibGUtLWZyb20gMTIlIGluIDIwMDAgdG8gZXhwZWN0ZWQgNTAlIHJlbmV3YWJsZSBlbmVyZ3kgYnkgMjAzMFxyXG4gIDxzdXA+Mjwvc3VwPi4gVXMsIGl0IGFwcGVhcnMsIG5vdCBzbyBtdWNoLi4ub3VjaC48L3A+XHJcbiAgPHA+V2hhdCBjYW4gd2UgZG8gdGhlbiwgaW4gb3VyIGxpdmVzLCB0byBtYWtlIG91ciBvd24gY29udHJpYnV0aW9uLiBXZWxsLCBiZXNpZGVzIGxlc3MgZm9zc2lsIGZ1ZWxzIGFuZCByZWQgbWVhdCwgd2VcclxuICBjYW4gY2hvb3NlIG91ciBjcnlwdG9jdXJyZW5jaWVzIG1vcmUgY29uc2NpZW50aW91c2x5LiBPbmUgTlkgdG93bidzIHJlY2VudCBhY3Rpb25zIGVjaG8gbXkgb3duIGNvbmNlcm5zIGFib3V0IHRoZVxyXG4gIGVub3Jtb3VzIGNhcmJvbiBmb290cHJpbnQgb2YgXCJQcm9vZi1vZi1Xb3JrXCIgYmxvY2tjaGFpbiBtaW5pbmcuXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBUaGUgY2l0eSBvZiBQbGF0dHNidXJnaCBoYXMgcHV0IGEgbW9yYXRvcml1bSBvbiBjcnlwdG9jdXJyZW5jeSBtaW5pbmcgdG8gcHJlc2VydmUgbmF0dXJhbCByZXNvdXJjZXMsIHRoZSBoZWFsdGggb2YgaXRzIHJlc2lkZW50c1xyXG4gIGFuZCB0aGUgY2l0eeKAmXMg4oCcY2hhcmFjdGVyIGFuZCBkaXJlY3Rpb24s4oCdIG9mZmljaWFscyBzYWlkIGFmdGVyIGEgcHVibGljIGhlYXJpbmcgVGh1cnNkYXkuIEZvciAxOCBtb250aHMsIHRoZSAyMCwwMDAtcmVzaWRlbnRcclxuICBjaXR5IHdpbGwgbm90IGNvbnNpZGVyIG5ldyBhcHBsaWNhdGlvbnMgZm9yIGNvbW1lcmNpYWwgY3J5cHRvY3VycmVuY3kgbWluaW5nLiBWaW9sYXRvcnMgd2lsbCBmYWNlIGZpbmVzIG9mIHVwIHRvXHJcbiAgJDEsMDAwIGZvciBlYWNoIGRheSB0aGV5IGRlZnkgdGhlIG1vcmF0b3JpdW0uXHJcbiAgPHN1cD4zPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlNvLCBtZSB0b28gLSBjb3VudCBtZSBvdXQsIEkgY2FuJ3QgaGVscCBidXQgZG8gdGhlIHNhbWUsIGFuZCBwcm9ub3VuY2UgbXkgb3duIHJlZnJhaW4gZnJvbSBCaXRjb2luICh0aGlzIGlzIG1vcmVcclxuICBzcGlyaXR1YWwgc2luY2UgSSBkb24ndCBvd24sIG5vciBtaW5lKS4gSW4gY29udHJhc3QsIEknbGwgcHV0IEV0aGVyZXVtIG9uIGhvbGQgc2luY2UgdGhleSBhcmUgdHJhbnNpdGlvbmluZyB0byBhXHJcbiAgemVybyBjYXJib24tZm9vdHByaW50IGJ5IHllYXIncyBlbmQuIDwvcD5cclxuICA8cD5BbmQsIGZvciB0aGUgbW9zdCBlbnZpcm9ubWVudGFsbHkgZnJpZW5kbHkgY3J5cHRvY3VycmVuY2llcywgSSB3aG9sbHkgc3VwcG9ydCBSaXBwbGUgKDNyZCBoaWdoZXN0IHZhbHVlZCBjcnlwdG9jdXJyZW5jeSlcclxuICBhbmQgYWxzbyBjbGVhblxyXG4gIDxpPklvdGE8L2k+ICg4dGggaGlnaGVzdCB2YWx1ZWQgKVxyXG4gIDxzdXA+NTwvc3VwPi4gUmlwcGxlLCB1bmZvcnR1bmF0ZWx5LCBpcyBhIHByaXZhdGUgY29tcGFueSB3aXRoIGEgbGVzcy1hY2Nlc3NpYmxlIGludGVybmFsIGRpc3RyaWJ1dGVkIGxlZGdlci4gQW5kIHlldCxcclxuICBIZWRlcmEgSGFzaGdyYXBoIGhlcmFsZHMgdGhlIG1vc3Qgb3B0aW1pc3RpYyBuZXdzIG9mIGFsbDogQSBibGluZGxpbmdseSBmYXN0IEhhc2hncmFwaCBzdHJ1Y3R1cmUsIHVuYm91bmQgZnJvbSBhbnlcclxuICBjYXJib24gZm9vdHByaW50LlxyXG4gIDwvcD5cclxuICA8cD4xLlxyXG4gIDxhIGhyZWY9XCJodHRwOi8vd3d3LndyaS5vcmcvYmxvZy8yMDE3LzAxL2NoaW5hJUUyJTgwJTk5cy1kZWNsaW5lLWNvYWwtY29uc3VtcHRpb24tZHJpdmVzLWdsb2JhbC1zbG93ZG93bi1lbWlzc2lvbnNcIlxyXG4gIHRhcmdldD1cIl9ibGFua1wiPmh0dHA6Ly93d3cud3JpLm9yZy9ibG9nLzIwMTcvMDEvY2hpbmElRTIlODAlOTlzLWRlY2xpbmUtY29hbC1jb25zdW1wdGlvbi1kcml2ZXMtZ2xvYmFsLXNsb3dkb3duLWVtaXNzaW9uczwvYT5cclxuICA8L3A+XHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9xei5jb20vMTE5MzYwMy90d28tY291bnRyaWVzLWFyZS10aGUtcmVhc29uLXRoZS1ldS1pcy1oaXR0aW5nLWl0cy1hbWJpdGlvdXMtcmVuZXdhYmxlLWVuZXJneS10YXJnZXRzL1wiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9xei5jb20vMTE5MzYwMy90d28tY291bnRyaWVzLWFyZS10aGUtcmVhc29uLXRoZS1ldS1pcy1oaXR0aW5nLWl0cy1hbWJpdGlvdXMtcmVuZXdhYmxlLWVuZXJneS10YXJnZXRzLzwvYT5cclxuICA8L3A+XHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL2J1c2luZXNzL2Vjb25vbXkvdXBzdGF0ZS1uZXcteW9yay10b3duLWJhbnMtYml0Y29pbi1taW5pbmcvMjAxOC8wMy8xNi9iZDZmNjY5ZS0yOTQ3LTExZTgtYmM3Mi0wNzdhYTRkYWI5ZWZfc3RvcnkuaHRtbD91dG1fdGVybT0uNjI4MmVhODQyOWQ1XCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53YXNoaW5ndG9ucG9zdC5jb20vYnVzaW5lc3MvZWNvbm9teS91cHN0YXRlLW5ldy15b3JrLXRvd24tYmFucy1iaXRjb2luLW1pbmluZzwvYT5cclxuICA8L3A+XHJcbiAgPHA+NC5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDItMTQvbmV4dC1nZW5lcmF0aW9uLWNyeXB0by1sZWRnZXJzLXRha2UtdGhlLWJsb2NrLW91dC1vZi1ibG9ja2NoYWluXCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wMi0xNC9uZXh0LWdlbmVyYXRpb24tY3J5cHRvLWxlZGdlcnMtdGFrZS10aGUtYmxvY2stb3V0LW9mLWJsb2NrY2hhaW48L2E+XHJcbiAgPC9wPlxyXG4gIGBcclxuICB2YXIgYmxvZ3Bvc3QxMyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgPHN0cm9uZz5DcmVhdG9ycyBpbiB0aGUgRGlnaXRhbCBBZ2U8L3N0cm9uZz4sIGVzcGVjaWFsbHkgTXVzaWNpYW5zLCBoYXZlIGZhY2VkIGp1c3QgYSBwYW5vcGx5IG9mIGJ1c2luZXNzIG1vZGVsIGNoYWxsZW5nZXMsXHJcbiAgbm90YWJseSBzaW5jZSB0aGUgMjAwMHMnXHJcbiAgPGk+TmFwc3RlciBFcmE8L2k+LiBBbmQgeWV0LCB0aGlzIGlzIHRoZSBhZ2Utb2xkLWNhc2Ugb2YgbmV3IHRlY2hub2xvZ2llcyByZXNoYXBpbmcgbG9uZy1zdGFuZGluZyBmaWVsZHMsIGVzcGVjaWFsbHlcclxuICBmaW5hbmNpYWwgc3RydWN0dXJlIC0gdGhlIGJvdHRvbSBsaW5lISBBbGwgY3JlYXRpdmUgZmllbGRzIGFsc28gaGF2ZSB0ZWNobm9sb2dpY2FsIGZlYXR1cmVzIG9uIHRoZSBob3Jpem9uIHRoYXRcclxuICBtYXksIHBvdGVudGlhbGx5IG1vdmUgdGhlIHBsYXlpbmcgZmllbGQuIEZpcnN0IHNvbWUgcmVjZW50IGJhY2tncm91bmQ6IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgV2hpbGUgW1RheWxvciBTd2lmdF0gaXMgY2VydGFpbmx5IG1ha2luZyBtb25leSBpbiByZXRhaWwgc2FsZXMgYW5kIGRpZ2l0YWwgZG93bmxvYWRzLCBib3RoIG9mIHRob3NlIG1ldHJpY3MgYXJlIHNwaXJhbGluZ1xyXG4gIGRvd253YXJkIGFzIHBlb3BsZSBtaWdyYXRlIGF3YXkgZnJvbSB0aGUgY29uY2VwdCBvZiBvd25pbmcgbXVzaWMgYXQgYWxsLiBOaWVsc2VuIHJlY2VudGx5IHJlbGVhc2VkIG51bWJlcnMgaW5kaWNhdGluZ1xyXG4gIHN1YnN0YW50aWFsIGRyb3BzIGluIGJvdGggQ0QgYW5kIGRpZ2l0YWwtdHJhY2sgc2FsZXMsIHdoaWNoIGFyZSBkb3duIGFsbW9zdCAkMTAwIG1pbGxpb25cclxuICA8aT55ZWFyIG92ZXIgeWVhcjwvaT4gZnJvbSAyMDE0OyBzdHJlYW1pbmcgbXVzaWMgY29udGludWVzIHRvIGdyb3csIGJ1dCB0aGUgcmV2ZW51ZSBpdCBnZW5lcmF0ZXMgaXNu4oCZdCBjbG9zZSB0byBtYWtpbmdcclxuICB1cCB0aGUgZGlmZmVyZW5jZSwgeWV0LlxyXG4gIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5Nb3N0IHJlbWVtYmVyIFRheWxvciBTd2lmdCdzIDIwMTQgaW5kdXN0cnktc2hha2luZyBhbGJ1bSB3aXRoZHJhdyBpbiBwcm90ZXN0IHRvIFNwb3RpZnkncyBwYXltZW50IHN0cnVjdHVyZS4gVGhlXHJcbiAgbmV4dCB5ZWFyIFRheWxvciB0b29rIG9uIEFwcGxlIGlUdW5lcy0tdG8gd2hpY2ggQXBwbGUgYmVuZGVkIHRvIFRheWxvcidzIFdheVxyXG4gIDxzdXA+Mjwvc3VwPi4gVGhlc2Ugd2lucyBhcmUgYW1hemluZyBidXQgbm90IGVub3VnaCwgaWYgb25seSBmb3Igd2lubmluZyBiYXR0bGVzIGluIGEgbG9zaW5nIHdhci4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5TcG90aWZ5IGlzIHRoZSBmdXR1cmUuIFNwb3RpZnkgaXMgdGhlIGVuZW15LiBTcG90aWZ5IGRvZXNu4oCZdCBwYXkgZW5vdWdoLiBTcG90aWZ5IGlzIG11c2lj4oCZcyBiZXN0IGJldCBmb3IgcmV2ZW51ZVxyXG4gIGdyb3d0aC4gU2luY2UgaXQgYXJyaXZlZCBpbiB0aGUgVW5pdGVkIFN0YXRlcyBmcm9tIFN3ZWRlbiBpbiAyMDExLCBTcG90aWZ5IGhhcyBiZWVuIGNhc3QgYXMgYm90aCBoZXJvIGFuZCB2aWxsYWluXHJcbiAgaW4gdGhlIG11c2ljIGluZHVzdHJ54oCZcyBjb250aW51aW5nIGRlYmF0ZSBvdmVyIHN0cmVhbWluZyBtdXNpYy4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBJdCBoYXMgYmVlbiBoYWlsZWQgYXMgYSBwb3RlbnRpYWwgc2F2aW9yIHRocm91Z2ggYSB0d28tdGllcmVkIOKAnGZyZWVtaXVt4oCdIG1vZGVsIHRoYXQgd291bGQgZ3JhZHVhbGx5IGx1cmUgbGlzdGVuZXJzIGF3YXkgZnJvbVxyXG4gIHBpcmFjeS4gWWV0IFNwb3RpZnnigJlzIHJveWFsdHkgcmF0ZXMgaGF2ZSBhbHNvIHRlcnJpZmllZCBtYW55IGFydGlzdHMgYWxyZWFkeSB3b3JyaWVkIHRoYXQgZWFjaCBuZXcgc3RlcCBpbiBtdXNpY+KAmXNcclxuICBkaWdpdGFsIGV2b2x1dGlvbiBmdXJ0aGVyIGRldmFsdWVzIHRoZWlyIHdvcmsuXHJcbiAgPHN1cD4zPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlNvIHRoZSB0cmVuZCBsb29rcyBkaXJlLCBhbmQgeWV0IGlzIGl0IHJlYWxseT8gV2hlcmUsIGp1c3Qgd2hlcmUgYXJlIHRoZVxyXG4gIDxzdHJvbmc+VGVjaCBQbGF0Zm9ybXMgPC9zdHJvbmc+IGxlYWRpbmcgdXM/IFRlY2ggaXMgbGVhZGluZyB1c1xyXG4gIDxpPm5vd2hlcmU8L2k+LCBhdCBsZWFzdCBub3QgdG8gb25lXHJcbiAgPHN0cm9uZz5zaW5ndWxhciwgY2VudHJhbGl6ZWQgcGxhY2U8L3N0cm9uZz47IHJhdGhlciwgZGVjZW50cmFsaXplZCB0ZWNoLS1pbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvIGJsb2NrY2hhaW4tLWlzIGJ1c3lcclxuICByZXdyaXRpbmcgdGhlIGJvdW5kYXJpZXMgYmV0d2VlbiBjcmVhdG9ycyBhbmQgY29uc3VtZXJzLiBUaGlzIFR1ZXNkYXkncyBGb3JiZXMgYXJ0aWNsZSByZXBvcnRlZCBvbiBuZXcgc3Vic2NyaXB0aW9uLWJhc2VkXHJcbiAgbW9kZWwgYnkgUGF0cmVvbi4gU3RpbGwgY2xhc3NpY2FsIFdlYiAyLjAsIGl0J3Mgbm92ZWx0eSBhcHBlYXJzIHNvIHNpbXBsZSwgYWxtb3N0IGludHVpdGl2ZSBpbiBwb3RlbnRpYWxseSBuZXcgcGF0aHdheTo8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlwiT24gS2lja3N0YXJ0ZXIgYW5kIEluZGllZ29nbywgY3JlYXRvcnMgZXNzZW50aWFsbHkgaGF2ZSB0byBzdGFydCBvdmVyIGV2ZXJ5IHRpbWUsXCIgc2F5cyBEYW5ueSBSaW1lciwgYSBwYXJ0bmVyIGF0XHJcbiAgSW5kZXggVmVudHVyZXMgd2hvIGlzIGEgUGF0cmVvbiBpbnZlc3RvciBhbmQgYm9hcmQgbWVtYmVyLiBcIkl0J3MgdGhlIHNhbWUgcmVhc29uIHNvZnR3YXJlIGNvbXBhbmllcyB3ZW50IGZyb20gbGljZW5zZWRcclxuICBzb2Z0d2FyZSB0byBzdWJzY3JpcHRpb25zOiBwcmVkaWN0YWJsZSByZXZlbnVlIGFuZCBiZXR0ZXIgc2VydmljZSBmb3IgY3VzdG9tZXJzLlwiXHJcbiAgPHN1cD40PC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlxyXG4gIEFwcGFyZW50bHkgUGF0cmVvbiwgYWxvbmcgd2l0aCBsYXN0IE5vdmVtYmVyJ3NcclxuICA8aT5EcmlwPC9pPiBieSBLaWNrU3RhcnRlciBoYXZlIG1hZGUgaGVhZHdheS4gUGF0cmVvbiBwYWlkIG91dCAkMTUwIG1pbGxpb24gdG8gaXRzIGFydGlzdHMgaW4gMjAxNywgYW5kIGVhY2ggYXJlIGRvdWJsaW5nXHJcbiAgYW5udWFsbHkuIERlY2VudHJhbGl6aW5nIGFnYWluLiBXZWxsLCB3ZSBzYXkgd2UgY2FuJ3RcclxuICA8aT5nbyBiYWNrIHRvIHRoZSB3YXkgaXQgd2FzPC9pPiwgYnV0IFRlY2ggYWx3YXlzIHNlZW1zIHRvIGxlYWQgdXMgYmFjayB0byB0aGUgd2F5IGl0IHdhcyFcclxuICA8L3A+XHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxNi8wMS8yNS9tYWdhemluZS90b3VyaW5nLWNhbnQtc2F2ZS1tdXNpY2lhbnMtaW4tdGhlLWFnZS1vZi1zcG90aWZ5Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE2LzAxLzI1L21hZ2F6aW5lL3RvdXJpbmctY2FudC1zYXZlLW11c2ljaWFucy1pbi10aGUtYWdlLW9mLXNwb3RpZnkuaHRtbFxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiaHR0cDovL3d3dy5idXNpbmVzc2luc2lkZXIuY29tL3RheWxvci1zd2lmdC1uZXctYWxidW0tcmVwdXRhdGlvbi1ub3Qtb24tc3BvdGlmeS1hcHBsZS1tdXNpYy1zdHJlYW1pbmctMjAxNy0xMVwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3d3dy5idXNpbmVzc2luc2lkZXIuY29tL3RheWxvci1zd2lmdC1uZXctYWxidW0tcmVwdXRhdGlvbi1ub3Qtb24tc3BvdGlmeS1hcHBsZS1tdXNpYy1zdHJlYW1pbmctMjAxNy0xMVxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxNC8xMS8xMi9idXNpbmVzcy9tZWRpYS90YXlsb3Itc3dpZnRzLXN0YW5kLW9uLXJveWFsdGllcy1kcmF3cy1hLXJlYnV0dGFsLWZyb20tc3BvdGlmeS5odG1sXCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE0LzExLzEyL2J1c2luZXNzL21lZGlhL3RheWxvci1zd2lmdHMtc3RhbmQtb24tcm95YWx0aWVzLWRyYXdzLWEtcmVidXR0YWwtZnJvbS1zcG90aWZ5Lmh0bWxcclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIFxyXG4gIDxwPjQuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMva2F0aGxlZW5jaGF5a293c2tpLzIwMTgvMDIvMTMvZGlnaXRhbC1tZWRpY2ktaG93LXRoaXMtbXVzaWNpYW4tdHVybmVkLWVudHJlcHJlbmV1ci1wbGFucy10by1zYXZlLWNyZWF0b3JzLWZyb20tYWR2ZXJ0aXNpbmcvIzYwNjNlYTc3MTMxM1wiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9rYXRobGVlbmNoYXlrb3dza2kvMjAxOC8wMi8xMy9kaWdpdGFsLW1lZGljaS1ob3ctdGhpcy1tdXNpY2lhbi10dXJuZWQtZW50cmVwcmVuZXVyLXBsYW5zLXRvLXNhdmUtY3JlYXRvcnMtZnJvbS1hZHZlcnRpc2luZ1xyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDEyID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Ub2RheSdzIGRlbW9uc3RyYXRpb25zIGFuZCB3YWxrLW91dHMsIGxlZCBieSBBbWVyaWNhJ3MgWW91dGggYW5kIGZvbGxvd2VkIGJ5IG1hbnkgb2YgdGhlIGVkdWNhdGlvbiBzdGFmZiwgaGFzIGFpbWVkXHJcbiAgZGlyZWN0bHkgYXQgR3VuLUNvbnRyb2wgbGVnaXNsYXRpb24uIFlldCwgdGhlIG1lc3NhZ2UgbW9yZSBwb3dlcmZ1bGx5IGFydGljdWxhdGVkIHRoYW4gZXZlciBieSBhZG9sZXNjZW50LXR1cm5zLWFkdWx0XHJcbiAgc3R1ZGVudHMsIHRha2VzIGFpbSBhdCBzb21ldGhpbmcgZnVydGhlciBhZmllbGQuIDwvcD5cclxuICA8cD5TdHVkZW50cywgcmVtZW1iZXJpbmcgdGhlIEZlYnJ1YXJ5IDE0dGggbWFzc2FjcmUgdmljdGltcywgdGFrZSBhaW0gYXQgdGhlIGNvcnJ1cHRpb24gc3RlbW1pbmcgZnJvbSB0aGUgMjAxMCBTdXByZW1lXHJcbiAgQ291cnQgXCJQZXJzb24taG9vZFwiIHByb3RlY3Rpb24gZm9yIENvcnBvcmF0aW9ucywgYWxzbyBrbm93biBhcyB0aGVcclxuICA8aT5DaXRpemVucyBVbml0ZWQ8L2k+IERlY2lzaW9uLiBBIGRhdGVkLCBidXQgcG9pZ25hbnQsIGFydGljbGUgZnJvbSBOYXRpb25hbCBQdWJsaWMgUmFkaW8gZXhwbGFpbnM6XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgU3VwcmVtZSBDb3VydCBleHRlbmRlZCB0aGF0IHByb3RlY3Rpb24gdG8gY29ycG9yYXRpb25zLCBhbmQgb3ZlciB0aW1lIGFsc28gZXh0ZW5kZWQgc29tZSDigJQgYnV0IG5vdCBhbGwg4oCUIG9mIHRoZVxyXG4gIHJpZ2h0cyBndWFyYW50ZWVkIHRvIGluZGl2aWR1YWxzIGluIHRoZSBCaWxsIG9mIFJpZ2h0cy5cclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+XHJcbiAgWWV0LCBpdCBhcHBlYXJzIGRlY2VwdGl2ZWx5IGhhcm1sZXNzIGZvciBDb25ncmVzc2lvbmFsIExhdy1tYWtlcnMgdG8gcHJvdGVjdCBjb3Jwb3JhdGlvbnMsIGluIHRoZSBmb3JtIG9mXHJcbiAgPHN0cm9uZz5HdW4gTWFudWZhY3R1cmVycycgTG9iYnlpc3RzLCA8L3N0cm9uZz5cclxuICBhcyBlcXVhbGx5IGFzIGl0IHByb3RlY3RzIGh1bWFucy4gVGhlIG9yaWdpbiBvciB0aGlzIHJ1bGluZyBkYXRlcyB0byBhIDcwJ3MgTmVvLUxpYmVyYWwsIHJpZ2h0LWxlYW5pbmcgbGVnaXNsYXRpb24gYW5kIENvdXJ0XHJcbiAgcnVsaW5ncyB0aGF0IGluY2x1ZGUgYSBwaXZvdGFsIDE5NzhcclxuICA8aT5GaXJzdCBOYXRpb25hbCBCYW5rIG9mIEJvc3RvbiB2LiBCZWxsb3RpPC9pPiBkZWNpc2lvbiBhbGxvd2luZyBmb3IgY29ycG9yYXRpb25zJyBiYWxsb3QtaW5pdGlhdGl2ZSBjYW1wYWlnbiBjb250cmlidXRpb25zLFxyXG4gIGNpdGluZyB0aGUgRmlyc3QgQW1lbmRtZW50LlxyXG4gIDxzdXA+Mjwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5cclxuICBcclxuICBUaGUgUmVzdWx0PyBUaGUgY29ycG9yYXRpb24sIGluIFwicGVyc29uXCIgZm9ybSwgdGFrZXMgb24gUHNldWRvLUh1bWFuIHF1YWxpdGllczogaW1tb3J0YWwsIGJleW9uZC1tZWFzdXJlIGNhcGl0YWwsIGFuZCBwcm9ncmFtbWF0aWNhbGx5XHJcbiAgc2VydmluZyBzdG9jay1ob2xkZXJzJyBpbnRlcmVzdHMgd2l0aCBjdXQtdGhyb2F0IGNvbXBldGl0aW9uIGF0IGFsbCBjb3N0cy4gTm8gbWF0Y2ggYWdhaW5zdCBhIHN5bXBhdGhldGljIGh1bWFuLFxyXG4gIHlldCB0aGUgQ29ycG9yYXRpb24gaXMgZ2l2ZW4gdGhlIHNhbWUgcmlnaHRzIGFuZCBwcml2aWxlZ2VzIGFzIHRoZSBtYW4gaW4gdGhlIHN0cmVldC4gTm93LCBpbiB0aGUgZmFjZSBvZiB0d28gZGVjYWRlcydcclxuICBkZWFkIGh1bWFucy0tYXMgeW91bmcgYXNcclxuICA8aT5TYW5keSBIb29rIEVsZW1lbnRhcnk8L2k+LCB3aGljaCB3ZXJlIG5vdCBwcm90ZWN0ZWQgYnkgTGVnaXNsYXRpb24sIGR1ZSB0byBjb21taXRtZW50cyBtYWRlIHRvIGNvcnBvcmF0ZSBsb2JieWluZy5cclxuICA8L3A+XHJcbiAgPHA+SXQgYXBwZWFycyBpbmNyZWFzaW5nbHkgZGlmZmljdWx0IGZvciBNYXJjbyBSdWJpbyB0byBhY2NlcHQgbW9uZXkgZnJvbSBndW4gbG9iYnlpc3RzXHJcbiAgPGk+aW4gZXhjaGFuZ2U8L2k+IGZvciBleGVjdXRpbmcgdGhlaXIgbGVnaXNsYXRpb24gZGVtYW5kcy4gQXMgSSBtZW50aW9uZWQgaW4gbXlcclxuICA8YSBocmVmPVwiIzE4LTAyLTE0XCI+RmVicnVhcnkgMTR0aCBwb3N0PC9hPiBvbiB0aGUgdG9waWMsIGl0IGlzIGNsZWFyIGEgZ2VuZXJhdGlvbiBpcyBhd2FrZW5pbmc6IEFuZCwgdGhlIEh1bWFucyBoYXZlIGJlZ3VuIHRvIHJldm9sdFxyXG4gIGFnYWluc3QgdGhlXHJcbiAgPHN0cm9uZz5IZWF2aWx5LUFybWVkIExvYmJ5aW5nIE1hY2hpbmVzIVxyXG4gIDwvc3Ryb25nPlxyXG4gIDwvcD5cclxuICA8cD4xLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ucHIub3JnLzIwMTQvMDcvMjgvMzM1Mjg4Mzg4L3doZW4tZGlkLWNvbXBhbmllcy1iZWNvbWUtcGVvcGxlLWV4Y2F2YXRpbmctdGhlLWxlZ2FsLWV2b2x1dGlvblwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubnByLm9yZy8yMDE0LzA3LzI4LzMzNTI4ODM4OC93aGVuLWRpZC1jb21wYW5pZXMtYmVjb21lLXBlb3BsZS1leGNhdmF0aW5nLXRoZS1sZWdhbC1ldm9sdXRpb248L2E+XHJcbiAgPC9wPlxyXG4gIDxwPjIuXHJcbiAgPGEgaHJlZj1cImh0dHA6Ly93d3cubmNzbC5vcmcvcmVzZWFyY2gvZWxlY3Rpb25zLWFuZC1jYW1wYWlnbnMvY2FtcGFpZ24tZmluYW5jZS1hbmQtdGhlLXN1cHJlbWUtY291cnQuYXNweCNkbm5fY3RyNzc0NDNfSHRtbE1vZHVsZV9sYmxDb250ZW50XCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vd3d3Lm5jc2wub3JnL3Jlc2VhcmNoL2VsZWN0aW9ucy1hbmQtY2FtcGFpZ25zL2NhbXBhaWduLWZpbmFuY2UtYW5kLXRoZS1zdXByZW1lLWNvdXJ0LmFzcHg8L2E+XHJcbiAgPC9wPiBcclxuICBgXHJcbiAgdmFyIGJsb2dwb3N0MTEgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPk1hcmNoIDEzdGgsIDIwMTggbWFya3MgdGhlIGRheSB0aGF0IGNlcnRhaW4gdHlwZXMgb2YgYmxvY2tjaGFpbiB0ZWNobm9sb2dpZXMsIG5vdGFibHkgQml0Y29pbiBhbmQgRXRoZXJldW0sIGZhY2VcclxuICBhbiBleGlzdGVudGlhbCBjcmlzaXM6IFRvZGF5LCBhIG5ldyBkaXN0cmlidXRlZCBsZWRnZXIgdGVjaG5vbG9neSBoYXMgYmVlbiBhbm5vdW5jZWQsIHdoaWNoIGRlcGFydHMgZnJvbSB0aGUgdHJhZGl0aW9uYWxcclxuICBcIlByb29mLW9mLVdvcmtcIiAoZW5lcmd5LWludGVuc2l2ZSBjYWxjdWxhdGlvbnMpIEJsb2NrY2hhaW4gdGVjaG5vbG9naWVzLiBUaGlzIGlzIGNyaXRpY2FsbHkgaW1wb3J0YW50IHRvIHplcm8gY2FyYm9uLWZvb3RwcmludC5cclxuICBGb3IgZXhhbXBsZSwgQml0Y29pbiBjYWxjdWxhdGlvbnMgZHJhaW4gbW9yZSBlbmVyZ3ksIDUwIFRlcmFXYXR0L2hycyBwZXIgeWVhci0taGlnaGVyIHRoYW4gU2luZ2Fwb3JlJ3MgNDkuOCE8L3A+XHJcbiAgPHA+TmV4dCwgdGhlIHByaW1hcnkgc2VjdXJpdHkgZmxhdyBvZiBjb25zZW5zdXMtYmFzZWQgbGVhZGVyc2hpcCBsaWtlIFJpcHBsZSwgSW90YSAoYXMgb3Bwb3NlZCB0b1xyXG4gIDxpPnJhbmRvbS1zZWxlY3Rpb24gYmxvY2tjaGFpbiBsZWFkZXJzaGlwPC9pPiBiYXNlZCBvbiBjYXJib24taW50ZW5zaXZlIGNhbGN1bGF0aW9ucykgaXMgdGhleSBhcmUgc3VzY2VwdGlibGUgdG8gSGFja2luZzpcclxuICBEZW5pYWwtb2YtU2VydmljZSBBdHRhY2tzIGFyZSBwb3NzaWJsZSBiZWNhdXNlIHRoZSBuZXh0IGxlYWRlciBCbG9jayBjYW4gYmUgYW50aWNpcGF0ZWQgYW5kIGZvbGxvd2VkIGJ5IGEgQm90KSxcclxuICBzbyB0aGUgYmxvY2tjaGFpbiBjeWNsZSBpcyBhdHRhY2tlZCBhdCBldmVyeSBjeWNsZS4gPC9wPlxyXG4gIDxwPlRoZSBIZWRlciBIYXNoZ3JhcGggdW52ZWlsZWQgdG9kYXkgb3ZlcmNvbWVzIHRoaXMgcHJvYmxlbSBieSB1c2luZyBhIDM5LW5vZGUtbGVhZGVyIGhhc2hncmFwaCBkYXRhIHN0cnVjdHVyZS4gSW50ZXJlc3RpbmdseSxcclxuICB0aGlzIGlzIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBWaXNhIENyZWRpdCBDYXJkIGRlc2lnbiBmcm9tIHRoZSAxOTUwJ3MgKHRoZW4gY2FsbGVkIEFtZXJpY2FCYW5rKSBmb3IgYXV0aGVudGljYXRpbmdcclxuICBzeXN0ZW0uIDwvcD5cclxuICA8cD5cclxuICBOZXh0LCBUaGUgSGVkZXIgSGFzaGdyYXBoIG92ZXJjb21lcyB0aGUgcHJvYmxlbSBvZiBcImZhaXJuZXNzXCIgYmVjYXVzZSBibG9ja2NoYWluIHRyYW5zYWN0aW9ucyBhcmVcclxuICA8aT5cclxuICA8c3Ryb25nPm5vdCBvcmRlcmVkIGluIGVhY2ggY3ljbGU8L3N0cm9uZz4uPC9pPiBCaXRjb2luIHRyYW5zYWN0aW9ucyBhcmUgaGFwaGF6YXJkbHkgbHVtcGVkIHRvZ2V0aGVyIGluIGVhY2ggYmxvY2stY3ljbGUsXHJcbiAgd2hpY2ggaXMgfjEyIG1pbnV0ZXMuIFdoaWNoIG1lYW5zIHRoYXQgdGltZS1zZW5zaXRpdmUgZmluYW5jaWFsIGRhdGEgcXVlcmllcyB3aWxsIGFsd2F5cyBsb3NlISA8L3A+XHJcbiAgPHA+XHJcbiAgU3dpcmxkJ3MgdW52ZWlsZWQgdGhlaXIgY29uc2Vuc3VzLWJhc2VkXHJcbiAgPHN0cm9uZz5IYXNoZ3JhcGgsIGEgdHlwZSBvZiBkaXN0cmlidXRlZCBsZWRnZXIgdGVjaG5vbG9neSAoRExUKSw8L3N0cm9uZz4gbGFzdCB5ZWFyLiBUb2RheSwgaXQgaGFzIG5vdyBiZWVuIGFubm91bmNlZCB0b1xyXG4gIGRlcGxveSBpbiBsYXRlIDIwMTggb24gdGhlIEhlZGVyYSBIYXNoZ3JhcGggcHVibGljIG5ldHdvcmsuIFRoaXMgaXMgdHJlbWVuZG91cyBuZXdzISBUcmVtZW5kb3VzLCBzaW5jZSBJIGV4cGxhaW5lZFxyXG4gIGluIG15XHJcbiAgPGEgaHJlZj1cIiMxOC0wMy0wMVwiPk1hcmNoIDFzdCA8L2E+IGJsb2cgcG9zdCB0aGF0IG9sZGVyIGJsb2NrY2hhaW4gdGVjaG5vbG9naWVzIGluY2VudGl2aXplIG1pbmVycycgZWZmb3J0cyBieSBkaXJlY3RseSB0eWluZyBlbGVjdHJpY2FsLWNvc3QoXHJcbiAgKGluIGNhbGN1bGF0aW9ucykgdG8gdGhlIEJpdGNvaW4vaG91ciBwcm9maXQgbWFyZ2luLiBGb3IgdGhpcyByZWFzb24sIHRoZSBmdXR1cmUgaG9yaXpvbiBqdXN0IGNvbnNpZGVyYWJseSBzaG9ydGVuZWRcclxuICBCaXRjb2luJ3MgcnVud2F5IGZvciBlc3RhYmxpc2hpbmcgYW55dGhpbmcgYmV5b25kIFwiZWFybHktYWRvcHRlclwiIHN0YXR1cy4gPC9wPlxyXG4gIDxwPlNvLCB3ZSdsbCBzZWUgaWYgdGhlIGlubm92YXRpbmcgY3JldyB3aXRoIFZpdGFsaWsgQnV0ZXJpbidzIEV0aGVyZXVtIGNhbiBzdWNjZXNzZnVsbHkgYWx0ZXIgdGhlIGNyeXB0byBhbGdvcml0aG1cclxuICBpbnRvIGl0J3MgcGxhbm5lZCBjYXJib24tZnJlZSBjb25zZW5zdXMtYmFzZWQsIFwicHJvb2Ytb2Ytc3Rha2VcIiBmb3JtLiBGb3IgdGhlIG1vbWVudCwgQml0Y29pbiwgRXRoZXJldW0sIGFuZCBvdGhlclxyXG4gIGVsZWN0cmljaXR5LWRyYWluaW5nIFwicHJvb2Ytb2Ytd29ya1wiIGRlc2lnbnMsIGhhdmUgdGhlaXJcclxuICA8c3Ryb25nPmV4Y2hhbmdlIHZhbHVlIHRyYXBwZWQgaW5zaWRlIHRoZWlyIG93biBDYXJib24gRm9vdHByaW50PC9zdHJvbmc+LlxyXG4gIDxzdXA+NDwvc3VwPiBBbmQgc28sIGJlY2F1c2UgZW52aXJvbm1lbnRhbCBzdXN0YWluYWJsaXR5IGlzIGZvcmVtb3N0IG9mIGNvbmNlcm5zIGZvciBmdXR1cmUgaW52ZXN0bWVudCwgc3Vydml2YWwgbWF5XHJcbiAgZGVwZW5kIG9uIGRpZ2dpbmcgb3V0IG9mIHRoYXQgQ2FyYm9uIEZvb3RwcmludCBtdWNoIG1vcmUgcXVpY2tseSE8L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9qZWZma2F1Zmxpbi8yMDE4LzAzLzEzL2hlZGVyYS1oYXNoZ3JhcGgtdGhpbmtzLWl0LWNhbi1vbmUtdXAtYml0Y29pbi1hbmQtZXRoZXJldW0td2l0aC1mYXN0ZXItdHJhbnNhY3Rpb25zLyMxNzVlNWM3OWFiY2JcIj5cclxuICBodHRwczovL3d3dy5mb3JiZXMuY29tL3NpdGVzL2plZmZrYXVmbGluLzIwMTgvMDMvMTMvaGVkZXJhLWhhc2hncmFwaC10aGlua3MtaXQtY2FuLW9uZS11cC1iaXRjb2luLWFuZC1ldGhlcmV1bS13aXRoLWZhc3Rlci10cmFuc2FjdGlvbnMvIzE3NWU1Yzc5YWJjYlxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2hlZGVyYS1oYXNoZ3JhcGgtc3dpcmxkcy1uby1mb3JrLWd1YXJhbnRlZS1jcnlwdG9jdXJyZW5jeS10b3V0cy1yZXNpc3RhbmNlLWNvZGUtc3BsaXRzL1wiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2hlZGVyYS1oYXNoZ3JhcGgtc3dpcmxkcy1uby1mb3JrLWd1YXJhbnRlZS1jcnlwdG9jdXJyZW5jeS10b3V0cy1yZXNpc3RhbmNlLWNvZGUtc3BsaXRzLzwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAxOC8wMy8xMy9oZWRlcmEtaGFzaGdyYXBoLWFuZC1tei11bnZlaWwtbmV4dC1nZW5lcmF0aW9uLWJsb2NrY2hhaW4tYWx0ZXJuYXRpdmUvXCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICBodHRwczovL3ZlbnR1cmViZWF0LmNvbS8yMDE4LzAzLzEzL2hlZGVyYS1oYXNoZ3JhcGgtYW5kLW16LXVudmVpbC1uZXh0LWdlbmVyYXRpb24tYmxvY2tjaGFpbi1hbHRlcm5hdGl2ZS88L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIFxyXG4gIDxwPjQuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vYmxvZy5ldGhlcmV1bS5vcmcvMjAxNi8wMi8wOS9jdXQtYW5kLXRyeS1idWlsZGluZy1hLWRyZWFtL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vYmxvZy5ldGhlcmV1bS5vcmcvMjAxNi8wMi8wOS9jdXQtYW5kLXRyeS1idWlsZGluZy1hLWRyZWFtLzwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG4gIHZhciBibG9ncG9zdDEwID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICBUaHJvdWdob3V0IHRoZSBjZW50cmFsaXplZC10ZWNoIHBlcmlvZCBvZiB0aGVcclxuICA8aT5tb2JpbGUtcG93ZXJlZCA8L2k+IFdlYiAyLjAsIG1vc3QgU2hhcmluZyB0cmFuc2FjdGlvbnMgdGFrZSBwbGFjZSBvbiBhIGNlbnRyYWxpemVkIHBsYXRmb3JtIHRoYXQgc2ltcGx5IGZhY2lsaXRhdGVzXHJcbiAgdGhlIHBlZXItdG8tcGVlciB0cmFuc2FjdGlvbnMuIEhvd2V2ZXIsIHRoZSB0cnVzdCBpcyBiYXNlZCBvbiBzb21lIHRoaXJkLXBhcnR5IGF1dGhvcml0eS4gRm9yIGluc3RhbmNlLCBVYmVyIHNlcnZlc1xyXG4gIGFzIHRoZSBjZW50cmFsYWxpemVkLCB0aGlyZC1wYXJ0eSBhdXRob3JpdHkgYmV0d2VlbiBib3RoIGNvbnN1bWVycyAod2hldGhlciByZXNvdXJjZS1vYnRhaW5pbmcgb3IgcmVzb3VyY2UtcHJvdmlkaW5nKVxyXG4gIG11c3QgcGxhY2UgdGhlaXIgdHJ1c3QuIFNpbWlsYXJseSwgY2VudHJhbGl6ZWQgYXV0aG9yaXRpZXMgbGlrZSBQYXlwYWwsIGV0Yy4gZW5hYmxlIHBlZXItdG8tcGVlciBjb2xsYWJvcmF0aW9uLlxyXG4gIFlldCwgdGhlIG5vdGlvbiBvZiB0cnVzdCByZW1haW5zIHVuc29sdmVkOiBCb3RoIHBhcnRpZXMgbXVzdCBwbGFjZSB0aGVpciBmYWl0aCBpbiB0aGUgdGhpcmQgcGFydHkuIEJ5IGRlZmluaXRpb24sXHJcbiAgdGhpcyBwcm9ibGVtIHRoYXQgdW5kZXJtaW5lcyB0aGVcclxuICA8aT5TaGFyaW5nIEVjb25vbXk8L2k+IGlzIHJlc29sdmVkIGJ5IEJsb2NrY2hhaW4gdGVjaG5vbG9naWVzLCB0aHJvdWdoIGNyeXB0b2dyYXBoeS4gTm93LCBEZWNlbnRyYWxpemVkIEFwcHMgKERBUFBTKVxyXG4gIHByb3ZpZGUgYSB0cnVlciBzaGFyaW5nIHBsYXRmb3JtIGZvciB2YWx1ZSB0cmFuc2FjdGlvbnMuXHJcbiAgPC9wPlxyXG4gIDxwPkluIHNob3J0LCBuZWl0aGVyIHBlZXIsXHJcbiAgPHN0cm9uZz5uZWl0aGVyIGNvbnN1bWVyIG5lZWRzIHRvIGJlIHRydXN0ZWQsIGJlY2F1c2UgYm90aCBwYXJ0aWVzIHNoYXJlIGEgbXV0dWFsIHRydXN0IGluIHRoZWlyIHNoYXJlZCBsZWRnZXI8L3N0cm9uZz5cclxuICAodGhpbmsgb2YgYSB0aGljayBib29rIHdpdGggYW4gaW5kZXhlZCBsb2cgb2YgZWFjaCBhbmQgZXZlcnkgdHJhbnNhY3Rpb24sIHdpdGggdW5jaGFuZ2VhYmxlIGVudHJpZXMgZXRjaGVkIGJ5IGNyeXB0b2dyYXBoeS5cclxuICBJbiB0aGlzIGZhc2hpb24gdGhlIGZvcm1zIG9mIEV4Y2hhbmdlIFZhbHVlIGluY2x1ZGU6XHJcbiAgPGJyIC8+IDEuIFZhbHVlIEZ1bmRzICZhbXA7IEludmVzdG1lbnRzXHJcbiAgPGJyIC8+IDIuIEltbXV0YWJsZSBJbnN1cmFuY2UgJmFtcDsgUmlzayBNYW5hZ2VtZW50XHJcbiAgPGJyIC8+IDMuIEFjY291bnQgZm9yICZhbXA7IEF1ZGl0IENvbW1vZGlmaWVkIFZhbHVlIDQuIEF1dGhlbnRpY2F0ZSAmYW1wOyBBdHRlc3QgdG8gVmFsdWVcclxuICA8YnIgLz4gNS4gVHJhbnNmZXIsIFN0b3JlLCBMZW5kIFZhbHVlXHJcbiAgPGJyIC8+XHJcbiAgPC9wPlxyXG4gIGBcclxuICB2YXIgYmxvZ3Bvc3Q5ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5TaGFyaW5nIGNhbiBiZSBhIHBoaWxvc29waHkgYW5kIGV2ZW4gYW4gaWRlb2xvZ3ksIGJ1dCBpdCBpcyBhbHNvXHJcbiAgPHN0cm9uZz4gYSBjb25jZXB0IHNld24gaW50byB0aGUgVGVjaG5vbG9neSBvZiB0aGUgRXJhPC9zdHJvbmc+LiBTaGFyaW5nIGVjb25vbXkgcmVmZXJzIHRvIGJvdGggZGVtb2NyYXRpemVkIHBlZXItdG8tcGVlclxyXG4gIG1hcmtldHBsYWNlcyxcclxuICA8aT5hbmQ8L2k+IGNvbGxhYm9yYXRpdmUsIHJlc291cmNlLWNpcmN1bGF0aW5nIGNvbnN1bXB0aW9uIHN5c3RlbXMgd2hlcmUgdGhlIGNvbnN1bWVyJiMzOTtzIHJvbGUgaXMgcHJvdmlkZXIgb3Igb2J0YWluZXJcclxuICBvZiByZXNvdXJjZXMuIEJ5IGVpdGhlciBzZW5zZSwgdGhlXHJcbiAgPGk+VWJlcml6ZWQ8L2k+IGVjb25vbXkgaXMgbWFkZSBwb3NzaWJsZSBieSB0aGUgdW5kZXJseWluZyBwbGF0Zm9ybSBvZiBEZWNlbnRyYWxpemVkIFRlY2hub2xvZ2llcy4gTW9iaWxlIHNvY2lhbCBtZWRpYSxcclxuICBpbnRlcm5ldCwgYW5kIGJsb2NrY2hhaW4gdGVjaCBjcmVhdGVzIHRoZSBjb25kaXRpb25zIG5lZWRlZCBmb3IgYSBjb252ZW5pZW50LCBjb21tdW5pdHktYmFzZWQgdHJhbnNhY3Rpb25zLjwvcD5cclxuICBcclxuICA8cD5CaXRjb2luIGFuZCBFdGhlcmV1bSBjcnlwdG8tY29udHJhY3RzIGdyYWIgdGhlIGhlYWRsaW5lcywgaG93ZXZlciBpdCBpcyB0aGUgdmVyeSBuYXR1cmUgb2YgYmxvY2tjaGFpbiYjMzk7c1xyXG4gIDxpPmRpc3RyaWJ1dGVkLCBpLmUuIHNoYXJlZCwgPC9pPmxlZGdlciB0aGF0IHJldm9sdXRpb25pemVzIGhvdyBodW1hbnMgaW50ZXJhY3QsIGFuZCBob3cgdGhleSBleGNoYW5nZSBhbmQgc2hhcmUgZ29vZHNcclxuICBhbmQgc2VydmljZXMuIFNvLCBob3cgbWlnaHQgYSB0cmFuc2FjdGlvbmFsLCB6ZXJvLXN1bSBNYXJrZXQgRWNvbm9teSBtZXJnZSB3aXRoIGEgU2hhcmluZyBFY29ub215PzwvcD5cclxuICBcclxuICA8cD5JblxyXG4gIDxpPlRoZSBUaGlyZCBJbmR1c3RyaWFsIFJldm9sdXRpb24sIDwvaT5Tb2NpYWwgYW5kIEVjb25vbWljIHRoZW9yaXN0LCBEci4gSmVyZW15IFJpZmtpbiwgcHJvdmlkZXMgaW5zaWdodCBpbnRvIGhvd1xyXG4gIHRoZVxyXG4gIDxzdHJvbmc+U2hhcmluZyBFY29ub215IGNhbiBncm93IGFsb25nc2lkZSB0aGUgdHJhZGl0aW9uYWwgTWFya2V0IEVjb25vbXk8L3N0cm9uZz4uXHJcbiAgPHN1cD4xPC9zdXA+IFRoZSB0aGVvcnkgYXJndWVzIHRocmVlICgzKSBicmVha3Rocm91Z2hzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBjb25kaXRpb25zIG5lY2Vzc2FyeSBmb3IgYSBuZXcgJnF1b3Q7Z2VuZXJhbFxyXG4gIHB1cnBvc2UgdGVjaG5vbG9naWNhbCBwbGF0Zm9ybSwmcXVvdDsgYW5kIHRodXMgYW4gSW5kdXN0cmlhbCBSZXZvbHV0aW9uLiBUaGV5IGFyZSBtYW5hZ2VtZW50L2NvbW1tdW5pY2F0aW9uIG9mIHBvd2VyLFxyXG4gIHNvdXJjZXMgb2YgbmV3IHBvd2VyL2VuZXJneSwgYW5kIHRoZSB0cmFuc3BvcnRhdGlvbiBvZiB0aGlzIHBvd2VyLjwvcD5cclxuICBcclxuICA8cD5UaGUgZmlyc3QgY29uZGl0aW9uOiBOZXcgZm9ybXMgb2YgY29tbXVuaWNhdGlvbiB0b1xyXG4gIDxpPm1hbmFnZTwvaT4gcG93ZXIsIGZvciBleGFtcGxlIHN0ZWFtLXBvd2VyZWQgcHJpbnRpbmcgcHJlc3MsIHRyYW5zLW9jZWFuaWMgdGVsZWdyYXBoLCB0aGVuIGxhdGVyIHRlbGVwaG9uZS4gVGhlIHNlY29uZFxyXG4gIGNvbmRpdGlvbjogTmV3IGVuZXJneSBzb3VyY2VzLCBmb3IgZXhhbXBsZSBzdGVhbS1lbmdpbmUgdXNpbmcgY29hbCBhbmQgb3RoZXIgZm9zc2lsIGZ1ZWxzLiBUaGUgdGhpcmQgY29uZGl0aW9uOlxyXG4gIE5ldyBtZXRob2RzIHRvIHRyYW5zcG9ydCBlbmVyZ3ksIGkuZS4gdGhlIHN0ZWFtIGVuZ2luZSBvbiByYWlscywgdGhlbiBsYXRlciBmb3NzaWwgZnVlbCB2ZWhpY2xlcy48L3A+XHJcbiAgXHJcbiAgPHA+U28gd2hhdCYjMzk7cyBuZXcgYWJvdXQgdG9kYXk/IDVHIENlbGx1bGFyIHRlY2hub2xvZ3kgY291cGxlZCB3aXRoIGRlY2VudHJhbGl6ZWQsIGJsb2NrY2hhaW4gaW50ZXJuZXQ7IFNlY29uZCwgaW1wcm92aW5nXHJcbiAgc29sYXIgJmFtcDsgd2luZCBwb3dlciBjb3VwbGVkIHdpdGggZGVjZW50cmFsaXplZCwgYmktZGlyZWN0aW9uYWwgZW5lcmd5IGdyaWQ7IGFuZCB0aGlyZCwgdHJhbnNwb3JhdGlvbiBieSBhdXRvbWF0YXRlZCxcclxuICBkcml2ZXJsZXNzIHNoaXBwaW5nIGZvciBleGFtcGxlLiBTbywgd2h5IGlzIHRoaXMgaW1wb3J0YW50LCBldmVuIHZpdGFsIHRvIGFkYXB0IGEgbmV3IHBhcmFkaWdtIHRoYXQgZml0cyB0aGUgbmV3XHJcbiAgdGVjaG5vbG9neT8gZXhwb25lbnRpYWwgcG9wdWxzdGlvbiBncm93dGggYW5kIGV4cG9uZW50aWFsIGNsaW1hdGUgY2hhbmdlcyBhcmUgdG9wIG9mIHRoZSBsaXN0LjwvcD5cclxuICBcclxuICA8cD5Ccml0YWluJiMzOTtzIGlubm92YXRpb25zIHdpdGggc3RlYW0gJmFtcDsgY29hbCBjaGFyYWN0ZXJpemVkIHRoZSBmaXJzdCBJbmR1c3RyaWFsIFJldm9sdXRpb24sIGFuZCBBbWVyaWNhJiMzOTtzXHJcbiAgaW5ub3ZhdGlvbnMgaW4gdGVsZXBob25lcywgb2lsLWZ1ZWxlZCB2ZWhpY2xlcywgYW5kIGNlbnRyYWxpemVkIHRyYW5zcG9ydGF0aW9uIGdyaWQsIGhvd2V2ZXIgdGhlIGlubm92YXRpb25zIGluXHJcbiAgdGhlIHByZXNlbnQgZXJhIGFyZSBtdWNoIHF1aWNrZXIgdGhhbiBwcmV2aW91cyBlcmFzLi4uIHdoaWNoIG1lYW5zIHdlIGFzIGEgc29jaWV0eSBjYW4gZW1icmFjZSBtb3JlIHByb2FjdGl2ZWx5XHJcbiAgdGhlIE5ldyBQYXJhZGlnbSBuZWVkZWQgdG8gYWRhcHQuPC9wPlxyXG4gIFxyXG4gIDxwPlNvLCBob3cgY2FuIHdlIGNoYW5nZSB0aGUgd2F5IHdlXHJcbiAgPGk+dGhpbms8L2k+IGFuZCBob3cgd2VcclxuICA8aT5yZWFjdDwvaT4gZGVwZW5kcyBvbiBvdXIgd29ybGR2aWV3LCBhbmQgaG93IGRlZXBseSBlbnRyZW5jaGVkLiBUaG9tYXMgS3VobiYjMzk7cyAyMDA0IHB1YmxpY2F0aW9uIG9uXHJcbiAgPHN0cm9uZz5cclxuICA8aT5UaGUgU3RydWN0dXJlIG9mIFNjaWVudGlmaWMgUmV2b2x1dGlvbjwvaT5cclxuICA8L3N0cm9uZz5cclxuICA8c3VwPjM8L3N1cD4gZXhwbGFpbnMgaG93IHNvY2lldHkgd2lsbCBkcmFnIGl0cyBmZWV0IGluIHRoZSBmYWNlIG9mIGNoYW5nZSwgYW5kIG9ubHkgYWZ0ZXIgZGVjYWRlcyBvZiBjb250cm92ZXJzeSB3aWxsXHJcbiAgYSBOZXcgUGFyYWRpZ20gU2hpZnQgZW1lcmdlLiBJbiB0aGlzIG9jY2FzaW9uIGhvd2V2ZXIsIHdlIGFzIGEgc29jaWV0eSBtYXkgbm90IGhhdmUgdGhlIGx1eHVyeSBvZiBkZWNhZGVzIHRvIGFkYXB0XHJcbiAgdG8gTmV3IFRlY2hub2xvZ2llcywgYXMgdGhlIGNhcmJvbiBoYW5nb3ZlciBmcm9tIHRoZSBwcmV2aW91cyBJbmR1c3RyaWFsIEVyYSBpbXBlcmlscyB0aGUgc2FmZSBhcnJpdmFsIG9mIHRoZSBuZXh0ITwvcD5cclxuICBcclxuICA8cD4mbmJzcDs8L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZm9ldC5vcmcvYm9va3MvdGhlLXRoaXJkLWluZHVzdHJpYWwtcmV2b2x1dGlvbi9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5mb2V0Lm9yZy9ib29rcy90aGUtdGhpcmQtaW5kdXN0cmlhbC1yZXZvbHV0aW9uLzwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+Mi5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZWNvbm9taXN0LmNvbS9ub2RlLzIxNTUzMDE3XCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZWNvbm9taXN0LmNvbS9ub2RlLzIxNTUzMDE3PC9hPlxyXG4gIDwvcD5cclxuICBcclxuICA8cD4zLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3Byb2pla3RpbnRlZ3JhY2lqYS5wcmF2by5oci9fZG93bmxvYWQvcmVwb3NpdG9yeS9LdWhuX1N0cnVjdHVyZV9vZl9TY2llbnRpZmljX1Jldm9sdXRpb25zLnBkZlwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+My4gS3VobiwgVGhvbWFzLCBUaGUgU3RydWN0dXJlIG9mIFNjaWVudGlmaWMgUmV2b2x1dGlvbnMsIDwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG5cclxuXHJcbiAgdmFyIGJsb2dwb3N0OCA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QWxleGEgaGFzIG1hZGUgaGVhZGxpbmVzIGFib3V0IHJlcG9ydHMgb2YgdW5leHBsYWluZWQgbGF1Z2h0ZXIgcmVzcG9uc2VzXHJcbiAgPHN1cCBpZD1cIjAzMDktMVwiPjE8L3N1cD4uIEluZm9ybWF0aW9uIGxpa2UgdGhpcyBuZWVkcyBhXHJcbiAgPGk+XHJcbiAgPHN0cm9uZz5mYWN0LWNoZWNrPC9zdHJvbmc+XHJcbiAgPC9pPiAmYWdyYXZlOyBsYSBTbm9wZXMuY29tLlxyXG4gIDxzdXAgaWQ9XCIwMzA5LTJcIj4yPC9zdXA+IEFuZCwgd2hldGhlciBvciBub3QgQWxleGEgbWlzaGVhcmQsICZxdW90O0FsZXhhLCBsYXVnaCZxdW90Oywgb3Igbm90LCBpcyBsZXNzIGltcG9ydGFudCB0aGFuIHRoZVxyXG4gIDxpPnNvY2lhbGx5LWludHJ1c2l2ZSBjb25zZXF1ZW5jZXM8L2k+IG9mIHNpbXBsZSBhcHAtZGV2ZWxvcG1lbnQgZXJyb3JzLiBUaGUgZmlyc3QgaXNzdWUgaXMgc2ltcGx5IHRoYXQgcHJvZ3JhbW1lclxyXG4gIDxzdHJvbmc+bG9naWMgPC9zdHJvbmc+IGFuZCB1c2VyLWludGVyZmFjZSBpbnR1aXRpb24gc2hvdWxkIGJlIGFzIGNsZWFyIChhbmQgZ2VuZXJhbGl6ZWQpIGFzIHBvc3NpYmxlLiBUaGlzIGlzIGVhc2llciBzYWlkXHJcbiAgdGhhbiBkb25lLCBmb3IgZXhhbXBsZSB0aGUgcmVjZW50IGNhc2Ugb2YgSGF3YWlpJiMzOTtzIG1pc3Rha2VuXHJcbiAgPGk+aW5jb21pbmctYmFsbGlzdGljLW1pc3NpbGUgd2FybmluZyBzeXN0ZW08L2k+LlxyXG4gIDxzdXAgPjM8L3N1cD4gQXMgaXQgdHVybmVkIG91dCwgdGhlIGRyb3Bkb3duLW1lbnUgZGVzaWduIHBsYWNlZCB0aGUgJnF1b3Q7U2VuZCBUZXN0IFdhcm5pbmcmcXVvdDsgbmV4dCB0byAmcXVvdDtTZW5kIFdhcm5pbmcmcXVvdDtcclxuICBpbiBhbiB1bmludHVpdGl2ZSwgZmFpbC1wb3NzaWJsZSBtYW5uZXIuIE9vcHMuPC9wPlxyXG4gIFxyXG4gIDxwPldoaWxlIG1vc3QgZm9jdXMgb24gQWxleGEgZXQgYWwuJiMzOTtzIGFjdGlvbnMgYW5kIGFiaWxpdGVzLCBpbiB0aGUgbmFtZSBvZiBjYXV0aW9uLCBidXQgcmF0aGVyIHRoZSBsYXJnZXIgaXNzdWVcclxuICBmYWxscyBvbiBob3cgbXVjaCB3ZSBhbGxvdyBvdXJzZWx2ZXMgdG8gbWVudGFsbHkgZGVwZW5kIG9uIHRlY2ggZm9yIHRoaW5ncy48L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV6emZlZWQuY29tL3ZlbmVzc2F3b25nL2FtYXpvbi1hbGV4YS1kZXZpY2VzLWFyZS1sYXVnaGluZy1jcmVlcHk/dXRtX3Rlcm09LnVtNlAxOGE4YSMuY2dnZ1AyajJqXCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5idXp6ZmVlZC5jb20vdmVuZXNzYXdvbmcvYW1hem9uLWFsZXhhLWRldmljZXMtYXJlLWxhdWdoaW5nLWNyZWVweT91dG1fdGVybT0udW02UDE4YThhIy5jZ2dnUDJqMmo8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPjIuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnNub3Blcy5jb20vZmFjdC1jaGVjay9pcy1hbWF6b25zLWFsZXhhLWVtaXR0aW5nLXVucHJvbXB0ZWQtY3JlZXB5LWxhdWdoaW5nL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnNub3Blcy5jb20vZmFjdC1jaGVjay9pcy1hbWF6b25zLWFsZXhhLWVtaXR0aW5nLXVucHJvbXB0ZWQtY3JlZXB5LWxhdWdoaW5nLzwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL25ld3MvbW9ybmluZy1taXgvd3AvMjAxOC8wMS8xNi90aGF0LXdhcy1uby13cm9uZy1idXR0b24taW4taGF3YWlpLXRha2UtYS1sb29rLz91dG1fdGVybT0uYTJhYTY1MzI5MDAyXCJcclxuICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53YXNoaW5ndG9ucG9zdC5jb20vbmV3cy9tb3JuaW5nLW1peC93cC8yMDE4LzAxLzE2L3RoYXQtd2FzLW5vLXdyb25nLWJ1dHRvbi1pbi1oYXdhaWktdGFrZS1hLWxvb2svP3V0bV90ZXJtPS5hMmFhNjUzMjkwMDI8L2E+XHJcbiAgPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0NyA9IGBcclxuXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgaW4gaHVtYW4gaGlzdG9yeSB0aGF0IHdlIGhhdmUgdGhlIGFiaWxpdHkgdG8gc2VlIGVub3VnaCBhYm91dCBvdXJzZWx2ZXMgdGhhdCB3ZSBjYW4gaG9wZSB0b1xyXG4gIGFjdHVhbGx5IGJ1aWxkIHNvY2lhbCBzeXN0ZW1zIHRoYXQgd29yayBxdWFsaXRhdGl2ZWx5IGJldHRlciB0aGFuIHRoZSBzeXN0ZW1zIHdlJiMzOTt2ZSBhbHdheXMgaGFkLjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+LS1BdXRob3IgdW5rbm93bjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TXkgRmVicnVhcnkgMjNyZCBQb3N0IG9uIHdvbWVuIGluIHRlY2ggZm9jdXNlZCBvbiB0aGVcclxuICA8aT53b3JrZm9yY2UgZGVtYW5kPC9pPiBmb3IgbW9yZSB3b21lbiBpbiB0ZWNoIHBvc2l0aW9ucywgaG93ZXZlciB0b2RheSBJJiMzOTttIHdyaXRpbmcgb24gdGhlXHJcbiAgPHN0cm9uZz5cclxuICA8aT5zb2NpYWwgbmVlZDwvaT4gZm9yIG1vcmUgZmVtYWxlIGluc2lnaHQgd2l0aGluIHRoZSB0ZWNoIHdvcmtmb3JjZTwvc3Ryb25nPiAsIGdpdmVuIHRoYXQgcHJvZ3JhbW1pbmcgd2lsbCBpbmNyZWFzaW5nbHlcclxuICBzaGFwZSBvdXIgZnV0dXJlIGluc3RpdHV0aW9ucy4gVGhpcyBtZWFucyB0aGF0IGV2ZXJ5IGluc3RpdHV0aW9uLCB3aGV0aGVyIHByaXZhdGUgaG9zcGl0YWxzLCBub24tcHJvZml0IGNoYXJpdHlcclxuICBmb3VuZGF0aW9ucywgb3IgZ292ZXJubWVudCBidXJlYXVzLCB3aWxsIGVmZmVjdGl2ZWx5IHJlc3RydWN0dXJlIChvcHRpbWl6ZSkgdGhlaXIgb3duIG9yZ2FuaXphdGlvbmFsIHN0cnVjdHVyZSBpblxyXG4gIGFuIGluY3JlYXNpbmdseVxyXG4gIDxpPmRhdGEtZHJpdmVuPC9pPiBwYXJhZGlnbS4gRnJvbSBhIFNvY2lvbG9neSBvZiBPcmdhbml6YXRpb25zIHBlcnNwZWN0aXZlLCB0aGUgY2hhbmdlcyB0byBjb21lIGFyZSBicmVhdGgtdGFraW5nIHRvXHJcbiAgY29uc2lkZXIuPC9wPlxyXG4gIFxyXG4gIDxwPlNvIHdoeSB3b21lbj8gV2hlcmUgY291bGQgSSBzdGFydD8gQmV0dGVyIHN0YXRlZCwgd2h5IGlzIGEgcXVpbnRlc3NlbnRpYWxseSBpbXBvcnRhbnQgam9iIHNlY3RvciwgYSBzZWN0b3IgaW4gZGVzcGVyYXRlXHJcbiAgbmVlZCBmb3IgaW5zaWdodCwgY29tcHJpc2VkIHByaW1hcmlseSBvZiBtZW4/XHJcbiAgPHN1cCA+MTwvc3VwPiBUaGUgZmFjdHMgYXJlIGV2aWRlbnQ6IH4xNS0yMCUgb2Ygd29tZW4gY29tcHJpc2luZyB0ZWNoIHBvc2l0aW9ucy5cclxuICA8c3VwICA+Mjwvc3VwPiBOdW1iZXJzIGFzaWRlLCBJIGFyZ3VlIHRoZXJlIGlzIGEgcXVpbnRlc3NlbnRpYWwgc29jaWV0YWwgbmVlZCBmb3IgbW9yZSB3b21lbiBpbiB0ZWNoOiBUaGlzIGlzIGJlY2F1c2UgY29tcHV0aW5nXHJcbiAgYW5kIHVuZGVyc3RhbmRpbmcgZGF0YSBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgZGF0YSBjb2xsZWN0aW9uIGZyb20gV2ViIDIuMCAobW9iaWxlKSwgYmVjb21pbmcgbW9yZSBuZXR3b3JrZWQgYW5kXHJcbiAgcmVsYXRpb25hbC48L3A+XHJcbiAgXHJcbiAgPHA+VGhlIGNoYWxsZW5nZSBmb3Igc29jaWV0eSBpbiB0aGlzIGFnZSBpcyBoaXN0b3JpYywgYW5kIHdvbWVuIG11c3QgYWJzb2x1dGVseSBiZSBpbmNsdWRlZCBpbiB0aGUgcHJvY2VzcyBvZiB0aGUgYWdlOlxyXG4gIFBsZWFzZSBjb25zaWRlciwgdGhhdCBpbiB0aGUgMTY1MCYjMzk7cywgdGhlIGludmVudGlvbiBvZiB0aGUgbWljcm9zY29wZSBvcGVuZWQgYSBuZXcgd29ybGQgb2YgZGF0YSBhbmRcclxuICA8aT5pbmZvcm1hdGlvbjwvaT4gYWJvdXQgdGhlIGJhY3RlcmlvbG9naWNhbCwgbWljcm9zY29waWMgc3Vycm91bmRpbmdzLS1oaXRoZXJ0byBibGluZCB0byBhbGwuIExpa2V3aXNlLCB0aGUgdGVsZXNjb3BlXHJcbiAgaGFzIGFsbG93ZWQgdXMgYXMgYSBzb2NpZXR5IHRvIGV4cGxvcmUgdGhlIG91dGVyIHVuaXZlcnNlIGFuZCBlYXJ0aCYjMzk7cyBwb3NpdGlvbiB3aXRoaW4gaXQuPC9wPlxyXG4gIFxyXG4gIDxwPk5vdywgdGhlIGludmVudGlvbnMgb2YgbWFjaGluZS1sZWFybmluZywgY29tcHV0aW5nIGNvdXBsZWQgd2l0aCBCaWcgRGF0YSBhbmFseXRpY3MsIGFsbG93cyB1cyB0byBleHBsb3JlIChhbmQgbWFuYWdlKVxyXG4gIGEgdW5pdmVyc2Ugb2Yga25vd2xlZGdlLS1hYm91dFxyXG4gIDxpPm91cnNlbHZlczwvaT4sIGh1bWFuIHNvY2lldHktLXdpdGggdW5mYXRob21hYmx5IGNvbXBsZXgsIHVuc3RydWN0dXJlZCByZWxhdGlvbmFsIGRhdGEgc3RydWN0dXJlcy4gQWNjZXNzaW5nIHRoZVxyXG4gIGRhdGEgdG8gY29tcHV0ZXItcmVhZGFibGUgZm9ybSBpcyBvbmUgdGhpbmcsIGJ1dCBtZWFuaW5nIGluIGRhdGEgaXMgaW5hY2Nlc3NpYmxlIHVudGlsIHRoZVxyXG4gIDxpPm91dHB1dDwvaT4gY2FuIGJlXHJcbiAgPGk+cmUtPC9pPnByb2dyYW1tZWQgaW50byBtZWFuaW5nZnVsLCBodW1hbi1yZWFkYWJsZSBkYXRhLCBpLmUuIGluZm9ybWF0aW9uLiBUaGlzIGxhdHRlciBzdGFnZSBvZiBkZXZlbG9wbWVudCBpcyB0aGVcclxuICBrZXkgY2hhbGxlbmdlLS1mb3Igd2hpY2ggc3VjY2VzcyBkZXBlbmRzIG9uIHJlcHJlc2VudGF0aXZlIGZlbWFsZSBwYXJ0aWNpcGF0aW9uIGluIFRlY2guPC9wPlxyXG4gIFxyXG4gIDxwPkFkZGluZyB0byB0aGUgY2hhbGxlbmdlIG9mIGZpbmRpbmcgbWVhbmluZ2Z1bCB0cmVuZHMgaXMgdGhlIGJhY2tkcm9wIG9mIG5vaXNlIGZyb20gc3B1cmlvdXMgdmFyaWFibGVzLiBUaGlzIGlzIGFraW5cclxuICB0byBmaW5kaW5nIGEgbmVlZGxlIGluIGFuIGluY3JlYXNpbmdseSBjb21wbGV4IGFuZCBncm93aW5nIGhheXN0YWNrLjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+V2hhdCYjMzk7cyBkaWZmZXJlbnQgbm93IGFuZCBoYXMgY2hhbmdlZCBpcyBpdCYjMzk7cyBubyBsb25nZXIgYWJvdXQgdGFraW5nIHRoaXMgZGF0YSwgcHV0dGluZyBpdCBpbnRvIGEgY29tcHV0ZXJcclxuICBydW5uaW5nIGEgY2FsY3VsYXRpb24gYW5kIGdldHRpbmcgYSBiYWxhbmNlIHNoZWV0IGFuc3dlciAuLi48L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPldoYXQmIzM5O3MgaW1wb3J0YW50IG5vdyBpcyB3aGF0IGlzIHRoZSBjb250ZXh0IG9mIHRoZSBkYXRhLCB3aGF0IGlzIGl0IGNvbm5lY3RlZCB0bywgd2hhdCBlZmZlY3QgaXMgaXQgaGF2aW5nIG9uXHJcbiAgZGF0YSBhcm91bmQgaXQuLi4gSXQmIzM5O3MgYmFzaWNhbGx5IGEgbmV0d29yayBvZiB0aGUgZGF0YSwgaXQmIzM5O3Mgbm8gbG9uZ2VyIHNvcnQgb2YgdGFidWxhciBjb2x1bW5zLCBvZiByb3dzXHJcbiAgb2YgZGF0YSwgaXQmIzM5O3NcclxuICA8aT5pbnRlcmNvbm5lY3RlZCBwYXR0ZXJuczwvaT4uXHJcbiAgPGJyIC8+IC0tVGltIENvb2s8L3A+XHJcbiAgXHJcbiAgPHA+VGhpcyBxdW90ZSBtZWFucyB0aGF0IGFzIHdlIG1vdmUgYXdheSBmcm9tIHJ1bGUtYmFzZWQsIG1lY2hhbmlzdGljIGRhdGEgYW5hbHl0aWNzIHRvd2FyZCBtb3JlIGNvbXBsZXgsIHJlbGF0aW9uYWxcclxuICBhbmQgbmV0d29ya2VkIGRhdGEsIHdlIG5lZWQgYW4gZXF1YWxseSBjb21wbGV4IHBhcmFkaWdtIHRvIGtlZXAgdXAuIEV4Y2x1ZGluZyB0aGUgZmVtYWxlIG1pbmQgZnJvbSB0aGlzIGNoYWxsZW5nZVxyXG4gIGlzIG5vdCBzaW1wbHkgYSBjbHVtc3ksIG15b3BpYyBtaXN0YWtlLiBXb3JzZSB5ZXQsIHNvIGxvbmcgYXMgdGhlIFRlY2ggSW5kdXN0cnkgcmVtYWlucyBnZW5kZXIgbG9wLXNpZGVkLCBUZWNoIHdpbGxcclxuICBpbmNyZWFzaW5nbHkgcmVzZW1ibGUgYW5vdGhlciBteW9waWMgYmVhc3QsIGEgY2F2ZS1kd2VsbGVyIG5hbWVkIEN5Y2xvcHMuPC9wPlxyXG4gIFxyXG4gIDxwPjEuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmh1ZmZpbmd0b25wb3N0LmNvbS8yMDE1LzAzLzI3L3dvbWVuLWluLXRlY2hfbl82OTU1OTQwLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5odWZmaW5ndG9ucG9zdC5jb20vMjAxNS8wMy8yNy93b21lbi1pbi10ZWNoX25fNjk1NTk0MC5odG1sPC9hPlxyXG4gIDwvcD5cclxuICBcclxuICA8cD4yLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL2ZhaXJ5Z29kYm9zcy5jb20vYXJ0aWNsZXMvd29tZW4taW4tdGVjaC1mYWN0cy1maWd1cmVzLWFuZC1wZXJjZW50YWdlc1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vZmFpcnlnb2Rib3NzLmNvbS9hcnRpY2xlcy93b21lbi1pbi10ZWNoLWZhY3RzLWZpZ3VyZXMtYW5kLXBlcmNlbnRhZ2VzPC9hPlxyXG4gIDwvcD5cclxuICBcclxuICA8cD4zLlxyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5hYXV3Lm9yZy9yZXNlYXJjaC93aHktc28tZmV3L1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmFhdXcub3JnL3Jlc2VhcmNoL3doeS1zby1mZXcvPC9hPlxyXG4gIDwvcD5cclxuICBgXHJcblxyXG4gIHZhciBibG9ncG9zdDYgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPldhc2hpbmd0b24mIzM5O3MgYXNzZXJ0aW9uIG9mIFN0YXRlcyYjMzk7IFJpZ2h0cyB5ZXN0ZXJkYXkgbWF5IGF1Z3VyIHRoZSBmaXJzdCBvZiBtYW55IGxhd3N1aXRzIG92ZXIgY29udHJvbCBvdmVyXHJcbiAgYmFuZHdpZHRoLjwvcD5cclxuICBgXHJcblxyXG5cclxuICB2YXIgYmxvZ3Bvc3Q1ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5OZXQgTmV1dHJhbGl0eSBSdWxlcywgcG90ZW50aWFsbHkgb25lIG9mIHRoZSBtb3JlIGltcG9ydGFudCBzZXQgb2YgSW5kaXZpZHVhbCBSaWdodHMgZm9yIHVzIGFzIGNpdGl6ZW5zIGluIHRoZSB0ZWNoXHJcbiAgYWdlLCB3aWxsIHNvb24gdW5kZXJnbyB0aGUgcnVsZSBjaGFuZ2VzIHZvdGVkIGJ5IHRoZSBGZWRlcmFsIENvbW11bmljYXRpb25zIENvbW1pc3Npb24gKEZDQykgdGhpcyBwYXN0IERlY2VtYmVyLlxyXG4gIEluIGEgbnV0c2hlbGwsIHRoZSBJbnRlcm5ldCBTZXJ2aWNlIFByb3ZpZGVycyAoSVNQJiMzOTtzKSwgZS5nLiBDb21jYXN0LCBDb3gsIFZlcml6b24gYXJlIGdyYW50ZWQgdGhlIHBvd2VyLS1hc1xyXG4gIGEgVGl0bGUgSSAmcXVvdDtpbmZvcm1hdGlvbiBzZXJ2aWNlJnF1b3Q7LS10byBzbG93IGRvd24gdHJhZmZpYywgbWFrZSBmYXN0LSAmYW1wOyBzbG93LWxhbmVzLiBPZiBjb3Vyc2UgdGhpcyBpc1xyXG4gIGJhZCBuZXdzIGZvciBpbnRlcm5ldC11c2VycyBiZWNhdXNlIGV2ZW4gcHJlbWl1bSB1c2VycyBtYXkgZXhwZXJpZW5jZSAmcXVvdDt0aHJvdHRsaW5nJnF1b3Q7IGlmIHVzaW5nIHRoZSBJU1AmIzM5O3NcclxuICBwcmVmZXJyZWQgYXBwcy4gVGhlIG9ubHkgc3RpcHVsYXRpb24gaG9sZHMgdGhhdCB0aGUgSVNQJiMzOTtzIHJ1bGVzIGFyZSBtYWRlIHB1YmxpYy4gSG93ZXZlciwgMjEgc3RhdGVzIGFyZSBicmluZ2luZ1xyXG4gIGxhd3N1aXRzIHRvIGZpZ2h0IHRoZXNlIGNoYW5nZXMsIGFuZCB0aGUgZmlyc3QgYXNzZXJ0aW9uIG9mIFN0YXRlIExhdyBieSBXYXNoaW5ndG9uIFN0YXRlIHRvZGF5OjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIEZDQyBpcyBhbHJlYWR5IGVtYnJvaWxlZCBpbiBhIHZhcmlldHkgb2YgbGF3c3VpdHMgcmVsYXRlZCB0byBpdHMgcm9sbGJhY2sgb2YgbmV0IG5ldXRyYWxpdHkgcnVsZXMsIGluY2x1ZGluZ1xyXG4gIGFuIGVmZm9ydCBmcm9tIDIxIHN0YXRlIGF0dG9ybmV5cyBnZW5lcmFsIHRvIGdldCBhIGNvdXJ0IHRvIGJsb2NrIHRoZSBGQ0MmIzM5O3MgbW92ZS48L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiZxdW90O1RoaXMgaXMgc3ltYm9saWMgcG9saXRpY3MsIGJlY2F1c2UgdGhlIHN0YXRlcyBrbm93IGl0IGlzIGlsbGVnYWwgdG8gZG8sJnF1b3Q7IFJvc2x5biBMYXl0b24sIGEgdmlzaXRpbmcgc2Nob2xhclxyXG4gIGF0IHRoZSBBbWVyaWNhbiBFbnRlcnByaXNlIEluc3RpdHV0ZSwgdG9sZCBOQkMgTmV3cy4gJnF1b3Q7QnV0IHRoZXkgY2FuIHB1dCBydWxlcyBvbiB0aGUgYm9vayBhbmQgbWFrZSBpdCBsb29rIGxpa2VcclxuICB0aGV5JiMzOTtyZSBkb2luZyBzb21ldGhpbmcuJnF1b3Q7IFRoZSBGQ0MgaXMgYWxyZWFkeSBlbWJyb2lsZWQgaW4gYSB2YXJpZXR5IG9mIGxhd3N1aXRzIHJlbGF0ZWQgdG8gaXRzIHJvbGxiYWNrXHJcbiAgb2YgbmV0IG5ldXRyYWxpdHkgcnVsZXMsIGluY2x1ZGluZyBhbiBlZmZvcnQgZnJvbSAyMSBzdGF0ZSBhdHRvcm5leXMgZ2VuZXJhbCB0byBnZXQgYSBjb3VydCB0byBibG9jayB0aGUgRkNDJiMzOTtzXHJcbiAgbW92ZS5cclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+UyBUaGUgYmlnIHF1ZXN0aW9uIGFyaXNlcyBvdmVyXHJcbiAgPGk+d2hvPC9pPiBoYXMganVyaXNkaWN0aW9uIGJldHdlZW4gdGhlIFN0YXRlcyYjMzk7IGFuZCBGZWRlcmFsIGF1dGhvcml0eTsgeWV0IG9uZSB0aGluZyBpcyBjZXJ0YWluLCB0aGUgY29taW5nIGJhdHRsZVxyXG4gIGZvciBwcm90ZWN0aW5nIGNpdGl6ZW5zJiMzOTsgcmlnaHRzIHdpbGwgdGFrZSBwbGFjZSBvdmVyIGp1cmlzZGljdGlvbiBvZiBJbnRlcm5ldCBCYW5kd2lkdGggdHVyZi48L3A+XHJcbiAgXHJcbiAgPHA+XHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm5iY25ld3MuY29tL3RlY2gvdGVjaC1uZXdzL3dhc2hpbmd0b24tc3RhdGUtcGFzc2VzLW5ldC1uZXV0cmFsaXR5LWxhdy1zdGF0ZXMtcHVzaC1iYWNrLWFnYWluc3Qtbjg1NDA4NlwiXHJcbiAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cubmJjbmV3cy5jb20vdGVjaC90ZWNoLW5ld3Mvd2FzaGluZ3Rvbi1zdGF0ZS1wYXNzZXMtbmV0LW5ldXRyYWxpdHktbGF3LXN0YXRlcy1wdXNoLWJhY2stYWdhaW5zdC1uODU0MDg2PC9hPlxyXG4gIDwvcD5cclxuICBgXHJcblxyXG4gIHZhciBibG9ncG9zdDQgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkdlcm1zIHByZXNlbnQgYSB0aW1lbHkgdG9waWMgZm9yIHRvZGF5LCBnaXZlbiB0aGUgZXNwZWNpYWxseSB2aXJ1bGVudFxyXG4gIDxzdHJvbmc+Rmx1IFZpcnVzIHN0cmFpbjwvc3Ryb25nPi4gTWFueSwgbGlrZSBtZSwgaGF2ZSB3b25kZXJlZCB3aHkgb3VyIDE5NDAmIzM5O3MtZXJhXHJcbiAgPHN1cD4xPC9zdXA+IHRlY2hub2xvZ3kgaW4gRmx1IFZhY2NpbmUgZmFicmljYXRpb24gd291bGRuJiMzOTt0IGludml0ZSBtb3JlIGlubm92YXRpdmUgc29sdXRpb25zLiBXaXRob3V0IGZlaWduaW5nIGFueVxyXG4gIG1lZGljYWwgZXhwZXJ0aXNlLCBJIGhhdmUgdG8gc3RpbGwgYXNrIGFib3V0IHRoZSBwcm9ncmVzcyBtYWRlIHdpdGggdGhlIGV2ZXItbXV0YXRpbmctLWkuZS4sIGRyaWZ0aW5nLS1GbHUgdmlydXMmIzM5O1xyXG4gIHN1cmZhY2UgcHJvdGVpbiAmcXVvdDtoZWFkLCZxdW90OyBjYWxsZWQgaGVtYWdsdXRpbmluLiBUaGlzIHN0cmF0ZWd5ICZxdW90O2d1ZXNzZXMgcmlnaHQmcXVvdDsgdmVyeSBlZmZlY3RpdmVseSxcclxuICBhbmQgcHJvdmlkZXMgYW4gZWZmZWN0aXZlIHNvbHV0aW9uIGZvciBtb3N0LCBpbiBtb3N0IHllYXJzLiBZZXQgdGhpcyB3aW50ZXIgaGFzIHJldmVhbGVkIHRoYXQgZWZmZWN0aXZlbmVzcyBzdGF0aXN0aWNzXHJcbiAgYXJlXHJcbiAgPGk+bm90IGFsd2F5czwvaT4gaW4gb3VyIGZhdm9yLjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+Rm9yIG1hbnkgZGVjYWRlcywgcmVzZWFyY2hlcnMgYmVsaWV2ZWQgdGhlIGZsdSB2YWNjaW5lIG9mZmVyZWQgc29saWQgcHJvdGVjdGlvbiBpZiBpdCB3YXMgYSBnb29kIG1hdGNoIHRvIHRoZSBjaXJjdWxhdGluZ1xyXG4gIHN0cmFpbnM7IHN0dWRpZXMgZnJvbSB0aGUgMTk0MHMgdGhyb3VnaCB0aGUgMTk2MHMgcm91dGluZWx5IHNob3dlZCBhbiBlZmZpY2FjeSBvZiA3MCUgdG8gOTAlLiBCdXQgdGhvc2Ugc3R1ZGllc1xyXG4gIHJlbGllZCBvbiBhIG1pc2xlYWRpbmcgbWV0aG9kb2xvZ3kuPC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5EYW51dGEgU2tvd3JvbnNraSwgYW4gZXBpZGVtaW9sb2dpc3QgYXQgdGhlIEJDIENlbnRyZSBmb3IgRGlzZWFzZSBDb250cm9sIGluIFZhbmNvdXZlciwgQ2FuYWRhLCBpbnN0ZWFkIGJsYW1lcyBtdXRhdGlvbnNcclxuICBpbiB0aGUgdmFjY2luZSBzdHJhaW4gaXRzZWxmLiBUaGUgbW9zdCBjb21tb24gaW5mbHVlbnphIHZhY2NpbmUgY29udGFpbnMgYW4gJnF1b3Q7aW5hY3RpdmF0ZWQmcXVvdDsgdmlydXMsIHdoaWNoXHJcbiAgbWFudWZhY3R1cmVycyBncm93IGluIGNoaWNrZW4gZWdncy4gQXMgU2tvd3JvbnNraSYjMzk7cyB0ZWFtIGZpcnN0IHJlcG9ydGVkIGluIDIwMTQsIHRoZSB2aXJ1cyBjYW4gbXV0YXRlIHdoaWxlXHJcbiAgaXQgaXMgZ3Jvd2luZyBpbiB0aGUgZWdncywgcmVzdWx0aW5nIGluIGEgdmFjY2luZSB1bmFibGUgdG8gYmxvY2sgY2lyY3VsYXRpbmcgc3RyYWlucy5cclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+RWFybGllciwgSSBjYXN1YWxseSBtZW50aW9uZWQgJnF1b3Q7Z3Vlc3NpbmcmcXVvdDssIHlldCB3aXRoIGdyZWF0IHJlc3BlY3QsIHRoZSBzY2llbmNlIGJlaGluZCBlc3RpbWF0aW5nIHRoZSBmbHVcclxuICB2aXJ1cyBiZXR3ZWVuIHRoZSB0aW1lIG9mIFIgJmFtcDsgRCwgZmFicmljYXRpb24sIGFuZCB0aGUgZmx1XHJcbiAgPGk+c2Vhc29uPC9pPi4gKFRoaXMgYW50aWdlbmljIGRyaWZ0LCBub3QgdG8gYmUgY29uZnVzZWQgd2l0aFxyXG4gIDxpPkFudGlnZW5pYyBTaGlmdDwvaT4gaW4gd2hpY2ggdGhlIEZsdSBWaXJ1cyBtYWtlcyBhbiBhYnJ1cHQgY2hhbmdlLikgSSYjMzk7bGwgbGV0IHRoZSBDREMgYWJicmV2aWF0ZSB0aGlzOjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+T25lIHdheSB0aGV5IGNoYW5nZSBpcyBjYWxsZWQgJmxkcXVvO2FudGlnZW5pYyBkcmlmdC4mcmRxdW87IFRoZXNlIGFyZSBzbWFsbCBjaGFuZ2VzIGluIHRoZSBnZW5lcyBvZiBpbmZsdWVuemEgdmlydXNlc1xyXG4gIHRoYXQgaGFwcGVuIGNvbnRpbnVhbGx5IG92ZXIgdGltZSBhcyB0aGUgdmlydXMgcmVwbGljYXRlcy4gVGhlc2Ugc21hbGwgZ2VuZXRpYyBjaGFuZ2VzIHVzdWFsbHkgcHJvZHVjZSB2aXJ1c2VzIHRoYXRcclxuICBhcmUgcHJldHR5IGNsb3NlbHkgcmVsYXRlZCB0byBvbmUgYW5vdGhlciwgd2hpY2ggY2FuIGJlIGlsbHVzdHJhdGVkIGJ5IHRoZWlyIGxvY2F0aW9uIGNsb3NlIHRvZ2V0aGVyIG9uIGEgcGh5bG9nZW5ldGljXHJcbiAgdHJlZS4gVmlydXNlcyB0aGF0IGFyZSBjbG9zZWx5IHJlbGF0ZWQgdG8gZWFjaCBvdGhlciB1c3VhbGx5IHNoYXJlIHRoZSBzYW1lIGFudGlnZW5pYyBwcm9wZXJ0aWVzIGFuZCBhbiBpbW11bmUgc3lzdGVtXHJcbiAgZXhwb3NlZCB0byBhbiBzaW1pbGFyIHZpcnVzIHdpbGwgdXN1YWxseSByZWNvZ25pemUgaXQgYW5kIHJlc3BvbmRcclxuICA8c3VwPjI8L3N1cD4uPC9wPlxyXG4gIFxyXG4gIDxwPlNvLCB1bHRpbWF0ZWx5LCB0aGUgc3RyYXRlZ3kgaXMgdG8gZXN0aW1hdGUgdGhlIGZvcm0sIGxvY2F0aW9uLCBvZiB0aGF0IHZpcnVzLS13aGF0IGl0IHdpbGwgbG9vayBsaWtlLS1hdCBhIHBhcnRpY3VsYXJcclxuICBwZXJpb2QgZWFjaCB5ZWFyLiBUaGlzIGltcGxpY2F0ZXMgYSBzdHJhdGVneSB0byBlc3RpbWF0ZSB0aGUgdHJhamVjdG9yeSwgc3RhZ2UgYnkgc3RhZ2UsIG9mIHRoaXMgdmlydXMsIGkuZS4gYSBsb25naXR1ZGluYWxcclxuICB0aW1lLXNlcmllcyBtb3JwaG9sb2d5LCBlYWNoIHllYXIuIFRoZSBhcnRpY2xlIG1ha2VzIHRoaXMgcG9pbnQgbW9yZSBwcmVjaXNlOjwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+QnV0IHRoZXNlIHNtYWxsIGdlbmV0aWMgY2hhbmdlcyBjYW4gYWNjdW11bGF0ZSBvdmVyIHRpbWUgYW5kIHJlc3VsdCBpbiB2aXJ1c2VzIHRoYXQgYXJlIGFudGlnZW5pY2FsbHkgZGlmZmVyZW50IChmdXJ0aGVyXHJcbiAgYXdheSBvbiB0aGUgcGh5bG9nZW5ldGljIHRyZWUpLiBXaGVuIHRoaXMgaGFwcGVucywgdGhlIGJvZHkmcnNxdW87cyBpbW11bmUgc3lzdGVtIG1heSBub3QgcmVjb2duaXplIHRob3NlIHZpcnVzZXMuXHJcbiAgPHN1cD4yPC9zdXA+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPlBldHJpIGRpc2hlcyBhc2lkZSwgbGV0JiMzOTtzIGZvY3VzIG9uIHRoZSBjaGFuZ2luZyBuYXR1cmUgb2YgdGhlIEZsdSBWaXJ1cywgd2hpY2ggbWFrZXMgaXRzZWxmIGFcclxuICA8aT5yZXNlYXJjaCA8L2k+Y2hhbGxlbmdlIGluIGl0c2VsZiBiZWNhdXNlIG9mIGFuIGV2ZXItbXV0YXRpbmcgb2JqZWN0IG9mIHN0dWR5LiBZZXQsIHRoaXMgZXZlci1jaGFuZ2luZyBuYXR1cmUgYWxzb1xyXG4gIHByb3ZpZGVzIHRoZSB2ZXJ5IHRvb2wgU3RhdGlzdGljaWFucyBuZWVkIG1vc3QgZm9yIGVzdGltYXRpbmc6IEJpZyBEYXRhLiBUaGUgTGF3IG9mIExhcmdlIE51bWJlcnMgbWVhbnMgdGhhdCBwbGFpblxyXG4gIG1hdGggY2FuIGFjY3VyYXRlbHkgcGxvdCwgYW5kIGluIG1vc3QgY2FzZXMgcHJlZGljdCB3aXRoIGEgbW9kZXJhdGUgc3RhdGlzdGljYWwgc2lnbmlmaWNhbmNlLCBmdXR1cmUgZXZlbnRzLCBzb3J0XHJcbiAgb2YuPC9wPlxyXG4gIFxyXG4gIDxwPlNvcnQgb2YgSSBzYXkgYmVjYXVzZSB0b28gb2Z0ZW4gd2UgcHJlZGljdCB0aGF0IHR3byBzZXBhcmF0ZSBldmVudHMgYXJlIG1vcmUgbGlrZWx5IHRvIG9jY3VyLCBjb25kaXRpb25hbCBvbiBlYWNoXHJcbiAgb3RoZXIsIHRoZW4gY29uZGl0aW9uYWwgdXBvbiBvdGhlciBmYWN0b3JzLiBUaGlzIGJlaW5nXHJcbiAgPGk+Y29ycmVsYXRpb248L2k+LCBidXQgdGhlIFN0YXRpc3RpY2lhbiYjMzk7cyBIb2x5IEdyYWlsIGlzIHRoZSBvdGhlciBraW5kOiBDYXVzYWxpdHkuIENhdXNhbGl0eSBoaW5nZXMgb24gb25seSB0aHJlM2VcclxuICB0aGluZ3M6IDEpIEFzc29jaWF0aW9uLCAyKSBUaW1lIFByZWNlZGVuY2UsIGFuZCAzKSBSdWxpbmcgb3V0IGFueVxyXG4gIDxpPiBlZmZlY3Q8L2k+IG9mIHNwdXJpb3VzIHZhcmlhYmxlcy4gKEhhbmcgd2l0aCBtZSwgSSYjMzk7bSBzdGlsbCBnZXR0aW5nIGJhY2sgdG8gdGhlIHN1YmplY3Qgb2Ygb3VyIGFubnVhbCBwcmVkaWN0aW9uc1xyXG4gIGFib3V0IGEgZmV3IG1vbnRocyYjMzk7IHdvcnRoIG9mIGFudGlnZW5pYyBkcmlmdC4pPC9wPlxyXG4gIFxyXG4gIDxwPlRoZXJlZm9yZSwgQmlnIGRhdGEsIGFuZCBuZXcgYWR2YW5jZXMgaW4gdGhlIHN0YXRpc3RpY2FsIHNjaWVuY2VzLCBhbmQgdGhlIHRlY2hub2xvZ3kgdGhhdCBpbmNyZWFzaW5nbHkgZGVmaW5lcyBvdXJcclxuICBzY2llbmNlcywgbWF5IHNvb24gcmVmaW5lIGFuZCBzdXBlcmNoYXJnZSByZXNlYXJjaCBpbnRvIHRoZSBmaXJzdCBhbmQgdGhpcmQgb2YgdGhlIHRocmVlIHBvaW50cyBvZiBjYXVzYWxpdHkuIFRoZVxyXG4gIGZpcnN0IG9mIHRoZXNlLCB0aGUgYXNzb2NpYXRpb25zLCBhbG9uZyB0aGUgcGh5bG9nZW5ldGljIHRyZWUsIGFyZSBtZXJlbHkgYSBuZXR3b3JrIGF0IGl0cyBiYXNlLCB0aGUgc2NpZW5jZSBvZlxyXG4gIHdoaWNoIGdhaW5zIGNvbXB1dGF0aW9uYWwgc3RyZW5ndGggZWFjaCB5ZWFyLiBSYXJlIGFzIGl0IGlzIGluIEFjYWRlbWlhLCBpbiB0aGlzIGNhc2UgTWlnaHQgbWFrZXMgUmlnaHQhPC9wPlxyXG4gIFxyXG4gIDxwPlxyXG4gIFRoZSB0aGlyZCB0ZW5ldCBvZiBjYXVzYWxpdHksIGFmdGVyIGFzc29jaWF0aW9uIGFuZCB0aW1lIGRpcmVjdGlvbiwgaXMgcnVsaW5nIG91dCB0aGUgZWZmZWN0IG9mIG90aGVyIGZhY3RvcnMgd2hlbiBzZXBhcmF0aW5nXHJcbiAgPGk+Y2F1c2U8L2k+IGFuZCBjb25zZXF1ZW5jZS4gQWR2YW5jZXMgaW4gbWFuYWdpbmcgYmlnIGRhdGEsIGFuZCBzdGF0aXN0aWNhbCBhbmFseXNpcyBvZiBpdCwgbWVhbnMgZ2FpbmluZyBhIGJldHRlclxyXG4gIGhhbmRsZSBvbiB0aGUgbXVsdGlwbGUgZWZmZWN0cyBvZlxyXG4gIDxzdXA+c3B1cmlvdXMgPC9zdXA+ZmFjdG9ycywgaGVuY2UgYW5hbHlzaXMgb3B0aW1pemVkIGJ5IG5ldywgbmV0d29yay1ncmFwaCBkYXRhIHN0cnVjdHVyZSB0ZWNobm9sb2d5LiBUaGUgTGF3IG9mIExhcmdlXHJcbiAgTnVtYmVyc1xyXG4gIDxzdXA+Mzwvc3VwPiwgaS5lLiB0aGUgc2hlZXIgbnVtYmVyIG9mIG11dGF0aW9ucyBhbmQgb3RoZXIgZmFjdG9ycywgY291cGxlZCB3aXRoIG5ld1xyXG4gIDxzdHJvbmc+dGVjaG5vbG9neTwvc3Ryb25nPiwgd2lsbCBiZXR0ZXIgaW5mb3JtIHRoZSBtb3JwaG9sb2d5IG9mIHRoZVxyXG4gIDxpPnBhdGg8L2k+IG9mIHRoZSB2aXJ1cywgYWxvbmcgdGhlIHBoeWxvZ2VuZXRpYyB0cmVlIGl0c2VsZi4gV2hvIGtub3dzIHdoZXJlIGEgY3VyZSBtYXkgY29tZSBmcm9tLCBwZXJoYXBzIGEgYmlvLXN0YXRpc3RpY2lhblxyXG4gIG91dCB0aGVyZSwgY2h1cm5pbmcgdGhlIG51bWJlcnMsIG1heSBiZSB0aGUgb25lIHRvIHN0dW1ibGUgdXBvbiBhIGJldHRlciBGbHUgVmFjY2luZSFcclxuICBcclxuICA8L3A+XHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cDovL3d3dy5zY2llbmNlbWFnLm9yZy9uZXdzLzIwMTcvMDkvd2h5LWZsdS12YWNjaW5lcy1zby1vZnRlbi1mYWlsXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHA6Ly93d3cuc2NpZW5jZW1hZy5vcmcvbmV3cy8yMDE3LzA5L3doeS1mbHUtdmFjY2luZXMtc28tb2Z0ZW4tZmFpbCA8L2E+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPjIuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vcXouY29tLzExNDM0MjAvdGhlLTIwMTctMjAxOC1mbHUtdmFjY2luZS1pcy1sZXNzLWVmZmVjdGl2ZS10aGFuLXVzdWFsXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vcXouY29tLzExNDM0MjAvdGhlLTIwMTctMjAxOC1mbHUtdmFjY2luZS1pcy1sZXNzLWVmZmVjdGl2ZS10aGFuLXVzdWFsIDwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+My5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY2RjLmdvdi9mbHUvYWJvdXQvdmlydXNlcy9jaGFuZ2UuaHRtXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vd3d3LmNkYy5nb3YvZmx1L2Fib3V0L3ZpcnVzZXMvY2hhbmdlLmh0bSA8L2E+XHJcbiAgPC9wPlxyXG4gIGBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MyA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QmFjayBpbiAxOTk3LCBhIFB1bGl0emVyLVByaXplIHdpbm5pbmcgdGhlb3J5LS1iYXNlZCBvbiBEci4gSmFyZWQgRGlhbW9uZCYjMzk7c1xyXG4gIDxpPkd1bnMsIEdlcm1zLCBhbmQgU3RlZWw6IFRoZSBGYXRlIG9mIEh1bWFuIFNvY2lldGllczwvaT4gLS1wcm92aWRlZCB0aGUgcmVjaXBlIGJvb2sgZm9yIHRoZSBzdWNjZXNzIG9mIHNvY2lldGllcy5cclxuICBOb3Qgd2l0aG91dCBjb250cm92ZXJzeSwgdGhlIHRoZW9yeSBwb3NpdHMgdGhhdCBnZW9ncmFwaGljIGFuZCBlbnZpcm9ubWVudGFsIHByZWNvbmRpdGlvbnMsIG9uY2UgbWV0LCBwcm92aWRlIHRlY2hcclxuICAmYW1wOyByZXNvdXJjZXMgdHJhZGluZyBvcHBvcnR1bml0aWVzLCB3aXRoaW4gYSBuZXR3b3JrIG9mIG90aGVyIG5hdGlvbi1zdGF0ZXMgYWxzbyB2eWluZyBmb3IgdGVjaG5vZ2ljYWwgaW5ub3ZhdGlvbi48L3A+XHJcbiAgXHJcbiAgPHA+QSBuYXRpb24mIzM5O3MgVGVjaG5vbG9neSwgaW4gdHVybiwgb3BlbnMgdGhlIG1lYW5zIG5lY2Vzc2FyeSB0byBleHBhbnNpdmUsIHN0YWJsZSwgaW5kZXBlbmRlbnQgc292ZXJlaWdudHkgdGhhdFxyXG4gIGxhc3RzIGFuZCB0aHJpdmVzLiBFcXVhbGx5IHNvLCB0aGUgbmF0aW9uJiMzOTtzIGZyaWVuZHMsIGVzcGVjaWFsbHkgdGhvc2UgbWFraW5nIHRoZSBiZXN0LWZyaWVuZHMgbGlzdCwgc2hhcmUgYW5kXHJcbiAgcmVjZWl2ZSBhIHNlY29uZGFyeSwgJnF1b3Q7cmVzaWR1YWwmcXVvdDsgdGVjaG5vbG9naWNhbCBidW1wIG92ZXIgdGhlIHRpbWUtY291cnNlIG9mIHRoZSBuZXR3b3JrJiMzOTtzIGZ1dHVyZSB0cmFkaW5nLFxyXG4gIGkuZS4gbmV0d29yayB0cmFuc2FjdGlvbnMuIFNvLCBpZiBvdXIgYmVzdCBmcmllbmRzIENhbmFkYSBhbmQgTWV4aWNvIGFyZSBsZXNzIGtlZW4sIHRoZW4gdGhlcmUgaXMgbmV0d29yayByZXZlcmJlcmF0aW9uITwvcD5cclxuICBcclxuICA8cD5HaXZlbiB0aGUgYWR2ZW50IG9mIGEgcmVhbCwgbGFzdGluZyBUcmFkZS1XYXIsIEkgd291bGQgdGhpbmsgdGhhdCBhIG5ldHdvcmsgdGhlb3Jpc3Qgd291bGRuJiMzOTt0IGJlIGJldHRpbmcgb24gb25lXHJcbiAgcGFydGljdWxhciBub2RlIHdpdGhpbiB0aGlzIG5ldHdvcmsuIEkgc2F5IHRoaXMgYmVjYXVzZSBhIGRpc3Byb3BvcnRpb25hdGVseSBhc3ltbWV0cmljYWwgZmxvdyBvZiB0ZWNobm9sb2d5IGFuZFxyXG4gIHJlc291cmNlcywgd2hpbGUgc2ltdWx0YW5lb3VzbHkgcmFpc2luZyBwcmljZXMgb24gbW9zdCBzdGFwbGUgZ29vZHMsIG1heSBzcGVsbCB0cm91YmxlIGZvciB0aGUgRXZlcnktRGF5IHBlcnNvbi5cclxuICBTbyBmYXIsIE5hdGlvbi1TdGF0ZTogMCwgUGVvcGxlOiAwIC4uLiBTbywgd2hvIHdpbnMgd2l0aCBhIFRyYWRlIFdhcj8gQWxhcywgbGV0JiMzOTtzIGhvcGUgbm90IHRoZSByZXN1cnJlY3Rpb25cclxuICBvZiB0aGUgTmVvLU11bHRpLU5hdGlvbmFsIENvcnBvcmF0aW9ucywgYm9ybiBmcm9tIE5BRlRBIGRlYWxzLCBjb2luY2lkZW50YWxseSwgZnJvbSB0aGUgbGF0ZSAxOTkwJiMzOTtzLiBCYWggaHVtYnVnITwvcD5cclxuICBcclxuICA8cD4mbmJzcDs8L3A+XHJcbiAgXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cDovL3d3dy5qYXJlZGRpYW1vbmQub3JnL0phcmVkX0RpYW1vbmQvR3VucyxfR2VybXMsX2FuZF9TdGVlbC5odG1sXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R3VucywgR2VybXMsIGFuZCBTdGVlbC4gJnF1b3Q7U3RlZWw6IFRoZSBGYXRlcyBvZiBIdW1hbiBTb2NpZXRpZXMuJnF1b3Q7IERpYW1vbmQgSiAoMTk5NykuPC9hPlxyXG4gIDwvcD5cclxuICBgXHJcbiAgdmFyIGJsb2dwb3N0MiA9IGBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlNlY3VyaXR5LCBzZWN1cml0eSwgYW5vdGhlciBkYXkgYW5vdGhlciBwbGF0Zm9ybSByaXNrLCBvciByaXNrcyBmcm9tIHlvdXIgZGV2aWNlLCBvciByaXNrcyBmcm9tIHRyYW5zYWN0aW9ucywgVG9kYXkmIzM5O3NcclxuaGVhZGxpbmUgYnVyaWVkIGJlbmVhdGggYSB0ZWNoeSBqYXJnb24gcHJvdmlkZXMgYSBnbGltcHNlIG9mIHRoZSByaXNpbmcgdGhyZWF0IG9mIHdlYi1hcHBsaWNhdGlvbi1iYXNlZCBoYWNrZXJ5OlxyXG5DcnlwdG9qYWNraW5nLlxyXG48aT5Db2luZGVzazwvaT4gcmVwb3J0cywgJnF1b3Q7IE9wZXJhIGJyb3dzZXIgaW50cm9kdWNlcyBjcnlwdG9jdXJyZW5jeSBtaW5lciBwcm90ZWN0aW9uIGZvciBzbWFydHBob25lcyAuLi4gJnF1b3Q7PC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkNyeXB0b2N1cnJlbmN5IG1pbmVycyBjYW4gb3ZlcmxvYWQgc21hcnRwaG9uZXMmIzM5OyBDUFVzLCBmb3JjaW5nIDEwMCBwZXJjZW50IHVzYWdlIGFuZCBwb3RlbnRpYWxseSBjYXVzaW5nIGEgcGhvbmVcclxudG8gb3ZlcmhlYXQuIEFuZCB0aGUgZGFtYWdlIGNhbiBzb21ldGltZXMgYmUgcGVybWFuZW50LiBBY2NvcmRpbmcgdG8gYSBaRE5ldCBhcnRpY2xlLCBvbmUgdHJvamFuIGdlbmVyYXRlZCBzbyBtdWNoXHJcbmhlYXQgaW4gYSBwaG9uZSwgaXRzIGJhdHRlcnkgYmVjYW1lIHN3b2xsZW4sIHBlcm1hbmVudGx5IGRhbWFnaW5nIHRoZSBwaG9uZS4gV2hpbGUgZXhjZXNzaXZlIGFkcyB3ZXJlIG9uZSByZWFzb25cclxuZm9yIHRoZSBoZWF0IGdlbmVyYXRpb24sIHRoZSBtYWluIGNhdXNlIHdhcyB0aGF0IHRoZSBwaG9uZSYjMzk7cyBDUFUgd2FzIGhpamFja2VkIHRvIG1pbmUgZm9yIE1vbmVyby5cclxuPHN1cD4xPC9zdXA+XHJcbjwvcD5cclxuXHJcbjxwPlRoZSBsYXJnZXIgaXNzdWUgaGVyZSBpcyB0aGF0IHRoZSBsaW5lcyBiZXR3ZWVuIHRydXN0ZWQgbW9iaWxlLWFwcCBhdXRob3JpdGllcywgaS5lLiwgY2VydGlmaWVkIGJ5IFBsYXkgU3RvcmUgb3JcclxuQXBwbGUmIzM5O3MgaXMgaW5jcmVhc2luZ2x5IGlycmVsZXZlbnQuIFRoaXMgaXMgYmVjYXVzZSBhbiBpbmNyZWFzaW5nIG51bWJlciBvZiBhcHAtdXNlcnMgYXJlIGRpdGNoaW5nIGRldmljZS1kb3dubG9hZGVkXHJcbmFwcHMsIHByZWZlcnJpbmcgZm9yIGJyb3dzZXIgYXBwbGljYXRpb25zLS1oZW5jZSwgYSBtdWNoIG1vcmUgYXBwZXRpemluZyBtYXJrZXQgZm9yIHRoZSBuZXdlc3QgZ2VuZXJhdGlvbiBvZiBibGFja2hhdFxyXG5oYWNrZXJzLCBvbmxpbmUgdGhpZXZlcywgcGVlcGluZy10b21zLCBhbmQgb3RoZXIgaWxsLXdpc2hlcnMuIFRoZXJlIGFyZSBhIGZldyBkcml2aW5nIGZhY3RvcnMgZm9yIHRoaXMgaXNzdWUtLW9uZVxyXG5vZiB3aGljaCBpcyB0aGUgb25zZXQgb2YgRGVjZW50cmFsaXplZCBBcHBsaWNhdGlvbnMgKERBUFBzKSwgd2hpY2ggdXNlIHRoZVxyXG48aT5icm93c2VyPC9pPiB0byBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgRXZlcnktRGF5IGJsb2NrY2hhaW4gY2xpZW50L21lcmNoYW50L3Byb2dyYW1tZXIgYW5kIHRoZSBhY3R1YWwgYnl0ZS1jb2RlIG9mXHJcbnRoZSBibG9ja2NoYWluICh2aWEgV0VCKS48L3A+XHJcblxyXG48cD5Nb3JlIGltcG9ydGFudGx5LCB0aGUgbGFyZ2VyIGlzc3VlIGlzIHRoYXQgd2UgbGl2ZSBpbiBhbiBhZ2UgaW4gd2hpY2ggdGhlIGV4Y2x1c2l2ZSwgbmF0aXZlIGJyb3dzZXIgbGFuZ3VhZ2Ugc2luY2VcclxuMTk5NSwgaS5lLiBKYXZhU2NyaXB0LiBTZWN1cml0eSBpc3N1ZXMgd2l0aCBicm93c2VyLWJhc2VkIGFwcHMgd2VyZSB2ZXJ5IGxvdywgYmVjYXVzZSBKYXZhU2NyaXB0IG5ldmVyIGxlZnQgdGhlXHJcbmJyb3dzZXIsIGV2ZXIuIFVudGlsIDIwMDksIERhdGEsIFNlcnZlcnMgd2VyZSB0aGUgZG9tYWluIG9mIFBIUCwgSkFWQSwgUHl0aG9uLCBldGMuIG9yIHNvbWUgb3RoZXIgbGFuZ3VhZ2UgZm9yIHRoZVxyXG5oaWdobHkgc2Vuc2l0aXZlLCBkaXJ0eSB3b3JrIG9mIGRpcHBpbmcgaW50byBhbGwgdGhhdCBkYXRhIHNpdHRpbmcgb250b3Agb2YgY2VudHJhbGl6ZWQgc2VydmVycyBhcm91bmQgdGhlIHdvcmxkLlxyXG5QSFAgd2FzbiYjMzk7dCBlYXN5LCBzbyBwb3dlciBhbmQgcmVzcG9uc2liaWxpdHkgdXN1YWxseSBmb2xsb3dlZCB3aXRoIGFsbCB0aGUgZXh0cmEgZWZmb3J0IGFuZCBleHBlcnRpc2UuPC9wPlxyXG5cclxuPHA+MjAxNSBhdWd1cmVkIGluIHRoZSBOb2RlLmpzIHNlcnZlci1hY2Nlc3NpbmcgKGNhbiBjcmVhdGUsIHJlYWQsIHVwZGF0ZSwgYW5kIGRlbGV0ZSBkYXRlKSBuZXctYm9ybiBjYXBhYmlsaXRpZXMgb2ZcclxuSmF2YVNjcmlwdDwvcD5cclxuXHJcblxyXG48cD4xLlxyXG48YSBocmVmPVwiXHJcbmh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9vcGVyYS1icm93c2VyLWludHJvZHVjZXMtY3J5cHRvY3VycmVuY3ktbWluZXItcHJvdGVjdGlvbi1mb3Itc21hcnRwaG9uZXMvXHJcblwiIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL3d3dy5jb2luZGVzay5jb20vb3BlcmEtYnJvd3Nlci1pbnRyb2R1Y2VzLWNyeXB0b2N1cnJlbmN5LW1pbmVyLXByb3RlY3Rpb24tZm9yLXNtYXJ0cGhvbmVzLyA8L2E+XHJcbjwvcD5cclxuYFxyXG4gIHZhciBibG9ncG9zdDEgPSBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5JIGNvdWxkbiYjMzk7dCBoZWxwIGJ1dCByZXZpc2l0IHRoZVxyXG48c3Ryb25nPkVudmlyb25tZW50YWwgU3VzdGFpbmFiaWxpdHk8L3N0cm9uZz4gcHJvYmxlbSBJIGFkZHJlc3NlZCBpbiBteSBGZWJydWFyeSAyOHRoIHBvc3QuIFRoaXMgcHJvYmxlbSwgZXhwZXJpZW5jZWQgYnlcclxudGhlIHRvcCB0d28gY3J5cHRvLWN1cnJlbmNpZXMgQml0Y29pbiBhbmQgRXRoZXJldW0sIGlzIHRoYXQgdGhlXHJcbjxpPm1vbmV0YXJ5PC9pPiB2YWx1ZSBvZiB0aGUgY3VycmVuY3kgaXMgbWF0Y2hlZCB0byB0aGVcclxuPGk+Y29tcHV0aW5nIGRpZmZpY3VsdHk8L2k+LS1tZWFzdXJlZCBlaXRoZXIgYnkgaG93IG11Y2ggdGhlIGNvbXB1dGVyIGlzIHN3ZWF0aW5nLCBvciBieSBlbGVjdHJpY2l0eSBLaWxvV2F0dCBIb3Vyc1xyXG5wZXIgeWVhci5cclxuPHN1cD4xPC9zdXA+IERpZ2ljb25vbWlzdCBzdWNjaW5jdGx5IHdyaXRlczo8L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+VGhlIGNvbnRpbnVvdXMgYmxvY2sgbWluaW5nIGN5Y2xlIGluY2VudGl2aXplcyBwZW9wbGUgYWxsIG92ZXIgdGhlIHdvcmxkIHRvIG1pbmUgQml0Y29pbi4gQXMgbWluaW5nIGNhbiBwcm92aWRlIGFcclxuc29saWQgc3RyZWFtIG9mIHJldmVudWUsIHBlb3BsZSBhcmUgdmVyeSB3aWxsaW5nIHRvIHJ1biBwb3dlci1odW5ncnkgbWFjaGluZXMgdG8gZ2V0IGEgcGllY2Ugb2YgaXQuIE92ZXIgdGhlIHllYXJzXHJcbnRoaXMgaGFzIGNhdXNlZCB0aGUgdG90YWwgZW5lcmd5IGNvbnN1bXB0aW9uIG9mIHRoZSBCaXRjb2luIG5ldHdvcmsgdG8gZ3JvdyB0byBlcGljIHByb3BvcnRpb25zLCBhcyB0aGUgcHJpY2Ugb2ZcclxudGhlIGN1cnJlbmN5IHJlYWNoZWQgbmV3IGhpZ2hzLlxyXG48c3VwPjI8L3N1cD5cclxuPC9wPlxyXG5cclxuPHA+QW5kLCBzbyB0aGUgaXNzdWUgSSYjMzk7bSBhZGRyZXNzaW5nIGlzIGEgc2lkZS1lZmZlY3Qgb2YgdGhlIGRlZXBlbmluZyBpbmNlbnRpdml6YXRpb24gZm9yIG1pbmVycyB0byBpbnZlc3QgbW9yZVxyXG5lcXVpcG1lbnQsIGFuZCBpbiB0dXJuLCBtb3JlIGVsZWN0cmljaXR5LiBUaGUgYXJ0aWNsZSBnb2VzIG9uIHRvIHJlcG9ydCBCaXRjb2luJiMzOTtzIHN1cnBhc3NpbmcgNTAgVGVyYVdhdHQtSG91cnMtcGVyLXllYXJcclxudXNhZ2UgaGFzIHN1cnBhc3NlZCB0aGF0IG9mIFBvcnR1Z2FsIGFuZCBTaW5nYXBvcmUsIHdoaWNoIGFyZSA0OS41IFRXaCBwZXIgeWVhciwgYW5kIDQ5LjggVFdoIHBlciB5ZWFyLCByZXNwZWN0aXZlbHkuXHJcbkluIG90aGVyIHdvcmRzLCB0aGUgdXNhZ2UgYnkgdGhlIEJpdGNvaW4gbWluZXImIzM5O3MgY29zdCAoaW4gZWxlY3RyaWNpdHkpIGNvbXBhcmVkIHdpdGggdGhlIG1pbmVyJiMzOTtzIGdhaW4gKGluXHJcbkJpdGNvaW5zIGFjY3J1ZWQgYnkgaW5jZW50aXZpemVkIG1pbmluZykgZHJpdmVzIHVwIGFuZCBpbmNlbnRpdmVzIGEgZGVlcGVyIENhcmJvbiBGb290cHJpbnQuPC9wPlxyXG5cclxuXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5GdWVsZWQgYnkgYSBtZXRlb3JpYyByaXNlIGluIHRoZSBCaXRjb2luIHByaWNlIG92ZXIgdGhlIHBhc3QgZmV3IG1vbnRocywgdGhlIHBvd2VyIHVzYWdlIG9mIHRoZSBCaXRjb2luIG5ldHdvcmsgaGFzXHJcbmJlZW4gaW5jcmVhc2luZyBhdCBhIGZldmVyaXNoIHBhY2UuIEp1c3QgYSBsaXR0bGUgb3ZlciB0aHJlZSBtb250aHMgYWdvLCBhdCB0aGUgc3RhcnQgb2YgTm92ZW1iZXIgMjAxNywgdGhlIEJpdGNvaW5cclxuRW5lcmd5IENvbnN1bXB0aW9uIEluZGV4IHdhcyBlc3RpbWF0aW5nIHRoZSB0b3RhbCBlbGVjdHJpY2l0eSBjb25zdW1wdGlvbiBvZiB0aGUgQml0Y29pbiBuZXR3b3JrIHRvIGJlIGhhbGYgb2YgdGhlXHJcbmN1cnJlbnQgYW1vdW50LiBPbiB0aGUgZmlyc3QgZGF5IG9mIE5vdmVtYmVyLCB0aGUgZXN0aW1hdGVkIGNvbnN1bXB0aW9uIHdhcyBlcXVhbCB0byAyNC4zIFRXaCBwZXIgeWVhci5cclxuPHN1cD4xPC9zdXA+XHJcbjwvcD5cclxuXHJcbjxwPlxyXG5DYXJib24gRm9vdHByaW50LCBtZWFzdXJlZCBpbiB0aGlzIHdheSwgZXF1YXRlcyBhcyBhIGRvdWJsZS1lZGdlZCBzd29yZDogVGhlIG1pbmVyJiMzOTtzIGVsZWN0cmljaXR5IGNvc3RzIGFjY291bnQgZm9yIGFwcHJveGltYXRlbHlcclxuNjUlIG9mIHRoZSBwcm9maXQgKEJpdGNvaW4gdW5pdHMmIzM5OyB2YWx1ZSwgbWVhc3VyZWQgd2hlbiBtaW5lZCkuIFNvIHRoZVxyXG48aT5lY29ub21pYyA8L2k+dXNhZ2UgbWVhbnMgdGhlIGNoZWFwZXN0IGF2YWlsYWJsZSBmdWVsIGlzIHBhcnQgb2YgdGhlIGJ1c2luZXNzIG1vZGVsLS1hbmQgaXQgd291bGQgbGVhZCB0byB0aGUgY29zdFxyXG5vZiB0aGUgY2hlYXBlc3Qgc291cmNlIG9mIGVuZXJneTogRGlydHkgQ29hbC4gQXQgdGhlIGVuZCBvZiB0aGUgZGF5LCBpZiB0aGVcclxuPGk+Y3VycmVuY3kmIzM5O3MgPC9pPnJpc2luZyB2YWx1ZSBtZWFucyB0aGF0IG1vcmUgY29tcHV0YXRpb25hbGx5LWludGVuc2l2ZSBtaW5pbmcgaXMgbW9yZSBhbmQgbW9yZSBwcm9maXRhYmxlLCB0aGVuXHJcbnBlcmhhcHMgdGhlIG90aGVyIGVkZ2UgbG9va3MgcHJlZmVycmVkIVxyXG48L3A+XHJcblxyXG48cD4xLlxyXG48YSBocmVmPVwiXHJcbmh0dHBzOi8vZGlnaWNvbm9taXN0Lm5ldC9iaXRjb2luLWVsZWN0cmljaXR5LWNvbnN1bXB0aW9uLXN1cnBhc3Nlcy1zaW5nYXBvcmUtcG9ydHVnYWxcclxuXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vZGlnaWNvbm9taXN0Lm5ldC9iaXRjb2luLWVsZWN0cmljaXR5LWNvbnN1bXB0aW9uLXN1cnBhc3Nlcy1zaW5nYXBvcmUtcG9ydHVnYWwgPC9hPlxyXG48L3A+XHJcblxyXG48cD4yLlxyXG48YSBocmVmPVwiXHJcbmh0dHBzOi8vZGlnaWNvbm9taXN0Lm5ldC9iaXRjb2luLWVuZXJneS1jb25zdW1wdGlvblxyXG5cIiB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly9kaWdpY29ub21pc3QubmV0L2JpdGNvaW4tZW5lcmd5LWNvbnN1bXB0aW9uIDwvYT5cclxuPC9wPlxyXG5gXHJcbiAgdmFyIHVybCA9IFt7XHJcbiAgICAgIGlkOiAnMjEnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0yNCcsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAyNC0yNSwgMjAxODxiciAvPiBXZWVrZW5kICcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICcxOTY4IE1lZXRzIDIwMTg6IFNjYWxhYmlsaXR5IElzc3VlcyBpbiB0aGUgTWVhbiBUaW1lJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyMVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcyMCcsXHJcbiAgICAgIGRpZDogJzE4LTAzLTIzJyxcclxuICAgICAgZGF0ZTogJ01hcmNoIDIzLCAyMDE4IDxiciAvPiBXZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICc8aT5JdHMgbm90IGFib3V0IHRoZSBCbG9ja2NoYWluLCB0aGUgRWZmaWNpZW50IE5ldHdvcmsgRGF0YSBEaXN0cmlidXRpb24gaXMgdGhlIEFuc3dlciE8L2k+JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyMFxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTknLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0yMicsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAyMiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0EuSS4gUGFydCBJSTogUHJvYmxlbXMgd2l0aCBTY2FsZSwgS2luZGx5IFJlc29sdmVkIGJ5IEEuSS4nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE5XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzE4JyxcclxuICAgICAgZGlkOiAnMTgtMDMtMjEnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggMjEsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdIZXkgVWJlciBEcml2ZXIsIFBsZWFzZSBTbG93IERvd24hJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxOFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNycsXHJcbiAgICAgIGRpZDogJzE4LTAzLTIwJyxcclxuICAgICAgZGF0ZTogJ01hcmNoIDIwLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnVGhlIEZhY2Vib29rIEZpYXNjbzogV2h5IFp1Y2tlcmJlcmcgU2hvdWxkIG5vdCBoYXZlIERyb3BwZWQgb3V0IG9mIEhhcnZhcmQnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE3XHJcbiAgICB9LCB7XHJcbiAgICAgIGlkOiAnMTYnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0xOScsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxOSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdBIE5ldyBQb2xpdGljcyBvZiBQb3dlcjo8YnIgLz4gVGhlIENyeXB0b2dyYXBoaWMgRmluYW5jaWFsIEVzY2FwZSBIYXRjaCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTZcclxuICAgIH1cclxuXHJcbiAgICAsXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTUnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0xNycsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxNy0xOCAyMDE4IDxiciAvPiBXZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdFbmVyZ3kgQWx0ZXJuYXRpdmVzIFNpZ25hbCB0aGUgUG93ZXIgU2hpZnQgdG8gQ29tZSwgUGFydCBJSTogQSBSaXBwbGUgYW5kIGFuIElvdGEgb2YgU3VzdGFpbmFibGUgQ3J5cHRvLUN1cnJlbmN5JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTQnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0xNicsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnRW5lcmd5IEFsdGVybmF0aXZlcyBTaWduYWwgdGhlIFBvd2VyIFNoaWZ0IHRvIENvbWUnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE0XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEzJyxcclxuICAgICAgZGlkOiAnMTgtMDMtMTUnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggMTUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdJIExvdmUgdGhpcyBSZWNvcmQgQmFieSBidXQgSSBDYW50IFNlZSBTdHJhaWdodCBBbnltb3JlOjxiciAvPkl0cyBHb25uYSBiZSBPa2F5LCBGbGlwIHRoYXQgUmVjb3JkIGFuZCBKdXN0IERhbmNlIScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTInLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0xNCcsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxNCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICc8aT5Ub3UgPHN0cm9uZz5EZW1vdTwvc3Ryb25nPiB0ZXM8c3Ryb25nPiBLcmF0ZXM8L3N0cm9uZz48L2k+OjxiciAvPlN0cmVuZ3RoIG9mIHRoZSBQZW9wbGUnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzExJyxcclxuICAgICAgZGlkOiAnMTgtMDMtMTMnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggMTMsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ1RoZSBTaGFyaW5nIEVjb25vbXkgSGFuZC1pbi1IYW5kIHdpdGggdGhlIE1hcmtldCBFY29ub215OjxiciAvPiBQYXJ0IElJSSBhbmQgU3VzdGFpbmFiaWxpdHkgb2YgU2hhcmVkLCBEaXN0cmlidXRlZCBMZWRnZXIgVHlwZXMnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDExXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEwJyxcclxuICAgICAgZGlkOiAnMTgtMDMtMTInLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggMTIsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnVGhlIFNoYXJpbmcgRWNvbm9teSBIYW5kLWluLUhhbmQgd2l0aCB0aGUgTWFya2V0IEVjb25vbXk6PGJyIC8+IFBhcnQgSUkgYW5kIE5ldyBGb3JtcyBvZiBUcnVzdCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTBcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzknLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0xMCcsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxMC0xMSwgMjAxOCAgPGJyIC8+IFdlZWtlbmQnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdUaGUgU2hhcmluZyBFY29ub215IEhhbmQtaW4tSGFuZCB3aXRoIHRoZSBNYXJrZXQgRWNvbm9teTo8YnIgLz4gUGFydCBJIGFuZCB0aGUgUmFjZSBmb3IgU3VzdGFpbmFiaWxpdHkgU29sdXRpb25zJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q5XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzgnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0wOScsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCA5dGgsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICcmIzM5O0FsZXhhLCBjYW4geW91IGxhdWdoPyYjMzk7JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q4XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzcnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0wOCcsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCA4LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJzEuNCBNaWxsaW9uIFJlYXNvbnMgZm9yIE1vcmUgV29tZW4gaW4gVGVjaCwgUGFydCBJSSA8YnIgLz48YnIgLz4gKiBDb250aW51YXRpb24gb2YgV29tZW4gaW4gVGVjaCBUaGVtZSBmcm9tPGEgaHJlZj1cIiMxOC0wMi0yM1wiPkZlYi4gMjNyZCBCbG9nPC9hPicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0N1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc2JyxcclxuICAgICAgZGlkOiAnMTgtMDMtMDcnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggNywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0Fib3V0IHRoZSBBcHJpbCAyMyBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgRkNDIE5ldCBOZXV0cmFsaXR5IExhd3M6IDxiciAvPiBUaGUgQ29taW5nIEJhdHRsZSBvZiBTdGF0ZXMmIzM5OyB2ZXJzdXMgRmVkZXJhbCBSaWdodHMgUGFydCBJSScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NlxyXG4gICAgfVxyXG5cclxuICAgICxcclxuICAgIHtcclxuICAgICAgaWQ6ICc1JyxcclxuICAgICAgZGlkOiAnMTgtMDMtMDYnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0FwcmlsIDIzIEltcGxlbWVudGF0aW9uIG9mIHRoZSBGQ0MgTmV0IE5ldXRyYWxpdHkgTGF3czogPGJyIC8+IFRoZSBDb21pbmcgQmF0dGxlIG9mIFN0YXRlcyYjMzk7IHZlcnN1cyBGZWRlcmFsIFJpZ2h0cycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNCcsXHJcbiAgICAgIGRpZDogJzE4LTAzLTA1JyxcclxuICAgICAgZGF0ZTogJ01hcmNoIDUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnQSBSZXR1cm4gdG8gdGhlIFF1ZXN0aW9uIG9mIEd1bnMsIEdlcm1zLCBhbmQgU3RlZWw6IFBhcnQgSUkgYW5kIHRoZSBHZXJtcycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICczJyxcclxuICAgICAgZGlkOiAnMTgtMDMtMDMnLFxyXG4gICAgICBkYXRlOiAnTWFyY2ggMy00LCAyMDE4IDxiciAvPiBXZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ0EgUmV0dXJuIHRvIHRoZSBRdWVzdGlvbiBvZiBHdW5zLCBHZXJtcywgYW5kIFN0ZWVsJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QzXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzInLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0wMicsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAyLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnV2lkZW5pbmcgQ2lyY2xlcyBvZiBNb2JpbGUtQXBwIFNlY3VyaXR5IFJpc2tzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEnLFxyXG4gICAgICBkaWQ6ICcxOC0wMy0wMScsXHJcbiAgICAgIGRhdGU6ICdNYXJjaCAxLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdCbG9ja2NoYWluIFN1c3RhaW5hYmlsaXR5IElzc3VlcyBhbmQgVGhlIERvdWJsZS1FZGdlZCBTd29yZCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MVxyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gIGZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmAgXHJcblxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtbWFyXCIpLmlubmVySFRNTCArPSBjYXQ7XHJcbiAgfVxyXG5cclxuICB2YXIgaTtcclxuICBmb3IgKGk9MDtpPHVybC5sZW5ndGg7aSsrKXsgXHJcbiAgICB2YXIgY2F0TW9kID0gYFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1fbW9kXCIgY2xhc3M9XCJibG9nRGl2TW9kXCI+IFxyXG4gICAgPGhyIC8+ICBcclxuICAgIDxhIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gICAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICAgIDxiciAvPlxyXG4gICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fTwvZGl2PlxyXG4gICAgPC9kaXY+YDtcclxuXHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLW1hci1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDtcclxufVxyXG4gXHJcbmNvbnNvbGUubG9nKCdibG9nZ2VyLW1hcicpO1xyXG4gIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5cclxuYmxvZ2dlck1hcigpOyIsInZhciBibG9nZ2VyTWFyY2gxOSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLypcclxuICAgIGh0dHBzOi8vbWVkaXVtLmNvbS9zL3RlYW1odW1hbi90aGUtcmlnaHQta2luZC1vZi1haS13aXRoLWtlbnJpYy1tY2Rvd2VsbC03NDgxYjIzOWEwY2JcclxuXHJcbiAgICBodHRwczovL21lZGl1bS5jb20vaHVtbWluZ2JpcmQtdmVudHVyZXMvYS1icmllZi1oaXN0b3J5LW9mLWJsb2NrY2hhaW4tYW4taW52ZXN0b3JzLXBlcnNwZWN0aXZlLTM4N2M0NDBhZDExY1xyXG5cclxuICAgIGh0dHBzOi8vbWVkaXVtLmNvbS9AdGhpbmtvdXRzaWRldGhlYmxveC93aHktYml0Y29pbi1hbmQtY3J5cHRvLWhhdmUtbm8tZnV0dXJlLTRmOTU5ODBiYjc3NFxyXG5cclxuICAgIGh0dHBzOi8vbWVkaXVtLmNvbS9taXQtdGVjaG5vbG9neS1yZXZpZXcvZXhwbGFpbmVyLXdoYXQtaXMtcXVhbnR1bS1jb21tdW5pY2F0aW9uLTUyN2JiMGY1ZDk4N1xyXG5cclxuICAgIGh0dHBzOi8vbWVkaWEuY29uc2Vuc3lzLm5ldC8xOC1wcmVkaWN0aW9ucy1mb3ItMjAxOC03YTM3NmVhN2JkNGJcclxuXHJcbiAgICBodHRwczovL21lZGl1bS5jb20vcy93ZWxjb21lLXRvLWJsb2NrY2hhaW4vd2hhdC1jb3VsZC1ibG9ja2NoYWluLWRvLWZvci1oZWFsdGhjYXJlLTU5YzE3MjQ1NDQ4ZVxyXG5cclxuICAgIGh0dHBzOi8vbWVkaXVtLmNvbS9taXQtdGVjaG5vbG9neS1yZXZpZXcvcnVzc2lhLXdhbnRzLXRvLWN1dC1pdHNlbGYtb2ZmLWZyb20tdGhlLWdsb2JhbC1pbnRlcm5ldC1oZXJlcy13aGF0LXRoYXQtcmVhbGx5LW1lYW5zLWM2Zjg4NTE5ODdjYVxyXG5cclxuXHJcblxyXG5cclxuICAgIGh0dHBzOi8vb25lemVyby5tZWRpdW0uY29tL2NvbXB1dGVyLWdlbmVyYXRlZC1mYWNlcy1hcmUtZ2V0dGluZy1yZWFsLWIzMmU4OTAyNTg2ZFxyXG5cclxuICAgIGh0dHBzOi8vbWVkaXVtLmNvbS9zL3N0b3J5L3RoZS1iZXN0LXN0cmF0ZWdpZXMtdG8tYm9vc3QteW91ci13aWxscG93ZXItNWViMWIyZDlhZjJiXHJcbiAgICAgXHJcbiAgICAqL1xyXG5cclxuICAgIHZhciBibG9ncG9zdDMgPSBgXHJcbiAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QVdTIFJla29nbml0aW9uLCBhIHByZW1pZXIgc2VydmljZSBhbW9uZyBkb3plbnMgb2Ygb3RoZXJzLCBpcyBsaWtlIGFsbCBBSSBzb2Z0d2FyZSBhbG9uZyB3aXRoIGEgUGxhdGZvcm0tYXMtYS1TZXJ2aWNlIG5lY2Vzc2FyaWx5IHJlZmxlY3RzIHRoZSBiaWFzZXMgb2YgaXRzIG9yaWdpbiBsYWIuIEFsdGVybmF0ZWx5LCBBV1MnIGRlbW9jcmF0aXppbmcgYWNjZXNzIHRvIGV2ZXJ5IHN0dWRlbnQsIHByb2Zlc3Npb25hbCwgYW5kIHJlc2VhcmNoZXIgdGhlIHVubGltaXRlZCB1c2Ugb2Ygc29waGlzdGljYXRlZCBhbmQgZXhwZW5zaXZlIEFJIHJlc291cmNlczt0aHVzIGhlZGdpbmcgYW55IHBvdGVudGlhbCBiaWFzIHRvIGRpdmVyc2UgaW5kaXZpZHVhbCdzIGFuZCB0ZWFtJ3MgcGFydGljaXBhdGlvbi4gIEF0IHRoZSBoZWFydCBvZiB0aGVzZSBoZWFsdGh5IHB1YmxpYyBkZWJhdGVzLCBpdCdzIHRoZSBwYXJ0aWN1bGFyIHVzZS1jYXNlcyB0aGF0IGV4ZW1wbGlmeSB0aGUgc3BlY3RydW0gb2YgdGhlIGRlYmF0ZS4gRm9yIGluc3RhbmNlLCBwb2xpY2luZyBwcmFjdGljZSBieSBib3QgaXMgYSBzdXJlIGV4YW1wbGUsIGlmIG5vdCBmb3IgdGhlIDxpPlJvYm9Db3A8L2k+IEhvbGx5d29vZCBhbGx1cmUgLi4uIEFzIGFsd2F5cywgdGhlIEFJJ3MgYWxnb3JpdGhtIGJlYXJzIHRoZSBpbXByaW50IG9mIHRoZSBjcmVhdG9yJ3MgaW50ZW50aW9uczogPC9wPlxyXG5cdFxyXG5cdDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcblx0QnV0IFdhc2hpbmd0b24gQ291bnR5IGFsc28gYmVjYW1lIGdyb3VuZCB6ZXJvIGZvciBhIGhpZ2gtc3Rha2VzIGJhdHRsZSBvdmVyIHRoZSB1bnJlZ3VsYXRlZCBncm93dGggb2YgcG9saWNpbmcgYnkgYWxnb3JpdGhtLiBEZWZlbnNlIGF0dG9ybmV5cywgYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UgcmVzZWFyY2hlcnMgYW5kIGNpdmlsIHJpZ2h0cyBleHBlcnRzIGFyZ3VlIHRoYXQgdGhlIHRlY2hub2xvZ3kgY291bGQgbGVhZCB0byB0aGUgd3JvbmdmdWwgYXJyZXN0IG9mIGlubm9jZW50IHBlb3BsZSB3aG8gYmVhciBvbmx5IGEgcmVzZW1ibGFuY2UgdG8gYSB2aWRlbyBpbWFnZS4gUmVrb2duaXRpb27igJlzIGFjY3VyYWN5IGlzIGFsc28gaG90bHkgZGlzcHV0ZWQsIGFuZCBzb21lIGV4cGVydHMgd29ycnkgdGhhdCBhIGNhc2Ugb2YgbWlzdGFrZW4gaWRlbnRpdHkgYnkgYXJtZWQgZGVwdXRpZXMgY291bGQgaGF2ZSBkYW5nZXJvdXMgaW1wbGljYXRpb25zLCB0aHJlYXRlbmluZyBwcml2YWN5IGFuZCBwZW9wbGXigJlzIGxpdmVzLjxiciAvPjxiciAvPlxyXG5cclxuU29tZSBwb2xpY2UgYWdlbmNpZXMgaGF2ZSBpbiByZWNlbnQgeWVhcnMgcnVuIGZhY2lhbC1yZWNvZ25pdGlvbiBzZWFyY2hlcyBhZ2FpbnN0IHN0YXRlIG9yIEZCSSBkYXRhYmFzZXMgdXNpbmcgc3lzdGVtcyBidWlsdCBieSBjb250cmFjdG9ycyBzdWNoIGFzIENvZ25pdGVjLCBJREVNSUEgYW5kIE5FQy4gQnV0IHRoZSByb2xsb3V0IGJ5IEFtYXpvbiBoYXMgbWFya2VkIHBlcmhhcHMgdGhlIGJpZ2dlc3Qgc3RlcCBpbiBtYWtpbmcgdGhlIGNvbnRyb3ZlcnNpYWwgZmFjZS1zY2FubmluZyB0ZWNobm9sb2d5IG1haW5zdHJlYW0uIFJla29nbml0aW9uIGlzIGVhc3kgdG8gYWN0aXZhdGUsIHJlcXVpcmVzIG5vIG1ham9yIHRlY2huaWNhbCBpbmZyYXN0cnVjdHVyZSwgYW5kIGlzIG9mZmVyZWQgdG8gdmlydHVhbGx5IGFueW9uZSBhdCBiYXJnYWluLWJhcnJlbCBwcmljZXMuIFdhc2hpbmd0b24gQ291bnR5IHNwZW50IGFib3V0ICQ3MDAgdG8gdXBsb2FkIGl0cyBmaXJzdCBiaWcgaGF1bCBvZiBwaG90b3MsIGFuZCBub3csIGZvciBhbGwgaXRzIHNlYXJjaGVzLCBwYXlzIGFib3V0ICQ3IGEgbW9udGguPHN1cD4xPC9zdXA+IFxyXG4gICAgPC9wPlxyXG4gICAgPHA+V2hldGhlciBnb3Zlcm5tZW50IHNlcnZpY2VzIG9yIGNvbW1lcmNpYWwgZW50ZXJwcmlzZSwgdGhlIGxhbmRzY2FwZSAgaXMgY29udmVydGluZyA8aT5lbiBtYXNzZTwvaT4gdGhlIG1hbnVhbCBhbmQgdGhlIG11bmRhbmUgdG8gbWFjaGluZSBsZWFybmluZy4gIFB1YmxpYyBhZHZvY2FjeSwgbm93IG1vcmUgdGhhbiBldmVyLCBjYW4gaGVscCBkaXJlY3QgQS5JLiB0ZWNobm9sb2d5IGFuZCB1c2UgdG93YXJkIGEgbW9yZSBzb2NpZXR5LWZyaWVuZGx5IGVuZGVhdm9yIC4uLjwvcD5cclxuXHRgXHJcblxyXG5cclxuXHJcbiAgICB2YXIgYmxvZ2NpdGUzID0gYCBcclxuIFxyXG5cdDxwPjEuXHJcblx0PGEgaHJlZj1cImh0dHBzOi8vd3d3Lndhc2hpbmd0b25wb3N0LmNvbS90ZWNobm9sb2d5LzIwMTkvMDQvMzAvYW1hem9ucy1mYWNpYWwtcmVjb2duaXRpb24tdGVjaG5vbG9neS1pcy1zdXBlcmNoYXJnaW5nLWxvY2FsLXBvbGljZS8/bm9yZWRpcmVjdD1vbiZ1dG1fc291cmNlPXBvY2tldC1uZXd0YWImdXRtX3Rlcm09LjhhOGExYjc1Yjk0YVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lndhc2hpbmd0b25wb3N0LmNvbS90ZWNobm9sb2d5LzIwMTkvMDQvMzAvYW1hem9ucy1mYWNpYWwtcmVjb2duaXRpb24tdGVjaG5vbG9neS1pcy1zdXBlcmNoYXJnaW5nLWxvY2FsLXBvbGljZS8/bm9yZWRpcmVjdD1vbiZ1dG1fc291cmNlPXBvY2tldC1uZXd0YWImdXRtX3Rlcm09LjhhOGExYjc1Yjk0YTwvYT5cclxuXHQ8L3A+XHJcbiAgICBcclxuICAgIGA7XHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MiA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+U2VjdXJpdHksIHNlY3VyaXR5LCBhbm90aGVyIGRheSBhbm90aGVyIHBsYXRmb3JtIHJpc2ssIG9yIHJpc2tzIGZyb20geW91ciBkZXZpY2UsIG9yIHJpc2tzIGZyb20gdHJhbnNhY3Rpb25zLCBUb2RheSYjMzk7c1xyXG4gIGhlYWRsaW5lIGJ1cmllZCBiZW5lYXRoIGEgdGVjaHkgamFyZ29uIHByb3ZpZGVzIGEgZ2xpbXBzZSBvZiB0aGUgcmlzaW5nIHRocmVhdCBvZiB3ZWItYXBwbGljYXRpb24tYmFzZWQgaGFja2VyeTpcclxuICBDcnlwdG9qYWNraW5nLlxyXG4gIDxpPkNvaW5kZXNrPC9pPiByZXBvcnRzLCAmcXVvdDsgT3BlcmEgYnJvd3NlciBpbnRyb2R1Y2VzIGNyeXB0b2N1cnJlbmN5IG1pbmVyIHByb3RlY3Rpb24gZm9yIHNtYXJ0cGhvbmVzIC4uLiAmcXVvdDs8L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkNyeXB0b2N1cnJlbmN5IG1pbmVycyBjYW4gb3ZlcmxvYWQgc21hcnRwaG9uZXMmIzM5OyBDUFVzLCBmb3JjaW5nIDEwMCBwZXJjZW50IHVzYWdlIGFuZCBwb3RlbnRpYWxseSBjYXVzaW5nIGEgcGhvbmVcclxuICB0byBvdmVyaGVhdC4gQW5kIHRoZSBkYW1hZ2UgY2FuIHNvbWV0aW1lcyBiZSBwZXJtYW5lbnQuIEFjY29yZGluZyB0byBhIFpETmV0IGFydGljbGUsIG9uZSB0cm9qYW4gZ2VuZXJhdGVkIHNvIG11Y2hcclxuICBoZWF0IGluIGEgcGhvbmUsIGl0cyBiYXR0ZXJ5IGJlY2FtZSBzd29sbGVuLCBwZXJtYW5lbnRseSBkYW1hZ2luZyB0aGUgcGhvbmUuIFdoaWxlIGV4Y2Vzc2l2ZSBhZHMgd2VyZSBvbmUgcmVhc29uXHJcbiAgZm9yIHRoZSBoZWF0IGdlbmVyYXRpb24sIHRoZSBtYWluIGNhdXNlIHdhcyB0aGF0IHRoZSBwaG9uZSYjMzk7cyBDUFUgd2FzIGhpamFja2VkIHRvIG1pbmUgZm9yIE1vbmVyby5cclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgXHJcbiAgPHA+VGhlIGxhcmdlciBpc3N1ZSBoZXJlIGlzIHRoYXQgdGhlIGxpbmVzIGJldHdlZW4gdHJ1c3RlZCBtb2JpbGUtYXBwIGF1dGhvcml0aWVzLCBpLmUuLCBjZXJ0aWZpZWQgYnkgUGxheSBTdG9yZSBvclxyXG4gIEFwcGxlJiMzOTtzIGlzIGluY3JlYXNpbmdseSBpcnJlbGV2ZW50LiBUaGlzIGlzIGJlY2F1c2UgYW4gaW5jcmVhc2luZyBudW1iZXIgb2YgYXBwLXVzZXJzIGFyZSBkaXRjaGluZyBkZXZpY2UtZG93bmxvYWRlZFxyXG4gIGFwcHMsIHByZWZlcnJpbmcgZm9yIGJyb3dzZXIgYXBwbGljYXRpb25zLS1oZW5jZSwgYSBtdWNoIG1vcmUgYXBwZXRpemluZyBtYXJrZXQgZm9yIHRoZSBuZXdlc3QgZ2VuZXJhdGlvbiBvZiBibGFja2hhdFxyXG4gIGhhY2tlcnMsIG9ubGluZSB0aGlldmVzLCBwZWVwaW5nLXRvbXMsIGFuZCBvdGhlciBpbGwtd2lzaGVycy4gVGhlcmUgYXJlIGEgZmV3IGRyaXZpbmcgZmFjdG9ycyBmb3IgdGhpcyBpc3N1ZS0tb25lXHJcbiAgb2Ygd2hpY2ggaXMgdGhlIG9uc2V0IG9mIERlY2VudHJhbGl6ZWQgQXBwbGljYXRpb25zIChEQVBQcyksIHdoaWNoIHVzZSB0aGVcclxuICA8aT5icm93c2VyPC9pPiB0byBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgRXZlcnktRGF5IGJsb2NrY2hhaW4gY2xpZW50L21lcmNoYW50L3Byb2dyYW1tZXIgYW5kIHRoZSBhY3R1YWwgYnl0ZS1jb2RlIG9mXHJcbiAgdGhlIGJsb2NrY2hhaW4gKHZpYSBXRUIpLjwvcD5cclxuICBcclxuICA8cD5Nb3JlIGltcG9ydGFudGx5LCB0aGUgbGFyZ2VyIGlzc3VlIGlzIHRoYXQgd2UgbGl2ZSBpbiBhbiBhZ2UgaW4gd2hpY2ggdGhlIGV4Y2x1c2l2ZSwgbmF0aXZlIGJyb3dzZXIgbGFuZ3VhZ2Ugc2luY2VcclxuICAxOTk1LCBpLmUuIEphdmFTY3JpcHQuIFNlY3VyaXR5IGlzc3VlcyB3aXRoIGJyb3dzZXItYmFzZWQgYXBwcyB3ZXJlIHZlcnkgbG93LCBiZWNhdXNlIEphdmFTY3JpcHQgbmV2ZXIgbGVmdCB0aGVcclxuICBicm93c2VyLCBldmVyLiBVbnRpbCAyMDA5LCBEYXRhLCBTZXJ2ZXJzIHdlcmUgdGhlIGRvbWFpbiBvZiBQSFAsIEpBVkEsIFB5dGhvbiwgZXRjLiBvciBzb21lIG90aGVyIGxhbmd1YWdlIGZvciB0aGVcclxuICBoaWdobHkgc2Vuc2l0aXZlLCBkaXJ0eSB3b3JrIG9mIGRpcHBpbmcgaW50byBhbGwgdGhhdCBkYXRhIHNpdHRpbmcgb250b3Agb2YgY2VudHJhbGl6ZWQgc2VydmVycyBhcm91bmQgdGhlIHdvcmxkLlxyXG4gIFBIUCB3YXNuJiMzOTt0IGVhc3ksIHNvIHBvd2VyIGFuZCByZXNwb25zaWJpbGl0eSB1c3VhbGx5IGZvbGxvd2VkIHdpdGggYWxsIHRoZSBleHRyYSBlZmZvcnQgYW5kIGV4cGVydGlzZS48L3A+XHJcbiAgXHJcbiAgPHA+MjAxNSBhdWd1cmVkIGluIHRoZSBOb2RlLmpzIHNlcnZlci1hY2Nlc3NpbmcgKGNhbiBjcmVhdGUsIHJlYWQsIHVwZGF0ZSwgYW5kIGRlbGV0ZSBkYXRlKSBuZXctYm9ybiBjYXBhYmlsaXRpZXMgb2ZcclxuICBKYXZhU2NyaXB0PC9wPlxyXG4gIFxyXG5cdGBcclxuXHJcblxyXG5cclxuICAgIHZhciBibG9nY2l0ZTIgPSBgIFxyXG4gICAgIFxyXG4gICAgICAgXHJcbiAgICAgIFxyXG4gIFxyXG4gIDxwPjEuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9zL3N0b3J5L2FsZ29yaXRobXMtY2FuLW5vdy1pZGVudGlmeS1jYW5jZXJvdXMtY2VsbHMtYmV0dGVyLXRoYW4taHVtYW5zLTc4ZTY1MThmNjVlOFwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIGh0dHBzOi8vbWVkaXVtLmNvbS9zL3N0b3J5L2FsZ29yaXRobXMtY2FuLW5vdy1pZGVudGlmeS1jYW5jZXJvdXMtY2VsbHMtYmV0dGVyLXRoYW4taHVtYW5zLTc4ZTY1MThmNjVlOFxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYFxyXG4gICAgdmFyIGJsb2dwb3N0MSA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gIDxzdXA+Mjwvc3VwPlxyXG4gIDwvcD5cclxuICBcclxuICA8cD4gPC9wPlxyXG4gIFxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIFxyXG4gIDxwPlxyXG4gXHJcbiAgPC9wPlxyXG4gIFxyXG5cdGBcclxuXHJcblxyXG5cclxuICAgIHZhciBibG9nY2l0ZTEgPSBgIFxyXG4gIDxwPjEuXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vaGFja2Vybm9vbi5jb20vYmxvY2tjaGFpbnMtZG9udC1zY2FsZS1ub3QtdG9kYXktYXQtbGVhc3QtYnV0LXRoZXJlLXMtaG9wZS0yY2I0Mzk0NjU1MWFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2hhY2tlcm5vb24uY29tL2Jsb2NrY2hhaW5zLWRvbnQtc2NhbGUtbm90LXRvZGF5LWF0LWxlYXN0LWJ1dC10aGVyZS1zLWhvcGUtMmNiNDM5NDY1NTFhPC9hPlxyXG4gIDwvcD5cclxuICAgXHJcbiAgYFxyXG4gICAgdmFyIHVybCA9IFt7XHJcbiAgICAgICAgICAgIGlkOiAnMycsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTAzLTAzJyxcclxuICAgICAgICAgICAgZGF0ZTogJ01hcmNoIDMtNCwgMjAxOCA8YnIgLz4gV2Vla2VuZCcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdBIFJldHVybiB0byB0aGUgUXVlc3Rpb24gb2YgR3VucywgR2VybXMsIGFuZCBTdGVlbCcsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MyxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGUzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMicsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTAzLTAyJyxcclxuICAgICAgICAgICAgZGF0ZTogJ01hcmNoIDIsIDIwMTgnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdXaWRlbmluZyBDaXJjbGVzIG9mIE1vYmlsZS1BcHAgU2VjdXJpdHkgUmlza3MnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDIsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlMlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzEnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wMy0wMScsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXJjaCAxLCAyMDE4JyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdCbG9ja2NoYWluIFN1c3RhaW5hYmlsaXR5IElzc3VlcyBhbmQgVGhlIERvdWJsZS1FZGdlZCBTd29yZCcsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MSxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGUxXHJcbiAgICAgICAgfVxyXG4gICAgXTtcclxuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgdXJsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGNhdCA9IGAgXHJcblx0ICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0RpdlwiPiBcclxuXHQgIDxociAvPiAgXHJcblx0ICA8YSBocmVmPVwiI3RvcFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgXHJcblx0ICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG5cdCAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+IFxyXG5cdCAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuXHQgIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCIgIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG5cdCAgPGg2ICBpZD1cInRpdGxlXCIgICBjbGFzcz1cImRhaWx5dGl0bGUgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcblx0ICA8YnIgLz5cclxuXHQgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH1cdCAgPC9kaXY+XHJcbiAgICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0uY2l0ZX08L2Rpdj5cclxuXHQgIDwvZGl2PmBcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtbWFyY2gxOVwiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjYXRNb2QgPSBgXHJcblx0ICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfV9tb2RcIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcblx0ICA8aHIgLz4gIFxyXG5cdCAgPGEgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcblx0ICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG5cdCAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuXHQgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcblx0ICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuXHQgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG5cdCAgPGJyIC8+XHJcbiAgICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICAgICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5jaXRlfTwvZGl2PlxyXG4gICAgICBcclxuXHJcblx0ICA8L2Rpdj5gO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1tYXJjaDE5LW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdibG9nZ2VyLW1hcmNoMTknKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5cclxuYmxvZ2dlck1hcmNoMTkoKTsiLCIgXHJcbi8vVG9wIFZhcnMgQWJvdmVcclxuXHJcbnZhciBibG9nZ2VyTWF5ID0gZnVuY3Rpb24gKCkge1xyXG4gXHJcbiBcclxuXHJcbnZhciBibG9ncG9zdDEzID0gIGBcclxuXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5XaW5uaW5nIGFuZCBsb3NpbmcgbWlsbGlvbnMgdmlhIGEgdGVsZXBob25lIGlzIHZlcnkgSmFtZXMgQm9uZC1lc3F1ZSwgYnV0IHRoZSAocmUpbmV3ZWQgbGVnYWxpc2F0aW9uIG9mIHNwb3J0cyBiZXR0aW5nIG1lcmVseSBtaW1pY3MgbmF0aW9uYWwgbW9kZWxzIGFscmVhZHkgaW4gbG9uZy10aW1lIHVzZSBpbiBFdXJvcGUgYW5kIGVsc2V3aGVyZS48c3VwPjE8L3N1cD4gSW4gdGhlIFUuUy4sIG1vYmlsZSBjYXJyaWVycyBhbmQgbWFrZXJzIHdpbGwgYmUgYXNrZWQgb2YgYSBsb3QgbW9yZSB3aGVuIG1vbmV5IGlzIG9uIHRoZSBsaW5lIC4uLiB3aGljaCBpbXBsaWNpdGx5IGJyaW5ncyB1cCBibG9ja2NoYWluIHNvbHV0aW9ucy4gSGVyZSdzIG9uZSBleGFtcGxlOlxyXG48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gV2luRmxvdywgYSBzcG9ydHMgYmV0dGluZyBwbGF0Zm9ybSB0aGF0IHVzZXMgbGVkZ2VyIHRlY2hub2xvZ3kgdG8gb2ZmZXIgdHJhbnNwYXJlbnQgYmV0dGluZyBhbmQgcHJvZHVjdHMsIGhhcyBkZWNpZGVkIHRvIHJ1biBpdHMgcGxhdGZvcm0sIGEgZGVjZW50cmFsaXplZCBhcHBsaWNhdGlvbiBvbiB0aGUgSGVkZXJhIEhhc2hncmFwaCBOZXR3b3JrLlxyXG5cclxuV2luRmxvdyBoYXMgYmVlbiBjcmVhdGVkIHdpdGggdGhlIGludGVudGlvbnMgb2Ygc29sdmluZyB0aHJlZSBtYWluIGluZHVzdHJ5IHJlbGF0ZWQgcHJvYmxlbXMsIHdoaWNoIGFyZSB0aGUgbGFjayBvZiBhY2NvdW50YWJpbGl0eSBhbmQgdHJhbnNwYXJlbmN5LCBtZWFuaW5nZnVsIHJld2FyZHMgcHJvZ3JhbXMgb3IgY29tcGVuc2F0aW9uIHRvIGxvc2luZyBwbGF5ZXJzIGFuZCBwcm9kdWN0IGlubm92YXRpb24uPHN1cD4yPC9zdXA+XHJcbjwvcD5cclxuPHA+XHJcbiBTbyB3aGVyZSBhcmUgd2Ugb24gTW9iaWxlIHNvbHV0aW9ucyBub3cgdGhhdCB0aGUgc3Rha2VzIGhhdmUgYmVlbiBleHBvbmVudGlhbGx5IHJhaXNlZC4uLlNlY3VyaXR5LCBBdXRoZW50aWNhdGlvbiwgSW5zdGFudGFuZW91cyBTcGVlZD8gIE5vIG5lZWQgdG8gbG9vaywgdGhlIHRlY2ggZG9lc24ndCBleGlzdCE8L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj7igJxUaGVyZSBpcyBjdXJyZW50bHkgbm8gYWN0aXZlLCBmdWxseS1mdW5jdGlvbmFsIHNwb3J0c2Jvb2sgdXNpbmcgZGlzdHJpYnV0ZWQgbGVkZ2VyIG9yIGJsb2NrY2hhaW4gdGVjaG5vbG9neSwgbGV0IGFsb25lIGFueSBvcGVyYXRvciBpbiB0aGUgc3BvcnRzIGJldHRpbmcgaW5kdXN0cnkgYXQgbGFyZ2UgdGhhdCByZWRpc3RyaWJ1dGVzIGFsbW9zdCBhbGwgb2YgdGhlaXIgcHJvZml0cyByaWdodCBiYWNrIHRvIHRoZSBwbGF5ZXJzLiA8c3VwPiAyIDwvc3VwPiA8L3A+XHJcbjxwPldoYXQgYSBjb2luY2lkZW5jZSB0aGF0IHRoaXMgbW9udGgsIEhlZGVyYSdzIEhhc2hncmFwaCA8aT5wdWJsaWM8L2k+IGxlZGdlciB3YXMgcmVsZWFzZWQsIHRoZSBFdXJvcGVhbiBVbmlvbiByZXdyb3RlIHRoZWlyIGludGVybmV0IGRhdGEgcG9saWNpZXMgaW4gR2VuZXJhbCBEYXRhIFByaXZhY3kgUmVndWxhdGlvbiAoR0RQUiBjb3ZlcmVkIGluIG1vcmUgZGVwdGggaW4gPGEgaHJlZj1cIiMxOC0wNC0xOVwiPkFwcmlsIDE5dGg8L2E+IGFuZCA8YSBocmVmPVwiIzE4LTA0LTE2XCI+IDE2dGggcG9zdHM8L2E+LiBIb3dldmVyIHRoZSBvY2N1cnJlbmNlIG9mIGFsbCB0aHJlZSBldmVudHMgd2lsbCBkZWZpbml0ZWx5IHRyaWdnZXIgc29tZSB0ZWNobm9sb2dpY2FsIGhvdC1zd2FwcGluZyEgRnJvbSB0aGUgc2FtZSBleGFtcGxlLFxyXG48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5cclxudGhlIFtXaW5GbG93XSBwcm9qZWN0LCB3aGljaCBpcyBzcXVhcmVseSBmb2N1c2VkIG9uIEV1cm9wZSBkdWUgdG8gdGhlIEZlZGVyYWwgYmFuIG9uIHNwb3J0cyBiZXR0aW5nIGluIHRoZSBVUywgd2lsbCByYWlzZSBtb25leSB0aHJvdWdoIHByaXZhdGUgcGxhY2VtZW50cyB3aGlsZSBpdCBjb250aW51ZXMgdG8gd29yayBvbiBkZXZlbG9waW5nIHRoZSBiZXR0aW5nIHBsYXRmb3JtLjxiciAvPjxiciAvPiBcclxuV2luRmxvdywgd2hpY2ggY2xhaW1zIHRvIGhhdmUgYSB1bmlxdWUgcHJvZml0IHNoYXJpbmcgbW9kZWwsIHNhaWQgYnJlYWt0aHJvdWdocyBpbiB0ZWNobm9sb2d5IGFuZCBuZXcgYmVuZWZpdHMgZm9yIHBsYXllcnMsIGluY2x1ZGluZyB1bnByZWNlZGVudGVkIHJld2FyZHMsIHNlY3VyaXR5LCBhbmQgdHJhbnNwYXJlbmN5LCB3aWxsIGFsbG93IGl0IHRvIGRpc3J1cHQgdGhlIGluY3VtYmVudHMgaW4gYSBtdWx0aS1iaWxsaW9uIGRvbGxhciBtYXJrZXQuXHJcbjwvcD5cclxuPHA+U28sIHRoZSBuZWVkcyBmb3IgbW9iaWxlIHNwb3J0cyBiZXR0aW5nIGFsbCBkZXBlbmQgb24gc3BlZWQsIGZvciB3aGljaCB0aGUgbmV3bHkgdW52ZWlsZWQgSGVkZXJhIGhhc2hncmFwaCBzcGVjaWFsaXplcyA8c3VwPjIgPC9zdXA+IChjb3ZlcmVkIDxhIGhyZWY9XCIjbWF5LTE4LTA1LTAyXCI+TWF5IDItNSBmb3VyLXBhcnQgc2VyaWVzPC9hPikuIExvb2tzIGdvb2QgZnJvbSBhZmFyLCBsZXQncyBzZWUgbm93IHRoYXQgYW55b25lIGNhbiBraWNrIHRoZSB0aXJlcyBvZiB0aGF0IHRoaW5nIGNhbGxlZCBEQUchXHJcbjwvcD5cclxuYDsgIFxyXG4gdmFyIGJsb2djaXRlMTMgID0gIFxyXG4gYFxyXG4gPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS9idXNpbmVzcy9uaWxzLXByYXRsZXktb24tZmluYW5jZS8yMDE4L21heS8xNC91ay1ib29raWVzLWJld2FyZS11cy13aWxsLWxvb2stYWZ0ZXItaXRzLW93bi1pbi1iZXR0aW5nLXJldm9sdXRpb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vYnVzaW5lc3Mvbmlscy1wcmF0bGV5LW9uLWZpbmFuY2UvMjAxOC9tYXkvMTQvdWstYm9va2llcy1iZXdhcmUtdXMtd2lsbC1sb29rLWFmdGVyLWl0cy1vd24taW4tYmV0dGluZy1yZXZvbHV0aW9uPC9hPjwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly9iaXRjb2luZXhjaGFuZ2VndWlkZS5jb20vaGVkZXJhLWhhc2hncmFwaC1kbHQtd2lsbC1wb3dlci13aW5mbG93LXByb2ZpdC1zaGFyaW5nLXNwb3J0c2Jvb2svXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vYml0Y29pbmV4Y2hhbmdlZ3VpZGUuY29tL2hlZGVyYS1oYXNoZ3JhcGgtZGx0LXdpbGwtcG93ZXItd2luZmxvdy1wcm9maXQtc2hhcmluZy1zcG9ydHNib29rLzwvYT48L3A+XHJcbiAgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj4zLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9qZWZma2F1Zmxpbi8yMDE4LzAzLzEzL2hlZGVyYS1oYXNoZ3JhcGgtdGhpbmtzLWl0LWNhbi1vbmUtdXAtYml0Y29pbi1hbmQtZXRoZXJldW0td2l0aC1mYXN0ZXItdHJhbnNhY3Rpb25zLyM2M2QwODA2Y2FiY2JcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5mb3JiZXMuY29tL3NpdGVzL2plZmZrYXVmbGluLzIwMTgvMDMvMTMvaGVkZXJhLWhhc2hncmFwaC10aGlua3MtaXQtY2FuLW9uZS11cC1iaXRjb2luLWFuZC1ldGhlcmV1bS13aXRoLWZhc3Rlci10cmFuc2FjdGlvbnMvIzYzZDA4MDZjYWJjYjwvYT48L3A+XHJcbiA8cCBjbGFzcz1cImNpdGVcIj40LiA8YSBocmVmPVwiaHR0cHM6Ly9iaXRzb25saW5lLmNvbS9tYW5jZS1oYXJtb24taGVkZXJhLWhhc2hncmFwaC9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2JpdHNvbmxpbmUuY29tL21hbmNlLWhhcm1vbi1oZWRlcmEtaGFzaGdyYXBoLzwvYT48L3A+XHJcbiBcclxuIGA7XHJcblxyXG5cclxudmFyIGJsb2dwb3N0MTIgPSAgYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5KdXN0aWNlIFNhbXVlbCBBLiBBbGl0byBKci4gb3V0bGluZWQgdGhlIFN1cHJlbWUgQ291cnQncyBNYWpvcml0eSBPcGluaW9uIG9uIG92ZXJ0dXJuaW5nIHRoZSBmZWRlcmFsIHByb2hpYml0aW9uIG9uIHNwb3J0cyBiZXR0aW5nIHRoaXMgd2Vlay48c3VwPjE8L3N1cD4gVGhlIHByaW1hcnkgPGk+anVzdGlmaWNhdGlvbiB3YXMgYW4gdW5jb25zaXR1dGlvbmFsIEZlZGVyYWwgYXV0aG9yaXR5IG92ZXIgU3RhdGVzJyByaWdodHM8L2k+LCBpbiBvdmVydHVybmluZyB0aGUgMTk5MiBQcm9mZXNzaW9uYWwgYW5kIEFtYXRldXIgU3BvcnRzIFByb3RlY3Rpb24gQWN0LiAgXHJcbjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBTdXByZW1lIENvdXJ0IHN0cnVjayBkb3duIGEgMTk5MiBmZWRlcmFsIGxhdyBvbiBNb25kYXkgdGhhdCBlZmZlY3RpdmVseSBiYW5uZWQgY29tbWVyY2lhbCBzcG9ydHMgYmV0dGluZyBpbiBtb3N0IHN0YXRlcywgb3BlbmluZyB0aGUgZG9vciB0byBsZWdhbGl6aW5nIHRoZSBlc3RpbWF0ZWQgJDE1MCBiaWxsaW9uIGluIGlsbGVnYWwgd2FnZXJzIG9uIHByb2Zlc3Npb25hbCBhbmQgYW1hdGV1ciBzcG9ydHMgdGhhdCBBbWVyaWNhbnMgbWFrZSBldmVyeSB5ZWFyLjxiciAvPjxiciAvPlxyXG5UaGUgZGVjaXNpb24gc2VlbXMgY2VydGFpbiB0byByZXN1bHQgaW4gcHJvZm91bmQgY2hhbmdlcyB0byB0aGUgbmF0aW9u4oCZcyByZWxhdGlvbnNoaXAgd2l0aCBzcG9ydHMgd2FnZXJpbmcuIEJldHRvcnMgd2lsbCBubyBsb25nZXIgYmUgZm9yY2VkIGludG8gdGhlIGJsYWNrIG1hcmtldCB0byB1c2Ugb2Zmc2hvcmUgd2FnZXJpbmcgb3BlcmF0aW9ucyBvciBpbGxpY2l0IGJvb2tpZXMuPGk+IFBsYWNpbmcgYmV0cyB3aWxsIGJlIGRvbmUgb24gbW9iaWxlIGRldmljZXMsIDwvaT4gZnVlbGVkIGFuZCBlbmRvcnNlZCBieSB0aGUgbGF3bWFrZXJzIGFuZCBzcG9ydHMgb2ZmaWNpYWxzIHdobyBvcHBvc2VkIGl0IGZvciBzbyBsb25nLiA8c3VwPjI8L3N1cD4gXHJcbjwvcD5cclxuXHJcbjxwPkFuZCBub3csIDxpPnRoZSBWZWdhcyBTdHJpcDwvaT4gaXMgYnV0IGEgbWVyZSBpY29uJ3MgaG9wIGF3YXkgZnJvbSBDYW5keSBDcnVzaCEgVWggb2ggLi4uLjwvcD5cclxuYDtcclxudmFyIGJsb2djaXRlMTIgPSBgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTgvMDUvMTQvdXMvcG9saXRpY3Mvc3VwcmVtZS1jb3VydC1zcG9ydHMtYmV0dGluZy1uZXctamVyc2V5Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzA1LzE0L3VzL3BvbGl0aWNzL3N1cHJlbWUtY291cnQtc3BvcnRzLWJldHRpbmctbmV3LWplcnNleS5odG1sPC9hPjwvcD5gO1xyXG4gXHJcblxyXG52YXIgYmxvZ3Bvc3QxMSA9ICBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkphcmdvbiBpcyBjdXJpb3VzbHkgdWdseSBhdCBmaXJzdCBzaWdodCwgYnV0IG9ubHkgd2l0aCB0aW1lIGRvZXMgdGVjaG5pY2FsIGJlYXV0eSByZXZlYWwgaXRzZWxmLiBJIGRlY2lkZWQgdG8gbWFrZSBteSBmaXJzdCByZWNpcGUgd2l0aCBXZWJBc3NlbWJseSBhbmQgSmF2YVNjcmlwdCwgKHdpdGggeWVzLCBhIHRoaXJkIGNhbGxlZCA8aT5FbXNjcmlwdGVuPC9pPiBhbmQgbm8sIG15IGV5ZXMgYXJlbid0IHJvbGxpbmcpIC4uLiB0aGlzIHdhYWFzIGFtYXppbmcsIFdvdyEgU28gSSB0aG91Z2h0IHRvIHdyaXRlIGFib3V0IHRoZSBudXRzIGFuZCBib2x0cyBvZiBpdCBhbGwuIDwvcD5cclxuPHA+U28sICAgd2hhdCBleGFjdGx5IDxpPiBpcyA8L2k+IFdlYkFzc2VtYmx5LCBzcGVjaWZpY2FsbHk/PyBJdCdzIHRoaXM6PHNwYW4gc3R5bGU9XCJjb2xvcjpwdXJwbGVcIj4gKEFuZCwgZm9yIHRoZSBqYXJnb24td2FyeSwgc2tpcCB0aGlzIHBhcmFncmFwaCA8L3NwYW4+IDotKTwvcD5cclxuPHAgY2xhc3M9XCJjaXRlXCI+XHJcbiQgZW1jYyAtcyBXQVNNPTEgLW8gZmliLmpzIGZpYi5jIDwvcD48cCBjbGFzcz1cImdyZWVuXCI+XHJcbjxpPmVtY2M8L2k+IGV4ZWN1dGVzIHRoZSA8aT5FbXNjcmlwdGVuPC9pPiBjb21waWxlcjxiciAvPlxyXG48aT4tczwvaT4gZW5zdXJlcyB0aGF0IEVtc2NyaXB0ZW4gb3V0cHV0cyBXZWJBc3NlbWJseTxiciAvPlxyXG48aT4tbyBmaWIuanM8L2k+IG5hbWVzIHRoZSBvdXRwdXQgYXMgZmliLmpzPGJyIC8+XHJcbjxpPmZpYi5jPC9pPiBBbmQsIGZpbmFsbHkgdGhpcyBpcyB0aGUgaW5wdXQgZmlsZSdzIG5hbWUhPGJyIC8+XHJcbjxwPlxyXG5UaGlzIGZpcnN0IHBhcnQ/IEl0J3MgbGlrZSBzdGFyaW5nIGludG8gYSBzb2xhciBlY2xpcHNlIChJIGNvbmZlc3MgSSBnbGFuY2VkIGF0IG9uZSByZWNlbnRseSAoYnV0IGRpZG4ndCB3ZSBhbGwsIHNlY3JldGx5PykpIC4uLiA8YnIgLz5cclxuQW55d2F5LCB0aGlzIGlzIGEgc2ltcGxlLCBjbGFzc2ljIGV4YW1wbGUgdXNpbmcgRmlib25hY2NpIHNlcXVlbmNlPHN1cD4yPC9zdXA+IGZvciBmYW1pbGlhcml0eS4gSGVyZSdzIHRoZSBpbnB1dDo8YnIgLz5cclxuPC9wPlxyXG48cHJlPlxyXG5maWIuYzpcclxuI2luY2x1ZGUgPGVtc2NyaXB0ZW4uaD5cclxuXHJcbkVNU0NSSVBURU5fS0VFUEFMSVZFXHJcbmludCBmaWIoaW50IG4pIHtcclxuICBpbnQgaSwgLCBhID0gMCwgYiA9IDE7XHJcbiAgZm9yICAoaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgIHQgPSBhICsgYjtcclxuICAgIGEgPSBiO1xyXG4gICAgYiA9IHQ7XHJcbiAgfVxyXG4gIHJldHVybiBiO1xyXG59PC9wcmU+IFxyXG48cD5cclxuU28sIGdpdmVuIHRoZSBpbnRlZ2VyIGFic2VuY2UgaW4gSmF2YVNjcmlwdCBtZW50aW9uZWQgaW4gdGhlIDxhIGhyZWY9XCIjMTgtMDUtMTBcIj5NYXkgMTB0aCBwb3N0PC9hPiwgVGhlIEZpYm9uYWNjaSBpbnRlZ2VyIHNlcXVlbmNlIGV4YW1wbGUgaWxsdXN0cmF0ZXMgdGhlICAgcmVsYXRpb25zaGlwIGJldHdlZW4gV2ViQXNzZW1ibHkgYW5kIEphdmFzY3JpcHQuIFVubGlrZSBKYXZhU2NyaXB0J3MgbGFjayBvZiBpbnRlZ2VycywgV2ViQXNzZW1ibHkncyBtYXRoIGtpdCBpcyBub3RoaW5nIHNob3J0IG9mIGx1eHVyeSEgXHJcbjwvcD4gIFxyXG48c2NyaXB0IHNyYz1cImZpYi5qc1wiPjwvc2NyaXB0PlxyXG48c2NyaXB0PiA8c3BhbiBjbGFzcz1cImdyZWVuXCI+VGhpcyBwYXJ0IGlzIEphdmFTY3JpcHQgY2Fycnlpbmcgb3V0IHRoZSBpbnN0cnVjdGlvbnMgcmVjZWlldmVkIGZyb20gRW1zY3JpcHRlbjo8L3NwYW4+XHJcbiAgTW9kdWxlLm9uUnVudGltZUluaXRpYWxpemVkID0gXyA9PiB7XHJcbiAgICBjb25zdCBmaWIgPSBNb2R1bGUuY3dyYXAoJ2ZpYicsICdudW1iZXInLCBbJ251bWJlciddKTtcclxuICAgIGNvbnNvbGUubG9nKGZpYigxMikpO1xyXG4gIH07XHJcbiAgPHNjcmlwdD5cclxuPC9wPlxyXG48cD5TbyB3aGF0IGhhcHBlbmVkIGJhY2sgdGhlcmUgaXMgdGhhdCA8aT5FbXNjcmlwdGVuIG91dHB1dHMgPHN0cm9uZz50d28gPC9zdHJvbmc+ZmlsZXMsIG9uZSBKYXZhU2NyaXB0IChmaWIuanMpIGFuZCBvbmUgV2ViQXNzZW1ibHkgKGZpYi53YXNtKTwvaT4uLiBTaW1wbGUgZW5vdWdoLCBhbmQgdGhhdCdzIHdoeSBtYXNzaXZlLCBpbnRyYWN0YWJsZSBhcHBsaWNhdGlvbiBwcm9ncmFtcyBsaWtlIEF1dG9DQUQgY2FuIG5vdyBiZSBlYXNpbHkgZGVwbG95ZWQgb24gYW55IHBsYXRmb3JtLCBmYXN0IGFuZCBoaWdoLWZ1bmN0aW9uIG9uIG91ciBtb2JpbGUgcGhvbmVzLiBUcnVlIGl0IGlzLCA8aT5hZnRlciBmaXJzdCBnbGFuY2UsIGFsbCAgdGhpcyBqYXJnb24ncyBpbm5lciBiZWF1dHkgc2hpbmVzLCBhIHJlYWwgaGFyYmluZ2VyIG9mIGdyZWF0IGFwcHMgdG8gY29tZSE8L3A+XHJcblxyXG5gO1xyXG52YXIgYmxvZ2NpdGUxMSA9IGA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9tZWRpdW0uY29tL21vemlsbGEtdGVjaC93aHktd2ViYXNzZW1ibHktaXMtYS1nYW1lLWNoYW5nZXItZm9yLXRoZS13ZWItYW5kLWEtc291cmNlLW9mLXByaWRlLWZvci1tb3ppbGxhLWFuZC1maXJlZm94LWRkYTgwZTRjNDNjYlwiIHRhcmdldD1cIl9ibGFua1wiPiBodHRwczovL21lZGl1bS5jb20vbW96aWxsYS10ZWNoL3doeS13ZWJhc3NlbWJseS1pcy1hLWdhbWUtY2hhbmdlci1mb3ItdGhlLXdlYi1hbmQtYS1zb3VyY2Utb2YtcHJpZGUtZm9yLW1vemlsbGEtYW5kLWZpcmVmb3gtZGRhODBlNGM0M2NiPC9hPjwvcD5cclxuPHAgY2xhc3M9XCJjaXRlXCI+Mi4gPGEgaHJlZj1cImh0dHBzOi8vd2ViYXNzZW1ibHkub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93ZWJhc3NlbWJseS5vcmc8L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGUgcXVvdGUgZ3JlZW4gXCI+Mi4gTm90ZSBvbiBleGFtcGxlIEZpYm9uYWNjaSBTZXF1ZW5jZTogKFdpa2lwYWVkaWEgRGVmaW5pdGlvbik6XHJcbjxiciAvPlxyXG5JbiBtYXRoZW1hdGljcywgYW4gaW50ZWdlciBzZXF1ZW5jZSBpcyBhIHNlcXVlbmNlIChpLmUuLCBhbiBvcmRlcmVkIGxpc3QpIG9mIGludGVnZXJzLiBcclxuQW4gaW50ZWdlciBzZXF1ZW5jZSBtYXkgYmUgc3BlY2lmaWVkIGV4cGxpY2l0bHkgYnkgZ2l2aW5nIGEgZm9ybXVsYSBmb3IgaXRzIG50aCB0ZXJtLCBvciBpbXBsaWNpdGx5IGJ5IGdpdmluZyBhIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGl0cyB0ZXJtcy4gRm9yIGV4YW1wbGUsIHRoZSBzZXF1ZW5jZSAwLCAxLCAxLCAyLCAzLCA1LCA4LCAxMywg4oCmIDxpPih0aGUgRmlib25hY2NpIHNlcXVlbmNlKSBpcyBmb3JtZWQgYnkgc3RhcnRpbmcgd2l0aCAwIGFuZCAxIGFuZCB0aGVuIGFkZGluZyBhbnkgdHdvIGNvbnNlY3V0aXZlIHRlcm1zIHRvIG9idGFpbiB0aGUgbmV4dCBvbmU6IGFuIGltcGxpY2l0IGRlc2NyaXB0aW9uLjwvaT4gIFRoZSBzZXF1ZW5jZSAwLCAzLCA4LCAxNSwg4oCmIGlzIGZvcm1lZCBhY2NvcmRpbmcgdG8gdGhlIGZvcm11bGEgbjIg4oiSIDEgZm9yIHRoZSBudGggdGVybTogYW4gZXhwbGljaXQgZGVmaW5pdGlvbi48L3A+IGAgO1xyXG4gXHJcbnZhciBibG9ncG9zdDEwID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5XZWJBc3NlbWJseSwgIGFib3V0IGEgeWVhciBvbGQsIHByb3ZpZGVzIGEgbmV3IGxldmVsIG9mIHBlcmZvcm1hbmNlIHRvIG1vYmlsZSBhcHBzIGFuZCB0aGUgYnJvd3NlciBnZW5lcmFsbHksIGJ1dCBpcyBpdCBzYWZlPyBJdCdzIGFjdHVhbGx5IHNhZmVyIHRoYW4gdHJhZGl0aW9uYWwgcGx1Zy1pbnMgZm9yIGJyb3dzZXJzLiBIZXJlJ3MgYSBxdWljayByZWNhcCBmcm9tIHllc3RlcmRheSdzIHBvc3Qgb24gV2ViQXNzZW1ibHk6PC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+V2ViQXNzZW1ibHkgaXMgb25lIG9mIHRoZSBiaWdnZXN0IGFkdmFuY2VzIHRvIHRoZSBXZWIgUGxhdGZvcm0gb3ZlciB0aGUgcGFzdCBkZWNhZGUuXHJcblxyXG5UaGlzIG5ldyBzdGFuZGFyZCB3aWxsIGVuYWJsZSBhbWF6aW5nIHZpZGVvIGdhbWVzIGFuZCBoaWdoLXBlcmZvcm1hbmNlIHdlYiBhcHBzIGZvciB0aGluZ3MgbGlrZSBjb21wdXRlci1haWRlZCBkZXNpZ24sIHZpZGVvIGFuZCBpbWFnZSBlZGl0aW5nLCBhbmQgc2NpZW50aWZpYyB2aXN1YWxpemF0aW9uLiBPdmVyIHRpbWUsIG1hbnkgZXhpc3RpbmcgcHJvZHVjdGl2aXR5IGFwcHMgKGUuZy4gZW1haWwsIHNvY2lhbCBuZXR3b3Jrcywgd29yZCBwcm9jZXNzaW5nKSBhbmQgSmF2YVNjcmlwdCBmcmFtZXdvcmtzIHdpbGwgbGlrZWx5IHVzZSBXZWJBc3NlbWJseSB0byBzaWduaWZpY2FudGx5IHJlZHVjZSBsb2FkIHRpbWVzIHdoaWxlIHNpbXVsdGFuZW91c2x5IGltcHJvdmluZyBwZXJmb3JtYW5jZSB3aGlsZSBydW5uaW5nLiBVbmxpa2Ugb3RoZXIgYXBwcm9hY2hlcyB0aGF0IGhhdmUgcmVxdWlyZWQgcGx1Zy1pbnMgdG8gYWNoaWV2ZSBuZWFyLW5hdGl2ZSBwZXJmb3JtYW5jZSBpbiB0aGUgYnJvd3NlciwgV2ViQXNzZW1ibHkgcnVucyBlbnRpcmVseSB3aXRoaW4gdGhlIFdlYiBQbGF0Zm9ybS4gVGhpcyBtZWFucyB0aGF0IGRldmVsb3BlcnMgY2FuIGludGVncmF0ZSBXZWJBc3NlbWJseSBsaWJyYXJpZXMgZm9yIENQVS1pbnRlbnNpdmUgY2FsY3VsYXRpb25zIChlLmcuIGNvbXByZXNzaW9uLCBmYWNlIGRldGVjdGlvbiwgcGh5c2ljcykgaW50byBleGlzdGluZyB3ZWIgYXBwcyB0aGF0IHVzZSBKYXZhU2NyaXB0IGZvciBsZXNzIGludGVuc2l2ZSB3b3JrLjxzdXA+MTwvc3VwPlxyXG48L3A+PHA+XHJcbkJyb3dzZXJzLCA8aT5kZXNwaXRlIEhUVFBTIGVuY3J5cHRpb24sIGFyZSBncm93aW5nIGluIHNlY3VyaXR5IHdlYWtuZXNzZXM8L2k+IHdpdGggbW9yZSB0ZXJyaXRvcnksIHJlc3BvbnNpYmlsaXRpZXMsIGFuZCBuZXcgQVBJIHJlbGF0aW9uc2hpcHMuIEhvd2V2ZXIsIGFsb25nIHdpdGggV2ViQXNzZW1ibHkncyBzb2x1dGlvbnMgZm9yIENQVS1pbnRlbnNpdmUgYnJvd3NlciBvcGVyYXRpb25zIChsaWtlIEF1dG9DQUQgZXhhbXBsZSBpbiB0aGUgcHJldmlvdXMgcG9zdCksIFdlYkFzc2VtYmx5IGFsc28gb2ZmZXJzIHVuaXF1ZSBzZWN1cml0eSBzb2x1dGlvbnM6ICBcclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+V2ViQXNzZW1ibHkgZGVzY3JpYmVzIGEgbWVtb3J5LXNhZmUsIHNhbmRib3hlZCBleGVjdXRpb24gZW52aXJvbm1lbnQgdGhhdCBtYXkgZXZlbiBiZSBpbXBsZW1lbnRlZCBpbnNpZGUgZXhpc3RpbmcgSmF2YVNjcmlwdCB2aXJ0dWFsIG1hY2hpbmVzLiBXaGVuIGVtYmVkZGVkIGluIHRoZSB3ZWIsIFdlYkFzc2VtYmx5IHdpbGwgZW5mb3JjZSB0aGUgc2FtZS1vcmlnaW4gYW5kIHBlcm1pc3Npb25zIHNlY3VyaXR5IHBvbGljaWVzIG9mIHRoZSBicm93c2VyLjxzdXA+Mi48L3N1cD48L3A+XHJcbjxwPlxyXG4gVGhpcyBhcmNoaXRlY3R1cmUgICBzaWduaWZpZXMgZXZlbnR1YWwgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBleGlzdGluZyBCbG9jayBDaGFpbiBhcHBzIGxpa2UgTWV0YU1hc2sgdGhhdCB1c2UgYSBicm93c2VyIHBsdWctaW4gdG8gc2V0IHVwIGFuIEFQSSBiZXR3ZWVuLCBmb3IgZXhhbXBsZSwgdGhlIEV0aGVyZXVtIGJsb2NrY2hhaW4gYW5kIFdlYiBhY2Nlc3MuIFNvLCB3aXRoIFdlYkFzc2VtYmx5J3MgZ3JlYXQgcG90ZW50aWFsIHdpdGggSmF2YVNjcmlwdCwgaXMgaXQgYSBzYWZlciwgbW9yZSBzZWN1cmUgb24tbGluZSB3b3JsZD8gTm8sIGJ1dCA8aT50aGVyZSBhcmUgc2FmZXIgY29ybmVycyA8L2k+IC4uLiBhbmQgY2VydGFpbmx5IGEgc2FmZXIgbmljaGUgZm9yIGRyYXdpbmcgc3BhY2UhPC9wPlxyXG5cclxuYDtcclxudmFyIGJsb2djaXRlMTAgPSBgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9tb3ppbGxhLXRlY2gvd2h5LXdlYmFzc2VtYmx5LWlzLWEtZ2FtZS1jaGFuZ2VyLWZvci10aGUtd2ViLWFuZC1hLXNvdXJjZS1vZi1wcmlkZS1mb3ItbW96aWxsYS1hbmQtZmlyZWZveC1kZGE4MGU0YzQzY2JcIiB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly9tZWRpdW0uY29tL21vemlsbGEtdGVjaC93aHktd2ViYXNzZW1ibHktaXMtYS1nYW1lLWNoYW5nZXItZm9yLXRoZS13ZWItYW5kLWEtc291cmNlLW9mLXByaWRlLWZvci1tb3ppbGxhLWFuZC1maXJlZm94LWRkYTgwZTRjNDNjYjwvYT48L3A+XHJcbjxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3dlYmFzc2VtYmx5Lm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd2ViYXNzZW1ibHkub3JnPC9hPjwvcD5gO1xyXG5cclxudmFyIGJsb2dwb3N0OSA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCIgaWQ9XCIwNS0xMC0xOFwiPkF1dG9DQUQsIHRoZSBmaXJzdCBuYW1lIGluIDMtRCBlbmdpbmVlcmluZywgaGFzIHN0ZXBwZWQgaW50byBhIG5ldyB3b3JsZCBpbiB0aGUgcGFzdCBtb250aC4gUmVjZW50LCB1bnByZWNlZGVudGVkIG1vYmlsZSBhcHAgYWR2YW5jZXMgYWxsb3cgbW9yZSBDUFUtaW50ZW5zaXZlIGxhcHRvcCBhcHBsaWNhdGlvbnMgdG8gaG9wIHRvIHRoZSBwaG9uZSB3aXRoIGVxdWFsIGludGVyYWN0aXZpdHkgYW5kIG5lYXItZXF1YWwgZnVuY3Rpb25hbGl0eS4gVGhhbmtzIHRvIHRoaXJkLXBhcnR5IGxhbmd1YWdlcywgSmF2YVNjcmlwdCwgdGhlIGJyb3dzZXIncyBsYW5ndWFnZSwgaXMgYnJvYWRlbmluZyBpbiBwb3dlcnM6IEFuZCB0aGlzIGlzIG5vdGhpbmcgc2hvcnQgb2YgZXhoaWxhcmF0aW5nIHdpdGgganVzdCBlbm91Z2ggb2YgYSB0b3VjaCBvZiBkYW5nZXIuXHJcbjwvcD48cD5BdXRvQ0FEJ3MgcmVjZW50IGFkdmFuY2VzIGluIHRoZWlyIG1vYmlsZSBwbGF0Zm9ybSBleGVtcGxpZmllcyB0aGlzIHRyZW5kLjxzdXA+MTwvc3VwPiBBdXRvQ0FELCB0aGUgYW5jaWVudCwgZm91bmRhdGlvbmFsLCB1bHRyYS1wb3dlcmZ1bCwgZXZlci1tb2Rlcm5pemluZyBwcm9ncmFtbWluZyBjb2RlYmFzZS0tY2VsZWJyYXRlcyAzNSB5ZWFycyBvbGQsIGFuZCBwcmVkYXRlcyB0aGUgd2ViISBBdXRvQ0FEIGJ5IEF1dG9EZXNrIGhhcyBoaXN0b3JpY2FsbHkgaGFkIGRpZmZpY3VsdHkgaW1wbGVtZW50aW5nIGl0cyBjb2RlYmFzZSBpbnRvIG1vYmlsZSBwbGF0Zm9ybXMuIFNvLCB0aGVpciBhcHAgcHJlc2VuY2Ugc3VmZmVyZWQgYmVjYXVzZSBpdCBoYWQgYmVlbiBoaWdobHkgd2F0ZXJlZCBkb3duLCBhbmQgc3VkZGVubHkgY29tcGV0aW5nIHdpdGggdGhvdXNhbmRzIG9mIG90aGVyIDMtRCBlbmdpbmVlcmluZyBhcHBzLi4uVW50aWwgbm93LiA8L3A+PHA+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+WWVzdGVyZGF5IFtNYXJjaCAyLCAyMDE4XSB3YXMgYSBiaWcgZGF5IGZvciB0aGUgQXV0b0NBRCBwcm9kdWN0LiBBIG11bHRpLXllYXIgZW5naW5lZXJpbmcgcHJvamVjdCDigJMgc3RhcnRlZCBpbiB0aGUgQXV0b0NBRCB0ZWFtIHdheSBiYWNrIHdoZW4gSSB3YXMgcGFydCBvZiBpdCDigJMgY3VsbWluYXRlZCBpbiBpdHMgZmlyc3QgZGVsaXZlcmFibGVzIGdldHRpbmcgaW50byB0aGUgaGFuZHMgKG9yLCBpbiB0aGlzIGNhc2UsIGJyb3dzZXJzKSBvZiBjdXN0b21lcnMuICBUaGUgQXV0b0NBRCB0ZWFtIGhhcyBiZWVuIHdvcmtpbmcgb24gYSBwcm9qZWN0IGNvZGVuYW1lZCDigJxGYWJyaWPigJ0gZm9yIHRoZSBsYXN0IHNldmVyYWwgeWVhcnMuIEl0J3MgaGFzIGJlZW4gYSBodWdlIGFtb3VudCBvZiB3b3JrIOKAkyBzb21ldGhpbmcgSeKAmWxsIGhvcGVmdWxseSBnZXQgaW50byBpbiBhIGZ1dHVyZSBibG9nIHBvc3Qg4oCTIGJ1dCBpdOKAmXMgZmluYWxseSBiZWFyaW5nIHRhbmdpYmxlIGZydWl0LiAgSW4gYnJvYWQgc3Ryb2tlcyB0aGUgd29yayB3YXMgdG8gdGFrZSB0aGUgY29yZSBvZiBBdXRvQ0FEIGFuZCBtYWtlIGl0IGNyb3NzLXBsYXRmb3JtLiA8L3A+PHAgY2xhc3M9XCJxdW90ZVwiPllvdSBtaWdodCBjb25zaWRlciB0aGUgQmlnIFNwbGl0IOKAkyB3b3JrIHRoYXQgd2FzIGRvbmUgb3N0ZW5zaWJseSB0byBidWlsZCBBdXRvQ0FEIGZvciBNYWMgYnV0IHJlc3VsdGVkIGluIGEgQ29yZSBFbmdpbmUgdGhhdCBiZWNhbWUgdGhlIG1lY2hhbmlzbSB0aHJvdWdoIHdoaWNoIGRldmVsb3BlcnMgY291bGQgcnVuIGN1c3RvbSBjb2RlIGluIHRoZSBjbG91ZCB2aWEgQXV0b0NBRCBJL08gKG5vdyBwYXJ0IG9mIEZvcmdl4oCZcyBEZXNpZ24gQXV0b21hdGlvbiBBUEkpIOKAkyB0byBiZSB0aGUgZmlyc3QgcGhhc2Ugb2YgdGhpcyBlZmZvcnQuIEF0IHRoZSB2ZXJ5IGxlYXN0IEZhYnJpYyBzdG9vZCBvbiB0aGUgc2hvdWxkZXJzIG9mIHRoZSBCaWcgU3BsaXQuPHN1cD4yLjwvc3VwPjwvcD48cD5cclxuXHJcbkluIHNob3J0LCBBdXRvRGVzaydzIGxhdGVzdCBicm93c2VyLWJhc2VkIEF1dG9DQUQgV2ViIEFwcCBhbmQgTW9iaWxlIEFwcCBoYXZlIHN1ZGRlbmx5IGFkdmFuY2VkIGEgcXVhbnR1bSBzdGVwLiBGb3IgZXhhbXBsZSwgdGhlIG1vYmlsZSBhcHAgcHJvdmlkZXMgbmVhcmx5IGFsbCBvZiB0aGUgZnVsbCBmZWF0dXJlcyAobm90IGluY2x1ZGluZyAzLUQgcmVuZGVyaW5nKSwgbGlrZSBzd2FwcGluZyAuRFdHIGZpbGVzIGZyb20gY2xvdWQgc2VydmljZXMgdXNpbmcgYSBmdWxsIG1vYmlsZSBpbnRlcmZhY2UuICA8L3A+XHJcbjxwPlxyXG5Ob3QganVzdCBmb3IgQXV0b0NBRCwgYnV0IGFsbCBhcHBzIGltcHJvdmUsIGJlY2F1c2UgPGk+dGhpcmQtcGFydHkgbGFuZ3VhZ2VzIGxpa2UgV2ViQXNzZW1ibHkgY2FuIFwiYnJva2VyXCIgdGhlIEFQSSBjb252ZXJzYXRpb24gYmV0d2VlbiBicm93c2VyIGFuZCB0aGUgb3BlcmF0aW5nIHN5c3RlbSdzIG1hY2hpbmUgY29kZSBmb3IgY2VydGFpbiB0YXNrczwvaT4uPHN1cD4zPC9zdXA+IEV4Y2VwdGlvbmFsbHkgaW50ZXJlc3RpbmcsIG5vdyBXZWJBc3NlbWJseSBwZXJmb3JtcyByZWFsLXRpbWUgQysrIHRyYW5zcGlsaW5nIGFsbG93aW5nIGFueSBicm93c2VyIHRvIGNvbW11bmljYXRlIGluIG5lYXItdG8gZGlyZWN0IG1hY2hpbmUtY29kZSBmb3IgY2VydGFpbiB0YXNrcy4gXHJcbldlYkFzc2VtYmx5IChXYXNtKSBpcyBhIFwiYmluYXJ5IGluc3RydWN0aW9uIGZvcm1hdCBmb3IgYSBzdGFjay1iYXNlZCB2aXJ0dWFsIG1hY2hpbmUgLi4uIGRlc2lnbmVkIGFzIGEgcG9ydGFibGUgdGFyZ2V0IGZvciBjb21waWxhdGlvbiBvZiBoaWdoLWxldmVsIGxhbmd1YWdlcyBsaWtlIEMvQysrL1J1c3QsIGVuYWJsaW5nIGRlcGxveW1lbnQgb24gdGhlIHdlYiBmb3IgY2xpZW50IGFuZCBzZXJ2ZXIgYXBwbGljYXRpb25zLlwiPHN1cD4zPC9zdXA+IEluIG90aGVyIHdvcmRzLCA8aT5XZWJBc3NlbWJseSBpcyB0aGUgbWlkZGxlLXBlcnNvbiB0cmFuc2xhdGluZyBiZXR3ZWVuIEphdmFTY3JpcHQncyBWOCBFbmdpbmUgYW5kIGEgZGV2aWNlJ3MgT3BlcmF0aW5nIFN5c3RlbTwvaT4uIEhlcmUncyAgYSBjbGVhcmVyIGV4cGxhbmF0aW9uIHVzaW5nIHRoZSBBdXRvQ0FEIGV4YW1wbGU6PC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+W0F1dG9DQUQnc10gRmFicmljIGhhcyBkb25lIGF3YXkgd2l0aCAjaWZkZWZzLCBmb3JjaW5nIGFueSBwbGF0Zm9ybS1zcGVjaWZpYyBjb2RlIGludG8gYSBQQUwgKFBsYXRmb3JtIEFic3RyYWN0aW9uIExheWVyKSBwZXIgdGFyZ2V0ZWQgcGxhdGZvcm0uIEFuZCBGYWJyaWMgaXMgYWJsZSB0byB0YXJnZXQgbW9yZSB0aGFuIGp1c3QgV2luZG93cyBhbmQgT1MgWC4gU29tZSBvZiB0aGUgbWFpbiB0YXJnZXRzIHdlcmUgdGhlIGVzdGFibGlzaGVkIG1vYmlsZSBwbGF0Zm9ybXMgKG1vcmUgb24gdGhhdCBkb3duIHRoZSBsaW5lKSwgYnV0IG9uZSBtYWpvciBlZmZvcnQgd2FzIHRvIHRhcmdldCB0aGUgd2ViIHBsYXRmb3JtIHdpdGggdGhlIEF1dG9DQUQgY29kZWJhc2UuXHJcblllcywgeW91IHJlYWQgdGhhdCByaWdodOKApiB5ZXN0ZXJkYXnigJlzIHVwZGF0ZSB0byBBdXRvQ0FEIFdlYiBub3cgcnVucyB0aGUgc2FtZSBjb3JlIGNvZGUgYXMgc3RhbmRhcmQgQXV0b0NBRCwgYnV0IGluIGEgYnJvd3Nlci4gQSBtYWpvciBwYXJ0IG9mIEF1dG9DQUTigJlzIEMrKyBjb2RlYmFzZSBnZXRzIHJ1biB0aHJvdWdoIEVtc2NyaXB0ZW4gKGF0IGxlYXN0IHRoYXTigJlzIG15IHVuZGVyc3RhbmRpbmcg4oCTIEnigJlsbCBjb3JyZWN0IGFueSBkZXRhaWxzIEkgZ2V0IHdyb25nKSB0byBiZSB0cmFuc3BpbGVkIGludG8gV2ViQXNzZW1ibHkuIFxyXG48cD5cclxuPHA+U28sIGl0IGxvb2tzIGxpa2Ugb3VyIDxpPndpbGQsIHVudGFtZWQgbGFuZ3VhZ2UsIEphdmFTY3JpcHQsIGhhcyBtYXR1cmVkIHRvIHRoZSBiaWctbGVhZ3VlcyA8L2k+IGJ5IHRlYW1pbmcgdXAgd2l0aCBXZWJBc3NlbWJseSAuLi4gQWZ0ZXIgYWxsLCBKYXZhU2NyaXB0LCBhbW9uZyBhbGwgdGhlIGxhbmd1YWdlcywgd2FzIGJvcm4gd2l0aG91dCBhIG1pbmQgZm9yIG1hdGguLi4gbGl0ZXJhbGx5LiBJdCdzIGNvcmUgbWF0aCBsaWJyYXJ5IGNvbmR1Y3RzIGFsbCBvcGVyYXRpb25zIGluIDY0LWJpdCBmbG9hdGluZyBwb2ludCwgaW4gdGhlIGFic2VuY2Ugb2YgaW50ZWdlcnMhIFNvLCB0aGlzIGVudGFpbHMgb2NjYXNpb25hbCBhbm9tYWxpZXM6IEZvciBleGFtcGxlLCAuMSArIC4yIGRvZXMgbm90IGVxdWFsIC4zISAoVHJ5IGl0IHdpdGggdGhlIEphdmFTY3JpcHQgY2FsY3VsYXRvciBiZWxvdyAuLi4gKSBBbmQgc28sIGdyZWF0IHRoaW5ncyBhd2FpdCB0aGlzIHBhcnRuZXJzaGlwIGJldHdlZW4gV2ViQXNzZW1ibHkgYW5kIEphdmFTY3JpcHQsIGJ1dCBldmVyeSBtYXJyaWFnZSBpcyBkaWZmZXJlbnQuLi4gb25lIHBhcnRuZXIgbWF5IGFsd2F5cyBuZWVkIGhlbHAgY29va2luZywgYW5kIGFub3RoZXIgbWF5IGFsd2F5cyBuZWVkIGhlbHAgd2l0aCB0aGUgbWF0aCwgYnV0IHRoYXQncyB3aGF0IE1hcnJpYWdlIGlzIGZvciE8L3A+XHJcblxyXG5cclxuIFxyXG5gO1xyXG52YXIgYmxvZ2NpdGU5ID0gYCA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYXV0b2Rlc2suY29tL3Byb2R1Y3RzL2F1dG9jYWQvZmVhdHVyZXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj4gaHR0cHM6Ly93d3cuYXV0b2Rlc2suY29tL3Byb2R1Y3RzL2F1dG9jYWQvZmVhdHVyZXM8L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cDovL3Rocm91Z2gtdGhlLWludGVyZmFjZS50eXBlcGFkLmNvbS90aHJvdWdoX3RoZV9pbnRlcmZhY2UvMjAxOC8wMy90aGUtZnV0dXJlLW9mLWF1dG9jYWQuaHRtbFwiIHRhcmdldD1cIl9ibGFua1wiPiBodHRwOi8vdGhyb3VnaC10aGUtaW50ZXJmYWNlLnR5cGVwYWQuY29tL3Rocm91Z2hfdGhlX2ludGVyZmFjZS8yMDE4LzAzL3RoZS1mdXR1cmUtb2YtYXV0b2NhZC5odG1sPC9hPjwvcD5cclxuPHAgY2xhc3M9XCJjaXRlXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vd2ViYXNzZW1ibHkub3JnXCI+aHR0cHM6Ly93ZWJhc3NlbWJseS5vcmc8L2E+PC9wPmA7XHJcblxyXG5cclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDggPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkZvciBhbGwgdGhlIGZhbmZhcmUgb2YgaW4tYnJvd3NlciBhcHBzLCBpLmUuIFByb2dyZXNzaXZlIFdlYiBBcHBzLCB0aGUgcGljdHVyZSBpc24ndCBhcyByb3N5IGFzIGFwcGVhcnMuIEFmdGVyIGFsbCwgd2UgYXJlIHN0aWxsIHRhbGtpbmcgYWJvdXQgdGhlIGJyb3dzZXIgd2luZG93LCByaWdodD8gTWFueSBvZiB0aGUgPGk+YnJvd3Nlci1iYXNlZDwvaT4gYXBwcyBkZXBlbmQgb24gcGx1Z2luIGV4dGVuc2lvbnMuIFRoaXMgaXMgc29ydCBvZiB0aGUgQWNoaWxsZXMgSGVlbCByZWNlbnRseSBleHBvc2VkIHdoaWxlLCBcIm92ZXIgdHdvIG1vbnRocywgc2V2ZW4gW0Nocm9tZV0gZXh0ZW5zaW9ucyBzdG9sZSBjcmVkZW50aWFscyBhbmQgaW5zdGFsbGVkIGN1cnJlbmN5IG1pbmVycy5cIjxzdXA+MTwvc3VwPiBUaGUgYXJ0aWNsZSBjaXRlcyAxMDAsMDAwIGNvbXB1dGVycyB0aGF0IG1heSBoYXZlIGxvc3QgcGFzc3dvcmRzLCBhbmQgb3RoZXIgcHJpdmF0ZSBkYXRhLS1vdWNoIVxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgVGhlIHNjYW0gd2FzIGFjdGl2ZSBzaW5jZSBhdCBsZWFzdCBNYXJjaCB3aXRoIHNldmVuIG1hbGljaW91cyBleHRlbnNpb25zIGtub3duIHNvIGZhciwgcmVzZWFyY2hlcnMgd2l0aCBzZWN1cml0eSBmaXJtIFJhZHdhcmUgcmVwb3J0ZWQgVGh1cnNkYXkuIEdvb2dsZSdzIHNlY3VyaXR5IHRlYW0gcmVtb3ZlZCBmaXZlIG9mIHRoZSBleHRlbnNpb25zIG9uIGl0cyBvd24gYW5kIHJlbW92ZWQgdHdvIG1vcmUgYWZ0ZXIgUmFkd2FyZSByZXBvcnRlZCB0aGVtLiBJbiBhbGwsIHRoZSBtYWxpY2lvdXMgYWRkLW9ucyBpbmZlY3RlZCBtb3JlIHRoYW4gMTAwLDAwMCB1c2VycywgYXQgbGVhc3Qgb25lIGluc2lkZSBhIFwid2VsbC1wcm90ZWN0ZWQgbmV0d29ya1wiIG9mIGFuIHVubmFtZWQgZ2xvYmFsIG1hbnVmYWN0dXJpbmcgZmlybSwgUmFkd2FyZSBzYWlkLlxyXG4gIDwvcD5cclxuICA8cD5BcyB3ZSBzZWUgdGhlIGFwcC1pbi10aGUtYnJvd3NlciB0YWtpbmcgb24gbW9yZSBvcGVyYXRpb25hbCwgbmV0d29ya2luZywgZnVuY3Rpb25hbCByb2xlcyAodGhlIHdvcmsgcHJldmlvdXNseSByZXNlcnZlZCB0byBuYXRpdmUgQXBwbGUvR29vZ2xlL01pY3Jvc29mdCBhcHAgc3RvcmVzKSwgdW5rbm93biwgdW5jb25jZWl2ZWQgdGhyZWF0cyBhcmUgaW5jcmVhc2luZ2x5IHBvc3NpYmxlLiBUaGF0J3MgYW5vdGhlciByZWFzb24gd2h5IFRlY2ggaXMgYWx3YXlzIGFuIGVkZ2Utb2YteW91ci1zZWF0IHNwZWN0YWNsZSFcclxuXHJcbiAgYDtcclxuICB2YXIgYmxvZ2NpdGU4ID0gYCAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vYXJzdGVjaG5pY2EuY29tL2luZm9ybWF0aW9uLXRlY2hub2xvZ3kvMjAxOC8wNS9tYWxpY2lvdXMtY2hyb21lLWV4dGVuc2lvbnMtaW5mZWN0LW1vcmUtdGhhbi0xMDAwMDAtdXNlcnMtYWdhaW4vXCI+aHR0cHM6Ly9hcnN0ZWNobmljYS5jb20vaW5mb3JtYXRpb24tdGVjaG5vbG9neS8yMDE4LzA1L21hbGljaW91cy1jaHJvbWUtZXh0ZW5zaW9ucy1pbmZlY3QtbW9yZS10aGFuLTEwMDAwMC11c2Vycy1hZ2Fpbi88L2E+PC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL2Jsb2cucmFkd2FyZS5jb20vc2VjdXJpdHkvMjAxOC8wNS9uaWdlbHRob3JuLW1hbHdhcmUtYWJ1c2VzLWNocm9tZS1leHRlbnNpb25zL1wiPmh0dHBzOi8vYmxvZy5yYWR3YXJlLmNvbS9zZWN1cml0eS8yMDE4LzA1L25pZ2VsdGhvcm4tbWFsd2FyZS1hYnVzZXMtY2hyb21lLWV4dGVuc2lvbnMvPC9hPjwvcD5gO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3Q3ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Hb29nbGUgSS8wJ3MgMjAxOCByZXZlbGF0aW9ucyBhbHNvIGluY2x1ZGVkIGEgZm9jdXMgb24gdGhlIDxpPlByb2dyZXNzaXZlIFdlYiBBcHAgKFBXQSk8L2k+LiBNeSA8YSBocmVmPVwiIzE4LTA0LTExXCI+QXByaWwgMTF0aDwvYT4gYW5kIDxhIGhyZWY9XCIjMTgtMDQtMDVcIj5BcHJpbCA1dGg8L2E+IHBvc3RzIGludHJvZHVjZSBhIG5ldyBhcHByb2FjaCB0byB0cmFkaXRpb25hbCBtb2JpbGUgYXBwcywgdXNpbmcgbmV3IEphdmFTY3JpcHQgdGVjaG5pcXVlcyBpbmNsdWRpbmcgYSBcIm1hbmlmZXN0XCIgYW5kIFwic2VydmljZSB3b3JrZXJzXCIgZmlsZXMgdGhhdCBpbnN0cnVjdCB0aGUgbW9iaWxlIHBob25lIHdoYXQgdG8gY2FjaGUgYW5kIG90aGVyIHNwZWNzLiBHb29nbGUgaGFzIHB1c2hlZCB1c2Ugb2YgdGhlc2UgUFdBcyBzaW5jZSAyMDE1IHdpdGggR29vZ2xlIENocm9tZSdzIGVmZm9ydHMgdG8gc3RlZXIgYXBwIGRldmVsb3BtZW50IHRvd2FyZCBkZXZpY2UtbmV1dHJhbCwgdWx0cmEtZmFzdCwgYW5kIGVuY3J5cHRpb24gYWR2YW50YWdlcyBvZiB0aGUgSHlwZXIgVGV4dCBUcmFuc2ZlciBQcm90b2NvbCAoSFRUUCksIGkuZS4gdGhlIGJyb3dzZXIuIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgT24gdGhlIGZpcnN0IGRheSBvZiBHb29nbGUgSS9PIDIwMTggZXZlbnQsIFRhbCBPcHBlbmhlaW1lciwgQ2hpZWYgUHJvZHVjdCBNYW5hZ2VyIChDaHJvbWUpIGF0IEdvb2dsZSwgc2hhcmVkIHRoYXQgd2Vic2l0ZXMgbGlrZSBFY29ub21pY1RpbWVzLmNvbSwgSW5zdGFncmFtIGFuZCBTdGFyYnVja3MgYXJlIHNlZWluZyBcImluY3JlZGlibGUgcmVzdWx0c1wiIGluIHVzZXIgcmV0ZW50aW9uIGFuZCB0aW1lIHNwZW50LCB3aGlsZSB1c2luZyBQcm9ncmVzc2l2ZSBXZWIgQXBwcyAoUFdBcykgdGVjaG5vbG9neS5cclxuPGJyIC8+XHJcblBXQXMgYXJlIHdlYnNpdGVzIHRoYXQgdGFrZSBhZHZhbnRhZ2Ugb2YgbW9kZXJuIHdlYiBwbGF0Zm9ybSBBcHBsaWNhdGlvbiBQcm9ncmFtbWluZyBJbnRlcmZhY2VzIChBUElzKSB0byBidWlsZCBleHBlcmllbmNlcyBsaWtlIHdvcmtpbmcgb2ZmbGluZSwgc2VuZGluZyBwdXNoIG5vdGlmaWNhdGlvbnMgYW5kIGdldHRpbmcgYWRkZWQgZGlyZWN0bHkgdG8gLi4gXHJcbiAgPC9wPlxyXG4gIDxwPldlYiBhcHBzIHVzZSB0aGUgYnJvd3NlciBmb3Igdmlld2luZyBhbmQgc2VjdXJpdHksIHdoaWxlIHRoZSBhcHAncyBcIm1hbmlmZXN0XCIgdXNlcyA8aT5zZXJ2aWNlIHdvcmtlcnM8L2k+IHRvIG1hbmFnZSBkYXRhLCBuZXR3b3JraW5nLCBjYWNoaW5nIG9wdGltaXplZCBmb3Igb2ZmLWxpbmUgYWJpbGl0eSBhbmQgb3RoZXIgYWN0aW9ucyB0aGF0IHdlcmUgZm9ybWFsbHkgcmVzZXJ2ZWQgZm9yIFwiTmF0aXZlXCIgYXBwcyBkb3dubG9hZGVkIGZyb20gQXBwbGUgb3IgIEdvb2dsZSBQbGF5IHN0b3Jlcy4gU28gd2hhdCB0aGUgZmxpcD8gSXQgZG9lcyBtZWFuIGJldHRlciBzcGVlZCBhbmQgdXRpbGl0eSwgZmVhdHVyZXMgYW5kIGFwcGVhcmFuY2Ugb3B0aW1pemVkIHRvIGRldmljZSwgd2hldGhlciBtb2JpbGUsIGxhcHRvcCBvciB0YWJsZXQsIGFsbCB3aXRob3V0IHNhY3JpZmljaW5nIHRoZSBwZXJzb25hbGl6ZWQsIG9mZi1saW5lIGZlYXR1cmVzIG9mIFwibmF0aXZlXCIgYXBwIHN0b3JlIGFwcHM/IC4uLiBpdCdzIHRoZSBiZXN0IG9mIGJvdGggd29ybGRzISA8L3A+XHJcbiAgXHJcblxyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlNyA9IGAgIDxwIGNsYXNzPVwiY2l0ZVwiPjxhIGhyZWY9XCJodHRwczovL3d3dy5jbmV0LmNvbS9uZXdzLzUtYmVzdC10aGluZ3MtZnJvbS1nb29nbGUtaW8tMjAxOC9cIiB0YXJnZXQ9XCJfYmxhbmtcIiA+aHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy81LWJlc3QtdGhpbmdzLWZyb20tZ29vZ2xlLWlvLTIwMTgvPC9hPjwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiZWNvbm9taWN0aW1lcy5pbmRpYXRpbWVzLmNvbS9hcnRpY2xlc2hvdy82NDA4OTM2NS5jbXM/dXRtX3NvdXJjZT1jb250ZW50b2ZpbnRlcmVzdCZ1dG1fbWVkaXVtPXRleHQmdXRtX2NhbXBhaWduPWNwcHN0XCIgdGFyZ2V0PVwiX2JsYW5rXCIgPmVjb25vbWljdGltZXMuaW5kaWF0aW1lcy5jb20vYXJ0aWNsZXNob3cvNjQwODkzNjUuY21zP3V0bV9zb3VyY2U9Y29udGVudG9maW50ZXJlc3QmdXRtX21lZGl1bT10ZXh0JnV0bV9jYW1wYWlnbj1jcHBzdDwvYT48L3A+YDtcclxuICBcclxuICB2YXIgYmxvZ3Bvc3Q2ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5PLksuIEdvb2dsZSwgSSdsbCBwYXNzIG9uIHRoZSBsZW1vbmFkZSwgYW5kIC4uLiB3aHkgZG9uJ3QgeW91IHRha2UgdGhlIGFmdGVybm9vbiBvZmYsIEknbSBnb2luZyB0byBiZSBpbmRlcGVuZGVudCBmb3IgYSB3aGlsZSwgXCJhZ2FpblwiLiBBbGFzLCB3ZSBhcmUgZ2V0dGluZyBzb21lIGludGVyZXN0aW5nLCBpZiBub3Qgc2xpZ2h0bHkgd2VpcmQsIGZlYXR1cmVzIGZyb20gdGhpcyB3ZWVrJ3MgR29vZ2xlIEkvTyAyMDE4IERldmVsb3BlciBDb25mZXJlbmNlLjxzdXA+MTwvc3VwPiAgU28sIHdvbmRlcmZ1bCBuZXdzISBJJ20gc28gdGlyZWQgZnJvbSBwaWNraW5nIHVwIG15IHBob25lIHRvIG9yZGVyIG15IHRha2Utb3V0LCBub3cgbXkgR29vZ2xlIEFzc2lzdGFudCBjYW4ganVzdCBkbyBhbGwgdGhhdCBoYXJkIHdvcmsgZm9yIG1lIVxyXG4gIDwvcD48cD5UaGlzIHdlZWsncyByZXZlbGF0aW9ucyBmcm9tIEdvb2dsZSdzIEkvMCAyMDE4IG9mZmVyIEEuSS4tZm9jdXNlZCBuZXcgaGFyZHdhcmUgZmVhdHVyZXMsIHlldCBBLkkuIHN0b2xlIHRoZSBzaG93LiBUaGUgYmV0dGVyIGludGVncmF0aW9uIG9mIEdvb2dsZSdzIGFzc2lzdGFudCA8aT53aXRoIGNvbnRhY3RzIGFuZCBjYWxsaW5nPC9pPiBpcyBleWVicm93LXJhaXNpbmc6PC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgZGVtbyBpcyBwYXJ0IG9mIHdoYXQgR29vZ2xlIGNhbGxzIGFuIFwiZXhwZXJpbWVudFwiIGl0IHBsYW5zIHRvIGxhdW5jaCB0aGlzIHN1bW1lci4gV2l0aCBEdXBsZXgsIGEgXCJzbWFsbFwiIG51bWJlciBvZiBwZW9wbGUgd2lsbCBiZSBhYmxlIHRvIGJvb2sgcmVzdGF1cmFudCByZXNlcnZhdGlvbnMgYW5kIGhhaXIgYXBwb2ludG1lbnRzIGFuZCB0byBjaGVjayBob2xpZGF5IGhvdXJzLCBzdHVmZiB5b3UnZCBub3JtYWxseSBkbyBvdmVyIHRoZSBwaG9uZS4gQWxsIG9mIHRoYXQgYmFjayBhbmQgZm9ydGggaGFwcGVucyBvbiB0aGUgYmFjayBlbmQgLS0gYmV0d2VlbiBHb29nbGUgQXNzaXN0YW50IGFuZCwgc2F5LCB0aGUgcmVzdGF1cmFudC4gWW91IHdvbid0IGV2ZW4gaGVhciB0aGUgY29udmVyc2F0aW9uIHRha2luZyBwbGFjZS4gSXQnbGwgY29tZSBmcm9tIGFuIHVuc3BlY2lmaWVkIHBob25lIG51bWJlciwgbm90IHlvdXIgb3duIG51bWJlci48c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+VGhlIGZlYXR1cmUgcmFpc2VzIHRoZSBxdWVzdGlvbiBvZiBhZHZhbnRhZ2Ugb3ZlciBTaXJpIGFuZCBBbGV4YS4uLiBBbHRob3VnaCBhY2Nlc3MgdG8gdGhlIEdvb2dsZS1taW51dGlhZSBvZiBvdXIgcGVyc29uYWwgaW5mb3JtYXRpb24gKGRhdGEgdGhhbmtmdWxseSB3ZSBhcmUgbm93IG1vcmUgZW1wb3dlcmVkIHRvIGRvd25sb2FkIGFuZCBldmVuIGRlbGV0ZSkgYmVncyB0aGUgcXVlc3Rpb24gb2YgaW5kaXZpZHVhbHMnIG1hY2hpbmVzIHRoYXQgdGFsayBkaXJlY3RseSB0byB0aGUgcmVzdGF1cmFudCdzIHZvaWNlLWFjdGl2YXRlZCByZWNlcHRpb25pc3QgKHBlcmhhcHMgYSBmcmVuY2ggYWNjZW50PykgbWFjaGluZS4gSSdtIGFsbCBmb3IgZWZmaWNpZW5jeSBhbmQgYmV0dGVyIG9yZ2FuaXphdGlvbiwgYnV0IEknZCBoYXJkbHkgaW1hZ2luZSBiZWluZyB0b28gYnVzeSB0byBwbGFjZSBhIGNhbGwgbXlzZWxmISBcclxuICA8L3A+XHJcblxyXG4gXHJcbiAgYDtcclxuICB2YXIgYmxvZ2NpdGU2ID0gYCAgPHA+XHJcbiAgYWxzbyBqdXN0IG1lYW4gZGlmZmVyZW50IGFzc2lzdGFudHMgZm9yIGRpZmZlcmVudCBwYXJ0cyBvZiBvdXIgZGF5ITwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vZmVhdHVyZXMvZ29vZ2xlLWFzc2lzdGFudC1kdXBsZXgtYXQtaW8tY291bGQtYmVjb21lLXRoZS1tb3N0LWxpZmVsaWtlLWFpLXZvaWNlLWFzc2lzdGFudC15ZXQvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25ldC5jb20vZmVhdHVyZXMvZ29vZ2xlLWFzc2lzdGFudC1kdXBsZXgtYXQtaW8tY291bGQtYmVjb21lLXRoZS1tb3N0LWxpZmVsaWtlLWFpLXZvaWNlLWFzc2lzdGFudC15ZXQvIDwvYT48L3A+XHJcbiA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGVjaHJhZGFyLmNvbS9uZXdzL2dvb2dsZS1pby0yMDE4XCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGVjaHJhZGFyLmNvbS9uZXdzL2dvb2dsZS1pby0yMDE4PC9hPjwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9ncG9zdDUgPSAgYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DaGFsbGVuZ2VzIHRvIHRoZSBIYXNoZ3JhcGggcmFuZ2UgZnJvbSBtYXRoZW1hdGljYWwgcHJvcGVydGllcyBvZiBhY3ljbGljIGdyYXBocyAodGhpbmsgb2YgdGhlIDcgQnJpZGdlcyBvZiBLb2VuaWdzYnVyZywgdGhlIHJpZGRsZSBvZiBjcm9zc2luZyB0b3duIHdoaWxlIGNyb3NzaW5nIGVhY2ggYnJpZGdlIGV4YWN0bHkgb25jZSkgdG8gdGhlIHNvY2lhbCBpbXBsaWNhdGlvbnMgb2YgaG93IHRvIFwiZGlzdHJpYnV0ZVwiIGRhdGEgYW5kIDxpPndobyBhY3R1YWxseSBob2xkcyBvbnRvIHRoZSBrZXlzIGF0IHRoZSBlbmQgb2YgdGhlIGRheS4gIDwvaT5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPldoaWxlIEdyaWRBZ2VudHPihKIgYW5kIGluIGdlbmVyYWwgbXVsdGktYWdlbnQgc3lzdGVtcyAoTUFTKSBvZmZlcmVkIHN0cm9uZyBtb2RlbHMgZm9yIHJlcHJlc2VudGluZyBjb21wbGV4IGFuZCBkeW5hbWljIHJlYWwtd29ybGQgZW52aXJvbm1lbnRzLCB3ZSB3ZXJlIG1pc3Npbmcgc29tZXRoaW5nIHZlcnkgaW1wb3J0YW50IHRoYXQgaXMgYmVjb21pbmcgYXZhaWxhYmxlIHRvZGF5IHdpdGggYmxvY2tjaGFpbiBhbmQgZGlzdHJpYnV0ZWQgbGVkZ2VyIHRlY2hub2xvZ2llcy4gVGhlIG1pc3NpbmcgbGlua3MgaW5jbHVkZSAoMSkgY29uc2Vuc3VzLCAoMikgaW1tdXRhYmlsaXR5IGFuZCAoMykgYWJpbGl0eSB0byBvcGVyYXRlIGluIHRydXN0bGVzcyBlbnZpcm9ubWVudHMuIERyLiBNYXhpbSBPcmxvdnNreSBzdGF0ZXM6XHJcblxyXG4gIOKAnEJsb2NrY2hhaW4gd2lsbCBnaXZlIHRvIE11bHRpLUFnZW50IEFJ4oCK4oCU4oCKdGhlIHNhbWUgdGhpbmcgdGhhdCB3cml0dGVuIGxhbmd1YWdlIGdhdmUgdG8gaHVtYW5z4oCK4oCU4oCKTWVhbnMgb2YgQ29nbml0aXZlIEV2b2x1dGlvbuKAnVxyXG4gIFxyXG4gIE1heGltIGFsc28gc3RhdGVzIHRoYXQgd2hhdCBibG9ja2NoYWluIGJyaW5ncyB0byBtdWx0aS1hZ2VudCBzeXN0ZW1zIGlzIGNvbnNlbnN1cyBhbGdvcml0aG1zIGZvciBpbnRlcnByZXRpbmcgZmFjdHMgaW4gYSB0cnVzdGxlc3MgbXVsdGktYWdlbnQgc3lzdGVtLiBDb25zZW5zdXMgYWxsb3dzIGZvciBub2RlcyBpbiB0aGUgc3lzdGVtIHRvIGJlIGluIHVuYW5pbW91cyBhZ3JlZW1lbnQgb24gdGhlIHN0YXRlIG9mIHRoaW5ncy4gQWRkaXRpb25hbGx5LCBibG9ja2NoYWluIGNyZWF0ZXMgYSBwZXJtYW5lbnQgbWVtb3J5IChpbW11dGFiaWxpdHkpIG1ha2luZyB0aGUgdmlzaW9uIG9mIG11bHRpLWFnZW50IHN5c3RlbXMgbXVjaCBtb3JlIGNvbXBsZXRlLiBJIGNhbGwgdGhlIGFkZGl0aW9uIG9mIGJsb2NrY2hhaW4vRExUcyB0byBtdWx0aS1hZ2VudHMgc3lzdGVtLCBBSSAzLjAuIFRoaXMgQUkgMy4wIGNvbWJpbmVzIHRoZSBiZW5lZml0cyBvZiBvdmVyIDMwIHllYXJzIG9mIHJlc2VhcmNoIG9uIEFJLCBtYWNoaW5lIGxlYXJuaW5nLCBhbmQgbXVsdGktYWdlbnQgc3lzdGVtcyB3aXRoIGJsb2NrY2hhaW4gYW5kIERMVCB0ZWNobm9sb2d5IHRvIGZpbmFsbHkgZW5hYmxlIHRoZSBlbWVyZ2luZyBpbmR1c3RyeSA0LjAgd2hlcmUgYmlsbGlvbnMgb2YgZGV2aWNlcyB3aWxsIGJlIGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXQgYW5kIHdpbGwgbmVlZCB0byBjb29yZGluYXRlIGluIHJlYWwtdGltZSBhdCB0aGUgZWRnZSBvZiB0aGUgbmV0d29yay48c3VwPjM8L3N1cD4gPC9wPlxyXG5cclxuXHJcblxyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlNSAgPSBgICA8cCBjbGFzcz1cImNpdGVcIj4xLiAgPGEgaHJlZj1cIiAgICAgIGh0dHBzOi8vc2NpZW5jZS5ob3VzZS5nb3YvbGVnaXNsYXRpb24vaGVhcmluZ3Mvc3ViY29tbWl0dGVlLW92ZXJzaWdodC1hbmQtc3ViY29tbWl0dGVlLXJlc2VhcmNoLWFuZC10ZWNobm9sb2d5LWhlYXJpbmctMFwiIHRhcmdldD1cIl9ibGFua1wiPiAgIGh0dHBzOi8vc2NpZW5jZS5ob3VzZS5nb3YvbGVnaXNsYXRpb24vaGVhcmluZ3Mvc3ViY29tbWl0dGVlLW92ZXJzaWdodC1hbmQtc3ViY29tbWl0dGVlLXJlc2VhcmNoLWFuZC10ZWNobm9sb2d5LWhlYXJpbmctMDwvYT48L3A+ICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yLiAgPGEgaHJlZj1cIiAgICBodHRwczovL3ZlbnR1cmViZWF0LmNvbS8yMDE4LzAzLzEzL2hlZGVyYS1oYXNoZ3JhcGgtYW5kLW16LXVudmVpbC1uZXh0LWdlbmVyYXRpb24tYmxvY2tjaGFpbi1hbHRlcm5hdGl2ZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj4gICAgaHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAxOC8wMy8xMy9oZWRlcmEtaGFzaGdyYXBoLWFuZC1tei11bnZlaWwtbmV4dC1nZW5lcmF0aW9uLWJsb2NrY2hhaW4tYWx0ZXJuYXRpdmUvPC9hPjwvcD4gIFxyXG4gPHAgY2xhc3M9XCJjaXRlXCI+My4gIDxhIGhyZWY9XCIgaHR0cHM6Ly9tZWRpdW0uY29tL2hhc2hncmFwaC9haS0zLTAtd2h5LWhhc2hncmFwaC1hbmQtaG93LWl0LXdpbGwtcmV2b2x1dGlvbml6ZS1ibG9ja2NoYWluLWFuZC1haS04NmE2ZWY3MTVjOWZcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL21lZGl1bS5jb20vaGFzaGdyYXBoL2FpLTMtMC13aHktaGFzaGdyYXBoLWFuZC1ob3ctaXQtd2lsbC1yZXZvbHV0aW9uaXplLWJsb2NrY2hhaW4tYW5kLWFpLTg2YTZlZjcxNWM5ZjwvYT48L3A+IGA7XHJcbiBcclxuICB2YXIgYmxvZ3Bvc3Q0ID0gIGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QmxvY2tjaGFpbiBjaGFsbGVuZ2VzLCBsaWtlIGFueSBmaWVsZCwgc3RhcnQgd2l0aCBzb2NpYWwgYWNjZXB0YW5jZSBvbiBvbmUgZW5kLCBhbmQgdGVjaG5pY2FsIGFjY2VwdGFuY2Ugb24gdGhlIG90aGVyLiBUaGUgbGF0dGVyIGlzIGEgbGl0dGxlIG1vcmUgaW1wb3J0YW50LCBidXQgdGhlIGZvcm1lciB1c3VhbGx5IHJ1bnMgdGhlIHNob3cgYmVjYXVzZSA8aT5pdCwgZmluYW5jaWFsbHkgc3BlYWtpbmcsIDxzdHJvbmc+IGlzPC9zdHJvbmc+IHRoZSBzaG93PC9pPi4gSSBtZW50aW9uZWQgdGhlIGN1cnZlXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5GaXJzdCwgYmxvY2tjaGFpbiBiZW5lZml0cyBmcm9tIGluY3VtYmVuY3kgYW5kIGZhbWlsaWFyaXR5LiBXaHkgcmlzayByZXBsYWNpbmcgaXQgd2l0aCBhIGxlc3Mgd2VsbC10ZXN0ZWQgdGVjaG5vbG9neSB3aG9zZSB2dWxuZXJhYmlsaXRpZXMgaGF2ZW7igJl0IGFsbCBiZWVuIGlkZW50aWZpZWQ/IEFsc28sIHdoaWxlIGl0IGNhbiByZXRhaW4gYXMgbXVjaCB0cmFuc2FjdGlvbmFsIGRhdGEgYXMgbmVlZGVkLCBoYXNoZ3JhcGggdHlwaWNhbGx5IGRvZXNu4oCZdCBjb250YWluIGFzIG11Y2ggdHJhbnNhY3Rpb25hbCBoaXN0b3J5IGFzIHRoZSBCaXRjb2luIGJsb2NrY2hhaW4gZG9lcy4gRm9yIG1hbnkgYXBwbGljYXRpb25zLCBoYXNoZ3JhcGggd291bGQgb25seSBrZWVwIHRyYWNrIG9mIHVzZXJz4oCZIGxhdGVzdCBwb3NpdGl2ZSB3YWxsZXQgYmFsYW5jZXMuXHJcblxyXG4gIFNlY29uZCwgdGhlIERBRyBzeXN0ZW0gZG9lc27igJl0IGludm9sdmUgdGhlIGNvbXB1dGF0aW9uLWhlYXZ5IOKAnHByb29mIG9mIHdvcmvigJ0gZWZmb3J0IHRvIHZlcmlmeSB0cmFuc2FjdGlvbnMgdGhhdCBzb21lIGJsb2NrY2hhaW5zLCBzdWNoIGFzIEJpdGNvaW4gYmxvY2tjaGFpbiwgcmVxdWlyZS4gSGF2aW5nIHNldmVyYWwgbWluZXJzIHJhdGlmeSBhbmQgdm90ZSB0byBhY2NlcHQgYSB0cmFuc2FjdGlvbiBsZW5kcyBibG9ja2NoYWluIHdoYXQgc29tZSBzYXkgaXMgYSBncmVhdGVyIGRlZ3JlZSBvZiBzZWN1cml0eSB0aGF0IHRoZSBsZWRnZXIgY29udGFpbnMgYSBzaW5nbGUgdmVyc2lvbiBvZiB0aGUgdHJ1dGggdGhhbiB1bmRlciBEQUctYmFzZWQgc3lzdGVtcy4gXHJcbiAgPGJyIC8+XHJcbiAgPGJyIC8+XHJcbiAgSU9UQSwgdGhlIGJlc3Qta25vd24gREFHLCBpcyBhbHJlYWR5IHRoZSBOby4gMTAgbGFyZ2VzdCBjcnlwdG9jdXJyZW5jeSwgd2l0aCAkNi42IGJpbGxpb24gaW4gbWFya2V0IGNhcGl0YWxpemF0aW9uLCBhY2NvcmRpbmcgdG8gQ29pbk1hcmtldENhcC4gXHJcbiAgXHJcbiAg4oCcRXZlbiBmaXJzdC15ZWFyIGNvbXB1dGVyIHNjaWVuY2Ugc3R1ZGVudHMgaGVyZSBhdCBNSVQgbGF1Z2ggYXQgdGhlIGNvZGUgd2hlbiB0aGV5IHNlZSBpdCzigJ0gVGFkZ2UgRHJ5amEsIGEgcmVzZWFyY2ggc2NpZW50aXN0IGF0IE1JVCB3aG8gaXMgd29ya2luZyB0byBzY2FsZSB0aGUgQml0Y29pbiBuZXR3b3JrLCBzYWlkIGluIGFuIGVtYWlsLiBcclxuICBcclxuICBUaGUgaGFjayBNSVQgY2FtZSB1cCB3aXRoIOKAnGNhbuKAmXQgaGFwcGVuIGluIHByYWN0aWNlLOKAnSBTZXJndWVpIFBvcG92LCBvbmUgb2YgdGhlIGZvdW5kZXJzIG9mIElPVEEsIHNhaWQgaW4gYSBwaG9uZSBpbnRlcnZpZXcuXHJcbiAgXHJcbiAgXHJcbkhhc2hncmFwaCB1c2VzIERBRyBkaWZmZXJlbnRseTogSXQgdXNlcyBpdCB0byByZWNvcmQgZGlmZmVyZW50IGFzcGVjdHMgb2YgdHJhbnNhY3Rpb25zIHRoYW4gSU9UQSwgYW5kIGhhcyBkaWZmZXJlbnQgc2VjdXJpdHkgY2hhcmFjdGVyaXN0aWNzLCBhY2NvcmRpbmcgdG8gaGFzaGdyYXBoIGRldmVsb3BlcnMuXHJcbjxzdXA+MTwvc3VwPlxyXG4gICBcclxuXHJcblxyXG5cclxuICBgO1xyXG4gIHZhciBibG9nY2l0ZTQgPSBgICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gQ29pbkRlc2sgU291cmNlIFVSTCBiZWluZyByZXNlYXJjaGVkLiA8YSBocmVmPVwiI1wiIHRhcmdldD1cIl9ibGFua1wiPl9fPC9hPjwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9ncG9zdDMgPSAgYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGUgbGVzc29ucyBsZWFybmVkIGZyb20gbGFzdCB3ZWVrJ3MgUm9tYWluZSBMZXR0dWNlIENyaXNpcyBoYXMgYnJvdWdodCB0aGUgPGk+c3VwcGx5IGNoYWluIG1hbmFnZW1lbnQ8L2k+IHRvcGljIHRvIHRoZSBuYXRpb24ncyBkaW5uZXItdGFibGUgY29udmVyc2F0aW9ucy4gXHJcbiAgKFF1aWNrIHJlY2FwIGluIG15IDxhIGhyZWY9XCIjMTgtMDQtMjVcIj5BcHJpbCAyNXRoIHBvc3Q8L2E+KS4gVGhlIGJpZyBpc3N1ZSBpcyB1bmludGVycnVwdGVkLCBjb21wcmVoZW5zaXZlIGFuZCBwZXJtaXNzaW9uZWQgZGF0YSBhY2Nlc3MgdG8gdGhvc2UgLi4uIG15c3RlcnkgUm9tYWluZSBsZXR0dWNlIGhlYWRzLiBXaGF0IGNvdWxkIGhhc2hncmFwaCB0ZWNoIG9mZmVyPyBFdmVyeXRoaW5nIGZyb20gcmVhbC10aW1lIHRlbXBlcmF0dXJlIHNlbnNvcnMgYW5kIElEJ3MgdG8gY3Jvc3MtaW5zdGl0dXRpb24sIGNyb3NzLWJvcmRlciBhY2N1cmFjeSBmcm9tIHNvdXJjZSB0byBzdXBwbHkgdGFyZ2V0cy4gQW5kLCBuZXh0IHdlZWsgQ29uZ3Jlc3Mgd2lsbCBhbHNvIGJlIHRhbGtpbmcgYWJvdXQgaXQ6ICBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIExhd21ha2VycyBpbiB0aGUgVS5TLiBDb25ncmVzcyBhcmUgc2V0IHRvIGhvbGQgYSBoZWFyaW5nIG9uIGJsb2NrY2hhaW4gdGVjaCdzIHVzZSBpbiBnbG9iYWwgc3VwcGx5IGNoYWlucyBuZXh0IHdlZWsuXHJcblxyXG5Ud28gc3ViY29tbWl0dGVlcyBvZiB0aGUgVS5TLiBIb3VzZSBDb21taXR0ZWUgb24gU2NpZW5jZSwgU3BhY2UgYW5kIFRlY2hub2xvZ3kgLSBmb3IgUmVzZWFyY2ggYW5kIFRlY2hub2xvZ3ksIGFuZCBPdmVyc2lnaHQgLSB3aWxsIG1lZXQgb24gTWF5IDgsIGEgbmV3bHkgcHVibGlzaGVkIG5vdGljZSByZXZlYWxzLiBUaGUgaGVhcmluZyBpcyBlbnRpdGxlZCBcIkxldmVyYWdpbmcgQmxvY2tjaGFpbiBUZWNobm9sb2d5IHRvIEltcHJvdmUgU3VwcGx5IENoYWluIE1hbmFnZW1lbnQgYW5kIENvbWJhdCBDb3VudGVyZmVpdCBHb29kcy5cIjxzdXA+MTwvc3VwPlxyXG48L3A+XHJcbjxwPkhlcmUsIHRoZSBTY2llbmNlLCBTcGFjZSwgJiBUZWNobm9sb2d5IENvbW1pdHRlZSA8c3VwPjI8L3N1cD4gb2YgQ29uZ3Jlc3Mgd2lsbCBiZSBtZWV0aW5nIFRoaXMgVHVlc2RheSwgTWF5IDh0aCwgaGVhcmluZyBmcm9tIFdpdG5lc3NlcyBmcm9tIE1hZXJzayAoaGVhZCBvZiBnbG9iYWwgdHJhZGUgZGlnaXRpemF0aW9uKSwgVVBTIChnbG9iYWwgY3VzdG9tcyBicm9rZXJhZ2Ugc3RhZmYpLCBhbmQgb2YgY291cnNlIHRoZSBnb29kIG9sJyBEZXB0LiBvZiBIb21lbGFuZCBTZWN1cml0eSwgYW5kIGRvdWJ0bGVzcyBhbiBpbnRlcm5hdGlvbmFsPHN1cD4zPC9zdXA+IHBsYXRvb24gb2YgbGF3eWVycyEgPC9wPlxyXG5cclxuICBcclxuICBgO1xyXG4gIHZhciBibG9nY2l0ZTMgPSBgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy5jb2luZGVzay5jb20vdXMtbGF3bWFrZXJzLWhlYXItY2FzZS1ibG9ja2NoYWluLXN1cHBseS1jaGFpbi9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jb2luZGVzay5jb20vdXMtbGF3bWFrZXJzLWhlYXItY2FzZS1ibG9ja2NoYWluLXN1cHBseS1jaGFpbi88L2E+PC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3NjaWVuY2UuaG91c2UuZ292L2xlZ2lzbGF0aW9uL2hlYXJpbmdzL3N1YmNvbW1pdHRlZS1vdmVyc2lnaHQtYW5kLXN1YmNvbW1pdHRlZS1yZXNlYXJjaC1hbmQtdGVjaG5vbG9neS1oZWFyaW5nLTBcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3NjaWVuY2UuaG91c2UuZ292L2xlZ2lzbGF0aW9uL2hlYXJpbmdzL3N1YmNvbW1pdHRlZS1vdmVyc2lnaHQtYW5kLXN1YmNvbW1pdHRlZS1yZXNlYXJjaC1hbmQtdGVjaG5vbG9neS1oZWFyaW5nLTA8L2E+PC9wPiBcclxuICAgPHAgY2xhc3M9XCJjaXRlXCI+My4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm1ja2luc2V5LmNvbS9pbmR1c3RyaWVzL2ZpbmFuY2lhbC1zZXJ2aWNlcy9vdXItaW5zaWdodHMvZ2xvYmFsLXBheW1lbnRzLTIwMTctYW1pZC1yYXBpZC1jaGFuZ2UtYW4tdXB3YXJkLXRyYWplY3RvcnlcIj5odHRwczovL3d3dy5tY2tpbnNleS5jb20vaW5kdXN0cmllcy9maW5hbmNpYWwtc2VydmljZXMvb3VyLWluc2lnaHRzL2dsb2JhbC1wYXltZW50cy0yMDE3LWFtaWQtcmFwaWQtY2hhbmdlLWFuLXVwd2FyZC10cmFqZWN0b3J5PC9hPjwvcD4gYDtcclxuICBcclxudmFyIGJsb2dwb3N0MiA9ICBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRoZSBtb3N0IHBvbGlzaGVkLCBjcnlwdG9ncmFwaGljYWxseSBzdGFibGUgbGVhZGVyIG9mICA8aT50aGlyZCBnZW5lcmF0aW9uPC9pPiBibG9ja2NoYWluIHRlY2hub2xvZ3kgaXMgZm9ybWFsbHkgcmVsZWFzZWQgdGhpcyBtb250aCwgYW5kIGFudGljaXBhdGlvbiBpcyBhbnl0aGluZyBidXQgY2FsbS4gKFNvbWUgYmFja2dyb3VuZCBwb3N0cyBoZWxwIGNvbnRleHR1YWxpemUgdGhpcyAyLXBhcnQgc2VyaWVzIG9uIEhhc2hncmFwaCAgdGVjaG5vbG9neSBhbmQgcG90ZW50aWFsIGZvciBjYXB0dXJpbmcgcGVyLW1pY3JvLXNlY29uZCwgcmVhbC10aW1lIGZpbmFuY2lhbCBuZWVkcyBvZiB0aGUgZ2xvYmFsaXppbmcgZWNvbm9teTogPGEgaHJlZj1cIiMxOC0wNC0xOFwiPiBBcHJpbCAxODwvYT4gYW5kIDxhIGhyZWY9XCIjMTgtMDQtMDJcIj5BcHJpbCAyPC9hPi4pIFRoZSBmb3JtYWwgcmVsZWFzZSBpcyBvbiBNYXkgOXRoLCBidXQgdGhpcyBNYXkgMXN0IHByZXNzIHJlbGVhc2UgY2F1Z2h0IG15IGF0dGVudGlvbiBhcyB3ZSBzZWUgYSBnbGltcHNlIG9mIHRoaXMgdGVjaG5vbG9neSBvbiBhIHB1YmxpYyogbGVkZ2VyOiBcclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+IENVTGVkZ2VyIGFuZCBIZWRlcmEgdG9kYXkgYW5ub3VuY2VkIGEgcGFydG5lcnNoaXAgd2hlcmVieSBDVUxlZGdlciB3aWxsIHVzZSBIZWRlcmEncyBoYXNoZ3JhcGggcGxhdGZvcm0gYW5kIHB1YmxpYyBsZWRnZXIgdG8gYnVpbGQgYSBzeXN0ZW0gZm9yIGNyb3NzLWJvcmRlciBwYXltZW50cy4gQ1VMZWRnZXIgaGFzIGFscmVhZHkgYmVlbiB1c2luZyB0aGUgcHJpdmF0ZSBsZWRnZXIgdmVyc2lvbiBvZiBoYXNoZ3JhcGgsIG9mZmVyZWQgYnkgU3dpcmxkcywgZm9yIGdlbmVyYWwgcHVycG9zZSwgcGVybWlzc2lvbmVkIGxlZGdlciB1c2UuPHN1cD4xPC9zdXA+IDwvcD5cclxuPHA+VGhlIGJpZyBuZXdzIGlzIEhlZGVyYSdzIFwicHVibGljXCIgYmxvY2tjaGFpbiBsZWRnZXIgc2VydmljZSB0aGF0IG1vdmVzIGNsb3NlciB0byBwb3B1bGFyIHVzYWdlIHdpdGggaXQncyB1bmlxdWUgPGk+ZGlyZWN0ZWQgYWN5Y2xpYyBncmFwaHM8L2k+LCB3aG9zZSBzcGVlZCBpbmNyZWFzZXMgd2l0aCBzY2FsZS4gIFVudGlsIHJlY2VudGx5LCBCbG9ja2NoYWluIHRlY2ggaGFzIGJlZW4gaGFtc3RydW5nIGluIHRoZSBkb21haW4gb2YgbWljcm8tdHJhbnNhY3Rpb25zLCBzbyBub3cgdGhhdCB0aGUgYmFycmllciBoYXMgYmVlbiBjcm9zc2VkLCBob3cgbWFueSBzZWN0b3JzIG9mIGxpZmUgd2lsbCBiZSBlbmhhbmNlZD8gQWxsLiBCdXQgbm90IHlldC4gT25jZSA1RyB0ZWNobm9sb2d5ICgxMDAgdGltZXMgZmFzdGVyLCAxMDAgdGltZXMgdGhlIGNhcGFjaXR5IG9mIDRHKSBpcyByb2xsZWQgb3V0LCB0aGVuIHdlIGhpdCB0aGUgYmlnIGxlYWd1ZXMuPC9wPiBcclxuPHAgY2xhc3M9XCJxdW90ZVwiPkEgZ3JvdXAgb2YgVS5TLiBjcmVkaXQgdW5pb25zIGxvb2tpbmcgdG8gcG9vbCByZXNvdXJjZXMgY29uc2lkZXJlZCB0aGUgQml0Y29pbiBhbmQgRXRoZXJldW0gYmxvY2tjaGFpbnMgdG8gdHJhY2sgdGhlaXIgYnVzaW5lc3MsIGJ1dCB3b3VuZCB1cCBzZWxlY3Rpbmcgc29tZXRoaW5nIGVsc2UgZW50aXJlbHk6IGhhc2hncmFwaC48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5DdXJyZW50bHksIGNyb3NzLWJvcmRlciBwYXltZW50cyBhcmUgcGFpbmZ1bCBmb3IgYWxsIHBhcnRpZXMgaW52b2x2ZWQsXCIgc2FpZCBSaWNrIENyYW5zdG9uLCBDT08gb2YgQ1VMZWRnZXIuIFwiVGhleSB0YWtlIHRpbWUsIHRoZXkncmUgZXhwZW5zaXZlLCBhbmQgdGhlcmUgaXMgbGltaXRlZCB2aXNpYmlsaXR5IGludG8gdGhlIHRyYW5zYWN0aW9uLiBIYXNoZ3JhcGggaXMgZmFzdCBhbmQgaXQgcHJvdmlkZXMgdmlzaWJpbGl0eSBiZXR3ZWVuIHRoZSB0d28gcGFydGllcyBhdCBhIHNpZ25pZmljYW50bHkgbG93ZXIgY29zdC4gSXQgYWxzbyBlbGltaW5hdGVzIGNvbmNlcm5zIHJlZ2FyZGluZyBmcmF1ZCBhbmQgZGVmYXVsdCwgc2luY2UgdHJhbnNhY3Rpb25zIGFyZSByZWNvcmRlZCBpbW11dGFibHkgb24gdGhlIHB1YmxpYyBsZWRnZXIsIGFuZCBtYW51YWwgcHJvY2Vzc2VzLCBzaW5jZSB0cmFuc2FjdGlvbnMgYXJlIGF1dG9tYXRlZCB2aWEgc21hcnQgY29udHJhY3RzLjxzdXA+MTwvc3VwPjwvcD5cclxuPHA+IC4uLnRvIGJlIGNvbnRpbnVlZC4uLjwvcD4gXHJcblxyXG5gO1xyXG52YXIgYmxvZ2NpdGUyID0gYDxwIGNsYXNzPVwiY2l0ZVwiPjxhIGhyZWY9XCJodHRwczovL3d3dy5wcm5ld3N3aXJlLmNvbS9uZXdzLXJlbGVhc2VzL2N1bGVkZ2VyLXNlbGVjdHMtaGVkZXJhLWhhc2hncmFwaC10by1idWlsZC1nbG9iYWwtbGVkZ2VyLWZvci1jcm9zcy1ib3JkZXItcGF5bWVudHMtMzAwNjM5ODc0Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5wcm5ld3N3aXJlLmNvbS9uZXdzLXJlbGVhc2VzL2N1bGVkZ2VyLXNlbGVjdHMtaGVkZXJhLWhhc2hncmFwaC10by1idWlsZC1nbG9iYWwtbGVkZ2VyLWZvci1jcm9zcy1ib3JkZXItcGF5bWVudHMtMzAwNjM5ODc0Lmh0bWw8L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAxOC8wMy8xMy9oZWRlcmEtaGFzaGdyYXBoLWFuZC1tei11bnZlaWwtbmV4dC1nZW5lcmF0aW9uLWJsb2NrY2hhaW4tYWx0ZXJuYXRpdmUvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly92ZW50dXJlYmVhdC5jb20vMjAxOC8wMy8xMy9oZWRlcmEtaGFzaGdyYXBoLWFuZC1tei11bnZlaWwtbmV4dC1nZW5lcmF0aW9uLWJsb2NrY2hhaW4tYWx0ZXJuYXRpdmUvPC9hPjwvcD5cclxuXHJcbjxwIGNsYXNzPVwiY2l0ZVwiPjxhIGhyZWY9XCJodHRwczovL21lZGl1bS5jb20vaGFzaGdyYXBoL2FpLTMtMC13aHktaGFzaGdyYXBoLWFuZC1ob3ctaXQtd2lsbC1yZXZvbHV0aW9uaXplLWJsb2NrY2hhaW4tYW5kLWFpLTg2YTZlZjcxNWM5ZlwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vbWVkaXVtLmNvbS9oYXNoZ3JhcGgvYWktMy0wLXdoeS1oYXNoZ3JhcGgtYW5kLWhvdy1pdC13aWxsLXJldm9sdXRpb25pemUtYmxvY2tjaGFpbi1hbmQtYWktODZhNmVmNzE1YzlmPC9hPjwvcD5gO1xyXG5cclxudmFyIGJsb2dwb3N0MSA9ICBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPk1heS4gU3ByaW5nLiBFeGVyY2lzZS4gQWxsIHdvbmRlcmZ1bCB0aGluZ3MsIHJlYWNxdWFpbnRpbmcgd2l0aCBOYXR1cmUtLWlmIHdlIGNhbiBhbmQgPGk+aWYgd2UgbGV0IDxzdHJvbmc+VGVjaDwvc3Ryb25nPiBsZXQgb3Vyc2VsdmVzIG91dHNpZGU8L2k+OiBMZXQncyBmYWNlIGl0LCBzY3JlZW5zICBkb24ndCBtaXggd2VsbCB3aXRoIHRoZSBzdW4hIDw8L3A+XHJcbjxwPlJlY2VudGx5ICB0aG91Z2gsVGVjaCBtYWRlIGEgcmVhbCBjb21lYmFjayBpbiB0aGUgTW90aGVyIE5hdHVyZSBkZXBhcnRtZW50LCB0aGFua3MgdG8gdGhlIDIwMTYgUG9rJmVhY3V0ZTttb24gcmFnZSB0aGF0IGRyZXcgY3Jvd2RzIG91dCBpbiBkcm92ZXMgYW5kIGludG8gdGhlIHN0cmVldHMgYW5kIGhhcGhhemFyZCBwbGFjZXMgb3ZlciBjb3VudGxlc3MgbWlsZXMgd2Fsa2VkLiAgVGVjaG5vbG9neSwgYXQgbG9uZyBsYXN0IGFzc3VtZXMgYSBuZXcgcm9sZTo8aT4gYW4gZXZlciBkZWRpY2F0ZWQgYWN0aXZpdHkgY29hY2g8L2k+IEFjY29yZGluZyB0byA8aT5CZWhhdmlvcmFsaXN0IHBzeWNob2xvZ3k8L2k+LCB0aGUgYWN0aW9ucyBmcmFtZSB0aGUgc3RhdGUgb2YgbWluZCwgc28gaXQgb25seSBtYWtlcyBwZXJmZWN0IHNlbnNlIHRvIHNldCBvdXIgdGVjaCBkZXZpY2VzIHRvIHdoZXJlIHdlIHdhbnQgdG8gZ28hPC9wPlxyXG48cD5CdXQgPGk+c29tZTwvaT4gb2YgdGhlIGJlbmVmaXRzIG9mIGV4ZXJjaXNlIC4uLlxyXG48L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiBOZXVyb3Ryb3BoaW5zLCBlbmRvZ2Vub3VzIHByb3RlaW5zIHRoYXQgc3VwcG9ydCBicmFpbiBwbGFzdGljaXR5IGxpa2VseSBtZWRpYXRlIHRoZSBiZW5lZmljaWFsIGVmZmVjdHMgb2YgZXhlcmNpc2Ugb24gdGhlIGJyYWluLiBJbiBjbGluaWNhbCBzdHVkaWVzLCBleGVyY2lzZSBpbmNyZWFzZXMgYnJhaW4gdm9sdW1lIGluIGFyZWFzIGltcGxpY2F0ZWQgaW4gZXhlY3V0aXZlIHByb2Nlc3NpbmcsIGltcHJvdmVzIGNvZ25pdGlvbiBpbiBjaGlsZHJlbiB3aXRoIGNlcmVicmFsIHBhbHN5IGFuZCBlbmhhbmNlcyBwaG9uZW1pYyBza2lsbCBpbiBzY2hvb2wgY2hpbGRyZW4gd2l0aCByZWFkaW5nIGRpZmZpY3VsdHkuIFN0dWRpZXMgZXhhbWluaW5nIHRoZSBpbnRlbnNpdHkgb2YgZXhlcmNpc2UgcmVxdWlyZWQgdG8gb3B0aW1pemUgbmV1cm90cm9waGlucyBzdWdnZXN0IHRoYXQgbW9kZXJhdGlvbiBpcyBpbXBvcnRhbnQuIFN1c3RhaW5lZCBpbmNyZWFzZXMgaW4gbmV1cm90cm9waGluIGxldmVscyBvY2N1ciB3aXRoIHByb2xvbmdlZCBsb3cgaW50ZW5zaXR5IGV4ZXJjaXNlLCB3aGlsZSBoaWdoZXIgaW50ZW5zaXR5IGV4ZXJjaXNlLCBpbiBhIHJhdCBtb2RlbCBvZiBicmFpbiBpbmp1cnksIGVsZXZhdGVzIHRoZSBzdHJlc3MgaG9ybW9uZSwgY29ydGljb3N0ZXJvbmUuPHN1cD4xPC9zdXA+IFxyXG4gPC9wPiA8cD5cclxuIC4uLiBtb3JlIG9uIHRoaXMgbGF0ZXIgLi4uPC9wPlxyXG5cclxuYDtcclxudmFyIGJsb2djaXRlMSA9IGA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cudGFuZGZvbmxpbmUuY29tL2RvaS9hYnMvMTAuMTA4MC8xNzUxODQyMDgwMTk5NzAwN1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRhbmRmb25saW5lLmNvbS9kb2kvYWJzLzEwLjEwODAvMTc1MTg0MjA4MDE5OTcwMDc8L2E+PC9wPiBgIDtcclxuXHJcbiAgdmFyIHVybCA9ICBcclxuICBbICAgIFxyXG4gICAgeyBcclxuICAgIGlkOicxMycsXHJcbiAgICBkaWQ6J21heS0xOC0wNS0xNScsXHJcbiAgICAgIGRhdGU6J01heSAxNSwgMjAxOCcsXHJcbiAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gIGNhdDM6J011c2luZyBCbG9ja2NoYWluJyxcclxuICB0aXRsZTonQmV0dGluZyBvbiB0aGUgTW9iaWxlIEJsb2NrY2hhaW4gPGJyIC8+UGFydCBJSTogIEJldHRpbmcgb24gdGhlIEhlZGVyYSBIYXNoZ3JhcGggRGlzdHJpYnV0ZWQgTGVkZ2VyJyxcclxuICBwb3N0OmJsb2dwb3N0MTMsXHJcbiAgYmxvZ2NpdGU6YmxvZ2NpdGUxMyBcclxuICB9LCAgIFxyXG4gICB7IFxyXG4gICAgaWQ6JzEyJyxcclxuICAgIGRpZDonbWF5LTE4LTA1LTE0JyxcclxuICAgICAgZGF0ZTonTWF5IDE0LCAyMDE4JyxcclxuICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgY2F0MzonU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgdGl0bGU6J0JldHRpbmcgb24gTW9iaWxlIEJsb2NrY2hhaW48YnIgLz4gUGFydCBJOiBUaGUgRmxvb2RnYXRlcyBvZiBNb25leSBoYXZlIE9wZW5lZCEnLFxyXG4gIHBvc3Q6YmxvZ3Bvc3QxMixcclxuICBibG9nY2l0ZTpibG9nY2l0ZTEyXHJcbiAgfSwgIFxyXG4geyBcclxuICAgIGlkOicxMScsXHJcbiAgICBkaWQ6J21heS0xOC0wNS0xMicsXHJcbiAgICAgIGRhdGU6J01heSAxMi0xMywgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICBjYXQzOidXZWIgRGV2IEFmZmFpcnMnLFxyXG4gIHRpdGxlOidUaGUgV2VkZGluZyBvZiBKYXZhU2NyaXB0IGFuZCBXZWJBc3NlbWJseTogPGJyIC8+UGFydCBJSUk6IFRoZSBOdXRzIGFuZCBCb2x0cyBvZiB0aGUgUmVsYXRpb25zaGlwJyxcclxuICBwb3N0OmJsb2dwb3N0MTEsXHJcbiAgYmxvZ2NpdGU6YmxvZ2NpdGUxMVxyXG4gIH0sICAgXHJcbiAgICB7IFxyXG4gICAgICBpZDonMTAnLFxyXG4gICAgICBkaWQ6J21heS0xOC0wNS0xMScsXHJcbiAgICAgICAgZGF0ZTonTWF5IDExLCAyMDE4JyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6J1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgdGl0bGU6J1RoZSBXZWRkaW5nIG9mIEphdmFTY3JpcHQgYW5kIFdlYkFzc2VtYmx5OiA8YnIgLz5QYXJ0IElJOiBIb3cgU2VjdXJlIGFuZCBTYWZlIGlzIHRoaXMgTmV3IE1vYmlsZSBXb3JsZD8nLFxyXG4gICAgcG9zdDpibG9ncG9zdDEwLFxyXG4gICAgYmxvZ2NpdGU6YmxvZ2NpdGUxMFxyXG4gICAgfSwgICBcclxuICAgIFxyXG4gICB7IFxyXG4gICAgICBpZDonOScsXHJcbiAgICAgIGRpZDonbWF5LTE4LTA1LTEwJyxcclxuICAgICAgICBkYXRlOidNYXkgMTAsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonV2ViIERldiBBZmZhaXJzJyxcclxuICAgIHRpdGxlOidUaGUgV2VkZGluZyBvZiBKYXZhU2NyaXB0IGFuZCBXZWJBc3NlbWJseTogPGJyIC8+UGFydCBJOiBUaGUgT3BlbmluZyBvZiBhIE5ldyBNb2JpbGUgQXBwIFdvcmxkJyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3Q5LFxyXG4gICAgYmxvZ2NpdGU6YmxvZ2NpdGU5XHJcbiAgICB9LCAgIFxyXG4gICAgeyBcclxuICAgICAgaWQ6JzgnLFxyXG4gICAgICBkaWQ6J21heS0xOC0wNS0wOScsXHJcbiAgICAgICAgZGF0ZTonTWF5IDksIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6J0dvb2dsZSBJL08gMjAxOCwgUGFydCBJSUk6PGJyIC8+IFRoZSBCcm93c2VyXFwncyBBY2hpbGxlcyBIZWVsIEV4cG9zZWQnLFxyXG4gICAgcG9zdDpibG9ncG9zdDgsXHJcbiAgICBibG9nY2l0ZTpibG9nY2l0ZThcclxuICAgIH0sICAgXHJcbiAgICB7ICAgIFxyXG4gICAgaWQ6JzcnLFxyXG4gICAgZGlkOidtYXktMTgtMDUtMDgnLFxyXG4gICAgZGF0ZTonTWF5IDgsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonV2ViIERldiBBZmZhaXJzJyxcclxuICAgIHRpdGxlOidHb29nbGUgSS9PIDIwMTgsIFBhcnQgSUk6PGJyIC8+ICAgUHJvZ3Jlc3NpdmUgV2ViIEFwcHMgKFBXQXMpIFF1aWV0bHkgVGFraW5nIE92ZXIgdGhlIE1vYmlsZSBBcHAgV29ybGQnLFxyXG4gICAgcG9zdDpibG9ncG9zdDcsXHJcbiAgIGJsb2djaXRlOmJsb2djaXRlN1xyXG4gICAgIH0sXHJcbiAgICB7IFxyXG4gICAgaWQ6JzYnLFxyXG4gICAgICBkaWQ6J21heS0xOC0wNS0wNycsXHJcbiAgICAgICAgZGF0ZTonTWF5IDcsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonV2ViIERldiBBZmZhaXJzJyxcclxuICAgIHRpdGxlOidHb29nbGUgSS9PIDIwMTgsICBQYXJ0IEk6PGJyIC8+ICBHb29nbGUgRHVwbGV4LCBEbyBXZSBSZWFsbHkgV2FudCB0byBiZSBhcyBMYXp5IGFzIFBvc3NpYmxlPycsXHJcbiAgICBwb3N0OmJsb2dwb3N0NixcclxuICAgIGJsb2djaXRlOmJsb2djaXRlNlxyXG4gICAgfSAgICAgICAgXHJcbiAgICAgICxcclxuICAgIHsgXHJcbiAgICAgIGlkOic1JyxcclxuICAgICAgZGlkOidtYXktMTgtMDUtMDUnLFxyXG4gICAgICAgIGRhdGU6J01heSA1LTYsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6J011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiczcmQgR2VuZXJhdGlvbiBCbG9ja2NoYWluOiBIb3cgRmFzdCBjYW4gdGhlIEJsb2NrY2hhaW4gT3BlcmF0ZT8gUGFydCBJVjogUG90ZW50aWFsIFNvbHV0aW9ucyBmb3IgQmxvY2tjaGFpbiBTdGFiaWxpdHknLFxyXG4gICAgcG9zdDpibG9ncG9zdDUsXHJcbiAgICBibG9nY2l0ZTpibG9nY2l0ZTVcclxuICAgIH0sICAgXHJcbiAgICB7ICAgIFxyXG4gICAgaWQ6JzQnLFxyXG4gICAgZGlkOidtYXktMTgtMDUtMDQnLFxyXG4gICAgZGF0ZTonTWF5IDQsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6JzNyZCBHZW5lcmF0aW9uIEJsb2NrY2hhaW46IEhvdyBGYXN0IGNhbiB0aGUgQmxvY2tjaGFpbiBPcGVyYXRlPyBQYXJ0IElJSTogOiBUaGUgQ2hhbGxlbmdlcyBmb3IgdGhlIERpcmVjdGVkIEFjeWNsaWMgR3JhcGggKERBRykgd2l0aCBSaXBwbGUgYW5kICBJb3RhIENvaW4nLFxyXG4gICAgcG9zdDpibG9ncG9zdDQsXHJcbiAgICBibG9nY2l0ZTpibG9nY2l0ZTRcclxuICAgICB9LFxyXG4gICAgICB7IFxyXG4gICAgaWQ6JzMnLFxyXG4gICAgZGlkOidtYXktMTgtMDUtMDMnLFxyXG4gICAgZGF0ZTonTWF5IDMsIDIwMTgnLFxyXG4gICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgY2F0MzonTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6JzNyZCBHZW5lcmF0aW9uIEJsb2NrY2hhaW46IEhvdyBmYXN0IGNhbiB0aGUgYmxvY2tjaGFpbiBvcGVyYXRlPyBQYXJ0IElJOiA6IFNwZWVkIE5lZWRzIG9mICAgU3VwcGx5IENoYWluIE1hbmFnZW1lbnQnLFxyXG4gICAgcG9zdDpibG9ncG9zdDMsXHJcbiAgICBibG9nY2l0ZTpibG9nY2l0ZTNcclxuICB9LFxyXG4gIHsgXHJcbiAgICBpZDonMicsXHJcbiAgICBkaWQ6J21heS0xOC0wNS0wMicsXHJcbiAgICBkYXRlOidNYXkgMiwgMjAxOCcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOidNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTonM3JkIEdlbmVyYXRpb24gQmxvY2tjaGFpbjogSG93IGZhc3QgY2FuIHRoZSBibG9ja2NoYWluIG9wZXJhdGU/IG5QYXJ0IEk6IFNwZWVkIG5lZWRzIG9mIHRoZSBGaW5hbmNpYWwgU2VjdG9yJyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3QyLFxyXG4gICAgYmxvZ2NpdGU6YmxvZ2NpdGUyXHJcbiAgfSxcclxuICAgIHsgXHJcbiAgICBpZDonMScsXHJcbiAgICBkaWQ6J21heS0xOC0wNS0wMScsXHJcbiAgICBkYXRlOidNYXkgMSwgMjAxOCcsXHJcbiAgICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICBjYXQzOidXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgdGl0bGU6J1RlY2hub2xvZ3k6IFRoZSBDb2luY2lkZW50YWwgYW5kIFVuaW50ZW5kZWQgQmFuZSBvZiBFeGVyY2lzZScsXHJcbiAgICBwb3N0OmJsb2dwb3N0MSxcclxuICAgYmxvZ2NpdGU6YmxvZ2NpdGUxXHJcbiAgIH1cclxuICAgXSA7XHJcblxyXG4gICBmb3IgKGk9MDtpPHVybC5sZW5ndGg7aSsrKXsgXHJcbiAgICB2YXIgY2F0ID0gYCBcclxuICAgIDxkaXYgaWQ9XCIke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2XCI+IFxyXG4gICAgPGhyIC8+ICBcclxuICAgIDxhIGhyZWY9XCIjdG9wXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICBcclxuICAgIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gXHJcbiAgICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gICAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICAgIDxiciAvPlxyXG4gICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fVxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGlkPVwiYmxvZ2NpdGVcIj4ke3VybFtpXS5ibG9nY2l0ZX1cclxuICAgIDwvZGl2PmAgO1xyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1tYXlcIikuaW5uZXJIVE1MICs9IGNhdDsgXHJcbn0gXHJcbiBcclxudmFyIGk7XHJcbmZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICB2YXIgY2F0TW9kID0gYFxyXG4gIDxkaXYgaWQ9XCIke3VybFtpXS5kaWR9X21vZFwiIGNsYXNzPVwiYmxvZ0Rpdk1vZFwiPiBcclxuICA8aHIgLz4gIFxyXG4gIDxhIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCIgIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtbWF5LW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG59XHJcblxyXG5cclxuY29uc29sZS5sb2coJ2Jsb2dnZXItbWF5Jyk7IFxyXG4vLyBjb25zb2xlLmxvZyhhbmd1bGFyLnRvSnNvbih1cmwpKTtcclxufTsgXHJcblxyXG5cclxuYmxvZ2dlck1heSgpOyAgXHJcblxyXG4iLCIgXHJcbnZhciBibG9nZ2VyTWF5MTkgPSBmdW5jdGlvbigpIHtcclxuICAgXHJcblxyXG4gICAgLypcclxuICAgIFxyXG5hdWd1c3QgIDE2IC0gXHJcbmh0dHBzOi8vYml0Y29pbmlzdC5jb20vYmFra3Qtd2lucy1yZWd1bGF0b3J5LWFwcHJvdmFsLXRvLWxhdW5jaC1iaXRjb2luLWZ1dHVyZXMvXHJcbiAtLS0tXHJcbiAgXHJcbiBUaGUgdGFibGVzIGhhdmUgdHVybmVkIC4uXHJcbiAtXHJcbiBhbmQgbm93IHRoZSBsYXVuY2hsYWRcclxuanVuZSAxNFxyXG5odHRwczovL3d3dy5jbmV0LmNvbS9uZXdzL2NhbGxzLXRvLWJyZWFrLXVwLWFtYXpvbi1nb29nbGUtZmFjZWJvb2stYW5kLWFwcGxlLWdldC1sb3VkZXIvXHJcbkRPSi0tPlxyXG5MYXN0IHdlZWssIFRoZSBXYWxsIFN0cmVldCBKb3VybmFsIHJlcG9ydGVkIHRoYXQgdGhlIEZUQyBhbmQgSnVzdGljZSBEZXBhcnRtZW50IHJlYWNoZWQgYSBuZXcgYWdyZWVtZW50LCB3aXRoIHRoZSBGVEMgZ2FpbmluZyBhdXRob3JpdHkgdG8gcmV2aWV3IEFtYXpvbiBhbmQgRmFjZWJvb2ssIHdoaWxlIHRoZSBKdXN0aWNlIERlcGFydG1lbnQgaXMgYWJsZSB0byBsb29rIGludG8gQXBwbGUgYW5kIEdvb2dsZS4gVGhpcyBkZWFsIGlzIHNlZW4gYXMgYW4gZWFybHkgc3RlcCBpbiB0aGVzZSBhZ2VuY2llcyBkaWdnaW5nIGludG8gcG90ZW50aWFsIGFudGljb21wZXRpdGl2ZSBwcmFjdGljZXMgYnkgYWxsIGZvdXIgY29tcGFuaWVzLlxyXG5jb25zdW1lciB2aWV3LS0+XHJcblRoYXQgY291bGQgcmVzdWx0IGluIGEgZmxvdXJpc2hpbmcgb2YgbmV3IHNlcnZpY2VzIGFuZCBmZWF0dXJlcyBmb3IgY29uc3VtZXJzLCBnaXZpbmcgdGhlbSBhIGxvdCBtb3JlIGNob2ljZXMgZm9yIGUtY29tbWVyY2UsIHNvY2lhbCBtZWRpYSBhbmQgc2VhcmNoLiBUaGF0IGNoYW5nZSBjb3VsZCBhbHNvIHNvdyBjb25mdXNpb24sIGFzIHNpdGVzIHRoYXQgdXNlZCB0byBiZSBwYXJ0IG9mIHRoZSBzYW1lIGNvbXBhbnkgbm8gbG9uZ2VyIHdvcmsgYXMgc2VhbWxlc3NseSB0b2dldGhlci5cclxuXHJcblxyXG4gICAgSnVuZSAxMSwgMjAxOVxyXG4gICAgTW9zdCBjcm9zcy1ib3JkZXIgcGF5bWVudHMgYXJlIGRvbmUgdGhyb3VnaCB0aGUgU29jaWV0eSBmb3IgV29ybGR3aWRlIEludGVyYmFuayBGaW5hbmNpYWwgVGVsZWNvbW11bmljYXRpb24sIG9yIFN3aWZ0LCBhIEJlbGdpYW4gb3JnYW5pemF0aW9uIHN0YXJ0ZWQgaW4gMTk3MyB0aGF0IGNvdW50cyAxMSwwMDAgZmluYW5jaWFsIGluc3RpdHV0aW9ucyBhcyBtZW1iZXJzLiBCdXQgaXRzIGxlZ2FjeSBzeXN0ZW0gaGFzIGluZWZmaWNpZW5jaWVzLiBCZWNhdXNlIGZldyBiYW5rcyBhcmUgY29ubmVjdGVkIGRpcmVjdGx5IHRvIGVhY2ggb3RoZXIsIGEgcGF5bWVudCB0aGF0IG9yaWdpbmF0ZXMgaW4gS2Fuc2FzIENpdHkgYW5kIGlzIGJvdW5kIGZvciBOYWlyb2JpIG1pZ2h0IGhhdmUgdG8gc3RvcCBhdCBiYW5rcyBpbiBOZXcgWW9yayBhbmQgTG9uZG9uIGJlZm9yZSByZWFjaGluZyBpdHMgZmluYWwgZGVzdGluYXRpb24sIHdpdGggZWFjaCBiYW5rIGV4dHJhY3RpbmcgYSBmZWUuIFxyXG5cclxuaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9qZWZma2F1Zmxpbi8yMDE5LzA2LzExL3Zpc2EtdGFyZ2V0cy1zd2lmdC13aXRoLW5ldy1ibG9ja2NoYWluLXByb2R1Y3QtZm9yLWdsb2JhbC1tb25leS10cmFuc2ZlcnMvXHJcblZpc2Egc2VlbXMgdG8gZG8gZXZlcnl0aGluZyBvbiBhIG1hc3NpdmUgc2NhbGUuIExhc3QgeWVhciwgaXQgbW92ZWQgJDExLjIgdHJpbGxpb24gb3ZlciBpdHMgcGF5bWVudCByYWlscyBhY3Jvc3MgbW9yZSB0aGFuIDIwMCBjb3VudHJpZXMgZm9yIHB1cmNoYXNlcyByYW5naW5nIGZyb20gY3VwcyBvZiBjb2ZmZWUgdG8gY2Fycy4gTm93IGl04oCZcyBleWVpbmcgYW4gZXZlbiBiaWdnZXIgbWFya2V0OiBjcm9zcy1ib3JkZXIsIGJ1c2luZXNzLXRvLWJ1c2luZXNzIChCMkIpIHRyYW5zYWN0aW9ucywgd2hlcmUgYmFua3MgdHJhbnNmZXIgbW9uZXkgb24gYmVoYWxmIG9mIGNvcnBvcmF0ZSBjdXN0b21lcnMuIFZpc2Egc2F5cyBpdOKAmXMgZW50ZXJpbmcgYSAkMTI1IHRyaWxsaW9uIG1hcmtldCBhbmQgdXNpbmcgZGlzdHJpYnV0ZWQgbGVkZ2VyIHRlY2hub2xvZ3nigJRzb2Z0d2FyZSB3aGVyZSB0cmFuc2FjdGlvbnMgbXVzdCBiZSBjb25maXJtZWQgYnkgbXVsdGlwbGUgY29tcHV0ZXJzIG9uIGEgbmV0d29yayB0byBiZSBjb25zaWRlcmVkIGZpbmFs4oCUdG8gbWFrZSB0aGVzZSBwYXltZW50cyBmYXN0ZXIsIGNoZWFwZXIgYW5kIG1vcmUgdHJhbnNwYXJlbnQuXHJcblxyXG5QaGFsZW7igJlzIHRlYW0gY3JlYXRlZCBWaXNhIEIyQiBDb25uZWN0IHVzaW5nIGRpc3RyaWJ1dGVkIGxlZGdlciB0ZWNobm9sb2d5IGJlY2F1c2UgaXQgcHJvdmlkZXMgbW9yZSB0cmFuc3BhcmVuY3kgYW5kIHRyYWNlYWJpbGl0eSB0aGFuIGEgdHlwaWNhbCBzdGF0ZS1vZi10aGUtYXJ0IGRhdGFiYXNlLCBoZSBzYXlzLiBUaGV5IHVzZWQgSHlwZXJsZWRnZXIgRmFicmljLCB0aGUgYmxvY2tjaGFpbiBzb2Z0d2FyZSBkZXZlbG9wZWQgaW4gcGFydCBieSBJQk0gYW5kIGhvc3RlZCBieSBMaW51eCwgdG8gYnVpbGQgaXQsIGFuZCBpdCBoYXMgdGFrZW4gdHdvIHllYXJzIHRvIGxhdW5jaC4gVW5saWtlIGNyeXB0b2N1cnJlbmN5LWJhc2VkIGJsb2NrY2hhaW5zIGluY2x1ZGluZyBCaXRjb2luIGFuZCBFdGhlcmV1bSwgVmlzYeKAmXMgcHJvZHVjdCBpc27igJl0IGRlY2VudHJhbGl6ZWQsIHNpbmNlIHRoZSBwYXltZW50cyBnaWFudCBoYXMgY29tcGxldGUgY29udHJvbCBvdmVyIGl0LiBWaXNhIG1hZGUgRm9yYmVz4oCZIGZpcnN0LWV2ZXIgQmxvY2toYWluIDUwIGxpc3QgZWFybGllciB0aGlzIHllYXIuXHJcblxyXG5cclxuanVuZSA2XHJcblVubGlrZSB0aGUgb3JpZ2luYWwgdmlzaW9uIHNwZWxsZWQgb3V0IGluIHRoZSBOYWthbW90byBwYXBlciwgdGhlc2UgaW5pdGlhdGl2ZXMgZG9u4oCZdCB1c2UgYSBwcm9vZi1vZi13b3JrIHN5c3RlbSBmb3IgdmVyaWZpY2F0aW9uLCBidXQgYXJlIHBlcm1pc3Npb25lZCBibG9ja2NoYWlucyBpbiB3aGljaCBlYWNoIHBhcnRpY2lwYW50IGlzIGlkZW50aWZpZWQgYW5kIGtub3du4oCUYW5kIHRoZXJlZm9yZSBhY2NvdW50YWJsZeKAlHRvIHRoZSBvdGhlcnMgaW4gdGhlIGJsb2NrY2hhaW4gbmV0d29yay4gRXNzZW50aWFsbHkgdGhpcyB2ZXJpZmllcyBtZW1iZXJzIGJlZm9yZSB0cmFuc2FjdGlvbnMgdGFrZSBwbGFjZSwgbXVjaCBhcyBHbG9iYWwgRW50cnkgYW5kIFRTQSBQcmUgZG8gYXQgYWlybGluZSBzZWN1cml0eSBjaGVja3BvaW50cy5cclxuaHR0cHM6Ly93d3cuYmFycm9ucy5jb20vYXJ0aWNsZXMvYmxvY2tjaGFpbi1tb3Zlcy1iZXlvbmQtdGhlLXdhbGxlZC1nYXJkZW4tc3RhZ2UtNTE1NTk4MjA2MzVcclxuIElCTSBoYXRoIGJlZW4gYnVzeSAuLi5cclxuIFwiVG8gdW5kZXJzdGFuZCB3aGF0IHRoZSBmdXR1cmUgb2YgYmxvY2tjaGFpbiBjb3VsZCBsb29rIGxpa2UsIGl04oCZcyBoZWxwZnVsIHRvIGxvb2sgYXQgSUJNIOKAmXMgcmVjZW50IGluaXRpYXRpdmVzIHRvIGJ1aWxkIGNvbW11bml0aWVzIGFyb3VuZCBwZWVyLXRvLXBlZXIgbmV0d29ya3MgaW4gZmluYW5jaWFsIHNlcnZpY2VzLCBpZGVudGl0eSBhbmQgc3VwcGx5IGNoYWluLlxyXG5cclxuIFRoZSBjb21wYW55IGlzIGFsc28gd29ya2luZyB3aXRoIFNlY3VyZUtleSB0byBkZXZlbG9wIGEgZGlnaXRhbCBpZGVudGl0eSBzeXN0ZW0gaW4gQ2FuYWRhLiBUaGUgc3lzdGVtIGlzIGRlc2lnbmVkIHRvIGFsbG93IGNvbnN1bWVycyB0byBkZXZlbG9wIGRpZ2l0YWwgaWRlbnRpdGllcyB0aGF0IHRoZXkgY2FuIGNvbnRyb2wuIFxyXG5cclxuIFBlcmhhcHMgdGhlIGdyZWF0ZXN0IG9wcG9ydHVuaXR5IGZvciBibG9ja2NoYWluIHRlY2hub2xvZ3kgaXMgaW4gaGVscGluZyB0byBzdHJlYW1saW5lIHN1cHBseSBjaGFpbnMuIEluIGZhY3QsIGEgMjAxMyBzdHVkeSBieSB0aGUgV29ybGQgRWNvbm9taWMgRm9ydW0gZm91bmQgdGhhdCByZWR1Y2luZyBiYWNrLW9mZmljZSBmcmljdGlvbiBpbiBpbnRlcm5hdGlvbmFsIHRyYWRlIGNvdWxkIGluY3JlYXNlIEdEUCBieSBuZWFybHkgNSUuIElCTSBoYXMgdHdvIG1ham9yIGVmZm9ydHMgaW4gdGhpcyBhcmVhLiBJdCBwYXJ0bmVyZWQgd2l0aCBNYWVyc2sgdG8gY3JlYXRlIFRyYWRlTGVucywgd2hpY2ggYWltcyB0byBkaWdpdGl6ZSBnbG9iYWwgc2hpcHBpbmcgYW5kIGNyZWF0ZWQgRm9vZCBUcnVzdCB0aGF0IGZvY3VzZXMgb24gYWdyaWN1bHR1cmFsIHByb2R1Y3RzLlwiXHJcblxyXG4gSnVuZSA0IC0gTmVhci1aZXJvIExhdGVuY3kgQXBwcyBhbmQgQm90c1xyXG4gQW5kIHRoZW4gdGhlcmUncyB0aGUgcXVlc3Rpb24gb2Ygd2hhdCB0eXBlIG9mIDVHIHNpZ25hbHMgYXJlIGF2YWlsYWJsZS4gVmVyaXpvbiwgbGlrZSBBVCZULCBoYXMgZm9jdXNlZCBvbiB3aGF0J3Mga25vd24gYXMgbWlsbGltZXRlciB3YXZlIHNwZWN0cnVtLCB3aGljaCBpcyBmYXN0IGJ1dCBoYXMgYSBsaW1pdGVkIHJhbmdlIGFuZCBjYW4gaGF2ZSB0cm91YmxlIHdpdGggd2FsbHMgYW5kIGV2ZW4gZm9saWFnZS4gQ2FycmllcnMgaW4gRXVyb3BlIGFuZCBBc2lhLCBhbG9uZyB3aXRoIFNwcmludCBhbmQgVC1Nb2JpbGUgaW4gdGhlIFVTLCBoYXZlIGJlZW4gdXNpbmcgc3ViLTZHSHogYWlyd2F2ZXMgZm9yIHNsb3dlciBidXQgbW9yZSByZWxpYWJsZSBjb3ZlcmFnZS5cclxuIGh0dHBzOi8vd3d3LmNuZXQuY29tL25ld3MvdmVyaXpvbi01Zy1sYWItdHVuZXMtdXAtcm9ib3RzLWFuZC1tZWRpY2FsLXRlY2gtaGVhZGluZy15b3VyLXdheS9cclxuVGhlIGJpZ2dlciBnb2FsLCBQYWxtZXIgc2FpZCwgaXMgdG8gZW5hYmxlIHdob2xlIG5ldyBleHBlcmllbmNlcyAtLSBpbiBlZHVjYXRpb24sIGZvciBpbnN0YW5jZSwgdHJhbnNwb3J0aW5nIHNvbWVvbmUgd2hvJ3Mgc3R1ZHlpbmcgZ2xhY2llcnMgdG8gYW4gYWN0dWFsIGdsYWNpZXIgdmlhIHZpcnR1YWwgcmVhbGl0eSBvciBhIGhvbG9ncmFwaGljIGV4cGVyaWVuY2UgdGhhdCdzIG5vdCBwb3NzaWJsZSB0b2RheS5cclxuXHJcbiBXaGVuIHRoZSBuZXh0IGdlbmVyYXRpb24gbWF0dXJlcyBldmVudHVhbGx5LCBhIHdob2xlIGFycmF5IG9mIHRlY2hub2xvZ2llcyB3aWxsIGJlIGFibGUgdG8gYmxvc3NvbSBpbiB3YXlzIHRoYXQgdG9kYXkncyA0RyBuZXR3b3JrcyBkb24ndCBhbGxvdyAtLSBjYXJzIGNvbW11bmljYXRpbmcgd2l0aCBlYWNoIG90aGVyIGFuZCB3aXRoIHNlbnNvcnMgb24gYSBoaWdod2F5IG9yIGNpdHkgc3RyZWV0cyBhdCBzcGVlZCwgZm9yIGluc3RhbmNlLiBUaGUgaW50ZXJuZXQgb2YgdGhpbmdzIGJlY29tZXMgYSBsb3QgbW9yZSB0aGFuIGp1c3QgeW91IGNoZWNraW5nIGluIHdpdGggeW91ciBOZXN0IHRoZXJtb3N0YXQgb3IgYW4gQXVndXN0IHNtYXJ0IGRvb3JiZWxsLiBTb2xkaWVycyBhbmQgZmlyc3QgcmVzcG9uZGVycyBnZXQgYmV0dGVyLCBmYXN0ZXIgc2l0dWF0aW9uYWwgYXdhcmVuZXNzLlxyXG5cclxuIEp1bmUgMyAtIFRoZSAkNjAwMCBjb21wdXRhZG9yYVxyXG4gaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy90aGUtbmV3LW1hYy1wcm8tbWFrZXMtaXRzLWRlYnV0LWF0LXd3ZGMtMjAxOS1zdGFydHMtYXQtNTk5OS1hdmFpbGFibGUtZmFsbC0yMDE5LWFwcGxlL1xyXG5cclxuIEp1bmUgMiAtIFN0ZWVyIENsZWFyIG9mIFRhcGVXb3JtczogUHJhY3RpY2UgR29vZCBIeWdpZW5lXHJcbiBodHRwczovL2Jsb2dzLnRlY2huZXQubWljcm9zb2Z0LmNvbS9tc3JjLzIwMTkvMDUvMzAvYS1yZW1pbmRlci10by11cGRhdGUteW91ci1zeXN0ZW1zLXRvLXByZXZlbnQtYS13b3JtL1xyXG4gRXRlcm5hbEJsdWUgVGltZWxpbmVcclxuXHJcbkFsbW9zdCB0d28gbW9udGhzIHBhc3NlZCBiZXR3ZWVuIHRoZSByZWxlYXNlIG9mIGZpeGVzIGZvciB0aGUgRXRlcm5hbEJsdWUgdnVsbmVyYWJpbGl0eSBhbmQgd2hlbiByYW5zb213YXJlIGF0dGFja3MgYmVnYW4uIERlc3BpdGUgaGF2aW5nIG5lYXJseSA2MCBkYXlzIHRvIHBhdGNoIHRoZWlyIHN5c3RlbXMsIG1hbnkgY3VzdG9tZXJzIGhhZCBub3QuXHJcblxyXG5BIHNpZ25pZmljYW50IG51bWJlciBvZiB0aGVzZSBjdXN0b21lcnMgd2VyZSBpbmZlY3RlZCBieSB0aGUgcmFuc29td2FyZS5cclxuXHJcbiAgLy8vIFF1YW50dW06OjogbWFpbnN0cmVhbVxyXG4gIEFVVEhPUjo6OiBZdW4tSGVlIEtpbSBhdCB5dW4taGVlLmtpbUB3c2ouY29tXHJcbiAgRG93IEpvbmVzICYgQ29tcGFueSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gIFF1YW50dW0gY29tcHV0ZXJzIHdvbuKAmXQgcmVwbGFjZSB0b2RheeKAmXMgdHJhZGl0aW9uYWwgY29tcHV0ZXJzLCBidXQgdGhleSB3aWxsIGJlY29tZSBtYWluc3RyZWFtIHdpdGhpbiBmaXZlIHllYXJzLCBhIHRvcCBleGVjdXRpdmUgaW4gY2hhcmdlIG9mIGVtZXJnaW5nIHRlY2hub2xvZ2llcyBhdCBJbnRlcm5hdGlvbmFsIEJ1c2luZXNzIE1hY2hpbmVzIENvcnAuIHByZWRpY3RlZC5cclxuICBTcGVha2luZyBhdCBUaGUgV2FsbCBTdHJlZXQgSm91cm5hbOKAmXMgRnV0dXJlIG9mIEV2ZXJ5dGhpbmcgRmVzdGl2YWwgV2VkbmVzZGF5LCBBcnZpbmQgS3Jpc2huYSwgc2VuaW9yIHZpY2UgcHJlc2lkZW50IG9mIGNsb3VkIGFuZCBjb2duaXRpdmUgc29mdHdhcmUsIHByZWRpY3RlZCB0aGF0IHdpdGggcXVhbnR1bSBjb21wdXRpbmcsIGJhdHRlcmllcyBjb3VsZCBsYXN0IOKAnGEgdGhvdXNhbmQgdGltZXMgbG9uZ2Vy4oCdIGFuZCBhaXJwbGFuZXMgY291bGQgYmVjb21lIGxpZ2h0ZXIuXHJcbiAg4oCcQWxsIG9mIHRoZXNlIHVzZSBjYXNlcywgSSB0aGluaywgd2lsbCBnZXQgc29sdmVkIGluIGEgZmV3IHllYXJzLOKAnSBNci4gS3Jpc2huYSBzYWlkLiDigJxQaGFybWFjZXV0aWNhbHMgYW5kIGRydWcgZGlzY292ZXJ5IGlzIGEgbXVjaCBoYXJkZXIgcHJvYmxlbS7igJ1cclxuICBRdWFudHVtIGNvbXB1dGVycyBoYXZlIHRoZSBwb3RlbnRpYWwgdG8gc29ydCB0aHJvdWdoIGEgdmFzdCBudW1iZXIgb2YgcG9zc2libGUgc29sdXRpb25z4oCUbW9yZSB0aGFuIHRoZSBudW1iZXIgb2YgYXRvbXMgaW4gdGhlIHVuaXZlcnNl4oCUd2l0aCB0aGUgY2FsY3VsYXRpb25zIGJlaW5nIGNvbXBsZXRlZCBhcyBmYXN0IGFzIGEgZnJhY3Rpb24gb2YgYSBzZWNvbmQuXHJcbiAgUmVzcG9uZGluZyB0byBjcml0aWNpc20gZnJvbSByZXNlYXJjaGVycyB0aGF0IHRoZSBVLlMuIG1heSBiZSBmYWxsaW5nIGJlaGluZCBDaGluYSBhbmQgdGhlIEV1cm9wZWFuIFVuaW9uIHRvIGludmVzdCBpbiBxdWFudHVtIGNvbXB1dGluZywgTXIuIEtyaXNobmEgc2FpZCB0aGUgVS5TLiBpcyBjdXJyZW50bHkgc2xpZ2h0bHkgYWhlYWQgYnV0IGRvZXMgbmVlZCB0byBpbnZlc3QgbW9yZS4gQ2hpbmEgaXMgY29uc3RydWN0aW5nIGEgJDEwIGJpbGxpb24gcmVzZWFyY2ggY2VudGVyIGZvciBxdWFudHVtIGFwcGxpY2F0aW9ucy4gVGhlIEV1cm9wZWFuIFVuaW9uIGFubm91bmNlZCBpbiAyMDE2IHRoYXQgaXQgaXMgY3JlYXRpbmcgYSDigqwxIGJpbGxpb24gZWZmb3J0IG9uIGZvdXIgYXJlYXMgb2YgcXVhbnR1bSB0ZWNobm9sb2d5IGluY2x1ZGluZyBjb21wdXRpbmcgYW5kIGNvbW11bmljYXRpb24uXHJcbiAgTXIuIEtyaXNobmEsIHdobyBhbHNvIG92ZXJzZWVzIHRoZSBpbnRlZ3JhdGlvbiBvZiBJQk3igJlzICQzMyBiaWxsaW9uIGFjcXVpc2l0aW9uIG9mIFJlZCBIYXQgSW5jLiBzYWlkIGhlIGV4cGVjdHMgdGhlIGRlYWzigJRJQk3igJlzIGxhcmdlc3QgYWNxdWlzaXRpb24gdG8gZGF0ZeKAlHRvIGNsb3NlIGFyb3VuZCBKdW5lLiBUaGUgY29tcGFueSBoYXMgcmVjZWl2ZWQgYXBwcm92YWwgZnJvbSB0aGUgVS5TLiBEZXBhcnRtZW50IG9mIEp1c3RpY2UgZm9yIHRoZSBkZWFsLCBhbmQgaXMgbm93IGF3YWl0aW5nIGFwcHJvdmFsIGZyb20gdGhlIEV1cm9wZWFuIFVuaW9uLlxyXG4gIEFza2VkIGFib3V0IHJlc3RydWN0dXJpbmcgYWZ0ZXIgdGhlIGFjcXVpc2l0aW9uIGlzIGNvbXBsZXRlZCwgTXIuIEtyaXNobmEgc2FpZCB0aGF0IGl0IHdvdWxkbuKAmXQgcmVzdWx0IGluIGFueSBqb2IgY3V0cyBhdCBSZWQgSGF0LlxyXG4gIOKAnFRoaXMgaXMgYSB2YWx1ZSBkZWFsLCBub3QgYWJvdXQgY29zdCBzeW5lcmd5LiBUaGV5IFtSZWQgSGF0XSBydW4gb24gbXVsdGlwbGUgcHVibGljIGNsb3Vkcy4gSXTigJlzIGdvdCB0byBiZSBwcmVzZXJ2ZWQs4oCdIGhlIHNhaWQuXHJcbiAgSW4gdGhlIHB1YmxpYyBjbG91ZCBzcGFjZSwgSUJNIHRyYWlscyByaXZhbHMgQW1hem9uIEluYy4gYW5kIE1pY3Jvc29mdCBDb3JwLiBJQk0gcmFua2VkIGZpZnRoIGluIHRoZSB3b3JsZCBmb3IgcHVibGljIGNsb3VkLWluZnJhc3RydWN0dXJlIHNlcnZpY2UgaW4gMjAxNywgYWNjb3JkaW5nIHRvIGRhdGEgZnJvbSBHYXJ0bmVyIEluYy4sIGJlaGluZCBBbWF6b24sIE1pY3Jvc29mdCwgQWxpYmFiYSBHcm91cCBIb2xkaW5nIEluYy4gYW5kIEdvb2dsZSBJbmMuXHJcbiAgQnV0IE1yLiBLcmlzaG5hIHNhaWQgdGhlIGFjcXVpc2l0aW9uIGNyZWF0ZXMgYSBiaWcgb3Bwb3J0dW5pdHkgZm9yIElCTSB0byBleHBhbmQgaW4gdGhlIHNvLWNhbGxlZCBoeWJyaWQgY2xvdWQgc3BhY2Ugd2hlcmUgY3VzdG9tZXJzIHJ1biBzb21lIHNvZnR3YXJlIGluIHRoZWlyIG93biBkYXRhIGNlbnRlcnMgYnV0IGFsc28gdXNlIGNsb3VkIHNlcnZpY2VzLlxyXG5cclxuICDigJxJ4oCZbSBub3QgdHJ5aW5nIHRvIGNhdGNoIHVwIHRvIEFtYXpvbiBhbmQgTWljcm9zb2Z0LOKAnSBoZSBzYWlkLiDigJxUaGV5IGFyZSBnb2luZyBkb3duIHRoZSBwYXRoIG9mIHB1YmxpYyBjbG91ZCBhbmQgd2UgYXJlIGdvaW5nIHRvIGJlIGh5YnJpZC4gVGhlcmUgaXMgc28gbXVjaCBpbnZlc3RtZW50IHRoYXTigJlzIGFscmVhZHkgaGFwcGVuaW5nIGFuZCB0aGVyZSBpcyBzbyBtdWNoIGRhdGEgdGhhdCBjYW7igJl0IHNpdCBvbiB0aGUgcHVibGljIGNsb3VkLiBJIGJlbGlldmUgdGhlcmUgaXMgc3BhY2UgZm9yIGFsbCBvZiB1cyzigJ0gaGUgc2FpZC5cclxuICAvLy9cclxuXHJcblRoZSB1c2Ugb2YgdGhlIHRyYXBwZWQgaW9uIHRlY2hub2xvZ3kgcHV0cyBIb25leXdlbGwgaW4gcmFyZSBjb21wYW55LCBzaW5jZSB0aGUgbW9zdCB2aXNpYmxlIGNvbXBhbmllcyBwdXJzdWluZyBxdWFudHVtIGNvbXB1dGluZywgaW5jbHVkaW5nIElCTSwgR29vZ2xlLCBJbnRlbCwgYW5kIFJpZ2V0dGksIGFyZSBiYXNpbmcgdGhlaXIgaGFyZHdhcmUgb24gc2VtaWNvbmR1Y3RvciB0ZWNobm9sb2d5LlxyXG5KdW5lIDEgLSBcclxuaHR0cHM6Ly93d3cubmV4dHBsYXRmb3JtLmNvbS8yMDE5LzA1LzI4L2hvbmV5d2VsbC1vbmUtc3RlcC1jbG9zZXItdG8tdW5pdmVyc2FsLXF1YW50dW0tY29tcHV0ZXIvXHJcbkluIE5vdmVtYmVyLCB0aGUgY29tcGFueSByZXZlYWxlZCBpdCBoYWQgc3RhcnRlZCB0ZXN0aW5nIGl0cyBmaXJzdC1nZW5lcmF0aW9uIHF1Yml0IGRldmljZXMsIGZvbGxvd2VkIGluIEphbnVhcnkgYnkgdGhlIGNsYWltIHRoYXQgaXQgaGFkIOKAnGRlbW9uc3RyYXRlZCByZWNvcmQtYnJlYWtpbmcgaGlnaCBmaWRlbGl0eSBxdWFudHVtIG9wZXJhdGlvbnPigJ0gb24gaXRzIHRyYXBwZWQtaW9uIHF1Yml0cy4gSW4gTWFyY2gsIGl0IGFubm91bmNlZCBpdCBoYWQgZGVtb25zdHJhdGVkIOKAnHBhcmFsbGVsIG9wZXJhdGluZyB6b25lc+KAnSBvbiB0aGUgZGV2aWNlLCB3aGljaCBpdCBiZWxpZXZlcyB3aWxsIHByb3ZpZGUgZmFzdGVyIGV4ZWN1dGlvbiBhbmQgbW9yZSBmbGV4aWJsZSBxdWJpdCBjb25uZWN0aXZpdHkuXHJcblxyXG5Ib25leXdlbGzigJlzIGF0dHJhY3Rpb24gdG8gdHJhcHBlZCBpb24gdGVjaG5vbG9neSBtaXJyb3JzIHRoYXQgb2YgSW9uUSwgbmFtZWx5IHRoYXQgdGhlc2UgYXRvbWljIGxldmVsIHN0cnVjdHVyZXMgYXJlIHRvdGFsbHkgdW5pZm9ybSwgbmF0dXJhbGx5IHJlc2lzdGFudCB0byBlcnJvci1wcm9kdWNpbmcgbm9pc2UsIGFuZCBjYW4gYmUgY29ubmVjdGVkIHRvIG9uZSBhbm90aGVyIGluIGRpZmZlcmVudCBjb25maWd1cmF0aW9ucyBhdCBydW50aW1lLiBXaGlsZSB0aGlzIHRlY2hub2xvZ3kgZG9lc27igJl0IGhhdmUgdGhlIGRlY2FkZXMtbG9uZyBoaXN0b3J5IGFuZCBwcm92ZW4gc2NhbGFiaWxpdHkgb2Ygc2VtaWNvbmR1Y3RvcnMsIGF0IHRoaXMgcG9pbnQsIGl0IG9mZmVycyB0aGUgbW9zdCBpbnRlcmVzdGluZyBhbHRlcm5hdGl2ZSBmb3Igc29saWQtc3RhdGUgcXVhbnR1bSBjb21wdXRpbmcuXHJcblxyXG4gICAqL1xyXG4gICAgdmFyIGJsb2dwb3N0MzAgPSBgXHJcblxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+U3Vic3RpdHV0aW5nIG9uZSBtYXRlcmlhbCBmb3IgYW5vdGhlciB3aGVuIGluIGEgcGluY2ggaW52aXRlcyBhIHBhbm9wbHkgb2YgY29tcGxpY2F0aW9ucyB3aGVuIHRoZSBxdWFsaXR5IG9mIHN1YnN0aXR1dGUgbWF0ZXJpYWxzIHZhcnkgYnkgZ2VvZ3JhcGhpY2FsIGFuZCBwb2xpdGljYWwgYm9yZGVycyAuLi4gPGJyIC8+XHJcbiAgPGltZyBzcmM9XCJkaXN0L2ltZy9tZXRhbC5qcGdcIiAgd2lkdGg9XCI0MDBcIiAgY2xhc3M9XCJ6b29tXCIgLz5cclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkVsZWN0cm9uaWNzIG1hbnVmYWN0dXJlcnMgY291bGQgYmUgYW1vbmcgdGhlIGZpcnN0IHRvIGZlZWwgdGhlIGZ1bGwgYnJ1bnQgb2YgdGhlIHRyYWRlIHdhci4gVGhlIGluZHVzdHJ5IGlzIHBlcmhhcHMgdW5pcXVlbHkgZ2xvYmFsOiBDaGlwcyBtYWRlIGluIE9yZWdvbiBvciBUZXhhcyBhcmUgc2hpcHBlZCB0byBhIHBsYW50IGluIE1leGljbyB0byBiZSBhdHRhY2hlZCB0byBjaXJjdWl0IGJvYXJkcyBtYWRlIGluIENoaW5hIGFsb25nc2lkZSBjYXBhY2l0b3JzIG1hZGUgaW4gVmlldG5hbS4gSXQgaXMgbm90IHVuaGVhcmQtb2YgZm9yIGEgcHJvZHVjdCBvciBpdHMgY29tcG9uZW50cyB0byBjcm9zcyB0aGUgUGFjaWZpYyB0aHJlZSBvciBldmVuIGZvdXIgdGltZXMgYmVmb3JlIHNob3dpbmcgdXAgb24gcmV0YWlsIHNoZWx2ZXMuIFxyXG5CdXQgbmVhcmx5IGEgeWVhciBsYXRlciwgdGhlIHRyYWRlIHdhciBzaG93cyBubyBzaWduIG9mIGNvb2xpbmcgb2ZmLiBTbyBDb250cm9sVGVrLCB0aGUgZWxlY3Ryb25pY3MgbWFudWZhY3R1cmVyIHRoYXQgTXIuIExhRnJhemlhIHJ1bnMgbmVhciBQb3J0bGFuZCwgaXMgdGFraW5nIHN0ZXBzIHRvIHByb3RlY3QgaXRzZWxmLCBhIHN0cmF0ZWdpYyBzaGlmdCB0aGF0IGhhcyBiZWVuIHJlcGVhdGVkIGluIGJvYXJkcm9vbXMgYW5kIGV4ZWN1dGl2ZSBzdWl0ZXMgYXJvdW5kIHRoZSB3b3JsZCBpbiByZWNlbnQgd2Vla3MuXHJcbjxiciAvPjxiciAvPiBcclxu4oCcV2XigJlyZSB2ZXJ5IG11Y2ggYXQgdGhlIGVuZCBvZiB0aGUgd2hpcCBnZXR0aW5nIHRocm93biBhcm91bmQs4oCdIE1yLiBMYUZyYXppYSBzYWlkLlxyXG5JdCB3YXMgYWxzbyB1bmNsZWFyIHdoaWNoIHByb2R1Y3RzIHdlcmUgc3ViamVjdCB0byB0YXJpZmZzLiBNci4gTGFGcmF6aWEsIGEgNTQteWVhci1vbGQgQWlyIEZvcmNlIHZldGVyYW4sIHJlY2FsbGVkIHNwZW5kaW5nIGhvdXJzIHBvcmluZyBvdmVyIGFuIG9ubGluZSBsaXN0IG9mIHRhcmlmZiBjb2RlcyB0byBmaWd1cmUgb3V0IHdoaWNoIGFwcGxpZWQgdG8gaGlzIHBhcnRzLiBXaGVuIGhlIGNhbGxlZCB0aGUgbWFudWZhY3R1cmVycywgdGhleSBvZnRlbiBkaWRu4oCZdCBrbm93IHdoZXJlIHRoZXkgZmVsbCBpbiB0aGUgZ292ZXJubWVudOKAmXMgdGF4b25vbXkgb2YgdHJhZGFibGUgZ29vZHMuIEV2ZW4gdGhlIGdvdmVybm1lbnTigJlzIGV4cGVydHMgY2FuIGdldCBjb25mdXNlZCDigJQgQ29udHJvbFRlayByZWNlbnRseSBoYWQgYSBzaGlwbWVudCBvZiBwYXJ0cyBkZWxheWVkIGZvciAxMiBkYXlzIGJlY2F1c2UgY3VzdG9tcyBvZmZpY2lhbHMgdGhvdWdodCB0aGV5IGNvbnRhaW5lZCBhbHVtaW51bSB0aGF0IHdhcyBzdWJqZWN0IHRvIHRhcmlmZnMuIChUaGV5IGRpZG7igJl0Lik8c3VwPjE8L3N1cD48L3A+XHJcbiBcclxuXHJcbmA7XHJcblxyXG4gICAgdmFyIGJsb2djaXRlMzAgPSBgXHJcbjxwPjEuIDxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOS8wNS8zMC9idXNpbmVzcy9lY29ub215L3RydW1wLXRhcmlmZi1tYW51ZmFjdHVyZXIuaHRtbFwiPmh0dHBzOi8vd3d3Lm55dGltZXMuY29tLzIwMTkvMDUvMzAvYnVzaW5lc3MvZWNvbm9teS90cnVtcC10YXJpZmYtbWFudWZhY3R1cmVyLmh0bWw8L2E+IFxyXG48L3A+XHJcblxyXG48cD48YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vbWFya2V0cy5idXNpbmVzc2luc2lkZXIuY29tL25ld3Mvc3RvY2tzL2FwcGxlLXN0b2NrLXByaWNlLXNsaWRlcy10cmFkZS13YXItdGVuc2lvbnMtb3ZlcnNoYWRvdy1wcm9kdWN0LWxhdW5jaGVzLTIwMTgtOS0xMDI3NTIyMjQ3XCI+aHR0cHM6Ly9tYXJrZXRzLmJ1c2luZXNzaW5zaWRlci5jb20vbmV3cy9zdG9ja3MvYXBwbGUtc3RvY2stcHJpY2Utc2xpZGVzLXRyYWRlLXdhci10ZW5zaW9ucy1vdmVyc2hhZG93LXByb2R1Y3QtbGF1bmNoZXMtMjAxOC05LTEwMjc1MjIyNDc8L2E+IFxyXG48L3A+IFxyXG5cclxuYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QyOSA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TXkgPGEgaHJlZj1cIiMwOS0xMS0xOFwiPlNlcHRlbWJlciAxMXRoIHBvc3Q8L2E+IGxhc3QgeWVhciB0b3VjaGVkIG9uIGdsb2JhbCB0ZWNoJ3MgZGVwZW5kZW5jZSBvbiByYXJlIGVhcnRoIG1hdGVyaWFscyAgLi4uIGFuZCBhZ2FpbiwgdGhlIHRyYWRlIHdhciBiZWdpbnMgdG8gdGFrZSBpdHMgdG9sbDpcclxuICA8L3A+XHJcbiAgXHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkFnYWluc3QgYSBiYWNrZHJvcCBvZiBtb3VudGluZyBjb25jZXJuIG92ZXIgdGhlIGxvbmctcnVubmluZyB0cmFkZSBkaXNwdXRlIGJldHdlZW4gdGhlIFVTIGFuZCBDaGluYSwgd2hpY2ggc3RhbmRzIHRvIGNob2tlIGdsb2JhbCBncm93dGgsIEJlaWppbmcgc2lnbmFsbGVkIHRoYXQgZXhwb3J0cyBvZiByYXJlLWVhcnRoIGVsZW1lbnRzIHRvIHRoZSBVUyBjb3VsZCBiZSBjdXJ0YWlsZWQuXHJcbiAgPGJyIC8+PGJyIC8+Q2hpbmVzZSBtZWRpYSByZXBvcnRzLCBpbmNsdWRpbmcgdGhlIFBlb3BsZeKAmXMgRGFpbHksIHRoZSBmbGFnc2hpcCBuZXdzcGFwZXIgb2YgdGhlIENvbW11bmlzdCBwYXJ0eSwgcmFpc2VkIHRoZSBwcm9zcGVjdCBvZiB0aGUgY3JhY2tkb3duLCB3aGljaCB3b3VsZCBzdGFuZCB0byBoaXQgQW1lcmljYW4gY29tcGFuaWVzIGludm9sdmVkIGluIGVsZWN0cm9uaWNzLCBjYXIgcHJvZHVjdGlvbiBhbmQgZGVmZW5jZS5cclxuXHJcbiAgQW5hbHlzdHMgc2FpZCBDaGluYSBoYW5kbGVzIHJvdWdobHkgODAlIG9mIFVTIGltcG9ydHMgb2YgcmFyZSBlYXJ0aHMgYW5kIHRoYXQgaGlnaC10ZWNoIG1hbnVmYWN0dXJlcnMgY291bGQgc2VlIHRoZWlyIHByb2ZpdHMgY3JpcHBsZWQgYnkgdGhlIG1lYXN1cmVzLjxzdXA+PC9zdXA+PC9wPiBgO1xyXG5cclxuICAgIHZhciBibG9nY2l0ZTI5ID0gYCAgXHJcbjxwPjxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL2J1c2luZXNzLzIwMTkvbWF5LzI5L2dsb2JhbC1tYXJrZXRzLWZhbGwtYXMtY2hpbmEtcHJlcGFyZXMtdG8taGl0LWJhY2stYXQtdXMtaW4tdHJhZGUtd2FyXCI+aHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL2J1c2luZXNzLzIwMTkvbWF5LzI5L2dsb2JhbC1tYXJrZXRzLWZhbGwtYXMtY2hpbmEtcHJlcGFyZXMtdG8taGl0LWJhY2stYXQtdXMtaW4tdHJhZGUtd2FyPC9hPiBcclxuPC9wPlxyXG5cclxuYDtcclxuICAgIHZhciBibG9ncG9zdDE4ID0gYCBcclxuICBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gIDwvcD5cclxuICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+SW4gYSBzdXJwcmlzZSBiaXQgb2Ygd2Vla2VuZCBuZXdzIHRoYXQgY291bGQgaGF2ZSBtYWpvciBpbXBsaWNhdGlvbnMgb24gdGhlIHNtYXJ0cGhvbmUgbWFya2V0LCBSZXV0ZXJzIHJlcG9ydHMgdGhhdCDigJxHb29nbGUgaGFzIHN1c3BlbmRlZCBidXNpbmVzcyB3aXRoIEh1YXdlaSB0aGF0IHJlcXVpcmVzIHRoZSB0cmFuc2ZlciBvZiBoYXJkd2FyZSwgc29mdHdhcmUsIGFuZCB0ZWNobmljYWwgc2VydmljZXMgZXhjZXB0IHRob3NlIHB1YmxpY2x5IGF2YWlsYWJsZSB2aWEgb3BlbiBzb3VyY2UgbGljZW5zaW5nLuKAnVxyXG4gIDxiciAvPjxiciAvPlxyXG4gIFRyYW5zbGF0aW9uOiBIdWF3ZWkgY2FuIG5vIGxvbmdlciBpbXBsZW1lbnQgYSBmdWxsLWZsZWRnZWQgdmVyc2lvbiBvZiBBbmRyb2lkLCBsb3NpbmcgYWNjZXNzIHRvIEdvb2dsZSBzZXJ2aWNlcyBhbmQgbW9yZS4gSW5zdGVhZCwgaXTigJlsbCBvbmx5IGJlIGFsbG93ZWQgdG8gdXNlIHRoZSBvcGVuIHNvdXJjZSBjb21wb25lbnRzIG9mIEFuZHJvaWQuIFRoYXQgbWVhbnMgbm8gR29vZ2xlIFBsYXkgU3RvcmUsIG5vIEdtYWlsLCBubyBZb3VUdWJlIOKAkyBhdCBsZWFzdCBub3Qgd2l0aG91dCBtYWpvciB3b3JrYXJvdW5kcy4gVGhpcyBwcmVzdW1hYmx5IGFmZmVjdHMgZnV0dXJlIGRldmljZXM7IGl04oCZcyBub3QgY2xlYXIgd2hhdCBlZmZlY3QgaXQgd2lsbCBoYXZlIG9uIGN1cnJlbnQgb25lcy48c3VwPjwvc3VwPjwvcD5cclxuXHJcbiAgXHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGUxOCA9IGAgIFxyXG4gIFxyXG4gIDxwPjxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly90aGVuZXh0d2ViLmNvbS9pbnNpZGVyLzIwMTkvMDUvMjAvcmVwb3J0LWdvb2dsZS1icmVha3MtdXAtd2l0aC1odWF3ZWktY3V0dGluZy1hY2Nlc3MtdG8tYW5kcm9pZC1zZXJ2aWNlcy1hbmQtYXBwcy9cIj5odHRwczovL3RoZW5leHR3ZWIuY29tL2luc2lkZXIvMjAxOS8wNS8yMC9yZXBvcnQtZ29vZ2xlLWJyZWFrcy11cC13aXRoLWh1YXdlaS1jdXR0aW5nLWFjY2Vzcy10by1hbmRyb2lkLXNlcnZpY2VzLWFuZC1hcHBzLzwvYT4gXHJcbiAgPC9wPlxyXG4gIFxyXG5cclxuYDtcclxuICAgIHZhciBibG9ncG9zdDE3ID0gYCBcclxuICBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlF1YW50dW0gY29tcHV0ZXJzIHdvbuKAmXQgcmVwbGFjZSB0b2RheeKAmXMgdHJhZGl0aW9uYWwgY29tcHV0ZXJzLCBidXQgdGhleSB3aWxsIGJlY29tZSBtYWluc3RyZWFtIHdpdGhpbiBmaXZlIHllYXJzLCBhIHRvcCBleGVjdXRpdmUgaW4gY2hhcmdlIG9mIGVtZXJnaW5nIHRlY2hub2xvZ2llcyBhdCBJbnRlcm5hdGlvbmFsIEJ1c2luZXNzIE1hY2hpbmVzIENvcnAuIHByZWRpY3RlZC5cclxuXHJcblNwZWFraW5nIGF0IFRoZSBXYWxsIFN0cmVldCBKb3VybmFs4oCZcyBGdXR1cmUgb2YgRXZlcnl0aGluZyBGZXN0aXZhbCBXZWRuZXNkYXksIEFydmluZCBLcmlzaG5hLCBzZW5pb3IgdmljZSBwcmVzaWRlbnQgb2YgY2xvdWQgYW5kIGNvZ25pdGl2ZSBzb2Z0d2FyZSwgcHJlZGljdGVkIHRoYXQgd2l0aCBxdWFudHVtIGNvbXB1dGluZywgYmF0dGVyaWVzIGNvdWxkIGxhc3Qg4oCcYSB0aG91c2FuZCB0aW1lcyBsb25nZXLigJ0gYW5kIGFpcnBsYW5lcyBjb3VsZCBiZWNvbWUgbGlnaHRlci5cclxuXHJcbuKAnEFsbCBvZiB0aGVzZSB1c2UgY2FzZXMsIEkgdGhpbmssIHdpbGwgZ2V0IHNvbHZlZCBpbiBhIGZldyB5ZWFycyzigJ0gTXIuIEtyaXNobmEgc2FpZC4g4oCcUGhhcm1hY2V1dGljYWxzIGFuZCBkcnVnIGRpc2NvdmVyeSBpcyBhIG11Y2ggaGFyZGVyIHByb2JsZW0u4oCdXHJcblxyXG5RdWFudHVtIGNvbXB1dGVycyBoYXZlIHRoZSBwb3RlbnRpYWwgdG8gc29ydCB0aHJvdWdoIGEgdmFzdCBudW1iZXIgb2YgcG9zc2libGUgc29sdXRpb25z4oCUbW9yZSB0aGFuIHRoZSBudW1iZXIgb2YgYXRvbXMgaW4gdGhlIHVuaXZlcnNl4oCUd2l0aCB0aGUgY2FsY3VsYXRpb25zIGJlaW5nIGNvbXBsZXRlZCBhcyBmYXN0IGFzIGEgZnJhY3Rpb24gb2YgYSBzZWNvbmQuXHJcbjxiciAvPjxiciAvPlxyXG5SZXNwb25kaW5nIHRvIGNyaXRpY2lzbSBmcm9tIHJlc2VhcmNoZXJzIHRoYXQgdGhlIFUuUy4gbWF5IGJlIGZhbGxpbmcgYmVoaW5kIENoaW5hIGFuZCB0aGUgRXVyb3BlYW4gVW5pb24gdG8gaW52ZXN0IGluIHF1YW50dW0gY29tcHV0aW5nLCBNci4gS3Jpc2huYSBzYWlkIHRoZSBVLlMuIGlzIGN1cnJlbnRseSBzbGlnaHRseSBhaGVhZCBidXQgZG9lcyBuZWVkIHRvIGludmVzdCBtb3JlLiBDaGluYSBpcyBjb25zdHJ1Y3RpbmcgYSAkMTAgYmlsbGlvbiByZXNlYXJjaCBjZW50ZXIgZm9yIHF1YW50dW0gYXBwbGljYXRpb25zLiBUaGUgRXVyb3BlYW4gVW5pb24gYW5ub3VuY2VkIGluIDIwMTYgdGhhdCBpdCBpcyBjcmVhdGluZyBhIOKCrDEgYmlsbGlvbiBlZmZvcnQgb24gZm91ciBhcmVhcyBvZiBxdWFudHVtIHRlY2hub2xvZ3kgaW5jbHVkaW5nIGNvbXB1dGluZyBhbmQgY29tbXVuaWNhdGlvbi5cclxuXHJcbk1yLiBLcmlzaG5hLCB3aG8gYWxzbyBvdmVyc2VlcyB0aGUgaW50ZWdyYXRpb24gb2YgSUJN4oCZcyAkMzMgYmlsbGlvbiBhY3F1aXNpdGlvbiBvZiBSZWQgSGF0IEluYy4gc2FpZCBoZSBleHBlY3RzIHRoZSBkZWFs4oCUSUJN4oCZcyBsYXJnZXN0IGFjcXVpc2l0aW9uIHRvIGRhdGXigJR0byBjbG9zZSBhcm91bmQgSnVuZS4gVGhlIGNvbXBhbnkgaGFzIHJlY2VpdmVkIGFwcHJvdmFsIGZyb20gdGhlIFUuUy4gRGVwYXJ0bWVudCBvZiBKdXN0aWNlIGZvciB0aGUgZGVhbCwgYW5kIGlzIG5vdyBhd2FpdGluZyBhcHByb3ZhbCBmcm9tIHRoZSBFdXJvcGVhbiBVbmlvbi5cclxuPGJyIC8+PGJyIC8+XHJcbkFza2VkIGFib3V0IHJlc3RydWN0dXJpbmcgYWZ0ZXIgdGhlIGFjcXVpc2l0aW9uIGlzIGNvbXBsZXRlZCwgTXIuIEtyaXNobmEgc2FpZCB0aGF0IGl0IHdvdWxkbuKAmXQgcmVzdWx0IGluIGFueSBqb2IgY3V0cyBhdCBSZWQgSGF0LlxyXG7igJxUaGlzIGlzIGEgdmFsdWUgZGVhbCwgbm90IGFib3V0IGNvc3Qgc3luZXJneS4gVGhleSBbUmVkIEhhdF0gcnVuIG9uIG11bHRpcGxlIHB1YmxpYyBjbG91ZHMuIEl04oCZcyBnb3QgdG8gYmUgcHJlc2VydmVkLOKAnSBoZSBzYWlkLlxyXG5JbiB0aGUgcHVibGljIGNsb3VkIHNwYWNlLCBJQk0gdHJhaWxzIHJpdmFscyBBbWF6b24gSW5jLiBhbmQgTWljcm9zb2Z0IENvcnAuIElCTSByYW5rZWQgZmlmdGggaW4gdGhlIHdvcmxkIGZvciBwdWJsaWMgY2xvdWQtaW5mcmFzdHJ1Y3R1cmUgc2VydmljZSBpbiAyMDE3LCBhY2NvcmRpbmcgdG8gZGF0YSBmcm9tIEdhcnRuZXIgSW5jLiwgYmVoaW5kIEFtYXpvbiwgTWljcm9zb2Z0LCBBbGliYWJhIEdyb3VwIEhvbGRpbmcgSW5jLiBhbmQgR29vZ2xlIEluYy5cclxuPGJyIC8+PGJyIC8+XHJcbkJ1dCBNci4gS3Jpc2huYSBzYWlkIHRoZSBhY3F1aXNpdGlvbiBjcmVhdGVzIGEgYmlnIG9wcG9ydHVuaXR5IGZvciBJQk0gdG8gZXhwYW5kIGluIHRoZSBzby1jYWxsZWQgaHlicmlkIGNsb3VkIHNwYWNlIHdoZXJlIGN1c3RvbWVycyBydW4gc29tZSBzb2Z0d2FyZSBpbiB0aGVpciBvd24gZGF0YSBjZW50ZXJzIGJ1dCBhbHNvIHVzZSBjbG91ZCBzZXJ2aWNlcy4gIOKAnEnigJltIG5vdCB0cnlpbmcgdG8gY2F0Y2ggdXAgdG8gQW1hem9uIGFuZCBNaWNyb3NvZnQs4oCdIGhlIHNhaWQuIOKAnFRoZXkgYXJlIGdvaW5nIGRvd24gdGhlIHBhdGggb2YgcHVibGljIGNsb3VkIGFuZCB3ZSBhcmUgZ29pbmcgdG8gYmUgaHlicmlkLiBUaGVyZSBpcyBzbyBtdWNoIGludmVzdG1lbnQgdGhhdOKAmXMgYWxyZWFkeSBoYXBwZW5pbmcgYW5kIHRoZXJlIGlzIHNvIG11Y2ggZGF0YSB0aGF0IGNhbuKAmXQgc2l0IG9uIHRoZSBwdWJsaWMgY2xvdWQuIEkgYmVsaWV2ZSB0aGVyZSBpcyBzcGFjZSBmb3IgYWxsIG9mIHVzLOKAnSBoZSBzYWlkLiA8c3VwPjE8L3N1cD48L3A+XHJcbiAgYDtcclxuICAgIHZhciBibG9nY2l0ZTE3ID0gYCAgXHJcbiAgXHJcbjxwPjxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud3NqLmNvbS9hcnRpY2xlcy9pYm0tc29mdHdhcmUtZXhlYy1wcmVkaWN0cy1xdWFudHVtLWNvbXB1dGVycy13aWxsLWJlY29tZS1tYWluc3RyZWFtLWluLWZpdmUteWVhcnMtMTE1NTg1NDgxNjBcIj5odHRwczovL3d3dy53c2ouY29tL2FydGljbGVzL2libS1zb2Z0d2FyZS1leGVjLXByZWRpY3RzLXF1YW50dW0tY29tcHV0ZXJzLXdpbGwtYmVjb21lLW1haW5zdHJlYW0taW4tZml2ZS15ZWFycy0xMTU1ODU0ODE2MDwvYT4gXHJcbjwvcD5cclxuICBgO1xyXG5cclxuICAgIHZhciBibG9ncG9zdDE2ID0gYCBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBcclxuPGJyIC8+PGJyIC8+IDxzdXA+PC9zdXA+PC9wPlxyXG5gO1xyXG4gICAgdmFyIGJsb2djaXRlMTYgPSBgICBcclxuPHA+PGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIj48L2E+IFxyXG48L3A+XHJcblxyXG5gO1xyXG4gICAgdmFyIGJsb2dwb3N0MTUgPSBgIFxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG48L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+QnV0LCBpbnRlcmVzdGluZ2x5LCB0aGUgd29yZCDigJxibG9ja2NoYWlu4oCdIGRvZXNu4oCZdCBhY3R1YWxseSBhcHBlYXIgaW4gdGhlIG9yaWdpbmFsIGJpdGNvaW4gd2hpdGUgcGFwZXIsIHJlbGVhc2VkIGJhY2sgaW4gMjAwOC4gUmF0aGVyLCB0aGUgd2hpdGUgcGFwZXIgdXNlcyB0aGUgd29yZHMg4oCcYmxvY2vigJ0gYW5kIOKAnGNoYWlu4oCdIHNlcGFyYXRlbHkgbWFueSB0aW1lcy5cclxuXHJcbkl0IGRlc2NyaWJlcyB0aGUgd29yZCDigJxibG9ja+KAnSBhcyB0aGUgdmVoaWNsZSBmb3IgYSBidW5kbGUgYml0Y29pbiB0cmFuc2FjdGlvbnMuIFRoZW4sIHRoZXNlIGJsb2NrcyBvZiBhcmUgbGlua2VkIHRvZ2V0aGVyLCBmb3JtaW5nIGEg4oCcY2hhaW7igJ0gb2Yg4oCcYmxvY2tzLuKAnSA8YnIgLz48YnIgLz48c3VwPjE8L3N1cD48L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGUxNSA9IGAgIFxyXG5cclxuIFxyXG48cD4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2JpdGNvaW4tYW5kLWJsb2NrY2hhaW4tdGhlLXRhbmdsZWQtaGlzdG9yeS1vZi10d28tdGVjaC1idXp6d29yZHNcIj5odHRwczovL3d3dy5jb2luZGVzay5jb20vYml0Y29pbi1hbmQtYmxvY2tjaGFpbi10aGUtdGFuZ2xlZC1oaXN0b3J5LW9mLXR3by10ZWNoLWJ1enp3b3JkczwvYT4gXHJcbjwvcD5cclxuYDtcclxuXHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTQgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gXHJcbiAgPC9wPlxyXG4gXHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gPHN1cD48L3N1cD48L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGUxNCA9IGAgXHJcbiAgICA8cD48YSAgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIlwiPjwvYT4gXHJcbiAgICA8L3A+XHJcbmA7XHJcblxyXG5cclxuICAgIHZhciBibG9ncG9zdDEzID0gYCBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiA8c3VwPjwvc3VwPjwvcD5cclxuYDtcclxuICAgIHZhciBibG9nY2l0ZTEzID0gYCAgXHJcbjxwPjxhICB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiXCI+PC9hPiBcclxuPC9wPlxyXG5cclxuYDtcclxuXHJcblxyXG4gICAgdmFyIGJsb2dwb3N0MTIgPSBgIFxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG48L3A+XHJcblxyXG48cCBjbGFzcz1cInF1b3RlXCI+IDxzdXA+PC9zdXA+PC9wPlxyXG5gO1xyXG4gICAgdmFyIGJsb2djaXRlMTIgPSBgICBcclxuPHA+PGEgIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIj48L2E+IFxyXG48L3A+XHJcblxyXG5gO1xyXG4gICAgdmFyIGJsb2dwb3N0MTEgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGUgPGk+Z2xvYmFsIHF1ZXN0PC9pPiBmb3IgU2F0b3NoaSBOYWthbW90bydzIGlkZW50aXR5IG5vdyByZXZlYWxzIGFuIGludGVyZXN0aW5nIG5ldyBwbG90IHR3aXN0LiBDb250cmFzdGluZyB3aXRoIG15ICBNYXkgNHRoIGFuZCA1dGggcG9zdCBhcnRpY2xlcywgdGhpcyB0aGVvcnkgYXBwZWFycyB0byBob2xkIHdhdGVyIC4uLiBcclxuICA8L3A+IFxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbk9uZSBvZiB0aGUgbW9zdCBlbmR1cmluZyBteXN0ZXJpZXMgb2YgbW9kZXJuIHRpbWVzIGhhcyBwcm9kdWNlZCBhbm90aGVyIGVudGhyYWxsaW5nIHR3aXN0LiBTYXRvc2hpIE5ha2Ftb3RvLCBCaXRjb2lu4oCZcyBwc2V1ZG9ueW1vdXMgYW5kIGVuaWdtYXRpYyBjcmVhdG9yLCBoYXMgbm90IGJlZW4gc2VlbiBvbmxpbmUgaW4gbW9yZSB0aGFuIGVpZ2h0IHllYXJzLiBFdmlkZW5jZSBoYXMgbm93IHN1cmZhY2VkIHRoYXQgcG9pbnRzIHRvIGEgbmV3IFNhdG9zaGkgY2FuZGlkYXRlLCB3aG9zZSBrbm93biBsaWZlIGhhcyBhIG51bWJlciBvZiBwYXJhbGxlbHMgd2l0aCB0aGF0IG9mIEJpdGNvaW7igJlzIGludmVudG9yLiBIaXMgbmFtZSBpcyBQYXVsIExlIFJvdXggYW5kLCBpZiBwcm92ZW4gdG8gYmUgU2F0b3NoaSwgdGhlcmUgaXMgYSBnb29kIHJlYXNvbiB3aHkgaGlzIDEgbWlsbGlvbiBCVEMgaGFzbuKAmXQgbW92ZWQg4oCTIHRoZSBSaG9kZXNpYW4gaGFzIGJlZW4gaW4gamFpbCBzaW5jZSAyMDEyLjxzdXA+MTwvc3VwPjwvcD5cclxuYDtcclxuICAgIHZhciBibG9nY2l0ZTExID0gYCAgXHJcbjxwPjEuPGEgdGFyZ2V0PVwiX2JsYW5rXCIgIGhyZWY9XCJodHRwczovL25ld3MuYml0Y29pbi5jb20vc2F0b3NoaS1uYWthbW90by1jb3VsZC1iZS1jcmltaW5hbC1tYXN0ZXJtaW5kLXBhdWwtbGUtcm91eC9cIj5odHRwczovL25ld3MuYml0Y29pbi5jb20vc2F0b3NoaS1uYWthbW90by1jb3VsZC1iZS1jcmltaW5hbC1tYXN0ZXJtaW5kLXBhdWwtbGUtcm91eC88L2E+IFxyXG48L3A+IFxyXG5gO1xyXG4gICAgdmFyIGJsb2dwb3N0MTAgPSBgIFxyXG48cCBjbGFzcz1cInF1b3RlXCI+PGk+Qml0Y29pbiBpcyBsaWtlIGdvbGQgaW4gbWFueSB3YXlzLiBMaWtlIGdvbGQsIEJpdGNvaW4gY2Fubm90IHNpbXBseSBiZSBjcmVhdGVkIGFyYml0cmFyaWx5LiBHb2xkIG11c3QgYmUgbWluZWQgb3V0IG9mIHRoZSBncm91bmQsIGFuZCBCaXRjb2luIG11c3QgYmUgbWluZWQgdmlhIGRpZ2l0YWwgbWVhbnMuIExpbmtlZCB3aXRoIHRoaXMgcHJvY2VzcyBpcyB0aGUgc3RpcHVsYXRpb24gc2V0IGZvcnRoIGJ5IHRoZSBmb3VuZGVycyBvZiBCaXRjb2luIHRoYXQsIGxpa2UgZ29sZCwgaXQgaGF2ZSBhIGxpbWl0ZWQgYW5kIGZpbml0ZSBzdXBwbHkuIEluIGZhY3QsIHRoZXJlIGFyZSBvbmx5IDIxIG1pbGxpb24gQml0Y29pbnMgdGhhdCBjYW4gYmUgbWluZWQgaW4gdG90YWwuIE9uY2UgbWluZXJzIGhhdmUgdW5sb2NrZWQgdGhpcyBtYW55IEJpdGNvaW5zLCB0aGUgcGxhbmV0J3Mgc3VwcGx5IHdpbGwgZXNzZW50aWFsbHkgYmUgdGFwcGVkIG91dCwgdW5sZXNzIEJpdGNvaW4ncyBwcm90b2NvbCBpcyBjaGFuZ2VkIHRvIGFsbG93IGZvciBhIGxhcmdlciBzdXBwbHkuIEFsbCBjb25maXJtZWQgQml0Y29pbiB0cmFuc2FjdGlvbnMgYXJlIHJlY29yZGVkIGluIHRoZSBibG9ja2NoYWluLiBUaGUgYmxvY2tjaGFpbiBpcyBkZXNjcmliZWQgYXMgYSBzaGFyZWQgcHVibGljIGxlZGdlciBvbiB3aGljaCB0aGUgZW50aXJlIEJpdGNvaW4gbmV0d29yayByZWxpZXMuPC9pPiA8c3VwPjE8L3N1cD48L3A+XHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Tb21ldGltZSBuZWFyIDIwMjAsIHRoZSBydWxlcyBvZiBjcnlwdG8tbG9naWMgYmVnaW4gdG8gYmVuZCAuLi4gXHJcbjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBJdCBtYXkgc2VlbSB0aGF0IHRoZSBncm91cCBvZiBpbmRpdmlkdWFscyBtb3N0IGRpcmVjdGx5IGFmZmVjdGVkIGJ5IHRoZSBsaW1pdCBvZiB0aGUgQml0Y29pbiBzdXBwbHkgd2lsbCBiZSB0aGUgQml0Y29pbiBtaW5lcnMgdGhlbXNlbHZlcy4gT24gb25lIGhhbmQsIHRoZXJlIGFyZSBkZXRyYWN0b3JzIG9mIHRoZSBCaXRjb2luIGxpbWl0YXRpb24gd2hvIHRoYXQgc2F5IHRoYXQgbWluZXJzIHdpbGwgYmUgZm9yY2VkIGF3YXkgZnJvbSB0aGUgYmxvY2sgcmV3YXJkcyB0aGV5IHJlY2VpdmUgZm9yIHRoZWlyIHdvcmsgb25jZSB0aGUgQml0Y29pbiBzdXBwbHkgaGFzIHJlYWNoZWQgMjEgbWlsbGlvbiBpbiBjaXJjdWxhdGlvbi4gSW4gdGhpcyBjYXNlLCB0aGVzZSBtaW5lcnMgbWF5IG5lZWQgdG8gcmVseSBvbiB0cmFuc2FjdGlvbiBmZWVzIGluIG9yZGVyIHRvIG1haW50YWluIG9wZXJhdGlvbnMuIEJpdGNvaW4uY29tIHBvaW50cyB0byBhbiBhcmd1bWVudCB0aGF0IG1pbmVycyB3aWxsIHRoZW4gZmluZCB0aGUgcHJvY2VzcyB1bmFmZm9yZGFibGUsIGxlYWRpbmcgdG8gYSByZWR1Y3Rpb24gaW4gdGhlIG51bWJlciBvZiBtaW5lcnMsIGEgY2VudHJhbGl6YXRpb24gcHJvY2VzcyBvZiB0aGUgQml0Y29pbiBuZXR3b3JrLCBhbmQgbnVtZXJvdXMgbmVnYXRpdmUgZWZmZWN0cyBvbiB0aGUgQml0Y29pbiBzeXN0ZW0uIDxzdXA+Mjwvc3VwPjwvcD5cclxuXHJcblxyXG5gO1xyXG4gICAgdmFyIGJsb2djaXRlMTAgPSBgICBcclxuXHJcbiAgPHA+MS5cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9ibG9ja2NoYWlucy1kb250LXNjYWxlLW5vdC10b2RheS1hdC1sZWFzdC1idXQtdGhlcmUtcy1ob3BlLTJjYjQzOTQ2NTUxYVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vaGFja2Vybm9vbi5jb20vYmxvY2tjaGFpbnMtZG9udC1zY2FsZS1ub3QtdG9kYXktYXQtbGVhc3QtYnV0LXRoZXJlLXMtaG9wZS0yY2I0Mzk0NjU1MWE8L2E+aHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOS8wNC8yOC9iaXRjb2luLWJ1bGwtdG9tLWxlZS1zYXlzLW5ldy1jcnlwdG8taGlnaHMtbGlrZWx5LWJ5LTIwMjAuaHRtbFxyXG4gIDwvcD5cclxuPHA+MS5cclxuPGEgaHJlZj1cImh0dHBzOi8vd3d3LmludmVzdG9wZWRpYS5jb20vdGVjaC93aGF0LWhhcHBlbnMtYml0Y29pbi1hZnRlci0yMS1taWxsaW9uLW1pbmVkL1wiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmludmVzdG9wZWRpYS5jb20vdGVjaC93aGF0LWhhcHBlbnMtYml0Y29pbi1hZnRlci0yMS1taWxsaW9uLW1pbmVkLzwvYT4gXHJcbjwvcD5cclxuYFxyXG4gICAgdmFyIGJsb2dwb3N0OSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkxpbnVzIFRvcnZhbGRzJyBncmVhdCBjb250cmlidXRpb24gbm93IGV4dGVuZHMgdG8gTWljcm9zb2Z0IDEwLCByYXRoZXIgdGhhbiB0aGUgcGFzdCBjb3VwbGUgeWVhcidzIGVtdWxhdGVkIG1vdW50aW5nLiBcclxuICA8L3A+XHJcbiBcclxuPHAgY2xhc3M9XCJxdW90ZVwiPldpbmRvd3MgMTAgd2lsbCBzb29uIGluY2x1ZGUgYSBidWlsdC1pbiBMaW51eCBrZXJuZWwgdXBkYXRlZCB0aHJvdWdoIFdpbmRvd3MgVXBkYXRlLiBXaW5kb3dzIGl0c2VsZiB3aWxsIHN0aWxsIGJlIGJhc2VkIG9uIHRoZSBXaW5kb3dzIGtlcm5lbCwgb2YgY291cnNlLiBUaGUgTGludXgga2VybmVsIHdpbGwgcG93ZXIgdGhlIFdpbmRvd3MgU3Vic3lzdGVtIGZvciBMaW51eCAyIChXU0wgMikgYW5kIGxldCB5b3UgcnVuIGV2ZW4gbW9yZSBMaW51eCBhcHBsaWNhdGlvbnMgb24gV2luZG93cyAxMC5cclxuPGJyIC8+PGJyIC8+XHJcbldTTCB2ZXJzaW9uIDEgd2FzIHBvd2VyZnVsLCBidXQgaXQgcmVsaWVkIG9uIGVtdWxhdGlvbiB0byBydW4gTGludXggc29mdHdhcmUuIFRoYXQgcHJldmVudGVkIG1vcmUgY29tcGxleCBMaW51eCBhcHBsaWNhdGlvbnPigJRsaWtlIERvY2tlcuKAlGZyb20gcnVubmluZyBvbiBXaW5kb3dzLiBXU0wgMiB3aWxsIGJlIG1vcmUgcG93ZXJmdWwgYW5kIHdpbGwgcnVuIExpbnV4IHNvZnR3YXJlIHVzaW5nIGFuIGFjdHVhbCBMaW51eCBrZXJuZWwuPHN1cD4xPC9zdXA+PC9wPlxyXG48cD5cclxuVGhpcywgYWxvbmcgd2l0aCAyMDE5IEdvb2dsZSBDaHJvbWVib29rcycgY29tbWFuZC1saW5lIExpbnV4IGRldmVsb3BtZW50IGVudmlyb25tZW50cyAtLSBIb29yYXksIHRoZSBVbml2ZXJzZSBoYXMgZmluYWxseSBjb252ZXJnZWQhXHJcbjwvcD5cclxuYDtcclxuICAgIHZhciBibG9nY2l0ZTkgPSBgICBcclxuPHA+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmhvd3RvZ2Vlay5jb20vNDE0MDM2LzIwMTktaXMtdGhlLXllYXItb2YtbGludXgtb24tdGhlLWRlc2t0b3AvXCI+aHR0cHM6Ly93d3cuaG93dG9nZWVrLmNvbS80MTQwMzYvMjAxOS1pcy10aGUteWVhci1vZi1saW51eC1vbi10aGUtZGVza3RvcC88L2E+IFxyXG48L3A+XHJcbiBcclxuYDtcclxuICAgIHZhciBibG9ncG9zdDggPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gXHJcbiAgPC9wPlxyXG4gXHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gPHN1cD48L3N1cD48L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGU4ID0gYCAgXHJcbjxwPjxhIGhyZWY9XCJcIj48L2E+IFxyXG48L3A+XHJcbiBcclxuYDtcclxuXHJcblxyXG4gICAgdmFyIGJsb2dwb3N0NyA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiAgQlRDIHNtYXJ0IGNvbnRyYWN0IGFiaWxpdHkgbm93IGdldHMgYSBib29zdCwgYXMgaXQgbG9va3MgbGlrZSBSICYgRCBoYXMgYmVlbiBidXN5IGxhdGVseTpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIFRoZSB0d28gcHJvcG9zYWxzLCBhbm5vdW5jZWQgb24gdGhlIGJpdGNvaW4gZGV2ZWxvcGVyIGVtYWlsIGxpc3QsIGRlc2NyaWJlIFRhcHJvb3QsIGEgY29kZSBjaGFuZ2UgZGVzaWduZWQgdG8gaW5jcmVhc2UgYml0Y29pbuKAmXMgcHJpdmFjeS4gVGFwcm9vdCBpcyBleHBlY3RlZCB0byBiZSBidW5kbGVkIHRvZ2V0aGVyIHdpdGggYW4gdXBncmFkZSBjYWxsZWQgU2Nobm9yciBpbiBhIHNvZnQgZm9yayB0aGF0IGRldmVsb3BlcnMgaGF2ZSBiZWVuIGxvb2tpbmcgaW50byBmb3Igc29tZSB0aW1lLCBwYXZpbmcgdGhlIHdheSBmb3IgcHJpdmFjeSBhbmQgc2NhbGFiaWxpdHkgaW1wcm92ZW1lbnRzIHRvIGJpdGNvaW4uXHJcbjxiciAvPjxiciAvPlxyXG5EZXZlbG9wZXJzIGhhdmUgbG9uZyBiZWVuIHRoaW5raW5nIGFib3V0IGhvdyB0byBhcnJhbmdlIHRoaXMgcGFydGljdWxhciB1cGdyYWRlLiBUaGVyZSBoYXZlIGJlZW4gYSBudW1iZXIgb2YgcHJvcG9zZWQgY2hhbmdlcyB0byBiaXRjb2luIG92ZXIgdGhlIHllYXJzIGFuZCwgYXMgdGhleSBhcmUgYWxsIHJlbGF0ZWQsIGl0IG1ha2VzIHNlbnNlIHRvIGltcGxlbWVudCB0aGVtIHRvZ2V0aGVyLiBUaGF0IGluY2x1ZGVzIE1lcmtlbGl6ZWQgQWJzdHJhY3QgU3ludGF4IFRyZWVzIChNQVNUKSwgYWRkaW5nLCBpbXByb3ZlZCBiaXRjb2luIHNtYXJ0IGNvbnRyYWN0cywgU2Nobm9yciBzaWduYXR1cmVzLCB3aGljaCBhZGRzIGFub3RoZXIgd2F5IHRvIHNpZ24gYml0Y29pbiB0cmFuc2FjdGlvbnMsIGFuZCBUYXByb290LCB3aGljaCBhZGRzIGV2ZW4gYmV0dGVyIHByaXZhY3kuPHN1cD4xPC9zdXA+XHJcbjwvcD5cclxuXHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGU3ID0gYCBcclxuPHA+MS48YSBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL25ldy1iaXBzLWhpbnQtYXQtdXBjb21pbmctdGFwcm9vdC1iaXRjb2luLXNvZnQtZm9ya1wiPmh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9uZXctYmlwcy1oaW50LWF0LXVwY29taW5nLXRhcHJvb3QtYml0Y29pbi1zb2Z0LWZvcms8L2E+XHJcbjwvcD4gXHJcblxyXG5gO1xyXG4gICAgdmFyIGJsb2dwb3N0NiA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkJpdGNvaW4ncyBiYXJlIHNpbXBsaWNpdHktLWRlc2lnbmVkIG1vcmUgdGhhbiB0ZW4geWVhcnMgYWdvLCBwdWJsaXNoZWQgT2N0b2JlciAzMSwgMjAwOC0taGFzIHRyYWRpdGlvbmFsbHkgc2VydmVkIGFzIGEgc3RyZW5ndGggb2YgcmVsaWFiaWxpdHkgaW4gYW4gdW5jaGFydGVkIGluZHVzdHJ5IGZpZWxkLiBZZXQsIGluIGEgY29tcGxleCBhbmQgZGVtYW5kaW5nIFRlY2ggd29ybGQsIG90aGVycyB0b29rIHRoZSBzcG90bGlnaHQtLWFzIHRoZSBCaXRjb2luIGRpc3RyaWJ1dGVkIGxlZGdlciBoYXMgYmVlbiBjb250cmFzdGVkIHdpdGggRXRoZXJldW0ncyBjb21wbGV4IHNjcmlwdGluZyBsYW5ndWFnZSwgU29saWRpdHksIHdoaWNoIHByb3ZpZGVzIG11bHRpLXZhcmlhdGUgPGk+U21hcnQgQ29udHJhY3RzPC9pPiB0aGF0IGFyZSB3ZWxsLXN1aXRlZCBmb3IgRGlzdHJpYnV0ZWQgQXBwcywgPGk+REFQUHM8L2k+IGFuZCBnZW5lcmFsbHkgZm9yIGZpbmFuY2lhbC1jbGVyaWNhbC1sZWdhbCBkb2N1bWVudHMuIEhvd2V2ZXIsIHRoZSBvbmNlIGJlbGl0dGxlZCBzaW1wbGUsIGJ1dCByZWxpYWJsZSwgZGlzdHJpYnV0ZWQgYmxvY2tjaGFpbiBsZWRnZXIgbGV2ZXJhZ2VzIHRoaXJkLXBhcnR5IHNtYXJ0IGNvbnRyYWN0aW5nOlxyXG4gIDwvcD5cclxuIFxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbkV0aGVyZXVtIGhhcyBiZWNvbWUgdGhlIG1vc3QgcG9wdWxhciBibG9ja2NoYWluIGZvciBjcmVhdGluZyBzbWFydCBjb250cmFjdHMuIE9uZSBvZiB0aGUgbWFqb3IgZGVzaWduIGdvYWxzIG9mIHRoZSBFdGhlcmV1bSBwbGF0Zm9ybSB3YXMgdG8gc3VwcG9ydCBzbWFydCBjb250cmFjdHMuIEZyb20gdGhlIHN0YXJ0LCB0aGlzIHNldCBFdGhlcmV1bSBhcGFydCBmcm9tIEJpdGNvaW4sIHdoaWNoIHdhcyBjcmVhdGVkIGZpcnN0IGFuZCBmb3JlbW9zdCBhcyBhIGRpZ2l0YWwgY3VycmVuY3kgcGxhdGZvcm0uXHJcbjxiciAvPjxiciAvPlxyXG5BcyB0aGUgQml0Y29pbiBwcm90b2NvbCBoYXMgZXZvbHZlZCwgaXQgaGFzIGdhaW5lZCBzdXBwb3J0IGZvciBzbWFydCBjb250cmFjdHMuIFNtYXJ0IGNvbnRyYWN0IGZ1bmN0aW9uYWxpdHkgaXMgbm90IGFzIHByb2dyYW1tYWJsZSBhbmQgZXh0ZW5zaWJsZSBvbiBCaXRjb2luIGFzIGl0IGlzIG9uIEV0aGVyZXVtLiBIb3dldmVyLCB1c2luZyBmZWF0dXJlcyBhZGRlZCB0byBCaXRjb2luIHRocm91Z2ggaW1wcm92ZW1lbnQgcHJvcG9zYWxzLCBjZXJ0YWluIHNtYXJ0IGNvbnRyYWN0IGZ1bmN0aW9uYWxpdHkgY2FuIGJlIGFjaGlldmVkIHRocm91Z2ggQml0Y29pbiBzY3JpcHRpbmcuXHJcbjxiciAvPjxiciAvPlxyXG5Gb3IgUGFydGljbCwgdGhlIG1vc3QgaW1wb3J0YW50IHNtYXJ0IGNvbnRyYWN0IGZlYXR1cmUgaW4gQml0Y29pbiBpcyB0aGUgT1BfQ0hFQ0tMT0NLVElNRVZFUklGWSBvcGNvZGUsIHdoaWNoIHdhcyBpbnRyb2R1Y2VkIGJ5IFBldGVyIFRvZGQgYXMgQml0Y29pbiBJbXByb3ZlbWVudCBQcm9wb3NhbCAoQklQKSA2NS4gVGhlIG9wY29kZSBtYWtlcyBpdCBwb3NzaWJsZSB0byB3cml0ZSBzY3JpcHRzIHRoYXQgcHJldmVudCBmdW5kcyBpbiBhIG11bHRpLXNpZ25hdHVyZSB3YWxsZXQgZnJvbSBiZWluZyBzcGVudCB1bnRpbCBhIGNlcnRhaW4gc2lnbmF0dXJlIHBhdHRlcm4gaXMgaW1wbGVtZW50ZWQgb3IgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lIHBhc3Nlcy48c3VwPjE8L3N1cD48L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGU2ID0gYCAgXHJcbjxwPjEuPGEgaHJlZj1cImh0dHBzOi8vYml0Y29pbm1hZ2F6aW5lLmNvbS9hcnRpY2xlcy95ZXMtYml0Y29pbi1jYW4tZG8tc21hcnQtY29udHJhY3RzLWFuZC1wYXJ0aWNsLWRlbW9uc3RyYXRlcy1ob3cvXCI+aHR0cHM6Ly9iaXRjb2lubWFnYXppbmUuY29tL2FydGljbGVzL3llcy1iaXRjb2luLWNhbi1kby1zbWFydC1jb250cmFjdHMtYW5kLXBhcnRpY2wtZGVtb25zdHJhdGVzLWhvdy88L2E+IFxyXG48L3A+XHJcblxyXG48cD5XaGl0ZSBQYXBlcjxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vcGFydGljbC93aGl0ZXBhcGVyL2Jsb2IvbWFzdGVyL2RlY2VudHJhbGl6ZWQtcHJpdmF0ZS1tYXJrZXRwbGFjZS1kcmFmdC0wLjEucGRmXCI+aHR0cHM6Ly9naXRodWIuY29tL3BhcnRpY2wvd2hpdGVwYXBlci9ibG9iL21hc3Rlci9kZWNlbnRyYWxpemVkLXByaXZhdGUtbWFya2V0cGxhY2UtZHJhZnQtMC4xLnBkZjwvYT5cclxuPC9wPlxyXG5gO1xyXG4gICAgdmFyIGJsb2dwb3N0NSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuICA8L3A+XHJcbiAgICBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgVGhlIHNlbGYtcHJvY2xhaW1lZCBTYXRvc2hpLCBDcmFpZyBXcmlnaHQsIGlzIGJlaW5nIHN1ZWQgYnkgdGhlIEtsZWltYW4gZmFtaWx5IG9uIGJlaGFsZiBvZiB0aGUgbm93IGRlY2Vhc2VkIERhdmUgS2xlaW1hbiBhbmQgaGlzIGVzdGF0ZS4gVGhlIGxhd3N1aXQgYWNjdXNlcyBXcmlnaHQgb2YgZnJhdWQgYW5kIHRoZWZ0IG9mIOKAnG92ZXIgJDExIGJpbGxpb24gd29ydGggb2YgYml0Y29pbnMgYW5kIGludGVsbGVjdHVhbCBwcm9wZXJ0eSBmcm9tIHRoZSBlc3RhdGUgb2YgRGF2ZSBLbGVpbWFuIGFuZCBXJksgc2hvcnRseSBhZnRlciBEYXZl4oCZcyAyMDEzIGRlYXRoLuKAnSBMYXN0IHdlZWsgdGhlIGNvdXJ0IG9yZGVyZWQgV3JpZ2h0IHRvIGRpc2Nsb3NlIGJpdGNvaW4gYWRkcmVzc2VzIHRoYXQgYmVsb25nZWQgdG8gaGltIGJlZm9yZSBEZWNlbWJlciAyMDEzLiBUaGUgRmxvcmlkYSBNYWdpc3RyYXRlIG92ZXJzZWVpbmcgdGhlIGxhd3N1aXQsIEp1ZGdlIEJydWNlIFJlaW5oYXJ0LCBzaWduZWQgdGhlIG9yZGVyIGFuZCBnYXZlIFdyaWdodCBhIGZldyBkYXlzIHRvIHByb2R1Y2UgdGhlIGxpc3QuXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgU2luY2UgdGhlbiBhIGxpc3Qgb2YgYWRkcmVzc2VzIHRoYXQgd2VyZSBvbmNlIGZpbGVkIGluIGFuIG9ic2N1cmUgZmFzaGlvbiB3YXMgdW5zZWFsZWQgYW5kIFdyaWdodCBjbGFpbXMgdG8gaGF2ZSBtaW5lZCB0aGUgZmlyc3QgNzAgYml0Y29pbiBibG9ja3Mgc3RhcnRpbmcgZnJvbSB0aGUgR2VuZXNpcyBibG9jay4gQWZ0ZXIgdGhlIHJlZGFjdGVkIGxpc3Qgd2FzIHVuc2VhbGVkLCB0aGUgcmVzZWFyY2hlcnMgYXQgV2l6c2VjIGRlY2lkZWQgdG8gc3R1ZHkgdGhlIGFkZHJlc3NlcyBhbmQgd3JvdGUgYSBibG9nIHBvc3QgYWJvdXQgdGhlIHJlY2VudGx5IGRpc2Nsb3NlZCBmaWxlLiBXaXpzZWMgY2xhaW1zIHRoYXQgV3JpZ2h0IHNpbXBseSBjb3BpZWQgYW5kIHBhc3RlZCB0aGUgYWRkcmVzc2VzIGZyb20gdGhlIGZpcnN0IDcwIGJsb2NrcyBhbmQgYXNzZXJ0ZWQgdGhlIGFkZHJlc3NlcyBiZWxvbmdlZCB0byBoaW0gd2l0aG91dCBhbnkgY3J5cHRvZ3JhcGhpYyBwcm9vZi5cclxuPGJyIC8+PGJyIC8+XHJcbldpenNlYyBzYXlzIHRoZSBtb3Rpb24gYmVncyB0aGUgYmVsaWVmIHRoYXQgdGhlIHNlbGYtcHJvY2xhaW1lZCBpbnZlbnRvciBhY3RzIGFzIGlmIGhlIGlzIOKAnGlnbm9yYW50IGFib3V0IHRoZSBmdW5kYW1lbnRhbHMgb2YgaGlzIGludmVudGlvbi7igJ0g4oCcUGVyaGFwcyBXcmlnaHQgdGhpbmtzIHRoYXQgYmVpbmcgYSBiaXRjb2luIG1pbmVyIG1lYW5zIHBvaW50aW5nIGF0IGJpdGNvaW5zIGFuZCB5ZWxsaW5nIOKAmE1pbmUs4oCZ4oCdIHRoZSByZXNlYXJjaGVycyBqb2tpbmdseSByZW1hcmtlZC4gSW4gdGhlIGRvY3VtZW50LCBXcmlnaHTigJlzIGZpbGluZyBjb250aW51ZXMgdG8gYXNzZXJ0IHRoYXQgaGUgZGlkIG5vdCBrZWVwIHRyYWNrIG9mIHdoaWNoIEJpdGNvaW4gYmxvY2tzIGhlIG1pbmVkIGFuZCB0aGF0IGhlIGRvZXMgbm90IGtub3cgYW55IG9mIHRoZSBvdGhlciBCaXRjb2luIHB1YmxpYyBhZGRyZXNzZXMuIFRoZSBtb3Rpb24gZnVydGhlciBzdGF0ZXMgdGhhdCB0aGUgc2VsZi1zdHlsZWQgU2F0b3NoaSBkb2VzIG5vdCBoYXZlIGEgY29tcGxldGUgbGlzdCBvZiB0aGUgcHVibGljIGFkZHJlc3NlcyB0aGF0IGhlIG93bmVkIGFzIG9mIGFueSBkYXRlLjxzdXA+MTwvc3VwPlxyXG48L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGU1ID0gYCBcclxuPHA+MS48YSBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL25ldy1iaXBzLWhpbnQtYXQtdXBjb21pbmctdGFwcm9vdC1iaXRjb2luLXNvZnQtZm9ya1wiPmh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9uZXctYmlwcy1oaW50LWF0LXVwY29taW5nLXRhcHJvb3QtYml0Y29pbi1zb2Z0LWZvcmtcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jb2luZGVzay5jb20vbmV3LWJpcHMtaGludC1hdC11cGNvbWluZy10YXByb290LWJpdGNvaW4tc29mdC1mb3JrPC9hPlxyXG48L3A+XHJcbiBcclxuYDtcclxuXHJcblxyXG4gICAgdmFyIGJsb2dwb3N0NCA9IGAgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5TYXRvc2hpIE5ha2Ftb3RvLCB0aGUgb21uaS1wcmVzZW50IGxlZ2VuZCB0aGF0IGludHJvZHVjZWQgdGhlIGZpbmFsIGZyb250aWVyIGZvciBUcnVzdGxlc3MtYmFzZWQgY3J5cHRvY3VycmVuY2llcyBpcyB3b3J0aHkgb2YgdGhlIHdvcmxkJ3MgcmVzcGVjdC4gQnV0IHRoZSBQcnlpbmcgRXllcyBvZiB0aGUgdGVjaCBwYXBhcmF6emkgYXJlIG9uIHRoZSBhdHRhY2suIDxiciAvPjxiciAvPlNvbWUgY2hhcmFjdGVyIGRldmVsb3BtZW50OiAgXHJcbjwvcD5cclxuIFxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBUZW4geWVhcnMgYWdvIHRvZGF5LCBzb21lb25lIHVzaW5nIHRoZSBuYW1lIFNhdG9zaGkgTmFrYW1vdG8gc2VudCBhbiBhY2FkZW1pYyBwYXBlciB0byBhIGNyeXB0b2dyYXBoeSBtYWlsaW5nIGxpc3QgcHJvcG9zaW5nIGEgZm9ybSBvZiBkaWdpdGFsIGNhc2ggY2FsbGVkIFwiYml0Y29pbi5cIiBUaGUgcHNldWRvbnltb3VzIE5ha2Ftb3RvLCB3aG9zZSB0cnVlIGlkZW50aXR5IHJlbWFpbnMgdW5rbm93biwgZGVzY3JpYmVkIGFuIGlkZWEgZm9yIFwibWluaW5nXCIgYSBsaW1pdGVkIGFtb3VudCBvZiB0aGlzIHZpcnR1YWwgY3VycmVuY3kgdGhyb3VnaCBhIHBlZXItdG8tcGVlciBzY2hlbWUgdGhhdCB3b3VsZG4ndCBkZXBlbmQgb24gYSBiYW5rLCBnb3Zlcm5tZW50LCBvciBhbnkgb3RoZXIgY2VudHJhbCBhdXRob3JpdHkuIE9uY2UgcGVvcGxlIHN0YXJ0ZWQgdXNpbmcgYml0Y29pbiwgaXQgd291bGQgYmUgaW1wb3NzaWJsZSBmb3IgYSBnb3Zlcm5tZW50IHRvIHB1bGwgdGhlIHBsdWcsIGFzIGhhcHBlbmVkIHdpdGggcHJldmlvdXMgYXR0ZW1wdHMgdG8gY3JlYXRlIGRpZ2l0YWwgbW9uZXksIHN1Y2ggYXMgRS1Hb2xkLlxyXG48c3VwPjE8L3N1cD5cclxuPC9wPlxyXG48cD5Ib3dldmVyLCBzZWVraW5nIGEgbGlmZSBvZiBhbm9ueW1pdHkgY2FuIG9ubHkgc3RpciB1cCBmdXJ0aGVyIHRoZSBwYXBhcmF6emlzJyByZXNlYXJjaCBmZXJ2b3IuIFNvLCB0aGUgbGF0ZXN0IGF0dGVtcHQgb24gdGhlIGludmVudG9yJ3MgcHJpdmFjeSwgdGhlcmUgaXMgdGhlIGxhdGVzdCBjbGFpbTo8L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5UaGUgR290c2F0b3NoaS5jb20gZG9tYWluIHdhcyByZWdpc3RlcmVkIGluIE1heSAyMDE3LCBidXQgaGFzIGxhaW4gZG9ybWFudCB1bnRpbCBsYXN0IG1vbnRoLCB3aGVuIGFuIGFyY2hpdmVkIHNuYXBzaG90IG9mIHRoZSBzaXRlIHNob3dzIGl0IHRvIGhhdmUgYmVlbiBwcm9jbGFpbWluZyBTYXRvc2hp4oCZcyB1bnZlaWxpbmcgYXMgMTAgZGF5cyBhd2F5IHRoZW4uIEl04oCZcyBwb3NzaWJsZSB0aGF0IHRoZSBncmVhdCByZXZlYWwgd2lsbCByZW1haW4gZm9yZXZlciAxMCBkYXlzIGF3YXksIHRvIGZydXN0cmF0ZSB3YXRjaGVycyBob3BpbmcgZm9yIGEgdGhyaWxsaW5nIGRlbm91ZW1lbnQsIG9yIHRoZSBjb3VudGRvd24gbWF5IHJlYWNoIHplcm8gb25seSB0byByZXZlYWwgYSBuZXcgc2hpdGNvaW4sIHB1enpsZSBnYW1lLCBvciB0byBoYWlsIHRoZSBlZmZvcnRzIG9mIHRoZSBtYXJrZXRpbmcgYWdlbmN5IHRoYXQgZHJlYW1lZCB1cCB0aGUgc3R1bnQuPHN1cD4yPC9zdXA+XHJcbjwvcD5cclxuPHA+IFxyXG5DaGFubmVsaW5nIG91ciBhZG9yYXRpb24gb2YgU2F0b3NoaSBOYWthbW90byB0b3dhcmQgcmVzcGVjdCBpcyBhIGJ5Z29uZSBob3BlLCBidXQgdW53YXJyYW50ZWQgcGFwYXJhenppIGV4cG9zJmVhY3V0ZTtzIGNyb3NzIHRoZSBsaW5lIG9mIGRlY2VuY3ksIHNvIGxldCdzIHNlZSBpZiBTYXRvc2hpJ3MgY2xldmVybmVzcyB5ZXQgb25jZSBhZ2FpbiB0aHdhcnRzIHRoZSBwcnlpbmcgZXllcyE8L3A+XHJcbmA7XHJcbiAgICB2YXIgYmxvZ2NpdGU0ID0gYFxyXG48cD4wLiBOaWdodCBhdCB0aGUgUm94YnVyeTwvcD5cclxuPHA+MS48YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FmdGVyLTEwLXllYXJzLWJpdGNvaW4tY2hhbmdlZC1ldmVyeXRoaW5nLW5vdGhpbmcvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+T2N0LiAzMSwgMjAxOTogaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FmdGVyLTEwLXllYXJzLWJpdGNvaW4tY2hhbmdlZC1ldmVyeXRoaW5nLW5vdGhpbmcvPC9hPlxyXG48L3A+XHJcblxyXG48cD4yLiAgIDxhIGhyZWY9XCJodHRwczovL25ld3MuYml0Y29pbi5jb20vbmV3LXdlYnNpdGUtcHJvbWlzZXMtdG8tdW52ZWlsLXNhdG9zaGktbmFrYW1vdG8taW4tMTAtZGF5cy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL25ld3MuYml0Y29pbi5jb20vbmV3LXdlYnNpdGUtcHJvbWlzZXMtdG8tdW52ZWlsLXNhdG9zaGktbmFrYW1vdG8taW4tMTAtZGF5cy88L2E+XHJcbjwvcD5cclxuYDtcclxuICAgIHZhciBibG9ncG9zdDMgPSBgXHJcbiAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UmVrb2duaXRpb24sIGEgcHJlbWllciBBV1Mgc2VydmljZSwgc2hpbmVzIGFtb25nIGEgZmV3IGRvemVuIG90aGVyIEFJIHNvZnR3YXJlIHJlc291cmNlcywgbm90IHRvIG1lbnRpb24gUGxhdGZvcm1zLWFzLWEtU2VydmljZSwgeWV0IG5vdCB3aXRob3V0IGNvbnRyb3ZlcnN5OiBPbiB0aGUgb25lIGhhbmQsIEFJIGFsZ29yaXRobXMgbmVjZXNzYXJpbHkgcmVmbGVjdCB0aGUgYmlhc2VzIG9mIGl0cyBvcmlnaW4gbGFiLiBPbiB0aGUgb3RoZXIgaGFuZCwgUHJvdmlkZXJzIGxpa2UgQVdTJyBkZW1vY3JhdGl6aW5nIGFjY2VzcyB0byBldmVyeSByZXNlYXJjaGVyLCBwcm9mZXNzaW9uYWwsIGFuZCBzdHVkZW50IHRoZSB1bmxpbWl0ZWQgdXNlIG9mIHNvcGhpc3RpY2F0ZWQgYW5kIGV4cGVuc2l2ZSBBSSByZXNvdXJjZXM7IHRodXMgY2FuY2VsaW5nIG91dCBhbnkgcG90ZW50aWFsIGJpYXMgdGhyb3VnaCB0aGUgZGl2ZXJzaXR5IG9mIGluZGl2aWR1YWxzJyBhbmQgdGVhbXMnIHBhcnRpY2lwYXRpb24uICBcclxuICAgIDxiciAvPjxiciAvPlxyXG4gICAgPGltZyAgIGNsYXNzPVwiem9vbVwiIHNyYz1cImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS90bW0tbm92L2ltZy9yZWtvZ25pdGlvbi5qcGdcIj4gIFxyXG4gICAgPGJyIC8+PGJyIC8+XHJcbiAgICBBdCB0aGUgaGVhcnQgb2YgdGhlc2UgaGVhbHRoeSBwdWJsaWMgZGViYXRlcywgaXQncyB0aGUgcGFydGljdWxhciB1c2UtY2FzZXMgdGhhdCBleGVtcGxpZnkgdGhlIHNwZWN0cnVtIG9mIHRoZSBkZWJhdGUuIEZvciBpbnN0YW5jZSwgcG9saWNpbmcgcHJhY3RpY2UgYnkgYm90IGlzIGEgc3VyZSBleGFtcGxlLCBpZiBub3QgZm9yIHRoZSA8aT5Sb2JvQ29wPC9pPiBIb2xseXdvb2QgYWxsdXJlIC4uLiBBcyBhbHdheXMsIHRoZSBBSSdzIGFsZ29yaXRobSBiZWFycyB0aGUgaW1wcmludCBvZiB0aGUgY3JlYXRvcidzIGludGVudGlvbnM6IDwvcD5cclxuXHRcclxuXHQ8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG5cdEJ1dCBXYXNoaW5ndG9uIENvdW50eSBhbHNvIGJlY2FtZSBncm91bmQgemVybyBmb3IgYSBoaWdoLXN0YWtlcyBiYXR0bGUgb3ZlciB0aGUgdW5yZWd1bGF0ZWQgZ3Jvd3RoIG9mIHBvbGljaW5nIGJ5IGFsZ29yaXRobS4gRGVmZW5zZSBhdHRvcm5leXMsIGFydGlmaWNpYWwtaW50ZWxsaWdlbmNlIHJlc2VhcmNoZXJzIGFuZCBjaXZpbCByaWdodHMgZXhwZXJ0cyBhcmd1ZSB0aGF0IHRoZSB0ZWNobm9sb2d5IGNvdWxkIGxlYWQgdG8gdGhlIHdyb25nZnVsIGFycmVzdCBvZiBpbm5vY2VudCBwZW9wbGUgd2hvIGJlYXIgb25seSBhIHJlc2VtYmxhbmNlIHRvIGEgdmlkZW8gaW1hZ2UuIFJla29nbml0aW9u4oCZcyBhY2N1cmFjeSBpcyBhbHNvIGhvdGx5IGRpc3B1dGVkLCBhbmQgc29tZSBleHBlcnRzIHdvcnJ5IHRoYXQgYSBjYXNlIG9mIG1pc3Rha2VuIGlkZW50aXR5IGJ5IGFybWVkIGRlcHV0aWVzIGNvdWxkIGhhdmUgZGFuZ2Vyb3VzIGltcGxpY2F0aW9ucywgdGhyZWF0ZW5pbmcgcHJpdmFjeSBhbmQgcGVvcGxl4oCZcyBsaXZlcy48YnIgLz48YnIgLz5cclxuXHJcblNvbWUgcG9saWNlIGFnZW5jaWVzIGhhdmUgaW4gcmVjZW50IHllYXJzIHJ1biBmYWNpYWwtcmVjb2duaXRpb24gc2VhcmNoZXMgYWdhaW5zdCBzdGF0ZSBvciBGQkkgZGF0YWJhc2VzIHVzaW5nIHN5c3RlbXMgYnVpbHQgYnkgY29udHJhY3RvcnMgc3VjaCBhcyBDb2duaXRlYywgSURFTUlBIGFuZCBORUMuIEJ1dCB0aGUgcm9sbG91dCBieSBBbWF6b24gaGFzIG1hcmtlZCBwZXJoYXBzIHRoZSBiaWdnZXN0IHN0ZXAgaW4gbWFraW5nIHRoZSBjb250cm92ZXJzaWFsIGZhY2Utc2Nhbm5pbmcgdGVjaG5vbG9neSBtYWluc3RyZWFtLiBSZWtvZ25pdGlvbiBpcyBlYXN5IHRvIGFjdGl2YXRlLCByZXF1aXJlcyBubyBtYWpvciB0ZWNobmljYWwgaW5mcmFzdHJ1Y3R1cmUsIGFuZCBpcyBvZmZlcmVkIHRvIHZpcnR1YWxseSBhbnlvbmUgYXQgYmFyZ2Fpbi1iYXJyZWwgcHJpY2VzLiBXYXNoaW5ndG9uIENvdW50eSBzcGVudCBhYm91dCAkNzAwIHRvIHVwbG9hZCBpdHMgZmlyc3QgYmlnIGhhdWwgb2YgcGhvdG9zLCBhbmQgbm93LCBmb3IgYWxsIGl0cyBzZWFyY2hlcywgcGF5cyBhYm91dCAkNyBhIG1vbnRoLjxzdXA+MTwvc3VwPiBcclxuICAgIDwvcD5cclxuICAgIDxwPldoZXRoZXIgZ292ZXJubWVudCBzZXJ2aWNlcyBvciBjb21tZXJjaWFsIGVudGVycHJpc2UsIHRoZSBsYW5kc2NhcGUgIGlzIGNvbnZlcnRpbmcgPGk+ZW4gbWFzc2U8L2k+IHRoZSBtYW51YWwgYW5kIHRoZSBtdW5kYW5lIHRvIG1hY2hpbmUgbGVhcm5pbmcuICBQdWJsaWMgYWR2b2NhY3ksIG5vdy1nNSAyMyBtb3JlIHRoYW4gZXZlciwgY2FuIGhlbHAgZGlyZWN0IEEuSS4gdGVjaG5vbG9neSBhbmQgdXNlIHRvd2FyZCBhIG1vcmUgc29jaWV0eS1mcmllbmRseSBlbmRlYXZvciAuLi48L3A+XHJcblx0YDtcclxuICAgIHZhciBibG9nY2l0ZTMgPSBgIFxyXG4gXHJcblx0PHA+MS5cclxuXHQ8YSBocmVmPVwiaHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL3RlY2hub2xvZ3kvMjAxOS8wNC8zMC9hbWF6b25zLWZhY2lhbC1yZWNvZ25pdGlvbi10ZWNobm9sb2d5LWlzLXN1cGVyY2hhcmdpbmctbG9jYWwtcG9saWNlLz9ub3JlZGlyZWN0PW9uJnV0bV9zb3VyY2U9cG9ja2V0LW5ld3RhYiZ1dG1fdGVybT0uOGE4YTFiNzViOTRhXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2FzaGluZ3RvbnBvc3QuY29tL3RlY2hub2xvZ3kvMjAxOS8wNC8zMC9hbWF6b25zLWZhY2lhbC1yZWNvZ25pdGlvbi10ZWNobm9sb2d5LWlzLXN1cGVyY2hhcmdpbmctbG9jYWwtcG9saWNlLz9ub3JlZGlyZWN0PW9uJnV0bV9zb3VyY2U9cG9ja2V0LW5ld3RhYiZ1dG1fdGVybT0uOGE4YTFiNzViOTRhPC9hPlxyXG5cdDwvcD5cclxuICAgIFxyXG4gICAgYDtcclxuXHJcbiAgICB2YXIgYmxvZ3Bvc3QyID0gYCAgXHJcbiAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RXRoZXJldW0gRXRoZXIgYW5kIEJpdGNvaW4gaGF2ZSBwbGVudHkgaW4gY29tbW9uLCBpbmNsdWRpbmcgdGhlaXIgUHJvb2Ytb2YtV29yayBhcmNoaXRlY3R1cmUtLXJlcXVpcmluZyBNaW5pbmcgY29tcHV0YXRpb25hbGx5IGRpZmZpY3VsdCBtYXRoIHByb2JsZW1zIHRvIGNyZWF0ZSBzY2FyY2l0eSBhbmQgb3RoZXIgZnVuY3Rpb25zLiBUaGUgZG93bnNpZGUgaXMgdGhlIG5hdGlvbi1jb21wYXJhYmxlIGFtb3VudCBvZiBlbGVjdHJpY2l0eSBzcGVudCBlYWNoIHllYXIsIHdoaWNoIGluIG1hbnkgY2FzZXMgYXJlIHVucmVndWxhdGVkLCBjb2FsLWZpbGxlZCBlbmVyZ3kgc291cmNlcyBhY3Jvc3MgdGhlIGdsb2JlLiBUaGlzIGNvbW1vbmFsaXR5IHdpbGwgZW5kIG5leHQgbW9udGggd2hlbiB0aGUgRXRoZXJldW0gY3J5cHRvY3VycmVuY3kgd2lsbCB0cmFuc2l0aW9uIHRvIFByb29mLW9mLVN0YWtlIGFyY2hpdGVjdHVyZSwgdGhlIGxvbmctYWdvIGFuZCBoaWdobHkgYW50aWNpcGF0ZWQgRXRoZXJldW0gMi4wLlxyXG4gICAgPC9wPiBcclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgICBFdGhlcmV1bSBoYXMgYmVlbiBpbmNoaW5nIHRvd2FyZCBhIG1ham9yIHVwZ3JhZGUsIGR1YmJlZCBldGhlcmV1bSAyLjAsIHdoaWNoIHdvdWxkIHJhZGljYWxseSBjaGFuZ2UgdGhlIGhvdyB0aGUgJDE3IGJpbGxpb24gbmV0d29yayBjcmVhdGVzIGJsb2NrcyBhbmQgdmVyaWZpZXMgdHJhbnNhY3Rpb25zLiBBcyBleHBsYWluZWQgYnkgZm91bmRlciBvZiBldGhlcmV1bSBWaXRhbGlrIEJ1dGVyaW4gaW4gYSByZWNlbnQgaW50ZXJ2aWV3IGF0IGV0aGVyZXVtIGNvbmZlcmVuY2UgRVRIQ2FwZXRvd24sIGV0aGVyZXVtIDIuMCBoYXMg4oCcdHdvIG1ham9yIGZsYWdzaGlwIGNvbXBvbmVudHMu4oCdXHJcbiAgICA8YnIgLz48YnIgLz5cclxuICAgIOKAnE9uZSBpcyBDYXNwZXIsIHdoaWNoIGlzIG91ciBwcm9vZi1vZi1zdGFrZSBhbGdvcml0aG0gd2hpY2ggcmVwbGFjZXMgbWluaW5n4oCmd2l0aCBzb21ldGhpbmcgdGhhdCB3ZSBjb25zaWRlciB0byBiZSBtdWNoIG1vcmUgZWZmaWNpZW50LOKAnSBCdXRlcmluIHNhaWQgYXQgdGhlIHRpbWUuIOKAnFRoZSBzZWNvbmQgcGFydCBpcyBzaGFyZGluZyB3aGljaCBpcyB0aGlzIG1hc3NpdmUgc2NhbGFiaWxpdHkgaW1wcm92ZW1lbnQgd2hpY2ggaGFwcGVucyBiZWNhdXNlIHlvdSBkb27igJl0IG5lZWQgZXZlcnkgY29tcHV0ZXIgaW4gdGhlIG5ldHdvcmsgdG8gcHJvY2VzcyBldmVyeSB0cmFuc2FjdGlvbiBpbiB0aGUgbmV0d29yayBhbnkgbW9yZS5cclxuICAgIDxiciAvPjxiciAvPlxyXG4gICAgQnV0ZXJpbiBhZGRlZCB0aGF0IHdpdGggc2hhcmRpbmcsIGhlIGFudGljaXBhdGVzIGEg4oCcMSwwMDAgZmFjdG9yIGluY3JlYXNlIGluIHNjYWxhYmlsaXR54oCdIHRvIHRoZSBuZXR3b3JrLiBIb3dldmVyLCBzaGFyZGluZyB3aWxsIG9ubHkgY29tZSBpbiB0aGUgbGF0ZXIgdHdvIHBoYXNlcyBvZiBldGhlcmV1bSAyLjAgcm9sbC1vdXQuIFRoZSBmaXJzdCBwaGFzZSDigJMgZHViYmVkIFBoYXNlIFplcm8g4oCTIHN0cmljdGx5IGxhdW5jaGVzIGV0aGVyZXVt4oCZcyBuZXcgcHJvb2Ytb2Ytc3Rha2UgYmxvY2tjaGFpbi5cclxuICAgIDxzdXA+MS48L3N1cD5cclxuICAgIDwvcD5cclxuICAgIFxyXG4gICAgPHA+VGhlIHNlY29uZCBpbXByb3ZlbWVudCBhY2NlbnR1YXRlcyBFdGhlcmV1bSdzIGNvbnRyYWN0LWNhcGFibGUgY3VycmVuY3kgKHVubGlrZSBCaXRjb2luJ3MgbGFjayBvZiBjb250cmFjdHVhbCBmdW5jdGlvbmFsaXR5KSwgd2hpY2ggbWVhbnMgdG8gcmV2b2x1dGlvbml6ZSBub3Qgb25seSBob3cgZGF0YSBpcyBwZXJzaXN0ZWQgYnV0IGFsc28gZGlzdHJpYnV0ZWQsIGFuZCBtYW5hZ2VkIGF0IHRoZSBpbmRpdmlkdWFsaXplZCBjcnlwdG8tbGV2ZWwhIFVzaW5nIGEgbGFuZ3VhZ2UgY2FsbGVkIDxpPlNvbGlkaXR5PC9pPiwgZGVyaXZlZCBmcm9tIEphdmEgYW5kIEphdmFTY3JpcHQgb3JpZ2lucywgdGhpcyBjcnlwdG8tY3VycmVuY3kgc3RhbmRzIGZpcnN0IGluIGxpbmUgZm9yIHVwc2V0dGluZyB0aGUgZXhpc3Rpbmcgc3lzdGVtcyBvZiBmaW5hbmNlLCBtYW51ZmFjdHVyZSwgYW5kIGVudGVycHJpc2UgZGF0YS4gQW4gZXhlbXBsZSB1c2UtY2FzZSAuLi5cclxuICAgXHJcbiAgICA8L3A+XHJcbiAgICBcclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgICBJbiB0aGUgVW5pdGVkIFN0YXRlcywgaGVhbHRoY2FyZSBjb21lcyBmcm9tIGEgcGF0Y2h3b3JrIG9mIHByaXZhdGUgY29tcGFuaWVzLCB3aGljaCBtZWFucyB0aGUgaGFuZGxpbmcgb2YgcGF0aWVudCBkYXRhIGlzIGV2ZW4gbW9yZSBmcmFnbWVudGVkLiBKb2huIEhhbGFta2EsIGNoaWVmIGluZm9ybWF0aW9uIG9mZmljZXIgYXQgQmV0aCBJc3JhZWwgRGVhY29uZXNzIE1lZGljYWwgQ2VudGVyIGluIEJvc3RvbiwgTWFzc2FjaHVzZXR0cywgdG9sZCBNSVQgVGVjaG5vbG9neSBSZXZpZXcgbGFzdCB5ZWFyIHRoYXQgdGhlcmUgYXJlIDI2IGRpZmZlcmVudCBlbGVjdHJvbmljIG1lZGljYWwgcmVjb3JkcyBzeXN0ZW1zIGluIGhpcyBob21lIGNpdHkgYWxvbmUuXHJcbiAgICA8YnIgLz48YnIgLz5cclxuICAgIEluIDIwMTYsIEhhbGFta2EgdGVhbWVkIHVwIHdpdGggYSBncm91cCBvZiBzY2llbnRpc3RzIGF0IE1JVCB0byB0cnkgdG8gZmluZCBhIHNvbHV0aW9uIHRvIHRoZSBwcm9ibGVtIHVzaW5nIGJsb2NrY2hhaW4uIFRoZXkgcHVibGlzaGVkIHRoZWlyIHdoaXRlIHBhcGVyIG9uIHRoZSBzdWJqZWN0IGluIEF1Z3VzdCAyMDE2LCBsYXlpbmcgb3V0IHRoZWlyIHByb3Bvc2FsIGZvciBhIHN5c3RlbSB0aGF0IHdvdWxkIGhlbHAgYWxsIHRob3NlIGRpc3BhcmF0ZSBkYXRhYmFzZXMgZXhjaGFuZ2UgZGF0YeKAiuKAlOKAimEgcHJvamVjdCB0aGV5IGNhbGxlZCBNZWRSZWMuXHJcbiAgICA8YnIgLz48YnIgLz5cclxuICAgIEFuZHkgTGlwcG1hbiwgYSBzZW5pb3IgcmVzZWFyY2ggc2NpZW50aXN0IGF0IE1JVCwgY28tYXV0aG9yZWQgdGhlIHBhcGVyIHdpdGggSGFsYW1rYS4gVGhlIHN5c3RlbSB0aGV5IG91dGxpbmVkIHdhcyB0byB1c2UgRXRoZXJldW0gc29mdHdhcmXigIrigJTigIp3aGljaCwgdW5saWtlIGJpdGNvaW4sIGNhbiBpbnRlZ3JhdGUgYW5kIGV4ZWN1dGUgc21hcnQgY29udHJhY3Rz4oCK4oCU4oCKdG8gYnVpbGQgYSBwcml2YXRlIGJsb2NrY2hhaW4sIGxpbmtpbmcgaGVhbHRoY2FyZSBwcm92aWRlcnMgdG9nZXRoZXIgYW5kIGFsbG93aW5nIHRoZW0gdG8gc2hhcmUgdGhlaXIgZGF0YS5cclxuICAgIDxzdXA+Mi48L3N1cD5cclxuICAgIDwvcD5cclxuICAgIDxwPlNvLCBhcyB1c3VhbCwgRXRoZXJldW0gd2lucyB0aGUgZGF5IGZvciBib3RoIGRhaWx5IGFwcGxpY2FiaWxpdHkgYW5kIG5vdyBhIG1vcmUgc2NhbGFibGUgPHN0cm9uZz48aT5hbmQ8L2k+IGNvbnNjaWVudGlvdXM8L3N0cm9uZz4gY3J5cHRvLWN1cnJlbmN5IFRlY2ghXHJcblx0YDtcclxuXHJcblxyXG5cclxuICAgIHZhciBibG9nY2l0ZTIgPSBgIFxyXG4gICAgICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiBcclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2NvZGUtZm9yLWV0aGVyZXVtcy1wcm9vZi1vZi1zdGFrZS1ibG9ja2NoYWluLXRvLWJlLWZpbmFsaXplZC1uZXh0LW1vbnRoXCIgdGFyZ2V0PVwiX2JsYW5rXCI+IGh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9jb2RlLWZvci1ldGhlcmV1bXMtcHJvb2Ytb2Ytc3Rha2UtYmxvY2tjaGFpbi10by1iZS1maW5hbGl6ZWQtbmV4dC1tb250aDwvYT5cclxuICBcclxuICA8L3A+XHJcbiAgXHJcbiAgICAgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIFtQb3N0IGFydGljbGUgMi8yMC8xOF1cclxuICA8YSBocmVmPVwiaHR0cHM6Ly9tZWRpdW0uY29tL3Mvd2VsY29tZS10by1ibG9ja2NoYWluL3doYXQtY291bGQtYmxvY2tjaGFpbi1kby1mb3ItaGVhbHRoY2FyZS01OWMxNzI0NTQ0OGVcIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL21lZGl1bS5jb20vcy93ZWxjb21lLXRvLWJsb2NrY2hhaW4vd2hhdC1jb3VsZC1ibG9ja2NoYWluLWRvLWZvci1oZWFsdGhjYXJlLTU5YzE3MjQ1NDQ4ZTwvYT4gPC9wPlxyXG4gIFxyXG4gIGA7XHJcbiAgICB2YXIgYmxvZ3Bvc3QxID0gYCBcclxuICBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RGF0YSBBbmFseXRpY3MnIDxpPkxhdyBvZiBMYXJnZSBOdW1iZXJzPC9pPiwgaS5lLiBvdmVyIG4gPSAxMCwwMDAsIHByb21pc2VzIGEgcHJlZGljdGFibGUgbGlrZWxpaG9vZCBvZiBjb25kaXRpb25zIGFuZCBldmVudHMsIGdpdmVuIGEgc3VmZmljaWVudGx5IGhpZ2ggc2FtcGxlIG9mIHRyYWluaW5nIGRhdGEuIERlc3BpdGUgdGhlIHF1YW50dW0tZGlyZWN0ZWQgbW9sZWN1bGFyIGJlaGF2aW9yIG9mIGJpb2xvZ2ljYWwgb3JnYW5pc21zLCB0aGUgY2xhc3NpY2FsIGV4cG9uZW50aWF0aW9uIG9mIG1hY2hpbmUtbGVhcm5pbmcgc3RhdGlzdGljYWwgYWxnb3JpdGhtcyBzdGlsbCBkb2VzIHdvcmsgbWlyYWNsZXM6ICBcclxuICA8L3A+IFxyXG4gIFxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgU3R1ZGllcyBpbmRpY2F0ZSB0aGF0IHVzaW5nIGFsZ29yaXRobXMgdG8gYW5hbHl6ZSBkaWdpdGFsIHNsaWRlcyBkZWxpdmVycyBkaWFnbm9zZXMgYXMgYWNjdXJhdGUgYXMgYW4gZXhwZXJ0IHBhdGhvbG9naXN04oCUYW5kIGluIHNvbWUgaW5zdGFuY2VzLCB0aGUgYWxnb3JpdGhtcyBhcmUgbW9yZSBhY2N1cmF0ZS4gQSAyMDE4IHN0dWR5IGJ5IE1hc3NhY2h1c2V0dHMgR2VuZXJhbCBIb3NwaXRhbCBhbmQgTUlUIGZvdW5kIHRoYXQgYW4gYXV0b21hdGVkIHN5c3RlbSB0aGV5IGRldmVsb3BlZCBkaWFnbm9zZWQgZGVuc2UgYnJlYXN0IHRpc3N1ZSAoYW4gaW5kaWNhdG9yIG9mIGJyZWFzdCBjYW5jZXIpIGluIG1hbW1vZ3JhbXMgYXQgdGhlIHNhbWUgbGV2ZWwgYXMgYW4gZXhwZXJ0IHJhZGlvbG9naXN0LiBBbm90aGVyIGFsZ29yaXRobSBkZXZlbG9wZWQgYnkgR29vZ2xlIHdhcyBmb3VuZCB0byDigJxoZWxwIGRldGVjdCBtZXRhc3RhdGljIGJyZWFzdCBjYW5jZXJzIHdpdGggc2lnbmlmaWNhbnQgYWNjdXJhY3kgYW5kIGltcHJvdmUgcGF0aG9sb2dpc3QgcGVyZm9ybWFuY2Us4oCdIGFjY29yZGluZyB0byBzdHVkaWVzIGluIHRoZSBBcmNoaXZlcyBvZiBQYXRob2xvZ3kgYW5kIExhYm9yYXRvcnkgTWVkaWNpbmUgYW5kIHRoZSBBbWVyaWNhbiBKb3VybmFsIG9mIFN1cmdpY2FsIFBhdGhvbG9neS5cclxuICA8L3A+XHJcbiAgU28sIGhvdyBjYW4gd2UgYmVzdCB0YWtlIGFkdmFudGFnZSBvZiB0aGVzZSBhZHZhbmNlcz8gQ2xlYXIgdGhlIGJydXNoISBUaGUgbWV0YS1vcmdhbml6YXRpb24gb2YgaGVhbHRoY2FyZSB0ZWNobm9sb2d5IGFuZCBmaW5hbmNpbmcgc2ltcGx5IGNhbid0IGtlZXAgcGFjZSB3aXRoIHRoZSBwdXJlIHRlY2g6XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEFmdGVyIHRha2luZyBhIGxvb2ssIHRoZSBwYXRob2xvZ2lzdCBtaWdodCBzaGlwIGl0IHRvIGEgc3BlY2lhbGlzdCBhdCBhbm90aGVyIGxhYiBmb3IgYSBzZWNvbmQgb3Bpbmlvbi4gRWFjaCB0aW1lIHRoZSBzbGlkZSBpcyBtb3ZlZCwgaXQgaXMgcGFja2VkIHVwIGFuZCBzaGlwcGVkIHRvIGEgZGlmZmVyZW50IGFkZHJlc3MuIEFsbCB0aGUgd2hpbGUsIHlvdeKAmXJlIHdhaXRpbmcgZGF5cyBvciBldmVuIHdlZWtzIHRvIGhlYXIgd2hldGhlciBvciBub3QgeW91IGhhdmUgY2FuY2VyLlxyXG48YnIgLz48YnIgLz5cclxuICBGb3IgZGVjYWRlcywgdGhlcmUgaGF2ZSBiZWVuIGxpbWl0ZWQgd2F5cyB0byBzaGFyZSBtZWRpY2FsIHNsaWRlcywgd2l0aCBpbmZvcm1hdGlvbiBtYW5hZ2VtZW50IGxhZ2dpbmcgYmVoaW5kIGV2ZW4gYXMgbWVkaWNhbCBzY2llbmNlIGFkdmFuY2VkLiBCdXQgaW4gdGhlIHBhc3QgZmV3IHllYXJzLCBhIG5ldyBpbmR1c3RyeSBvZiBkaWdpdGFsIHBhdGhvbG9neSBoYXMgZW1lcmdlZCB0aGF0IGNvdWxkIGZpbmFsbHkgb2ZmZXIgYSBtb3JlIGVmZmljaWVudCBhbmQgbGFyZ2Utc2NhbGUgd2F5IG9mIGRpc3RyaWJ1dGluZyBhbmQgYW5hbHl6aW5nIHRoZXNlIGtpbmRzIG9mIHNhbXBsZXMuXHJcbiAgPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPlNvLCB0aGUgZ29vZCBuZXdzIGZyb20gPGk+dGhlIGRvY3RvcnMnPC9pPiBvY2Nhc2lvbmFsIG5lbWVzaXMsIFUuUy4gRm9vZCBhbmQgRHJ1ZyBBZG1pbmlzdHJhdGlvbiwgZGVjaWRlZCB0aGF0IGFmdGVyIDggeWVhcnMgb2YgdHJpYWxzIGFuZCBoZWFyaW5ncywgdHJ1bHkgc2NhbGFibGUgYW5kIHN1ZmZpY2llbnRseSBsYXJnZSBzYW1wbGUgZGF0YSBjYW4gbm93IGJlIGRpZ2l0aXplZCAtIGhlbmNlIHBlcnNvbmFsaXppbmcgdGhlIGxhdyBvZiBsYXJnZSBudW1iZXJzIGZyb20gdGhlIHdob2xlIHRvIHRoZSBpbmRpdmlkdWFsIHBhdGllbnQuIEF0IGxvbmcgbGFzdCwgdGhlIHBhdGllbmNlIGhhcyBwYWlkIG9mZiFcclxuICBgO1xyXG4gICAgdmFyIGJsb2djaXRlMSA9IGBcclxuICBcclxuICBcclxuICA8cD4xLiBbUG9zdCBhcnRpY2xlIDIvMjIvMTldXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9zL3N0b3J5L2FsZ29yaXRobXMtY2FuLW5vdy1pZGVudGlmeS1jYW5jZXJvdXMtY2VsbHMtYmV0dGVyLXRoYW4taHVtYW5zLTc4ZTY1MThmNjVlOFwiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIGh0dHBzOi8vbWVkaXVtLmNvbS9zL3N0b3J5L2FsZ29yaXRobXMtY2FuLW5vdy1pZGVudGlmeS1jYW5jZXJvdXMtY2VsbHMtYmV0dGVyLXRoYW4taHVtYW5zLTc4ZTY1MThmNjVlOFxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgXHJcbiAgYDtcclxuXHJcbiAgICB2YXIgdXJsID0gWyBcclxuICAgICAgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMzAnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0zMCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMzAsIDIwMTkgPGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0FsbFxcJ3MgRmFpciBpbiBXYXIgYW5kIFBlYWNlLCBidXQgTm90IGluIFRyYWRlISBQYXJ0IElJOiA8YnIgLz5NYXRlcmlhbCBTdWJzdGl0dXRlcycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MzAsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcyOScsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTA1LTI5JyxcclxuICAgICAgICAgICAgZGF0ZTogJ01heSAyOSwgMjAxOSA8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQWxsXFwncyBGYWlyIGluIFdhciBhbmQgUGVhY2UsIGJ1dCBOb3QgaW4gVHJhZGUhIFBhcnQgSTogPGJyIC8+V2hlbiB0aGUgRG9ncyBvZiBXYXIgdGFrZSBhIEJpdGUgb3V0IG9mIFRlY2gnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDI5LFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTI5XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTgnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0yMScsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMjEsIDIwMTkgJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIFBvbGl0aWNzIG9mIFRlY2gnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE4LFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTE4XHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJzE3JyxcclxuICAgICAgICAgICAgZGlkOiAnMTktMDUtMjAnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWF5IDIwLCAyMDE5JyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ1F1YW50dW0gRGF0YScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnUHJvY3Jhc3RpbmF0aW5nIGEgUXVhbnR1bSBMZWFwIGFyZSBXZT8nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE3LFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTE3XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTYnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMTgtMTksIDIwMTkgPGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICcnLFxyXG4gICAgICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTYsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlMTZcclxuICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgIGlkOiAnMTUnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0xNycsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMTcsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnJyxcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDE1LFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTE1XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTQnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0xNicsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMTYsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnTScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxNCxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGUxNFxyXG4gICAgICAgIH0sIHtcclxuICAgICAgICAgICAgaWQ6ICcxMycsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTA1LTE1JyxcclxuICAgICAgICAgICAgZGF0ZTogJ01heSAxNSwgMjAxOSAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnJyxcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEzLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTEzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTInLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0xNCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMTQsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnJyxcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEyLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTEyXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMTEnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0xMycsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMTMsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1NhdG9zaGkgXFwnTGUgUm91eFxcJyBOYWthbW90bz8nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDExLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTExXHJcbiAgICAgICAgfSwge1xyXG4gICAgICAgICAgICBpZDogJzEwJyxcclxuICAgICAgICAgICAgZGlkOiAnMTktMDUtMTEnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWF5IDExLTEyLCAyMDE5IDxiciAvPiBXZWVrZW5kJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdGaW5pdGUgQml0Y29pbicsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTAsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlMTBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICc5JyxcclxuICAgICAgICAgICAgZGlkOiAnMTktMDUtMTAnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWF5IDEwLCAyMDE5JyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIExvbmcgYW5kIFViaXF1aXRvdXMgUmVpZ24gb2YgTGludXggT1MnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDksXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlOVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzgnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0wOScsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgOSwgMjAxOScsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICcgJyxcclxuICAgICAgICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3Q4LFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZThcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICc3JyxcclxuICAgICAgICAgICAgZGlkOiAnMTktMDUtMDgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWF5IDgsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1Rvd2FyZCBhIFNtYXJ0ZXIgQml0Y29pbiwgUGFydCBJSTo8YnIgLz5EZXNpZ25pbmcgYSBNb3JlIFNjYWxhYmxlIGFuZCBQcml2YXRlIENyeXB0by1DdXJyZW5jeScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0NyxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGU3XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnNicsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTA1LTA3JyxcclxuICAgICAgICAgICAgZGF0ZTogJ01heSA3LCAyMDE5IDxiciAvPiBXZWVrZW5kJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgICAgICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdUb3dhcmQgYSBTbWFydGVyIEJpdGNvaW4sIFBhcnQgSTo8YnIgLz5Db250cmFjdGluZyBhIE1vcmUgRnVuY3Rpb25hbCBDcnlwdG8tQ3VycmVuY3knLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDYsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlNlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzUnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0wNScsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgNiwgMjAxOScsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnPGk+V2hhdCBpcyBMb3ZlPyBCYWJ5LCBCYWJ5IERvblxcJ3QgSHVydCBNZSBObyBNb3JlISA8L2k+PHN1cD4wPC9zdXA+IFBhcnQgSUk6PGJyIC8+PGJyIC8+Qml0Y29pblxcJ3MgUGFsYWVudG9sb2d5IERlZXBlbnMgdGhlIEZvdW5kZXJcXCdzIE9ic2N1cml0eScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0NSxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGU1XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnNCcsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTA1LTA0JyxcclxuICAgICAgICAgICAgZGF0ZTogJ01heSA0IC0gNSwgMjAxOSA8YnIgLz4gV2Vla2VuZCcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnPGk+V2hhdCBpcyBMb3ZlPyBCYWJ5LCBCYWJ5IERvblxcJ3QgSHVydCBNZSBObyBNb3JlISA8L2k+PHN1cD4wPC9zdXA+IFBhcnQgSTo8YnIgLz48YnIgLz5QYXBhcmF6emkgU2lnaHRpbmcgb2Ygb3VyIEJpdGNvaW4gRmF0aGVyOiA8YnIgLz5BZG9yaW5nIEFkdWxhdGlvbiBvciBQcml2YWN5IEludmFzaW9uPycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0NCxcclxuICAgICAgICAgICAgY2l0ZTogYmxvZ2NpdGU0XHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAnMycsXHJcbiAgICAgICAgICAgIGRpZDogJzE5LTA1LTAzJyxcclxuICAgICAgICAgICAgZGF0ZTogJ01heSAzLCAyMDE5ICAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1Jla29nbml6ZSBNZT8nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDMsXHJcbiAgICAgICAgICAgIGNpdGU6IGJsb2djaXRlM1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogJzInLFxyXG4gICAgICAgICAgICBkaWQ6ICcxOS0wNS0wMicsXHJcbiAgICAgICAgICAgIGRhdGU6ICdNYXkgMiwgMjAxOScsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAgICAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnTW9kZXJuIEhlYWx0aGNhcmUsIFBhcnQgSUk6PGJyIC8+VGhlIFNjYWxhYmxlIGFuZCBDbGVhbiBEYXRhIFBsYXRmb3JtJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QyLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6ICcxJyxcclxuICAgICAgICAgICAgZGlkOiAnMTktMDUtMDEnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTWF5IDEsIDIwMTknLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ01vZGVybiBIZWFsdGhjYXJlLCBQYXJ0IEk6PGJyIC8+T24gdGhlIFNlY29uZCBPcGluaW9uIG9mIDEwLDAwMCBEb2N0b3JzJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxLFxyXG4gICAgICAgICAgICBjaXRlOiBibG9nY2l0ZTFcclxuICAgICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgY2F0ID0gYCBcclxuXHQgIDxkaXYgaWQ9XCIke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2XCI+IFxyXG5cdCAgPGhyIC8+ICBcclxuXHQgIDxhIGhyZWY9XCIjdG9wXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICBcclxuXHQgIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcblx0ICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gXHJcblx0ICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG5cdCAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcblx0ICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuXHQgIDxiciAvPlxyXG5cdCAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fVx0ICA8L2Rpdj5cclxuICAgICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5jaXRlfTwvZGl2PlxyXG5cdCAgPC9kaXY+YFxyXG5cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1tYXkxOVwiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciBjYXRNb2QgPSBgXHJcblx0ICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfV9tb2RcIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcblx0ICA8aHIgLz4gIFxyXG5cdCAgPGEgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcblx0ICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG5cdCAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuXHQgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcblx0ICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuXHQgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG5cdCAgPGJyIC8+XHJcbiAgICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICAgICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5jaXRlfTwvZGl2PlxyXG4gICAgICBcclxuXHJcblx0ICA8L2Rpdj5gO1xyXG5cclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1tYXkxOS1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZygnYmxvZ2dlci1tYXktMTknKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5cclxuYmxvZ2dlck1heTE5KCk7IiwiIFxyXG4vL1RvcCBWYXJzIEFib3ZlXHJcblxyXG52YXIgYmxvZ2dlck1heTIxID0gZnVuY3Rpb24gKCkge1xyXG4gXHJcbiAgLy8gdmFyIGJsb2dwb3N0MiA9ICBgIFxyXG57LyogPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiAgSGVuY2UsIHRoZSBBcHBsaWNhdGlvbiBJbnRlcmZhY2UgUG9seWdvbidzIChNQVRJQykgTGF5ZXItMiBzb2x1dGlvbnMuXHJcbjwvcD4gKi99XHJcbi8vIDxwIGNsYXNzPVwicXVvdGVcIj48aT4gIC48YnIgLz48YnIgLz5cclxuLy8gPC9pPjxzdXA+MTwvc3VwPiBcclxuLy8gPC9wPlxyXG4vLyBgO1xyXG4vLyB2YXIgYmxvZ2NpdGUyID0gYFxyXG4vLyA8cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjEuIDxhIGhyZWY9XCJoIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+IDwvYT5cclxuLy8gPC9wPiAgIGA7XHJcblxyXG5cclxuLy8gdmFyIGJsb2dwb3N0MiA9ICBgIFxyXG4vLyA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+LCBcclxuLy8gPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkEgRG9nZWNvaW4gKERPR0UpLWZvY3VzZWQgZGl2aXNpb24gb2YgcHVibGljbHkgdHJhZGVkIG92ZXItdGhlLWNvdW50ZXIgc29mdHdhcmUgZmlybSBBcHBTd2FybSBpcyBsb29raW5nIHRvIGJyaW5nIHRvZ2V0aGVyIGdsb2JhbCBkZXZlbG9wbWVudCB0ZWFtcyB0byBidWlsZCBvZmYgb2YgdGhlIERvZ2Vjb2luIGJsb2NrY2hhaW4uPGJyIC8+PGJyIC8+XHJcbi8vIERvZ2VMYWJzIOKAlCBhIG5ld2x5IGxhdW5jaGVkIGRpdmlzaW9uIG9mIEFwcFN3YXJt4oCZcyBibG9ja2NoYWluIHJlc2VhcmNoIGxhYiwgVHVsc2FMYWJzIOKAlCBhbm5vdW5jZWQgV2VkbmVzZGF5IGEgbmV3IGluaXRpYXRpdmUgY2FsbGluZyBvbiBEZXZPcHMgdGVhbXMgdG8gdW5pdGUgdGhlaXIgZWZmb3J0cyBpbiBidWlsZGluZyBhIOKAnHNvcnQgb2YgZGVjZW50cmFsaXplZCBuZXR3b3Jr4oCdIG9mIERPR0UgZGV2ZWxvcGVycyBhY3Jvc3MgdGhlIGdsb2JlLjwvaT48c3VwPjE8L3N1cD4gXHJcbi8vIDwvcD5cclxuLy8gYDtcclxuLy8gdmFyIGJsb2djaXRlMiA9IGBcclxuLy8gPHAgY2xhc3M9XCJmb290bm90ZXNcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9jb2ludGVsZWdyYXBoLmNvbS9uZXdzL2FwcHN3YXJtLXMtZG9nZS1kaXZpc2lvbi1jYWxscy1mb3ItYS1nbG9iYWwtZGV2LXRlYW1zLXRvLWJ1aWxkLW9mZi1kb2dlY29pblwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9jb2ludGVsZWdyYXBoLmNvbS9uZXdzL2FwcHN3YXJtLXMtZG9nZS1kaXZpc2lvbi1jYWxscy1mb3ItYS1nbG9iYWwtZGV2LXRlYW1zLXRvLWJ1aWxkLW9mZi1kb2dlY29pbjwvYT5cclxuLy8gPC9wPiAgIGA7XHJcbiBcclxuXHJcblxyXG52YXIgYmxvZ3Bvc3QyID0gIGAgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5FdGhlcmV1bSdzIHdvcmxkIHZpcnR1YWwgbWFjaGluZSBoYXMgcHJvdmVuIHV0aWxpdHkgYWxyZWFkeSwgYW5kIG9ubHkgdGhlIHRpcCBvZiB0aGUgaWNlYmVyZyBoYXMgYmVlbiByZWFjaGVkIGZvciBwb3RlbnRpYWwuIERlRmkgYXBwbGljYXRpb25zIGhhdmUgbG9ja2VkIDIvMyBFdGhlcmV1bSwgd2hpY2ggYm9vc3RzIGZyb20gJDYwMCB0byAkNDAwMCBzdW1taW5nIHRvIG1hcmtldCBjYXAgb2YgJDM4OCwwMDAsMDAwLiA8aW1nIHNyYz1cInNyYy9pbWcvYWRhLWJ0Yy1ldGgucG5nXCIgY2xhc3M9XCJ6b29tXCIgICAvPiBUaGUgaW50ZXJlc3RpbmcgbWF0dGVyIGlzIEV0aGVyZXVtJ3MgRGVGaSBhcHBsaWNpYmlsaXR5LS1mcm9tIHJlYWwgZXN0YXRlIHRvIHBvb2xzIGFuZCBsb2Fucy0tYmFzZWQgb24gc29waGlzdGljYXRlZCBzbWFydCBjb250cmFjdHMuIEJpdGNvaW4sIGFzaWRlIGZyb20gZm9ybSBvZiB2YWx1ZSwgaGFzIG5vIHBhcmFsbGVsIGF0dHJhY3Rpb24uXHJcbjxwIGNsYXNzPVwicXVvdGVcIj48aT5cclxuIFxyXG48L3A+XHJcbmA7XHJcbnZhciBibG9nY2l0ZTIgPSBgXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJlbnppbmdhLmNvbS9ub2RlLzIxMTg0NTk3XCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5JcyB0aGUgQml0Y29pbi1FdGhlcmV1bSAnRmxpcHBlbmluZycgYSBMaWtlbHkgU2NlbmFyaW8/PC9hPlxyXG48L3A+ICAgYDtcclxuIFxyXG5cclxudmFyIGJsb2dwb3N0MSA9ICBgIFxyXG48cD5Eb3VidGxlc3MsIE5ldyBDaGFpbiBMaWZlY3ljbGUgaXMgNSUgdXRpbGl0eSwgNSUgaHlwZSBhbmQgOTAlIERlY2VudHJhbGl6ZWQgQXBwIGRldmVsb3BlcnMnIGNvbW11bml0eSAtLSB0aGUgaW5ncmVkaWVudCA8aT5wYXIgZXhjZWxsZW5jZTwvaT4gZm9yIGxhc3RpbmcgaHlwZSBhbmQgYWRvcHRpb24uIEhlcmUgd2UgaGF2ZSB0aGUgZXhwb25lbnRpYWwgZ3Jvd3RoIG9mIEV0aGVyZXVtIGludGVyZXN0LCBsZXQgYWxvbmUgcHJpY2Ugb2YgdG9rZW4uIE9uIHRoZSBjb250cmFyeSB3ZSBoYXZlIENhcmRhbm8gTmV0d29yaywgcG93ZXJlZCBieSBQcm9vZi1vZi1TdGFrZSBBREEgdG9rZW4sIHdoaWNoIGhhcyB5ZXQgdG8gZXZvbHZlIHBhc3QgVGVzdE5ldCBwaGFzZSwgYSBwb2ludCBvZiBwYXJhbHlzaXMgZm9yIENhcmRhbm8gY2hhaW4gREFQUCBkZXZlbG9wbWVudC4gT25lIGxhc3Qgc3RlcCBiZWZvcmUgZmluYWwgbWFpbiBuZXQgbGF1bmNoLCBhbmQgZmluYWxseSwgd2UgY2FuIHdpdG5lc3MgRGF2aWQgZmFjZSBHb2xpYXRoLi4uPC9wPlxyXG5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPjxpPlRoaXMgeWVhciwgd2UgYXJlIHNlZWluZyB0aGUgZGlyZWN0IGNvbXBldGl0b3JzIGNsYXNoaW5nLiBFdGhlcmV1bSBoYXMgbWFkZSBncmVhdCBzdHJpZGVzIHRvIG1ha2UgaXQgc2NhbGFibGUgYW5kIGFmZm9yZGFibGUsIHdpdGggdGhlIEJlcmxpbiBmb3JrIGFscmVhZHkgZmluYWxpemVkIGFuZCBMb25kb24gaGFyZCBmb3JrIHNjaGVkdWxlZCBmb3IgSnVseS5cclxuSW4gdGhlIG1lYW50aW1lLCBDYXJkYW5vIHNtYXJ0IGNvbnRyYWN0cyBzaG91bGQgYmUgZW50ZXJpbmcgdGhlIENhcmRhbm8gdGVzdG5ldCBieSB0aGUgZW5kIG9mIHRoaXMgbW9udGguPC9pPjxzdXA+MTwvc3VwPiBcclxuPC9wPlxyXG48cD5CZXR0ZXIgbGF0ZSB0aGFuIG5ldmVyLCB0aGUgQ2FyZGFubyBibG9ja2NoYWluIGVjb3N5c3RlbSBib2FzdHMgc3VwZXJpb3IsIG1vcmUgZWZmaWNpZW50LCBzb3BoaXN0aWNhdGVkIHNtYXJ0IGNvbnRyYWN0aW5nOjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkNhcmRhbm8gKEFEQSkgaXMgYSBoaWdobHkgYW50aWNpcGF0ZWQgZGlyZWN0IGNvbXBldGl0b3IgdG8gRXRoZXJldW0sIHByb21pc2luZyBtb3JlIHNjYWxhYmlsaXR5IGFuZCBzbWFydCBjb250cmFjdHMgd2l0aCB0aGUgQWxvbnpvIHVwZ3JhZGUuPC9wPlxyXG48cD5UaGVyZSBhcmUgdHdvIG9ic3RpbmF0ZSBwcm9ibGVtczo8aT5FdGhlcmV1bSdzIG1vbm9wb2xpc3RpYyBhbmQgdW5pdmVyc2FsIERBUFAgZXZvbHV0aW9uIGFuZCBBREEncyBzdHVudGVkIGNvbW11bml0eSBkZXZlbG9wbWVudC48L2k+PC9wPlxyXG48cD5GaXJzdCwgQWxsIGN1c3RvbWl6ZWQgYnVzaW5lc3MgYXBwbGljYXRpb25zLCB3aGV0aGVyIG9mZi1jaGFpbiBvciBvbi0sIGhhdmUgYnVpbHQgYXJjaGl0ZWN0dXJlcyBkZXBlbmRpbmcgb24gcHJpdmF0ZS9jb25zb3J0aXVtIGJsb2NrY2hhaW5zIHRoYXQgcGVyaW9kaWNhbGx5IHN5bmMgd2l0aCBFdGhlcmV1bSBtYWlubmV0LiA8L3A+PHA+U2Vjb25kbHksIHdoZXRoZXIgb3Igbm90IENhcmRvbm8gZG9lcyBsYXVuY2ggbWFpbiBuZXQsIHRoZSBtdWx0aS15ZWFyIGRlbGF5IGluIGV2ZW4gPGk+bGF1bmNoaW5nPC9pPmNoYWluIG1haW5uZXQgLS1mb3IgYWxsIGl0cyBiZWxscyBhbmQgd2hpc3RsZXMgLS0gaGFzIHN0dW50ZWQgbmV3IGRldmVsb3BtZW50IGFuZCBkZXZlbG9wZXIgc29saWRhcml0eS4gRGVzcGl0ZSB0aGUgYXV0aG9yJ3MgcHJhaXNlIGZvciBBREEsIGhlIGNvbmNlZGVzIHRoZSBpbmZpbml0ZXNpbWFsbHkgc21hbGwgbGlrZWxpaG9vZCB0aGF0IENhcmRhbm8gZGV2ZWxvcGVycyB3aWxsIGV2ZXIgYXBwcm9hY2ggRXRoZXJldW0gbmV0d29yayAtLTwvcD4gXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5MYXN0bHksIGRlc3BpdGUgZ2V0dGluZyB1cCB0byA3dGggcmFuaywgQ2FyZGFubyAoQURBKSBpcyBub3QgbGlrZWx5IHRvIGNhdGNoIHVwIHdpdGggRXRoZXJldW3igJlzIG11Y2ggbGFyZ2VyIGRldiBwb29sIGFuZCBuZXR3b3JrIGVmZmVjdC48c3VwPjE8L3N1cD48L3A+XHJcbjxwPkFuZCBzbywgYmV5b25kIEV0aGVyZXVtIDIncyBQcm9vZi1vZi1TdGFrZSB0cmFuc2l0aW9uIG9uIHRoZSBuZWFyIGhvcml6b24sIGV0aGVyZXVtIGVuam95cyBhIGJ1cmdlb25pbmcgZWNvc3lzdGVtIG9mIGxheWVyLTIgc2lkZWNoYWlucywgZmFjaWxpdGF0ZWQgYnkgdGhlIGxpa2VzIG9mIHRob3NlIGFzIFBvbHlnb24gKE1hdGljKSBzb2x1dGlvbnMuIEV2ZW4gc28sIG5leHQgdG8gUG9sa2Fkb3QgZWNvc3lzdGVtLCBvbmx5IENhcmRhbm8gc3RhbmRzIGFzIGEgdmlhYmxlIGNoYWxsZW5nZSwgaG93IGV2ZXIgbWluaXNjdWxlIGl0IG1heSBiZS4uLjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4qRXRoZXJldW0gaG9sZHMgKGJ5IGZhcikgdGhlIGxhcmdlc3QgcG9vbCBvZiBkZXZlbG9wZXJzLCBhY2NvcmRpbmcgdG8gRWxlY3RyaWMgQ2FwaXRhbC4gQXMgYSBudW1iZXIgb2Ygb3BlbiBzb3VyY2UgZGV2IG9wcyB0b29scyBhcmUgYXZhaWxhYmxlIHRvIG1ha2UgcmVtb3RlIHdvcmsgZWFzaWVyIHRocm91Z2ggY29sbGFib3JhdGlvbiwgbWFuYWdpbmcgZGV2ZWxvcGVycyByZW1haW5zIGEgc2VyaW91cyBjb2cgaW4gRGVGaSBkZXZlbG9wbWVudC4gWWV0IEV0aGVyZXVtIGFuZCBpdHMgZGV2ZWxvcGVyIGNvbW11bml0eSBoYXZlIHRodXMgZmFyIGJlZW4gZG9taW5hbnQgaW4gdGhpcyBzZW5zZS48YnIgLz48YnIgLz5cclxuKkluIHRoZSBsYXN0IHRocmVlIHllYXJzLCBFdGhlcmV1bSBoYXMgd2lkZW5lZCBpdHMgZGV2ZWxvcGVyIHBvb2wgYnkgMjE1JS4gU3VjaCBhIG5ldHdvcmsgZWZmZWN0IHdvdWxkIGJlIGV4Y2VlZGluZ2x5IGRpZmZpY3VsdCB0byBvdmVyY29tZS48L2k+PHN1cD4yPC9zdXA+IFxyXG48L3A+PC9wPlxyXG5gXHJcbnZhciBibG9nY2l0ZTEgPSBcclxuYFxyXG4gXHJcbjxwIGNsYXNzPVwiZm9vdG5vdGVzXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vZmluYW5jZS55YWhvby5jb20vbmV3cy9jYXJkYW5vLXByZXBhcmVzLWxhdW5jaC1hbG9uem8tdGVzdG5ldC0xMzAwMDA5NzYuaHRtbD9ndWNjb3VudGVyPTEmZ3VjZV9yZWZlcnJlcj1hSFIwY0hNNkx5OTNkM2N1WjI5dloyeGxMbU52YlM4Jmd1Y2VfcmVmZXJyZXJfc2lnPUFRQUFBS0gwYktKdlpzRmJRQnlrQmV4dXBLVi1IdnZod1NEUWptbEJteU00UTY5QWFOUFl2YzRUazhMU0pJeUJxZWtkcDBQQVBMN2t6MGhUZ0pGRXdPQjNqY2hVNGd6a0FwTDZiUWF5OUpaMnoxNmRkU1c1UnNDWUVwMDQ5UlJqLUxfekZocmh6ZV84M0JyTENRanh6Xy1vT3ZMRWJjOGwzWF9UNEtkTzgtZVFmNmN6XCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5jYXJkYW5vLXByZXBhcmVzLWxhdW5jaC1hbG9uem8tdGVzdG5ldDwvYT5cclxuPC9wPiAgIFxyXG48cCBjbGFzcz1cImZvb3Rub3Rlc1wiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy5iZW56aW5nYS5jb20vbm9kZS8yMTE4NDU5N1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+SXMgdGhlIEJpdGNvaW4tRXRoZXJldW0gJ0ZsaXBwZW5pbmcnIGEgTGlrZWx5IFNjZW5hcmlvPzwvYT5cclxuPC9wPlxyXG5gOyBcclxuICAgXHJcbiAgdmFyIHVybCA9ICBcclxuICBbICAgICBcclxuICAgIC8vIHsgXHJcbiAgICAvLyAgIGlkOicyJyxcclxuICAgIC8vICAgZGlkOidtYXktMjEtMDUtMTcnLFxyXG4gICAgLy8gICBkYXRlOidNYXkgMTcsIDIwMjEnLFxyXG4gICAgLy8gICBhdXRob3I6J2J5IFRob21hcyBNYWVzdGFzLCBNQScsXHJcbiAgICAvLyAgIGNhdDM6J1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAvLyAgIHRpdGxlOidEb2dlIERheXMgYXJlIEhlcmUgQWdhaW46ICAnLFxyXG4gICAgLy8gICBwb3N0OmJsb2dwb3N0MSxcclxuICAgIC8vICBibG9nY2l0ZTpibG9nY2l0ZTFcclxuICAgIC8vICB9LGFuZCB0aGUgTGF3IG9mIExhcmdlIE51bWJlcnNcclxuICAgICB7IFxyXG4gICAgICBpZDonMicsXHJcbiAgICAgIGRpZDonbWF5LTIxLTA1LTE4JyxcclxuICAgICAgZGF0ZTonTWF5IDE4LCAyMDIxJyxcclxuICAgICAgYXV0aG9yOidieSBUaG9tYXMgTWFlc3RhcywgTUEnLFxyXG4gICAgICBjYXQzOidNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOidFVEggdi4gQlRDIHYuIEFEQSwgUGFydCBJOiBUaGUgTGF3IG9mIExhcmdlIE51bWJlcnMgJiB0aGUgSW5lZmZpY2llbmN5IG9mICAgICcsXHJcbiAgICAgIHBvc3Q6YmxvZ3Bvc3QyLFxyXG4gICAgIGJsb2djaXRlOmJsb2djaXRlMlxyXG4gICAgIH0sXHJcbiAgICB7IFxyXG4gICAgaWQ6JzEnLFxyXG4gICAgZGlkOidtYXktMjEtMDUtMTcnLFxyXG4gICAgZGF0ZTonTWF5IDE3LCAyMDIxJyxcclxuICAgIGF1dGhvcjonYnkgVGhvbWFzIE1hZXN0YXMsIE1BJyxcclxuICAgIGNhdDM6J1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICB0aXRsZTonRVRIIHYuIEJUQyB2LiBBREEsIFBhcnQgSTogVmFyeWluZyBsZXZlbHMgb2YgREFQUCBDb21tdW5pdHktQnVpbGRpbmcgJyxcclxuICAgIHBvc3Q6YmxvZ3Bvc3QxLFxyXG4gICBibG9nY2l0ZTpibG9nY2l0ZTFcclxuICAgfVxyXG4gICBdIDtcclxuXHJcbiAgIGZvciAoaT0wO2k8dXJsLmxlbmd0aDtpKyspeyBcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YCA7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLW1heTIxXCIpLmlubmVySFRNTCArPSBjYXQ7IFxyXG59IFxyXG4gXHJcbnZhciBpO1xyXG5mb3IgKGk9MDtpPHVybC5sZW5ndGg7aSsrKXsgXHJcbiAgdmFyIGNhdE1vZCA9IGBcclxuICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfV9tb2RcIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgPGhyIC8+ICBcclxuICA8YSBocmVmPVwiI3RvcC1tb2RcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gICBcclxuICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICA8YnIgLz5cclxuICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9PC9kaXY+XHJcbiAgPC9kaXY+XHJcbiA8ZGl2IGlkPVwiYmxvZ2NpdGVcIj4ke3VybFtpXS5ibG9nY2l0ZX1cclxuIDwvZGl2PmA7XHJcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLW1vZC1tYXkyMVwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG59XHJcblxyXG5cclxuY29uc29sZS5sb2coJ2Jsb2dnZXItbWF5MjEnKTsgXHJcbmNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59OyBcclxuXHJcblxyXG5ibG9nZ2VyTWF5MjEoKTsgIFxyXG5cclxuIiwiLy8gJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGJsb2dnZXJOb3YgPSBmdW5jdGlvbiAoKSB7ICBcclxuXHJcbiBcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTM3ID0gICBgXHJcbiBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UXVhbnR1bSBOYXktU2F5ZXJzJyBvcGluaW9ucyBhcHBlYXIgbW9yZSByb290ZWQgaW4gPGk+YSBiaW5hcnkgZm9ybSBvZiB0aGlua2luZywgd2hpbGUgcXVhbnR1bSBjb21wdXRpbmcgaXRzZWxmIHJlcHJlc2VudHMgbm9uLWJpbmFyeSByZWFzb25pbmchIDwvaT5UaGF0IFF1YW50dW0gYWxsb3dzIGZvciBhIHRoaXJkIHN0YXRlLCByYXRoZXIgdGhhbiBDbGFzc2ljYWwgMiBzdGF0ZXMuIFRoaXMgbWVhbnMgd2l0aCB0d28gdHJhbnNpc3RvcnMgY2FuIGluIG9uZSBpbnN0YW5jZSB5aWVsZCAyIHBvc3NpYmlsaXRpZXMsIHdoaWxlIHR3byBRdWFudHVtICdxdWJpdHMnIHlpZWxkIGV4YWN0bHkgZm91ciBwb3NzaWJpbGl0aWVzIGluIGFuIGluc3RhbmNlOiB0aGUgdHdvIHF1Yml0cyBjYW4gYmUgb24sIG9mZiwgPGk+YW5kIGJvdGg8L2k+LiBMaWtld2lzZSA0IHRyYW5zaXN0b3JzIHlpZWxkIGZvdXIgcG9zc2libGUgc3RhdGVzIGluIG9uZSBpbnN0YW5jZSwgNCBxdWJpdCB0cmFuc2lzdG9ycyA8aT55aWVsZCAxNiBwb3NzaWJsZSBzdGF0ZXM8L2k+IHNpbmNlIGFsbCBmb3VyIGNhbiBjYXJyeSBib3RoIHN0YXRlcyBpbiBvbmUgaW5zdGFuY2UuPC9wPlxyXG4gIDxwPlNvLCBtZXJlbHkgZGlzY3Vzc2luZyB0aGUgcGFyYWRpZ20tYnJlYWtpbmcgMyBzdGF0ZXMgYWxyZWFkeSBpbXBsaWNhdGVzIG9uZSdzIGxpZmUgaW50byBxdWFudHVtIGNvbXB1dGluZydzIHNwaGVyZSBvZiByZWFsaXR5IVxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFdoZW4gd2lsbCB1c2VmdWwgcXVhbnR1bSBjb21wdXRlcnMgYmUgY29uc3RydWN0ZWQ/IFRoZSBtb3N0IG9wdGltaXN0aWMgZXhwZXJ0cyBlc3RpbWF0ZSBpdCB3aWxsIHRha2UgNSB0byAxMCB5ZWFycy4gTW9yZSBjYXV0aW91cyBvbmVzIHByZWRpY3QgMjAgdG8gMzAgeWVhcnMuIChTaW1pbGFyIHByZWRpY3Rpb25zIGhhdmUgYmVlbiB2b2ljZWQsIGJ5IHRoZSB3YXksIGZvciB0aGUgbGFzdCAyMCB5ZWFycy4pIEkgYmVsb25nIHRvIGEgdGlueSBtaW5vcml0eSB0aGF0IGFuc3dlcnMsIOKAnE5vdCBpbiB0aGUgZm9yZXNlZWFibGUgZnV0dXJlLuKAnSBIYXZpbmcgc3BlbnQgZGVjYWRlcyBjb25kdWN0aW5nIHJlc2VhcmNoIGluIHF1YW50dW0gYW5kIGNvbmRlbnNlZC1tYXR0ZXIgcGh5c2ljcywgSeKAmXZlIGRldmVsb3BlZCBteSB2ZXJ5IHBlc3NpbWlzdGljIHZpZXcuIEl04oCZcyBiYXNlZCBvbiBhbiB1bmRlcnN0YW5kaW5nIG9mIHRoZSBnYXJnYW50dWFuIHRlY2huaWNhbCBjaGFsbGVuZ2VzIHRoYXQgd291bGQgaGF2ZSB0byBiZSBvdmVyY29tZSB0byBldmVyIG1ha2UgcXVhbnR1bSBjb21wdXRpbmcgd29yay5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTM3ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3NwZWN0cnVtLmllZWUub3JnL2NvbXB1dGluZy9oYXJkd2FyZS90aGUtY2FzZS1hZ2FpbnN0LXF1YW50dW0tY29tcHV0aW5nXCI+aHR0cHM6Ly9zcGVjdHJ1bS5pZWVlLm9yZy9jb21wdXRpbmcvaGFyZHdhcmUvdGhlLWNhc2UtYWdhaW5zdC1xdWFudHVtLWNvbXB1dGluZzwvYT48L3A+ICBcclxuICBgOyBcclxuICB2YXIgYmxvZ3Bvc3QxMzYgPSAgIGBcclxuIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Dby1ib3RzLiBBbGdvcml0aG0gYW5kIEh1bWFuIGlucHV0IHRvd2FyZCBmaW5hbCBjYWxjdWxhdGlvbnMgb2YgcmVhbCwgZXhwZXJpZW5jZWQgY29uZGl0aW9ucyBjYW4gYmUgYSByZWFsIHB1enpsZS4gV2hldGhlciBEb2N0b3JzIHdpdGggYWNjZXNzIHRvIHBhdGllbnRzJyBBLkkuLWFuYWx5emVkIHBhdGllbnQgbWV0cmljcyBvciBEcml2ZXJzIHNoYXJpbmcgcmVzcG9uc2liaWxpdGllcyB3aXRoICdzZW1pLWF1dG9tYXRlZCcsIHNlbGYtZHJpdmluZyB2ZWhpY2xlcywgdGhlIGNoYWxsZW5nZS4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5EcmF3aW5nIG9uIGZvdXIgeWVhcnMgb2YgZXRobm9ncmFwaGljIHJlc2VhcmNoIGFtb25nIFViZXIgZHJpdmVycywgUm9zZW5ibGF0IGhhcyBwcm9kdWNlZCBhIHRob3JvdWdobHkgZHlzdG9waWFuIHJlcG9ydCB0aGF0IGRldGFpbHMgaG93IG1pbGxpb25zIG9mIGRyaXZlcnMgYXJlIG5vdyBtYW5hZ2VkIGJ5IGEgY29tcHV0ZXJpemVkIHN5c3RlbSB0aGF0IGNvbWJpbmVzIHRoZSBoYXJkIGF1dGhvcml0YXJpYW5pc20gb2YgRnJlZGVyaWNrIFdpbnNsb3cgVGF5bG9yIHdpdGggdGhlIGN5bmljYWwgY2hlZXJsZWFkaW5nIG9mIE1pY2hhZWwgU2NvdHQuXHJcbjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5UaGUgY3VsdHVyYWwgbWFuYWdlbWVudCBvZiBsZWFkZXItbGVzcyBhdXRvbWF0aW9uIG1ha2VzIGZvciBhIGxlc3MgdXNlZnVsIHRvb2wgZm9yIGh1bWFuczogVGhlIG1vcmUgYXV0b25vbW91cyB0aGUgdG9vbCAgZG9lcyBub3QgbmVjZXNzYXJpbHkgdHJhbnNsYXRlIHRvIG9wdGltYWwgcmVsYXRpb25zOiAgIEZvciBleGFtcGxlLCBpbi1ncm91cCB0aGlua2luZyB3aGVyZSBpZGVhcyBhcmUgcmVjeWNsZWQgYW5kIG1hZ25pZmllZCBkdWUgdG8gdGVjaG5vbG9naWNhbCBlZmZlY3QgcmF0aGVyIHRoYW4gY29uc2Npb3VzIHdpbGwuIFNvLCB0aGUgaGVhbHRoaWVyIG1vcmUgdXNlZnVsIHRlY2hub2xvZ3kgY2FuIG9mdGVuIGJlIHRoZSBtb3N0IGludGVyYWN0aXZlIGFuZCBoaWdobHkgY29uZmlndXJhYmxlIHRvb2xzLCB3aGV0aGVyIHBob25lIGRldmljZXMgb3IgYXBwbGljYXRpb24gc29mdHdhcmUuIFNvLCBpbiBzdW0sIHRoZSBDby1Cb3QgaXMgYSBnby1ib3QgLS0gYSBiZXR0ZXIgYm90LmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTM2ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vbnltYWcuY29tL2ludGVsbGlnZW5jZXIvMjAxOC8xMS9hbGV4LXJvc2VuYmxhdHMtdWJlcmxhbmQtcmV2aWV3Lmh0bWxcIj5odHRwOi8vbnltYWcuY29tL2ludGVsbGlnZW5jZXIvMjAxOC8xMS9hbGV4LXJvc2VuYmxhdHMtdWJlcmxhbmQtcmV2aWV3Lmh0bWw8L2E+PC9wPiAgXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTM1ID0gICBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BLkkuJ3Mgc2VnbWVudGVkLCBleHBhbnNpdmUgbGFuZHNjYXBlIHJhbmdlcyBmcm9tIGZyZWUtd2hlZWxpbmcgc3RhcnQtdXBzIHRvIERJWSBob2JieWlzdHMgdG8gVW5pdmVyc2l0eSByZXNlYXJjaGVycy4gVGhpcyBkaXZlcnNpdHkgb2YgQS5JLiBkZXNpZ25zLCBjb3VwbGVkIHdpdGggZnJlZSBhY2Nlc3MgdG8gb3Blbi1zb3VyY2UgdG9vbHMgcHJvdmlkZXMgZm9yIGFuIGVudGlyZWx5IHVucHJlZGljdGFibGUgcGF0aC4gIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhpcyBpcyBhbiB1bnNldHRsZWQgZmllbGQuIEl0J3Mgbm90IGxpa2UgcGh5c2ljcy5cIjxiciAvPlxyXG5cclxuICBBSSBtYXkgc2VlbSB0byBiZSBhIHNtb290aC1ydW5uaW5nIGFzc2VtYmx5IGxpbmUgb2Ygc3RhcnR1cHMsIHByb2R1Y3RzIGFuZCByZXNlYXJjaCBwcm9qZWN0cy4gVGhlIHJlYWxpdHksIGhvd2V2ZXIsIGlzIGEgbGFuZHNjYXBlIGNsb3VkZWQgYnkgdW5jZXJ0YWludHkuXHJcbiAgW0F1dGhvcl0gRm9yZCdzIFtBLkkuLWV4cGVydF0gaW50ZXJ2aWV3ZWVzIGNvdWxkIG5vdCBhZ3JlZSBvbiB3aGVyZSB0aGVpciBmaWVsZCBzdGFuZHMsIGhvdyB0byBwdXNoIGl0IGZvcndhcmQgb3Igd2hlbiBpdCB3aWxsIHJlYWNoIGl0cyB1bHRpbWF0ZSBnb2FsOiBhIG1hY2hpbmUgd2l0aCBodW1hbmxpa2UgaW50ZWxsaWdlbmNlLlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIFdoeSBpdCBtYXR0ZXJzOiBUaGUgZW1icnlvbmljIHN0YXRlIGluIHdoaWNoIEZvcmQgZm91bmQgQUkg4oCUIHNvIGVhcmx5IGluIGl0cyBkZXZlbG9wbWVudCBtb3JlIHRoYW4gYSBoYWxmLWNlbnR1cnkgYWZ0ZXIgaXRzIGJpcnRoIHRoYXQgdGhlIGJhc2ljcyBhcmUgc3RpbGwgdXAgZm9yIGdyYWJzIOKAlCBzdWdnZXN0cyBob3cgZmFyIGl0IGhhcyB0byBnbyBiZWZvcmUgcmVhY2hpbmcgbWF0dXJpdHkuIE9uIGhpcyBibG9nLCBCcm9va3MgaGFzIHNhaWQgdGhhdCBBSSBpcyBvbmx5IDElIG9mIHRoZSB3YXkgdG93YXJkIGh1bWFuIGludGVsbGlnZW5jZS5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTM1ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5heGlvcy5jb20vYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UtZGlzYWdyZWVtZW50cy1tYWNoaW5lLWxlYXJuaW5nLWQyNmVmODg0LWI0MTUtNDNjNi1hZmYyLWQxN2EwNTQ4MzM4OS5odG1sXCI+aHR0cHM6Ly93d3cuYXhpb3MuY29tL2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlLWRpc2FncmVlbWVudHMtbWFjaGluZS1sZWFybmluZy1kMjZlZjg4NC1iNDE1LTQzYzYtYWZmMi1kMTdhMDU0ODMzODkuaHRtbDwvYT48L3A+IFxyXG4gXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTM0ID0gICBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Db21wYXJlZCB3aXRoIHNvIG1hbnkgb3RoZXIgb3B0aW9ucywgaW5jbHVkaW5nIHNtYXJ0IEN1cnJlbmN5IHRoYXQgZG91YmxlcyBhcyBhIHByb2dyYW1tYWJsZSBsZWdhbCBjb250cmFjdCBsaWtlIEV0aGVyZXVtIG9yIGVuZXJneS1mcmllbmRseSAnUHJvb2Ytb2YtU3Rha2UnIGFsZ29yaXRobSBDdXJyZW5jaWVzLCBvbmUgaGFzIHRvIHdvbmRlciB3aHkgQml0Y29pbiBoYXMgbWFuYWdlZCB0byBoYW5nIGFyb3VuZCBhcyBsb25nIGFzIGl0IGhhcyAuLi4gZXZlbiBpZiBuYW1lLXJlY29nbml0aW9uIGFuZCBzaW1wbGljaXR5IG9mIHRoZSB0ZW4teWVhciBvbGQgdGVjaG5vbG9neSBhcmUgaXRzIHR3byBiZXN0IGF0dHJpYnV0ZXMuIFxyXG4gIDwvcD5cclxuICA8cD5Tbywgd2l0aCBCaXRjb2luJ3Mgc3R1bWJsaW5nLCBwZXJoYXBzIG90aGVyIG9wdGlvbnMgYW5kIG5ldyB0ZWNobm9sb2dpZXMgY2FuIGJlIGNvbnNpZGVyZWQ6IFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+4oCcVGhlIFByb29mIG9mIFN0YWtlIGFsZ29yaXRobSBpcyBhIGdlbmVyYWxpemF0aW9uIG9mIHRoZSBQcm9vZiBvZiBXb3JrIGFsZ29yaXRobS4gSW4gUG9TLCB0aGUgbm9kZXMgYXJlIGtub3duIGFzIHRoZSDigJh2YWxpZGF0b3Jz4oCZIGFuZCwgcmF0aGVyIHRoYW4gbWluaW5nIHRoZSBibG9ja2NoYWluLCB0aGV5IHZhbGlkYXRlIHRoZSB0cmFuc2FjdGlvbnMgdG8gZWFybiBhIHRyYW5zYWN0aW9uIGZlZS4gVGhlcmUgaXMgbm8gbWluaW5nIHRvIGJlIGRvbmUsIGFzIGFsbCBjb2lucyBleGlzdCBmcm9tIGRheSBvbmUuIFNpbXBseSBwdXQsIG5vZGVzIGFyZSByYW5kb21seSBzZWxlY3RlZCB0byB2YWxpZGF0ZSBibG9ja3MsIGFuZCB0aGUgcHJvYmFiaWxpdHkgb2YgdGhpcyByYW5kb20gc2VsZWN0aW9uIGRlcGVuZHMgb24gdGhlIGFtb3VudCBvZiBzdGFrZSBoZWxkLiA8YnIgLz5cclxuICA8YnIgLz5cclxuICBTbywgaWYgbm9kZSBYIG93bnMgMiBjb2lucyBhbmQgbm9kZSBZIG93bnMgMSBjb2luLCBub2RlIFggaXMgdHdpY2UgYXMgbGlrZWx5IHRvIGJlIGNhbGxlZCB1cG9uIHRvIHZhbGlkYXRlIGEgYmxvY2sgb2YgdHJhbnNhY3Rpb25zLiBUaGUgc3BlY2lmaWMgaW1wbGVtZW50YXRpb24gb2YgUG9TIGNhbiB2YXJ5LCBkZXBlbmRpbmcgb24gdGhlIHVzZSBjYXNlLCBvciBhcyBhIG1hdHRlciBvZiBzb2Z0d2FyZSBkZXNpZ24uIEluc3RhbmNlcyBpbmNsdWRlIFByb29mIG9mIERlcG9zaXQgYW5kIFByb29mIG9mIEJ1cm4uIFRoZSBQb1MgYWxnb3JpdGhtIHNhdmVzIGV4cGVuc2l2ZSBjb21wdXRhdGlvbmFsIHJlc291cmNlcyB0aGF0IGFyZSBzcGVudCBpbiBtaW5pbmcgdW5kZXIgYSBQb1cgY29uc2Vuc3VzIHJlZ2ltZS7igJ1cclxuICA8L3A+XHJcbiAgPHA+QmV5b25kIHRoZSBwcmFjdGljYWxpdHkgb2YgcHJvZ3JhbW1hYmxlIGN1cnJlbmN5LCBzZWN1cml0eSBhdHRyaWJ1dGVzIGFyZSB0aGUgdW5zdW5nIGhlcm8gb2YgUHJvb2Ygb2YgU3Rha2UgY3VycmVuY2llczpcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIFByb29mIG9mIHN0YWtlIChha2EgUE9TKSBjcnlwdG9zIGhhcyBtYW55IHRlY2huaWNhbCBiZW5lZml0cyBidXQgYXBhcnQgZnJvbSB0aGF0IHNvbWUgcHJvb2Ygb2Ygc3Rha2UgY3J5cHRvcyBhbHNvIGdpdmUgZGlmZmVyZW50IGVjb25vbWljIGJlbmVmaXRzL2RpdmlkZW5kcyB0byBpdHMgSE9ETGVycyBieSBnaXZpbmcgdGhlbSB0aGUgb3B0aW9uIG9mIHJ1bm5pbmcgYSBtYXN0ZXJub2RlIG9yIHN0YWtpbmcgdGhlaXIgY29pbnMgaW4gYSBzdGFrZS1hYmxlIHdhbGxldC5cclxuPGJyIC8+PGJyIC8+VGhpcyBwcm92aWRlcyBkdWFsIGJlbmVmaXRzIG9mIHNlY3VyaW5nIHRoZSBibG9ja2NoYWluIG5ldHdvcmsgYXMgd2VsbCBhcyBjcmVhdGluZyBhbiBvcHBvcnR1bml0eSBmb3IgdXNlcnMgdG8gZ2V0IGluY2VudGl2ZXMgb3IgZGl2aWRlbmRzIG9uIHRoZWlyIGhvbGRpbmdzLlxyXG48c3VwPjE8L3N1cD5cclxuICA8L3A+YDtcclxuICBcclxuICB2YXIgYmxvZ2NpdGUxMzQgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9jb2lubW9ua3MvYmxvY2tjaGFpbi1jb25zZW5zdXMtYWxnb3JpdGhtLXRoZS1wcm9vZi1vZi1zdGFrZS1zbGljZS1hNGJkYTY2NThiYmVcIj5odHRwczovL21lZGl1bS5jb20vY29pbm1vbmtzL2Jsb2NrY2hhaW4tY29uc2Vuc3VzLWFsZ29yaXRobS10aGUtcHJvb2Ytb2Ytc3Rha2Utc2xpY2UtYTRiZGE2NjU4YmJlPC9hPjwvcD4gXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2NvaW5zdXRyYS5jb20vcHJvb2Ytb2Ytc3Rha2UtY3J5cHRvY3VycmVuY2llcy9cIj5odHRwczovL2NvaW5zdXRyYS5jb20vcHJvb2Ytb2Ytc3Rha2UtY3J5cHRvY3VycmVuY2llcy88L2E+PGJyIC8+PGJyIC8+aHR0cHM6Ly9iaXRjb2luLm9yZy9iaXRjb2luLnBkZjwvcD4gXHJcbiAgYDsgXHJcbiAgdmFyIGJsb2dwb3N0MTMzID0gICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlByb29mLW9mLVdvcmsgQmxvY2tjaGFpbiBBbGdvcml0aG1zIHRoYXQgdW5kZXJseSA8aT5zb21lPC9pPiBjcnlwdG9jdXJyZW5jaWVzLS1CaXRjb2luIGZvciBleGFtcGxlLS1oYXZlIGNlcnRhaW5seSBoYXJkIG9uIEVhcnRoJ3MgY2xpbWF0ZSBkaWxlbW1hLiBUaGVyZWZvcmUsIGl0J3Mgd2l0aCBhIHNpbHZlci1saW5pbmcgdGhhdCB0aGUgY3VycmVuY3kgaXMgYm90dG9taW5nIC4uLiAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBCaXRjb2luIGlzIGluIGNyaXNpcy4gXHJcbiAgWW91IGNhbiBuZXZlciByZWFsbHkgZGVjbGFyZSBpdCBkZWFkIOKAlCB0aGUgaWRlYSBvZiBhbiBlbGVjdHJvbmljIGN1cnJlbmN5IHRoYXQgaXMgdGhlb3JldGljYWxseSBib3JkZXJsZXNzIGFuZCBsYXdsZXNzIHdpbGwgYWx3YXlzIGxpdmUgb24gc29tZXdoZXJlIOKAlCBidXQgaXRzIHByaWNlIGhhcyBzbHVtcGVkIDgwIHBlcmNlbnQgaW4gbGVzcyB0aGFuIGEgeWVhciwgd2lwaW5nIGFib3V0ICQ3MDAgYmlsbGlvbiBvZmYgY3J5cHRvY3VycmVuY3kgbWFya2V0cy5cclxuPGJyIC8+PGJyIC8+XHJcbldoZXJlIGRvZXMgaXQgZ28gZnJvbSBoZXJlPyBUcnVlIGJlbGlldmVycyBhcmUgYmV0dGluZyBvbiBhIHNpbXBsZSByZXBlYXQgb2YgcGFzdCBhc3NldCBidWJibGVzLCBsaWtlIGRvdC1jb20gc3RvY2tzIG9yIHJlYWwgZXN0YXRlOiBhIHN5c3RlbS13aWRlIGNsZWFuc2luZyBvZiBiYWQgYWN0b3JzIGJlZm9yZSB0aGUgcm9sbGVyLWNvYXN0ZXIgcmlkZSBiZWdpbnMgYW5ldy4gT24gdGhhdCBhcmd1bWVudCB0aGVyZeKAmXMgYSBwcmljZSBmb3IgZXZlcnl0aGluZywgZXZlbiBuaWNoZSBhc3NldHMgd2l0aCBubyBpbnRyaW5zaWMgdmFsdWUuIE1heWJlIEJpdGNvaW4gc2hvdWxkIGJlIGFib3ZlICQzLDcwMC5cclxuXHJcbjxiciAvPjxiciAvPlxyXG5CdXQgdGhlIHZpcnR1YWwgY3VycmVuY3nigJlzIGJlaGF2aW9yIHNpbmNlIHRoZSBzdGFydCBvZiB0aGUgeWVhciBkb2VzbuKAmXQganVzdCBsb29rIGxpa2UgYSBidWJibGUgYnVyc3Rpbmc7IGl0IGxvb2tzIG1vcmUgbGlrZSBhIGN1cnJlbmN5IHVuZGVyIGF0dGFjay4gTW9zdCBvZiB0aGUgcHJpY2UgY29sbGFwc2UgaGFwcGVuZWQgYmV0d2VlbiBEZWNlbWJlciBhbmQgRmVicnVhcnksIGZhbGxpbmcgZnJvbSBhbG1vc3QgJDE5LDAwMCB0byBhYm91dCAkNywwMDAuIFVudGlsIHRoaXMgbW9udGgsIHRoZSAkNiwwMDAtdG8tJDcsMDAwIHJhbmdlIHNlZW1lZCB1bmJyZWFrYWJsZS4gVGhlcmUgd2FzIGEgZmxvb3IgaW4gdGhlIHByaWNlIOKAlCB1bnRpbCBpdCBjYXZlZC5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTMzID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMS0yNy9iaXRjb2luLWNyYXNoLWlzLWEtcmVhbC1jdXJyZW5jeS1jcmlzaXNcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL29waW5pb24vYXJ0aWNsZXMvMjAxOC0xMS0yNy9iaXRjb2luLWNyYXNoLWlzLWEtcmVhbC1jdXJyZW5jeS1jcmlzaXM8L2E+PC9wPiBcclxuICBgOyBcclxuIFxyXG4gIHZhciBibG9ncG9zdDEzMiA9ICAgYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DUklTUFIgdGVjaCBhbmQgdGhlIGZpcnN0IGdlbmVyYXRpb24gb2YgQ1JJU1BSIGJhYmllcyBoZXJhbGRzIGEgbmV3IGVyYSAuLi5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkFjY29yZGluZyB0byBDaGluZXNlIG1lZGljYWwgZG9jdW1lbnRzIHBvc3RlZCBvbmxpbmUgdGhpcyBtb250aCwgYSB0ZWFtIGF0IHRoZSBTb3V0aGVybiBVbml2ZXJzaXR5IG9mIFNjaWVuY2UgYW5kIFRlY2hub2xvZ3ksIGluIFNoZW56aGVuLCBoYXMgYmVlbiByZWNydWl0aW5nIGNvdXBsZXMgaW4gYW4gZWZmb3J0IHRvIGNyZWF0ZSB0aGUgZmlyc3QgZ2VuZS1lZGl0ZWQgYmFiaWVzLiBUaGV5IHBsYW5uZWQgdG8gZWxpbWluYXRlIGEgZ2VuZSBjYWxsZWQgQ0NSNSBpbiBob3BlcyBvZiByZW5kZXJpbmcgdGhlIG9mZnNwcmluZyByZXNpc3RhbnQgdG8gSElWLCBzbWFsbHBveCwgYW5kIGNob2xlcmEuXHJcbjxiciAvPjxiciAvPlxyXG5IZSBKaWFua3VpIGxlYWRzIGEgdGVhbSB1c2luZyB0aGUgZ2VuZS1lZGl0aW5nIHRlY2hub2xvZ3kgQ1JJU1BSIGluIGFuIGVmZm9ydCB0byBwcmV2ZW50IGRpc2Vhc2UgaW4gbmV3Ym9ybnMgW2F0XSBcclxuU09VVEhFUk4gVU5JVkVSU0lUWSBPRiBTQ0lFTkNFIEFORCBURUNITk9MT0dZXHJcblRoZSBjbGluaWNhbCB0cmlhbCBkb2N1bWVudHMgZGVzY3JpYmUgYSBzdHVkeSBpbiB3aGljaCBDUklTUFIgaXMgZW1wbG95ZWQgdG8gbW9kaWZ5IGh1bWFuIGVtYnJ5b3MgYmVmb3JlIHRoZXkgYXJlIHRyYW5zZmVycmVkIGludG8gd29tZW7igJlzIHV0ZXJ1c2VzLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEzMiA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGVjaG5vbG9neXJldmlldy5jb20vcy82MTI0NTgvZXhjbHVzaXZlLWNoaW5lc2Utc2NpZW50aXN0cy1hcmUtY3JlYXRpbmctY3Jpc3ByLWJhYmllcy9cIj5odHRwczovL3d3dy50ZWNobm9sb2d5cmV2aWV3LmNvbS9zLzYxMjQ1OC9leGNsdXNpdmUtY2hpbmVzZS1zY2llbnRpc3RzLWFyZS1jcmVhdGluZy1jcmlzcHItYmFiaWVzLzwvYT48L3A+IFxyXG4gIGA7XHJcbiAgdmFyIGJsb2dwb3N0MTMxID0gICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkxhdGVuY3kgYXQgbmVhci16ZXJvIHRlcm1zIG1ha2VzIDVHIHRoZSBtaXNzaW5nIGFuZCBmaW5hbCBpbmdyZWRpZW50IGZvciB0aGUgaW1taW5lbnQgSW9UIHJldm9sdXRpb24tLXNvIHdoeSBub3QgcHJvdGVjdCB0aGUgaGFyZHdhcmUgZm91bmRhdGlvbj9cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkh1YXdlaSBoYXMgZmFsbGVuIG91dCBvZiBmYXZvciB3aXRoIHRoZSBVUyBnb3Zlcm5tZW50IGFmdGVyIGEgY29uZ3Jlc3Npb25hbCByZXBvcnQgZnJvbSAyMDEyIGNhbGxlZCBpdCBhIG5hdGlvbmFsIHNlY3VyaXR5IHRocmVhdCBvdXQgb2YgY29uY2VybnMgdGhhdCB0aGUgQ2hpbmVzZSBnb3Zlcm5tZW50IGNvdWxkIGNvbXBlbCB0aGUgY29tcGFueSB0byBnaXZlIGl0IGFjY2VzcyB0byBzZW5zaXRpdmUgZGF0YS4gSnVzdCBiZWZvcmUgdGhpcyB5ZWFyJ3MgbWlkdGVybSBlbGVjdGlvbnMsIHRoZSBjb3VudHJ5IGV2ZW4gYmFubmVkIGdvdmVybm1lbnQgcGVyc29ubmVsIGZyb20gdXNpbmcgSHVhd2VpIGFuZCBaVEUgZGV2aWNlcy5cclxuICA8YnIgLz48YnIgLz4gXHJcbiAgVGhlIFdhbGwgU3RyZWV0IEpvdXJuYWwgc2F5cyBVUyBvZmZpY2lhbHMgYnJpZWZlZCByZXByZXNlbnRhdGl2ZXMgZnJvbSBHZXJtYW55LCBKYXBhbiBhbmQgSXRhbHkgaW4gYW4gZWZmb3J0IHRvIGRpc3N1YWRlIGJvdGggZ292ZXJubWVudCBhbmQgY29tbWVyY2lhbGx5IG9wZXJhdGVkIG5ldHdvcmtzIGZyb20gdXNpbmcgSHVhd2VpIChhbmQgWlRFKSBjb21wb25lbnRzLiBJbiBhZGRpdGlvbiB0byBkaXNjdXNzaW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBCZWlqaW5nIGZvcmNpbmcgdGhlIGNvbXBhbnkgdG8gY29tcGx5IHdpdGggcmVxdWVzdHMgZm9yIGRhdGEgYWNjZXNzLCB0aGUgYXV0aG9yaXRpZXMgcmVwb3J0ZWRseSBzdHJlc3NlZCA1RydzIHN1c2NlcHRpYmlsaXR5IHRvIGN5YmVyYXR0YWNrcyBhbmQgZXNwaW9uYWdlLCBhcyB3ZWxsLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEzMSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuZW5nYWRnZXQuY29tLzIwMTgvMTEvMjQvdXMtaHVhd2VpLXdhcm5pbmctNWcvXCI+aHR0cHM6Ly93d3cuZW5nYWRnZXQuY29tLzIwMTgvMTEvMjQvdXMtaHVhd2VpLXdhcm5pbmctNWcvPC9hPjwvcD4gXHJcbiAgYDtcclxuLypcclxuXHJcbmh0dHBzOi8vY29pbnN1dHJhLmNvbS9wcm9vZi1vZi1zdGFrZS1jcnlwdG9jdXJyZW5jaWVzL1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QxMzAgPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5Qcm9vZiBvZiBzdGFrZSAoYWthIFBPUykgY3J5cHRvcyBoYXMgbWFueSB0ZWNobmljYWwgYmVuZWZpdHMgYnV0IGFwYXJ0IGZyb20gdGhhdCBzb21lIHByb29mIG9mIHN0YWtlIGNyeXB0b3MgYWxzbyBnaXZlIGRpZmZlcmVudCBlY29ub21pYyBiZW5lZml0cy9kaXZpZGVuZHMgdG8gaXRzIEhPRExlcnMgYnkgZ2l2aW5nIHRoZW0gdGhlIG9wdGlvbiBvZiBydW5uaW5nIGEgbWFzdGVybm9kZSBvciBzdGFraW5nIHRoZWlyIGNvaW5zIGluIGEgc3Rha2UtYWJsZSB3YWxsZXQuXHJcbjxiciAvPjxiciAvPlRoaXMgcHJvdmlkZXMgZHVhbCBiZW5lZml0cyBvZiBzZWN1cmluZyB0aGUgYmxvY2tjaGFpbiBuZXR3b3JrIGFzIHdlbGwgYXMgY3JlYXRpbmcgYW4gb3Bwb3J0dW5pdHkgZm9yIHVzZXJzIHRvIGdldCBpbmNlbnRpdmVzIG9yIGRpdmlkZW5kcyBvbiB0aGVpciBob2xkaW5ncy5cclxuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTMwID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2NvaW5zdXRyYS5jb20vcHJvb2Ytb2Ytc3Rha2UtY3J5cHRvY3VycmVuY2llcy9cIj5odHRwczovL2NvaW5zdXRyYS5jb20vcHJvb2Ytb2Ytc3Rha2UtY3J5cHRvY3VycmVuY2llcy88L2E+PC9wPiBcclxuICBgOyBcclxuIFxyXG4gKi9cclxudmFyIGJsb2dwb3N0MTI5ID0gICBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+SW4gYW4gZXNzYXkgaW4gdGhlIGpvdXJuYWwgSkFNQSBsYXN0IG1vbnRoLCBUYW1hcmEgVGNoa29uaWEgYW5kIERyLiBKYW1lcyBMLiBLaXJrbGFuZCBvZiB0aGUgTWF5byBDbGluaWMgY2F0ZWdvcml6ZWQgdGhlc2UgcHJvY2Vzc2VzIGludG8gZm91ciBicm9hZCBncm91cHM6IGNocm9uaWMgaW5mbGFtbWF0aW9uOyBjZWxsIGR5c2Z1bmN0aW9uOyBjaGFuZ2VzIGluIHN0ZW0gY2VsbHMgdGhhdCBtYWtlIHRoZW0gZmFpbCB0byByZWdlbmVyYXRlIHRpc3N1ZTsgYW5kIGNlbGx1bGFyIHNlbmVzY2VuY2UsIHRoZSBhY2N1bXVsYXRpb24gaW4gdGlzc3VlIG9mIGFnaW5nIGNlbGxzIHRoYXQgYWNjb21wYW5pZXMgZGlzZWFzZS4gT2xkIGNlbGxzLCByZXNlYXJjaGVycyBoYXZlIGZvdW5kLCBzZWNyZXRlIHByb3RlaW5zLCBsaXBpZHMgYW5kIG90aGVyIHN1YnN0YW5jZXMgdGhhdCBpbmNyZWFzZSBpbmZsYW1tYXRpb24gYW5kIHRpc3N1ZSBkZXN0cnVjdGlvbi4gPHN1cD4xPC9zdXA+XHJcbjwvcD5gO1xyXG5cclxudmFyIGJsb2djaXRlMTI5ID0gYFxyXG48cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnl0aW1lcy5jb20vMjAxOC8xMS8xOS9oZWFsdGgvaHVtYW4tbGlmZS1zcGFuLmh0bWxcIj5odHRwczovL3d3dy5ueXRpbWVzLmNvbS8yMDE4LzExLzE5L2hlYWx0aC9odW1hbi1saWZlLXNwYW4uaHRtbDwvYT48L3A+IFxyXG5cclxuPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vamFtYW5ldHdvcmsuY29tL2pvdXJuYWxzL2phbWEvYXJ0aWNsZS1hYnN0cmFjdC8yNzAzMTEzXCI+aHR0cHM6Ly93d3cudGhlbGFuY2V0LmNvbS9hY3Rpb24vc2hvd1BkZj9waWk9UzAxNDAtNjczNiUyODE4JTI5MzE2OTQtNTwvYT5cclxuPC9wPiBcclxuYDtcclxuICB2YXIgYmxvZ3Bvc3QxMjggPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RS5VLidzIGZhci1yZWFjaGluZyBkYXRhIHByaXZhY3kgbGF3LS1ub3cgc2l4IG1vbnRocyBsYXRlci0tcmV2ZWFscyBob3cgdW5tYW5hZ2VhYmxlIGFuZCBmYXItZmx1bmcgcGVyc29uYWwgZGF0YSBoYXMgcHJvcG9nYXRlZC4gQnV0IGV2ZW4gcGVyc29uYWwgZGF0YSBoYXMgYSBzaGVsZi1saWZlIGZvciByZWxldmVuY2UgYW5kIHZhbHVlLiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBHZW5lcmFsIERhdGEgUHJvdGVjdGlvbiBSZWd1bGF0aW9uIGlzIGEgc3dlZXBpbmcgcGVyc29uYWwgZGF0YSBwcml2YWN5IGxhdyB0aGF0IGNhbWUgaW50byBmb3JjZSBpbiBsYXRlIE1heSBpbiB0aGUgRVUuIEZvciB0aGUgcmVzdCBvZiB0aGUgd29ybGQsIGl0J3Mgdmlld2VkIGFzIGEgYmVsbHdldGhlciBmb3Igd2hldGhlciBCaWcgVGVjaCBjYW4gYmUgaGVsZCBpbiBjaGVjayB3aGVuIGltbWVuc2UgZGF0YSBsZWFrcyBzZWVtIHRvIGhhcHBlbiB3aXRoIHBhaW5mdWwgcmVndWxhcml0eS5cclxuICA8YnIgLz48YnIgLz5cclxuICBNYWpvciBkYXRhIGJyb2tlcnMgQWN4aW9tIGFuZCBPcmFjbGUgYXJlIGFtb25nIHNldmVuIGNvbXBhbmllcyBhY2N1c2VkIG9mIHZpb2xhdGluZyBHRFBSIGxhd3Mgb24gcGVyc29uYWwgaW5mb3JtYXRpb24gcHJpdmFjeS4gQWR2b2NhdGVzIGhvcGUgdGhlIGNvbXBsYWludHMgd2lsbCBzaGVkIGxpZ2h0IG9uIHRoZSBvcGFxdWUgd2F5cyB0aGF0IHBlcnNvbmFsIGRhdGEgaXMgdHJhZGVkIHRocm91Z2ggdGhpcmQgcGFydGllcyBvbmxpbmUgYm90aCBpbiB0aGUgRVUgYW5kIHRoZSBVUy5cclxuICA8c3VwPjE8L3N1cD5cclxuICA8L3A+YDtcclxuICBcclxuICB2YXIgYmxvZ2NpdGUxMjggPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmVuZ2FkZ2V0LmNvbS8yMDE4LzExLzA4L2dkcHItZGF0YS1icm9rZXJzLWNvbXBsYWludHMvXCI+aHR0cHM6Ly93d3cuZW5nYWRnZXQuY29tLzIwMTgvMTEvMDgvZ2Rwci1kYXRhLWJyb2tlcnMtY29tcGxhaW50cy88L2E+PC9wPiBcclxuICBgO1xyXG4gXHJcblxyXG4gXHJcbiAgdmFyIGJsb2dwb3N0MTI3PSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VHJhZGUgV2FycyBtYWtlIGZvciBleHBlbnNpdmUgcGhvbmVzIGFuZCB0ZWNoIGx1eHVyaWVzIC4uLiBNYWtlIExvdmUgTm90IFdhciFcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkl04oCZcyBpbXBvcnRhbnQgdG8gbm90ZSB0aGF0IGFsbCBvZiB0aGVzZSByZWR1Y2VkLWRlbWFuZCBmb3JlY2FzdHMgZG9u4oCZdCBuZWNlc3NhcmlseSBtZWFuIHRoYXQgbm9ib2R5IGlzIGJ1eWluZyB0aGUgaVBob25lLiBTdXBwbGllcnMgZmFtb3VzbHkgY3V0IHRoZWlyIHByb2R1Y3Rpb24gZm9yZWNhc3RzIHNob3J0bHkgYmVmb3JlIHRoZSByZWxlYXNlIG9mIHRoZSBpUGhvbmUgNiDigJQgdGhlIGJlc3Qtc2VsbGluZyBpUGhvbmUgaW4gaGlzdG9yeSDigJQgd2hpY2ggc2F3IEFwcGxl4oCZcyBzdXBwbHkgY2hhaW4gcXVpY2tseSBzY3JhbWJsaW5nIHRvIG1lZXQgZGVtYW5kLiAgPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTI3ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vbnltYWcuY29tL2ludGVsbGlnZW5jZXIvMjAxOC8xMS9wb29yLWlwaG9uZS1zdXBwbGllci1mb3JlY2FzdHMtbWFrZS1ldmVyeW9uZS12ZXJ5LW5lcnZvdXMuaHRtbFwiPmh0dHA6Ly9ueW1hZy5jb20vaW50ZWxsaWdlbmNlci8yMDE4LzExL3Bvb3ItaXBob25lLXN1cHBsaWVyLWZvcmVjYXN0cy1tYWtlLWV2ZXJ5b25lLXZlcnktbmVydm91cy5odG1sPC9hPjwvcD4gXHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxMjYgPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5NYXJrIFp1Y2tlcmJlcmcgZ2F0aGVyZWQgcm91Z2hseSA1MCBvZiBoaXMgdG9wIGxpZXV0ZW5hbnRzIGVhcmxpZXIgdGhpcyB5ZWFyIGFuZCB0b2xkIHRoZW0gdGhhdCBGYWNlYm9vayBJbmMuIHdhcyBhdCB3YXIgYW5kIGhlIHBsYW5uZWQgdG8gbGVhZCB0aGUgY29tcGFueSBhY2NvcmRpbmdseS48YnIgLz5cclxuPGJyIC8+XHJcbiAgRHVyaW5nIHRpbWVzIG9mIHBlYWNlLCBleGVjdXRpdmVzIGNhbiBtb3ZlIG1vcmUgc2xvd2x5IGFuZCBlbnN1cmUgdGhhdCBldmVyeWJvZHkgaXMgb24gYm9hcmQgd2l0aCBrZXkgZGVjaXNpb25zLCBoZSBzYWlkIGR1cmluZyB0aGUgSnVuZSBtZWV0aW5nLCBhY2NvcmRpbmcgdG8gcGVvcGxlIGZhbWlsaWFyIHdpdGggdGhlIHJlbWFya3MuIEJ1dCB3aXRoIEZhY2Vib29rIHVuZGVyIHNpZWdlIGZyb20gbGF3bWFrZXJzLCBpbnZlc3RvcnMgYW5kIGFuZ3J5IHVzZXJzLCBoZSBuZWVkZWQgdG8gYWN0IG1vcmUgZGVjaXNpdmVseSwgdGhlIHBlb3BsZSBzYWlkLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEyNiA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL255bWFnLmNvbS9pbnRlbGxpZ2VuY2VyLzIwMTgvMTEvbWFyay16dWNrZXJiZXJnLWRlY2xhcmVkLWZhY2Vib29rLWF0LXdhci5odG1sXCI+aHR0cDovL255bWFnLmNvbS9pbnRlbGxpZ2VuY2VyLzIwMTgvMTEvbWFyay16dWNrZXJiZXJnLWRlY2xhcmVkLWZhY2Vib29rLWF0LXdhci5odG1sPC9hPjwvcD4gXHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxMjUgPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj48aT4gQXQgaG9tZSBpbiBOb3J0aGVybiBDYWxpZm9ybmlhLCBTYW4gRnJhbmNpc2NvIHZvdGVycyBvdmVyd2hlbG1pbmdseSBwYXNzZWQgYSB0YXggZGVzaWduZWQgdG8gZXh0cmFjdCBtb25leSBmcm9tIHRlY2ggY29tcGFuaWVzIHRvIGhlbHAgZWFzZSBob21lbGVzc25lc3MgaW4gdGhlIGNpdHkuIEFjcm9zcyB0aGUgQmF5LCBPYWtsYW5kIHZvdGVycyBwYXNzZWQgYSBwcm9ncmVzc2l2ZSBwcm9wZXJ0eS10cmFuc2ZlciB0YXgsIHdoaWNoIHdhcyBhbm90aGVyIHdheSBvZiB0YXhpbmcgdGhlIGVub3Jtb3VzIHdlYWx0aCB0aGF04oCZcyBwb3VyZWQgaW50byB0aGUgQmF5IEFyZWEuXHJcbiAgPGJyIC8+PGJyIC8+IFxyXG4gIExvY2FsbHkgYW5kIG5hdGlvbmFsbHksIHRoZSB0ZWNoIGluZHVzdHJ5IGhhcyBnb25lIGZyb20gYnJpZ2h0IHlvdW5nIHN0YXIgdG8gZGVhdGggc3Rhci4gTm90IG9ubHkgaGF2ZSBTaWxpY29uIFZhbGxleSBjb21wYW5pZXMgdHVybmVkIG91dCB0byBiZSByb3VnaGx5IGFzIGRpcnR5IGluIHRoZWlyIGNvcnBvcmF0ZSBtYW5ldXZlcmluZyBhcyBhbnkgb2xkIG9pbCBjb21wYW55IG9yIG1pbGl0YXJ5IGNvbnRyYWN0b3IsIGJ1dCBiZWNhdXNlIG9mIHRoZSBWYWxsZXnigJlzIGZvdW5kZXIgd29yc2hpcCwgdGhleeKAmXZlIGJlZW4gYWxtb3N0IHVuaXF1ZWx5IGNvbnRyb2xsZWQgYnkgYSB0aW55IG51bWJlciBvZiBwZW9wbGUuXHJcbiAgPGJyIC8+PGJyIC8+IFxyXG4gIFJlYWQ6IFdlcmUgd2UgZGVzdGluZWQgdG8gbGl2ZSBpbiBGYWNlYm9va+KAmXMgd29ybGQ/XHJcbiAgXHJcbiAgQW5kIGFzIGluIG1vc3QgdGhpbmdzLCBGYWNlYm9vayBkaXN0aWxscywgb3IgYXQgbGVhc3QgZW1ib2RpZXMsIHRoZXNlIGluZHVzdHJ5LXdpZGUgcHJhY3RpY2VzLiBBZnRlciBhIGJydXRhbCB0d28geWVhcnMgdGhhdCBzdGFydGVkIHdpdGggdGhlIDIwMTYgZWxlY3Rpb24sIE1hcmsgWnVja2VyYmVyZyByZXNwb25kZWQgYnkgcGxhY2luZyBsb3lhbGlzdHMgaW4gY2hhcmdlIG9mIGFsbCBGYWNlYm9vayBJbmMuIHByb3BlcnRpZXMuIFRoZSBjb21wYW554oCZcyBsb2JieWlzdHMgcHVzaGVkIGEgbGluZSB0aGF0IGl0cyBvcHBvbmVudHMgd2VyZSBsaW5rZWQgdG8gR2VvcmdlIFNvcm9zLCB3aGlsZSByZXBvcnRpbmcgb3RoZXIgZW5lbWllcyB0byB0aGUgQW50aS1EZWZhbWF0aW9uIExlYWd1ZS48c3VwPjE8L3N1cD5cclxuPC9pPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEyNSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGhlYXRsYW50aWMuY29tL3RlY2hub2xvZ3kvYXJjaGl2ZS8yMDE4LzExL2ZhY2Vib29rLWdvb2dsZS1hbWF6b24tYW5kLWNvbGxhcHNlLXRlY2gtbXl0aG9sb2d5LzU3NTk4OS9cIj5odHRwczovL3d3dy50aGVhdGxhbnRpYy5jb20vdGVjaG5vbG9neS9hcmNoaXZlLzIwMTgvMTEvZmFjZWJvb2stZ29vZ2xlLWFtYXpvbi1hbmQtY29sbGFwc2UtdGVjaC1teXRob2xvZ3kvNTc1OTg5LzwvYT48L3A+IFxyXG4gIGA7XHJcbiAgdmFyIGJsb2dwb3N0MTI0ID0gICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+V2hpbGUgbW9zdCBlZmZvcnRzIHRvIHNlY3VyZSBkaWdpdGFsIGluZnJhc3RydWN0dXJlIHdlcmUgZml4YXRlZCBvbiBibG9ja2luZyBiYWQgZ3V5cyBmcm9tIGdldHRpbmcgaW4sIGZldyBmb2N1c2VkIG9uIHRoZSByZXZlcnNlOiBzdG9wcGluZyB0aGVtIGZyb20gbGVha2luZyBpbmZvcm1hdGlvbiBvdXQuIEJhc2VkIG9uIHRoYXQgaWRlYSwgdGhlIGdyb3VwIGZvdW5kZWQgYSBuZXcgY3liZXJzZWN1cml0eSBjb21wYW55IGNhbGxlZCBEYXJrdHJhY2UuXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgaGUgZmlybSBwYXJ0bmVyZWQgd2l0aCBtYXRoZW1hdGljaWFucyBhdCB0aGUgVW5pdmVyc2l0eSBvZiBDYW1icmlkZ2UgdG8gZGV2ZWxvcCBhIHRvb2wgdGhhdCB3b3VsZCB1c2UgbWFjaGluZSBsZWFybmluZyB0byBjYXRjaCBpbnRlcm5hbCBicmVhY2hlcy4gUmF0aGVyIHRoYW4gdHJhaW4gdGhlIGFsZ29yaXRobXMgb24gaGlzdG9yaWNhbCBleGFtcGxlcyBvZiBhdHRhY2tzLCBob3dldmVyLCB0aGV5IG5lZWRlZCBhIHdheSBmb3IgdGhlIHN5c3RlbSB0byByZWNvZ25pemUgbmV3IGluc3RhbmNlcyBvZiBhbm9tYWxvdXMgYmVoYXZpb3IuIFRoZXkgdHVybmVkIHRvIHVuc3VwZXJ2aXNlZCBsZWFybmluZywgYSB0ZWNobmlxdWUgYmFzZWQgb24gYSByYXJlIHR5cGUgb2YgbWFjaGluZS1sZWFybmluZyBhbGdvcml0aG0gdGhhdCBkb2VzbuKAmXQgcmVxdWlyZSBodW1hbnMgdG8gc3BlY2lmeSB3aGF0IHRvIGxvb2sgZm9yLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEyNCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGVjaG5vbG9neXJldmlldy5jb20vcy82MTI0MjcvdGhlLXJhcmUtZm9ybS1vZi1tYWNoaW5lLWxlYXJuaW5nLXRoYXQtY2FuLXNwb3QtaGFja2Vycy13aG8taGF2ZS1hbHJlYWR5LWJyb2tlbi1pbi9cIj5odHRwczovL3d3dy50ZWNobm9sb2d5cmV2aWV3LmNvbS9zLzYxMjQyNy90aGUtcmFyZS1mb3JtLW9mLW1hY2hpbmUtbGVhcm5pbmctdGhhdC1jYW4tc3BvdC1oYWNrZXJzLXdoby1oYXZlLWFscmVhZHktYnJva2VuLWluLzwvYT48L3A+IFxyXG4gIGA7XHJcbiAgdmFyIGJsb2dwb3N0MTIzID0gICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+ICBBbHRob3VnaCBpdCBtYXkgc291bmQgbGlrZSBhIHRlcm0gdG8gZGVzY3JpYmUgYSBwb29ybHkgcGVyZm9ybWluZyBJVCBzdGFmZiwgemVyby1rbm93bGVkZ2UgY29tcHV0aW5nIGNvdWxkIHJlcHJlc2VudCBhbiBldm9sdXRpb24gaW4gY29ycG9yYXRlIGRhdGEgcHJvdGVjdGlvbi4gVGhlIGFwcHJvYWNoIGVuYWJsZXMgZGF0YSB0byBiZSBwcm9jZXNzZWQgd2hpbGUgaXQgcmVtYWlucyBlbmNyeXB0ZWQsIHNvIHRoYXQgYW5hbHl0aWNzIGNhbiBiZSBydW4gd2l0aG91dCBleHBvc2luZyB0aGUgaW5mb3JtYXRpb24uIEpQIE1vcmdhbiBDaGFzZSAmIENvLiByZWNlbnRseSBsZWQgYSAkMTAgbWlsbGlvbiBTZXJpZXMgQSBmdW5kaW5nIHJvdW5kIGluIGRhdGEgc2VjdXJpdHkgYW5kIGFuYWx5dGljcyBzdGFydHVwIElucGhlciBJbmMuLCB3aGljaCB3b3JrcyBpbiB0aGUgYXJlYS4gSW4gYSBjb252ZXJzYXRpb24gd2l0aCBDSU8gSm91cm5hbCdzIFNhcmEgQ2FzdGVsbGFub3MsIFNhbWlrIENoYW5kYXJhbmEsIGhlYWQgb2YgZGF0YSBhbmFseXRpY3MgZm9yIHRoZSBjb3Jwb3JhdGUgYW5kIGludmVzdG1lbnQgYmFuayBkaXZpc2lvbiwgbWFrZXMgdGhlIGNhc2UgZm9yIHRoZSB0ZWNobm9sb2d5LlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIEtlZXBpbmcgY2xpZW50IGRhdGEgc2FmZS4gSlBNb3JnYW4gY291bGQgdXNlIHRoZSDigJhzZWNyZXQgY29tcHV0aW5n4oCZIHRlY2hub2xvZ3kgdG8gYW5hbHl6ZSBhIGN1c3RvbWVy4oCZcyBwcm9wcmlldGFyeSBkYXRhIG9uIHRoZWlyIGJlaGFsZiwgdXNpbmcgYXJ0aWZpY2lhbCBpbnRlbGxpZ2VuY2Ugd2l0aG91dCBzYWNyaWZpY2luZyBwcml2YWN5LCBNci4gQ2hhbmRhcmFuYSBzYWlkLiDigJxUaGlzIGdpdmVzIHVzIGEgdGVjaG5vbG9naWNhbCBzb2x1dGlvbiB0byBiZSBhYmxlIHRvIGFjdCBvbiBhIGNsaWVudOKAmXMgcHJpdmF0ZSBkYXRhIOKApiB3aXRob3V0IHRoZW0gaGF2aW5nIHRvIHdvcnJ5IGFib3V0IHRoZSBzZWN1cml0eSBjb25zdHJhaW50cyBvciBnaXZpbmcgdXAgYWxsIHRoZWlyIGluZm9ybWF0aW9uIHRvIHVzLOKAnSBoZSBzYWlkLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gIFxyXG4gIHZhciBibG9nY2l0ZTEyMyA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9ibG9ncy53c2ouY29tL2Npby8yMDE4LzExLzEzL2pwbW9yZ2FuLWludmVzdHMtaW4tc3RhcnR1cC10ZWNoLXRoYXQtYW5hbHl6ZXMtZW5jcnlwdGVkLWRhdGEvP21vZD1kamVtQ0lPX2hcIj5odHRwczovL2Jsb2dzLndzai5jb20vY2lvLzIwMTgvMTEvMTMvanBtb3JnYW4taW52ZXN0cy1pbi1zdGFydHVwLXRlY2gtdGhhdC1hbmFseXplcy1lbmNyeXB0ZWQtZGF0YS8/bW9kPWRqZW1DSU9faDwvYT48L3A+IFxyXG4gIGA7XHJcblxyXG52YXIgYmxvZ3Bvc3QxMjIgPSAgIGBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkVjby1mcmllbmRseSB1cmJhbiBjb21tdXRpbmcgb3B0aW9ucyBhcmUgYSBnaWZ0LCBhbmQgc2hvdWxkIGFsd2F5cyBiZSBoYWlsZWQuICBcclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+ICBBbHRob3VnaCBpdCBtYXkgc291bmQgbGlrZSBhIHRlcm0gdG8gZGVzY3JpYmUgYSBwb29ybHkgcGVyZm9ybWluZyBJVCBzdGFmZiwgemVyby1rbm93bGVkZ2UgY29tcHV0aW5nIGNvdWxkIHJlcHJlc2VudCBhbiBldm9sdXRpb24gaW4gY29ycG9yYXRlIGRhdGEgcHJvdGVjdGlvbi4gVGhlIGFwcHJvYWNoIGVuYWJsZXMgZGF0YSB0byBiZSBwcm9jZXNzZWQgd2hpbGUgaXQgcmVtYWlucyBlbmNyeXB0ZWQsIHNvIHRoYXQgYW5hbHl0aWNzIGNhbiBiZSBydW4gd2l0aG91dCBleHBvc2luZyB0aGUgaW5mb3JtYXRpb24uIEpQIE1vcmdhbiBDaGFzZSAmIENvLiByZWNlbnRseSBsZWQgYSAkMTAgbWlsbGlvbiBTZXJpZXMgQSBmdW5kaW5nIHJvdW5kIGluIGRhdGEgc2VjdXJpdHkgYW5kIGFuYWx5dGljcyBzdGFydHVwIElucGhlciBJbmMuLCB3aGljaCB3b3JrcyBpbiB0aGUgYXJlYS4gSW4gYSBjb252ZXJzYXRpb24gd2l0aCBDSU8gSm91cm5hbCdzIFNhcmEgQ2FzdGVsbGFub3MsIFNhbWlrIENoYW5kYXJhbmEsIGhlYWQgb2YgZGF0YSBhbmFseXRpY3MgZm9yIHRoZSBjb3Jwb3JhdGUgYW5kIGludmVzdG1lbnQgYmFuayBkaXZpc2lvbiwgbWFrZXMgdGhlIGNhc2UgZm9yIHRoZSB0ZWNobm9sb2d5LlxyXG48YnIgLz48YnIgLz5cclxuS2VlcGluZyBjbGllbnQgZGF0YSBzYWZlLiBKUE1vcmdhbiBjb3VsZCB1c2UgdGhlIOKAmHNlY3JldCBjb21wdXRpbmfigJkgdGVjaG5vbG9neSB0byBhbmFseXplIGEgY3VzdG9tZXLigJlzIHByb3ByaWV0YXJ5IGRhdGEgb24gdGhlaXIgYmVoYWxmLCB1c2luZyBhcnRpZmljaWFsIGludGVsbGlnZW5jZSB3aXRob3V0IHNhY3JpZmljaW5nIHByaXZhY3ksIE1yLiBDaGFuZGFyYW5hIHNhaWQuIOKAnFRoaXMgZ2l2ZXMgdXMgYSB0ZWNobm9sb2dpY2FsIHNvbHV0aW9uIHRvIGJlIGFibGUgdG8gYWN0IG9uIGEgY2xpZW504oCZcyBwcml2YXRlIGRhdGEg4oCmIHdpdGhvdXQgdGhlbSBoYXZpbmcgdG8gd29ycnkgYWJvdXQgdGhlIHNlY3VyaXR5IGNvbnN0cmFpbnRzIG9yIGdpdmluZyB1cCBhbGwgdGhlaXIgaW5mb3JtYXRpb24gdG8gdXMs4oCdIGhlIHNhaWQuPHN1cD4xPC9zdXA+XHJcbjwvcD5gO1xyXG5cclxudmFyIGJsb2djaXRlMTIyID0gYFxyXG48cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzE0L3ViZXItcTMtMjAxOC1jb250aW51ZXMtdG8tbG9zZS1tb25leS1hcy1pdC13b3Jrcy10by1zY2FsZS1zY29vdGVycy1iaWtlcy1hbmQtb3RoZXItbmV3ZXItYnVzaW5lc3Nlcy9cIj5odHRwczovL3RlY2hjcnVuY2guY29tLzIwMTgvMTEvMTQvdWJlci1xMy0yMDE4LWNvbnRpbnVlcy10by1sb3NlLW1vbmV5LWFzLWl0LXdvcmtzLXRvLXNjYWxlLXNjb290ZXJzLWJpa2VzLWFuZC1vdGhlci1uZXdlci1idXNpbmVzc2VzLzwvYT48L3A+XHJcbjxwIGNsYXNzPVwiY2l0ZVwiPjI8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvYW1hem9ucy1jb25zdW1lci1idXNpbmVzcy1tb3Zlcy1mcm9tLW9yYWNsZS10by1hd3MtYnV0LWxhcnJ5LWVsbGlzb25zLXdvbnQtc3RvcC10YWxraW5nL1wiPiBodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9hbWF6b25zLWNvbnN1bWVyLWJ1c2luZXNzLW1vdmVzLWZyb20tb3JhY2xlLXRvLWF3cy1idXQtbGFycnktZWxsaXNvbnMtd29udC1zdG9wLXRhbGtpbmcvPC9hPjwvcD5cclxuYDtcclxudmFyIGJsb2dwb3N0MTExID0gICBgXHJcbjxwIGNsYXNzPVwicXVvdGVcIj5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPkF0IHRoZSBoaWdoZXN0IGxldmVscyBvZiBnb3Zlcm5tZW50IHRoZSBwbGFzdGljIHBhbmljIGNhbiByZXNlbWJsZSBhIHNjcmFtYmxlZCByZXNwb25zZSB0byBhIG5hdHVyYWwgZGlzYXN0ZXIsIG9yIGEgcHVibGljIGhlYWx0aCBjcmlzaXMuIFRoZSBVbml0ZWQgTmF0aW9ucyBoYXMgZGVjbGFyZWQgYSDigJx3YXLigJ0gb24gc2luZ2xlLXVzZSBwbGFzdGljLiBJbiBCcml0YWluLCBUaGVyZXNhIE1heSBoYXMgY2FsbGVkIGl0IGEg4oCcc2NvdXJnZeKAnSwgYW5kIGNvbW1pdHRlZCB0aGUgZ292ZXJubWVudCB0byBhIDI1LXllYXIgcGxhbiB0aGF0IHdvdWxkIHBoYXNlIG91dCBkaXNwb3NhYmxlIHBhY2thZ2luZyBieSAyMDQyLiBJbmRpYSBjbGFpbWVkIGl0IHdvdWxkIGRvIHRoZSBzYW1lLCBidXQgYnkgMjAyMi48c3VwPjE8L3N1cD5cclxuPC9wPmA7XHJcblxyXG52YXIgYmxvZ2NpdGUxMTEgPSBgXHJcbjxwIGNsYXNzPVwiY2l0ZVwiPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5hbmRyb2lkcG9saWNlLmNvbS8yMDE4LzExLzE0L3BpeGVsLW5pZ2h0LXNpZ2h0LWFsc28td29ya3MtZGF5bGlnaHQtcmVkdWNpbmctbm9pc2UtYm9vc3RpbmctcmVzb2x1dGlvbi9cIj5odHRwczovL3d3dy5hbmRyb2lkcG9saWNlLmNvbS8yMDE4LzExLzE0L3BpeGVsLW5pZ2h0LXNpZ2h0LWFsc28td29ya3MtZGF5bGlnaHQtcmVkdWNpbmctbm9pc2UtYm9vc3RpbmctcmVzb2x1dGlvbi88L2E+PC9wPlxyXG5gXHJcblxyXG4gIHZhciBibG9ncG9zdDEyMiA9ICAgYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5FY28tZnJpZW5kbHkgdXJiYW4gY29tbXV0aW5nIG9wdGlvbnMgYXJlIGEgZ2lmdCwgYW5kIHNob3VsZCBhbHdheXMgYmUgaGFpbGVkLiAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5PbiBhbiBlYXJuaW5ncyBiZWZvcmUgaW50ZXJlc3QsIHRheGVzLCBkZXByZWNpYXRpb24gYW5kIGFtb3J0aXphdGlvbiBiYXNpcyAoRUJJRFRBKSwgVWJlcuKAmXMgbG9zc2VzIHdlcmUgJDUyNyBtaWxsaW9uLCB1cCBhYm91dCAyMSBwZXJjZW50IHF1YXJ0ZXIgb3ZlciBxdWFydGVyLiBBbmQgYXMgVWJlciBwcmVwYXJlcyB0byBnbyBwdWJsaWMsIHRoZSBjb21wYW55IGhhcyBzdGFydGVkIHByZXNlbnRpbmcgdGhlIGluY29tZSBzdGF0ZW1lbnRzIHdpdGggc3RvY2stYmFzZWQgY29tcGVuc2F0aW9uLlxyXG5cclxuICBUZW4geWVhcnMgZnJvbSBub3csIFViZXIgQ0VPIERhcmEgS2hvc3Jvd3NoYWhpIGVudmlzaW9ucyBpdHMgY29yZSByaWRlLWhhaWxpbmcgYnVzaW5lc3MgYWNjb3VudGluZyBmb3IgbGVzcyB0aGFuIDUwIHBlcmNlbnQgb2YgVWJlcuKAmXMgb3ZlcmFsbCBidXNpbmVzcywgS2hvc3Jvd3NoYWhpIHRvbGQgbWUgYXQgVGVjaENydW5jaCBEaXNydXB0IFNGIDIwMTguIFRoYXQgbWVhbnMgVWJlciBleHBlY3RzIGJ1c2luZXNzZXMgbGlrZSBFYXRzLCBzY29vdGVycywgYmlrZXMgYW5kIGZyZWlnaHQgdG8gY29udHJpYnV0ZSB0byBiZSBtb3JlIG9mIFViZXLigJlzIGJ1c2luZXNzLCB3aGljaCByZXF1aXJlcyBVYmVyIHRvIGludmVzdCBoZWF2aWx5IGluIHRob3NlIGJ1c2luZXNzZXMuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiBcclxuICB2YXIgYmxvZ2NpdGUxMjIgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vdGVjaGNydW5jaC5jb20vMjAxOC8xMS8xNC91YmVyLXEzLTIwMTgtY29udGludWVzLXRvLWxvc2UtbW9uZXktYXMtaXQtd29ya3MtdG8tc2NhbGUtc2Nvb3RlcnMtYmlrZXMtYW5kLW90aGVyLW5ld2VyLWJ1c2luZXNzZXMvXCI+aHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzE0L3ViZXItcTMtMjAxOC1jb250aW51ZXMtdG8tbG9zZS1tb25leS1hcy1pdC13b3Jrcy10by1zY2FsZS1zY29vdGVycy1iaWtlcy1hbmQtb3RoZXItbmV3ZXItYnVzaW5lc3Nlcy88L2E+PC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjI8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvYW1hem9ucy1jb25zdW1lci1idXNpbmVzcy1tb3Zlcy1mcm9tLW9yYWNsZS10by1hd3MtYnV0LWxhcnJ5LWVsbGlzb25zLXdvbnQtc3RvcC10YWxraW5nL1wiPiBodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9hbWF6b25zLWNvbnN1bWVyLWJ1c2luZXNzLW1vdmVzLWZyb20tb3JhY2xlLXRvLWF3cy1idXQtbGFycnktZWxsaXNvbnMtd29udC1zdG9wLXRhbGtpbmcvPC9hPjwvcD5cclxuICBgO1xyXG4gdmFyIGJsb2dwb3N0MTExID0gICBgXHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+VHVybnMgb3V0IHRoYXQgR29vZ2xlXFwncyBuZXcgTmlnaHQgU2lnaHQgbW9kZSBmb3IgUGl4ZWxzLCBmb3JtYWxseSByZWxlYXNlZCBqdXN0IGVhcmxpZXIgdG9kYXksIGhhcyBzb21lIG5vbi1uaWdodCB1dGlsaXR5LiBJbiBhIGJpdCBvZiBhIHR3aXN0LCB5b3UgY2FuIHVzZSBpdCBpbiB0aGUgZGF5dGltZSBhcyB3ZWxsIGZvciBcImRlbm9pc2luZyBhbmQgcmVzb2x1dGlvbiBpbXByb3ZlbWVudHNcIiBpbmhlcml0ZWQgZnJvbSBhbm90aGVyIEdvb2dsZSBDYW1lcmEgZmVhdHVyZTogU3VwZXIgUmVzIFpvb20uPHN1cD4xPC9zdXA+IFxyXG4gPC9wPmA7XHJcblxyXG4gdmFyIGJsb2djaXRlMTExID0gYFxyXG4gPHAgY2xhc3M9XCJjaXRlXCI+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmFuZHJvaWRwb2xpY2UuY29tLzIwMTgvMTEvMTQvcGl4ZWwtbmlnaHQtc2lnaHQtYWxzby13b3Jrcy1kYXlsaWdodC1yZWR1Y2luZy1ub2lzZS1ib29zdGluZy1yZXNvbHV0aW9uL1wiPmh0dHBzOi8vd3d3LmFuZHJvaWRwb2xpY2UuY29tLzIwMTgvMTEvMTQvcGl4ZWwtbmlnaHQtc2lnaHQtYWxzby13b3Jrcy1kYXlsaWdodC1yZWR1Y2luZy1ub2lzZS1ib29zdGluZy1yZXNvbHV0aW9uLzwvYT48L3A+XHJcbiBgXHJcbiAgdmFyICAgICBibG9ncG9zdDEwMCA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlBsYXN0aWNzIGFuZCBtaWNyby1wbGFzdGljIHdhc3RlIGp1c3QgYXdhaXRzIGEgdGVjaC1pbmZvcm1lZCBzb2x1dGlvbiFcclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5BdCB0aGUgaGlnaGVzdCBsZXZlbHMgb2YgZ292ZXJubWVudCB0aGUgcGxhc3RpYyBwYW5pYyBjYW4gcmVzZW1ibGUgYSBzY3JhbWJsZWQgcmVzcG9uc2UgdG8gYSBuYXR1cmFsIGRpc2FzdGVyLCBvciBhIHB1YmxpYyBoZWFsdGggY3Jpc2lzLiBUaGUgVW5pdGVkIE5hdGlvbnMgaGFzIGRlY2xhcmVkIGEg4oCcd2Fy4oCdIG9uIHNpbmdsZS11c2UgcGxhc3RpYy4gSW4gQnJpdGFpbiwgVGhlcmVzYSBNYXkgaGFzIGNhbGxlZCBpdCBhIOKAnHNjb3VyZ2XigJ0sIGFuZCBjb21taXR0ZWQgdGhlIGdvdmVybm1lbnQgdG8gYSAyNS15ZWFyIHBsYW4gdGhhdCB3b3VsZCBwaGFzZSBvdXQgZGlzcG9zYWJsZSBwYWNrYWdpbmcgYnkgMjA0Mi4gSW5kaWEgY2xhaW1lZCBpdCB3b3VsZCBkbyB0aGUgc2FtZSwgYnV0IGJ5IDIwMjIuPHN1cD4xPC9zdXA+PC9wPlxyXG4gYFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxMDAgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS9lbnZpcm9ubWVudC8yMDE4L25vdi8xMy90aGUtcGxhc3RpYy1iYWNrbGFzaC13aGF0cy1iZWhpbmQtb3VyLXN1ZGRlbi1yYWdlLWFuZC13aWxsLWl0LW1ha2UtYS1kaWZmZXJlbmNlXHJcbiAgICBcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS9lbnZpcm9ubWVudC8yMDE4L25vdi8xMy90aGUtcGxhc3RpYy1iYWNrbGFzaC13aGF0cy1iZWhpbmQtb3VyLXN1ZGRlbi1yYWdlLWFuZC13aWxsLWl0LW1ha2UtYS1kaWZmZXJlbmNlXHJcbiAgICAgIDwvYT4gXHJcbiAgICAgIDwvcD4gXHJcbiAgICAgYDtcclxuIFxyXG4gIHZhciBibG9ncG9zdDA5OSA9ICAgYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGFuayB5b3UgQ2lzY28sIGFuZCBUaGFuayB5b3UgQVdTLiAgQW1hem9uIFdlYiBTZXJ2aWNlcyBoYXZlIG5vdyBjb21lIGludG8gdGhlaXIgbGlnaHQgd2l0aCBuZXcgY29tcHV0aW5nIHBvd2VyIGZyb20gYWJvdmUgLS1hbmQgZm9yIHVzIGNpdGl6ZW5zLCBhdCBmcmFjdGlvbnMgb2YgYSBjZW50ISBcclxuXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBBbWF6b24gV2ViIFNlcnZpY2VzIGFuZCBDaXNjbyBhbm5vdW5jZWQgb24gVGh1cnNkYXkgdGhhdCB0aGV5J3JlIHRlYW1pbmcgdXAgb24gYSBwcm9kdWN0IHRoYXQgd2lsbCBhbGxvdyBkZXZlbG9wZXJzIHRvIGJ1aWxkIGFwcGxpY2F0aW9ucyBpbiB0aGUgY2xvdWQgb3IgaW4gdHJhZGl0aW9uYWwgZGF0YSBjZW50ZXJzIHdoaWxlIG1ha2luZyBpdCBlYXNpZXIgZm9yIHRoZW0gdG8gbW92ZSBiZXR3ZWVuIHRoZSB0d28uPGJyIC8+PGJyIC8+XHJcblxyXG4gIEl0J3MgQ2lzY28ncyBsYXRlc3QgZWZmb3J0IHRvIGNyZWF0ZSBoeWJyaWQgb3B0aW9ucyBmb3IgY3VzdG9tZXJzIHRoYXQgd2FudCB0byBwdXNoIHdvcmsgdG8gdGhlIGNsb3VkIGJ1dCBzdGlsbCBuZWVkIHRvIHJ1biBzb21lIHByb2plY3RzIG9uIHRoZWlyIG93biBoYXJkd2FyZSBmb3IgcHJpdmFjeSBhbmQgcmVndWxhdG9yeSByZWFzb25zLiBDaXNjbyBwcmV2aW91c2x5IGFubm91bmNlZCBwYXJ0bmVyc2hpcHMgd2l0aCB0aGUgb3RoZXIgdHdvIG1ham9yIGNsb3VkIHByb3ZpZGVycywgR29vZ2xlIGFuZCBNaWNyb3NvZnQsIGJ1dCBBbWF6b24gaXMgYnkgZmFyIHRoZSBsZWFkZXIgaW4gdGhlIGNsb3VkIGluZnJhc3RydWN0dXJlIG1hcmtldC48c3VwPjE8L3N1cD5cclxuICA8L3A+YDtcclxuIFxyXG4gIHZhciBibG9nY2l0ZTA5OSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMS8wNy9hd3MtYW5kLWNpc2NvLXBhcnRuZXItb24tY29udGFpbmVyLXRlY2hub2xvZ3ktZm9yLWh5YnJpZC1jbG91ZC5odG1sXCI+aHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMS8wNy9hd3MtYW5kLWNpc2NvLXBhcnRuZXItb24tY29udGFpbmVyLXRlY2hub2xvZ3ktZm9yLWh5YnJpZC1jbG91ZC5odG1sPC9hPjwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2FtYXpvbnMtY29uc3VtZXItYnVzaW5lc3MtbW92ZXMtZnJvbS1vcmFjbGUtdG8tYXdzLWJ1dC1sYXJyeS1lbGxpc29ucy13b250LXN0b3AtdGFsa2luZy9cIj4gaHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvYW1hem9ucy1jb25zdW1lci1idXNpbmVzcy1tb3Zlcy1mcm9tLW9yYWNsZS10by1hd3MtYnV0LWxhcnJ5LWVsbGlzb25zLXdvbnQtc3RvcC10YWxraW5nLzwvYT48L3A+XHJcbiAgYDtcclxuIHZhciBibG9ncG9zdDA4OCA9ICAgYFxyXG4gPHAgY2xhc3M9XCJxdW90ZVwiPkluIEFwcmlsIDIwMTgsIGEgZ3JvdXAgYXQgTUlULCBVU0EsIHNob3dlZCB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdlbmVyYXRlIGEgZm9ybSBvZiBzdXBlcmNvbmR1Y3Rpdml0eSBpbiBhIHN5c3RlbSBvZiB0d28gbGF5ZXJzIG9mIGdyYXBoZW5lIHVuZGVyIHZlcnkgc3BlY2lmaWMgY29uZGl0aW9uczogVG8gZG8gdGhpcywgdGhlIHR3byBoZXhhZ29uYWwgbmV0cyBtdXN0IGJlIHR3aXN0ZWQgYWdhaW5zdCBlYWNoIG90aGVyIGJ5IGV4YWN0bHkgdGhlIG1hZ2ljIGFuZ2xlIG9mIDEuMcKwLiBVbmRlciB0aGlzIGNvbmRpdGlvbiBhIGZsYXQgYmFuZCBmb3JtcyBpbiB0aGUgZWxlY3Ryb25pYyBzdHJ1Y3R1cmUuIFRoZSBwcmVwYXJhdGlvbiBvZiBzYW1wbGVzIGZyb20gdHdvIGxheWVycyBvZiBncmFwaGVuZSB3aXRoIHN1Y2ggYW4gZXhhY3RseSBhZGp1c3RlZCB0d2lzdCBpcyBjb21wbGV4LCBhbmQgbm90IHN1aXRhYmxlIGZvciBtYXNzIHByb2R1Y3Rpb24uIE5ldmVydGhlbGVzcywgdGhlIHN0dWR5IGhhcyBhdHRyYWN0ZWQgYSBsb3Qgb2YgYXR0ZW50aW9uIGFtb25nIGV4cGVydHMuPHN1cD4xPC9zdXA+XHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ2NpdGUwODggPSBgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuc2NpZW5jZWRhaWx5LmNvbS9yZWxlYXNlcy8yMDE4LzExLzE4MTEwOTE1MDEyNC5odG1cIj4gaHR0cHM6Ly93d3cuc2NpZW5jZWRhaWx5LmNvbS9yZWxlYXNlcy8yMDE4LzExLzE4MTEwOTE1MDEyNC5odG08L2E+PC9wPlxyXG4gYFxyXG4gIHZhciAgICAgYmxvZ3Bvc3QwNzcgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5OYW1pbmcgY29udmVudGlvbnMgbWFrZSBmb3IgYSBsaW5ndWlzdGljIHBoZW5vbWVub24gaW4gYSB3b3JsZCB3aG9zZSByYXBpZCBjaGFuZ2UgZmFyIG91dHBhY2VzIGFjY3VyYXRlIHRyYW5zZmVyIG9mIG1lYW5pbmcgaW50byAgbGFuZ3VhZ2UuIEFuZCwgYmVjYXVzZSB3ZSBkb24ndCBhbGxvdyBvdXIgdGVybWlub2xvZ3kgdG8gcmVkZWZpbmUgaXRzZWxmLCBhbiBpbmNyZWFzaW5nbHkgaW5hY2N1cmF0ZSBsYW5ndWFnZSBtYXkgY29tZSB0byBpbmNvbmdydWVudGx5IGRlc2NyaWJlIGN1cnJlbnQtZGF5IGxvZ2ljLCBhbmQgYmFzaWNhbGx5IHJlYWxpdHkuLi5cclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gQnV0IE11c2sgbWF5IGJlIHJpZ2h0IGluIGdlbmVyYWwgYWJvdXQgdGhlIGZ1dGlsaXR5IG9mIGpvYiB0aXRsZXMsIHdoaWNoIHNlcnZlIGxhcmdlbHkgYXMgYSBkaXN0cmFjdGlvbiBmb3Iga25vd2xlZGdlIHdvcmtlcnMgaW4gdG9kYXnigJlzIGVjb25vbXkuXHJcbiAgV2XigJlyZSBhbGwgcHJvamVjdCBtYW5hZ2VycyBub3cuPGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgQWNjb3JkaW5nIHRvIFJvZ2VyIE1hcnRpbiwgYSBwcm9taW5lbnQgbWFuYWdlbWVudCBhbmQgc3RyYXRlZ3kgZXhwZXJ0LCBhbmQgZm9ybWVyIGRlYW4gb2YgdGhlIFJvdG1hbiBTY2hvb2wgb2YgTWFuYWdlbWVudCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBUb3JvbnRvLCB3ZSBtYXkgYmUgc3RydWN0dXJpbmcgam9icyBhbGwgd3JvbmcuIEJ5IGV4dGVuc2lvbiwgb3VyIGFkZGljdGlvbiB0byB0aXRsZXMgYXMgc2lnbnMgb2Ygc3RhdHVzIGNvdWxkIGJlIGp1c3QgYW5vdGhlciBleGFtcGxlIG9mIGhvdyBodW1hbnPigJR3aGV0aGVyIGFzIGluZGl2aWR1YWxzIG9yIGluIGdyb3Vwc+KAlG9wZXJhdGUgaW4gcGF0dGVybnMgYmFzZWQgb24gaGFiaXQsIHdpdGhvdXQgcmVzcG9uZGluZyB0byB0aGUgd29ybGQgYXMgaXQgcmVhbGx5IGlzLjxzdXA+MTwvc3VwPjwvcD5cclxuIGBcclxuICAgIDtcclxuICAgIHZhciAgICAgIGJsb2djaXRlMDc3ID0gYCBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3F6LmNvbS93b3JrLzE0NDM5NTQvdGVzbGEtY2VvLWVsb24tbXVzay1pcy1yYWlzaW5nLWFuLWltcG9ydGFudC1xdWVzdGlvbi1hYm91dC1qb2ItdGl0bGVzL1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS93b3JrLzE0NDM5NTQvdGVzbGEtY2VvLWVsb24tbXVzay1pcy1yYWlzaW5nLWFuLWltcG9ydGFudC1xdWVzdGlvbi1hYm91dC1qb2ItdGl0bGVzLyBcclxuICAgICAgPC9hPiBcclxuICAgICAgPC9hPiBcclxuICAgICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QwNjYgPSAgIGBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGltIEJlcm5lcnMtTGVlIGhhcyBsYXVuY2hlZCBhIGdsb2JhbCBjYW1wYWlnbiB0byBzYXZlIHRoZSB3ZWIgZnJvbSB0aGUgZGVzdHJ1Y3RpdmUgZWZmZWN0cyBvZiBhYnVzZSBhbmQgZGlzY3JpbWluYXRpb24sIHBvbGl0aWNhbCBtYW5pcHVsYXRpb24sIGFuZCBvdGhlciB0aHJlYXRzIHRoYXQgcGxhZ3VlIHRoZSBvbmxpbmUgd29ybGQuXHJcblxyXG4gIEluIGEgdGFsayBhdCB0aGUgb3BlbmluZyBvZiB0aGUgV2ViIFN1bW1pdCBpbiBMaXNib24gb24gTW9uZGF5LCB0aGUgaW52ZW50b3Igb2YgdGhlIHdlYiBjYWxsZWQgb24gZ292ZXJubWVudHMsIGNvbXBhbmllcyBhbmQgaW5kaXZpZHVhbHMgdG8gYmFjayBhIG5ldyDigJxDb250cmFjdCBmb3IgdGhlIFdlYuKAnSB0aGF0IGFpbXMgdG8gcHJvdGVjdCBwZW9wbGXigJlzIHJpZ2h0cyBhbmQgZnJlZWRvbXMgb24gdGhlIGludGVybmV0LjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gXHJcbiAgdmFyIGJsb2djaXRlMDY2ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE4L25vdi8wNS90aW0tYmVybmVycy1sZWUtbGF1bmNoZXMtY2FtcGFpZ24tdG8tc2F2ZS10aGUtd2ViLWZyb20tYWJ1c2VcIj4gaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxOC9ub3YvMDUvdGltLWJlcm5lcnMtbGVlLWxhdW5jaGVzLWNhbXBhaWduLXRvLXNhdmUtdGhlLXdlYi1mcm9tLWFidXNlPC9hPjwvcD5cclxuICBgO1xyXG4gdmFyIGJsb2dwb3N0MDU1ID0gICBgXHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+XCJXaGF0IHdvdWxkIGd1YXJhbnRlZSBhIHBhcmFkaWdtIHNoaWZ0IHdvdWxkIGJlIHRoZSBhYmlsaXR5IHRvIGVmZm9ydGxlc3NseSBicmluZyBkaXNwYXJhdGUgZGV2aWNlcyB0b2dldGhlcixcIiBzYWlkIEJsYWtlIEtvemFrLCBwcmluY2lwYWwgYW5hbHlzdCBhdCBJSFMgTWFya2l0LiBcIkEgbGFyZ2UgcHJvcG9ydGlvbiBvZiBjb25zdW1lciBjb21wbGFpbnRzIHN0ZW0gZnJvbSBpbnN0YWxsYXRpb24gY2hhbGxlbmdlcyB0byBkZXZpY2VzIG5vdCBiZWluZyByZWxpYWJsZSwgZS5nLiBzY2VuZXMgbm90IHdvcmtpbmcsIGhpZ2ggbGF0ZW5jeSBldmVuIGluIGxvY2FsIGNvbnRyb2wgYW5kIGxhY2sgb2YgY29udHJvbCB3aGVuIHNjZW5lcyBhcmUgcGVyZm9ybWluZyBidXQgYnJva2VuLlwiXHJcblxyXG4gNUcsIHdpdGggaXRzIGFiaWxpdHkgdG8gaGFuZGxlIG1vcmUgY29ubmVjdGVkIGRldmljZXMsIGNvdWxkIGJlIGFuIGFuc3dlciBkb3duIHRoZSBsaW5lLiBcclxuIFxyXG4gQnV0IHdoaWxlIDVHIGNvdWxkIHByb3ZpZGUgc29tZSBjb25zaXN0ZW5jeSBhY3Jvc3Mgc21hcnQgaG9tZSBuZXR3b3JraW5nIHN0YW5kYXJkcywgaXQncyBub3QgYSBwYW5hY2VhIGR1ZSB0byBhIGZhbWlsaWFyIHByb2JsZW06IGJhdHRlcnkgbGlmZS4gPHN1cD4xPC9zdXA+XHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ2NpdGUwNTUgPSBgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj48YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy81Zy1hbmQtdGhlLXByb21pc2Utb2YtYS1zbWFydC1ob21lLW1ha2VvdmVyL1wiPiBodHRwczovL3d3dy5jbmV0LmNvbS9uZXdzLzVnLWFuZC10aGUtcHJvbWlzZS1vZi1hLXNtYXJ0LWhvbWUtbWFrZW92ZXIvPC9hPjwvcD5cclxuIGBcclxuICB2YXIgICAgIGJsb2dwb3N0MDQ0ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RW5lcmd5IENvbnNjaW91c25lc3MgYXJvdW5kIHRyYWRpdGlvbmFsIDxpPlByb29mIG9mIFdvcms8L2k+IGJsb2NrY2hhaW4gdGVjaG5vbG9naWVzIGNhc3RzIGEgbmVnYXRpdmUgbGlnaHQgb24gQml0Y29pbiBNaW5pbmcuIEVuZXJneSBjb25zdW1wdGlvbiBmcm9tIHByb29mLW9mLXdvcmssIGVuZXJneS1pbnRlbnNpdmUgYmxvY2tjaGFpbiBtaW5pbmcgcGFyYWxsZWxzIGFubnVhbCBLaWxvV2F0dCBjb25zdW1wdGlvbiBhcyBzbWFsbCBjb3VudHJpZXMgbGlrZSBEZW5tYXJrIGFuZCBTaW5nYXBvcmUuXHJcbiAgIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gXHJcbiAgQml0Y29pbiBpcyBhIHBvd2VyLWh1bmdyeSBjcnlwdG9jdXJyZW5jeSB0aGF0IGlzIGluY3JlYXNpbmdseSB1c2VkIGFzIGFuIGludmVzdG1lbnQgYW5kIHBheW1lbnQgc3lzdGVtLiBIZXJlIHdlIHNob3cgdGhhdCBwcm9qZWN0ZWQgQml0Y29pbiB1c2FnZSwgc2hvdWxkIGl0IGZvbGxvdyB0aGUgcmF0ZSBvZiBhZG9wdGlvbiBvZiBvdGhlciBicm9hZGx5IGFkb3B0ZWQgdGVjaG5vbG9naWVzLCBjb3VsZCBhbG9uZSBwcm9kdWNlIGVub3VnaCBDTzIgZW1pc3Npb25zIHRvIHB1c2ggd2FybWluZyBhYm92ZSAyIMKwQyB3aXRoaW4gbGVzcyB0aGFuIHRocmVlIGRlY2FkZXMuPHN1cD4xPC9zdXA+XHJcbiAgIDxwPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5hbiBhcnRpY2xlIGJ5IGEgdGVhbSBvZiByZXNlYXJjaGVycyBmcm9tIEhhd2FpaSBpbiB0aGUgam91cm5hbCBOYXR1cmUgQ2xpbWF0ZSBDaGFuZ2UgbGFzdCB3ZWVrIGRpZCBtdWNoIHRoZSBzYW1lIGtpbmQgb2YgY2FsY3VsYXRpb25zIGFzIGRlIFZyaWVzIGFuZCBLcmF1c2UgYW5kIGZvdW5kIHRoYXQgYml0Y29pbiB1c2FnZSByZXN1bHRlZCBpbiB0aGUgZXF1aXZhbGVudCBvZiA2OSBtaWxsaW9uIG1ldHJpYyB0b25uZXMgb2YgQ08yIGluIDIwMTcuIElmIGJpdGNvaW4gZ3Jvd3MgbGlrZSBvdGhlciB0ZWNobm9sb2dpZXMsIHRoZSBhdXRob3JzIHNhaWQsIGl04oCZZCBjb3VnaCBvdXQgZW5vdWdoIGdyZWVuaG91c2UgZ2FzIHRvIHdhcm0gdGhlIHBsYW5ldCBieSAyIGRlZ3JlZXMgY2Vsc2l1cyBieSB0aGUgbWlkLTIwMzBzLjxzdXA+Mjwvc3VwPlxyXG4gIDwvcD5gXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTA0NCA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9zNDE1NTgtMDE4LTAzMjEtOFxyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5uYXR1cmUuY29tL2FydGljbGVzL3M0MTU1OC0wMTgtMDMyMS04XHJcbiAgICAgIDwvYT4gXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2JpdGNvaW4td2lsbC1idXJuLXBsYW5ldC1kb3duLWhvdy1mYXN0L1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYml0Y29pbi13aWxsLWJ1cm4tcGxhbmV0LWRvd24taG93LWZhc3QvXHJcbiAgICAgIDwvYT4gXHJcbiAgICAgYDtcclxuICAgICB2YXIgICAgIGJsb2dwb3N0MDMzID0gYCBcclxuICAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgaW52ZW50aW9uIHByb3ZpZGVzIGZvciBzeXN0ZW1zIGFuZCBkZXZpY2VzIGZvciBoYXJkZW5lZCByZW1vdGUgc3RvcmFnZSBvZiBwcml2YXRlIGNyeXB0b2dyYXBoeSBrZXlzIHVzZWQgZm9yIGF1dGhlbnRpY2F0aW9uLiBUaGUgc3RvcmFnZSBkZXZpY2UgaXMgdGFtcGVyLXJlc3BvbnNpdmUsIHN1Y2ggdGhhdCByZWNlaXB0IG9mIGEgc2lnbmFsIHRoYXQgaW5kaWNhdGVzIHBoeXNpY2FsIG9yIG5vbi1waHlzaWNhbCB0YW1wZXJpbmcgd2l0aCB0aGUgc3RvcmFnZSBkZXZpY2Ugb3IgaXRzIGNvbXBvbmVudHMgcmVzdWx0cyBpbiBkZWxldGlvbiBvZiB0aGUgcHJpdmF0ZSBjcnlwdG9ncmFwaHkga2V5KHMpIGZyb20gdGhlIG1lbW9yeS4gVGhlIHN0b3JhZ2UgZGV2aWNlIGlzIGNvbmZpZ3VyZWQgdG8gYmUgc2VwYXJhdGUgYW5kIHJlbW90ZSBmcm9tIGEgY29tcHV0aW5nIG5vZGUgdGhhdCBleGVjdXRlcyBhbiBhdXRoZW50aWNhdGlvbiByb3V0aW5lIHJlcXVpcmluZyB0aGUgcHJpdmF0ZSBjcnlwdG9ncmFwaHkga2V5KHMpIGFuZCwgYXMgc3VjaCwgdGhlIHByaXZhdGUgY3J5cHRvZ3JhcGh5IGtleShzKSBhcmUgYWNjZXNzaWJsZSB0bywgYnV0IG5vdCBjb21tdW5pY2F0ZWQgdG8sIHRoZSBjb21wdXRpbmcgbm9kZSBvbmx5IHdoZW4gdGhlIGNvbXB1dGluZyBub2RlIGlzIGV4ZWN1dGluZyB0aGUgYXV0aGVudGljYXRpb24gcm91dGluZS48L3A+PHN1cD4xPC9zdXA+IFxyXG4gICAgICA8cCA+XHJcbiAgIFxyXG4gICAgICA8L3A+YFxyXG4gICAgICAgO1xyXG4gICAgICAgdmFyICAgICAgYmxvZ2NpdGUwMzMgPSBgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly91LnRvZGF5L2Jhbmstb2YtYW1lcmljYS1hd2FyZGVkLW5ldy1wYXRlbnQtZm9yLXN0b3JpbmctcHJpdmF0ZS1rZXlzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3UudG9kYXkvYmFuay1vZi1hbWVyaWNhLWF3YXJkZWQtbmV3LXBhdGVudC1mb3Itc3RvcmluZy1wcml2YXRlLWtleXM8L2E+IDwvcD5cclxuICAgICAgIFxyXG4gICAgICAgPHAgY2xhc3M9XCJjaXRlXCI+MiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3BhdGZ0LnVzcHRvLmdvdi9uZXRhY2dpL25waC1QYXJzZXI/U2VjdDE9UFRPMiZTZWN0Mj1ISVRPRkYmdT0lMkZuZXRhaHRtbCUyRlBUTyUyRnNlYXJjaC1hZHYuaHRtJnI9MSZwPTEmZj1HJmw9NTAmZD1QVFhUJlMxPTEwLDExNiw2MzMuUE4uJk9TPXBuLzEwLDExNiw2MzMmUlM9UE4vMTAsMTE2LDYzM1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3BhdGZ0LnVzcHRvLmdvdi9uZXRhY2dpL25waC1QYXJzZXI/U2VjdDE9UFRPMiZTZWN0Mj1ISVRPRkYmdT0lMkZuZXRhaHRtbCUyRlBUTyUyRnNlYXJjaC1hZHYuaHRtJnI9MSZwPTEmZj1HJmw9NTAmZD1QVFhUJlMxPTEwLDExNiw2MzMuUE4uJk9TPXBuLzEwLDExNiw2MzMmUlM9UE4vMTAsMTE2LDYzMzwvYT4gPC9wPlxyXG4gICAgICAgIGA7XHJcbiBcclxuICB2YXIgICAgIGJsb2dwb3N0MDIyID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiA8cD5cclxuICBgXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTAyMiA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgIDwvYT4gPC9wPlxyXG4gICAgIGA7XHJcbiAgICAgdmFyICAgICBibG9ncG9zdDAxMSA9IGAgXHJcbiAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuICAgICAgPC9wPlxyXG4gICAgICA8cD4gPC9wPmBcclxuICAgICAgIDtcclxuICAgICAgIHZhciAgICAgIGJsb2djaXRlMDExID0gYCAgPHAgY2xhc3M9XCJjaXRlXCI+IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJcIiAgIHRhcmdldD1cIl9ibGFua1wiPjwvYT4gPC9wPlxyXG4gICAgICAgIFxyXG4gICAgICAgIGA7XHJcbiAgXHJcblxyXG4gICAgICB2YXIgdXJsID0gW1xyXG4gICAgICAgXHJcbiAgICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTM3JyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMzAtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMzAsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdQYXJhZGlnbSBCcmVha2VyJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzcsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzN1xyXG4gICAgICAgICAgfSwgICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMTM2JyxcclxuICAgICAgICAgIGRpZDogJzExLTMwLTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAzMCwgMjAxOCAnLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgICAgIHRpdGxlOiAnQSBDby1Cb3QgUmV2b2x1dGlvbiAnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzYsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMzZcclxuICAgICAgICB9LCAgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzEzNScsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTI5LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDI5LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdEaXZlcnNpdHkgYW5kIEVxdWFsaXR5IGluIHRoZSBNYWNoaW5lIExlYXJuaW5nIExhbmRzY2FwZScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTM1LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMzVcclxuICAgICAgICAgIH0sICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzEzNCcsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTI4LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDI4LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIEdyZWF0IEJpdGNvaW4gQnVzdCBvZiBcXCcxOCwgUGFydCBJSTo8YnIgLz5UaGUgQ29zdHMgb2YgRGVwcmVjYXRlZCBUZWNobm9sb2d5JyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzQsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzNFxyXG4gICAgICAgICAgfSwgICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMTMzJyxcclxuICAgICAgICAgIGRpZDogJzExLTI3LTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAyNywgMjAxOCAnLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdycsXHJcbiAgICAgICAgICB0aXRsZTogJ1RoZSBHcmVhdCBCaXRjb2luIEJ1c3Qgb2YgXFwnMTgsIFBhcnQgSTo8YnIgLz5UaGUgRWFydGgtS2lsbGVyIEN1cnJlbmN5XFwncyBMYXN0IERheXMnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzMsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMzNcclxuICAgICAgICB9LCAgICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzEzMicsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTI2LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDI2LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnT29wcywgVGhleSBEaWQgaXQgQWdhaW4nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEzMixcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTMyXHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxMzEnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0yNC0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAyNC0yNSwgMjAxODxiciAvPldlZWtlbmQgJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICc1RyBTZWN1cml0eSBGb3VuZGF0aW9ucyBmb3IgMjFzdCBDZW50dXJ5IEFwcGxpYW5jZXMnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEzMSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTMxXHJcbiAgICAgICAgfSwgIC8qXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxMzAnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0yMy0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAyMywgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3cnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ09vcHMsIFRoZXkgRGlkIGl0IEFnYWluJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMzAsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEzMFxyXG4gICAgICAgICAgfSwgICAqL1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTI5JyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMjItMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMjIsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0hlYWx0aHkgTGl2aW5cXCcgQ2VsbHMnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEyOSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTI5XHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxMjgnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0yMS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAyMSwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1Byb3RlY3RpbmcgRGF0YScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTI4LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMjhcclxuICAgICAgICAgIH0sICBcclxuICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTI3JyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMjAtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMjAsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1RlY2hcXCdzIE1vcnRhbCBEZXBlbmRlbmNlIG9uIEdsb2JhbCBUcmFkZSBDYWxscyBmb3IgV29ybGQgUGVhY2UhJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMjcsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEyN1xyXG4gICAgICAgICAgfSwgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTI2JyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMTktMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMTksIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnRmFjZWJvb2tcXCdzIFN0cnVnZ2xlIHdpdGggUmVndWxhdGlvbicsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTI2LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMjZcclxuICAgICAgICAgIH0sICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzEyNScsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTE3LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDE3LTE4LCAyMDE4PGJyIC8+V2Vla2VuZCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1RlY2ggTW9uZXlcXCdzIERlZXAgRm9vdHByaW50JyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMjUsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEyNVxyXG4gICAgICAgICAgfSwgIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTI0JyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMTYtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMTYsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0EgTW9yZSBSZXRyb3NwZWN0aXZlIEEuSS4nLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEyNCxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTI0XHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxMjMnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0xNS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxNSwgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdBLkkuTm93LicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnRmFzdCwgQW5vbnltaXplZCBNb25leSEnLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDEyMyxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTIzXHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgaWQ6ICcxMjInLFxyXG4gICAgICAgICAgZGlkOiAnMTEtMTQtMTgnLFxyXG4gICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDE0LCAyMDE4ICcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgICB0aXRsZTogJ0dyZWVuIE9wdGlvbnMnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMjIsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMjJcclxuICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzExMScsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTEzLTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDEzLCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnUGljdHVyZSBQb3dlcicsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTExLFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMTFcclxuICAgICAgICAgIH0sICBcclxuICAgICAgICAgIHtcclxuICAgICAgIGlkOiAnMTAwJyxcclxuICAgICAgICBkaWQ6ICcxMS0xMi0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDEyLCAyMDE4ICcsXHJcbiAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3cnLFxyXG4gICAgICAgIHRpdGxlOiAnUGxhc3RpYyBIYW5nb3ZlcicsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMDAsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTAwXHJcbiAgICAgICAgICB9LCAgICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMDk5JyxcclxuICAgICAgICAgIGRpZDogJzExLTEwLTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxMC0xMSwgMjAxODxiciAvPldlZWtlbmQgJyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdUaGFuayBZb3UsIEFXUy0tZm9yIHlvdXIgU29mdHdhcmUgTWVnYXRyb24nLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QwOTksXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwOTlcclxuICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzA4OCcsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTA5LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDksIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnR3JhcGhlbmUgRHJlYW1zJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QwODgsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTA4OFxyXG4gICAgICAgICAgfSwgIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgaWQ6ICcwNzcnLFxyXG4gICAgICAgIGRpZDogJzExLTA4LTE4JyxcclxuICAgICAgICBkYXRlOiAnTm92ZW1iZXIgOCwgMjAxOCAnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93JyxcclxuICAgICAgICB0aXRsZTogJ1doYXRcXCdzIGluIGEgTmFtZScsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QwNzcsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDc3XHJcbiAgICAgICAgICB9LCAgICAgICAgXHJcbiAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMDY2JyxcclxuICAgICAgICAgIGRpZDogJzExLTA3LTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciA3LCAyMDE4ICcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnVGhlIFVuY2hhcnRlZCBDbG91ZCBUZXJyaXRvcnk6IEEgTWFnbmEgQ2FydGEnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QwNjYsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwNjZcclxuICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzA1NScsXHJcbiAgICAgICAgICAgIGRpZDogJzExLTA2LTE4JyxcclxuICAgICAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDYsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgICAgdGl0bGU6ICdUaGUgNUcgSW9UIFN1cGVySGlnaHdheScsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MDU1LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwNTVcclxuICAgICAgICAgIH0sICBcclxuICAgICAgICAgIHtcclxuICAgICAgIGlkOiAnMDQ0JyxcclxuICAgICAgICBkaWQ6ICcxMS0wNS0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDUsIDIwMTggJyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgdGl0bGU6ICdUZXNsYSBhdCBXb3JrJyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDA0NCxcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwNDRcclxuICAgICAgICAgIH0sICAgICBcclxuICAgICAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMDMzJyxcclxuICAgICAgICBkaWQ6ICcxMS0wMy0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDMtNCwgMjAxODxiciAvPldlZWtlbmQnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICAgIHRpdGxlOiAnTm93IHRoYXRcXCdzIGEgU2FmZSBLZWVwIScsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QwMzMsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDMzXHJcbiAgICAgIH0sICBcclxuICAgICAgICB7XHJcbiAgICAgICAgaWQ6ICcwMjInLFxyXG4gICAgICAgIGRpZDogJzExLTAyLTE4JyxcclxuICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMiwgMjAxOCAnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnICcsXHJcbiAgICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDAyMixcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwMjJcclxuICAgICAgfSwgICAgICAgICB7XHJcbiAgICAgICAgaWQ6ICcwMScsXHJcbiAgICAgICAgZGlkOiAnMTEtMDEtMTgnLFxyXG4gICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxLCAyMDE4ICcsXHJcbiAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgIGNhdDM6ICcgJyxcclxuICAgICAgICB0aXRsZTogJyAnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MDExLFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTAxMVxyXG4gICAgICB9IFxyXG5cclxuICBcclxuICBdO1xyXG52YXIgaTtcclxuICBmb3IgKGkgPSAwOyBpIDwgdXJsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY2F0ID0gYCBcclxuICAgIDxkaXYgaWQ9XCIke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2XCI+IFxyXG4gICAgPGhyIC8+ICBcclxuICAgIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIjdG9wXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICBcclxuICAgIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gXHJcbiAgICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gICAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICAgIDxiciAvPlxyXG4gICAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fVxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGlkPVwiYmxvZ2NpdGVcIj4ke3VybFtpXS5ibG9nY2l0ZX1cclxuICAgIDwvZGl2PmA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1ub3ZcIikuaW5uZXJIVE1MICs9IGNhdDtcclxuICB9XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXRNb2QgPSBgXHJcbiAgPGRpdiBpZD1cIm1vZF8ke3VybFtpXS5kaWR9XCIgY2xhc3M9XCJibG9nRGl2TW9kXCI+IFxyXG4gIDxociAvPiAgXHJcbiAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiN0b3AtbW9kXCI+PGJ1dHRvbj5Ub3A8L2J1dHRvbj48L2E+ICAgXHJcbiAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICA8aDUgaWQ9XCJjYXQzXCIgY2xhc3M9XCIgIHN1YmRhaWx5dGVjaFwiPiR7dXJsW2ldLmNhdDN9PC9oNT4gIFxyXG4gIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgPGg2ICBpZD1cImRhdGVcIiBjbGFzcz1cIiAgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLmRhdGV9PC9oNj4gICAgXHJcbiAgPGg2ICBpZD1cInRpdGxlXCIgICBjbGFzcz1cImRhaWx5dGl0bGUgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcbiAgPGJyIC8+XHJcbiAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fTwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gPGRpdiBpZD1cImJsb2djaXRlXCI+JHt1cmxbaV0uYmxvZ2NpdGV9XHJcbiA8L2Rpdj5gO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtbm92LW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG4gIH1cclxuICBjb25zb2xlLmxvZygnYmxvZ2dlci1ub3YnKTtcclxuICAvL2NvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpOyBcclxufTsgLy8gZW5kIGJsb2dnZXJOb3YoKVxyXG5ibG9nZ2VyTm92KCk7IiwiLy8gJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGJsb2dnZXJPY3QgPSBmdW5jdGlvbiAoKSB7ICBcclxuXHJcbiBcclxuIFxyXG4gICAgICAgIHZhciAgICAgYmxvZ3Bvc3QyMiA9IGAgXHJcbiAgICAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkNsb3VkIGRhdGEgaXMgYXQgb25jZSBmYXN0LCBzZWFtbGVzcyBhbmQgcG93ZXJlZCBieSBsaW1pdGxlc3MgY29tcHV0ZXIgcHJvY2Vzc2luZyBwb3dlciBhbmQgcGFydGl0aW9ucyFcclxuICAgICAgICAgPC9wPlxyXG4gICAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICAgICAgICBSZXNwb25kaW5nIHRvIGEgcXVlc3Rpb24gYXJvdW5kIHNsb3dlZCBjYXBleCBncm93dGgsIHRoZSBNaWNyb3NvZnQgQ0VPIGV4cGxhaW5lZCB0aGUgY29tcGFueeKAmXMgaW50ZWxsaWdlbnQgY2xvdWQgYW5kIGludGVsbGlnZW50IGVkZ2UgZXRob3Mgd2FzIGJlaW5nIHNwcmVhZCBhY3Jvc3MgZXZlcnkgYnVzaW5lc3MgbGluZTsgZnJvbSBBenVyZSwgb2YgY291cnNlLCB0byBEeW5hbWljcyAzNjUsIHRvIGdhbWluZy4gSXQgaXMgYSB1bmlmaWVkLCBsb25nLXRlcm0gbWVzc2FnZSwgTmFkZWxsYSBhZGRlZC4g4oCcRm9yIHRoZSBmaXJzdCB0aW1lLCB3aGF0IHlvdSBzZWUgYWNyb3NzIE1pY3Jvc29mdCBpcyByZWFsbHkgb25lIHBsYXRmb3JtIHdoaWNoIHNwYW5zIGFsbCBvZiB0aGVzZSBidXNpbmVzc2VzIGFuZCBhbGwgb2YgdGhlIG1hcmdpbiBzdHJ1Y3R1cmVzIHRoYXQgYXJlIHRoZXJlIHJlcHJlc2VudGVkIGluIGl0LOKAnSBoZSBzYWlkLjxzdXA+MTwvc3VwPjxwPlxyXG4gICAgICAgIGBcclxuICAgICAgICAgIDtcclxuICAgICAgICAgIHZhciAgICAgIGJsb2djaXRlMjIgPSBgIFxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNsb3VkY29tcHV0aW5nLW5ld3MubmV0L25ld3MvMjAxOC9vY3QvMjUvbWljcm9zb2Z0LWNpdGVzLWF6dXJlLWFuZC1jbG91ZC1zdHJlbmd0aC1tb3JlLXN0cm9uZy1maW5hbmNpYWxzLWl0cy1hbGwtYWJvdXQtbG9uZy10ZXJtLWV0aG9zL1xyXG4gICAgICAgICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbG91ZGNvbXB1dGluZy1uZXdzLm5ldC9uZXdzLzIwMTgvb2N0LzI1L21pY3Jvc29mdC1jaXRlcy1henVyZS1hbmQtY2xvdWQtc3RyZW5ndGgtbW9yZS1zdHJvbmctZmluYW5jaWFscy1pdHMtYWxsLWFib3V0LWxvbmctdGVybS1ldGhvcy9cclxuICAgICAgICAgICAgPC9hPiBcclxuICAgICAgICAgICBgO1xyXG4gICAgICAgICAgIHZhciAgICAgYmxvZ3Bvc3QyMSA9IGAgXHJcbiAgICAgICAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkxpZ2h0IG1hdHRlcnMgYWxvdCBtb3JlIHdoZW4gaXRzIGF0dHJpYnV0ZXMgcG93ZXIgYm90aCBxdWFudHVtLWJhc2VkIHF1Yml0IGNhbGN1bGF0aW9ucyBhbmQgdGhlIHByb2Nlc3MgaXRzZWxmIG1ha2luZyBtZXRhbWF0ZXJpYWxzIHRoZXkgYXJlIGJhc2VkIG9uITwvcD5cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICA8cCBjbGFzcz1cInF1b3RlXCI+QnJlYWt0aHJvdWdocyBpbiB0aGUgZmllbGQgb2YgbmFub3Bob3RvbmljcyAtLSBob3cgbGlnaHQgYmVoYXZlcyBvbiB0aGUgbmFub21ldGVyIHNjYWxlIC0tIGhhdmUgcGF2ZWQgdGhlIHdheSBmb3IgdGhlIGludmVudGlvbiBvZiBcIm1ldGFtYXRlcmlhbHMsXCIgaHVtYW4tbWFkZSBtYXRlcmlhbHMgdGhhdCBoYXZlIGVub3Jtb3VzIGFwcGxpY2F0aW9ucywgZnJvbSByZW1vdGUgbmFub3NjYWxlIHNlbnNpbmcgdG8gZW5lcmd5IGhhcnZlc3RpbmcgYW5kIG1lZGljYWwgZGlhZ25vc3RpY3MuIEJ1dCB0aGVpciBpbXBhY3Qgb24gZGFpbHkgbGlmZSBoYXMgYmVlbiBoaW5kZXJlZCBieSBhIGNvbXBsaWNhdGVkIG1hbnVmYWN0dXJpbmcgcHJvY2VzcyB3aXRoIGxhcmdlIG1hcmdpbnMgb2YgZXJyb3IuXHJcbiAgICAgICAgICAgIDxiciAvPjxiciAvPlxyXG4gICAgICAgICAgICBcIlRoZSBwcm9jZXNzIG9mIGRlc2lnbmluZyBtZXRhbWF0ZXJpYWxzIGNvbnNpc3RzIG9mIGNhcnZpbmcgbmFub3NjYWxlIGVsZW1lbnRzIHdpdGggYSBwcmVjaXNlIGVsZWN0cm9tYWduZXRpYyByZXNwb25zZSxcIiBEci4gTXJlamVuIHNheXMuIFwiQnV0IGJlY2F1c2Ugb2YgdGhlIGNvbXBsZXhpdHkgb2YgdGhlIHBoeXNpY3MgaW52b2x2ZWQsIHRoZSBkZXNpZ24sIGZhYnJpY2F0aW9uIGFuZCBjaGFyYWN0ZXJpemF0aW9uIHByb2Nlc3NlcyBvZiB0aGVzZSBlbGVtZW50cyByZXF1aXJlIGEgaHVnZSBhbW91bnQgb2YgdHJpYWwgYW5kIGVycm9yLCBkcmFtYXRpY2FsbHkgbGltaXRpbmcgdGhlaXIgYXBwbGljYXRpb25zLlwiXHJcbiAgICAgICAgICAgIDxiciAvPjxiciAvPlxyXG4gICAgICAgICAgICBEZWVwIExlYXJuaW5nIGEga2V5IHRvIHByZWNpc2lvbiBtYW51ZmFjdHVyaW5nXHJcbiAgICAgICAgICAgIDxiciAvPjxiciAvPlxyXG4gICAgICAgICAgICBcIk91ciBuZXcgYXBwcm9hY2ggZGVwZW5kcyBhbG1vc3QgZW50aXJlbHkgb24gRGVlcCBMZWFybmluZywgYSBjb21wdXRlciBuZXR3b3JrIGluc3BpcmVkIGJ5IHRoZSBsYXllcmVkIGFuZCBoaWVyYXJjaGljYWwgYXJjaGl0ZWN0dXJlIG9mIHRoZSBodW1hbiBicmFpbixcIiBQcm9mLiBXb2xmIGV4cGxhaW5zLiBcIkl0J3Mgb25lIG9mIHRoZSBtb3N0IGFkdmFuY2VkIGZvcm1zIG9mIG1hY2hpbmUgbGVhcm5pbmcsIHJlc3BvbnNpYmxlIGZvciBtYWpvciBhZHZhbmNlcyBpbiB0ZWNobm9sb2d5LCBpbmNsdWRpbmcgc3BlZWNoIHJlY29nbml0aW9uLCB0cmFuc2xhdGlvbiBhbmQgaW1hZ2UgcHJvY2Vzc2luZy4gV2UgdGhvdWdodCBpdCB3b3VsZCBiZSB0aGUgcmlnaHQgYXBwcm9hY2ggZm9yIGRlc2lnbmluZyBuYW5vcGhvdG9uaWMsIG1ldGFtYXRlcmlhbCBlbGVtZW50cy5cIjxzdXA+MTwvc3VwPjwvcD5gXHJcbiAgICAgICAgICAgICA7XHJcbiAgICAgICAgICAgICB2YXIgICAgICBibG9nY2l0ZTIxID0gYCAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnNjaWVuY2VkYWlseS5jb20vcmVsZWFzZXMvMjAxOC8xMC8xODEwMjMxMzA1MDIuaHRtXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5zY2llbmNlZGFpbHkuY29tL3JlbGVhc2VzLzIwMTgvMTAvMTgxMDIzMTMwNTAyLmh0bS9hPiA8L3A+XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MjAgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5NYXRlcmlhbCB0ZWNobm9sb2dpZXMgdG9vIG9mdGVuIHJlbWFpbiB0aGUgdW5zdW5nIGhlcm8gZm9yIHNvIG11Y2ggYWR2YW5jZW1lbnQgaW4gYW55IGZpZWxkLlxyXG4gICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBib2R5IG1hdGVyaWFsIGl0c2VsZiBpcyB3aGF0IE1jTGFyZW4gY2FsbHMgXCJ0aXRhbml1bSBkZXBvc2l0aW9uIGNhcmJvbiBmaWJlcixcIiB3aGVyZSBhIG1pY3Jvbi10aGluIGxheWVyIG9mIHRpdGFuaXVtIGlzIGZ1c2VkIGRpcmVjdGx5IGludG8gdGhlIGZpYmVyJ3Mgd2VhdmUsIGJlY29taW5nIGFuIGludGVncmFsIHBhcnQgb2YgdGhlIGNvbnN0cnVjdGlvbi48c3VwPjE8L3N1cD48L3A+XHJcbiAgPGltZyBzcmM9XCJkaXN0L2ltZy9tY2xhcmVuLmpwZ1wiIGNsYXNzPVwiem9vbVwiIC8+PHA+XHJcbiAgTWNMYXJlbiBqdXN0IHJlaW52ZW50ZWQgdGhlIHdpbmctLWVyaHVtLCBieSBkb2luZyBhd2F5IHdpdGggdGhlIHNwb2lsZXIgd2luZz8gQnkgYWxnb3JpdGhtaWNhbGx5IGFkanVzdGluZyB0aGUgY2VudGVycyBvZiB3aW5kZmxvdyBwcmVzc3VyZSBiYXNlZCBvbiBzcGVlZCwgb3RoZXIgZmFjdG9ycyBvcHRpbWl6ZXMgLS0gcmVpbnZlbnRzIC0tIHRoZSB3aW5nOjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIGVudGlyZSBib2R5IGlzIG1hZGUgZnJvbSBsaWdodHdlaWdodCBjYXJib24gZmliZXIsIHBhcnRzIG9mIHdoaWNoIGFyZSBhY3R1YWxseSBmbGV4aWJsZS4gT24gZWFjaCBlbmQgb2YgdGhlIHRhaWwsIGFjdGl2ZSBhaWxlcm9ucyBjYW4gYWN0dWFsbHkgYmVuZCwgcmVkdWNpbmcgdHVyYnVsZW5jZSBhbmQgZHJhZyBhdCBoaWdoZXIgc3BlZWRzLiBBY2NvcmRpbmcgdG8gTWNMYXJlbiwgdGhlc2UgYWlsZXJvbnMgXCJhZGp1c3QgdG8gbW92ZSB0aGUgY2VudGVyIG9mIHByZXNzdXJlIGFuZCBwcm92aWRlIHRoZSByZXF1aXJlZCBsZXZlbCBvZiBkb3duZm9yY2UgcHJlY2lzZWx5IHdoZW4gaXQgaXMgbmVlZGVkIG1vc3QuXCIgSXQncyBhaXJzcGFjZSB0ZWNoIGluIGFuIGF1dG9tb3RpdmUgYXBwbGljYXRpb24sIGFuZCBpdCBhbGxldmlhdGVzIHRoZSBuZWVkIGZvciBhIHNpbGx5IHJlYXIgd2luZy48c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+V2l0aCBhIGxpdHRsZSBtb3JlIHByZWNpc2lvbiBhbmQgcmVsaWFiaWxpdHksIHdoYXQgc2hvdWxkIHN0b3AgdGhlbSBmcm9tIGludmVydGluZyBhaXItZmxvdywgYW5kIHN0cmFwIHNvbWUgd2luZ3MgYW5kIGEgdHVyYmluZSB0byB0aGF0IDEsMDAwIGhvcnNlLXBvd2VyIGVuZ2luZSE8cD5cclxuICBgXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTIwID0gYCBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5jbmV0LmNvbS9yb2Fkc2hvdy9uZXdzL21jbGFyZW4tc3BlZWR0YWlsLW9mZmljaWFsLWRlYnV0L1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9yb2Fkc2hvdy9uZXdzL21jbGFyZW4tc3BlZWR0YWlsLW9mZmljaWFsLWRlYnV0L1xyXG4gICAgICA8L2E+IFxyXG4gICAgIGA7XHJcbiAgICAgdmFyICAgICBibG9ncG9zdDE5ID0gYCBcclxuICAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RGF0YSBwcml2YWN5J3MgbmV3IGhlcm8gcmFpc2VzIGF0dGVudGlvbiB0byBvbmUgb2YgdGhlIG1vcmUgcHJlc3NpbmcgaXNzdWUgb2YgdGVjaG5vbG9neSBpbiBvdXIgbGl2ZXM6XHJcbiAgICAgIDwvcD5cclxuICAgICAgPHAgY2xhc3M9XCJxdW90ZVwiPkFwcGxl4oCZcyBjaGllZiBleGVjdXRpdmUsIFRpbSBDb29rLCBjYWxsZWQgb24gV2VkbmVzZGF5IGZvciBhIGZlZGVyYWwgcHJpdmFjeSBsYXcgaW4gdGhlIFVTIHRvIHByb3RlY3QgYWdhaW5zdCB2b3JhY2lvdXMgaW50ZXJuZXQgY29tcGFuaWVzIGhvYXJkaW5nIHNvIG11Y2ggZGlnaXRhbCBkYXRhIHRoYXQgdGhlIGJ1c2luZXNzZXMga25vdyBjaXRpemVucyDigJxiZXR0ZXIgdGhhbiB0aGV5IGtub3cgdGhlbXNlbHZlc+KAnSDigJMgYW5kIHRoZW4gb2Z0ZW4gc2VsbCB0aGUgaW5mb3JtYXRpb24gb24uXHJcbjxiciAvPjxiciAvPlxyXG4gICAgICBDb29rIHdhcm5lZCBpbiBhIGtleW5vdGUgc3BlZWNoIHRoYXQgcGVyc29uYWwgZGF0YSB3YXMgYmVpbmcg4oCcd2VhcG9uaXplZOKAnSBhZ2FpbnN0IHRoZSBwdWJsaWMgYW5kIGVuZG9yc2VkIHRvdWdoIHByaXZhY3kgbGF3cyBmb3IgYm90aCBFdXJvcGUgYW5kIHRoZSBVUy4gVGhlIGlQaG9uZSBhbmQgTWFjIGNvbXB1dGVyIGdpYW50IGhhcyBzdG9vZCBvdXQgaW4gaXRzIGV4cGxpY2l0IGRlY2xhcmF0aW9ucyB0aGF0IEFwcGxlIHByZWZlcnMgdG8gcHJvdGVjdCBpdHMgY3VzdG9tZXJz4oCZIHBlcnNvbmFsIGRhdGEuXHJcbiAgICAgIDwvcD5cclxuICAgICAgPHA+SW1wb3J0YW50bHksIFRpbSBDb29rIGFkZHJlc3NlcyB0aGUgbW9zdCBzZW5zaXRpdmUgb2YgZGF0YSBhYm91dCBvdXJzZWx2ZXMsIGkuZS4gdGhlIG5leHVzIG9mIHZvbHVudGVlcmVkIGFuZCBvYnNlcnZlZCBkYXRhOiA8aT5pbmZlcnJlZCBkYXRhPC9pPjpcclxuICAgICA8cCBjbGFzcz1cInF1b3RlXCI+QnJvYWRseSBbcGVyc29uYWwgZGF0YV0gY2FuIGJlIHNwbGl0IGludG8gdGhyZWUgY2F0ZWdvcmllczogVm9sdW50ZWVyZWQgZGF0YSBpcyBpbmZvcm1hdGlvbiB3ZSB3aWxsaW5nbHkgcGFydCB3aXRoIGluIG9ubGluZSBzdXJ2ZXlzIGFuZCBzb2NpYWwgbWVkaWEgcHJvZmlsZXMuIE9ic2VydmVkIGRhdGEgaXMgY2FwdHVyZWQgdGhyb3VnaCB0aGUgb2JzZXJ2YXRpb24gb2YgYWN0aW9ucyBhbmQgaW50ZXJhY3Rpb25zIG9mIGluZGl2aWR1YWxzIChHUFMgZGF0YSBhbmQgdGVsZWNvbXMgbWV0YWRhdGEsIGZvciBleGFtcGxlKS4gSW5mZXJyZWQgZGF0YSBpcyB1c2VkIHRvIGNvbXBsZXRlIHRoZSBwaWN0dXJlIGJ5IG1pbmluZyB0aG9zZSBmaXJzdCB0d28gY2F0ZWdvcmllcy48c3VwPjE8L3N1cD48L3A+YFxyXG4gICAgICAgO1xyXG4gICAgICAgdmFyICAgICAgYmxvZ2NpdGUxOSA9IGAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE4L29jdC8yNC90aW0tY29vay11cy1mZWRlcmFsLXByaXZhY3ktbGF3LXdlYXBvbml6ZWQtcGVyc29uYWwtZGF0YVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxOC9vY3QvMjQvdGltLWNvb2stdXMtZmVkZXJhbC1wcml2YWN5LWxhdy13ZWFwb25pemVkLXBlcnNvbmFsLWRhdGE8L2E+IDwvcD5cclxuICAgICAgIFxyXG4gICAgICAgPHAgY2xhc3M9XCJjaXRlXCI+IDIgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9zL25ldy13b3JsZC1jcmltZS9ob3ctbXVjaC1hcmUteW91LXdvcnRoLWluLXRoZS1vbmxpbmUtZGF0YS1lY29ub215LTVhZTJkZDIzNjEzNVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICBodHRwczovL21lZGl1bS5jb20vcy9uZXctd29ybGQtY3JpbWUvaG93LW11Y2gtYXJlLXlvdS13b3J0aC1pbi10aGUtb25saW5lLWRhdGEtZWNvbm9teS01YWUyZGQyMzYxMzU8L2E+IDwvcD5cclxuICAgICAgICBgO1xyXG4gIHZhciAgICAgYmxvZ3Bvc3QxOCA9IGAgICAgICAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkJpZ2dlciwgRmFzdGVyIEltYWdlIFJlbmRlcmluZy0tZXNwZWNpYWxseSB3aGVuIGRhdGEgcG9pbnRzIGFyZSB0aWVkIHRvIHRoZSBwaXhlbHMgb2YgYSBwYWdlLCBidXQgZXNwZWNpYWxseSBzdGlsbCBwaWN0dXJlcyBzaG91bGQgYmUgdGhlIGJyb3dzZXJzJyBUYXNrICMxLiBJbnN0ZWFkLCBsb2FkLXRpbWVzIHRvbyBvZnRlbiBmYWxsIHZpY3RpbSB0byB0aGUgZ3JhcGhpY3MgLi4uIGJ1dCB0aGUgYnJvd3NlciB3b3JsZCBpcyBub3cgd2lsbGluZyB0byB3b3JrIHRvZ2V0aGVyIGZvciAgYWN0aW9uOlxyXG4gICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkdvb2dsZSByZXZlYWxlZCBXZWJQIGVpZ2h0IHllYXJzIGFnbyBhbmQgc2luY2UgdGhlbiBoYXMgYnVpbHQgaXQgaW50byBpdHMgQ2hyb21lIHdlYiBicm93c2VyLCBBbmRyb2lkIHBob25lIHNvZnR3YXJlIGFuZCBtYW55IG9mIGl0cyBvbmxpbmUgcHJvcGVydGllcyBpbiBhbiBlZmZvcnQgdG8gcHV0IHdlYnNpdGVzIG9uIGEgZGlldCBhbmQgY3V0IG5ldHdvcmsgZGF0YSB1c2FnZS4gQnV0IEdvb2dsZSBoYWQgdHJvdWJsZSBlbmNvdXJhZ2luZyByaXZhbCBicm93c2VyIG1ha2VycyB0byBlbWJyYWNlIGl0LlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIFwiTW96aWxsYSBpcyBtb3ZpbmcgZm9yd2FyZCB3aXRoIGltcGxlbWVudGluZyBzdXBwb3J0IGZvciBXZWJQLFwiIHRoZSBub25wcm9maXQgb3JnYW5pemF0aW9uIHNhaWQuIFdlYlAgd2lsbCB3b3JrIGluIHZlcnNpb25zIG9mIEZpcmVmb3ggYmFzZWQgb24gaXRzIEdlY2tvIGJyb3dzZXIgZW5naW5lLCBGaXJlZm94IGZvciBwZXJzb25hbCBjb21wdXRlcnMgYW5kIEFuZHJvaWQgYnV0IG5vdCBmb3IgaU9TLiBNb3ppbGxhIHBsYW5zIHRvIGFkZCBzdXBwb3J0IGluIHRoZSBmaXJzdCBoYWxmIG9mIDIwMTkuXHJcblxyXG5Db21taXR0aW5nIHRvIGEgbmV3IGltYWdlIGZvcm1hdCBvbiB0aGUgd2ViIGlzIGEgYmlnIGRlYWwuIEluIGFkZGl0aW9uIHRvIHRlY2huaWNhbCBjaGFsbGVuZ2VzIGFuZCBuZXcgc2VjdXJpdHkgcmlza3MsIGVtYnJhY2luZyBhIG5ldyBpbWFnZSBmb3JtYXQgbWVhbnMgZW1icmFjaW5nIGl0IGZvciB5ZWFycyBhbmQgeWVhcnMsIGJlY2F1c2UgcmVtb3Zpbmcgc3VwcG9ydCBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUgd2lsbCBicmVhayB3ZWJzaXRlcyB0aGF0IHJlbHkgb24gaXQuXHJcbjxiciAvPjxiciAvPlxyXG5JdCdzIG9uZSBvZiB0aGUgY2VudHJhbCBjb251bmRydW1zIG9mIHRoZSB3ZWIuIEJyb3dzZXIgbWFrZXJzIGFuZCB3ZWJzaXRlIGRldmVsb3BlcnMgd2FudCB0byBhZHZhbmNlIHRoZSB0ZWNobm9sb2d5LCBidXQgdGhleSBjYW4ndCByZW1vdmUgb2xkZXIgYXNwZWN0cyBvZiB0aGUgZm91bmRhdGlvbiBhcyByZWFkaWx5IGFzIEdvb2dsZSBjYW4gd2l0aCBBbmRyb2lkIG9yIEFwcGxlIHdpdGggaXRzIHJpdmFsIGlPUyBzb2Z0d2FyZS4gV2Vic2l0ZXMgaGF2ZSBhIGxvbmcgc2hlbGYgbGlmZS48c3VwPjE8L3N1cD48L3A+YFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxOCA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy9maXJlZm94LXRvLXN1cHBvcnQtZ29vZ2xlcy13ZWJwLWltYWdlLWZvcm1hdC1mb3ItYS1mYXN0ZXItd2ViL1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9uZXdzL2ZpcmVmb3gtdG8tc3VwcG9ydC1nb29nbGVzLXdlYnAtaW1hZ2UtZm9ybWF0LWZvci1hLWZhc3Rlci13ZWIvXHJcbiAgICAgIDwvYT4gXHJcbiAgICAgYDtcclxuICAgICB2YXIgICAgIGJsb2dwb3N0MTcgPSBgIFxyXG4gICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Cb290c3RyYXBwaW5nIGFuYWx5dGljIG1vZGVscyBpbiBhbnkgc2NpZW5jZSByZXF1aXJlcyBhIGxvbmcsIHN0ZWFkeSBjbGltYiB1cG9uIHRoZSA8aT5TaG91bGRlcnMgb2YgR2lhbnRzPC9pPiwgeWVhcnMgYW5kIGRlY2FkZXMnIHBhc3QgcmVzZWFyY2ggZ2FpbnMtLWVzcGVjaWFsbHkgIENsYXNzaWZpY2F0aW9uIGFuZCBSZWdyZXNzaW9uIFRyZWVzIC4gXHJcbiAgICAgIDwvcD5cclxuICAgICA8cCBjbGFzcz1cInF1b3RlXCI+V2hlbiBhcHByb2FjaGluZyBhbnkgdHlwZSBvZiBNYWNoaW5lIExlYXJuaW5nIChNTCkgcHJvYmxlbSB0aGVyZSBhcmUgbWFueSBkaWZmZXJlbnQgYWxnb3JpdGhtcyB0byBjaG9vc2UgZnJvbS4gSW4gbWFjaGluZSBsZWFybmluZywgdGhlcmXigJlzIHNvbWV0aGluZyBjYWxsZWQgdGhlIOKAnE5vIEZyZWUgTHVuY2jigJ0gdGhlb3JlbSB3aGljaCBiYXNpY2FsbHkgc3RhdGVzIHRoYXQgbm8gb25lIE1MIGFsZ29yaXRobSBpcyBiZXN0IGZvciBhbGwgcHJvYmxlbXMuIFRoZSBwZXJmb3JtYW5jZSBvZiBkaWZmZXJlbnQgTUwgYWxnb3JpdGhtcyBzdHJvbmdseSBkZXBlbmRzIG9uIHRoZSBzaXplIGFuZCBzdHJ1Y3R1cmUgb2YgeW91ciBkYXRhLjxzdXA+MTwvc3VwPjwvcD5gXHJcbiAgICAgICA7XHJcbiAgICAgICB2YXIgICAgICBibG9nY2l0ZTE3ID0gYCBcclxuICAgICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3Rvd2FyZHNkYXRhc2NpZW5jZS5jb20vc2VsZWN0aW5nLXRoZS1iZXN0LW1hY2hpbmUtbGVhcm5pbmctYWxnb3JpdGhtLWZvci15b3VyLXJlZ3Jlc3Npb24tcHJvYmxlbS0yMGMzMzBiYWQ0ZWZcclxuICAgICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgICBodHRwczovL3Rvd2FyZHNkYXRhc2NpZW5jZS5jb20vc2VsZWN0aW5nLXRoZS1iZXN0LW1hY2hpbmUtbGVhcm5pbmctYWxnb3JpdGhtLWZvci15b3VyLXJlZ3Jlc3Npb24tcHJvYmxlbS0yMGMzMzBiYWQ0ZWZcclxuICAgICAgICAgPC9hPiBcclxuICAgICAgICBgO1xyXG4gIHZhciAgICAgYmxvZ3Bvc3QxNiA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkFwcGxlIFYuIEJsb29tYmVyZy4gQmxvb21iZXJnIGhpdCBmaXJzdC4gTXVjaCBjb250cm92ZXJzeSBub3cgc3Vycm91bmRzIHRoZSB0b3BpYyBvZiBteSBPY3RvYmVyIDEwdGggcG9zdC0tdGhhdCBCbG9vbWJlcmcgY2xhaW1pbmcgdGhhdCBBcHBsZSB3YXMgYXdhcmUgb2YgcG90ZW50aWFsIGNoaXAgZW1iZWRzIGZyb20gZm9yZWlnbiBtYW51ZmFjdHVyZXJzLiBXaG9zZSBuZXdzIGNhbiBvbmUgYmVsaWV2ZSBhbnltb3JlPyBcclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gQXBwbGUgSW5jIENoaWVmIEV4ZWN1dGl2ZSBUaW0gQ29vayBvbiBGcmlkYXkgdG9sZCBhbiBvbmxpbmUgbmV3cyB3ZWJzaXRlIHRoYXQgQmxvb21iZXJnIHNob3VsZCByZXRyYWN0IGEgc3RvcnkgdGhhdCBjbGFpbWVkIEFwcGxl4oCZcyBpbnRlcm5hbCBjb21wdXRlciBzeXN0ZW1zIGhhZCBiZWVuIGluZmlsdHJhdGVkIGJ5IG1hbGljaW91cyBjb21wdXRlciBjaGlwcyBpbnNlcnRlZCBieSBDaGluZXNlIGludGVsbGlnZW5jZSBhZ2VudHMuIDxiciAvPjxiciAvPlxyXG4gIOKAnFRoZXJlIGlzIG5vIHRydXRoIGluIHRoZWlyIHN0b3J5IGFib3V0IEFwcGxlLOKAnSBDb29rIHRvbGQgQnV6ekZlZWQgTmV3cyBpbiBhbiBpbnRlcnZpZXcgd2l0aCB0aGUgb25saW5lIHB1YmxpY2F0aW9uLiDigJxUaGV5IG5lZWQgdG8gZG8gdGhhdCByaWdodCB0aGluZyBhbmQgcmV0cmFjdCBpdC7igJ08c3VwPjI8L3N1cD48L3A+YFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxNiA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiIGh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtYXBwbGUtYmxvb21iZXJnL2FwcGxlLWNlby11cmdlcy1ibG9vbWJlcmctdG8tcmV0cmFjdC1zcHktY2hpcC1zdG9yeS1pZFVTS0NOMU1UMlo4XHJcbiAgICBcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgaHR0cHM6Ly93d3cucmV1dGVycy5jb20vYXJ0aWNsZS91cy1hcHBsZS1ibG9vbWJlcmcvYXBwbGUtY2VvLXVyZ2VzLWJsb29tYmVyZy10by1yZXRyYWN0LXNweS1jaGlwLXN0b3J5LWlkVVNLQ04xTVQyWjhcclxuICAgIFxyXG4gICAgXHJcbiAgICAgIDwvYT4gXHJcbiAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MTUgPSBgIFxyXG4gIDxwPlxyXG4gIE1hdGhlbWF0aWNhbGx5LCByZWFkaW5nIHRpbWUgICBuZWNlc3NhcmlseSBkaXZpZGVzIGl0c2VsZiB1cCBpbnRvIHNtYWxsIHBpZWNlcyBub3cgdGhhdCBldmVyeW9uZSBpcyBhIGNsaWNrIGF3YXkgZnJvbSBhbnl0aGluZyByZWFkYWJsZSwgZXZlcnkgbm92ZWwgd3JpdHRlbiwgYXQgYSBtb21lbnQncyBkb3dubG9hZCwgd2l0aG91dCBvciB3aXRob3V0IGVhc3kgcGhvbmUgYW5kIHRhYmxldCByZWFkaW5nLiBCdXQgZ2l2ZW4gdGhhdCBjaG9pY2UsIHRoZSB0cmVuZCB0b3dhcmQgZmljdGlvbiBpcyBub3Qgd2l0aG91dCBnb29kIHJlYXNvbiAuLi4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBNb2Rlcm4gZGF5IHJlYWRpbmcgaGFiaXRzIGNvbnRpbnVlIHRvIGV2b2x2ZSBpbiBhIGRpZ2l0YWwgYWdlLiBTdGF0aXN0aWNzIHZhcnkgb24gZXhhY3RseSBob3cgbWFueSBwZW9wbGUgYXJlIHJlYWRpbmcgbm92ZWxzIHRoaXMgZGVjYWRlIGNvbXBhcmVkIHRvIGRlY2FkZXMgcGFzdC4gVGhlcmUgaXMgYSBkZWZpbml0ZSB0cmVuZCBmb3IgZ2VuZXJhbCByZWFkZXJzIHRvIGJ1eSBtb3JlIGZpY3Rpb24gdGhhbiBub25maWN0aW9uIGJvb2tz4oCUYW5kIHRvIGdldCBmYWN0cywgbmV3cyBhbmQgY3J5c3RhbGxpemVkIGtub3dsZWRnZSBmcm9tIHRoZSBpbnRlcm5ldC4gSW4gMjAxMiwgb25seSBmb3VyIG9mIHRoZSB0b3AgdHdlbnR5IGJvb2tzIHdlcmUgbm9uZmljdGlvbiB0aXRsZXMuPGJyIC8+PGJyIC8+XHJcblxyXG5cIlBlb3BsZSBhcmUgaW50ZXJlc3RlZCBpbiBlc2NhcGUsXCIgc2F5cyBDYXJvbCBGaXR6Z2VyYWxkIG9mIHRoZSBCb29rIFJlcG9ydCBOZXR3b3JrLiBcIkluIGEgbnVtYmVyIG9mIHBhZ2VzLCB0aGUgc3Rvcnkgd2lsbCBvcGVuLCBldm9sdmUgYW5kIGNsb3NlLCBhbmQgYSBsb3Qgb2Ygd2hhdCdzIGdvaW5nIG9uIGluIHRoZSB3b3JsZCB0b2RheSBpcyBub3QgbGlrZSB0aGF0LiBZb3UndmUgZ290IHRoaXMgZW5jYXBzdWxhdGVkIGVzY2FwZSB0aGF0IHlvdSBjYW4gZW5qb3kuXCI8c3VwPjI8L3N1cD48L3A+YFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxNSA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuc21pdGhzb25pYW5tYWcuY29tL3NtYXJ0LW5ld3MvZ3Jvd2luZy1zdXJyb3VuZGVkLWJvb2tzLW1heS1ib2xzdGVyLXNraWxscy1sYXRlci1saWZlLTE4MDk3MDUyMy9cclxuICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICBodHRwczovL3d3dy5zbWl0aHNvbmlhbm1hZy5jb20vc21hcnQtbmV3cy9ncm93aW5nLXN1cnJvdW5kZWQtYm9va3MtbWF5LWJvbHN0ZXItc2tpbGxzLWxhdGVyLWxpZmUtMTgwOTcwNTIzL1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgPC9hPlxyXG4gICAgICA8L3A+ICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cucHN5Y2hvbG9neXRvZGF5LmNvbS91cy9ibG9nL3RoZS1hdGhsZXRlcy13YXkvMjAxNDAxL3JlYWRpbmctZmljdGlvbi1pbXByb3Zlcy1icmFpbi1jb25uZWN0aXZpdHktYW5kLWZ1bmN0aW9uXHJcblwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbmh0dHBzOi8vd3d3LnBzeWNob2xvZ3l0b2RheS5jb20vdXMvYmxvZy90aGUtYXRobGV0ZXMtd2F5LzIwMTQwMS9yZWFkaW5nLWZpY3Rpb24taW1wcm92ZXMtYnJhaW4tY29ubmVjdGl2aXR5LWFuZC1mdW5jdGlvblxyXG5cclxuaHR0cHM6Ly93d3cuc21pdGhzb25pYW5tYWcuY29tL3NtYXJ0LW5ld3MvZ3Jvd2luZy1zdXJyb3VuZGVkLWJvb2tzLW1heS1ib2xzdGVyLXNraWxscy1sYXRlci1saWZlLTE4MDk3MDUyMy9cclxuICA8L2E+XHJcbiAgPC9wPiAgIFxyXG5cclxuICAgICBgO1xyXG4gIHZhciAgICAgYmxvZ3Bvc3QxNCA9IGAgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRlY2hub2xvZ3kgcHJvdmlkZXMgdGhlIHJlc291cmNlcyBmb3IgYSBiZXR0ZXIgbGlmZSBhbGwgYXJvdW5kIC4uLiA8L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gICAgVGhlIG1vcmUgc29waGlzdGljYXRlZCBzY2llbmNlIGJlY29tZXMsIHRoZSBoYXJkZXIgaXQgaXMgdG8gY29tbXVuaWNhdGUgcmVzdWx0cy4gUGFwZXJzIHRvZGF5IGFyZSBsb25nZXIgdGhhbiBldmVyIGFuZCBmdWxsIG9mIGphcmdvbiBhbmQgc3ltYm9scy4gVGhleSBkZXBlbmQgb24gY2hhaW5zIG9mIGNvbXB1dGVyIHByb2dyYW1zIHRoYXQgZ2VuZXJhdGUgZGF0YSwgYW5kIGNsZWFuIHVwIGRhdGEsIGFuZCBwbG90IGRhdGEsIGFuZCBydW4gc3RhdGlzdGljYWwgbW9kZWxzIG9uIGRhdGEuIFRoZXNlIHByb2dyYW1zIHRlbmQgdG8gYmUgYm90aCBzbyBzbG9wcGlseSB3cml0dGVuIGFuZCBzbyBjZW50cmFsIHRvIHRoZSByZXN1bHRzIHRoYXQgaXTigJlzIGNvbnRyaWJ1dGVkIHRvIGEgcmVwbGljYXRpb24gY3Jpc2lzLCBvciBwdXQgYW5vdGhlciB3YXksIGEgZmFpbHVyZSBvZiB0aGUgcGFwZXIgdG8gcGVyZm9ybSBpdHMgbW9zdCBiYXNpYyB0YXNrOiB0byByZXBvcnQgd2hhdCB5b3XigJl2ZSBhY3R1YWxseSBkaXNjb3ZlcmVkLCBjbGVhcmx5IGVub3VnaCB0aGF0IHNvbWVvbmUgZWxzZSBjYW4gZGlzY292ZXIgaXQgZm9yIHRoZW1zZWx2ZXMuPGJyIC8+PGJyIC8+XHJcbiAgICBQZXJoYXBzIHRoZSBwYXBlciBpdHNlbGYgaXMgdG8gYmxhbWUuIFNjaWVudGlmaWMgbWV0aG9kcyBldm9sdmUgbm93IGF0IHRoZSBzcGVlZCBvZiBzb2Z0d2FyZTsgdGhlIHNraWxsIG1vc3QgaW4gZGVtYW5kIGFtb25nIHBoeXNpY2lzdHMsIGJpb2xvZ2lzdHMsIGNoZW1pc3RzLCBnZW9sb2dpc3RzLCBldmVuIGFudGhyb3BvbG9naXN0cyBhbmQgcmVzZWFyY2ggcHN5Y2hvbG9naXN0cywgaXMgZmFjaWxpdHkgd2l0aCBwcm9ncmFtbWluZyBsYW5ndWFnZXMgYW5kIOKAnGRhdGEgc2NpZW5jZeKAnSBwYWNrYWdlcy4gQW5kIHlldCB0aGUgYmFzaWMgbWVhbnMgb2YgY29tbXVuaWNhdGluZyBzY2llbnRpZmljIHJlc3VsdHMgaGFzbuKAmXQgY2hhbmdlZCBmb3IgNDAwIHllYXJzLiBQYXBlcnMgbWF5IGJlIHBvc3RlZCBvbmxpbmUsIGJ1dCB0aGV54oCZcmUgc3RpbGwgdGV4dCBhbmQgcGljdHVyZXMgb24gYSBwYWdlLjxzdXA+MTwvc3VwPjwvcD5cclxuICAgIDxwPkFuYWNvbmRhLCB0aGUgcHJvZ3JhbW1pbmcgcGFja2FnZSBidW5kbGUgZmVhdHVyZXMgbWF0aCBzb2Z0d2FyZSB3aXRoIFNweWRlciBhcHBsaWNhdGlvbnMsIHlldCB0aGUgSnVweXRlciBub3RlYm9vayBpcyBhbHJlYWR5IHJldm9sdXRpb25pemluZyBhY2FkZW1pYyBwdWJsaWNhdGlvbnMuLi5gXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTE0ID0gYCBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiXHJcbiAgaHR0cHM6Ly93d3cudm94LmNvbS8yMDE0LzExLzI0LzcyNzI5MjkvZ2xvYmFsLXBvdmVydHktaGVhbHRoLWNyaW1lLWxpdGVyYWN5LWdvb2QtbmV3c1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cHM6Ly93d3cudm94LmNvbS8yMDE0LzExLzI0LzcyNzI5MjkvZ2xvYmFsLXBvdmVydHktaGVhbHRoLWNyaW1lLWxpdGVyYWN5LWdvb2QtbmV3c1xyXG4gIDwvYT5cclxuICA8L3A+ICAgXHJcbiAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MTMgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGUgQ29sbGVnZSBUZXJtLVBhcGVyLCB0aGUgcGVyZW5uaWFsIG9iamVjdCBvZiBkcmVhZCBvciBlbGF0aW9uLCBvZiB0ZWRpdW0gb3IgZXhjaXRlbWVudC4gWWV0LCBtb3JlIGFuZCBtb3JlLCB0aGUgbmVlZHMgZm9yIGNvbW11bmljYXRpb24gcmVxdWlyZSB0aGUgaW5jbHVzaW9uIG9mIHByb2dyYW1taW5nLCBhbmFseXRpYyBsYW5ndWFnZS4gUGFyYWdyYXBocyBvZiBlbG9xdWVudGx5IHdyaXR0ZW4gY29kZSB3aXRoIHBhcmFncmFwaHMgb2Ygc3lub3BzaXMsIGZyb20gb25lIGxvZ2ljYWwgc3RhdGVtZW50IHRvIHRoZSBuZXh0LCBsYXlpbmcgb3V0IHRoZSBwcm9vZnMgd2l0aCBlYWNoIHBhcmFncmFwaC4gQmVzdCB5ZXQsIGl0IGlzIGlubmF0ZWx5IG9ubGluZSBhbmQgcHJlc2VudGFibGUsIGFuZCBlbXBsb3lzIHRoZSBwb3dlcmZ1bCBsYW5ndWFnZXMgbGlrZSBQeXRob24gYW5kIFIuIEJ1dCBob3cgdG8gY29tbXVuaWNhdGUgdGhlc2Ugc3BlY2lhbGl6ZWQgcGFwZXJzIHRvIGEgd2lkZSBhdWRpZW5jZT88L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gICAgVGhlIG1vcmUgc29waGlzdGljYXRlZCBzY2llbmNlIGJlY29tZXMsIHRoZSBoYXJkZXIgaXQgaXMgdG8gY29tbXVuaWNhdGUgcmVzdWx0cy4gUGFwZXJzIHRvZGF5IGFyZSBsb25nZXIgdGhhbiBldmVyIGFuZCBmdWxsIG9mIGphcmdvbiBhbmQgc3ltYm9scy4gVGhleSBkZXBlbmQgb24gY2hhaW5zIG9mIGNvbXB1dGVyIHByb2dyYW1zIHRoYXQgZ2VuZXJhdGUgZGF0YSwgYW5kIGNsZWFuIHVwIGRhdGEsIGFuZCBwbG90IGRhdGEsIGFuZCBydW4gc3RhdGlzdGljYWwgbW9kZWxzIG9uIGRhdGEuIFRoZXNlIHByb2dyYW1zIHRlbmQgdG8gYmUgYm90aCBzbyBzbG9wcGlseSB3cml0dGVuIGFuZCBzbyBjZW50cmFsIHRvIHRoZSByZXN1bHRzIHRoYXQgaXTigJlzIGNvbnRyaWJ1dGVkIHRvIGEgcmVwbGljYXRpb24gY3Jpc2lzLCBvciBwdXQgYW5vdGhlciB3YXksIGEgZmFpbHVyZSBvZiB0aGUgcGFwZXIgdG8gcGVyZm9ybSBpdHMgbW9zdCBiYXNpYyB0YXNrOiB0byByZXBvcnQgd2hhdCB5b3XigJl2ZSBhY3R1YWxseSBkaXNjb3ZlcmVkLCBjbGVhcmx5IGVub3VnaCB0aGF0IHNvbWVvbmUgZWxzZSBjYW4gZGlzY292ZXIgaXQgZm9yIHRoZW1zZWx2ZXMuPGJyIC8+PGJyIC8+XHJcbiAgICBQZXJoYXBzIHRoZSBwYXBlciBpdHNlbGYgaXMgdG8gYmxhbWUuIFNjaWVudGlmaWMgbWV0aG9kcyBldm9sdmUgbm93IGF0IHRoZSBzcGVlZCBvZiBzb2Z0d2FyZTsgdGhlIHNraWxsIG1vc3QgaW4gZGVtYW5kIGFtb25nIHBoeXNpY2lzdHMsIGJpb2xvZ2lzdHMsIGNoZW1pc3RzLCBnZW9sb2dpc3RzLCBldmVuIGFudGhyb3BvbG9naXN0cyBhbmQgcmVzZWFyY2ggcHN5Y2hvbG9naXN0cywgaXMgZmFjaWxpdHkgd2l0aCBwcm9ncmFtbWluZyBsYW5ndWFnZXMgYW5kIOKAnGRhdGEgc2NpZW5jZeKAnSBwYWNrYWdlcy4gQW5kIHlldCB0aGUgYmFzaWMgbWVhbnMgb2YgY29tbXVuaWNhdGluZyBzY2llbnRpZmljIHJlc3VsdHMgaGFzbuKAmXQgY2hhbmdlZCBmb3IgNDAwIHllYXJzLiBQYXBlcnMgbWF5IGJlIHBvc3RlZCBvbmxpbmUsIGJ1dCB0aGV54oCZcmUgc3RpbGwgdGV4dCBhbmQgcGljdHVyZXMgb24gYSBwYWdlLjxzdXA+MTwvc3VwPjwvcD5cclxuICAgIDxwPkFuYWNvbmRhLCB0aGUgcHJvZ3JhbW1pbmcgcGFja2FnZSBidW5kbGUgZmVhdHVyZXMgbWF0aCBzb2Z0d2FyZSB3aXRoIFNweWRlciBhcHBsaWNhdGlvbnMsIHlldCB0aGUgSnVweXRlciBub3RlYm9vayBpcyBhbHJlYWR5IHJldm9sdXRpb25pemluZyBhY2FkZW1pYyBwdWJsaWNhdGlvbnMuLi5gXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTEzID0gYCBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiXHJcbiAgaHR0cHM6Ly93d3cudm94LmNvbS8yMDE0LzExLzI0LzcyNzI5MjkvZ2xvYmFsLXBvdmVydHktaGVhbHRoLWNyaW1lLWxpdGVyYWN5LWdvb2QtbmV3c1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cHM6Ly93d3cudm94LmNvbS8yMDE0LzExLzI0LzcyNzI5MjkvZ2xvYmFsLXBvdmVydHktaGVhbHRoLWNyaW1lLWxpdGVyYWN5LWdvb2QtbmV3c1xyXG4gIDwvYT5cclxuICA8L3A+ICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9xei5jb20vMTQxNjg2Ny90aGUtMjAxOC1ub2JlbC1wcml6ZS1pbi1lY29ub21pY3MtZ29lcy10by13aWxsaWFtLW5vcmRoYXVzLWFuZC1wYXVsLXJvbWVyL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9xei5jb20vMTQxNjg2Ny90aGUtMjAxOC1ub2JlbC1wcml6ZS1pbi1lY29ub21pY3MtZ29lcy10by13aWxsaWFtLW5vcmRoYXVzLWFuZC1wYXVsLXJvbWVyL1xyXG4gIDwvYT5cclxuICA8L3A+ICBcclxuICAgICBgO1xyXG4gdmFyICBibG9ncG9zdDEyID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Nb2RlbGluZyB0aGUgbW9sZWN1bGFyIGJlaGF2aW9yIG9mIG9yZ2FuaWMgY2hlbWlzdHJ5LCBiaW9sb2d5IGhhcyBiZWNvbWUgdGhlIHNwZWNpYWx0eSBvZiBRdWFudHVtIGNvbXB1dGluZywgd2l0aCBpdHMgc3VwZXJwb3NlZCB0aGlyZC1zdGF0ZSB0aGF0IHN1cHBvcnRzIHNob3J0IGJ1cnN0cyBvZiB1bHRyYS1mYXN0IGFsZ29yaXRobSBjb21wdXRhdGlvbnMuIFF1YW50dW0gY29tcHV0aW5nIGhhcyByZXZvbHV0aW9uaXplZCBiaW9sb2d5LCBzbyB3aHkgbm90IHBzeWNob2xvZ3k/ICAuLmF0IGxlYXN0IGF0IHRoZSBtb2xlY3VsYXIgbGV2ZWw6IDwvcD48cCBjbGFzcz1cInF1b3RlXCI+IEFjY29yZGluZyB0byBaaGVuZyBKb3ljZSBXYW5nIGFuZCBvdGhlcnMgd2hvIHRyeSB0byBtb2RlbCBvdXIgZGVjaXNpb24tbWFraW5nIHByb2Nlc3NlcyBtYXRoZW1hdGljYWxseSwgdGhlIGVxdWF0aW9ucyBhbmQgYXhpb21zIHRoYXQgbW9zdCBjbG9zZWx5IG1hdGNoIGh1bWFuIGJlaGF2aW9yIG1heSBiZSBvbmVzIHRoYXQgYXJlIHJvb3RlZCBpbiBxdWFudHVtIHBoeXNpY3MuXHJcblxyXG4gIFwiV2UgaGF2ZSBhY2N1bXVsYXRlZCBzbyBtYW55IHBhcmFkb3hpY2FsIGZpbmRpbmdzIGluIHRoZSBmaWVsZCBvZiBjb2duaXRpb24sIGFuZCBlc3BlY2lhbGx5IGluIGRlY2lzaW9uLW1ha2luZyxcIiBzYWlkIFdhbmcsIHdobyBpcyBhbiBhc3NvY2lhdGUgcHJvZmVzc29yIG9mIGNvbW11bmljYXRpb24gYW5kIGRpcmVjdG9yIG9mIHRoZSBDb21tdW5pY2F0aW9uIGFuZCBQc3ljaG9waHlzaW9sb2d5IExhYiBhdCBUaGUgT2hpbyBTdGF0ZSBVbml2ZXJzaXR5LjxiciAvPjxiciAvPlxyXG4gIFxyXG4gIFwiV2hlbmV2ZXIgc29tZXRoaW5nIGNvbWVzIHVwIHRoYXQgaXNuJ3QgY29uc2lzdGVudCB3aXRoIGNsYXNzaWNhbCB0aGVvcmllcywgd2Ugb2Z0ZW4gbGFiZWwgaXQgYXMgJ2lycmF0aW9uYWwuJyBCdXQgZnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgcXVhbnR1bSBjb2duaXRpb24sIHNvbWUgZmluZGluZ3MgYXJlbid0IGlycmF0aW9uYWwgYW55bW9yZS4gVGhleSdyZSBjb25zaXN0ZW50IHdpdGggcXVhbnR1bSB0aGVvcnnigJRhbmQgd2l0aCBob3cgcGVvcGxlIHJlYWxseSBiZWhhdmUuXCJcclxuICBcclxuICBcclxuICA8c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+U28gbXVjaCBmb3IgdGhlIGJpbmFyeSB3YXkgb2YgdGhpbmtpbmctLWFmdGVyIGFsbCwgaXNuJ3QgbGlmZSBtb3JlIGNvbG9yZnVsIHRoYW4gYmxhY2stYW5kLXdoaXRlIHJlYXNvbmluZz9cclxuICA8L3A+XHJcbiBgO1xyXG4gdmFyICAgYmxvZ2NpdGUxMiA9IGAgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vcGh5cy5vcmcvbmV3cy8yMDE1LTA5LXlvdXJlLWlycmF0aW9uYWwtcXVhbnR1bS1wcm9iYWJpbGlzdGljLWh1bWFuLmh0bWxcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vcGh5cy5vcmcvbmV3cy8yMDE1LTA5LXlvdXJlLWlycmF0aW9uYWwtcXVhbnR1bS1wcm9iYWJpbGlzdGljLWh1bWFuLmh0bWxcclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPlBERnMgPGJyIC8+IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5jZWxsLmNvbS90cmVuZHMvY29nbml0aXZlLXNjaWVuY2VzL2Z1bGx0ZXh0L1MxMzY0LTY2MTMoMTUpMDAwOTktNlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY2VsbC5jb20vdHJlbmRzL2NvZ25pdGl2ZS1zY2llbmNlcy9mdWxsdGV4dC9TMTM2NC02NjEzKDE1KTAwMDk5LTZcclxuICA8L2E+IFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj5QREZzIDxiciAvPiA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL2pvdXJuYWxzLnNhZ2VwdWIuY29tL2RvaS9hYnMvMTAuMTE3Ny8wOTYzNzIxNDE0NTY4NjYzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwOi8vam91cm5hbHMuc2FnZXB1Yi5jb20vZG9pL2Ficy8xMC4xMTc3LzA5NjM3MjE0MTQ1Njg2NjNcclxuICA8L2E+IFxyXG4gIDwvcD5cclxuICAgICBgO1xyXG4gIFxyXG4gICAgIHZhciAgICBibG9ncG9zdDExID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5RdWFudHVtIDxpPidGbGF0LUVhcnRoZXInczwvaT4gaGF2ZSBvbmUgbGVzcyBhcmd1bWVudCAuLi48L3A+PHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIFxyXG5cclxuU3RyYWlnaHRhd2F5LCB0aGV5IHNhdyB0aGUgZHJvcGxldHMgZXhoaWJpdCBzdXJwcmlzaW5nbHkgcXVhbnR1bS1saWtlIGJlaGF2aW9ycyDigJQgb25seSB0cmF2ZXJzaW5nIGNlcnRhaW4g4oCccXVhbnRpemVk4oCdIG9yYml0cyBhcm91bmQgdGhlIGNlbnRlciBvZiB0aGVpciBsaXF1aWQgYmF0aHMsIGZvciBpbnN0YW5jZSwgYW5kIHNvbWV0aW1lcyByYW5kb21seSBqdW1waW5nIGJldHdlZW4gb3JiaXRzLCBhcyBlbGVjdHJvbnMgZG8gaW4gYXRvbXMuIFRoZXJlIGFuZCBpbiBib3VuY2luZy1kcm9wbGV0IGxhYnMgdGhhdCBzb29uIHNwcmFuZyB1cCBhdCB0aGUgTWFzc2FjaHVzZXR0cyBJbnN0aXR1dGUgb2YgVGVjaG5vbG9neSBhbmQgZWxzZXdoZXJlLCBkcm9wbGV0cyB3ZXJlIHNlZW4gdG8gdHVubmVsIHRocm91Z2ggYmFycmllcnMgYW5kIHBlcmZvcm0gb3RoZXIgYWN0cyBwcmV2aW91c2x5IHRob3VnaHQgdG8gYmUgdW5pcXVlbHkgcXVhbnR1bS4gSW4gcmVwcm9kdWNpbmcgcXVhbnR1bSBwaGVub21lbmEgd2l0aG91dCBhbnkgb2YgdGhlIG15c3RlcnksIHRoZSBib3VuY2luZy1kcm9wbGV0IGV4cGVyaW1lbnRzIHJla2luZGxlZCBpbiBzb21lIHBoeXNpY2lzdHMgZGUgQnJvZ2xpZeKAmXMgb2xkIGRyZWFtIG9mIGEgcmVhbGl0eSBhdCB0aGUgcXVhbnR1bSBzY2FsZSB0aGF0IGNvbnNpc3RzIG9mIHBpbG90IHdhdmVzIGFuZCBwYXJ0aWNsZXMgaW5zdGVhZCBvZiBwcm9iYWJpbGl0eSB3YXZlcyBhbmQgY29udW5kcnVtcy48YnIgLz48YnIgLz5cclxuXHJcbkJ1dCBhIHNlcmllcyBvZiBib3VuY2luZy1kcm9wbGV0IGZpbmRpbmdzIHNpbmNlIDIwMTUgaGFzIGNydXNoZWQgdGhpcyBkcmVhbS4gVGhlIHJlc3VsdHMgaW5kaWNhdGUgdGhhdCBDb3VkZXLigJlzIG1vc3Qgc3RyaWtpbmcgZGVtb25zdHJhdGlvbiBvZiBxdWFudHVtLWxpa2UgcGhlbm9tZW5hLCBiYWNrIGluIDIwMDYg4oCUIOKAnHRoZSBleHBlcmltZW50IHRoYXQgZ290IG1lIGhvb2tlZCBvbiB0aGlzIHByb2JsZW0s4oCdIHRoZSBmbHVpZCBkeW5hbWljaXN0IFBhdWwgTWlsZXdza2kgc2FpZCDigJQgd2FzIGluIGVycm9yLiBSZXBlYXQgcnVucyBvZiB0aGUgZXhwZXJpbWVudCwgY2FsbGVkIHRoZSDigJxkb3VibGUtc2xpdCBleHBlcmltZW50LOKAnSBoYXZlIGNvbnRyYWRpY3RlZCBDb3VkZXLigJlzIGluaXRpYWwgcmVzdWx0cyBhbmQgcmV2ZWFsZWQgdGhlIGRvdWJsZS1zbGl0IGV4cGVyaW1lbnQgdG8gYmUgdGhlIGJyZWFraW5nIHBvaW50IG9mIGJvdGggdGhlIGJvdW5jaW5nLWRyb3BsZXQgYW5hbG9neSBhbmQgZGUgQnJvZ2xpZeKAmXMgcGlsb3Qtd2F2ZSB2aXNpb24gb2YgcXVhbnR1bSBtZWNoYW5pY3MuXHJcbiAgPHN1cD4xPC9zdXA+PC9wPlxyXG4gYDtcclxuIHZhciAgICBibG9nY2l0ZTExID0gYCBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnF1YW50YW1hZ2F6aW5lLm9yZy9mYW1vdXMtZXhwZXJpbWVudC1kb29tcy1waWxvdC13YXZlLWFsdGVybmF0aXZlLXRvLXF1YW50dW0td2VpcmRuZXNzLTIwMTgxMDExL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cucXVhbnRhbWFnYXppbmUub3JnL2ZhbW91cy1leHBlcmltZW50LWRvb21zLXBpbG90LXdhdmUtYWx0ZXJuYXRpdmUtdG8tcXVhbnR1bS13ZWlyZG5lc3MtMjAxODEwMTEvXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgICBgO1xyXG4gIFxyXG4gXHJcbiB2YXIgIGJsb2dwb3N0MTAgPSBgXHJcbjxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DbGltYXRlLWNoYW5nZSBzY2llbnRpc3QtYWN0aXZpc3RzIGVhcm4gdGhlaXIgcHJlc3RpZ2Ugd2l0aCBldmVyeSByZXNlYXJjaCBzdHVkeSBhbmQgZXZlcnkgbGV0dGVyIHdyaXR0ZW4uIFdpdGggbGVzcyBmYW5mYXJlLCBlY29ub21pc3RzIGFsc28gZWFybiB0aGVpciBkdWUgcHJlc3RpZ2UgZm9yIHdvcmtpbmcgdG93YXJkIGEgc3VzdGFpbmFibGUgcHJvc3Blcml0eS4gICAgIDwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPiBUaGlzIHllYXLigJlzIFtOb2JlbCBQcml6ZV0gTGF1cmVhdGVzIFdpbGxpYW0gTm9yZGhhdXMgYW5kIFBhdWwgUm9tZXIgaGF2ZSBzaWduaWZpY2FudGx5IGJyb2FkZW5lZCB0aGUgc2NvcGUgb2YgZWNvbm9taWMgYW5hbHlzaXMgYnkgY29uc3RydWN0aW5nICBtb2RlbHMgdGhhdCBleHBsYWluIGhvdyB0aGUgbWFya2V0IGVjb25vbXkgaW50ZXJhY3RzIHdpdGggbmF0dXJlIGFuZCBrbm93bGVkZ2UuIDxiciAvPjxiciAvPlxyXG4gUm9tZXIgZGVtb25zdHJhdGVzIGhvdyBrbm93bGVkZ2UgY2FuIGZ1bmN0aW9uIGFzIGEgZHJpdmVyIG9mIGxvbmctdGVybSBlY29ub21pYyBcclxuZ3Jvd3RoLiBXaGVuIGFubnVhbCBlY29ub21pYyBncm93dGggb2YgYSBmZXcgcGVyIGNlbnQgYWNjdW11bGF0ZXMgb3ZlciBkZWNhZGVzLCBpdCB0cmFuc2Zvcm1zIHBlb3BsZeKAmXMgbGl2ZXMuIFxyXG5QcmV2aW91cyBtYWNyb2Vjb25vbWljIHJlc2VhcmNoIGhhZCBlbXBoYXNpc2VkIHRlY2hub2xvZ2ljYWwgaW5ub3ZhdGlvbiBhcyB0aGUgcHJpbWFyeSBkcml2ZXIgb2YgZWNvbm9taWMgXHJcbmdyb3d0aCwgYnV0IGhhZCBub3QgbW9kZWxsZWQgaG93IGVjb25vbWljIGRlY2lzaW9ucyBhbmQgbWFya2V0IGNvbmRpdGlvbnMgZGV0ZXJtaW5lIHRoZSBjcmVhdGlvbiBvZiBuZXcgXHJcbnRlY2hub2xvZ2llcy4gUGF1bCBSb21lciBzb2x2ZWQgdGhpcyBwcm9ibGVtIGJ5IGRlbW9uc3RyYXRpbmcgaG93IGVjb25vbWljIGZvcmNlcyBnb3Zlcm4gdGhlIHdpbGxpbmduZXNzIG9mIFxyXG5maXJtcyB0byBwcm9kdWNlIG5ldyBpZGVhcyBhbmQgaW5ub3ZhdGlvbnMuIFxyXG48c3VwPjE8L3N1cD48L3A+XHJcbjxwPlRoZSBlY29ub21pc3QgaW4gdHVybiBwcmFjdGljZXMgd2hhdCBoZSBwcmVhY2hlcyBieSB1c2luZyBvbmx5IG9wZW4tc291cmNlIHNvZnR3YXJlLS10byB0aGUgYWltIG9mIGRlbW9jcmF0aXppbmcgcmVzZWFyY2ggaXRzZWxmOjwvcD5cclxuPHAgY2xhc3M9XCJxdW90ZVwiPlJvbWVyIGJlbGlldmVzIGluIG1ha2luZyByZXNlYXJjaCB0cmFuc3BhcmVudC4gSGUgYXJndWVzIHRoYXQgb3Blbm5lc3MgYW5kIGNsYXJpdHkgYWJvdXQgbWV0aG9kb2xvZ3kgaXMgaW1wb3J0YW50IGZvciBzY2llbnRpZmljIHJlc2VhcmNoIHRvIGdhaW4gdHJ1c3QuIEFzIFJvbWVyIGV4cGxhaW5lZCBpbiBhbiBBcHJpbCAyMDE4IGJsb2cgcG9zdCwgaW4gYW4gZWZmb3J0IHRvIG1ha2UgaGlzIG93biB3b3JrIHRyYW5zcGFyZW50LCBoZSB0cmllZCB0byB1c2UgTWF0aGVtYXRpY2EgdG8gc2hhcmUgb25lIG9mIGhpcyBzdHVkaWVzIGluIGEgd2F5IHRoYXQgYW55b25lIGNvdWxkIGV4cGxvcmUgZXZlcnkgZGV0YWlsIG9mIGhpcyBkYXRhIGFuZCBtZXRob2RzLiBJdCBkaWRu4oCZdCB3b3JrLiBIZSBzYXlzIHRoYXQgTWF0aGVtYXRpY2HigJlzIG93bmVyLCBXb2xmcmFtIFJlc2VhcmNoLCBtYWRlIGl0IHRvbyBkaWZmaWN1bHQgdG8gc2hhcmUgaGlzIHdvcmsgaW4gYSB3YXkgdGhhdCBkaWRu4oCZdCByZXF1aXJlIG90aGVyIHBlb3BsZSB0byB1c2UgdGhlIHByb3ByaWV0YXJ5IHNvZnR3YXJlLCB0b28uIFJlYWRlcnMgYWxzbyBjb3VsZCBub3Qgc2VlIGFsbCBvZiB0aGUgY29kZSBoZSB1c2VkIGZvciBoaXMgZXF1YXRpb25zLlxyXG48YnIgLz48YnIgLz5cclxuSW5zdGVhZCBvZiB1c2luZyBNYXRoZW1hdGljYSwgUm9tZXIgZGlzY292ZXJlZCB0aGF0IGhlIGNvdWxkIHVzZSBhIEp1cHl0ZXIgbm90ZWJvb2sgZm9yIHNoYXJpbmcgaGlzIHJlc2VhcmNoLiBKdXB5dGVyIG5vdGVib29rcyBhcmUgd2ViIGFwcGxpY2F0aW9ucyB0aGF0IGFsbG93IHByb2dyYW1tZXJzIGFuZCByZXNlYXJjaGVycyB0byBzaGFyZSBkb2N1bWVudHMgdGhhdCBpbmNsdWRlIGNvZGUsIGNoYXJ0cywgZXF1YXRpb25zLCBhbmQgZGF0YS4gSnVweXRlciBub3RlYm9va3MgYWxsb3cgZm9yIGNvZGUgd3JpdHRlbiBpbiBkb3plbnMgb2YgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzLiBGb3IgaGlzIHJlc2VhcmNoLCBSb21lciB1c2VkIFB5dGhvbuKAlHRoZSBtb3N0IHBvcHVsYXIgbGFuZ3VhZ2UgZm9yIGRhdGEgc2NpZW5jZSBhbmQgc3RhdGlzdGljcy48c3VwPjI8L3N1cD5cclxuPC9wPlxyXG48cD5UaGUgQm90dG9tIGxpbmUgaXMgdGhhdCB5ZXN0ZXJkYXkncyBpbmsgYW5kIHBhcGVyIGlzIHRvZGF5J3Mgc29mdHdhcmUgYW5kIGhhcmR3YXJlLS1lc3NlbnRpYWwgdG9vbHMgZm9yIHN1Y2Nlc3MsIHRoZSBlYXJsaWVyIHRoZSBiZXR0ZXIuIFNvLCBiZWNhdXNlIGhpc3RvcmljYWwgc3VwcHJlc3Npb24gdXN1YWxseSBiZWdpbnMgZmluYW5jaWFsbHksIGVxdWFsIGFjY2VzcyBhY3Jvc3Mgc29jaWFsIGFuZCBlY29ub21pYyBsaW5lcy4gIFNvLCB0aGUgZWNvbm9taWMgaW5jZW50aXZlIHRvIG91dGZpdCBldmVyeSBsYXN0IGNpdGl6ZW4gd2l0aCBmcmVlIHdpZmkgYW5kIG9wZW4tc291cmNlIHRlY2hub2xvZ3kuIEFscmVhZHksIHRoZSBiZXN0IGluIGh1bWFuaXR5LS10aGUgTm9iZWwgd2lubmVycy0ta25vdyB0aGUgcHVibGljIGluY2VudGl2ZSB0byBoYXJuZXNzIHRoZSBwb3dlciBvZiBhIHdpZGVzcHJlYWQgdGVjaCBlZHVjYXRpb24uIEJlY2F1c2Ugd2hlbiB0aGUgbWFueSBhbmQgbm90IHRoZSBmZXcgY3JlYXRlIGFuZCBhZHZhbmNlIHRlY2hub2xvZ3ksIHRoZSBlY29ub215IGJsb29tcyB3aXRoIHJlYWwgcHJvZHVjdGl2aXR5LjwvcD5cclxuICBgO1xyXG4gIHZhciAgYmxvZ2NpdGUxMD0gYCBcclxuPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3Lm5vYmVscHJpemUub3JnL3VwbG9hZHMvMjAxOC8xMC9wcmVzcy1lY29ub21pY3NjaWVuY2VzMjAxOC5wZGZcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3Lm5vYmVscHJpemUub3JnL3VwbG9hZHMvMjAxOC8xMC9wcmVzcy1lY29ub21pY3NjaWVuY2VzMjAxOC5wZGYgXHJcbjwvYT5cclxuPC9wPiAgXHJcbjxwIGNsYXNzPVwiY2l0ZVwiPiAyIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3F6LmNvbS8xNDE2ODY3L3RoZS0yMDE4LW5vYmVsLXByaXplLWluLWVjb25vbWljcy1nb2VzLXRvLXdpbGxpYW0tbm9yZGhhdXMtYW5kLXBhdWwtcm9tZXIvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS8xNDE2ODY3L3RoZS0yMDE4LW5vYmVsLXByaXplLWluLWVjb25vbWljcy1nb2VzLXRvLXdpbGxpYW0tbm9yZGhhdXMtYW5kLXBhdWwtcm9tZXIvXHJcbjwvYT5cclxuPC9wPiAgXHJcbiAgIGA7IFxyXG5cclxuICAgdmFyICBibG9ncG9zdDkgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkhhY2tlcm5vb24gZmVhdHVyZWQgSmFjayBEb3NzbWFuJ3MgdGFrZSBvbiB0aGUgYmFuYWxpdHkgb2YgYmxvY2tjaGFpbiB0ZWNobm9sb2d5IG91dHNpZGUgb2Ygc3BlY2lhbC11c2UgY2FzZXMuIERvc3NtYW4gb3BpbmVzLCBcIlVubGVzcyB5b3VyIGJ1c2luZXNzIG5lZWRzIGFsbCBvZiB0aGUgYmVuZWZpdHMgdGhhdCBhIGJsb2NrY2hhaW4gcHJvdmlkZXMsIHlvdSB3aWxsIGJlIG5vIGJldHRlciBvZmYgc3RvcmluZyB5b3VyIGRhdGEgb24gb25lLlwiIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+QnkgZGVmaW5pdGlvbiwgdGhlcmUgaXMgbm8gY2VudHJhbCBhdXRob3JpdHkgZ292ZXJuaW5nIGEgcHVibGljIGJsb2NrY2hhaW4sIHNvIHdobyBtYWtlcyBkZWNpc2lvbnMgaW4gdGhpcyBkaXN0cmlidXRlZCBjb21wYW55P1xyXG5cclxuICBXaGF0IGFib3V0IGRpc3B1dGUgcmVzb2x1dGlvbj8gT25jZSBkYXRhIGhhcyBiZWVuIHVwbG9hZGVkIGFuZCB2ZXJpZmllZCwgaXTigJlzIG5vdCBnb2luZyBhbnl3aGVyZS4gR290IGNoYXJnZWQgZm9yIGEgcmlkZSB5b3UgZGlkbuKAmXQgdGFrZT8gRHJpdmVyIGRpZCBzb21ldGhpbmcgcmVhbGx5IGJhZCB0aGF0IHlvdSBuZWVkIHRvIHJlcG9ydD8gV2VsbCB0b28gYmFkIGJlY2F1c2Ugbm9ib2R5IGlzIGxpc3RlbmluZy4gPHN1cD4xPC9zdXA+PC9wPlxyXG4gPHA+Tm93LCB0aGlzIGFydGljbGUgZ3Jvc3NseSB1bmRlcmVzdGltYXRlcyB0aGUgcmFuZ2Ugb2YgZGVzaWducyBmcm9tICBwcml2YXRlIGJsb2NrY2hhaW5zIHRvIGNvbnNvcnRpdW0gYmxvY2tjaGFpbnMsIGJ1dCB0aGUgcG9pbnQgYWJvdXQgaHlwZSBpcyB3ZWxsLW1hZGUhPC9wPlxyXG4gICAgYDtcclxuICAgIHZhciAgYmxvZ2NpdGU5PSBgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2hhY2tlcm5vb24uY29tLzEwLXRoaW5ncy1ibG9ja2NoYWluLWlzbnQtZGNiNzk2NmQyMmU1XCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2hhY2tlcm5vb24uY29tLzEwLXRoaW5ncy1ibG9ja2NoYWluLWlzbnQtZGNiNzk2NmQyMmU1IFxyXG4gIDwvYT5cclxuICA8L3A+ICBcclxuICAgICBgOyBcclxuICAgICB2YXIgICBibG9ncG9zdDggPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkludGVsbGVjdHVhbCBlc3Bpb25hZ2UgaXMgYWJvdXQgYXMgbmV3c3dvcnRoeSBhcyBhbnkgb3RoZXIgbWlzZ3VpZGVkIG5hdGlvbmFsaXN0IHByYWN0aWNlIGFjcm9zcyB0aGUgZ2xvYmUgZnJvbSBuZWFybHkgZXZlcnkgbmF0aW9uLS1pbiBzb21lIGZvcm0uIE1heWJlIGl0cyB0aGUgdWJpcXVpdHkgb2YgbWltaWNyeSB0aGF0IGV2ZW50cyBhcmUgcXVpY2tseSBmb3Jnb3R0ZW4uIEFuIDxpPm90aGVyLXdvcmxkIHByb2JsZW08L2k+LiBZZXQsIHRoaXMgaXMgbm90IG1lcmVseSBhIHJlZ2lvbmFsbHktYmFzZWQgbnVpc2FuY2UuIEZyb20gdGltZSBpbW1lbW9yaWFsLCBoZWFkbGluZXMgaGF2ZSByYWlzZWQgdGhlIHByb3NwZWN0IG9mIGFjYWRlbWljLCB1bml2ZXJzaXR5LWJhc2VkIGludGVsbGVjdHVhbCB0aGVmdC4gUmVsYXRlZCBldmVudHMgcmFpc2VkIGV5ZWJyb3dzIGFuZCB0aGVuIHF1aWNrbHkgZm9yZ290dGVuLiA8cD5UaGlzIHllYXIsIENoaW5lc2UtbWFkZSBzZXJ2ZXJzIGRpc2NvdmVyZWQgd2l0aCBhIG1pY3Jvc2NvcGljLCBlbWJlZGRlZCBjaGlwIG1heSBoYXZlIGJlZW4ga25vd24gYnkgQXBwbGUgdGhyZWUgeWVhcnMgYWdvLiBMYXN0IHdlZWssIEJsb29tYmVyZ3MgcmVwb3J0ZWQsIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IEJlaWppbmcncyBtaWxpdGFyeSBpbnRlbGxpZ2VuY2UgcHJlc3N1cmVkIG9yIGJyaWJlZCBhIENoaW5lc2UgbWFudWZhY3R1cmluZyBzdWJjb250cmFjdG9yIG9mIFVTLWJhc2VkIFN1cGVyIE1pY3JvIHRvIGluY2x1ZGUgYSBzbWFsbCBzZWNyZXQgc3B5IGNoaXAgaW4gdGhlIHNlcnZlciBtYWtlcidzIG1vdGhlcmJvYXJkcy4gVGhlIHN1cHBvc2VkbHkgZ3JhaW4tb2YtcmljZS1zaXplZCBjaGlwcyB3ZXJlIGluc2VydGVkIHRvIGdpdmUgQ2hpbmEgYSBiYWNrZG9vciBpbnRvIHRoZSBjb21wdXRlcnMsIGFsbG93aW5nIGRhdGEgdG8gYmUgc2lsZW50bHkgYWx0ZXJlZCBvciBzdG9sZW4gZnJvbSBhZmFyIGJ5IHRoZSBDaGluZXNlIGdvdmVybm1lbnQuIDxiciAvPlxyXG4gIDxiciAvPk9mIHRoZSAzMCBvciBzbyBvcmdhbml6YXRpb25zIHRoYXQgYXBwYXJlbnRseSByZWNlaXZlZCB0aGVzZSBidWdnZWQgbWFjaGluZXMsIHJhbmdpbmcgZnJvbSBhIG1ham9yIGJhbmsgdG8gVVMgZ292ZXJubWVudCBjb250cmFjdG9ycywgd2VyZSBBcHBsZSBhbmQgQW1hem9uLCBhY2NvcmRpbmcgdG8gQmxvb21iZXJnJ3Mgc291cmNlcy4gPHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxwPk1pc2NoaWVmIGluIGFsbCBmb3JtcyBwZXJ2YWRlcyBuZWFybHkgZXZlcnkgbmF0aW9ucycgYWdlbmRhICAuLi4gQWdhaW4sIGFwcGFyZW50bHksIHdobyByZW1lbWJlcnMgYSB3ZWVrIGFmdGVyd2FyZD88L3A+IFxyXG4gICAgYDtcclxuICAgIHZhciAgIGJsb2djaXRlOD0gYCBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cudGhlcmVnaXN0ZXIuY28udWsvMjAxOC8xMC8wOC9zdXBlcl9taWNyb191c191a19pbnRlbGxpZ2VuY2UvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy50aGVyZWdpc3Rlci5jby51ay8yMDE4LzEwLzA4L3N1cGVyX21pY3JvX3VzX3VrX2ludGVsbGlnZW5jZS8gXHJcbiAgPC9hPlxyXG4gIDwvcD4gPHAgY2xhc3M9XCJjaXRlXCI+IDIgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmNuYmMuY29tLzIwMTgvMTAvMDQvdXMtd2FybnMtY29tcGFuaWVzLWFib3V0LXNlY3VyaXR5LXJpc2stdG8tbWFuYWdlZC1zZXJ2aWNlLXByb3ZpZGVycy5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmJjLmNvbS8yMDE4LzEwLzA0L3VzLXdhcm5zLWNvbXBhbmllcy1hYm91dC1zZWN1cml0eS1yaXNrLXRvLW1hbmFnZWQtc2VydmljZS1wcm92aWRlcnMuaHRtbFxyXG4gIDwvYT5cclxuICA8L3A+ICA8cCBjbGFzcz1cImNpdGVcIj4zXHJcbiAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTA0L3doYXQtYS1tb290ZWQtY2hpbmVzZS13aXJlbGVzcy1tZWdhLW1lcmdlci1tZWFucy1mb3ItdGhlLTVnLXJhY2VcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTA0L3doYXQtYS1tb290ZWQtY2hpbmVzZS13aXJlbGVzcy1tZWdhLW1lcmdlci1tZWFucy1mb3ItdGhlLTVnLXJhY2VcclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gICAgIGA7IFxyXG4gICAgIHZhciAgICBibG9ncG9zdDcgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBUaGUgbGF0ZXN0IG5ld3Mgb2YgbWljcm9zY29waWMgZm9yZWlnbiBjaGlwcyBlbWJlZGRlZCBpbiBNaWNybyBTeXN0ZW1zIGNoaXBzIGZvciBoYXJkIGRyaXZlcyB0aGF0IGZpbmQgdGhlaXIgd2F5IGludG8gQW1hem9uLCBQZW50YWdvbiwgYW5kIG90aGVyIHNlcnZlcnMgaW4gYmV0d2VlbiBub3cgcmFpc2UgYSBuZXcgYXdhcmVuZXNzPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuIFRoZSBzcHkgY2hpcCBjb3VsZCBoYXZlIGJlZW4gcGxhY2VkIGVsZWN0cmljYWxseSBiZXR3ZWVuIHRoZSBiYXNlYm9hcmQgbWFuYWdlbWVudCBjb250cm9sbGVyIChCTUMpIGFuZCBpdHMgU1BJIGZsYXNoIG9yIHNlcmlhbCBFRVBST00gc3RvcmFnZSBjb250YWluaW5nIHRoZSBCTUMncyBmaXJtd2FyZS4gVGh1cywgd2hlbiB0aGUgQk1DIGZldGNoZWQgYW5kIGV4ZWN1dGVkIGl0cyBjb2RlIGZyb20gdGhpcyBtZW1vcnksIHRoZSBzcHkgY2hpcCB3b3VsZCBpbnRlcmNlcHQgdGhlIHNpZ25hbHMgYW5kIG1vZGlmeSB0aGUgYml0c3RyZWFtIHRvIGluamVjdCBtYWxpY2lvdXMgY29kZSBpbnRvIHRoZSBCTUMgcHJvY2Vzc29yLCBhbGxvd2luZyBpdHMgbWFzdGVycyB0byBjb250cm9sIHRoZSBCTUMuXHJcbiAgPHN1cD4xPC9zdXA+PC9wPiBcclxuICA8cD4gPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgc3B5IGNoaXAgY291bGQgaGF2ZSBiZWVuIHBsYWNlZCBlbGVjdHJpY2FsbHkgYmV0d2VlbiB0aGUgYmFzZWJvYXJkIG1hbmFnZW1lbnQgY29udHJvbGxlciAoQk1DKSBhbmQgaXRzIFNQSSBmbGFzaCBvciBzZXJpYWwgRUVQUk9NIHN0b3JhZ2UgY29udGFpbmluZyB0aGUgQk1DJ3MgZmlybXdhcmUuIFRodXMsIHdoZW4gdGhlIEJNQyBmZXRjaGVkIGFuZCBleGVjdXRlZCBpdHMgY29kZSBmcm9tIHRoaXMgbWVtb3J5LCB0aGUgc3B5IGNoaXAgd291bGQgaW50ZXJjZXB0IHRoZSBzaWduYWxzIGFuZCBtb2RpZnkgdGhlIGJpdHN0cmVhbSB0byBpbmplY3QgbWFsaWNpb3VzIGNvZGUgaW50byB0aGUgQk1DIHByb2Nlc3NvciwgYWxsb3dpbmcgaXRzIG1hc3RlcnMgdG8gY29udHJvbCB0aGUgQk1DLjxzdXA+Mzwvc3VwPjwvcD5cclxuICA8cD5JbiBzdW0sIHRoZSA8aT50aGUgdGltZXMsIHRoZXkgYXJlIC0gYSAtIGNoYW5naW5nPC9pPiBhbmQgdGhhdCBtZWFucywgbGlrZSBhbnkgdGVzdC10YWtlciBrbm93cywgY2hlYXRzaGVldHMgZG8gbW9yZSBkYW1hZ2UgaWYgdGhleSBmYWxsIGlycmVsZXZlbnQsIGV2ZW4gc2xpZ2h0bHkgZGVwcmVjYXRlZC4gIDwvcD4gXHJcbiAgICBgO1xyXG4gICAgdmFyICAgYmxvZ2NpdGU3PSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LnRoZXJlZ2lzdGVyLmNvLnVrLzIwMTgvMTAvMDgvc3VwZXJfbWljcm9fdXNfdWtfaW50ZWxsaWdlbmNlL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhlcmVnaXN0ZXIuY28udWsvMjAxOC8xMC8wOC9zdXBlcl9taWNyb191c191a19pbnRlbGxpZ2VuY2UvIFxyXG4gIDwvYT5cclxuICA8L3A+IFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjJcclxuICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9rYWxldmxlZXRhcnUvMjAxOC8xMC8wNC90aGUtY2hpbmVzZS1zcHktY2hpcC1zdG9yeS1pcy1hLXJlbWluZGVyLW9mLWhvdy1pbnNlY3VyZS1vdXItZGlnaXRhbC13b3JsZC1yZWFsbHktaXMvIzE3MzZmMGYwN2UxM1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuZm9yYmVzLmNvbS9zaXRlcy9rYWxldmxlZXRhcnUvMjAxOC8xMC8wNC90aGUtY2hpbmVzZS1zcHktY2hpcC1zdG9yeS1pcy1hLXJlbWluZGVyLW9mLWhvdy1pbnNlY3VyZS1vdXItZGlnaXRhbC13b3JsZC1yZWFsbHktaXMvIzE3MzZmMGYwN2UxM1xyXG4gIDwvYT5cclxuICA8L3A+IFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjNcclxuICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDktMDQvd2hhdC1hLW1vb3RlZC1jaGluZXNlLXdpcmVsZXNzLW1lZ2EtbWVyZ2VyLW1lYW5zLWZvci10aGUtNWctcmFjZVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDktMDQvd2hhdC1hLW1vb3RlZC1jaGluZXNlLXdpcmVsZXNzLW1lZ2EtbWVyZ2VyLW1lYW5zLWZvci10aGUtNWctcmFjZVxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICAgYDsgXHJcbiAgICAgdmFyICAgYmxvZ3Bvc3Q2ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5MYXN0IG1vbnRoJ3MgPGk+VGVjaGNydW5jaCBEaXNydXB0ITwvaT4gcmV2ZWFsZWQgaWYgb25seSBhIGZldyBpbW1pbmVudCBibG9ja2NoYWluIHRyZW5kcyB0byBwYXkgYXR0ZW50aW9uIHRvOiBUaGUgY3J5cHRvLWN1cnJlbmN5IGFuZCBpbnZlc3RtZW50IGlzIGRlZmluaXRlbHkgdGFtcGVkIGRvd24sIGFuZCBub3cgdGhlIGZpZWxkIG9mIHBsYXkgaXMgbm8gbG9uZ2VyIGJldHdlZW4gY29tcGV0aW5nIHBsYXRmb3JtcywgYnV0IHJhdGhlciB0aGUgREFQUFMgYXJlIG5vdyB0aGUgcGxheWVycyBvbiB0aGUgZXN0YWJsaXNoZWQgcGxhdGZvcm1zLS1zdGFydGluZyB3aXRoIEV0aGVyZXVtIGNyeXB0by1jb250cmFjdHMsIGJyb3dzZXItYmFzZWQgcGxhdGZvcm1zIGxpa2UgTWlzdCBhbmQgb3RoZXIgcGxheWVycy4gPGk+VGhlIHRydXN0IGFuZCBkaXJlY3Rpb24gaXMgbm8gbG9uZ2VyIGluIGRpc3B1dGUtLW5vdywgdGhlIHF1ZXN0aW9uIGFza3M6IFdobyBjYW4gbGV2ZXJhZ2UgZWFzZS1vZi11c2UgYW5kIGFjY2Vzc2liaWxpdHkgYW5kICB1dGlsaXR5IHZpYSB0aGUgd2ViIGJyb3dzZXIgLi4uIEFmdGVyIGFsbCwgaXNuJ3QgdGhlIHBvaW50IG9mIHRlY2ggYWR2YW5jZW50cywgdG8gYnJpbmcgYWJvdXQgbmV3IHBvc3NpYmlsaXRpZXMsIGFuZCAgdGhlIHRpbWUgdG8gZXhwbG9yZSB0aGVtIGJ5IGFsc28gcHJvdmlkaW5nIGVmZmljaWVudCBsaXZpbmchIDwvcD5cclxuICAgXHJcbiAgICBgO1xyXG4gICAgdmFyICAgYmxvZ2NpdGU2PSBgICBcclxuICAgICBgOyBcclxuICAgICB2YXIgICBibG9ncG9zdDUgPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRydXN0LCB0cnVzdCBsYXllcnMsIGFuZCBpbnN0aXR1dGlvbnMgb2YgVHJ1c3R3b3J0aGluZXNzOiBUaGUgcXVhaW50LCA8aT5MZWF2ZS1pdC10by1CZWF2ZXIgdGVybXMgb2YgYSBieS1nb25lIHdvcmxkPC9pPiBoYXZlbid0IHdlYWtlbmVkIGJ1dCBhcmUgdHJhbnNmb3JtZWQ6IFdoYXQgd2FzIG9uY2UgYSByaWdpZCBoaWVyYXJjaHkgb2YgdHJ1c3QgcHJvY2xhbWF0aW9ucyBmcm9tIGFib3ZlIGFyZSBub3cgZmxleGlibGUsIGNvbnRpbnVhbGx5LWVhcm5lZCwgY29tbXVuaXR5LWJhc2VkIHRydXN0IG5ldHdvcmtzLiBTbG93bHkgYnV0IHN1cmVseSw8aT5Db21tdW5pdHktY2VudGVyZWQgbmV0d29ya3MgbWFkZSBvZiBzb2NpYWwgY2FwaXRhbCBvdmVydGFrZSBpbnN0aXR1dGlvbmFsLCBidXJlYXVjcmF0aWMgY2FwaXRhbCBhbmQgY3JlZGVudGlhbGlzbS4gPC9pPjwvcD48cCBjbGFzcz1cInF1b3RlXCI+VGhpcyBpcyB0aGUgd2hvbGUgaXNzdWUuIFRoaXMgaXMgZXZlcnl0aGluZyB0aGF0IHdlJ3JlIHRhbGtpbmcgYWJvdXQuIEFuZCBob3cgZG8geW91IHRydXN0IHNvbWV0aGluZyB0aGF0IGNhbiBwdWxsIHRoZXNlIHNpZ25hbHMgb2ZmIG9mIHlvdT8gPGJyIC8+PGJyIC8+SWYgYSBzeXN0ZW0gaXMgYXN5bW1ldHJpY+KAlGlmIHlvdSBrbm93IG1vcmUgYWJvdXQgbWUgdGhhbiBJIGtub3cgYWJvdXQgbXlzZWxmLCB3ZSB1c3VhbGx5IGhhdmUgYSBuYW1lIGZvciB0aGF0IGluIGxhdy4gU28sIGZvciBleGFtcGxlLCB3aGVuIHlvdSBkZWFsIHdpdGggYSBsYXd5ZXIsIHlvdSBoYW5kIG92ZXIgeW91ciB2ZXJ5IHBlcnNvbmFsIGRldGFpbHMgdG8gYSBsYXd5ZXIgc28gdGhleSBjYW4gaGVscCB5b3UuIEJ1dCB0aGVuIHRoZXkgaGF2ZSB0aGlzIGtub3dsZWRnZSBvZiB0aGUgbGF3IGFuZCB0aGV5IGtub3cgYWJvdXQgeW91ciB2dWxuZXJhYmxlIGluZm9ybWF0aW9uLCBzbyB0aGV5IGNvdWxkIGV4cGxvaXQgeW91IHdpdGggdGhhdC4gSW1hZ2luZSBhIGxhd3llciB3aG8gdG9vayBhbGwgb2YgdGhhdCBwZXJzb25hbCBpbmZvcm1hdGlvbiBhbmQgc29sZCBpdCB0byBzb21lYm9keSBlbHNlLiBCdXQgdGhleSdyZSBnb3Zlcm5lZCBieSBhIGRpZmZlcmVudCByZWxhdGlvbnNoaXAsIHdoaWNoIGlzIHRoZSBmaWR1Y2lhcnkgcmVsYXRpb25zaGlwLiBUaGV5IGNhbiBsb3NlIHRoZWlyIGxpY2Vuc2UgaWYgdGhleSBkb24ndCBhY3R1YWxseSBzZXJ2ZSB5b3VyIGludGVyZXN0LiBBbmQgc2ltaWxhcmx5IGEgZG9jdG9yIG9yIGEgcHN5Y2hvdGhlcmFwaXN0LlxyXG4gIDxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD5XaGV0aGVyIGJ5IGNvaW5jaWRlbmNlIG9yIGlubmF0ZSBmZWF0dXJlcyBvZiAyMXN0IGNlbnR1cnkgdGVjaG5vbG9neSwgdHJ1c3QtYmFzZWQgcGxhdGZvcm1zIGlubmF0ZWx5IHJld2FyZCBzaGFyaW5nLCB0cnVzdC1iYXNlZCBkaXN0cmlidXRpb24gb2YgcG93ZXIuIENvbnNpZGVyIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGRlbW9jcmF0aWNhbGx5IG9wZXJhdGVkIGJsb2NrY2hhaW4sIGkuZS4gZGlzdHJpYnV0ZWQgbGVkZ2VycyB3aXRob3V0IG1pZGRsZS1wZXJzb25zLCB2ZXJzdXMgaGllcmFyY2hpY2FsLCBzaWxvZWQgY2VudGVycyBvZiBpbmZvcm1hdGlvbi4gQXMgdXN1YWwsIHRoZSBwcm9ibGVtcyB0aGF0IHRlY2hub2xvZ3kgcHJlc2VudCBpbiBvbmUgZm9ybSBhcmUgc3ltbWV0cmljYWxseSByZXNvbHZlZCBieSBhIHRlY2hub2xvZ3kgb2YgYW5vdGhlciBmb3JtLmA7XHJcbiAgdmFyICBibG9nY2l0ZTUgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlLXl1dmFsLW5vYWgtaGFyYXJpLXRyaXN0YW4taGFycmlzL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2FydGlmaWNpYWwtaW50ZWxsaWdlbmNlLXl1dmFsLW5vYWgtaGFyYXJpLXRyaXN0YW4taGFycmlzLzwvYT5cclxuICA8L3A+IFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjI8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L291ci1taW5kcy1oYXZlLWJlZW4taGlqYWNrZWQtYnktb3VyLXBob25lcy10cmlzdGFuLWhhcnJpcy13YW50cy10by1yZXNjdWUtdGhlbS9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9vdXItbWluZHMtaGF2ZS1iZWVuLWhpamFja2VkLWJ5LW91ci1waG9uZXMtdHJpc3Rhbi1oYXJyaXMtd2FudHMtdG8tcmVzY3VlLXRoZW0vXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgICBgO1xyXG4gICAgIHZhciAgYmxvZ3Bvc3Q0ID0gYDxwIGNsYXNzPVwicXVvdGVcIj48aT5CdXQgZXZlcnl3aGVyZSB5b3UgdHVybiBvbiB0aGUgaW50ZXJuZXQgdGhlcmUncyBiYXNpY2FsbHkgYSBzdXBlcmNvbXB1dGVyIHBvaW50aW5nIGF0IHlvdXIgYnJhaW4sIHBsYXlpbmcgY2hlc3MgYWdhaW5zdCB5b3VyIG1pbmQsIGFuZCBpdCdzIGdvaW5nIHRvIHdpbiBhIGxvdCBtb3JlIG9mdGVuIHRoYW4gbm90LjwvaT48c3VwPjE8L3N1cD48L3A+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkZpcnN0IG9mZiwgd2hhdCBpcyBIdW1hbmUgVGVjaG5vbG9neT8gQmVzaWRlcyBhIHBoaWxvc29waHkgdGhhdCBkaXNzaXBhdGVzLCBhIHByYWN0aWNhbCBwaGlsb3NvcGh5IG9ubHkgZ2FpbnMgZm9jdXMtLWZhciBtb3JlIHZhbHVhYmxlIHRoYW4gZGVwdGggb3IgYnJlYWR0aC4gTXVjaCBtb3JlIHRoYW4gYSByZWFsIERlcyBDYXJ0ZXMgbWVldHMgYW4gaVBob25lLCB3aG9zZSBmb2N1cyBpcyBvbiBcInJlYWxpZ25pbmcgdGVjaG5vbG9neSB3aXRoIGEgY2xlYXItZXllZCBtb2RlbCBvZiBodW1hbiBuYXR1cmVcIi48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkJlY2F1c2Ugd2UgaGF2ZSBidWlsdCBvdXIgc29jaWV0eSwgY2VydGFpbmx5IGxpYmVyYWwgZGVtb2NyYWN5IHdpdGggZWxlY3Rpb25zIGFuZCB0aGUgZnJlZSBtYXJrZXQgYW5kIHNvIGZvcnRoLCBvbiBwaGlsb3NvcGhpY2FsIGlkZWFzIGZyb20gdGhlIDE4dGggY2VudHVyeSB3aGljaCBhcmUgc2ltcGx5IGluY29tcGF0aWJsZSBub3QganVzdCB3aXRoIHRoZSBzY2llbnRpZmljIGZpbmRpbmdzIG9mIHRoZSAyMXN0IGNlbnR1cnkgYnV0IGFib3ZlIGFsbCB3aXRoIHRoZSB0ZWNobm9sb2d5IHdlIG5vdyBoYXZlIGF0IG91ciBkaXNwb3NhbC48YnIgLz48YnIgLz5cclxuICAgT3VyIHNvY2lldHkgaXMgYnVpbHQgb24gdGhlIGlkZWFzIHRoYXQgdGhlIHZvdGVyIGtub3dzIGJlc3QsIHRoYXQgdGhlIGN1c3RvbWVyIGlzIGFsd2F5cyByaWdodCwgdGhhdCB1bHRpbWF0ZSBhdXRob3JpdHkgaXMsIGFzIFRyaXN0YW4gc2FpZCwgaXMgd2l0aCB0aGUgZmVlbGluZ3Mgb2YgaHVtYW4gYmVpbmdzIGFuZCB0aGlzIGFzc3VtZXMgdGhhdCBodW1hbiBmZWVsaW5ncyBhbmQgaHVtYW4gY2hvaWNlcyBhcmUgdGhlc2Ugc2FjcmVkIGFyZW5hIHdoaWNoIGNhbm5vdCBiZSBoYWNrZWQsIHdoaWNoIGNhbm5vdCBiZSBtYW5pcHVsYXRlZC4gVWx0aW1hdGVseSwgbXkgY2hvaWNlcywgbXkgZGVzaXJlcyByZWZsZWN0IG15IGZyZWUgd2lsbCBhbmQgbm9ib2R5IGNhbiBhY2Nlc3MgdGhhdCBvciB0b3VjaCB0aGF0LiBBbmQgdGhpcyB3YXMgbmV2ZXIgdHJ1ZS4gQnV0IHdlIGRpZG4ndCBwYXkgYSB2ZXJ5IGhpZ2ggY29zdCBmb3IgYmVsaWV2aW5nIGluIHRoaXMgbXl0aCBpbiB0aGUgMTl0aCBhbmQgMjB0aCBjZW50dXJ5IGJlY2F1c2Ugbm9ib2R5IGhhZCBhIHRlY2hub2xvZ3kgdG8gYWN0dWFsbHkgZG8gaXQuIE5vdywgcGVvcGxl4oCUc29tZSBwZW9wbGXigJRjb3Jwb3JhdGlvbnMsIGdvdmVybm1lbnRzIGFyZSBnYW1pbmcgdGhlIHRlY2hub2xvZ3kgdG8gaGFjayBodW1hbiBiZWluZ3MuIE1heWJlIHRoZSBtb3N0IGltcG9ydGFudCBmYWN0IGFib3V0IGxpdmluZyBpbiB0aGUgMjFzdCBjZW50dXJ5IGlzIHRoYXQgd2UgYXJlIG5vdyBoYWNrYWJsZSBhbmltYWxzLjxzdXA+Mjwvc3VwPjwvcD4gXHJcbiAgIDxwPkJ1dCB0aGlzIGlzbid0IHNvbWUgbmV3IHRoaW5nLiBCeSBhZGFwdGluZyB0byB0aGUgbmV3IHRvdWNoc3RvbmUsIG9uIGEgc29jaWV0YWwgbGV2ZWwsIHRoZSB0ZWNobm9sb2d5IGJlYXJzIG5vIG1vcmUgdGhyZWF0IHRoYW4gdGhlIG5vdmVsIHRlbGV2aXNpb24gYWQgY2FtcGFpZ25zIG9mIHRoZSAxOTUwJ3MtLVNvbWUgdmlld2VycyBiZWNhbWUgYnJhaW4td2FzaGVkLCBidXQgbm90IGFsbCEgU28gbGlrZSBCZWJlIFJleGhhIHRlYWNoZXMgdXM6IDxpPk5vIGJyb2tlbiBoZWFydHMgaW4gdGhlIGNsdWIgdG9uaWdodCwgbm8gdGVhcnMgaW4gdGhlIGNsdWIgLi4uIFdlIG9ubHkgZ290IG9uZSBsaWZlIHNvIGxldCdzIGdvIGhhcmQgdW50aWwgdGhlIGRheSB3ZSBkaWUhXCI8L2k+PC9wPlxyXG4gIGA7XHJcbiAgdmFyICAgYmxvZ2NpdGU0ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPmh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hcnRpZmljaWFsLWludGVsbGlnZW5jZS15dXZhbC1ub2FoLWhhcmFyaS10cmlzdGFuLWhhcnJpcy8gPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hcnRpZmljaWFsLWludGVsbGlnZW5jZS15dXZhbC1ub2FoLWhhcmFyaS10cmlzdGFuLWhhcnJpcy8gXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICA8L2E+XHJcbiAgPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvb3VyLW1pbmRzLWhhdmUtYmVlbi1oaWphY2tlZC1ieS1vdXItcGhvbmVzLXRyaXN0YW4taGFycmlzLXdhbnRzLXRvLXJlc2N1ZS10aGVtLzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvb3VyLW1pbmRzLWhhdmUtYmVlbi1oaWphY2tlZC1ieS1vdXItcGhvbmVzLXRyaXN0YW4taGFycmlzLXdhbnRzLXRvLXJlc2N1ZS10aGVtL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICBgO1xyXG4gIHZhciAgYmxvZ3Bvc3QzID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICBUaGVyZSB3YXMgYSB0aW1lIGZvciBTZWluZmVsZGlhbiBDb2ZmZWUgaW4gQ2Fycywgd2hlbiB0aGUgY29tcGFueSBtYWtlcyBmb3IgdGhlIHJpZGUuICBUb2RheSwgdGhlIHJpZGUgbWFrZXMgZm9yIHRoZSBjb21wYW55LCBhbGJlaXQgYnkgcmVhbC10aW1lIFNreXBlIGFuZCByZWFsLXRpbWUgaW5mby10YWlubWVudC4gU28gaWYgeW91IGhhdmUgYW4gZXh0cmEgJDYwLDAwMCBsYXlpbmcgYXJvdW5kLCBoZXJlJ3MgdGhlIGZ1dHVyZS0tdGhpcyBvbmUgYnkgQk1XIC4uLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlcmUncyBhbHNvIGEgbmV3IHJlY29uZmlndXJhYmxlIGRpZ2l0YWwgZ2F1Z2UgY2x1c3RlciB0aGF0IEJNVyBjYWxscyBMaXZlIENvY2twaXQsIGFuZCBhbiBpbXByZXNzaXZlbHkgaHVnZSBhbmQgY3Jpc3Agb3B0aW9uYWwgaGVhZC11cCBkaXNwbGF5IHRvIHJlbGF5IGV2ZW4gbW9yZSBpbmZvcm1hdGlvbiAuLi4gQmVpbmcgZmFjZWQgd2l0aCBhbGwgb2YgdGhvc2Ugc2NyZWVucyBhbmQgYWxsIG9mIHRob3NlIGNob2ljZXMgYXQgb25jZSBwcm9iYWJseSBzb3VuZHMgZGF1bnRpbmcsIGJ1dCBpbiBteSBicmllZiBleHBlcmllbmNlIHdpdGggaURyaXZlIDcsIGl0IGFsbCBmZWx0IHF1aXRlIGludHVpdGl2ZS4gVGhlIHN5c3RlbSBzbWFydGx5IGFsbG93cyBmb3IgdGhlIGRyaXZlciB0byB1c2UgdGhlaXIgcHJlZmVycmVkIGludGVyZmFjZSBtZXRob2QsIGJlIHRoYXQgdmlhIHRvdWNoc2NyZWVuLCBzdGVlcmluZyB3aGVlbCBzd2l0Y2hnZWFyLCBjbG91ZC1iYXNlZCBzcGVlY2ggcmVjb2duaXRpb24gb3IgZXZlbiBnZXN0dXJlIGNvbnRyb2wuIChBIHdvcmQgYWJvdXQgdGhlIGxhdHRlcjogSXQncyBzdGlsbCBvdmVyd2hlbG1pbmdseSBnaW1taWNreS4gVHdpcmxpbmcgeW91ciBmaW5nZXIgaW4gdGhlIGFpciB0byB0dXJuIHVwIHRoZSBzdGVyZW8gcmVtYWlucyBhIGNyb3dkLXBsZWFzaW5nIG5vdmVsdHksIGJ1dCBsaXR0bGUgbW9yZSkuIDxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD48L3A+YDtcclxuICB2YXIgICAgYmxvZ2NpdGUzID0gYCAgPHAgY2xhc3M9XCJjaXRlXCI+MVxyXG4gIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL3d3dy5jbmV0LmNvbS9yb2Fkc2hvdy9yZXZpZXdzLzIwMTktYm13LXg1LXByZXZpZXcvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9yb2Fkc2hvdy9yZXZpZXdzLzIwMTktYm13LXg1LXByZXZpZXcvXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICBgO1xyXG5cclxuICB2YXIgICBibG9ncG9zdDIgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPlRoZSB3aXJlbGVzcyBzdGFuZGFyZCBrbm93biBhcyA0RyBoYXMgdW50ZXRoZXJlZCB1cyBmcm9tIG91ciBsaXZpbmcgcm9vbXMgYW5kIG9mZmljZXMsIGFsbG93aW5nIHVzIHRvIG5hdmlnYXRlIHVuZmFtaWxpYXIgcm9hZHMgYW5kIHN0cmVldHMgdXNpbmcgdm9pY2UgZGlyZWN0aW9ucyBmcm9tIEdvb2dsZSBNYXBzLCBzdHJlYW0gbW92aWVzIG9uIE5ldGZsaXggd2hpbGUgY29tbXV0aW5nIHRvIHdvcmssIGFuZCBpbnRlcnZpZXcgYSBwcm9zcGVjdGl2ZSBoaXJlIG9uIEZhY2VUaW1lIGR1cmluZyBhIGZsaWdodCBsYXlvdmVyLiBUaGUgbmV4dCBpdGVyYXRpb24gcHJvbWlzZXMgdG8gYmUgZXZlbiBtb3JlIHRyYW5zZm9ybWF0aXZlLCBiZWNhdXNlIGl0IHdpbGwgc3VwcG9ydCBjb21tdW5pY2F0aW9uIGFtb25nIG9iamVjdHMsIGFzIHdlbGwgYXMgcGVvcGxlLiAgXHJcbiAgPC9pPjxzdXA+MSA8L3N1cD48L3A+XHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiA8L3A+XHJcbiAgPGltZyBzcmM9XCJkaXN0L2ltZy81ZzRnLmpwZ1wiIGNsYXNzPVwiem9vbVwiIC8+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEZpcnN0LCBwcm92aWRlcnMgbmVlZCBhIGZpbmFsIHNldCBvZiB0ZWNobm9sb2d5IHN0YW5kYXJkcy4gVGhlIGdsb2JhbCBib2R5IHNldHRpbmcgdGhlbSwgdGhlIDNyZCBHZW5lcmF0aW9uIFBhcnRuZXJzaGlwIFByb2plY3QsIHJlbGVhc2VkIHRoZSBmaXJzdCA1RyBzcGVjaWZpY2F0aW9ucyBpbiBKdW5lOyB0aGUgbmV4dCBzZXQgb2Ygc3RhbmRhcmRzIGlzIGR1ZSBpbiAyMDIwLiAoVGhlIDNHUFAsIGEgY29sbGFib3JhdGlvbiBiZXR3ZWVuIHNldmVuIHRlbGVjb21tdW5pY2F0aW9ucyBvcmdhbml6YXRpb25zLCBhbHNvIHNldCBzdGFuZGFyZHMgZm9yIDNHIGFuZCA0RyBMVEUgbW9iaWxlIHN5c3RlbXMuKSA1RyBtb2JpbGUgdGVzdHMgYWxzbyBuZWVkIHNwZWNpYWwgaGFuZHNldHMsIHRyYW5zbWlzc2lvbiBoYXJkd2FyZSBhbmQgc29mdHdhcmUgYW5kIGEgc3lzdGVtIGRlc2lnbiB0aGF0IGRvZXNu4oCZdCBpbnRlcmZlcmUgd2l0aCA0RyBhbmQgM0cgbmV0d29ya3MuIEFuZCBnb3Zlcm5tZW50cyBuZWVkIHRvIHNldCBhc2lkZSBtb2JpbGUgc3BlY3RydW0gc3BhY2UgZm9yIDVHLjwvcD5cclxuICAgIGA7XHJcbiAgICB2YXIgICBibG9nY2l0ZTIgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+ICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTctMDItMTYvdG9tb3Jyb3ctcy1jZWxsdWxhci1uZXR3b3Jrcy13aWxsLWdlbmVyYXRlLTMtNS10cmlsbGlvbi1pbi1lY29ub21pYy1vdXRwdXRcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE3LTAyLTE2L3RvbW9ycm93LXMtY2VsbHVsYXItbmV0d29ya3Mtd2lsbC1nZW5lcmF0ZS0zLTUtdHJpbGxpb24taW4tZWNvbm9taWMtb3V0cHV0XHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTE3L3doZW4td2lsbC11bHRyYWZhc3QtaW50ZXJuZXQtY29tZS10by15b3VyLXBob25lLXF1aWNrdGFrZVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuYmxvb21iZXJnLmNvbS9uZXdzL2FydGljbGVzLzIwMTgtMDktMTcvd2hlbi13aWxsLXVsdHJhZmFzdC1pbnRlcm5ldC1jb21lLXRvLXlvdXItcGhvbmUtcXVpY2t0YWtlXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgIGA7XHJcblxyXG4gICAgdmFyICAgIGJsb2dwb3N0MSA9IGA8cCBjbGFzcz1cInF1b3RlXCI+PGk+SXQncyB0aGUgbmV4dCAoZmlmdGgpIGdlbmVyYXRpb24gb2YgY2VsbHVsYXIgdGVjaG5vbG9neSB3aGljaCBwcm9taXNlcyB0byBncmVhdGx5IGVuaGFuY2UgdGhlIHNwZWVkLCBjb3ZlcmFnZSBhbmQgcmVzcG9uc2l2ZW5lc3Mgb2Ygd2lyZWxlc3MgbmV0d29ya3MuIEhvdyBmYXN0IGFyZSB3ZSB0YWxraW5nIGFib3V0PyBUaGluayAxMCB0byAxMDAgdGltZXMgc3BlZWRpZXIgdGhhbiB5b3VyIHR5cGljYWwgY2VsbHVsYXIgY29ubmVjdGlvbiwgYW5kIGV2ZW4gZmFzdGVyIHRoYW4gYW55dGhpbmcgeW91IGNhbiBnZXQgd2l0aCBhIHBoeXNpY2FsIGZpYmVyLW9wdGljIGNhYmxlIGdvaW5nIGludG8geW91ciBob3VzZS4gIFxyXG4gIDwvaT48c3VwPjEgPC9zdXA+PC9wPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj41RyBidWlsZHMgYW50aWNpcGF0aW9uIGZvciB0aGUgaW1taW5lbnQgdGVjaCByZXZvbHV0aW9uLCBidXQgd2hvJ3MgcGF5aW5nIGF0dGVudGlvbj8gV2hhdCdzIHRoZSBwb2ludCBiZXNpZGVzIGluY29tcGFyYWJsZSBzcGVlZD8gSXQncyBub3Qgc3BlZWQsIHdoaWNoIGlzIGEgc2VxdWVudGlhbCwgeWVzdGVyZGF5IHRlcm07IFplcm8gbGF0ZW5jeSBtZWFucyBldmVyeXRoaW5nIGFsbCBhdCBvbmNlLCBjb21pbmcgYW5kIGdvaW5nOiA8aT5MYXRlbmN5IGlzIHRoZSBwcmltYXJ5IGVsZW1lbnQgdGhhdCByZWFsbHkgdXNoZXJzIGluIHRoZSBuZXcgYWdlLCB3aGVyZSBvbmxpbmUsIGludGVybmV0IGNvbm5lY3Rpb24gZXNjYXBlcyBmcm9tIGhvbWUgYW5kIG9mZmljZSBub2RlcyBpbnRvIHRoZSB2ZXJ5IGxpbmtzIGluIGJldHdlZW4hPC9pPlMgVGhhdCBzZWVtcyBpbmNvbnZlbmllbnQgYW5kIGZsZWV0aW5nIGJ1dCByZWFsbHksIHNob3VsZG4ndCB0aGUgd2ViIGZvbGxvdyB1cyBpbiBhY3Rpb24sIHJhdGhlciB0aGFuIGNoYWluIHVzIGRvd24/IENvbnNpZGVyIHRoZSB3b3JsZCBvZiBpbnN0YW50YW5vdXMgcmVxdWVzdC1yZXNwb25zZXMgLi4uLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgTGF0ZW5jeSBpcyB0aGUgcmVzcG9uc2UgdGltZSBiZXR3ZWVuIHdoZW4geW91IGNsaWNrIG9uIGEgbGluayBvciBzdGFydCBzdHJlYW1pbmcgYSB2aWRlbyBvbiB5b3VyIHBob25lLCBzZW5kaW5nIHRoZSByZXF1ZXN0IHVwIHRvIHRoZSBuZXR3b3JrLCBhbmQgd2hlbiB0aGUgbmV0d29yayByZXNwb25kcyBhbmQgZ2l2ZXMgeW91IHlvdXIgd2Vic2l0ZSBvciBzdGFydHMgcGxheWluZyB5b3VyIHZpZGVvLiBcclxuVGhhdCBsYWcgdGltZSBjYW4gbGFzdCBhcm91bmQgMjAgbWlsbGlzZWNvbmRzIHdpdGggY3VycmVudCBuZXR3b3Jrcy4gSXQgZG9lc24ndCBzZWVtIGxpa2UgbXVjaCwgYnV0IHdpdGggNUcsIHRoYXQgbGF0ZW5jeSBnZXRzIHJlZHVjZWQgdG8gMSBtaWxsaXNlY29uZCwgb3IgYWJvdXQgdGhlIHRpbWUgaXQgdGFrZXMgZm9yIGEgZmxhc2ggaW4gYSBub3JtYWwgY2FtZXJhIHRvIGZpbmlzaC4gIFxyXG5UaGF0IHJlc3BvbnNpdmVuZXNzIGlzIGNyaXRpY2FsIGZvciB0aGluZ3MgbGlrZSBwbGF5aW5nIGFuIGludGVuc2UgdmlkZW8gZ2FtZSBpbiB2aXJ0dWFsIHJlYWxpdHkgb3IgZm9yIGEgc3VyZ2VvbiBpbiBOZXcgWW9yayB0byBjb250cm9sIGEgcGFpciBvZiByb2JvdGljIGFybXMgcGVyZm9ybWluZyBhIHByb2NlZHVyZSBpbiBTYW4gRnJhbmNpc2NvLjwvcD48cD5cclxuQ29tY2FzdCB5ZXN0ZXJkYXkgYW5kIFQtTW9iaWxlIFRvbW9ycm93IG9yIG5vdCwgdGhlIGltcGxpY2F0aW9ucyBvZiBhIHRydWx5IG1vYmlsZSBpbnRlcm5ldCBjb3VsZG4ndCBiZSB1bmRlcmVzdGltYXRlZC4gV2hhdCB1c2VkIHRvIGJlIGEgc2Vuc29yIGlzIHRvbW9ycm93J3MgY29udHJvbGxlciwgYW5kIHRvZGF5J3MgY29udHJvbGxlcnMgYmVjb21lIHNlbnNvcnMsIGJlY2F1c2Ugc291cmNlIGFuZCB0YXJnZXQgYmVjb21lIGlycmVsZXZhbnQgY29uY2VwdHMgd2hlbiBsYXRlbmN5IGZvbGRzIHVuaS1kaXJlY3Rpb25hbCB3YWl0LXRpbWUgaW50byBiaS1kaXJlY3Rpb25hbCBjb25jdXJyZW50IGNvbW11bmljYXRpb24uIDwvcD48cD5QZXJoYXBzIHRoZSBjZW50cmFsIHBsYXllciBpbiB0aGlzIHJldm9sdXRpb24gaXMgdGhlIGZhc3QtZGV2ZWxvcGluZyBpbnRlcm5ldC1vZi10aGluZ3MgaW5mcmFzdHJ1Y3R1cmUgaW4gZnVsbCBkZXZlbG9wbWVudC0td2l0aCBhIG1vdmluZyB0YXJnZXQgLi4uPC9wPiAgICBgO1xyXG52YXIgICBibG9nY2l0ZTEgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+ICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vaG93LXRvL3RoZS01Zy1yZXZvbHV0aW9uLWlzLWNvbWluZy1oZXJlcy1ldmVyeXRoaW5nLXlvdS1uZWVkLXRvLWtub3cvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5jbmV0LmNvbS9ob3ctdG8vdGhlLTVnLXJldm9sdXRpb24taXMtY29taW5nLWhlcmVzLWV2ZXJ5dGhpbmcteW91LW5lZWQtdG8ta25vdy9cclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gICAgYDtcclxuIFxyXG5cclxuICAgICAgdmFyIHVybCA9IFtcclxuICAgICAgICBcclxuICAgICAge1xyXG4gICAgICAgIGlkOiAnMjInLFxyXG4gICAgICAgIGRpZDogJzEwLTI1LTE4JyxcclxuICAgICAgICBkYXRlOiAnT2N0b2JlciAyNSwgMjAxOCAnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgdGl0bGU6ICdEYXRhIHRoYXQgZ29lcyB1cCBtdXN0IFN0YXkgVXAnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MjIsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMjJcclxuICAgICAgfSwgIFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6ICcyMScsXHJcbiAgICAgICAgZGlkOiAnMTAtMjQtMTgnLFxyXG4gICAgICAgIGRhdGU6ICdPY3RvYmVyIDI0LCAyMDE4ICcsXHJcbiAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgIHRpdGxlOiAnTWV0YS1NYXRlcmlhbHMsIFBhcnQgSUkgPGJyIC8+T25lLCBUd28sIFRocmVlLCBGb3VyLS1OYW5vcGhvdG9uaWMgTWV0YW1hdGVyaWFscyBhbmQgTW9yZScsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QyMSxcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMVxyXG4gICAgICB9LCBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzIwJyxcclxuICAgICAgICAgIGRpZDogJzEwLTIzLTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdPY3RvYmVyIDIzLCAyMDE4ICcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgICAgICB0aXRsZTogJ01ldGEtTWF0ZXJpYWxzLCBQYXJ0IEkgPGJyIC8+TWF0ZXJpYWwgU2NpZW5jZScsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDIwLFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMjBcclxuICAgICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxOScsXHJcbiAgICAgICAgICBkaWQ6ICcxMC0yMi0xOCcsXHJcbiAgICAgICAgICBkYXRlOiAnT2N0b2JlciAyMiwgMjAxOCAnLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICB0aXRsZTogJ1RoZSBSZXZlcmVudCBUaW0gQ29vazo8YnIgLz5BIE1vZGVybiBBbWVyaWNhbiBEYXRhIFByaXZhY3kgSGVybycsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE5LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTlcclxuICAgICAgICB9LCBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE4JyxcclxuICAgICAgICAgIGRpZDogJzEwLTIwLTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdPY3RvYmVyIDIwLTIxLCAyMDE4PGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnSW1hZ2UgRGF0YSBvbiBhIERpZXQnLFxyXG4gICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxOCxcclxuICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE4XHJcbiAgICAgICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTcnLFxyXG4gICAgICBkaWQ6ICcxMC0xOS0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDE5LCAyMDE4ICcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdNYWNoaW5lIExlYXJuaW5nLCBCeSBUcmlhbCBhbmQgRXJyb3InLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE3LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxN1xyXG4gICAgfSwgIFxyXG4gICAge1xyXG4gICAgICBpZDogJzE2JyxcclxuICAgICAgZGlkOiAnMTAtMTgtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxOCwgMjAxOCAnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0FwcGxlICBHb3NzaXAsIGFuZCBEaWdpdGFsIEhlYXJzYXkgQWJvdXQgU25vb3BpbmcnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNlxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTUnLFxyXG4gICAgICBkaWQ6ICcxMC0xNy0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDE3LCAyMDE4ICcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1F1YW50dW0gRGF0YScsXHJcbiAgICAgIHRpdGxlOiAnV2hlcmVcXCdzIHRoZSBGaWN0aW9uIEFpc2xlPycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTUsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE1XHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNCcsXHJcbiAgICAgIGRpZDogJzEwLTE2LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMTYsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdUaGUgQmV0dGVyIFdvcmxkIHRoYXQgVGVjaCBCcmluZ3MnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE0LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNFxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTMnLFxyXG4gICAgICBkaWQ6ICcxMC0xNS0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDE1LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnRWNvbm9taWMgUHJvc3Blcml0eSwgRGVtb2NyYWN5LCBhbmQgdGhlIFRlY2hub2xvZ3kgdGhhdCBCaW5kcyBUaGUgVHdvJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTNcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzEyJyxcclxuICAgICAgZGlkOiAnMTAtMTMtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxMy0xNCwgMjAxODxiciAvPjxzbWFsbD5XZWVrZW5kPC9zbWFsbD4nLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgICB0aXRsZTogJ1Byb2JhYmlsaXN0aWMgUmVhbGl0eSAoYW5kIEluZm9ybWF0aW9uKSwgUGFydCBJSTxiciAvPlF1YW50dW0gTW9sZWN1bGFyIFBzeWNob2xvZ3knLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEyLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMlxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTEnLFxyXG4gICAgICBkaWQ6ICcxMC0xMi0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDEyLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgdGl0bGU6ICdQcm9iYWJpbGlzdGljIFJlYWxpdHkgKGFuZCBJbmZvcm1hdGlvbiksIFBhcnQgSTxiciAvPiBWZXJpZmlhYmx5IERldGVybWluYXRlZCBPbmNlIGFuZCBGb3IgQWxsJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTFcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzEwJyxcclxuICAgICAgZGlkOiAnMTAtMTEtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxMSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ0Vjb25vbWljIFByb3NwZXJpdHksIERlbW9jcmFjeSwgYW5kIHRoZSBUZWNobm9sb2d5IHRoYXQgQmluZHMgVGhlIFR3bycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTAsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEwXHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICc5JyxcclxuICAgICAgZGlkOiAnMTAtMTAtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxMCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdCbG9ja2NoYWluXFwncyBRdWlldCBTdWNjZXNzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q5LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU5XHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICc4JyxcclxuICAgICAgZGlkOiAnMTAtMDktMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciA5LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnSW50ZWxsZWN0dWFsIEVzcGlvbmFnZTogPGJyIC8+UGFydCBJSTogV2hlbiBEb2VzIEZhaXIgUGxheSBmb3IgQWxsIFdhcnJhbnQgYSBGb3VsIHRvIE9uZT8nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDgsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZThcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzcnLFxyXG4gICAgICBkaWQ6ICcxMC0wOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDgsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0ludGVsbGVjdHVhbCBFc3Bpb25hZ2UsIFBhcnQgSTo8YnIgLz5TbWFsbCBDaGlwcycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlN1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc2JyxcclxuICAgICAgZGlkOiAnMTAtMDYtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciA2LTc8YnIgLz5XZWVrZW5kLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ0h1bWFuZSBUZWNobm9sb2d5OiBJcyB0aGVyZSBhIEdvYWwgUG9zdD88YnIgLz5QYXJ0IElJSTogUmVzaXN0aW5nIENvbXBhcnRtZW50YWxpemF0aW9uJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU2XHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICc1JyxcclxuICAgICAgZGlkOiAnMTAtMDUtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciA1LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnSHVtYW5lIFRlY2hub2xvZ3k6IElzIHRoZXJlIGEgR29hbCBQb3N0PzxiciAvPlBhcnQgSUk6IFRlY2gtYmFzZWQgU29jaWFsIENhcGl0YWwnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDUsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTVcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNCcsXHJcbiAgICAgIGRpZDogJzEwLTA0LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgNCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cuJyxcclxuICAgICAgdGl0bGU6ICdIdW1hbmUgVGVjaG5vbG9neTogSXMgdGhlcmUgYSBHb2FsIFBvc3Q/PGJyIC8+UGFydCBJOiBDaHVyY2hlcywgRWR1Y2F0aW9uLCBhbmQgVGVjaG5vbG9naWVzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q0LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU0XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzMnLFxyXG4gICAgICBkaWQ6ICcxMC0wMy0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDMsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ0Zhc3QgQ2FycyBhbmQgRmFzdGVyIEluZm8nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDMsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMicsXHJcbiAgICAgIGRpZDogJzEwLTAyLTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnRmFzdCA1RzogUGFydCBJSTxiciAvPlRoZSBIb3cgYW5kIFdoZW4nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIGRpZDogJzEwLTAxLTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMSwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnRmFzdCA1RzogUGFydCBJPGJyIC8+VGhlIFdoeSBhbmQgV2hhdCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMVxyXG4gICAgfSBcclxuXHJcblxyXG4gIFxyXG4gIF07XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLW9jdFwiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gIH1cclxuXHJcbiAgdmFyIGk7XHJcbiAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGNhdE1vZCA9IGBcclxuICA8ZGl2IGlkPVwibW9kXyR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgPGhyIC8+ICBcclxuICA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiI3RvcC1tb2RcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gICBcclxuICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0udGl0bGV9PC9oNj5cclxuICA8YnIgLz5cclxuICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9PC9kaXY+XHJcbiAgPC9kaXY+XHJcbiA8ZGl2IGlkPVwiYmxvZ2NpdGVcIj4ke3VybFtpXS5ibG9nY2l0ZX1cclxuIDwvZGl2PmA7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBhcmFncmFwaC1vY3QtbW9kXCIpLmlubmVySFRNTCArPSBjYXRNb2Q7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCdibG9nZ2VyLW9jdCcpO1xyXG4gLy9jb25zb2xlLmxvZyhhbmd1bGFyLnRvSnNvbih1cmwpKTsgXHJcbn07XHJcbmJsb2dnZXJPY3QoKTsiLCJcclxuXHJcbnZhciBibG9nZ2VyT2N0ID0gZnVuY3Rpb24gKCkgeyAgXHJcbiBcclxuICB2YXIgYmxvZ3Bvc3QxMjMgPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gIEFsdGhvdWdoIGl0IG1heSBzb3VuZCBsaWtlIGEgdGVybSB0byBkZXNjcmliZSBhIHBvb3JseSBwZXJmb3JtaW5nIElUIHN0YWZmLCB6ZXJvLWtub3dsZWRnZSBjb21wdXRpbmcgY291bGQgcmVwcmVzZW50IGFuIGV2b2x1dGlvbiBpbiBjb3Jwb3JhdGUgZGF0YSBwcm90ZWN0aW9uLiBUaGUgYXBwcm9hY2ggZW5hYmxlcyBkYXRhIHRvIGJlIHByb2Nlc3NlZCB3aGlsZSBpdCByZW1haW5zIGVuY3J5cHRlZCwgc28gdGhhdCBhbmFseXRpY3MgY2FuIGJlIHJ1biB3aXRob3V0IGV4cG9zaW5nIHRoZSBpbmZvcm1hdGlvbi4gSlAgTW9yZ2FuIENoYXNlICYgQ28uIHJlY2VudGx5IGxlZCBhICQxMCBtaWxsaW9uIFNlcmllcyBBIGZ1bmRpbmcgcm91bmQgaW4gZGF0YSBzZWN1cml0eSBhbmQgYW5hbHl0aWNzIHN0YXJ0dXAgSW5waGVyIEluYy4sIHdoaWNoIHdvcmtzIGluIHRoZSBhcmVhLiBJbiBhIGNvbnZlcnNhdGlvbiB3aXRoIENJTyBKb3VybmFsJ3MgU2FyYSBDYXN0ZWxsYW5vcywgU2FtaWsgQ2hhbmRhcmFuYSwgaGVhZCBvZiBkYXRhIGFuYWx5dGljcyBmb3IgdGhlIGNvcnBvcmF0ZSBhbmQgaW52ZXN0bWVudCBiYW5rIGRpdmlzaW9uLCBtYWtlcyB0aGUgY2FzZSBmb3IgdGhlIHRlY2hub2xvZ3kuXHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAgS2VlcGluZyBjbGllbnQgZGF0YSBzYWZlLiBKUE1vcmdhbiBjb3VsZCB1c2UgdGhlIOKAmHNlY3JldCBjb21wdXRpbmfigJkgdGVjaG5vbG9neSB0byBhbmFseXplIGEgY3VzdG9tZXLigJlzIHByb3ByaWV0YXJ5IGRhdGEgb24gdGhlaXIgYmVoYWxmLCB1c2luZyBhcnRpZmljaWFsIGludGVsbGlnZW5jZSB3aXRob3V0IHNhY3JpZmljaW5nIHByaXZhY3ksIE1yLiBDaGFuZGFyYW5hIHNhaWQuIOKAnFRoaXMgZ2l2ZXMgdXMgYSB0ZWNobm9sb2dpY2FsIHNvbHV0aW9uIHRvIGJlIGFibGUgdG8gYWN0IG9uIGEgY2xpZW504oCZcyBwcml2YXRlIGRhdGEg4oCmIHdpdGhvdXQgdGhlbSBoYXZpbmcgdG8gd29ycnkgYWJvdXQgdGhlIHNlY3VyaXR5IGNvbnN0cmFpbnRzIG9yIGdpdmluZyB1cCBhbGwgdGhlaXIgaW5mb3JtYXRpb24gdG8gdXMs4oCdIGhlIHNhaWQuPHN1cD4xPC9zdXA+XHJcbiAgPC9wPmA7XHJcbiAgXHJcbiAgdmFyIGJsb2djaXRlMTIzID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjE8YSBocmVmPVwiaHR0cHM6Ly9ibG9ncy53c2ouY29tL2Npby8yMDE4LzExLzEzL2pwbW9yZ2FuLWludmVzdHMtaW4tc3RhcnR1cC10ZWNoLXRoYXQtYW5hbHl6ZXMtZW5jcnlwdGVkLWRhdGEvP21vZD1kamVtQ0lPX2hcIj5odHRwczovL2Jsb2dzLndzai5jb20vY2lvLzIwMTgvMTEvMTMvanBtb3JnYW4taW52ZXN0cy1pbi1zdGFydHVwLXRlY2gtdGhhdC1hbmFseXplcy1lbmNyeXB0ZWQtZGF0YS8/bW9kPWRqZW1DSU9faDwvYT48L3A+IFxyXG4gIGA7XHJcblxyXG52YXIgYmxvZ3Bvc3QxMjIgPSAgIGBcclxuPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkVjby1mcmllbmRseSB1cmJhbiBjb21tdXRpbmcgb3B0aW9ucyBhcmUgYSBnaWZ0LCBhbmQgc2hvdWxkIGFsd2F5cyBiZSBoYWlsZWQuICBcclxuPC9wPlxyXG48cCBjbGFzcz1cInF1b3RlXCI+ICBBbHRob3VnaCBpdCBtYXkgc291bmQgbGlrZSBhIHRlcm0gdG8gZGVzY3JpYmUgYSBwb29ybHkgcGVyZm9ybWluZyBJVCBzdGFmZiwgemVyby1rbm93bGVkZ2UgY29tcHV0aW5nIGNvdWxkIHJlcHJlc2VudCBhbiBldm9sdXRpb24gaW4gY29ycG9yYXRlIGRhdGEgcHJvdGVjdGlvbi4gVGhlIGFwcHJvYWNoIGVuYWJsZXMgZGF0YSB0byBiZSBwcm9jZXNzZWQgd2hpbGUgaXQgcmVtYWlucyBlbmNyeXB0ZWQsIHNvIHRoYXQgYW5hbHl0aWNzIGNhbiBiZSBydW4gd2l0aG91dCBleHBvc2luZyB0aGUgaW5mb3JtYXRpb24uIEpQIE1vcmdhbiBDaGFzZSAmIENvLiByZWNlbnRseSBsZWQgYSAkMTAgbWlsbGlvbiBTZXJpZXMgQSBmdW5kaW5nIHJvdW5kIGluIGRhdGEgc2VjdXJpdHkgYW5kIGFuYWx5dGljcyBzdGFydHVwIElucGhlciBJbmMuLCB3aGljaCB3b3JrcyBpbiB0aGUgYXJlYS4gSW4gYSBjb252ZXJzYXRpb24gd2l0aCBDSU8gSm91cm5hbCdzIFNhcmEgQ2FzdGVsbGFub3MsIFNhbWlrIENoYW5kYXJhbmEsIGhlYWQgb2YgZGF0YSBhbmFseXRpY3MgZm9yIHRoZSBjb3Jwb3JhdGUgYW5kIGludmVzdG1lbnQgYmFuayBkaXZpc2lvbiwgbWFrZXMgdGhlIGNhc2UgZm9yIHRoZSB0ZWNobm9sb2d5LlxyXG48YnIgLz48YnIgLz5cclxuS2VlcGluZyBjbGllbnQgZGF0YSBzYWZlLiBKUE1vcmdhbiBjb3VsZCB1c2UgdGhlIOKAmHNlY3JldCBjb21wdXRpbmfigJkgdGVjaG5vbG9neSB0byBhbmFseXplIGEgY3VzdG9tZXLigJlzIHByb3ByaWV0YXJ5IGRhdGEgb24gdGhlaXIgYmVoYWxmLCB1c2luZyBhcnRpZmljaWFsIGludGVsbGlnZW5jZSB3aXRob3V0IHNhY3JpZmljaW5nIHByaXZhY3ksIE1yLiBDaGFuZGFyYW5hIHNhaWQuIOKAnFRoaXMgZ2l2ZXMgdXMgYSB0ZWNobm9sb2dpY2FsIHNvbHV0aW9uIHRvIGJlIGFibGUgdG8gYWN0IG9uIGEgY2xpZW504oCZcyBwcml2YXRlIGRhdGEg4oCmIHdpdGhvdXQgdGhlbSBoYXZpbmcgdG8gd29ycnkgYWJvdXQgdGhlIHNlY3VyaXR5IGNvbnN0cmFpbnRzIG9yIGdpdmluZyB1cCBhbGwgdGhlaXIgaW5mb3JtYXRpb24gdG8gdXMs4oCdIGhlIHNhaWQuPHN1cD4xPC9zdXA+XHJcbjwvcD5gO1xyXG5cclxudmFyIGJsb2djaXRlMTIyID0gYFxyXG48cCBjbGFzcz1cImNpdGVcIj4xPGEgaHJlZj1cImh0dHBzOi8vdGVjaGNydW5jaC5jb20vMjAxOC8xMS8xNC91YmVyLXEzLTIwMTgtY29udGludWVzLXRvLWxvc2UtbW9uZXktYXMtaXQtd29ya3MtdG8tc2NhbGUtc2Nvb3RlcnMtYmlrZXMtYW5kLW90aGVyLW5ld2VyLWJ1c2luZXNzZXMvXCI+aHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzE0L3ViZXItcTMtMjAxOC1jb250aW51ZXMtdG8tbG9zZS1tb25leS1hcy1pdC13b3Jrcy10by1zY2FsZS1zY29vdGVycy1iaWtlcy1hbmQtb3RoZXItbmV3ZXItYnVzaW5lc3Nlcy88L2E+PC9wPlxyXG48cCBjbGFzcz1cImNpdGVcIj4yPGEgaHJlZj1cImh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2FtYXpvbnMtY29uc3VtZXItYnVzaW5lc3MtbW92ZXMtZnJvbS1vcmFjbGUtdG8tYXdzLWJ1dC1sYXJyeS1lbGxpc29ucy13b250LXN0b3AtdGFsa2luZy9cIj4gaHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvYW1hem9ucy1jb25zdW1lci1idXNpbmVzcy1tb3Zlcy1mcm9tLW9yYWNsZS10by1hd3MtYnV0LWxhcnJ5LWVsbGlzb25zLXdvbnQtc3RvcC10YWxraW5nLzwvYT48L3A+XHJcbmA7XHJcbnZhciBibG9ncG9zdDExMSA9ICAgYFxyXG48cCBjbGFzcz1cInF1b3RlXCI+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5BdCB0aGUgaGlnaGVzdCBsZXZlbHMgb2YgZ292ZXJubWVudCB0aGUgcGxhc3RpYyBwYW5pYyBjYW4gcmVzZW1ibGUgYSBzY3JhbWJsZWQgcmVzcG9uc2UgdG8gYSBuYXR1cmFsIGRpc2FzdGVyLCBvciBhIHB1YmxpYyBoZWFsdGggY3Jpc2lzLiBUaGUgVW5pdGVkIE5hdGlvbnMgaGFzIGRlY2xhcmVkIGEg4oCcd2Fy4oCdIG9uIHNpbmdsZS11c2UgcGxhc3RpYy4gSW4gQnJpdGFpbiwgVGhlcmVzYSBNYXkgaGFzIGNhbGxlZCBpdCBhIOKAnHNjb3VyZ2XigJ0sIGFuZCBjb21taXR0ZWQgdGhlIGdvdmVybm1lbnQgdG8gYSAyNS15ZWFyIHBsYW4gdGhhdCB3b3VsZCBwaGFzZSBvdXQgZGlzcG9zYWJsZSBwYWNrYWdpbmcgYnkgMjA0Mi4gSW5kaWEgY2xhaW1lZCBpdCB3b3VsZCBkbyB0aGUgc2FtZSwgYnV0IGJ5IDIwMjIuPHN1cD4xPC9zdXA+XHJcbjwvcD5gO1xyXG5cclxudmFyIGJsb2djaXRlMTExID0gYFxyXG48cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW5kcm9pZHBvbGljZS5jb20vMjAxOC8xMS8xNC9waXhlbC1uaWdodC1zaWdodC1hbHNvLXdvcmtzLWRheWxpZ2h0LXJlZHVjaW5nLW5vaXNlLWJvb3N0aW5nLXJlc29sdXRpb24vXCI+aHR0cHM6Ly93d3cuYW5kcm9pZHBvbGljZS5jb20vMjAxOC8xMS8xNC9waXhlbC1uaWdodC1zaWdodC1hbHNvLXdvcmtzLWRheWxpZ2h0LXJlZHVjaW5nLW5vaXNlLWJvb3N0aW5nLXJlc29sdXRpb24vPC9hPjwvcD5cclxuYFxyXG5cclxuICB2YXIgYmxvZ3Bvc3QxMjIgPSAgIGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RWNvLWZyaWVuZGx5IHVyYmFuIGNvbW11dGluZyBvcHRpb25zIGFyZSBhIGdpZnQsIGFuZCBzaG91bGQgYWx3YXlzIGJlIGhhaWxlZC4gIFxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+T24gYW4gZWFybmluZ3MgYmVmb3JlIGludGVyZXN0LCB0YXhlcywgZGVwcmVjaWF0aW9uIGFuZCBhbW9ydGl6YXRpb24gYmFzaXMgKEVCSURUQSksIFViZXLigJlzIGxvc3NlcyB3ZXJlICQ1MjcgbWlsbGlvbiwgdXAgYWJvdXQgMjEgcGVyY2VudCBxdWFydGVyIG92ZXIgcXVhcnRlci4gQW5kIGFzIFViZXIgcHJlcGFyZXMgdG8gZ28gcHVibGljLCB0aGUgY29tcGFueSBoYXMgc3RhcnRlZCBwcmVzZW50aW5nIHRoZSBpbmNvbWUgc3RhdGVtZW50cyB3aXRoIHN0b2NrLWJhc2VkIGNvbXBlbnNhdGlvbi5cclxuXHJcbiAgVGVuIHllYXJzIGZyb20gbm93LCBVYmVyIENFTyBEYXJhIEtob3Nyb3dzaGFoaSBlbnZpc2lvbnMgaXRzIGNvcmUgcmlkZS1oYWlsaW5nIGJ1c2luZXNzIGFjY291bnRpbmcgZm9yIGxlc3MgdGhhbiA1MCBwZXJjZW50IG9mIFViZXLigJlzIG92ZXJhbGwgYnVzaW5lc3MsIEtob3Nyb3dzaGFoaSB0b2xkIG1lIGF0IFRlY2hDcnVuY2ggRGlzcnVwdCBTRiAyMDE4LiBUaGF0IG1lYW5zIFViZXIgZXhwZWN0cyBidXNpbmVzc2VzIGxpa2UgRWF0cywgc2Nvb3RlcnMsIGJpa2VzIGFuZCBmcmVpZ2h0IHRvIGNvbnRyaWJ1dGUgdG8gYmUgbW9yZSBvZiBVYmVy4oCZcyBidXNpbmVzcywgd2hpY2ggcmVxdWlyZXMgVWJlciB0byBpbnZlc3QgaGVhdmlseSBpbiB0aG9zZSBidXNpbmVzc2VzLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gXHJcbiAgdmFyIGJsb2djaXRlMTIyID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjE8YSBocmVmPVwiaHR0cHM6Ly90ZWNoY3J1bmNoLmNvbS8yMDE4LzExLzE0L3ViZXItcTMtMjAxOC1jb250aW51ZXMtdG8tbG9zZS1tb25leS1hcy1pdC13b3Jrcy10by1zY2FsZS1zY29vdGVycy1iaWtlcy1hbmQtb3RoZXItbmV3ZXItYnVzaW5lc3Nlcy9cIj5odHRwczovL3RlY2hjcnVuY2guY29tLzIwMTgvMTEvMTQvdWJlci1xMy0yMDE4LWNvbnRpbnVlcy10by1sb3NlLW1vbmV5LWFzLWl0LXdvcmtzLXRvLXNjYWxlLXNjb290ZXJzLWJpa2VzLWFuZC1vdGhlci1uZXdlci1idXNpbmVzc2VzLzwvYT48L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MjxhIGhyZWY9XCJodHRwczovL3d3dy56ZG5ldC5jb20vYXJ0aWNsZS9hbWF6b25zLWNvbnN1bWVyLWJ1c2luZXNzLW1vdmVzLWZyb20tb3JhY2xlLXRvLWF3cy1idXQtbGFycnktZWxsaXNvbnMtd29udC1zdG9wLXRhbGtpbmcvXCI+IGh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2FtYXpvbnMtY29uc3VtZXItYnVzaW5lc3MtbW92ZXMtZnJvbS1vcmFjbGUtdG8tYXdzLWJ1dC1sYXJyeS1lbGxpc29ucy13b250LXN0b3AtdGFsa2luZy88L2E+PC9wPlxyXG4gIGA7XHJcbiB2YXIgYmxvZ3Bvc3QxMTEgPSAgIGBcclxuIDxwIGNsYXNzPVwicXVvdGVcIj5UdXJucyBvdXQgdGhhdCBHb29nbGVcXCdzIG5ldyBOaWdodCBTaWdodCBtb2RlIGZvciBQaXhlbHMsIGZvcm1hbGx5IHJlbGVhc2VkIGp1c3QgZWFybGllciB0b2RheSwgaGFzIHNvbWUgbm9uLW5pZ2h0IHV0aWxpdHkuIEluIGEgYml0IG9mIGEgdHdpc3QsIHlvdSBjYW4gdXNlIGl0IGluIHRoZSBkYXl0aW1lIGFzIHdlbGwgZm9yIFwiZGVub2lzaW5nIGFuZCByZXNvbHV0aW9uIGltcHJvdmVtZW50c1wiIGluaGVyaXRlZCBmcm9tIGFub3RoZXIgR29vZ2xlIENhbWVyYSBmZWF0dXJlOiBTdXBlciBSZXMgWm9vbS4gXHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ2NpdGUxMTEgPSBgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cuYW5kcm9pZHBvbGljZS5jb20vMjAxOC8xMS8xNC9waXhlbC1uaWdodC1zaWdodC1hbHNvLXdvcmtzLWRheWxpZ2h0LXJlZHVjaW5nLW5vaXNlLWJvb3N0aW5nLXJlc29sdXRpb24vXCI+aHR0cHM6Ly93d3cuYW5kcm9pZHBvbGljZS5jb20vMjAxOC8xMS8xNC9waXhlbC1uaWdodC1zaWdodC1hbHNvLXdvcmtzLWRheWxpZ2h0LXJlZHVjaW5nLW5vaXNlLWJvb3N0aW5nLXJlc29sdXRpb24vPC9hPjwvcD5cclxuIGBcclxuICB2YXIgICAgIGJsb2dwb3N0MTAwID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UGxhc3RpY3MgYW5kIG1pY3JvLXBsYXN0aWMgd2FzdGUganVzdCBhd2FpdHMgYSB0ZWNoLWluZm9ybWVkIHNvbHV0aW9uIVxyXG4gICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkF0IHRoZSBoaWdoZXN0IGxldmVscyBvZiBnb3Zlcm5tZW50IHRoZSBwbGFzdGljIHBhbmljIGNhbiByZXNlbWJsZSBhIHNjcmFtYmxlZCByZXNwb25zZSB0byBhIG5hdHVyYWwgZGlzYXN0ZXIsIG9yIGEgcHVibGljIGhlYWx0aCBjcmlzaXMuIFRoZSBVbml0ZWQgTmF0aW9ucyBoYXMgZGVjbGFyZWQgYSDigJx3YXLigJ0gb24gc2luZ2xlLXVzZSBwbGFzdGljLiBJbiBCcml0YWluLCBUaGVyZXNhIE1heSBoYXMgY2FsbGVkIGl0IGEg4oCcc2NvdXJnZeKAnSwgYW5kIGNvbW1pdHRlZCB0aGUgZ292ZXJubWVudCB0byBhIDI1LXllYXIgcGxhbiB0aGF0IHdvdWxkIHBoYXNlIG91dCBkaXNwb3NhYmxlIHBhY2thZ2luZyBieSAyMDQyLiBJbmRpYSBjbGFpbWVkIGl0IHdvdWxkIGRvIHRoZSBzYW1lLCBidXQgYnkgMjAyMi48c3VwPjE8L3N1cD48L3A+XHJcbiBgXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTEwMCA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL2Vudmlyb25tZW50LzIwMTgvbm92LzEzL3RoZS1wbGFzdGljLWJhY2tsYXNoLXdoYXRzLWJlaGluZC1vdXItc3VkZGVuLXJhZ2UtYW5kLXdpbGwtaXQtbWFrZS1hLWRpZmZlcmVuY2VcclxuICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL2Vudmlyb25tZW50LzIwMTgvbm92LzEzL3RoZS1wbGFzdGljLWJhY2tsYXNoLXdoYXRzLWJlaGluZC1vdXItc3VkZGVuLXJhZ2UtYW5kLXdpbGwtaXQtbWFrZS1hLWRpZmZlcmVuY2VcclxuICAgICAgPC9hPiBcclxuICAgICAgPC9wPiBcclxuICAgICBgO1xyXG4gXHJcbiAgdmFyIGJsb2dwb3N0MDk5ID0gICBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlRoYW5rIHlvdSBDaXNjbywgYW5kIFRoYW5rIHlvdSBBV1MuICBBbWF6b24gV2ViIFNlcnZpY2VzIGhhdmUgbm93IGNvbWUgaW50byB0aGVpciBsaWdodCB3aXRoIG5ldyBjb21wdXRpbmcgcG93ZXIgZnJvbSBhYm92ZSAtLWFuZCBmb3IgdXMgY2l0aXplbnMsIGF0IGZyYWN0aW9ucyBvZiBhIGNlbnQhIFxyXG5cclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIEFtYXpvbiBXZWIgU2VydmljZXMgYW5kIENpc2NvIGFubm91bmNlZCBvbiBUaHVyc2RheSB0aGF0IHRoZXkncmUgdGVhbWluZyB1cCBvbiBhIHByb2R1Y3QgdGhhdCB3aWxsIGFsbG93IGRldmVsb3BlcnMgdG8gYnVpbGQgYXBwbGljYXRpb25zIGluIHRoZSBjbG91ZCBvciBpbiB0cmFkaXRpb25hbCBkYXRhIGNlbnRlcnMgd2hpbGUgbWFraW5nIGl0IGVhc2llciBmb3IgdGhlbSB0byBtb3ZlIGJldHdlZW4gdGhlIHR3by48YnIgLz48YnIgLz5cclxuXHJcbiAgSXQncyBDaXNjbydzIGxhdGVzdCBlZmZvcnQgdG8gY3JlYXRlIGh5YnJpZCBvcHRpb25zIGZvciBjdXN0b21lcnMgdGhhdCB3YW50IHRvIHB1c2ggd29yayB0byB0aGUgY2xvdWQgYnV0IHN0aWxsIG5lZWQgdG8gcnVuIHNvbWUgcHJvamVjdHMgb24gdGhlaXIgb3duIGhhcmR3YXJlIGZvciBwcml2YWN5IGFuZCByZWd1bGF0b3J5IHJlYXNvbnMuIENpc2NvIHByZXZpb3VzbHkgYW5ub3VuY2VkIHBhcnRuZXJzaGlwcyB3aXRoIHRoZSBvdGhlciB0d28gbWFqb3IgY2xvdWQgcHJvdmlkZXJzLCBHb29nbGUgYW5kIE1pY3Jvc29mdCwgYnV0IEFtYXpvbiBpcyBieSBmYXIgdGhlIGxlYWRlciBpbiB0aGUgY2xvdWQgaW5mcmFzdHJ1Y3R1cmUgbWFya2V0LjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5gO1xyXG4gXHJcbiAgdmFyIGJsb2djaXRlMDk5ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjE8YSBocmVmPVwiaHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMS8wNy9hd3MtYW5kLWNpc2NvLXBhcnRuZXItb24tY29udGFpbmVyLXRlY2hub2xvZ3ktZm9yLWh5YnJpZC1jbG91ZC5odG1sXCI+aHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMS8wNy9hd3MtYW5kLWNpc2NvLXBhcnRuZXItb24tY29udGFpbmVyLXRlY2hub2xvZ3ktZm9yLWh5YnJpZC1jbG91ZC5odG1sPC9hPjwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4yPGEgaHJlZj1cImh0dHBzOi8vd3d3LnpkbmV0LmNvbS9hcnRpY2xlL2FtYXpvbnMtY29uc3VtZXItYnVzaW5lc3MtbW92ZXMtZnJvbS1vcmFjbGUtdG8tYXdzLWJ1dC1sYXJyeS1lbGxpc29ucy13b250LXN0b3AtdGFsa2luZy9cIj4gaHR0cHM6Ly93d3cuemRuZXQuY29tL2FydGljbGUvYW1hem9ucy1jb25zdW1lci1idXNpbmVzcy1tb3Zlcy1mcm9tLW9yYWNsZS10by1hd3MtYnV0LWxhcnJ5LWVsbGlzb25zLXdvbnQtc3RvcC10YWxraW5nLzwvYT48L3A+XHJcbiAgYDtcclxuIHZhciBibG9ncG9zdDA4OCA9ICAgYFxyXG4gPHAgY2xhc3M9XCJxdW90ZVwiPkluIEFwcmlsIDIwMTgsIGEgZ3JvdXAgYXQgTUlULCBVU0EsIHNob3dlZCB0aGF0IGl0IGlzIHBvc3NpYmxlIHRvIGdlbmVyYXRlIGEgZm9ybSBvZiBzdXBlcmNvbmR1Y3Rpdml0eSBpbiBhIHN5c3RlbSBvZiB0d28gbGF5ZXJzIG9mIGdyYXBoZW5lIHVuZGVyIHZlcnkgc3BlY2lmaWMgY29uZGl0aW9uczogVG8gZG8gdGhpcywgdGhlIHR3byBoZXhhZ29uYWwgbmV0cyBtdXN0IGJlIHR3aXN0ZWQgYWdhaW5zdCBlYWNoIG90aGVyIGJ5IGV4YWN0bHkgdGhlIG1hZ2ljIGFuZ2xlIG9mIDEuMcKwLiBVbmRlciB0aGlzIGNvbmRpdGlvbiBhIGZsYXQgYmFuZCBmb3JtcyBpbiB0aGUgZWxlY3Ryb25pYyBzdHJ1Y3R1cmUuIFRoZSBwcmVwYXJhdGlvbiBvZiBzYW1wbGVzIGZyb20gdHdvIGxheWVycyBvZiBncmFwaGVuZSB3aXRoIHN1Y2ggYW4gZXhhY3RseSBhZGp1c3RlZCB0d2lzdCBpcyBjb21wbGV4LCBhbmQgbm90IHN1aXRhYmxlIGZvciBtYXNzIHByb2R1Y3Rpb24uIE5ldmVydGhlbGVzcywgdGhlIHN0dWR5IGhhcyBhdHRyYWN0ZWQgYSBsb3Qgb2YgYXR0ZW50aW9uIGFtb25nIGV4cGVydHMuXHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ2NpdGUwODggPSBgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cuc2NpZW5jZWRhaWx5LmNvbS9yZWxlYXNlcy8yMDE4LzExLzE4MTEwOTE1MDEyNC5odG1cIj4gaHR0cHM6Ly93d3cuc2NpZW5jZWRhaWx5LmNvbS9yZWxlYXNlcy8yMDE4LzExLzE4MTEwOTE1MDEyNC5odG08L2E+PC9wPlxyXG4gYFxyXG4gIHZhciAgICAgYmxvZ3Bvc3QwNzcgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5OYW1pbmcgY29udmVudGlvbnMgbWFrZSBmb3IgYSBsaW5ndWlzdGljIHBoZW5vbWVub24gaW4gYSB3b3JsZCB3aG9zZSByYXBpZCBjaGFuZ2UgZmFyIG91dHBhY2VzIGFjY3VyYXRlIHRyYW5zZmVyIG9mIG1lYW5pbmcgaW50byAgbGFuZ3VhZ2UuIEFuZCwgYmVjYXVzZSB3ZSBkb24ndCBhbGxvdyBvdXIgdGVybWlub2xvZ3kgdG8gcmVkZWZpbmUgaXRzZWxmLCBhbiBpbmNyZWFzaW5nbHkgaW5hY2N1cmF0ZSBsYW5ndWFnZSBtYXkgY29tZSB0byBpbmNvbmdydWVudGx5IGRlc2NyaWJlIGN1cnJlbnQtZGF5IGxvZ2ljLCBhbmQgYmFzaWNhbGx5IHJlYWxpdHkuLi5cclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gQnV0IE11c2sgbWF5IGJlIHJpZ2h0IGluIGdlbmVyYWwgYWJvdXQgdGhlIGZ1dGlsaXR5IG9mIGpvYiB0aXRsZXMsIHdoaWNoIHNlcnZlIGxhcmdlbHkgYXMgYSBkaXN0cmFjdGlvbiBmb3Iga25vd2xlZGdlIHdvcmtlcnMgaW4gdG9kYXnigJlzIGVjb25vbXkuXHJcbiAgV2XigJlyZSBhbGwgcHJvamVjdCBtYW5hZ2VycyBub3cuPGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgQWNjb3JkaW5nIHRvIFJvZ2VyIE1hcnRpbiwgYSBwcm9taW5lbnQgbWFuYWdlbWVudCBhbmQgc3RyYXRlZ3kgZXhwZXJ0LCBhbmQgZm9ybWVyIGRlYW4gb2YgdGhlIFJvdG1hbiBTY2hvb2wgb2YgTWFuYWdlbWVudCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBUb3JvbnRvLCB3ZSBtYXkgYmUgc3RydWN0dXJpbmcgam9icyBhbGwgd3JvbmcuIEJ5IGV4dGVuc2lvbiwgb3VyIGFkZGljdGlvbiB0byB0aXRsZXMgYXMgc2lnbnMgb2Ygc3RhdHVzIGNvdWxkIGJlIGp1c3QgYW5vdGhlciBleGFtcGxlIG9mIGhvdyBodW1hbnPigJR3aGV0aGVyIGFzIGluZGl2aWR1YWxzIG9yIGluIGdyb3Vwc+KAlG9wZXJhdGUgaW4gcGF0dGVybnMgYmFzZWQgb24gaGFiaXQsIHdpdGhvdXQgcmVzcG9uZGluZyB0byB0aGUgd29ybGQgYXMgaXQgcmVhbGx5IGlzLjxzdXA+MTwvc3VwPjwvcD5cclxuIGBcclxuICAgIDtcclxuICAgIHZhciAgICAgIGJsb2djaXRlMDc3ID0gYCBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJodHRwczovL3F6LmNvbS93b3JrLzE0NDM5NTQvdGVzbGEtY2VvLWVsb24tbXVzay1pcy1yYWlzaW5nLWFuLWltcG9ydGFudC1xdWVzdGlvbi1hYm91dC1qb2ItdGl0bGVzL1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS93b3JrLzE0NDM5NTQvdGVzbGEtY2VvLWVsb24tbXVzay1pcy1yYWlzaW5nLWFuLWltcG9ydGFudC1xdWVzdGlvbi1hYm91dC1qb2ItdGl0bGVzLyBcclxuICAgICAgPC9hPiBcclxuICAgICAgPC9hPiBcclxuICAgICBgO1xyXG5cclxuICB2YXIgYmxvZ3Bvc3QwNjYgPSAgIGBcclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGltIEJlcm5lcnMtTGVlIGhhcyBsYXVuY2hlZCBhIGdsb2JhbCBjYW1wYWlnbiB0byBzYXZlIHRoZSB3ZWIgZnJvbSB0aGUgZGVzdHJ1Y3RpdmUgZWZmZWN0cyBvZiBhYnVzZSBhbmQgZGlzY3JpbWluYXRpb24sIHBvbGl0aWNhbCBtYW5pcHVsYXRpb24sIGFuZCBvdGhlciB0aHJlYXRzIHRoYXQgcGxhZ3VlIHRoZSBvbmxpbmUgd29ybGQuXHJcblxyXG4gIEluIGEgdGFsayBhdCB0aGUgb3BlbmluZyBvZiB0aGUgV2ViIFN1bW1pdCBpbiBMaXNib24gb24gTW9uZGF5LCB0aGUgaW52ZW50b3Igb2YgdGhlIHdlYiBjYWxsZWQgb24gZ292ZXJubWVudHMsIGNvbXBhbmllcyBhbmQgaW5kaXZpZHVhbHMgdG8gYmFjayBhIG5ldyDigJxDb250cmFjdCBmb3IgdGhlIFdlYuKAnSB0aGF0IGFpbXMgdG8gcHJvdGVjdCBwZW9wbGXigJlzIHJpZ2h0cyBhbmQgZnJlZWRvbXMgb24gdGhlIGludGVybmV0LlxyXG4gIDwvcD5gO1xyXG4gXHJcbiAgdmFyIGJsb2djaXRlMDY2ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjxhIGhyZWY9XCJodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE4L25vdi8wNS90aW0tYmVybmVycy1sZWUtbGF1bmNoZXMtY2FtcGFpZ24tdG8tc2F2ZS10aGUtd2ViLWZyb20tYWJ1c2VcIj4gaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxOC9ub3YvMDUvdGltLWJlcm5lcnMtbGVlLWxhdW5jaGVzLWNhbXBhaWduLXRvLXNhdmUtdGhlLXdlYi1mcm9tLWFidXNlPC9hPjwvcD5cclxuICBgO1xyXG4gdmFyIGJsb2dwb3N0MDU1ID0gICBgXHJcbiA8cCBjbGFzcz1cInF1b3RlXCI+XCJXaGF0IHdvdWxkIGd1YXJhbnRlZSBhIHBhcmFkaWdtIHNoaWZ0IHdvdWxkIGJlIHRoZSBhYmlsaXR5IHRvIGVmZm9ydGxlc3NseSBicmluZyBkaXNwYXJhdGUgZGV2aWNlcyB0b2dldGhlcixcIiBzYWlkIEJsYWtlIEtvemFrLCBwcmluY2lwYWwgYW5hbHlzdCBhdCBJSFMgTWFya2l0LiBcIkEgbGFyZ2UgcHJvcG9ydGlvbiBvZiBjb25zdW1lciBjb21wbGFpbnRzIHN0ZW0gZnJvbSBpbnN0YWxsYXRpb24gY2hhbGxlbmdlcyB0byBkZXZpY2VzIG5vdCBiZWluZyByZWxpYWJsZSwgZS5nLiBzY2VuZXMgbm90IHdvcmtpbmcsIGhpZ2ggbGF0ZW5jeSBldmVuIGluIGxvY2FsIGNvbnRyb2wgYW5kIGxhY2sgb2YgY29udHJvbCB3aGVuIHNjZW5lcyBhcmUgcGVyZm9ybWluZyBidXQgYnJva2VuLlwiXHJcblxyXG4gNUcsIHdpdGggaXRzIGFiaWxpdHkgdG8gaGFuZGxlIG1vcmUgY29ubmVjdGVkIGRldmljZXMsIGNvdWxkIGJlIGFuIGFuc3dlciBkb3duIHRoZSBsaW5lLiBcclxuIFxyXG4gQnV0IHdoaWxlIDVHIGNvdWxkIHByb3ZpZGUgc29tZSBjb25zaXN0ZW5jeSBhY3Jvc3Mgc21hcnQgaG9tZSBuZXR3b3JraW5nIHN0YW5kYXJkcywgaXQncyBub3QgYSBwYW5hY2VhIGR1ZSB0byBhIGZhbWlsaWFyIHByb2JsZW06IGJhdHRlcnkgbGlmZS4gXHJcbiA8L3A+YDtcclxuXHJcbiB2YXIgYmxvZ2NpdGUwNTUgPSBgXHJcbiA8cCBjbGFzcz1cImNpdGVcIj48YSBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy81Zy1hbmQtdGhlLXByb21pc2Utb2YtYS1zbWFydC1ob21lLW1ha2VvdmVyL1wiPiBodHRwczovL3d3dy5jbmV0LmNvbS9uZXdzLzVnLWFuZC10aGUtcHJvbWlzZS1vZi1hLXNtYXJ0LWhvbWUtbWFrZW92ZXIvPC9hPjwvcD5cclxuIGBcclxuICB2YXIgICAgIGJsb2dwb3N0MDQ0ID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+RW5lcmd5IENvbnNjaW91c25lc3MgYXJvdW5kIHRyYWRpdGlvbmFsIDxpPlByb29mIG9mIFdvcms8L2k+IGJsb2NrY2hhaW4gdGVjaG5vbG9naWVzIGNhc3RzIGEgbmVnYXRpdmUgbGlnaHQgb24gQml0Y29pbiBNaW5pbmcuIEVuZXJneSBjb25zdW1wdGlvbiBmcm9tIHByb29mLW9mLXdvcmssIGVuZXJneS1pbnRlbnNpdmUgYmxvY2tjaGFpbiBtaW5pbmcgcGFyYWxsZWxzIGFubnVhbCBLaWxvV2F0dCBjb25zdW1wdGlvbiBhcyBzbWFsbCBjb3VudHJpZXMgbGlrZSBEZW5tYXJrIGFuZCBTaW5nYXBvcmUuXHJcbiAgIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gXHJcbiAgQml0Y29pbiBpcyBhIHBvd2VyLWh1bmdyeSBjcnlwdG9jdXJyZW5jeSB0aGF0IGlzIGluY3JlYXNpbmdseSB1c2VkIGFzIGFuIGludmVzdG1lbnQgYW5kIHBheW1lbnQgc3lzdGVtLiBIZXJlIHdlIHNob3cgdGhhdCBwcm9qZWN0ZWQgQml0Y29pbiB1c2FnZSwgc2hvdWxkIGl0IGZvbGxvdyB0aGUgcmF0ZSBvZiBhZG9wdGlvbiBvZiBvdGhlciBicm9hZGx5IGFkb3B0ZWQgdGVjaG5vbG9naWVzLCBjb3VsZCBhbG9uZSBwcm9kdWNlIGVub3VnaCBDTzIgZW1pc3Npb25zIHRvIHB1c2ggd2FybWluZyBhYm92ZSAyIMKwQyB3aXRoaW4gbGVzcyB0aGFuIHRocmVlIGRlY2FkZXMuPHN1cD4xPC9zdXA+XHJcbiAgIDxwPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5hbiBhcnRpY2xlIGJ5IGEgdGVhbSBvZiByZXNlYXJjaGVycyBmcm9tIEhhd2FpaSBpbiB0aGUgam91cm5hbCBOYXR1cmUgQ2xpbWF0ZSBDaGFuZ2UgbGFzdCB3ZWVrIGRpZCBtdWNoIHRoZSBzYW1lIGtpbmQgb2YgY2FsY3VsYXRpb25zIGFzIGRlIFZyaWVzIGFuZCBLcmF1c2UgYW5kIGZvdW5kIHRoYXQgYml0Y29pbiB1c2FnZSByZXN1bHRlZCBpbiB0aGUgZXF1aXZhbGVudCBvZiA2OSBtaWxsaW9uIG1ldHJpYyB0b25uZXMgb2YgQ08yIGluIDIwMTcuIElmIGJpdGNvaW4gZ3Jvd3MgbGlrZSBvdGhlciB0ZWNobm9sb2dpZXMsIHRoZSBhdXRob3JzIHNhaWQsIGl04oCZZCBjb3VnaCBvdXQgZW5vdWdoIGdyZWVuaG91c2UgZ2FzIHRvIHdhcm0gdGhlIHBsYW5ldCBieSAyIGRlZ3JlZXMgY2Vsc2l1cyBieSB0aGUgbWlkLTIwMzBzLjxzdXA+Mjwvc3VwPlxyXG4gIDwvcD5gXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTA0NCA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubmF0dXJlLmNvbS9hcnRpY2xlcy9zNDE1NTgtMDE4LTAzMjEtOFxyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5uYXR1cmUuY29tL2FydGljbGVzL3M0MTU1OC0wMTgtMDMyMS04XHJcbiAgICAgIDwvYT4gXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMiA8YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2JpdGNvaW4td2lsbC1idXJuLXBsYW5ldC1kb3duLWhvdy1mYXN0L1xyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYml0Y29pbi13aWxsLWJ1cm4tcGxhbmV0LWRvd24taG93LWZhc3QvXHJcbiAgICAgIDwvYT4gXHJcbiAgICAgYDtcclxuICAgICB2YXIgICAgIGJsb2dwb3N0MDMzID0gYCBcclxuICAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgaW52ZW50aW9uIHByb3ZpZGVzIGZvciBzeXN0ZW1zIGFuZCBkZXZpY2VzIGZvciBoYXJkZW5lZCByZW1vdGUgc3RvcmFnZSBvZiBwcml2YXRlIGNyeXB0b2dyYXBoeSBrZXlzIHVzZWQgZm9yIGF1dGhlbnRpY2F0aW9uLiBUaGUgc3RvcmFnZSBkZXZpY2UgaXMgdGFtcGVyLXJlc3BvbnNpdmUsIHN1Y2ggdGhhdCByZWNlaXB0IG9mIGEgc2lnbmFsIHRoYXQgaW5kaWNhdGVzIHBoeXNpY2FsIG9yIG5vbi1waHlzaWNhbCB0YW1wZXJpbmcgd2l0aCB0aGUgc3RvcmFnZSBkZXZpY2Ugb3IgaXRzIGNvbXBvbmVudHMgcmVzdWx0cyBpbiBkZWxldGlvbiBvZiB0aGUgcHJpdmF0ZSBjcnlwdG9ncmFwaHkga2V5KHMpIGZyb20gdGhlIG1lbW9yeS4gVGhlIHN0b3JhZ2UgZGV2aWNlIGlzIGNvbmZpZ3VyZWQgdG8gYmUgc2VwYXJhdGUgYW5kIHJlbW90ZSBmcm9tIGEgY29tcHV0aW5nIG5vZGUgdGhhdCBleGVjdXRlcyBhbiBhdXRoZW50aWNhdGlvbiByb3V0aW5lIHJlcXVpcmluZyB0aGUgcHJpdmF0ZSBjcnlwdG9ncmFwaHkga2V5KHMpIGFuZCwgYXMgc3VjaCwgdGhlIHByaXZhdGUgY3J5cHRvZ3JhcGh5IGtleShzKSBhcmUgYWNjZXNzaWJsZSB0bywgYnV0IG5vdCBjb21tdW5pY2F0ZWQgdG8sIHRoZSBjb21wdXRpbmcgbm9kZSBvbmx5IHdoZW4gdGhlIGNvbXB1dGluZyBub2RlIGlzIGV4ZWN1dGluZyB0aGUgYXV0aGVudGljYXRpb24gcm91dGluZS48L3A+PHN1cD4xPC9zdXA+IFxyXG4gICAgICA8cCA+XHJcbiAgIFxyXG4gICAgICA8L3A+YFxyXG4gICAgICAgO1xyXG4gICAgICAgdmFyICAgICAgYmxvZ2NpdGUwMzMgPSBgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly91LnRvZGF5L2Jhbmstb2YtYW1lcmljYS1hd2FyZGVkLW5ldy1wYXRlbnQtZm9yLXN0b3JpbmctcHJpdmF0ZS1rZXlzXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3UudG9kYXkvYmFuay1vZi1hbWVyaWNhLWF3YXJkZWQtbmV3LXBhdGVudC1mb3Itc3RvcmluZy1wcml2YXRlLWtleXM8L2E+IDwvcD5cclxuICAgICAgIFxyXG4gICAgICAgPHAgY2xhc3M9XCJjaXRlXCI+MiA8YSBocmVmPVwiaHR0cDovL3BhdGZ0LnVzcHRvLmdvdi9uZXRhY2dpL25waC1QYXJzZXI/U2VjdDE9UFRPMiZTZWN0Mj1ISVRPRkYmdT0lMkZuZXRhaHRtbCUyRlBUTyUyRnNlYXJjaC1hZHYuaHRtJnI9MSZwPTEmZj1HJmw9NTAmZD1QVFhUJlMxPTEwLDExNiw2MzMuUE4uJk9TPXBuLzEwLDExNiw2MzMmUlM9UE4vMTAsMTE2LDYzM1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL3BhdGZ0LnVzcHRvLmdvdi9uZXRhY2dpL25waC1QYXJzZXI/U2VjdDE9UFRPMiZTZWN0Mj1ISVRPRkYmdT0lMkZuZXRhaHRtbCUyRlBUTyUyRnNlYXJjaC1hZHYuaHRtJnI9MSZwPTEmZj1HJmw9NTAmZD1QVFhUJlMxPTEwLDExNiw2MzMuUE4uJk9TPXBuLzEwLDExNiw2MzMmUlM9UE4vMTAsMTE2LDYzMzwvYT4gPC9wPlxyXG4gICAgICAgIGA7XHJcbiBcclxuICB2YXIgICAgIGJsb2dwb3N0MDIyID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+IFxyXG4gICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiA8cD5cclxuICBgXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTAyMiA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gPGEgaHJlZj1cIlwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgICAgIDwvYT4gPC9wPlxyXG4gICAgIGA7XHJcbiAgICAgdmFyICAgICBibG9ncG9zdDAxMSA9IGAgXHJcbiAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiBcclxuICAgICAgPC9wPlxyXG4gICAgICA8cD4gPC9wPmBcclxuICAgICAgIDtcclxuICAgICAgIHZhciAgICAgIGJsb2djaXRlMDExID0gYCAgPHAgY2xhc3M9XCJjaXRlXCI+IDxhIGhyZWY9XCJcIiAgIHRhcmdldD1cIl9ibGFua1wiPjwvYT4gPC9wPlxyXG4gICAgICAgIFxyXG4gICAgICAgIGA7XHJcbiBcclxuICAgICAgICB2YXIgICAgIGJsb2dwb3N0MjIgPSBgIFxyXG4gICAgICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DbG91ZCBkYXRhIGlzIGF0IG9uY2UgZmFzdCwgc2VhbWxlc3MgYW5kIHBvd2VyZWQgYnkgbGltaXRsZXNzIGNvbXB1dGVyIHByb2Nlc3NpbmcgcG93ZXIgYW5kIHBhcnRpdGlvbnMhXHJcbiAgICAgICAgIDwvcD5cclxuICAgICAgICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgICAgICAgUmVzcG9uZGluZyB0byBhIHF1ZXN0aW9uIGFyb3VuZCBzbG93ZWQgY2FwZXggZ3Jvd3RoLCB0aGUgTWljcm9zb2Z0IENFTyBleHBsYWluZWQgdGhlIGNvbXBhbnnigJlzIGludGVsbGlnZW50IGNsb3VkIGFuZCBpbnRlbGxpZ2VudCBlZGdlIGV0aG9zIHdhcyBiZWluZyBzcHJlYWQgYWNyb3NzIGV2ZXJ5IGJ1c2luZXNzIGxpbmU7IGZyb20gQXp1cmUsIG9mIGNvdXJzZSwgdG8gRHluYW1pY3MgMzY1LCB0byBnYW1pbmcuIEl0IGlzIGEgdW5pZmllZCwgbG9uZy10ZXJtIG1lc3NhZ2UsIE5hZGVsbGEgYWRkZWQuIOKAnEZvciB0aGUgZmlyc3QgdGltZSwgd2hhdCB5b3Ugc2VlIGFjcm9zcyBNaWNyb3NvZnQgaXMgcmVhbGx5IG9uZSBwbGF0Zm9ybSB3aGljaCBzcGFucyBhbGwgb2YgdGhlc2UgYnVzaW5lc3NlcyBhbmQgYWxsIG9mIHRoZSBtYXJnaW4gc3RydWN0dXJlcyB0aGF0IGFyZSB0aGVyZSByZXByZXNlbnRlZCBpbiBpdCzigJ0gaGUgc2FpZC48c3VwPjE8L3N1cD48cD5cclxuICAgICAgICBgXHJcbiAgICAgICAgICA7XHJcbiAgICAgICAgICB2YXIgICAgICBibG9nY2l0ZTIyID0gYCBcclxuICAgICAgICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJodHRwczovL3d3dy5jbG91ZGNvbXB1dGluZy1uZXdzLm5ldC9uZXdzLzIwMTgvb2N0LzI1L21pY3Jvc29mdC1jaXRlcy1henVyZS1hbmQtY2xvdWQtc3RyZW5ndGgtbW9yZS1zdHJvbmctZmluYW5jaWFscy1pdHMtYWxsLWFib3V0LWxvbmctdGVybS1ldGhvcy9cclxuICAgICAgICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY2xvdWRjb21wdXRpbmctbmV3cy5uZXQvbmV3cy8yMDE4L29jdC8yNS9taWNyb3NvZnQtY2l0ZXMtYXp1cmUtYW5kLWNsb3VkLXN0cmVuZ3RoLW1vcmUtc3Ryb25nLWZpbmFuY2lhbHMtaXRzLWFsbC1hYm91dC1sb25nLXRlcm0tZXRob3MvXHJcbiAgICAgICAgICAgIDwvYT4gXHJcbiAgICAgICAgICAgYDtcclxuICAgICAgICAgICB2YXIgICAgIGJsb2dwb3N0MjEgPSBgIFxyXG4gICAgICAgICAgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5MaWdodCBtYXR0ZXJzIGFsb3QgbW9yZSB3aGVuIGl0cyBhdHRyaWJ1dGVzIHBvd2VyIGJvdGggcXVhbnR1bS1iYXNlZCBxdWJpdCBjYWxjdWxhdGlvbnMgYW5kIHRoZSBwcm9jZXNzIGl0c2VsZiBtYWtpbmcgbWV0YW1hdGVyaWFscyB0aGV5IGFyZSBiYXNlZCBvbiE8L3A+XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJxdW90ZVwiPkJyZWFrdGhyb3VnaHMgaW4gdGhlIGZpZWxkIG9mIG5hbm9waG90b25pY3MgLS0gaG93IGxpZ2h0IGJlaGF2ZXMgb24gdGhlIG5hbm9tZXRlciBzY2FsZSAtLSBoYXZlIHBhdmVkIHRoZSB3YXkgZm9yIHRoZSBpbnZlbnRpb24gb2YgXCJtZXRhbWF0ZXJpYWxzLFwiIGh1bWFuLW1hZGUgbWF0ZXJpYWxzIHRoYXQgaGF2ZSBlbm9ybW91cyBhcHBsaWNhdGlvbnMsIGZyb20gcmVtb3RlIG5hbm9zY2FsZSBzZW5zaW5nIHRvIGVuZXJneSBoYXJ2ZXN0aW5nIGFuZCBtZWRpY2FsIGRpYWdub3N0aWNzLiBCdXQgdGhlaXIgaW1wYWN0IG9uIGRhaWx5IGxpZmUgaGFzIGJlZW4gaGluZGVyZWQgYnkgYSBjb21wbGljYXRlZCBtYW51ZmFjdHVyaW5nIHByb2Nlc3Mgd2l0aCBsYXJnZSBtYXJnaW5zIG9mIGVycm9yLlxyXG4gICAgICAgICAgICA8YnIgLz48YnIgLz5cclxuICAgICAgICAgICAgXCJUaGUgcHJvY2VzcyBvZiBkZXNpZ25pbmcgbWV0YW1hdGVyaWFscyBjb25zaXN0cyBvZiBjYXJ2aW5nIG5hbm9zY2FsZSBlbGVtZW50cyB3aXRoIGEgcHJlY2lzZSBlbGVjdHJvbWFnbmV0aWMgcmVzcG9uc2UsXCIgRHIuIE1yZWplbiBzYXlzLiBcIkJ1dCBiZWNhdXNlIG9mIHRoZSBjb21wbGV4aXR5IG9mIHRoZSBwaHlzaWNzIGludm9sdmVkLCB0aGUgZGVzaWduLCBmYWJyaWNhdGlvbiBhbmQgY2hhcmFjdGVyaXphdGlvbiBwcm9jZXNzZXMgb2YgdGhlc2UgZWxlbWVudHMgcmVxdWlyZSBhIGh1Z2UgYW1vdW50IG9mIHRyaWFsIGFuZCBlcnJvciwgZHJhbWF0aWNhbGx5IGxpbWl0aW5nIHRoZWlyIGFwcGxpY2F0aW9ucy5cIlxyXG4gICAgICAgICAgICA8YnIgLz48YnIgLz5cclxuICAgICAgICAgICAgRGVlcCBMZWFybmluZyBhIGtleSB0byBwcmVjaXNpb24gbWFudWZhY3R1cmluZ1xyXG4gICAgICAgICAgICA8YnIgLz48YnIgLz5cclxuICAgICAgICAgICAgXCJPdXIgbmV3IGFwcHJvYWNoIGRlcGVuZHMgYWxtb3N0IGVudGlyZWx5IG9uIERlZXAgTGVhcm5pbmcsIGEgY29tcHV0ZXIgbmV0d29yayBpbnNwaXJlZCBieSB0aGUgbGF5ZXJlZCBhbmQgaGllcmFyY2hpY2FsIGFyY2hpdGVjdHVyZSBvZiB0aGUgaHVtYW4gYnJhaW4sXCIgUHJvZi4gV29sZiBleHBsYWlucy4gXCJJdCdzIG9uZSBvZiB0aGUgbW9zdCBhZHZhbmNlZCBmb3JtcyBvZiBtYWNoaW5lIGxlYXJuaW5nLCByZXNwb25zaWJsZSBmb3IgbWFqb3IgYWR2YW5jZXMgaW4gdGVjaG5vbG9neSwgaW5jbHVkaW5nIHNwZWVjaCByZWNvZ25pdGlvbiwgdHJhbnNsYXRpb24gYW5kIGltYWdlIHByb2Nlc3NpbmcuIFdlIHRob3VnaHQgaXQgd291bGQgYmUgdGhlIHJpZ2h0IGFwcHJvYWNoIGZvciBkZXNpZ25pbmcgbmFub3Bob3RvbmljLCBtZXRhbWF0ZXJpYWwgZWxlbWVudHMuXCI8c3VwPjE8L3N1cD48L3A+YFxyXG4gICAgICAgICAgICAgO1xyXG4gICAgICAgICAgICAgdmFyICAgICAgYmxvZ2NpdGUyMSA9IGAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJodHRwczovL3d3dy5zY2llbmNlZGFpbHkuY29tL3JlbGVhc2VzLzIwMTgvMTAvMTgxMDIzMTMwNTAyLmh0bVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuc2NpZW5jZWRhaWx5LmNvbS9yZWxlYXNlcy8yMDE4LzEwLzE4MTAyMzEzMDUwMi5odG0vYT4gPC9wPlxyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIGA7XHJcbiAgdmFyICAgICBibG9ncG9zdDIwID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TWF0ZXJpYWwgdGVjaG5vbG9naWVzIHRvbyBvZnRlbiByZW1haW4gdGhlIHVuc3VuZyBoZXJvIGZvciBzbyBtdWNoIGFkdmFuY2VtZW50IGluIGFueSBmaWVsZC5cclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5UaGUgYm9keSBtYXRlcmlhbCBpdHNlbGYgaXMgd2hhdCBNY0xhcmVuIGNhbGxzIFwidGl0YW5pdW0gZGVwb3NpdGlvbiBjYXJib24gZmliZXIsXCIgd2hlcmUgYSBtaWNyb24tdGhpbiBsYXllciBvZiB0aXRhbml1bSBpcyBmdXNlZCBkaXJlY3RseSBpbnRvIHRoZSBmaWJlcidzIHdlYXZlLCBiZWNvbWluZyBhbiBpbnRlZ3JhbCBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3Rpb24uPHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxpbWcgc3JjPVwiZGlzdC9pbWcvbWNsYXJlbi5qcGdcIiBjbGFzcz1cInpvb21cIiAvPjxwPlxyXG4gIE1jTGFyZW4ganVzdCByZWludmVudGVkIHRoZSB3aW5nLS1lcmh1bSwgYnkgZG9pbmcgYXdheSB3aXRoIHRoZSBzcG9pbGVyIHdpbmc/IEJ5IGFsZ29yaXRobWljYWxseSBhZGp1c3RpbmcgdGhlIGNlbnRlcnMgb2Ygd2luZGZsb3cgcHJlc3N1cmUgYmFzZWQgb24gc3BlZWQsIG90aGVyIGZhY3RvcnMgb3B0aW1pemVzIC0tIHJlaW52ZW50cyAtLSB0aGUgd2luZzo8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZSBlbnRpcmUgYm9keSBpcyBtYWRlIGZyb20gbGlnaHR3ZWlnaHQgY2FyYm9uIGZpYmVyLCBwYXJ0cyBvZiB3aGljaCBhcmUgYWN0dWFsbHkgZmxleGlibGUuIE9uIGVhY2ggZW5kIG9mIHRoZSB0YWlsLCBhY3RpdmUgYWlsZXJvbnMgY2FuIGFjdHVhbGx5IGJlbmQsIHJlZHVjaW5nIHR1cmJ1bGVuY2UgYW5kIGRyYWcgYXQgaGlnaGVyIHNwZWVkcy4gQWNjb3JkaW5nIHRvIE1jTGFyZW4sIHRoZXNlIGFpbGVyb25zIFwiYWRqdXN0IHRvIG1vdmUgdGhlIGNlbnRlciBvZiBwcmVzc3VyZSBhbmQgcHJvdmlkZSB0aGUgcmVxdWlyZWQgbGV2ZWwgb2YgZG93bmZvcmNlIHByZWNpc2VseSB3aGVuIGl0IGlzIG5lZWRlZCBtb3N0LlwiIEl0J3MgYWlyc3BhY2UgdGVjaCBpbiBhbiBhdXRvbW90aXZlIGFwcGxpY2F0aW9uLCBhbmQgaXQgYWxsZXZpYXRlcyB0aGUgbmVlZCBmb3IgYSBzaWxseSByZWFyIHdpbmcuPHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxwPldpdGggYSBsaXR0bGUgbW9yZSBwcmVjaXNpb24gYW5kIHJlbGlhYmlsaXR5LCB3aGF0IHNob3VsZCBzdG9wIHRoZW0gZnJvbSBpbnZlcnRpbmcgYWlyLWZsb3csIGFuZCBzdHJhcCBzb21lIHdpbmdzIGFuZCBhIHR1cmJpbmUgdG8gdGhhdCAxLDAwMCBob3JzZS1wb3dlciBlbmdpbmUhPHA+XHJcbiAgYFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUyMCA9IGAgXHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vcm9hZHNob3cvbmV3cy9tY2xhcmVuLXNwZWVkdGFpbC1vZmZpY2lhbC1kZWJ1dC9cclxuICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25ldC5jb20vcm9hZHNob3cvbmV3cy9tY2xhcmVuLXNwZWVkdGFpbC1vZmZpY2lhbC1kZWJ1dC9cclxuICAgICAgPC9hPiBcclxuICAgICBgO1xyXG4gICAgIHZhciAgICAgYmxvZ3Bvc3QxOSA9IGAgXHJcbiAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPkRhdGEgcHJpdmFjeSdzIG5ldyBoZXJvIHJhaXNlcyBhdHRlbnRpb24gdG8gb25lIG9mIHRoZSBtb3JlIHByZXNzaW5nIGlzc3VlIG9mIHRlY2hub2xvZ3kgaW4gb3VyIGxpdmVzOlxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5BcHBsZeKAmXMgY2hpZWYgZXhlY3V0aXZlLCBUaW0gQ29vaywgY2FsbGVkIG9uIFdlZG5lc2RheSBmb3IgYSBmZWRlcmFsIHByaXZhY3kgbGF3IGluIHRoZSBVUyB0byBwcm90ZWN0IGFnYWluc3Qgdm9yYWNpb3VzIGludGVybmV0IGNvbXBhbmllcyBob2FyZGluZyBzbyBtdWNoIGRpZ2l0YWwgZGF0YSB0aGF0IHRoZSBidXNpbmVzc2VzIGtub3cgY2l0aXplbnMg4oCcYmV0dGVyIHRoYW4gdGhleSBrbm93IHRoZW1zZWx2ZXPigJ0g4oCTIGFuZCB0aGVuIG9mdGVuIHNlbGwgdGhlIGluZm9ybWF0aW9uIG9uLlxyXG48YnIgLz48YnIgLz5cclxuICAgICAgQ29vayB3YXJuZWQgaW4gYSBrZXlub3RlIHNwZWVjaCB0aGF0IHBlcnNvbmFsIGRhdGEgd2FzIGJlaW5nIOKAnHdlYXBvbml6ZWTigJ0gYWdhaW5zdCB0aGUgcHVibGljIGFuZCBlbmRvcnNlZCB0b3VnaCBwcml2YWN5IGxhd3MgZm9yIGJvdGggRXVyb3BlIGFuZCB0aGUgVVMuIFRoZSBpUGhvbmUgYW5kIE1hYyBjb21wdXRlciBnaWFudCBoYXMgc3Rvb2Qgb3V0IGluIGl0cyBleHBsaWNpdCBkZWNsYXJhdGlvbnMgdGhhdCBBcHBsZSBwcmVmZXJzIHRvIHByb3RlY3QgaXRzIGN1c3RvbWVyc+KAmSBwZXJzb25hbCBkYXRhLlxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwPkltcG9ydGFudGx5LCBUaW0gQ29vayBhZGRyZXNzZXMgdGhlIG1vc3Qgc2Vuc2l0aXZlIG9mIGRhdGEgYWJvdXQgb3Vyc2VsdmVzLCBpLmUuIHRoZSBuZXh1cyBvZiB2b2x1bnRlZXJlZCBhbmQgb2JzZXJ2ZWQgZGF0YTogPGk+aW5mZXJyZWQgZGF0YTwvaT46XHJcbiAgICAgPHAgY2xhc3M9XCJxdW90ZVwiPkJyb2FkbHkgW3BlcnNvbmFsIGRhdGFdIGNhbiBiZSBzcGxpdCBpbnRvIHRocmVlIGNhdGVnb3JpZXM6IFZvbHVudGVlcmVkIGRhdGEgaXMgaW5mb3JtYXRpb24gd2Ugd2lsbGluZ2x5IHBhcnQgd2l0aCBpbiBvbmxpbmUgc3VydmV5cyBhbmQgc29jaWFsIG1lZGlhIHByb2ZpbGVzLiBPYnNlcnZlZCBkYXRhIGlzIGNhcHR1cmVkIHRocm91Z2ggdGhlIG9ic2VydmF0aW9uIG9mIGFjdGlvbnMgYW5kIGludGVyYWN0aW9ucyBvZiBpbmRpdmlkdWFscyAoR1BTIGRhdGEgYW5kIHRlbGVjb21zIG1ldGFkYXRhLCBmb3IgZXhhbXBsZSkuIEluZmVycmVkIGRhdGEgaXMgdXNlZCB0byBjb21wbGV0ZSB0aGUgcGljdHVyZSBieSBtaW5pbmcgdGhvc2UgZmlyc3QgdHdvIGNhdGVnb3JpZXMuPHN1cD4xPC9zdXA+PC9wPmBcclxuICAgICAgIDtcclxuICAgICAgIHZhciAgICAgIGJsb2djaXRlMTkgPSBgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly93d3cudGhlZ3VhcmRpYW4uY29tL3RlY2hub2xvZ3kvMjAxOC9vY3QvMjQvdGltLWNvb2stdXMtZmVkZXJhbC1wcml2YWN5LWxhdy13ZWFwb25pemVkLXBlcnNvbmFsLWRhdGFcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS90ZWNobm9sb2d5LzIwMTgvb2N0LzI0L3RpbS1jb29rLXVzLWZlZGVyYWwtcHJpdmFjeS1sYXctd2VhcG9uaXplZC1wZXJzb25hbC1kYXRhPC9hPiA8L3A+XHJcbiAgICAgICBcclxuICAgICAgIDxwIGNsYXNzPVwiY2l0ZVwiPiAyIDxhIGhyZWY9XCJodHRwczovL21lZGl1bS5jb20vcy9uZXctd29ybGQtY3JpbWUvaG93LW11Y2gtYXJlLXlvdS13b3J0aC1pbi10aGUtb25saW5lLWRhdGEtZWNvbm9teS01YWUyZGQyMzYxMzVcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgaHR0cHM6Ly9tZWRpdW0uY29tL3MvbmV3LXdvcmxkLWNyaW1lL2hvdy1tdWNoLWFyZS15b3Utd29ydGgtaW4tdGhlLW9ubGluZS1kYXRhLWVjb25vbXktNWFlMmRkMjM2MTM1PC9hPiA8L3A+XHJcbiAgICAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MTggPSBgICAgICAgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5CaWdnZXIsIEZhc3RlciBJbWFnZSBSZW5kZXJpbmctLWVzcGVjaWFsbHkgd2hlbiBkYXRhIHBvaW50cyBhcmUgdGllZCB0byB0aGUgcGl4ZWxzIG9mIGEgcGFnZSwgYnV0IGVzcGVjaWFsbHkgc3RpbGwgcGljdHVyZXMgc2hvdWxkIGJlIHRoZSBicm93c2VycycgVGFzayAjMS4gSW5zdGVhZCwgbG9hZC10aW1lcyB0b28gb2Z0ZW4gZmFsbCB2aWN0aW0gdG8gdGhlIGdyYXBoaWNzIC4uLiBidXQgdGhlIGJyb3dzZXIgd29ybGQgaXMgbm93IHdpbGxpbmcgdG8gd29yayB0b2dldGhlciBmb3IgIGFjdGlvbjpcclxuICAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5Hb29nbGUgcmV2ZWFsZWQgV2ViUCBlaWdodCB5ZWFycyBhZ28gYW5kIHNpbmNlIHRoZW4gaGFzIGJ1aWx0IGl0IGludG8gaXRzIENocm9tZSB3ZWIgYnJvd3NlciwgQW5kcm9pZCBwaG9uZSBzb2Z0d2FyZSBhbmQgbWFueSBvZiBpdHMgb25saW5lIHByb3BlcnRpZXMgaW4gYW4gZWZmb3J0IHRvIHB1dCB3ZWJzaXRlcyBvbiBhIGRpZXQgYW5kIGN1dCBuZXR3b3JrIGRhdGEgdXNhZ2UuIEJ1dCBHb29nbGUgaGFkIHRyb3VibGUgZW5jb3VyYWdpbmcgcml2YWwgYnJvd3NlciBtYWtlcnMgdG8gZW1icmFjZSBpdC5cclxuICA8YnIgLz48YnIgLz5cclxuICBcIk1vemlsbGEgaXMgbW92aW5nIGZvcndhcmQgd2l0aCBpbXBsZW1lbnRpbmcgc3VwcG9ydCBmb3IgV2ViUCxcIiB0aGUgbm9ucHJvZml0IG9yZ2FuaXphdGlvbiBzYWlkLiBXZWJQIHdpbGwgd29yayBpbiB2ZXJzaW9ucyBvZiBGaXJlZm94IGJhc2VkIG9uIGl0cyBHZWNrbyBicm93c2VyIGVuZ2luZSwgRmlyZWZveCBmb3IgcGVyc29uYWwgY29tcHV0ZXJzIGFuZCBBbmRyb2lkIGJ1dCBub3QgZm9yIGlPUy4gTW96aWxsYSBwbGFucyB0byBhZGQgc3VwcG9ydCBpbiB0aGUgZmlyc3QgaGFsZiBvZiAyMDE5LlxyXG5cclxuQ29tbWl0dGluZyB0byBhIG5ldyBpbWFnZSBmb3JtYXQgb24gdGhlIHdlYiBpcyBhIGJpZyBkZWFsLiBJbiBhZGRpdGlvbiB0byB0ZWNobmljYWwgY2hhbGxlbmdlcyBhbmQgbmV3IHNlY3VyaXR5IHJpc2tzLCBlbWJyYWNpbmcgYSBuZXcgaW1hZ2UgZm9ybWF0IG1lYW5zIGVtYnJhY2luZyBpdCBmb3IgeWVhcnMgYW5kIHllYXJzLCBiZWNhdXNlIHJlbW92aW5nIHN1cHBvcnQgYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlIHdpbGwgYnJlYWsgd2Vic2l0ZXMgdGhhdCByZWx5IG9uIGl0LlxyXG48YnIgLz48YnIgLz5cclxuSXQncyBvbmUgb2YgdGhlIGNlbnRyYWwgY29udW5kcnVtcyBvZiB0aGUgd2ViLiBCcm93c2VyIG1ha2VycyBhbmQgd2Vic2l0ZSBkZXZlbG9wZXJzIHdhbnQgdG8gYWR2YW5jZSB0aGUgdGVjaG5vbG9neSwgYnV0IHRoZXkgY2FuJ3QgcmVtb3ZlIG9sZGVyIGFzcGVjdHMgb2YgdGhlIGZvdW5kYXRpb24gYXMgcmVhZGlseSBhcyBHb29nbGUgY2FuIHdpdGggQW5kcm9pZCBvciBBcHBsZSB3aXRoIGl0cyByaXZhbCBpT1Mgc29mdHdhcmUuIFdlYnNpdGVzIGhhdmUgYSBsb25nIHNoZWxmIGxpZmUuPHN1cD4xPC9zdXA+PC9wPmBcclxuICAgIDtcclxuICAgIHZhciAgICAgIGJsb2djaXRlMTggPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNuZXQuY29tL25ld3MvZmlyZWZveC10by1zdXBwb3J0LWdvb2dsZXMtd2VicC1pbWFnZS1mb3JtYXQtZm9yLWEtZmFzdGVyLXdlYi9cclxuICAgIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25ldC5jb20vbmV3cy9maXJlZm94LXRvLXN1cHBvcnQtZ29vZ2xlcy13ZWJwLWltYWdlLWZvcm1hdC1mb3ItYS1mYXN0ZXItd2ViL1xyXG4gICAgICA8L2E+IFxyXG4gICAgIGA7XHJcbiAgICAgdmFyICAgICBibG9ncG9zdDE3ID0gYCBcclxuICAgICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+Qm9vdHN0cmFwcGluZyBhbmFseXRpYyBtb2RlbHMgaW4gYW55IHNjaWVuY2UgcmVxdWlyZXMgYSBsb25nLCBzdGVhZHkgY2xpbWIgdXBvbiB0aGUgPGk+U2hvdWxkZXJzIG9mIEdpYW50czwvaT4sIHllYXJzIGFuZCBkZWNhZGVzJyBwYXN0IHJlc2VhcmNoIGdhaW5zLS1lc3BlY2lhbGx5ICBDbGFzc2lmaWNhdGlvbiBhbmQgUmVncmVzc2lvbiBUcmVlcyAuIFxyXG4gICAgICA8L3A+XHJcbiAgICAgPHAgY2xhc3M9XCJxdW90ZVwiPldoZW4gYXBwcm9hY2hpbmcgYW55IHR5cGUgb2YgTWFjaGluZSBMZWFybmluZyAoTUwpIHByb2JsZW0gdGhlcmUgYXJlIG1hbnkgZGlmZmVyZW50IGFsZ29yaXRobXMgdG8gY2hvb3NlIGZyb20uIEluIG1hY2hpbmUgbGVhcm5pbmcsIHRoZXJl4oCZcyBzb21ldGhpbmcgY2FsbGVkIHRoZSDigJxObyBGcmVlIEx1bmNo4oCdIHRoZW9yZW0gd2hpY2ggYmFzaWNhbGx5IHN0YXRlcyB0aGF0IG5vIG9uZSBNTCBhbGdvcml0aG0gaXMgYmVzdCBmb3IgYWxsIHByb2JsZW1zLiBUaGUgcGVyZm9ybWFuY2Ugb2YgZGlmZmVyZW50IE1MIGFsZ29yaXRobXMgc3Ryb25nbHkgZGVwZW5kcyBvbiB0aGUgc2l6ZSBhbmQgc3RydWN0dXJlIG9mIHlvdXIgZGF0YS48c3VwPjE8L3N1cD48L3A+YFxyXG4gICAgICAgO1xyXG4gICAgICAgdmFyICAgICAgYmxvZ2NpdGUxNyA9IGAgXHJcbiAgICAgICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly90b3dhcmRzZGF0YXNjaWVuY2UuY29tL3NlbGVjdGluZy10aGUtYmVzdC1tYWNoaW5lLWxlYXJuaW5nLWFsZ29yaXRobS1mb3IteW91ci1yZWdyZXNzaW9uLXByb2JsZW0tMjBjMzMwYmFkNGVmXHJcbiAgICAgICBcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICAgaHR0cHM6Ly90b3dhcmRzZGF0YXNjaWVuY2UuY29tL3NlbGVjdGluZy10aGUtYmVzdC1tYWNoaW5lLWxlYXJuaW5nLWFsZ29yaXRobS1mb3IteW91ci1yZWdyZXNzaW9uLXByb2JsZW0tMjBjMzMwYmFkNGVmXHJcbiAgICAgICAgIDwvYT4gXHJcbiAgICAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MTYgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BcHBsZSBWLiBCbG9vbWJlcmcuIEJsb29tYmVyZyBoaXQgZmlyc3QuIE11Y2ggY29udHJvdmVyc3kgbm93IHN1cnJvdW5kcyB0aGUgdG9waWMgb2YgbXkgT2N0b2JlciAxMHRoIHBvc3QtLXRoYXQgQmxvb21iZXJnIGNsYWltaW5nIHRoYXQgQXBwbGUgd2FzIGF3YXJlIG9mIHBvdGVudGlhbCBjaGlwIGVtYmVkcyBmcm9tIGZvcmVpZ24gbWFudWZhY3R1cmVycy4gV2hvc2UgbmV3cyBjYW4gb25lIGJlbGlldmUgYW55bW9yZT8gXHJcbiAgIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IEFwcGxlIEluYyBDaGllZiBFeGVjdXRpdmUgVGltIENvb2sgb24gRnJpZGF5IHRvbGQgYW4gb25saW5lIG5ld3Mgd2Vic2l0ZSB0aGF0IEJsb29tYmVyZyBzaG91bGQgcmV0cmFjdCBhIHN0b3J5IHRoYXQgY2xhaW1lZCBBcHBsZeKAmXMgaW50ZXJuYWwgY29tcHV0ZXIgc3lzdGVtcyBoYWQgYmVlbiBpbmZpbHRyYXRlZCBieSBtYWxpY2lvdXMgY29tcHV0ZXIgY2hpcHMgaW5zZXJ0ZWQgYnkgQ2hpbmVzZSBpbnRlbGxpZ2VuY2UgYWdlbnRzLiA8YnIgLz48YnIgLz5cclxuICDigJxUaGVyZSBpcyBubyB0cnV0aCBpbiB0aGVpciBzdG9yeSBhYm91dCBBcHBsZSzigJ0gQ29vayB0b2xkIEJ1enpGZWVkIE5ld3MgaW4gYW4gaW50ZXJ2aWV3IHdpdGggdGhlIG9ubGluZSBwdWJsaWNhdGlvbi4g4oCcVGhleSBuZWVkIHRvIGRvIHRoYXQgcmlnaHQgdGhpbmcgYW5kIHJldHJhY3QgaXQu4oCdPHN1cD4yPC9zdXA+PC9wPmBcclxuICAgIDtcclxuICAgIHZhciAgICAgIGJsb2djaXRlMTYgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cIiBodHRwczovL3d3dy5yZXV0ZXJzLmNvbS9hcnRpY2xlL3VzLWFwcGxlLWJsb29tYmVyZy9hcHBsZS1jZW8tdXJnZXMtYmxvb21iZXJnLXRvLXJldHJhY3Qtc3B5LWNoaXAtc3RvcnktaWRVU0tDTjFNVDJaOFxyXG4gICAgXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgIGh0dHBzOi8vd3d3LnJldXRlcnMuY29tL2FydGljbGUvdXMtYXBwbGUtYmxvb21iZXJnL2FwcGxlLWNlby11cmdlcy1ibG9vbWJlcmctdG8tcmV0cmFjdC1zcHktY2hpcC1zdG9yeS1pZFVTS0NOMU1UMlo4XHJcbiAgICBcclxuICAgIFxyXG4gICAgICA8L2E+IFxyXG4gICAgIGA7XHJcbiAgdmFyICAgICBibG9ncG9zdDE1ID0gYCBcclxuICA8cD5cclxuICBNYXRoZW1hdGljYWxseSwgcmVhZGluZyB0aW1lICAgbmVjZXNzYXJpbHkgZGl2aWRlcyBpdHNlbGYgdXAgaW50byBzbWFsbCBwaWVjZXMgbm93IHRoYXQgZXZlcnlvbmUgaXMgYSBjbGljayBhd2F5IGZyb20gYW55dGhpbmcgcmVhZGFibGUsIGV2ZXJ5IG5vdmVsIHdyaXR0ZW4sIGF0IGEgbW9tZW50J3MgZG93bmxvYWQsIHdpdGhvdXQgb3Igd2l0aG91dCBlYXN5IHBob25lIGFuZCB0YWJsZXQgcmVhZGluZy4gQnV0IGdpdmVuIHRoYXQgY2hvaWNlLCB0aGUgdHJlbmQgdG93YXJkIGZpY3Rpb24gaXMgbm90IHdpdGhvdXQgZ29vZCByZWFzb24gLi4uIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiAgTW9kZXJuIGRheSByZWFkaW5nIGhhYml0cyBjb250aW51ZSB0byBldm9sdmUgaW4gYSBkaWdpdGFsIGFnZS4gU3RhdGlzdGljcyB2YXJ5IG9uIGV4YWN0bHkgaG93IG1hbnkgcGVvcGxlIGFyZSByZWFkaW5nIG5vdmVscyB0aGlzIGRlY2FkZSBjb21wYXJlZCB0byBkZWNhZGVzIHBhc3QuIFRoZXJlIGlzIGEgZGVmaW5pdGUgdHJlbmQgZm9yIGdlbmVyYWwgcmVhZGVycyB0byBidXkgbW9yZSBmaWN0aW9uIHRoYW4gbm9uZmljdGlvbiBib29rc+KAlGFuZCB0byBnZXQgZmFjdHMsIG5ld3MgYW5kIGNyeXN0YWxsaXplZCBrbm93bGVkZ2UgZnJvbSB0aGUgaW50ZXJuZXQuIEluIDIwMTIsIG9ubHkgZm91ciBvZiB0aGUgdG9wIHR3ZW50eSBib29rcyB3ZXJlIG5vbmZpY3Rpb24gdGl0bGVzLjxiciAvPjxiciAvPlxyXG5cclxuXCJQZW9wbGUgYXJlIGludGVyZXN0ZWQgaW4gZXNjYXBlLFwiIHNheXMgQ2Fyb2wgRml0emdlcmFsZCBvZiB0aGUgQm9vayBSZXBvcnQgTmV0d29yay4gXCJJbiBhIG51bWJlciBvZiBwYWdlcywgdGhlIHN0b3J5IHdpbGwgb3BlbiwgZXZvbHZlIGFuZCBjbG9zZSwgYW5kIGEgbG90IG9mIHdoYXQncyBnb2luZyBvbiBpbiB0aGUgd29ybGQgdG9kYXkgaXMgbm90IGxpa2UgdGhhdC4gWW91J3ZlIGdvdCB0aGlzIGVuY2Fwc3VsYXRlZCBlc2NhcGUgdGhhdCB5b3UgY2FuIGVuam95LlwiPHN1cD4yPC9zdXA+PC9wPmBcclxuICAgIDtcclxuICAgIHZhciAgICAgIGJsb2djaXRlMTUgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnNtaXRoc29uaWFubWFnLmNvbS9zbWFydC1uZXdzL2dyb3dpbmctc3Vycm91bmRlZC1ib29rcy1tYXktYm9sc3Rlci1za2lsbHMtbGF0ZXItbGlmZS0xODA5NzA1MjMvXHJcbiAgICBcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgaHR0cHM6Ly93d3cuc21pdGhzb25pYW5tYWcuY29tL3NtYXJ0LW5ld3MvZ3Jvd2luZy1zdXJyb3VuZGVkLWJvb2tzLW1heS1ib2xzdGVyLXNraWxscy1sYXRlci1saWZlLTE4MDk3MDUyMy9cclxuICAgIFxyXG4gICAgXHJcbiAgICAgIDwvYT5cclxuICAgICAgPC9wPiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDIgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnBzeWNob2xvZ3l0b2RheS5jb20vdXMvYmxvZy90aGUtYXRobGV0ZXMtd2F5LzIwMTQwMS9yZWFkaW5nLWZpY3Rpb24taW1wcm92ZXMtYnJhaW4tY29ubmVjdGl2aXR5LWFuZC1mdW5jdGlvblxyXG5cIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG5odHRwczovL3d3dy5wc3ljaG9sb2d5dG9kYXkuY29tL3VzL2Jsb2cvdGhlLWF0aGxldGVzLXdheS8yMDE0MDEvcmVhZGluZy1maWN0aW9uLWltcHJvdmVzLWJyYWluLWNvbm5lY3Rpdml0eS1hbmQtZnVuY3Rpb25cclxuXHJcbmh0dHBzOi8vd3d3LnNtaXRoc29uaWFubWFnLmNvbS9zbWFydC1uZXdzL2dyb3dpbmctc3Vycm91bmRlZC1ib29rcy1tYXktYm9sc3Rlci1za2lsbHMtbGF0ZXItbGlmZS0xODA5NzA1MjMvXHJcbiAgPC9hPlxyXG4gIDwvcD4gICBcclxuXHJcbiAgICAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MTQgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UZWNobm9sb2d5IHByb3ZpZGVzIHRoZSByZXNvdXJjZXMgZm9yIGEgYmV0dGVyIGxpZmUgYWxsIGFyb3VuZCAuLi4gPC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPiBcclxuICAgIFRoZSBtb3JlIHNvcGhpc3RpY2F0ZWQgc2NpZW5jZSBiZWNvbWVzLCB0aGUgaGFyZGVyIGl0IGlzIHRvIGNvbW11bmljYXRlIHJlc3VsdHMuIFBhcGVycyB0b2RheSBhcmUgbG9uZ2VyIHRoYW4gZXZlciBhbmQgZnVsbCBvZiBqYXJnb24gYW5kIHN5bWJvbHMuIFRoZXkgZGVwZW5kIG9uIGNoYWlucyBvZiBjb21wdXRlciBwcm9ncmFtcyB0aGF0IGdlbmVyYXRlIGRhdGEsIGFuZCBjbGVhbiB1cCBkYXRhLCBhbmQgcGxvdCBkYXRhLCBhbmQgcnVuIHN0YXRpc3RpY2FsIG1vZGVscyBvbiBkYXRhLiBUaGVzZSBwcm9ncmFtcyB0ZW5kIHRvIGJlIGJvdGggc28gc2xvcHBpbHkgd3JpdHRlbiBhbmQgc28gY2VudHJhbCB0byB0aGUgcmVzdWx0cyB0aGF0IGl04oCZcyBjb250cmlidXRlZCB0byBhIHJlcGxpY2F0aW9uIGNyaXNpcywgb3IgcHV0IGFub3RoZXIgd2F5LCBhIGZhaWx1cmUgb2YgdGhlIHBhcGVyIHRvIHBlcmZvcm0gaXRzIG1vc3QgYmFzaWMgdGFzazogdG8gcmVwb3J0IHdoYXQgeW914oCZdmUgYWN0dWFsbHkgZGlzY292ZXJlZCwgY2xlYXJseSBlbm91Z2ggdGhhdCBzb21lb25lIGVsc2UgY2FuIGRpc2NvdmVyIGl0IGZvciB0aGVtc2VsdmVzLjxiciAvPjxiciAvPlxyXG4gICAgUGVyaGFwcyB0aGUgcGFwZXIgaXRzZWxmIGlzIHRvIGJsYW1lLiBTY2llbnRpZmljIG1ldGhvZHMgZXZvbHZlIG5vdyBhdCB0aGUgc3BlZWQgb2Ygc29mdHdhcmU7IHRoZSBza2lsbCBtb3N0IGluIGRlbWFuZCBhbW9uZyBwaHlzaWNpc3RzLCBiaW9sb2dpc3RzLCBjaGVtaXN0cywgZ2VvbG9naXN0cywgZXZlbiBhbnRocm9wb2xvZ2lzdHMgYW5kIHJlc2VhcmNoIHBzeWNob2xvZ2lzdHMsIGlzIGZhY2lsaXR5IHdpdGggcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzIGFuZCDigJxkYXRhIHNjaWVuY2XigJ0gcGFja2FnZXMuIEFuZCB5ZXQgdGhlIGJhc2ljIG1lYW5zIG9mIGNvbW11bmljYXRpbmcgc2NpZW50aWZpYyByZXN1bHRzIGhhc27igJl0IGNoYW5nZWQgZm9yIDQwMCB5ZWFycy4gUGFwZXJzIG1heSBiZSBwb3N0ZWQgb25saW5lLCBidXQgdGhleeKAmXJlIHN0aWxsIHRleHQgYW5kIHBpY3R1cmVzIG9uIGEgcGFnZS48c3VwPjE8L3N1cD48L3A+XHJcbiAgICA8cD5BbmFjb25kYSwgdGhlIHByb2dyYW1taW5nIHBhY2thZ2UgYnVuZGxlIGZlYXR1cmVzIG1hdGggc29mdHdhcmUgd2l0aCBTcHlkZXIgYXBwbGljYXRpb25zLCB5ZXQgdGhlIEp1cHl0ZXIgbm90ZWJvb2sgaXMgYWxyZWFkeSByZXZvbHV0aW9uaXppbmcgYWNhZGVtaWMgcHVibGljYXRpb25zLi4uYFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxNCA9IGAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cIlxyXG4gIGh0dHBzOi8vd3d3LnZveC5jb20vMjAxNC8xMS8yNC83MjcyOTI5L2dsb2JhbC1wb3ZlcnR5LWhlYWx0aC1jcmltZS1saXRlcmFjeS1nb29kLW5ld3NcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIGh0dHBzOi8vd3d3LnZveC5jb20vMjAxNC8xMS8yNC83MjcyOTI5L2dsb2JhbC1wb3ZlcnR5LWhlYWx0aC1jcmltZS1saXRlcmFjeS1nb29kLW5ld3NcclxuICA8L2E+XHJcbiAgPC9wPiAgIFxyXG4gICAgIGA7XHJcbiAgdmFyICAgICBibG9ncG9zdDEzID0gYCBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+VGhlIENvbGxlZ2UgVGVybS1QYXBlciwgdGhlIHBlcmVubmlhbCBvYmplY3Qgb2YgZHJlYWQgb3IgZWxhdGlvbiwgb2YgdGVkaXVtIG9yIGV4Y2l0ZW1lbnQuIFlldCwgbW9yZSBhbmQgbW9yZSwgdGhlIG5lZWRzIGZvciBjb21tdW5pY2F0aW9uIHJlcXVpcmUgdGhlIGluY2x1c2lvbiBvZiBwcm9ncmFtbWluZywgYW5hbHl0aWMgbGFuZ3VhZ2UuIFBhcmFncmFwaHMgb2YgZWxvcXVlbnRseSB3cml0dGVuIGNvZGUgd2l0aCBwYXJhZ3JhcGhzIG9mIHN5bm9wc2lzLCBmcm9tIG9uZSBsb2dpY2FsIHN0YXRlbWVudCB0byB0aGUgbmV4dCwgbGF5aW5nIG91dCB0aGUgcHJvb2ZzIHdpdGggZWFjaCBwYXJhZ3JhcGguIEJlc3QgeWV0LCBpdCBpcyBpbm5hdGVseSBvbmxpbmUgYW5kIHByZXNlbnRhYmxlLCBhbmQgZW1wbG95cyB0aGUgcG93ZXJmdWwgbGFuZ3VhZ2VzIGxpa2UgUHl0aG9uIGFuZCBSLiBCdXQgaG93IHRvIGNvbW11bmljYXRlIHRoZXNlIHNwZWNpYWxpemVkIHBhcGVycyB0byBhIHdpZGUgYXVkaWVuY2U/PC9wPlxyXG4gICAgPHAgY2xhc3M9XCJxdW90ZVwiPiBcclxuICAgIFRoZSBtb3JlIHNvcGhpc3RpY2F0ZWQgc2NpZW5jZSBiZWNvbWVzLCB0aGUgaGFyZGVyIGl0IGlzIHRvIGNvbW11bmljYXRlIHJlc3VsdHMuIFBhcGVycyB0b2RheSBhcmUgbG9uZ2VyIHRoYW4gZXZlciBhbmQgZnVsbCBvZiBqYXJnb24gYW5kIHN5bWJvbHMuIFRoZXkgZGVwZW5kIG9uIGNoYWlucyBvZiBjb21wdXRlciBwcm9ncmFtcyB0aGF0IGdlbmVyYXRlIGRhdGEsIGFuZCBjbGVhbiB1cCBkYXRhLCBhbmQgcGxvdCBkYXRhLCBhbmQgcnVuIHN0YXRpc3RpY2FsIG1vZGVscyBvbiBkYXRhLiBUaGVzZSBwcm9ncmFtcyB0ZW5kIHRvIGJlIGJvdGggc28gc2xvcHBpbHkgd3JpdHRlbiBhbmQgc28gY2VudHJhbCB0byB0aGUgcmVzdWx0cyB0aGF0IGl04oCZcyBjb250cmlidXRlZCB0byBhIHJlcGxpY2F0aW9uIGNyaXNpcywgb3IgcHV0IGFub3RoZXIgd2F5LCBhIGZhaWx1cmUgb2YgdGhlIHBhcGVyIHRvIHBlcmZvcm0gaXRzIG1vc3QgYmFzaWMgdGFzazogdG8gcmVwb3J0IHdoYXQgeW914oCZdmUgYWN0dWFsbHkgZGlzY292ZXJlZCwgY2xlYXJseSBlbm91Z2ggdGhhdCBzb21lb25lIGVsc2UgY2FuIGRpc2NvdmVyIGl0IGZvciB0aGVtc2VsdmVzLjxiciAvPjxiciAvPlxyXG4gICAgUGVyaGFwcyB0aGUgcGFwZXIgaXRzZWxmIGlzIHRvIGJsYW1lLiBTY2llbnRpZmljIG1ldGhvZHMgZXZvbHZlIG5vdyBhdCB0aGUgc3BlZWQgb2Ygc29mdHdhcmU7IHRoZSBza2lsbCBtb3N0IGluIGRlbWFuZCBhbW9uZyBwaHlzaWNpc3RzLCBiaW9sb2dpc3RzLCBjaGVtaXN0cywgZ2VvbG9naXN0cywgZXZlbiBhbnRocm9wb2xvZ2lzdHMgYW5kIHJlc2VhcmNoIHBzeWNob2xvZ2lzdHMsIGlzIGZhY2lsaXR5IHdpdGggcHJvZ3JhbW1pbmcgbGFuZ3VhZ2VzIGFuZCDigJxkYXRhIHNjaWVuY2XigJ0gcGFja2FnZXMuIEFuZCB5ZXQgdGhlIGJhc2ljIG1lYW5zIG9mIGNvbW11bmljYXRpbmcgc2NpZW50aWZpYyByZXN1bHRzIGhhc27igJl0IGNoYW5nZWQgZm9yIDQwMCB5ZWFycy4gUGFwZXJzIG1heSBiZSBwb3N0ZWQgb25saW5lLCBidXQgdGhleeKAmXJlIHN0aWxsIHRleHQgYW5kIHBpY3R1cmVzIG9uIGEgcGFnZS48c3VwPjE8L3N1cD48L3A+XHJcbiAgICA8cD5BbmFjb25kYSwgdGhlIHByb2dyYW1taW5nIHBhY2thZ2UgYnVuZGxlIGZlYXR1cmVzIG1hdGggc29mdHdhcmUgd2l0aCBTcHlkZXIgYXBwbGljYXRpb25zLCB5ZXQgdGhlIEp1cHl0ZXIgbm90ZWJvb2sgaXMgYWxyZWFkeSByZXZvbHV0aW9uaXppbmcgYWNhZGVtaWMgcHVibGljYXRpb25zLi4uYFxyXG4gICAgO1xyXG4gICAgdmFyICAgICAgYmxvZ2NpdGUxMyA9IGAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cIlxyXG4gIGh0dHBzOi8vd3d3LnZveC5jb20vMjAxNC8xMS8yNC83MjcyOTI5L2dsb2JhbC1wb3ZlcnR5LWhlYWx0aC1jcmltZS1saXRlcmFjeS1nb29kLW5ld3NcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIGh0dHBzOi8vd3d3LnZveC5jb20vMjAxNC8xMS8yNC83MjcyOTI5L2dsb2JhbC1wb3ZlcnR5LWhlYWx0aC1jcmltZS1saXRlcmFjeS1nb29kLW5ld3NcclxuICA8L2E+XHJcbiAgPC9wPiAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDIgPGEgaHJlZj1cImh0dHBzOi8vcXouY29tLzE0MTY4NjcvdGhlLTIwMTgtbm9iZWwtcHJpemUtaW4tZWNvbm9taWNzLWdvZXMtdG8td2lsbGlhbS1ub3JkaGF1cy1hbmQtcGF1bC1yb21lci9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vcXouY29tLzE0MTY4NjcvdGhlLTIwMTgtbm9iZWwtcHJpemUtaW4tZWNvbm9taWNzLWdvZXMtdG8td2lsbGlhbS1ub3JkaGF1cy1hbmQtcGF1bC1yb21lci9cclxuICA8L2E+XHJcbiAgPC9wPiAgXHJcbiAgICAgYDtcclxuIHZhciAgYmxvZ3Bvc3QxMiA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TW9kZWxpbmcgdGhlIG1vbGVjdWxhciBiZWhhdmlvciBvZiBvcmdhbmljIGNoZW1pc3RyeSwgYmlvbG9neSBoYXMgYmVjb21lIHRoZSBzcGVjaWFsdHkgb2YgUXVhbnR1bSBjb21wdXRpbmcsIHdpdGggaXRzIHN1cGVycG9zZWQgdGhpcmQtc3RhdGUgdGhhdCBzdXBwb3J0cyBzaG9ydCBidXJzdHMgb2YgdWx0cmEtZmFzdCBhbGdvcml0aG0gY29tcHV0YXRpb25zLiBRdWFudHVtIGNvbXB1dGluZyBoYXMgcmV2b2x1dGlvbml6ZWQgYmlvbG9neSwgc28gd2h5IG5vdCBwc3ljaG9sb2d5PyAgLi5hdCBsZWFzdCBhdCB0aGUgbW9sZWN1bGFyIGxldmVsOiA8L3A+PHAgY2xhc3M9XCJxdW90ZVwiPiBBY2NvcmRpbmcgdG8gWmhlbmcgSm95Y2UgV2FuZyBhbmQgb3RoZXJzIHdobyB0cnkgdG8gbW9kZWwgb3VyIGRlY2lzaW9uLW1ha2luZyBwcm9jZXNzZXMgbWF0aGVtYXRpY2FsbHksIHRoZSBlcXVhdGlvbnMgYW5kIGF4aW9tcyB0aGF0IG1vc3QgY2xvc2VseSBtYXRjaCBodW1hbiBiZWhhdmlvciBtYXkgYmUgb25lcyB0aGF0IGFyZSByb290ZWQgaW4gcXVhbnR1bSBwaHlzaWNzLlxyXG5cclxuICBcIldlIGhhdmUgYWNjdW11bGF0ZWQgc28gbWFueSBwYXJhZG94aWNhbCBmaW5kaW5ncyBpbiB0aGUgZmllbGQgb2YgY29nbml0aW9uLCBhbmQgZXNwZWNpYWxseSBpbiBkZWNpc2lvbi1tYWtpbmcsXCIgc2FpZCBXYW5nLCB3aG8gaXMgYW4gYXNzb2NpYXRlIHByb2Zlc3NvciBvZiBjb21tdW5pY2F0aW9uIGFuZCBkaXJlY3RvciBvZiB0aGUgQ29tbXVuaWNhdGlvbiBhbmQgUHN5Y2hvcGh5c2lvbG9neSBMYWIgYXQgVGhlIE9oaW8gU3RhdGUgVW5pdmVyc2l0eS48YnIgLz48YnIgLz5cclxuICBcclxuICBcIldoZW5ldmVyIHNvbWV0aGluZyBjb21lcyB1cCB0aGF0IGlzbid0IGNvbnNpc3RlbnQgd2l0aCBjbGFzc2ljYWwgdGhlb3JpZXMsIHdlIG9mdGVuIGxhYmVsIGl0IGFzICdpcnJhdGlvbmFsLicgQnV0IGZyb20gdGhlIHBlcnNwZWN0aXZlIG9mIHF1YW50dW0gY29nbml0aW9uLCBzb21lIGZpbmRpbmdzIGFyZW4ndCBpcnJhdGlvbmFsIGFueW1vcmUuIFRoZXkncmUgY29uc2lzdGVudCB3aXRoIHF1YW50dW0gdGhlb3J54oCUYW5kIHdpdGggaG93IHBlb3BsZSByZWFsbHkgYmVoYXZlLlwiXHJcbiAgXHJcbiAgXHJcbiAgPHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxwPlNvIG11Y2ggZm9yIHRoZSBiaW5hcnkgd2F5IG9mIHRoaW5raW5nLS1hZnRlciBhbGwsIGlzbid0IGxpZmUgbW9yZSBjb2xvcmZ1bCB0aGFuIGJsYWNrLWFuZC13aGl0ZSByZWFzb25pbmc/XHJcbiAgPC9wPlxyXG4gYDtcclxuIHZhciAgIGJsb2djaXRlMTIgPSBgICBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xIDxhIGhyZWY9XCJodHRwczovL3BoeXMub3JnL25ld3MvMjAxNS0wOS15b3VyZS1pcnJhdGlvbmFsLXF1YW50dW0tcHJvYmFiaWxpc3RpYy1odW1hbi5odG1sXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3BoeXMub3JnL25ld3MvMjAxNS0wOS15b3VyZS1pcnJhdGlvbmFsLXF1YW50dW0tcHJvYmFiaWxpc3RpYy1odW1hbi5odG1sXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICA8cCBjbGFzcz1cImNpdGVcIj5QREZzIDxiciAvPiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY2VsbC5jb20vdHJlbmRzL2NvZ25pdGl2ZS1zY2llbmNlcy9mdWxsdGV4dC9TMTM2NC02NjEzKDE1KTAwMDk5LTZcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmNlbGwuY29tL3RyZW5kcy9jb2duaXRpdmUtc2NpZW5jZXMvZnVsbHRleHQvUzEzNjQtNjYxMygxNSkwMDA5OS02XHJcbiAgPC9hPiBcclxuICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+UERGcyA8YnIgLz4gPGEgaHJlZj1cImh0dHA6Ly9qb3VybmFscy5zYWdlcHViLmNvbS9kb2kvYWJzLzEwLjExNzcvMDk2MzcyMTQxNDU2ODY2M1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2pvdXJuYWxzLnNhZ2VwdWIuY29tL2RvaS9hYnMvMTAuMTE3Ny8wOTYzNzIxNDE0NTY4NjYzXHJcbiAgPC9hPiBcclxuICA8L3A+XHJcbiAgICAgYDtcclxuICBcclxuICAgICB2YXIgICAgYmxvZ3Bvc3QxMSA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UXVhbnR1bSA8aT4nRmxhdC1FYXJ0aGVyJ3M8L2k+IGhhdmUgb25lIGxlc3MgYXJndW1lbnQgLi4uPC9wPjxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBcclxuXHJcblN0cmFpZ2h0YXdheSwgdGhleSBzYXcgdGhlIGRyb3BsZXRzIGV4aGliaXQgc3VycHJpc2luZ2x5IHF1YW50dW0tbGlrZSBiZWhhdmlvcnMg4oCUIG9ubHkgdHJhdmVyc2luZyBjZXJ0YWluIOKAnHF1YW50aXplZOKAnSBvcmJpdHMgYXJvdW5kIHRoZSBjZW50ZXIgb2YgdGhlaXIgbGlxdWlkIGJhdGhzLCBmb3IgaW5zdGFuY2UsIGFuZCBzb21ldGltZXMgcmFuZG9tbHkganVtcGluZyBiZXR3ZWVuIG9yYml0cywgYXMgZWxlY3Ryb25zIGRvIGluIGF0b21zLiBUaGVyZSBhbmQgaW4gYm91bmNpbmctZHJvcGxldCBsYWJzIHRoYXQgc29vbiBzcHJhbmcgdXAgYXQgdGhlIE1hc3NhY2h1c2V0dHMgSW5zdGl0dXRlIG9mIFRlY2hub2xvZ3kgYW5kIGVsc2V3aGVyZSwgZHJvcGxldHMgd2VyZSBzZWVuIHRvIHR1bm5lbCB0aHJvdWdoIGJhcnJpZXJzIGFuZCBwZXJmb3JtIG90aGVyIGFjdHMgcHJldmlvdXNseSB0aG91Z2h0IHRvIGJlIHVuaXF1ZWx5IHF1YW50dW0uIEluIHJlcHJvZHVjaW5nIHF1YW50dW0gcGhlbm9tZW5hIHdpdGhvdXQgYW55IG9mIHRoZSBteXN0ZXJ5LCB0aGUgYm91bmNpbmctZHJvcGxldCBleHBlcmltZW50cyByZWtpbmRsZWQgaW4gc29tZSBwaHlzaWNpc3RzIGRlIEJyb2dsaWXigJlzIG9sZCBkcmVhbSBvZiBhIHJlYWxpdHkgYXQgdGhlIHF1YW50dW0gc2NhbGUgdGhhdCBjb25zaXN0cyBvZiBwaWxvdCB3YXZlcyBhbmQgcGFydGljbGVzIGluc3RlYWQgb2YgcHJvYmFiaWxpdHkgd2F2ZXMgYW5kIGNvbnVuZHJ1bXMuPGJyIC8+PGJyIC8+XHJcblxyXG5CdXQgYSBzZXJpZXMgb2YgYm91bmNpbmctZHJvcGxldCBmaW5kaW5ncyBzaW5jZSAyMDE1IGhhcyBjcnVzaGVkIHRoaXMgZHJlYW0uIFRoZSByZXN1bHRzIGluZGljYXRlIHRoYXQgQ291ZGVy4oCZcyBtb3N0IHN0cmlraW5nIGRlbW9uc3RyYXRpb24gb2YgcXVhbnR1bS1saWtlIHBoZW5vbWVuYSwgYmFjayBpbiAyMDA2IOKAlCDigJx0aGUgZXhwZXJpbWVudCB0aGF0IGdvdCBtZSBob29rZWQgb24gdGhpcyBwcm9ibGVtLOKAnSB0aGUgZmx1aWQgZHluYW1pY2lzdCBQYXVsIE1pbGV3c2tpIHNhaWQg4oCUIHdhcyBpbiBlcnJvci4gUmVwZWF0IHJ1bnMgb2YgdGhlIGV4cGVyaW1lbnQsIGNhbGxlZCB0aGUg4oCcZG91YmxlLXNsaXQgZXhwZXJpbWVudCzigJ0gaGF2ZSBjb250cmFkaWN0ZWQgQ291ZGVy4oCZcyBpbml0aWFsIHJlc3VsdHMgYW5kIHJldmVhbGVkIHRoZSBkb3VibGUtc2xpdCBleHBlcmltZW50IHRvIGJlIHRoZSBicmVha2luZyBwb2ludCBvZiBib3RoIHRoZSBib3VuY2luZy1kcm9wbGV0IGFuYWxvZ3kgYW5kIGRlIEJyb2dsaWXigJlzIHBpbG90LXdhdmUgdmlzaW9uIG9mIHF1YW50dW0gbWVjaGFuaWNzLlxyXG4gIDxzdXA+MTwvc3VwPjwvcD5cclxuIGA7XHJcbiB2YXIgICAgYmxvZ2NpdGUxMSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDxhIGhyZWY9XCJodHRwczovL3d3dy5xdWFudGFtYWdhemluZS5vcmcvZmFtb3VzLWV4cGVyaW1lbnQtZG9vbXMtcGlsb3Qtd2F2ZS1hbHRlcm5hdGl2ZS10by1xdWFudHVtLXdlaXJkbmVzcy0yMDE4MTAxMS9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnF1YW50YW1hZ2F6aW5lLm9yZy9mYW1vdXMtZXhwZXJpbWVudC1kb29tcy1waWxvdC13YXZlLWFsdGVybmF0aXZlLXRvLXF1YW50dW0td2VpcmRuZXNzLTIwMTgxMDExL1xyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICAgYDtcclxuICBcclxuIFxyXG4gdmFyICBibG9ncG9zdDEwID0gYFxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+Q2xpbWF0ZS1jaGFuZ2Ugc2NpZW50aXN0LWFjdGl2aXN0cyBlYXJuIHRoZWlyIHByZXN0aWdlIHdpdGggZXZlcnkgcmVzZWFyY2ggc3R1ZHkgYW5kIGV2ZXJ5IGxldHRlciB3cml0dGVuLiBXaXRoIGxlc3MgZmFuZmFyZSwgZWNvbm9taXN0cyBhbHNvIGVhcm4gdGhlaXIgZHVlIHByZXN0aWdlIGZvciB3b3JraW5nIHRvd2FyZCBhIHN1c3RhaW5hYmxlIHByb3NwZXJpdHkuICAgICA8L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj4gVGhpcyB5ZWFy4oCZcyBbTm9iZWwgUHJpemVdIExhdXJlYXRlcyBXaWxsaWFtIE5vcmRoYXVzIGFuZCBQYXVsIFJvbWVyIGhhdmUgc2lnbmlmaWNhbnRseSBicm9hZGVuZWQgdGhlIHNjb3BlIG9mIGVjb25vbWljIGFuYWx5c2lzIGJ5IGNvbnN0cnVjdGluZyAgbW9kZWxzIHRoYXQgZXhwbGFpbiBob3cgdGhlIG1hcmtldCBlY29ub215IGludGVyYWN0cyB3aXRoIG5hdHVyZSBhbmQga25vd2xlZGdlLiA8YnIgLz48YnIgLz5cclxuIFJvbWVyIGRlbW9uc3RyYXRlcyBob3cga25vd2xlZGdlIGNhbiBmdW5jdGlvbiBhcyBhIGRyaXZlciBvZiBsb25nLXRlcm0gZWNvbm9taWMgXHJcbmdyb3d0aC4gV2hlbiBhbm51YWwgZWNvbm9taWMgZ3Jvd3RoIG9mIGEgZmV3IHBlciBjZW50IGFjY3VtdWxhdGVzIG92ZXIgZGVjYWRlcywgaXQgdHJhbnNmb3JtcyBwZW9wbGXigJlzIGxpdmVzLiBcclxuUHJldmlvdXMgbWFjcm9lY29ub21pYyByZXNlYXJjaCBoYWQgZW1waGFzaXNlZCB0ZWNobm9sb2dpY2FsIGlubm92YXRpb24gYXMgdGhlIHByaW1hcnkgZHJpdmVyIG9mIGVjb25vbWljIFxyXG5ncm93dGgsIGJ1dCBoYWQgbm90IG1vZGVsbGVkIGhvdyBlY29ub21pYyBkZWNpc2lvbnMgYW5kIG1hcmtldCBjb25kaXRpb25zIGRldGVybWluZSB0aGUgY3JlYXRpb24gb2YgbmV3IFxyXG50ZWNobm9sb2dpZXMuIFBhdWwgUm9tZXIgc29sdmVkIHRoaXMgcHJvYmxlbSBieSBkZW1vbnN0cmF0aW5nIGhvdyBlY29ub21pYyBmb3JjZXMgZ292ZXJuIHRoZSB3aWxsaW5nbmVzcyBvZiBcclxuZmlybXMgdG8gcHJvZHVjZSBuZXcgaWRlYXMgYW5kIGlubm92YXRpb25zLiBcclxuPHN1cD4xPC9zdXA+PC9wPlxyXG48cD5UaGUgZWNvbm9taXN0IGluIHR1cm4gcHJhY3RpY2VzIHdoYXQgaGUgcHJlYWNoZXMgYnkgdXNpbmcgb25seSBvcGVuLXNvdXJjZSBzb2Z0d2FyZS0tdG8gdGhlIGFpbSBvZiBkZW1vY3JhdGl6aW5nIHJlc2VhcmNoIGl0c2VsZjo8L3A+XHJcbjxwIGNsYXNzPVwicXVvdGVcIj5Sb21lciBiZWxpZXZlcyBpbiBtYWtpbmcgcmVzZWFyY2ggdHJhbnNwYXJlbnQuIEhlIGFyZ3VlcyB0aGF0IG9wZW5uZXNzIGFuZCBjbGFyaXR5IGFib3V0IG1ldGhvZG9sb2d5IGlzIGltcG9ydGFudCBmb3Igc2NpZW50aWZpYyByZXNlYXJjaCB0byBnYWluIHRydXN0LiBBcyBSb21lciBleHBsYWluZWQgaW4gYW4gQXByaWwgMjAxOCBibG9nIHBvc3QsIGluIGFuIGVmZm9ydCB0byBtYWtlIGhpcyBvd24gd29yayB0cmFuc3BhcmVudCwgaGUgdHJpZWQgdG8gdXNlIE1hdGhlbWF0aWNhIHRvIHNoYXJlIG9uZSBvZiBoaXMgc3R1ZGllcyBpbiBhIHdheSB0aGF0IGFueW9uZSBjb3VsZCBleHBsb3JlIGV2ZXJ5IGRldGFpbCBvZiBoaXMgZGF0YSBhbmQgbWV0aG9kcy4gSXQgZGlkbuKAmXQgd29yay4gSGUgc2F5cyB0aGF0IE1hdGhlbWF0aWNh4oCZcyBvd25lciwgV29sZnJhbSBSZXNlYXJjaCwgbWFkZSBpdCB0b28gZGlmZmljdWx0IHRvIHNoYXJlIGhpcyB3b3JrIGluIGEgd2F5IHRoYXQgZGlkbuKAmXQgcmVxdWlyZSBvdGhlciBwZW9wbGUgdG8gdXNlIHRoZSBwcm9wcmlldGFyeSBzb2Z0d2FyZSwgdG9vLiBSZWFkZXJzIGFsc28gY291bGQgbm90IHNlZSBhbGwgb2YgdGhlIGNvZGUgaGUgdXNlZCBmb3IgaGlzIGVxdWF0aW9ucy5cclxuPGJyIC8+PGJyIC8+XHJcbkluc3RlYWQgb2YgdXNpbmcgTWF0aGVtYXRpY2EsIFJvbWVyIGRpc2NvdmVyZWQgdGhhdCBoZSBjb3VsZCB1c2UgYSBKdXB5dGVyIG5vdGVib29rIGZvciBzaGFyaW5nIGhpcyByZXNlYXJjaC4gSnVweXRlciBub3RlYm9va3MgYXJlIHdlYiBhcHBsaWNhdGlvbnMgdGhhdCBhbGxvdyBwcm9ncmFtbWVycyBhbmQgcmVzZWFyY2hlcnMgdG8gc2hhcmUgZG9jdW1lbnRzIHRoYXQgaW5jbHVkZSBjb2RlLCBjaGFydHMsIGVxdWF0aW9ucywgYW5kIGRhdGEuIEp1cHl0ZXIgbm90ZWJvb2tzIGFsbG93IGZvciBjb2RlIHdyaXR0ZW4gaW4gZG96ZW5zIG9mIHByb2dyYW1taW5nIGxhbmd1YWdlcy4gRm9yIGhpcyByZXNlYXJjaCwgUm9tZXIgdXNlZCBQeXRob27igJR0aGUgbW9zdCBwb3B1bGFyIGxhbmd1YWdlIGZvciBkYXRhIHNjaWVuY2UgYW5kIHN0YXRpc3RpY3MuPHN1cD4yPC9zdXA+XHJcbjwvcD5cclxuPHA+VGhlIEJvdHRvbSBsaW5lIGlzIHRoYXQgeWVzdGVyZGF5J3MgaW5rIGFuZCBwYXBlciBpcyB0b2RheSdzIHNvZnR3YXJlIGFuZCBoYXJkd2FyZS0tZXNzZW50aWFsIHRvb2xzIGZvciBzdWNjZXNzLCB0aGUgZWFybGllciB0aGUgYmV0dGVyLiBTbywgYmVjYXVzZSBoaXN0b3JpY2FsIHN1cHByZXNzaW9uIHVzdWFsbHkgYmVnaW5zIGZpbmFuY2lhbGx5LCBlcXVhbCBhY2Nlc3MgYWNyb3NzIHNvY2lhbCBhbmQgZWNvbm9taWMgbGluZXMuICBTbywgdGhlIGVjb25vbWljIGluY2VudGl2ZSB0byBvdXRmaXQgZXZlcnkgbGFzdCBjaXRpemVuIHdpdGggZnJlZSB3aWZpIGFuZCBvcGVuLXNvdXJjZSB0ZWNobm9sb2d5LiBBbHJlYWR5LCB0aGUgYmVzdCBpbiBodW1hbml0eS0tdGhlIE5vYmVsIHdpbm5lcnMtLWtub3cgdGhlIHB1YmxpYyBpbmNlbnRpdmUgdG8gaGFybmVzcyB0aGUgcG93ZXIgb2YgYSB3aWRlc3ByZWFkIHRlY2ggZWR1Y2F0aW9uLiBCZWNhdXNlIHdoZW4gdGhlIG1hbnkgYW5kIG5vdCB0aGUgZmV3IGNyZWF0ZSBhbmQgYWR2YW5jZSB0ZWNobm9sb2d5LCB0aGUgZWNvbm9teSBibG9vbXMgd2l0aCByZWFsIHByb2R1Y3Rpdml0eS48L3A+XHJcbiAgYDtcclxuICB2YXIgIGJsb2djaXRlMTA9IGAgXHJcbjxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJodHRwczovL3d3dy5ub2JlbHByaXplLm9yZy91cGxvYWRzLzIwMTgvMTAvcHJlc3MtZWNvbm9taWNzY2llbmNlczIwMTgucGRmXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ub2JlbHByaXplLm9yZy91cGxvYWRzLzIwMTgvMTAvcHJlc3MtZWNvbm9taWNzY2llbmNlczIwMTgucGRmIFxyXG48L2E+XHJcbjwvcD4gIFxyXG48cCBjbGFzcz1cImNpdGVcIj4gMiA8YSBocmVmPVwiaHR0cHM6Ly9xei5jb20vMTQxNjg2Ny90aGUtMjAxOC1ub2JlbC1wcml6ZS1pbi1lY29ub21pY3MtZ29lcy10by13aWxsaWFtLW5vcmRoYXVzLWFuZC1wYXVsLXJvbWVyL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9xei5jb20vMTQxNjg2Ny90aGUtMjAxOC1ub2JlbC1wcml6ZS1pbi1lY29ub21pY3MtZ29lcy10by13aWxsaWFtLW5vcmRoYXVzLWFuZC1wYXVsLXJvbWVyL1xyXG48L2E+XHJcbjwvcD4gIFxyXG4gICBgOyBcclxuXHJcbiAgIHZhciAgYmxvZ3Bvc3Q5ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5IYWNrZXJub29uIGZlYXR1cmVkIEphY2sgRG9zc21hbidzIHRha2Ugb24gdGhlIGJhbmFsaXR5IG9mIGJsb2NrY2hhaW4gdGVjaG5vbG9neSBvdXRzaWRlIG9mIHNwZWNpYWwtdXNlIGNhc2VzLiBEb3NzbWFuIG9waW5lcywgXCJVbmxlc3MgeW91ciBidXNpbmVzcyBuZWVkcyBhbGwgb2YgdGhlIGJlbmVmaXRzIHRoYXQgYSBibG9ja2NoYWluIHByb3ZpZGVzLCB5b3Ugd2lsbCBiZSBubyBiZXR0ZXIgb2ZmIHN0b3JpbmcgeW91ciBkYXRhIG9uIG9uZS5cIiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkJ5IGRlZmluaXRpb24sIHRoZXJlIGlzIG5vIGNlbnRyYWwgYXV0aG9yaXR5IGdvdmVybmluZyBhIHB1YmxpYyBibG9ja2NoYWluLCBzbyB3aG8gbWFrZXMgZGVjaXNpb25zIGluIHRoaXMgZGlzdHJpYnV0ZWQgY29tcGFueT9cclxuXHJcbiAgV2hhdCBhYm91dCBkaXNwdXRlIHJlc29sdXRpb24/IE9uY2UgZGF0YSBoYXMgYmVlbiB1cGxvYWRlZCBhbmQgdmVyaWZpZWQsIGl04oCZcyBub3QgZ29pbmcgYW55d2hlcmUuIEdvdCBjaGFyZ2VkIGZvciBhIHJpZGUgeW91IGRpZG7igJl0IHRha2U/IERyaXZlciBkaWQgc29tZXRoaW5nIHJlYWxseSBiYWQgdGhhdCB5b3UgbmVlZCB0byByZXBvcnQ/IFdlbGwgdG9vIGJhZCBiZWNhdXNlIG5vYm9keSBpcyBsaXN0ZW5pbmcuIDxzdXA+MTwvc3VwPjwvcD5cclxuIDxwPk5vdywgdGhpcyBhcnRpY2xlIGdyb3NzbHkgdW5kZXJlc3RpbWF0ZXMgdGhlIHJhbmdlIG9mIGRlc2lnbnMgZnJvbSAgcHJpdmF0ZSBibG9ja2NoYWlucyB0byBjb25zb3J0aXVtIGJsb2NrY2hhaW5zLCBidXQgdGhlIHBvaW50IGFib3V0IGh5cGUgaXMgd2VsbC1tYWRlITwvcD5cclxuICAgIGA7XHJcbiAgICB2YXIgIGJsb2djaXRlOT0gYCBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly9oYWNrZXJub29uLmNvbS8xMC10aGluZ3MtYmxvY2tjaGFpbi1pc250LWRjYjc5NjZkMjJlNVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9oYWNrZXJub29uLmNvbS8xMC10aGluZ3MtYmxvY2tjaGFpbi1pc250LWRjYjc5NjZkMjJlNSBcclxuICA8L2E+XHJcbiAgPC9wPiAgXHJcbiAgICAgYDsgXHJcbiAgICAgdmFyICAgYmxvZ3Bvc3Q4ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5JbnRlbGxlY3R1YWwgZXNwaW9uYWdlIGlzIGFib3V0IGFzIG5ld3N3b3J0aHkgYXMgYW55IG90aGVyIG1pc2d1aWRlZCBuYXRpb25hbGlzdCBwcmFjdGljZSBhY3Jvc3MgdGhlIGdsb2JlIGZyb20gbmVhcmx5IGV2ZXJ5IG5hdGlvbi0taW4gc29tZSBmb3JtLiBNYXliZSBpdHMgdGhlIHViaXF1aXR5IG9mIG1pbWljcnkgdGhhdCBldmVudHMgYXJlIHF1aWNrbHkgZm9yZ290dGVuLiBBbiA8aT5vdGhlci13b3JsZCBwcm9ibGVtPC9pPi4gWWV0LCB0aGlzIGlzIG5vdCBtZXJlbHkgYSByZWdpb25hbGx5LWJhc2VkIG51aXNhbmNlLiBGcm9tIHRpbWUgaW1tZW1vcmlhbCwgaGVhZGxpbmVzIGhhdmUgcmFpc2VkIHRoZSBwcm9zcGVjdCBvZiBhY2FkZW1pYywgdW5pdmVyc2l0eS1iYXNlZCBpbnRlbGxlY3R1YWwgdGhlZnQuIFJlbGF0ZWQgZXZlbnRzIHJhaXNlZCBleWVicm93cyBhbmQgdGhlbiBxdWlja2x5IGZvcmdvdHRlbi4gPHA+VGhpcyB5ZWFyLCBDaGluZXNlLW1hZGUgc2VydmVycyBkaXNjb3ZlcmVkIHdpdGggYSBtaWNyb3Njb3BpYywgZW1iZWRkZWQgY2hpcCBtYXkgaGF2ZSBiZWVuIGtub3duIGJ5IEFwcGxlIHRocmVlIHllYXJzIGFnby4gTGFzdCB3ZWVrLCBCbG9vbWJlcmdzIHJlcG9ydGVkLCA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBCZWlqaW5nJ3MgbWlsaXRhcnkgaW50ZWxsaWdlbmNlIHByZXNzdXJlZCBvciBicmliZWQgYSBDaGluZXNlIG1hbnVmYWN0dXJpbmcgc3ViY29udHJhY3RvciBvZiBVUy1iYXNlZCBTdXBlciBNaWNybyB0byBpbmNsdWRlIGEgc21hbGwgc2VjcmV0IHNweSBjaGlwIGluIHRoZSBzZXJ2ZXIgbWFrZXIncyBtb3RoZXJib2FyZHMuIFRoZSBzdXBwb3NlZGx5IGdyYWluLW9mLXJpY2Utc2l6ZWQgY2hpcHMgd2VyZSBpbnNlcnRlZCB0byBnaXZlIENoaW5hIGEgYmFja2Rvb3IgaW50byB0aGUgY29tcHV0ZXJzLCBhbGxvd2luZyBkYXRhIHRvIGJlIHNpbGVudGx5IGFsdGVyZWQgb3Igc3RvbGVuIGZyb20gYWZhciBieSB0aGUgQ2hpbmVzZSBnb3Zlcm5tZW50LiA8YnIgLz5cclxuICA8YnIgLz5PZiB0aGUgMzAgb3Igc28gb3JnYW5pemF0aW9ucyB0aGF0IGFwcGFyZW50bHkgcmVjZWl2ZWQgdGhlc2UgYnVnZ2VkIG1hY2hpbmVzLCByYW5naW5nIGZyb20gYSBtYWpvciBiYW5rIHRvIFVTIGdvdmVybm1lbnQgY29udHJhY3RvcnMsIHdlcmUgQXBwbGUgYW5kIEFtYXpvbiwgYWNjb3JkaW5nIHRvIEJsb29tYmVyZydzIHNvdXJjZXMuIDxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD5NaXNjaGllZiBpbiBhbGwgZm9ybXMgcGVydmFkZXMgbmVhcmx5IGV2ZXJ5IG5hdGlvbnMnIGFnZW5kYSAgLi4uIEFnYWluLCBhcHBhcmVudGx5LCB3aG8gcmVtZW1iZXJzIGEgd2VlayBhZnRlcndhcmQ/PC9wPiBcclxuICAgIGA7XHJcbiAgICB2YXIgICBibG9nY2l0ZTg9IGAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDEgPGEgaHJlZj1cImh0dHBzOi8vd3d3LnRoZXJlZ2lzdGVyLmNvLnVrLzIwMTgvMTAvMDgvc3VwZXJfbWljcm9fdXNfdWtfaW50ZWxsaWdlbmNlL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cudGhlcmVnaXN0ZXIuY28udWsvMjAxOC8xMC8wOC9zdXBlcl9taWNyb191c191a19pbnRlbGxpZ2VuY2UvIFxyXG4gIDwvYT5cclxuICA8L3A+IDxwIGNsYXNzPVwiY2l0ZVwiPiAyIDxhIGhyZWY9XCJodHRwczovL3d3dy5jbmJjLmNvbS8yMDE4LzEwLzA0L3VzLXdhcm5zLWNvbXBhbmllcy1hYm91dC1zZWN1cml0eS1yaXNrLXRvLW1hbmFnZWQtc2VydmljZS1wcm92aWRlcnMuaHRtbFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25iYy5jb20vMjAxOC8xMC8wNC91cy13YXJucy1jb21wYW5pZXMtYWJvdXQtc2VjdXJpdHktcmlzay10by1tYW5hZ2VkLXNlcnZpY2UtcHJvdmlkZXJzLmh0bWxcclxuICA8L2E+XHJcbiAgPC9wPiAgPHAgY2xhc3M9XCJjaXRlXCI+M1xyXG4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0wNC93aGF0LWEtbW9vdGVkLWNoaW5lc2Utd2lyZWxlc3MtbWVnYS1tZXJnZXItbWVhbnMtZm9yLXRoZS01Zy1yYWNlXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0wNC93aGF0LWEtbW9vdGVkLWNoaW5lc2Utd2lyZWxlc3MtbWVnYS1tZXJnZXItbWVhbnMtZm9yLXRoZS01Zy1yYWNlXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgICBgOyBcclxuICAgICB2YXIgICAgYmxvZ3Bvc3Q3ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gVGhlIGxhdGVzdCBuZXdzIG9mIG1pY3Jvc2NvcGljIGZvcmVpZ24gY2hpcHMgZW1iZWRkZWQgaW4gTWljcm8gU3lzdGVtcyBjaGlwcyBmb3IgaGFyZCBkcml2ZXMgdGhhdCBmaW5kIHRoZWlyIHdheSBpbnRvIEFtYXpvbiwgUGVudGFnb24sIGFuZCBvdGhlciBzZXJ2ZXJzIGluIGJldHdlZW4gbm93IHJhaXNlIGEgbmV3IGF3YXJlbmVzczwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+XHJcbiBUaGUgc3B5IGNoaXAgY291bGQgaGF2ZSBiZWVuIHBsYWNlZCBlbGVjdHJpY2FsbHkgYmV0d2VlbiB0aGUgYmFzZWJvYXJkIG1hbmFnZW1lbnQgY29udHJvbGxlciAoQk1DKSBhbmQgaXRzIFNQSSBmbGFzaCBvciBzZXJpYWwgRUVQUk9NIHN0b3JhZ2UgY29udGFpbmluZyB0aGUgQk1DJ3MgZmlybXdhcmUuIFRodXMsIHdoZW4gdGhlIEJNQyBmZXRjaGVkIGFuZCBleGVjdXRlZCBpdHMgY29kZSBmcm9tIHRoaXMgbWVtb3J5LCB0aGUgc3B5IGNoaXAgd291bGQgaW50ZXJjZXB0IHRoZSBzaWduYWxzIGFuZCBtb2RpZnkgdGhlIGJpdHN0cmVhbSB0byBpbmplY3QgbWFsaWNpb3VzIGNvZGUgaW50byB0aGUgQk1DIHByb2Nlc3NvciwgYWxsb3dpbmcgaXRzIG1hc3RlcnMgdG8gY29udHJvbCB0aGUgQk1DLlxyXG4gIDxzdXA+MTwvc3VwPjwvcD4gXHJcbiAgPHA+IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+VGhlIHNweSBjaGlwIGNvdWxkIGhhdmUgYmVlbiBwbGFjZWQgZWxlY3RyaWNhbGx5IGJldHdlZW4gdGhlIGJhc2Vib2FyZCBtYW5hZ2VtZW50IGNvbnRyb2xsZXIgKEJNQykgYW5kIGl0cyBTUEkgZmxhc2ggb3Igc2VyaWFsIEVFUFJPTSBzdG9yYWdlIGNvbnRhaW5pbmcgdGhlIEJNQydzIGZpcm13YXJlLiBUaHVzLCB3aGVuIHRoZSBCTUMgZmV0Y2hlZCBhbmQgZXhlY3V0ZWQgaXRzIGNvZGUgZnJvbSB0aGlzIG1lbW9yeSwgdGhlIHNweSBjaGlwIHdvdWxkIGludGVyY2VwdCB0aGUgc2lnbmFscyBhbmQgbW9kaWZ5IHRoZSBiaXRzdHJlYW0gdG8gaW5qZWN0IG1hbGljaW91cyBjb2RlIGludG8gdGhlIEJNQyBwcm9jZXNzb3IsIGFsbG93aW5nIGl0cyBtYXN0ZXJzIHRvIGNvbnRyb2wgdGhlIEJNQy48c3VwPjM8L3N1cD48L3A+XHJcbiAgPHA+SW4gc3VtLCB0aGUgPGk+dGhlIHRpbWVzLCB0aGV5IGFyZSAtIGEgLSBjaGFuZ2luZzwvaT4gYW5kIHRoYXQgbWVhbnMsIGxpa2UgYW55IHRlc3QtdGFrZXIga25vd3MsIGNoZWF0c2hlZXRzIGRvIG1vcmUgZGFtYWdlIGlmIHRoZXkgZmFsbCBpcnJlbGV2ZW50LCBldmVuIHNsaWdodGx5IGRlcHJlY2F0ZWQuICA8L3A+IFxyXG4gICAgYDtcclxuICAgIHZhciAgIGJsb2djaXRlNz0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJodHRwczovL3d3dy50aGVyZWdpc3Rlci5jby51ay8yMDE4LzEwLzA4L3N1cGVyX21pY3JvX3VzX3VrX2ludGVsbGlnZW5jZS9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRoZXJlZ2lzdGVyLmNvLnVrLzIwMTgvMTAvMDgvc3VwZXJfbWljcm9fdXNfdWtfaW50ZWxsaWdlbmNlLyBcclxuICA8L2E+XHJcbiAgPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMva2FsZXZsZWV0YXJ1LzIwMTgvMTAvMDQvdGhlLWNoaW5lc2Utc3B5LWNoaXAtc3RvcnktaXMtYS1yZW1pbmRlci1vZi1ob3ctaW5zZWN1cmUtb3VyLWRpZ2l0YWwtd29ybGQtcmVhbGx5LWlzLyMxNzM2ZjBmMDdlMTNcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmZvcmJlcy5jb20vc2l0ZXMva2FsZXZsZWV0YXJ1LzIwMTgvMTAvMDQvdGhlLWNoaW5lc2Utc3B5LWNoaXAtc3RvcnktaXMtYS1yZW1pbmRlci1vZi1ob3ctaW5zZWN1cmUtb3VyLWRpZ2l0YWwtd29ybGQtcmVhbGx5LWlzLyMxNzM2ZjBmMDdlMTNcclxuICA8L2E+XHJcbiAgPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4zXHJcbiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTA0L3doYXQtYS1tb290ZWQtY2hpbmVzZS13aXJlbGVzcy1tZWdhLW1lcmdlci1tZWFucy1mb3ItdGhlLTVnLXJhY2VcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTA0L3doYXQtYS1tb290ZWQtY2hpbmVzZS13aXJlbGVzcy1tZWdhLW1lcmdlci1tZWFucy1mb3ItdGhlLTVnLXJhY2VcclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gICAgIGA7IFxyXG4gICAgIHZhciAgIGJsb2dwb3N0NiA9IGBcclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TGFzdCBtb250aCdzIDxpPlRlY2hjcnVuY2ggRGlzcnVwdCE8L2k+IHJldmVhbGVkIGlmIG9ubHkgYSBmZXcgaW1taW5lbnQgYmxvY2tjaGFpbiB0cmVuZHMgdG8gcGF5IGF0dGVudGlvbiB0bzogVGhlIGNyeXB0by1jdXJyZW5jeSBhbmQgaW52ZXN0bWVudCBpcyBkZWZpbml0ZWx5IHRhbXBlZCBkb3duLCBhbmQgbm93IHRoZSBmaWVsZCBvZiBwbGF5IGlzIG5vIGxvbmdlciBiZXR3ZWVuIGNvbXBldGluZyBwbGF0Zm9ybXMsIGJ1dCByYXRoZXIgdGhlIERBUFBTIGFyZSBub3cgdGhlIHBsYXllcnMgb24gdGhlIGVzdGFibGlzaGVkIHBsYXRmb3Jtcy0tc3RhcnRpbmcgd2l0aCBFdGhlcmV1bSBjcnlwdG8tY29udHJhY3RzLCBicm93c2VyLWJhc2VkIHBsYXRmb3JtcyBsaWtlIE1pc3QgYW5kIG90aGVyIHBsYXllcnMuIDxpPlRoZSB0cnVzdCBhbmQgZGlyZWN0aW9uIGlzIG5vIGxvbmdlciBpbiBkaXNwdXRlLS1ub3csIHRoZSBxdWVzdGlvbiBhc2tzOiBXaG8gY2FuIGxldmVyYWdlIGVhc2Utb2YtdXNlIGFuZCBhY2Nlc3NpYmlsaXR5IGFuZCAgdXRpbGl0eSB2aWEgdGhlIHdlYiBicm93c2VyIC4uLiBBZnRlciBhbGwsIGlzbid0IHRoZSBwb2ludCBvZiB0ZWNoIGFkdmFuY2VudHMsIHRvIGJyaW5nIGFib3V0IG5ldyBwb3NzaWJpbGl0aWVzLCBhbmQgIHRoZSB0aW1lIHRvIGV4cGxvcmUgdGhlbSBieSBhbHNvIHByb3ZpZGluZyBlZmZpY2llbnQgbGl2aW5nISA8L3A+XHJcbiAgIFxyXG4gICAgYDtcclxuICAgIHZhciAgIGJsb2djaXRlNj0gYCAgXHJcbiAgICAgYDsgXHJcbiAgICAgdmFyICAgYmxvZ3Bvc3Q1ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UcnVzdCwgdHJ1c3QgbGF5ZXJzLCBhbmQgaW5zdGl0dXRpb25zIG9mIFRydXN0d29ydGhpbmVzczogVGhlIHF1YWludCwgPGk+TGVhdmUtaXQtdG8tQmVhdmVyIHRlcm1zIG9mIGEgYnktZ29uZSB3b3JsZDwvaT4gaGF2ZW4ndCB3ZWFrZW5lZCBidXQgYXJlIHRyYW5zZm9ybWVkOiBXaGF0IHdhcyBvbmNlIGEgcmlnaWQgaGllcmFyY2h5IG9mIHRydXN0IHByb2NsYW1hdGlvbnMgZnJvbSBhYm92ZSBhcmUgbm93IGZsZXhpYmxlLCBjb250aW51YWxseS1lYXJuZWQsIGNvbW11bml0eS1iYXNlZCB0cnVzdCBuZXR3b3Jrcy4gU2xvd2x5IGJ1dCBzdXJlbHksPGk+Q29tbXVuaXR5LWNlbnRlcmVkIG5ldHdvcmtzIG1hZGUgb2Ygc29jaWFsIGNhcGl0YWwgb3ZlcnRha2UgaW5zdGl0dXRpb25hbCwgYnVyZWF1Y3JhdGljIGNhcGl0YWwgYW5kIGNyZWRlbnRpYWxpc20uIDwvaT48L3A+PHAgY2xhc3M9XCJxdW90ZVwiPlRoaXMgaXMgdGhlIHdob2xlIGlzc3VlLiBUaGlzIGlzIGV2ZXJ5dGhpbmcgdGhhdCB3ZSdyZSB0YWxraW5nIGFib3V0LiBBbmQgaG93IGRvIHlvdSB0cnVzdCBzb21ldGhpbmcgdGhhdCBjYW4gcHVsbCB0aGVzZSBzaWduYWxzIG9mZiBvZiB5b3U/IDxiciAvPjxiciAvPklmIGEgc3lzdGVtIGlzIGFzeW1tZXRyaWPigJRpZiB5b3Uga25vdyBtb3JlIGFib3V0IG1lIHRoYW4gSSBrbm93IGFib3V0IG15c2VsZiwgd2UgdXN1YWxseSBoYXZlIGEgbmFtZSBmb3IgdGhhdCBpbiBsYXcuIFNvLCBmb3IgZXhhbXBsZSwgd2hlbiB5b3UgZGVhbCB3aXRoIGEgbGF3eWVyLCB5b3UgaGFuZCBvdmVyIHlvdXIgdmVyeSBwZXJzb25hbCBkZXRhaWxzIHRvIGEgbGF3eWVyIHNvIHRoZXkgY2FuIGhlbHAgeW91LiBCdXQgdGhlbiB0aGV5IGhhdmUgdGhpcyBrbm93bGVkZ2Ugb2YgdGhlIGxhdyBhbmQgdGhleSBrbm93IGFib3V0IHlvdXIgdnVsbmVyYWJsZSBpbmZvcm1hdGlvbiwgc28gdGhleSBjb3VsZCBleHBsb2l0IHlvdSB3aXRoIHRoYXQuIEltYWdpbmUgYSBsYXd5ZXIgd2hvIHRvb2sgYWxsIG9mIHRoYXQgcGVyc29uYWwgaW5mb3JtYXRpb24gYW5kIHNvbGQgaXQgdG8gc29tZWJvZHkgZWxzZS4gQnV0IHRoZXkncmUgZ292ZXJuZWQgYnkgYSBkaWZmZXJlbnQgcmVsYXRpb25zaGlwLCB3aGljaCBpcyB0aGUgZmlkdWNpYXJ5IHJlbGF0aW9uc2hpcC4gVGhleSBjYW4gbG9zZSB0aGVpciBsaWNlbnNlIGlmIHRoZXkgZG9uJ3QgYWN0dWFsbHkgc2VydmUgeW91ciBpbnRlcmVzdC4gQW5kIHNpbWlsYXJseSBhIGRvY3RvciBvciBhIHBzeWNob3RoZXJhcGlzdC5cclxuICA8c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+V2hldGhlciBieSBjb2luY2lkZW5jZSBvciBpbm5hdGUgZmVhdHVyZXMgb2YgMjFzdCBjZW50dXJ5IHRlY2hub2xvZ3ksIHRydXN0LWJhc2VkIHBsYXRmb3JtcyBpbm5hdGVseSByZXdhcmQgc2hhcmluZywgdHJ1c3QtYmFzZWQgZGlzdHJpYnV0aW9uIG9mIHBvd2VyLiBDb25zaWRlciB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBkZW1vY3JhdGljYWxseSBvcGVyYXRlZCBibG9ja2NoYWluLCBpLmUuIGRpc3RyaWJ1dGVkIGxlZGdlcnMgd2l0aG91dCBtaWRkbGUtcGVyc29ucywgdmVyc3VzIGhpZXJhcmNoaWNhbCwgc2lsb2VkIGNlbnRlcnMgb2YgaW5mb3JtYXRpb24uIEFzIHVzdWFsLCB0aGUgcHJvYmxlbXMgdGhhdCB0ZWNobm9sb2d5IHByZXNlbnQgaW4gb25lIGZvcm0gYXJlIHN5bW1ldHJpY2FsbHkgcmVzb2x2ZWQgYnkgYSB0ZWNobm9sb2d5IG9mIGFub3RoZXIgZm9ybS5gO1xyXG4gIHZhciAgYmxvZ2NpdGU1ID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEgPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hcnRpZmljaWFsLWludGVsbGlnZW5jZS15dXZhbC1ub2FoLWhhcmFyaS10cmlzdGFuLWhhcnJpcy9cIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIGh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hcnRpZmljaWFsLWludGVsbGlnZW5jZS15dXZhbC1ub2FoLWhhcmFyaS10cmlzdGFuLWhhcnJpcy88L2E+XHJcbiAgPC9wPiBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4yPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9vdXItbWluZHMtaGF2ZS1iZWVuLWhpamFja2VkLWJ5LW91ci1waG9uZXMtdHJpc3Rhbi1oYXJyaXMtd2FudHMtdG8tcmVzY3VlLXRoZW0vXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3Rvcnkvb3VyLW1pbmRzLWhhdmUtYmVlbi1oaWphY2tlZC1ieS1vdXItcGhvbmVzLXRyaXN0YW4taGFycmlzLXdhbnRzLXRvLXJlc2N1ZS10aGVtL1xyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICAgYDtcclxuICAgICB2YXIgIGJsb2dwb3N0NCA9IGA8cCBjbGFzcz1cInF1b3RlXCI+PGk+QnV0IGV2ZXJ5d2hlcmUgeW91IHR1cm4gb24gdGhlIGludGVybmV0IHRoZXJlJ3MgYmFzaWNhbGx5IGEgc3VwZXJjb21wdXRlciBwb2ludGluZyBhdCB5b3VyIGJyYWluLCBwbGF5aW5nIGNoZXNzIGFnYWluc3QgeW91ciBtaW5kLCBhbmQgaXQncyBnb2luZyB0byB3aW4gYSBsb3QgbW9yZSBvZnRlbiB0aGFuIG5vdC48L2k+PHN1cD4xPC9zdXA+PC9wPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5GaXJzdCBvZmYsIHdoYXQgaXMgSHVtYW5lIFRlY2hub2xvZ3k/IEJlc2lkZXMgYSBwaGlsb3NvcGh5IHRoYXQgZGlzc2lwYXRlcywgYSBwcmFjdGljYWwgcGhpbG9zb3BoeSBvbmx5IGdhaW5zIGZvY3VzLS1mYXIgbW9yZSB2YWx1YWJsZSB0aGFuIGRlcHRoIG9yIGJyZWFkdGguIE11Y2ggbW9yZSB0aGFuIGEgcmVhbCBEZXMgQ2FydGVzIG1lZXRzIGFuIGlQaG9uZSwgd2hvc2UgZm9jdXMgaXMgb24gXCJyZWFsaWduaW5nIHRlY2hub2xvZ3kgd2l0aCBhIGNsZWFyLWV5ZWQgbW9kZWwgb2YgaHVtYW4gbmF0dXJlXCIuPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5CZWNhdXNlIHdlIGhhdmUgYnVpbHQgb3VyIHNvY2lldHksIGNlcnRhaW5seSBsaWJlcmFsIGRlbW9jcmFjeSB3aXRoIGVsZWN0aW9ucyBhbmQgdGhlIGZyZWUgbWFya2V0IGFuZCBzbyBmb3J0aCwgb24gcGhpbG9zb3BoaWNhbCBpZGVhcyBmcm9tIHRoZSAxOHRoIGNlbnR1cnkgd2hpY2ggYXJlIHNpbXBseSBpbmNvbXBhdGlibGUgbm90IGp1c3Qgd2l0aCB0aGUgc2NpZW50aWZpYyBmaW5kaW5ncyBvZiB0aGUgMjFzdCBjZW50dXJ5IGJ1dCBhYm92ZSBhbGwgd2l0aCB0aGUgdGVjaG5vbG9neSB3ZSBub3cgaGF2ZSBhdCBvdXIgZGlzcG9zYWwuPGJyIC8+PGJyIC8+XHJcbiAgIE91ciBzb2NpZXR5IGlzIGJ1aWx0IG9uIHRoZSBpZGVhcyB0aGF0IHRoZSB2b3RlciBrbm93cyBiZXN0LCB0aGF0IHRoZSBjdXN0b21lciBpcyBhbHdheXMgcmlnaHQsIHRoYXQgdWx0aW1hdGUgYXV0aG9yaXR5IGlzLCBhcyBUcmlzdGFuIHNhaWQsIGlzIHdpdGggdGhlIGZlZWxpbmdzIG9mIGh1bWFuIGJlaW5ncyBhbmQgdGhpcyBhc3N1bWVzIHRoYXQgaHVtYW4gZmVlbGluZ3MgYW5kIGh1bWFuIGNob2ljZXMgYXJlIHRoZXNlIHNhY3JlZCBhcmVuYSB3aGljaCBjYW5ub3QgYmUgaGFja2VkLCB3aGljaCBjYW5ub3QgYmUgbWFuaXB1bGF0ZWQuIFVsdGltYXRlbHksIG15IGNob2ljZXMsIG15IGRlc2lyZXMgcmVmbGVjdCBteSBmcmVlIHdpbGwgYW5kIG5vYm9keSBjYW4gYWNjZXNzIHRoYXQgb3IgdG91Y2ggdGhhdC4gQW5kIHRoaXMgd2FzIG5ldmVyIHRydWUuIEJ1dCB3ZSBkaWRuJ3QgcGF5IGEgdmVyeSBoaWdoIGNvc3QgZm9yIGJlbGlldmluZyBpbiB0aGlzIG15dGggaW4gdGhlIDE5dGggYW5kIDIwdGggY2VudHVyeSBiZWNhdXNlIG5vYm9keSBoYWQgYSB0ZWNobm9sb2d5IHRvIGFjdHVhbGx5IGRvIGl0LiBOb3csIHBlb3BsZeKAlHNvbWUgcGVvcGxl4oCUY29ycG9yYXRpb25zLCBnb3Zlcm5tZW50cyBhcmUgZ2FtaW5nIHRoZSB0ZWNobm9sb2d5IHRvIGhhY2sgaHVtYW4gYmVpbmdzLiBNYXliZSB0aGUgbW9zdCBpbXBvcnRhbnQgZmFjdCBhYm91dCBsaXZpbmcgaW4gdGhlIDIxc3QgY2VudHVyeSBpcyB0aGF0IHdlIGFyZSBub3cgaGFja2FibGUgYW5pbWFscy48c3VwPjI8L3N1cD48L3A+IFxyXG4gICA8cD5CdXQgdGhpcyBpc24ndCBzb21lIG5ldyB0aGluZy4gQnkgYWRhcHRpbmcgdG8gdGhlIG5ldyB0b3VjaHN0b25lLCBvbiBhIHNvY2lldGFsIGxldmVsLCB0aGUgdGVjaG5vbG9neSBiZWFycyBubyBtb3JlIHRocmVhdCB0aGFuIHRoZSBub3ZlbCB0ZWxldmlzaW9uIGFkIGNhbXBhaWducyBvZiB0aGUgMTk1MCdzLS1Tb21lIHZpZXdlcnMgYmVjYW1lIGJyYWluLXdhc2hlZCwgYnV0IG5vdCBhbGwhIFNvIGxpa2UgQmViZSBSZXhoYSB0ZWFjaGVzIHVzOiA8aT5ObyBicm9rZW4gaGVhcnRzIGluIHRoZSBjbHViIHRvbmlnaHQsIG5vIHRlYXJzIGluIHRoZSBjbHViIC4uLiBXZSBvbmx5IGdvdCBvbmUgbGlmZSBzbyBsZXQncyBnbyBoYXJkIHVudGlsIHRoZSBkYXkgd2UgZGllIVwiPC9pPjwvcD5cclxuICBgO1xyXG4gIHZhciAgIGJsb2djaXRlNCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UteXV2YWwtbm9haC1oYXJhcmktdHJpc3Rhbi1oYXJyaXMvIDxhIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXJ0aWZpY2lhbC1pbnRlbGxpZ2VuY2UteXV2YWwtbm9haC1oYXJhcmktdHJpc3Rhbi1oYXJyaXMvIFwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgPC9hPlxyXG4gIDwvcD4gXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L291ci1taW5kcy1oYXZlLWJlZW4taGlqYWNrZWQtYnktb3VyLXBob25lcy10cmlzdGFuLWhhcnJpcy13YW50cy10by1yZXNjdWUtdGhlbS88YSBocmVmPVwiaHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L291ci1taW5kcy1oYXZlLWJlZW4taGlqYWNrZWQtYnktb3VyLXBob25lcy10cmlzdGFuLWhhcnJpcy13YW50cy10by1yZXNjdWUtdGhlbS9cIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYDtcclxuICB2YXIgIGJsb2dwb3N0MyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+XHJcbiAgVGhlcmUgd2FzIGEgdGltZSBmb3IgU2VpbmZlbGRpYW4gQ29mZmVlIGluIENhcnMsIHdoZW4gdGhlIGNvbXBhbnkgbWFrZXMgZm9yIHRoZSByaWRlLiAgVG9kYXksIHRoZSByaWRlIG1ha2VzIGZvciB0aGUgY29tcGFueSwgYWxiZWl0IGJ5IHJlYWwtdGltZSBTa3lwZSBhbmQgcmVhbC10aW1lIGluZm8tdGFpbm1lbnQuIFNvIGlmIHlvdSBoYXZlIGFuIGV4dHJhICQ2MCwwMDAgbGF5aW5nIGFyb3VuZCwgaGVyZSdzIHRoZSBmdXR1cmUtLXRoaXMgb25lIGJ5IEJNVyAuLi48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoZXJlJ3MgYWxzbyBhIG5ldyByZWNvbmZpZ3VyYWJsZSBkaWdpdGFsIGdhdWdlIGNsdXN0ZXIgdGhhdCBCTVcgY2FsbHMgTGl2ZSBDb2NrcGl0LCBhbmQgYW4gaW1wcmVzc2l2ZWx5IGh1Z2UgYW5kIGNyaXNwIG9wdGlvbmFsIGhlYWQtdXAgZGlzcGxheSB0byByZWxheSBldmVuIG1vcmUgaW5mb3JtYXRpb24gLi4uIEJlaW5nIGZhY2VkIHdpdGggYWxsIG9mIHRob3NlIHNjcmVlbnMgYW5kIGFsbCBvZiB0aG9zZSBjaG9pY2VzIGF0IG9uY2UgcHJvYmFibHkgc291bmRzIGRhdW50aW5nLCBidXQgaW4gbXkgYnJpZWYgZXhwZXJpZW5jZSB3aXRoIGlEcml2ZSA3LCBpdCBhbGwgZmVsdCBxdWl0ZSBpbnR1aXRpdmUuIFRoZSBzeXN0ZW0gc21hcnRseSBhbGxvd3MgZm9yIHRoZSBkcml2ZXIgdG8gdXNlIHRoZWlyIHByZWZlcnJlZCBpbnRlcmZhY2UgbWV0aG9kLCBiZSB0aGF0IHZpYSB0b3VjaHNjcmVlbiwgc3RlZXJpbmcgd2hlZWwgc3dpdGNoZ2VhciwgY2xvdWQtYmFzZWQgc3BlZWNoIHJlY29nbml0aW9uIG9yIGV2ZW4gZ2VzdHVyZSBjb250cm9sLiAoQSB3b3JkIGFib3V0IHRoZSBsYXR0ZXI6IEl0J3Mgc3RpbGwgb3ZlcndoZWxtaW5nbHkgZ2ltbWlja3kuIFR3aXJsaW5nIHlvdXIgZmluZ2VyIGluIHRoZSBhaXIgdG8gdHVybiB1cCB0aGUgc3RlcmVvIHJlbWFpbnMgYSBjcm93ZC1wbGVhc2luZyBub3ZlbHR5LCBidXQgbGl0dGxlIG1vcmUpLiA8c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+PC9wPmA7XHJcbiAgdmFyICAgIGJsb2djaXRlMyA9IGAgIDxwIGNsYXNzPVwiY2l0ZVwiPjFcclxuICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuY25ldC5jb20vcm9hZHNob3cvcmV2aWV3cy8yMDE5LWJtdy14NS1wcmV2aWV3L1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25ldC5jb20vcm9hZHNob3cvcmV2aWV3cy8yMDE5LWJtdy14NS1wcmV2aWV3L1xyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYDtcclxuXHJcbiAgdmFyICAgYmxvZ3Bvc3QyID0gYDxwIGNsYXNzPVwicXVvdGVcIj48aT5UaGUgd2lyZWxlc3Mgc3RhbmRhcmQga25vd24gYXMgNEcgaGFzIHVudGV0aGVyZWQgdXMgZnJvbSBvdXIgbGl2aW5nIHJvb21zIGFuZCBvZmZpY2VzLCBhbGxvd2luZyB1cyB0byBuYXZpZ2F0ZSB1bmZhbWlsaWFyIHJvYWRzIGFuZCBzdHJlZXRzIHVzaW5nIHZvaWNlIGRpcmVjdGlvbnMgZnJvbSBHb29nbGUgTWFwcywgc3RyZWFtIG1vdmllcyBvbiBOZXRmbGl4IHdoaWxlIGNvbW11dGluZyB0byB3b3JrLCBhbmQgaW50ZXJ2aWV3IGEgcHJvc3BlY3RpdmUgaGlyZSBvbiBGYWNlVGltZSBkdXJpbmcgYSBmbGlnaHQgbGF5b3Zlci4gVGhlIG5leHQgaXRlcmF0aW9uIHByb21pc2VzIHRvIGJlIGV2ZW4gbW9yZSB0cmFuc2Zvcm1hdGl2ZSwgYmVjYXVzZSBpdCB3aWxsIHN1cHBvcnQgY29tbXVuaWNhdGlvbiBhbW9uZyBvYmplY3RzLCBhcyB3ZWxsIGFzIHBlb3BsZS4gIFxyXG4gIDwvaT48c3VwPjEgPC9zdXA+PC9wPlxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj4gPC9wPlxyXG4gIDxpbWcgc3JjPVwiZGlzdC9pbWcvNWc0Zy5qcGdcIiBjbGFzcz1cInpvb21cIiAvPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBGaXJzdCwgcHJvdmlkZXJzIG5lZWQgYSBmaW5hbCBzZXQgb2YgdGVjaG5vbG9neSBzdGFuZGFyZHMuIFRoZSBnbG9iYWwgYm9keSBzZXR0aW5nIHRoZW0sIHRoZSAzcmQgR2VuZXJhdGlvbiBQYXJ0bmVyc2hpcCBQcm9qZWN0LCByZWxlYXNlZCB0aGUgZmlyc3QgNUcgc3BlY2lmaWNhdGlvbnMgaW4gSnVuZTsgdGhlIG5leHQgc2V0IG9mIHN0YW5kYXJkcyBpcyBkdWUgaW4gMjAyMC4gKFRoZSAzR1BQLCBhIGNvbGxhYm9yYXRpb24gYmV0d2VlbiBzZXZlbiB0ZWxlY29tbXVuaWNhdGlvbnMgb3JnYW5pemF0aW9ucywgYWxzbyBzZXQgc3RhbmRhcmRzIGZvciAzRyBhbmQgNEcgTFRFIG1vYmlsZSBzeXN0ZW1zLikgNUcgbW9iaWxlIHRlc3RzIGFsc28gbmVlZCBzcGVjaWFsIGhhbmRzZXRzLCB0cmFuc21pc3Npb24gaGFyZHdhcmUgYW5kIHNvZnR3YXJlIGFuZCBhIHN5c3RlbSBkZXNpZ24gdGhhdCBkb2VzbuKAmXQgaW50ZXJmZXJlIHdpdGggNEcgYW5kIDNHIG5ldHdvcmtzLiBBbmQgZ292ZXJubWVudHMgbmVlZCB0byBzZXQgYXNpZGUgbW9iaWxlIHNwZWN0cnVtIHNwYWNlIGZvciA1Ry48L3A+XHJcbiAgICBgO1xyXG4gICAgdmFyICAgYmxvZ2NpdGUyID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE3LTAyLTE2L3RvbW9ycm93LXMtY2VsbHVsYXItbmV0d29ya3Mtd2lsbC1nZW5lcmF0ZS0zLTUtdHJpbGxpb24taW4tZWNvbm9taWMtb3V0cHV0XCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxNy0wMi0xNi90b21vcnJvdy1zLWNlbGx1bGFyLW5ldHdvcmtzLXdpbGwtZ2VuZXJhdGUtMy01LXRyaWxsaW9uLWluLWVjb25vbWljLW91dHB1dFxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICA8cCBjbGFzcz1cImNpdGVcIj4gIDxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0xNy93aGVuLXdpbGwtdWx0cmFmYXN0LWludGVybmV0LWNvbWUtdG8teW91ci1waG9uZS1xdWlja3Rha2VcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LmJsb29tYmVyZy5jb20vbmV3cy9hcnRpY2xlcy8yMDE4LTA5LTE3L3doZW4td2lsbC11bHRyYWZhc3QtaW50ZXJuZXQtY29tZS10by15b3VyLXBob25lLXF1aWNrdGFrZVxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICBgO1xyXG5cclxuICAgIHZhciAgICBibG9ncG9zdDEgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkl0J3MgdGhlIG5leHQgKGZpZnRoKSBnZW5lcmF0aW9uIG9mIGNlbGx1bGFyIHRlY2hub2xvZ3kgd2hpY2ggcHJvbWlzZXMgdG8gZ3JlYXRseSBlbmhhbmNlIHRoZSBzcGVlZCwgY292ZXJhZ2UgYW5kIHJlc3BvbnNpdmVuZXNzIG9mIHdpcmVsZXNzIG5ldHdvcmtzLiBIb3cgZmFzdCBhcmUgd2UgdGFsa2luZyBhYm91dD8gVGhpbmsgMTAgdG8gMTAwIHRpbWVzIHNwZWVkaWVyIHRoYW4geW91ciB0eXBpY2FsIGNlbGx1bGFyIGNvbm5lY3Rpb24sIGFuZCBldmVuIGZhc3RlciB0aGFuIGFueXRoaW5nIHlvdSBjYW4gZ2V0IHdpdGggYSBwaHlzaWNhbCBmaWJlci1vcHRpYyBjYWJsZSBnb2luZyBpbnRvIHlvdXIgaG91c2UuICBcclxuICA8L2k+PHN1cD4xIDwvc3VwPjwvcD5cclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+NUcgYnVpbGRzIGFudGljaXBhdGlvbiBmb3IgdGhlIGltbWluZW50IHRlY2ggcmV2b2x1dGlvbiwgYnV0IHdobydzIHBheWluZyBhdHRlbnRpb24/IFdoYXQncyB0aGUgcG9pbnQgYmVzaWRlcyBpbmNvbXBhcmFibGUgc3BlZWQ/IEl0J3Mgbm90IHNwZWVkLCB3aGljaCBpcyBhIHNlcXVlbnRpYWwsIHllc3RlcmRheSB0ZXJtOyBaZXJvIGxhdGVuY3kgbWVhbnMgZXZlcnl0aGluZyBhbGwgYXQgb25jZSwgY29taW5nIGFuZCBnb2luZzogPGk+TGF0ZW5jeSBpcyB0aGUgcHJpbWFyeSBlbGVtZW50IHRoYXQgcmVhbGx5IHVzaGVycyBpbiB0aGUgbmV3IGFnZSwgd2hlcmUgb25saW5lLCBpbnRlcm5ldCBjb25uZWN0aW9uIGVzY2FwZXMgZnJvbSBob21lIGFuZCBvZmZpY2Ugbm9kZXMgaW50byB0aGUgdmVyeSBsaW5rcyBpbiBiZXR3ZWVuITwvaT5TIFRoYXQgc2VlbXMgaW5jb252ZW5pZW50IGFuZCBmbGVldGluZyBidXQgcmVhbGx5LCBzaG91bGRuJ3QgdGhlIHdlYiBmb2xsb3cgdXMgaW4gYWN0aW9uLCByYXRoZXIgdGhhbiBjaGFpbiB1cyBkb3duPyBDb25zaWRlciB0aGUgd29ybGQgb2YgaW5zdGFudGFub3VzIHJlcXVlc3QtcmVzcG9uc2VzIC4uLi48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlxyXG4gIExhdGVuY3kgaXMgdGhlIHJlc3BvbnNlIHRpbWUgYmV0d2VlbiB3aGVuIHlvdSBjbGljayBvbiBhIGxpbmsgb3Igc3RhcnQgc3RyZWFtaW5nIGEgdmlkZW8gb24geW91ciBwaG9uZSwgc2VuZGluZyB0aGUgcmVxdWVzdCB1cCB0byB0aGUgbmV0d29yaywgYW5kIHdoZW4gdGhlIG5ldHdvcmsgcmVzcG9uZHMgYW5kIGdpdmVzIHlvdSB5b3VyIHdlYnNpdGUgb3Igc3RhcnRzIHBsYXlpbmcgeW91ciB2aWRlby4gXHJcblRoYXQgbGFnIHRpbWUgY2FuIGxhc3QgYXJvdW5kIDIwIG1pbGxpc2Vjb25kcyB3aXRoIGN1cnJlbnQgbmV0d29ya3MuIEl0IGRvZXNuJ3Qgc2VlbSBsaWtlIG11Y2gsIGJ1dCB3aXRoIDVHLCB0aGF0IGxhdGVuY3kgZ2V0cyByZWR1Y2VkIHRvIDEgbWlsbGlzZWNvbmQsIG9yIGFib3V0IHRoZSB0aW1lIGl0IHRha2VzIGZvciBhIGZsYXNoIGluIGEgbm9ybWFsIGNhbWVyYSB0byBmaW5pc2guICBcclxuVGhhdCByZXNwb25zaXZlbmVzcyBpcyBjcml0aWNhbCBmb3IgdGhpbmdzIGxpa2UgcGxheWluZyBhbiBpbnRlbnNlIHZpZGVvIGdhbWUgaW4gdmlydHVhbCByZWFsaXR5IG9yIGZvciBhIHN1cmdlb24gaW4gTmV3IFlvcmsgdG8gY29udHJvbCBhIHBhaXIgb2Ygcm9ib3RpYyBhcm1zIHBlcmZvcm1pbmcgYSBwcm9jZWR1cmUgaW4gU2FuIEZyYW5jaXNjby48L3A+PHA+XHJcbkNvbWNhc3QgeWVzdGVyZGF5IGFuZCBULU1vYmlsZSBUb21vcnJvdyBvciBub3QsIHRoZSBpbXBsaWNhdGlvbnMgb2YgYSB0cnVseSBtb2JpbGUgaW50ZXJuZXQgY291bGRuJ3QgYmUgdW5kZXJlc3RpbWF0ZWQuIFdoYXQgdXNlZCB0byBiZSBhIHNlbnNvciBpcyB0b21vcnJvdydzIGNvbnRyb2xsZXIsIGFuZCB0b2RheSdzIGNvbnRyb2xsZXJzIGJlY29tZSBzZW5zb3JzLCBiZWNhdXNlIHNvdXJjZSBhbmQgdGFyZ2V0IGJlY29tZSBpcnJlbGV2YW50IGNvbmNlcHRzIHdoZW4gbGF0ZW5jeSBmb2xkcyB1bmktZGlyZWN0aW9uYWwgd2FpdC10aW1lIGludG8gYmktZGlyZWN0aW9uYWwgY29uY3VycmVudCBjb21tdW5pY2F0aW9uLiA8L3A+PHA+UGVyaGFwcyB0aGUgY2VudHJhbCBwbGF5ZXIgaW4gdGhpcyByZXZvbHV0aW9uIGlzIHRoZSBmYXN0LWRldmVsb3BpbmcgaW50ZXJuZXQtb2YtdGhpbmdzIGluZnJhc3RydWN0dXJlIGluIGZ1bGwgZGV2ZWxvcG1lbnQtLXdpdGggYSBtb3ZpbmcgdGFyZ2V0IC4uLjwvcD4gICAgYDtcclxudmFyICAgYmxvZ2NpdGUxID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmNuZXQuY29tL2hvdy10by90aGUtNWctcmV2b2x1dGlvbi1pcy1jb21pbmctaGVyZXMtZXZlcnl0aGluZy15b3UtbmVlZC10by1rbm93L1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cuY25ldC5jb20vaG93LXRvL3RoZS01Zy1yZXZvbHV0aW9uLWlzLWNvbWluZy1oZXJlcy1ldmVyeXRoaW5nLXlvdS1uZWVkLXRvLWtub3cvXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICAgIGA7XHJcbiBcclxuXHJcbiAgICAgIHZhciB1cmwgPSBbICAgICBcclxuIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTIzJyxcclxuICAgICAgICAgICAgZGlkOiAnMTEtMTUtMTgnLFxyXG4gICAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMTUsIDIwMTggJyxcclxuICAgICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0Zhc3QsIEFub255bWl6ZWQgTW9uZXkhJyxcclxuICAgICAgICAgICAgcG9zdDogYmxvZ3Bvc3QxMjMsXHJcbiAgICAgICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEyM1xyXG4gICAgICAgICAgfSwgIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMTIyJyxcclxuICAgICAgICAgIGRpZDogJzExLTE0LTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxNCwgMjAxOCAnLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICAgICAgdGl0bGU6ICdHcmVlbiBPcHRpb25zJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTIyLFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTIyXHJcbiAgICAgICAgfSwgIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcxMTEnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0xMy0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxMywgMjAxOCAnLFxyXG4gICAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ1BpY3R1cmUgUG93ZXInLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDExMSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTExXHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICBpZDogJzEwMCcsXHJcbiAgICAgICAgZGlkOiAnMTEtMTItMTgnLFxyXG4gICAgICAgIGRhdGU6ICdOb3ZlbWJlciAxMiwgMjAxOCAnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93JyxcclxuICAgICAgICB0aXRsZTogJ1BsYXN0aWMgSGFuZ292ZXInLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MTAwLFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEwMFxyXG4gICAgICAgICAgfSwgICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICBpZDogJzA5OScsXHJcbiAgICAgICAgICBkaWQ6ICcxMS0xMC0xOCcsXHJcbiAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMTAtMTEsIDIwMTg8YnIgLz5XZWVrZW5kICcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnVGhhbmsgWW91LCBBV1MtLWZvciB5b3VyIFNvZnR3YXJlIE1lZ2F0cm9uJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MDk5LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDk5XHJcbiAgICAgICAgfSwgIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcwODgnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0wOS0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciA5LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICAgICAgICB0aXRsZTogJ0dyYXBoZW5lIERyZWFtcycsXHJcbiAgICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MDg4LFxyXG4gICAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwODhcclxuICAgICAgICAgIH0sICBcclxuICAgICAgICAgIHtcclxuICAgICAgIGlkOiAnMDc3JyxcclxuICAgICAgICBkaWQ6ICcxMS0wOC0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDgsIDIwMTggJyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdycsXHJcbiAgICAgICAgdGl0bGU6ICdXaGF0XFwncyBpbiBhIE5hbWUnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MDc3LFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTA3N1xyXG4gICAgICAgICAgfSwgICAgICAgIFxyXG4gICAgICAgIHtcclxuICAgICAgICBpZDogJzA2NicsXHJcbiAgICAgICAgICBkaWQ6ICcxMS0wNy0xOCcsXHJcbiAgICAgICAgICBkYXRlOiAnTm92ZW1iZXIgNywgMjAxOCAnLFxyXG4gICAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICB0aXRsZTogJ1RoZSBVbmNoYXJ0ZWQgQ2xvdWQgVGVycml0b3J5OiBBIE1hZ25hIENhcnRhJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MDY2LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDY2XHJcbiAgICAgICAgfSwgIFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgaWQ6ICcwNTUnLFxyXG4gICAgICAgICAgICBkaWQ6ICcxMS0wNi0xOCcsXHJcbiAgICAgICAgICAgIGRhdGU6ICdOb3ZlbWJlciA2LCAyMDE4ICcsXHJcbiAgICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnVGhlIDVHIElvVCBTdXBlckhpZ2h3YXknLFxyXG4gICAgICAgICAgICBwb3N0OiBibG9ncG9zdDA1NSxcclxuICAgICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDU1XHJcbiAgICAgICAgICB9LCAgXHJcbiAgICAgICAgICB7XHJcbiAgICAgICBpZDogJzA0NCcsXHJcbiAgICAgICAgZGlkOiAnMTEtMDUtMTgnLFxyXG4gICAgICAgIGRhdGU6ICdOb3ZlbWJlciA1LCAyMDE4ICcsXHJcbiAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgIHRpdGxlOiAnVGVzbGEgYXQgV29yaycsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QwNDQsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDQ0XHJcbiAgICAgICAgICB9LCAgICAgXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICBpZDogJzAzMycsXHJcbiAgICAgICAgZGlkOiAnMTEtMDMtMTgnLFxyXG4gICAgICAgIGRhdGU6ICdOb3ZlbWJlciAzLTQsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgICB0aXRsZTogJ05vdyB0aGF0XFwncyBhIFNhZmUgS2VlcCEnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MDMzLFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTAzM1xyXG4gICAgICB9LCAgXHJcbiAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMDIyJyxcclxuICAgICAgICBkaWQ6ICcxMS0wMi0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ05vdmVtYmVyIDIsIDIwMTggJyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJyAnLFxyXG4gICAgICAgIHRpdGxlOiAnICcsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QwMjIsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMDIyXHJcbiAgICAgIH0sICAgICAgICAge1xyXG4gICAgICAgIGlkOiAnMDEnLFxyXG4gICAgICAgIGRpZDogJzExLTAxLTE4JyxcclxuICAgICAgICBkYXRlOiAnTm92ZW1iZXIgMSwgMjAxOCAnLFxyXG4gICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICBjYXQzOiAnICcsXHJcbiAgICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDAxMSxcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUwMTFcclxuICAgICAgfSwgIFxyXG4gICAgICB7XHJcbiAgICAgICAgaWQ6ICcyMicsXHJcbiAgICAgICAgZGlkOiAnMTAtMjUtMTgnLFxyXG4gICAgICAgIGRhdGU6ICdPY3RvYmVyIDI1LCAyMDE4ICcsXHJcbiAgICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICB0aXRsZTogJ0RhdGEgdGhhdCBnb2VzIHVwIG11c3QgU3RheSBVcCcsXHJcbiAgICAgICAgcG9zdDogYmxvZ3Bvc3QyMixcclxuICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMlxyXG4gICAgICB9LCAgXHJcbiAgICAgIHtcclxuICAgICAgICBpZDogJzIxJyxcclxuICAgICAgICBkaWQ6ICcxMC0yNC0xOCcsXHJcbiAgICAgICAgZGF0ZTogJ09jdG9iZXIgMjQsIDIwMTggJyxcclxuICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgICAgdGl0bGU6ICdNZXRhLU1hdGVyaWFscywgUGFydCBJSSA8YnIgLz5PbmUsIFR3bywgVGhyZWUsIEZvdXItLU5hbm9waG90b25pYyBNZXRhbWF0ZXJpYWxzIGFuZCBNb3JlJyxcclxuICAgICAgICBwb3N0OiBibG9ncG9zdDIxLFxyXG4gICAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTIxXHJcbiAgICAgIH0sIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMjAnLFxyXG4gICAgICAgICAgZGlkOiAnMTAtMjMtMTgnLFxyXG4gICAgICAgICAgZGF0ZTogJ09jdG9iZXIgMjMsIDIwMTggJyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgICAgIHRpdGxlOiAnTWV0YS1NYXRlcmlhbHMsIFBhcnQgSSA8YnIgLz5NYXRlcmlhbCBTY2llbmNlJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MjAsXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMFxyXG4gICAgICAgIH0sICBcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZDogJzE5JyxcclxuICAgICAgICAgIGRpZDogJzEwLTIyLTE4JyxcclxuICAgICAgICAgIGRhdGU6ICdPY3RvYmVyIDIyLCAyMDE4ICcsXHJcbiAgICAgICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgICAgIHRpdGxlOiAnVGhlIFJldmVyZW50IFRpbSBDb29rOjxiciAvPkEgTW9kZXJuIEFtZXJpY2FuIERhdGEgUHJpdmFjeSBIZXJvJyxcclxuICAgICAgICAgIHBvc3Q6IGJsb2dwb3N0MTksXHJcbiAgICAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxOVxyXG4gICAgICAgIH0sIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGlkOiAnMTgnLFxyXG4gICAgICAgICAgZGlkOiAnMTAtMjAtMTgnLFxyXG4gICAgICAgICAgZGF0ZTogJ09jdG9iZXIgMjAtMjEsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICAgICAgdGl0bGU6ICdJbWFnZSBEYXRhIG9uIGEgRGlldCcsXHJcbiAgICAgICAgICBwb3N0OiBibG9ncG9zdDE4LFxyXG4gICAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMThcclxuICAgICAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNycsXHJcbiAgICAgIGRpZDogJzEwLTE5LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMTksIDIwMTggJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICB0aXRsZTogJ01hY2hpbmUgTGVhcm5pbmcsIEJ5IFRyaWFsIGFuZCBFcnJvcicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTcsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE3XHJcbiAgICB9LCAgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTYnLFxyXG4gICAgICBkaWQ6ICcxMC0xOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDE4LCAyMDE4ICcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnQXBwbGUgIEdvc3NpcCwgYW5kIERpZ2l0YWwgSGVhcnNheSBBYm91dCBTbm9vcGluZycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTYsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE2XHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNScsXHJcbiAgICAgIGRpZDogJzEwLTE3LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMTcsIDIwMTggJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnUXVhbnR1bSBEYXRhJyxcclxuICAgICAgdGl0bGU6ICdXaGVyZVxcJ3MgdGhlIEZpY3Rpb24gQWlzbGU/JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxNSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTVcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzE0JyxcclxuICAgICAgZGlkOiAnMTAtMTYtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ1RoZSBCZXR0ZXIgV29ybGQgdGhhdCBUZWNoIEJyaW5ncycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTQsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE0XHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMycsXHJcbiAgICAgIGRpZDogJzEwLTE1LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMTUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdFY29ub21pYyBQcm9zcGVyaXR5LCBEZW1vY3JhY3ksIGFuZCB0aGUgVGVjaG5vbG9neSB0aGF0IEJpbmRzIFRoZSBUd28nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEzLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxM1xyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTInLFxyXG4gICAgICBkaWQ6ICcxMC0xMy0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDEzLTE0LCAyMDE4PGJyIC8+PHNtYWxsPldlZWtlbmQ8L3NtYWxsPicsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1F1YW50dW0gRGF0YScsXHJcbiAgICAgIHRpdGxlOiAnUHJvYmFiaWxpc3RpYyBSZWFsaXR5IChhbmQgSW5mb3JtYXRpb24pLCBQYXJ0IElJPGJyIC8+UXVhbnR1bSBNb2xlY3VsYXIgUHN5Y2hvbG9neScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEyXHJcbiAgICB9LCBcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMScsXHJcbiAgICAgIGRpZDogJzEwLTEyLTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMTIsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgICB0aXRsZTogJ1Byb2JhYmlsaXN0aWMgUmVhbGl0eSAoYW5kIEluZm9ybWF0aW9uKSwgUGFydCBJPGJyIC8+IFZlcmlmaWFibHkgRGV0ZXJtaW5hdGVkIE9uY2UgYW5kIEZvciBBbGwnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDExLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMVxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTAnLFxyXG4gICAgICBkaWQ6ICcxMC0xMS0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDExLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnRWNvbm9taWMgUHJvc3Blcml0eSwgRGVtb2NyYWN5LCBhbmQgdGhlIFRlY2hub2xvZ3kgdGhhdCBCaW5kcyBUaGUgVHdvJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTBcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzknLFxyXG4gICAgICBkaWQ6ICcxMC0xMC0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDEwLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ0Jsb2NrY2hhaW5cXCdzIFF1aWV0IFN1Y2Nlc3MnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDksXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTlcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzgnLFxyXG4gICAgICBkaWQ6ICcxMC0wOS0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDksIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdJbnRlbGxlY3R1YWwgRXNwaW9uYWdlOiA8YnIgLz5QYXJ0IElJOiBXaGVuIERvZXMgRmFpciBQbGF5IGZvciBBbGwgV2FycmFudCBhIEZvdWwgdG8gT25lPycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0OCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlOFxyXG4gICAgfSwgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNycsXHJcbiAgICAgIGRpZDogJzEwLTA4LTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgOCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnSW50ZWxsZWN0dWFsIEVzcGlvbmFnZSwgUGFydCBJOjxiciAvPlNtYWxsIENoaXBzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q3LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU3XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzYnLFxyXG4gICAgICBkaWQ6ICcxMC0wNi0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDYtNzxiciAvPldlZWtlbmQsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnSHVtYW5lIFRlY2hub2xvZ3k6IElzIHRoZXJlIGEgR29hbCBQb3N0PzxiciAvPlBhcnQgSUlJOiBSZXNpc3RpbmcgQ29tcGFydG1lbnRhbGl6YXRpb24nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDYsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTZcclxuICAgIH0sIFxyXG4gICAge1xyXG4gICAgICBpZDogJzUnLFxyXG4gICAgICBkaWQ6ICcxMC0wNS0xOCcsXHJcbiAgICAgIGRhdGU6ICdPY3RvYmVyIDUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdIdW1hbmUgVGVjaG5vbG9neTogSXMgdGhlcmUgYSBHb2FsIFBvc3Q/PGJyIC8+UGFydCBJSTogVGVjaC1iYXNlZCBTb2NpYWwgQ2FwaXRhbCcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlNVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc0JyxcclxuICAgICAgZGlkOiAnMTAtMDQtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciA0LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICB0aXRsZTogJ0h1bWFuZSBUZWNobm9sb2d5OiBJcyB0aGVyZSBhIEdvYWwgUG9zdD88YnIgLz5QYXJ0IEk6IENodXJjaGVzLCBFZHVjYXRpb24sIGFuZCBUZWNobm9sb2dpZXMnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDQsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTRcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMycsXHJcbiAgICAgIGRpZDogJzEwLTAzLTE4JyxcclxuICAgICAgZGF0ZTogJ09jdG9iZXIgMywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnRmFzdCBDYXJzIGFuZCBGYXN0ZXIgSW5mbycsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlM1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcyJyxcclxuICAgICAgZGlkOiAnMTAtMDItMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAyLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdGYXN0IDVHOiBQYXJ0IElJPGJyIC8+VGhlIEhvdyBhbmQgV2hlbicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MixcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxJyxcclxuICAgICAgZGlkOiAnMTAtMDEtMTgnLFxyXG4gICAgICBkYXRlOiAnT2N0b2JlciAxLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdGYXN0IDVHOiBQYXJ0IEk8YnIgLz5UaGUgV2h5IGFuZCBXaGF0JyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxXHJcbiAgICB9IFxyXG5cclxuXHJcbiAgXHJcbiAgXTtcclxuXHJcbiAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGNhdCA9IGAgXHJcbiAgICA8ZGl2IGlkPVwiJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0RpdlwiPiBcclxuICAgIDxociAvPiAgXHJcbiAgICA8YSBocmVmPVwiI3RvcFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgXHJcbiAgICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gICAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+IFxyXG4gICAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICAgIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCIgIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gICAgPGg2ICBpZD1cInRpdGxlXCIgICBjbGFzcz1cImRhaWx5dGl0bGUgY2hhcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcbiAgICA8YnIgLz5cclxuICAgIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH1cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBpZD1cImJsb2djaXRlXCI+JHt1cmxbaV0uYmxvZ2NpdGV9XHJcbiAgICA8L2Rpdj5gO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtb2N0XCIpLmlubmVySFRNTCArPSBjYXQ7XHJcbiAgfVxyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgdXJsLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgY2F0TW9kID0gYFxyXG4gIDxkaXYgaWQ9XCJtb2RfJHt1cmxbaV0uZGlkfVwiIGNsYXNzPVwiYmxvZ0Rpdk1vZFwiPiBcclxuICA8aHIgLz4gIFxyXG4gIDxhIGhyZWY9XCIjdG9wLW1vZFwiPjxidXR0b24+VG9wPC9idXR0b24+PC9hPiAgIFxyXG4gIDxoNCBjbGFzcz1cInRpdGxlIGRhaWx5dGVjaCBsb25ndGl0bGVcIj5PVVIgREFJTFkgVEVDSDo8L2g0PiAgXHJcbiAgPGg1IGlkPVwiY2F0M1wiIGNsYXNzPVwiICBzdWJkYWlseXRlY2hcIj4ke3VybFtpXS5jYXQzfTwvaDU+ICBcclxuICA8cCBpZD1cImF1dGhvclwiIGNsYXNzPVwiICBhdXRob3JcIj4ke3VybFtpXS5hdXRob3J9PC9wPiAgIFxyXG4gIDxoNiAgaWQ9XCJkYXRlXCIgY2xhc3M9XCIgIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS5kYXRlfTwvaDY+ICAgIFxyXG4gIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gIDxiciAvPlxyXG4gIDxkaXYgaWQ9XCJwb3N0XCI+JHt1cmxbaV0ucG9zdH08L2Rpdj5cclxuICA8L2Rpdj5cclxuIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLW9jdC1tb2RcIikuaW5uZXJIVE1MICs9IGNhdE1vZDtcclxuICB9XHJcbiAvL2NvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG4gIGNvbnNvbGUubG9nKHVybCk7XHJcbn07XHJcbmJsb2dnZXJPY3QoKTsiLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgYmxvZ2dlclNlcCA9IGZ1bmN0aW9uICgpIHtcclxuIFxyXG4gIHZhciAgICBibG9ncG9zdDI1ID0gYDxwIGNsYXNzPVwicGFyYWdyYXBoXCI+V2ViJ3MgZm9yYXkgaW50byBJbnRlcm5ldCBvZiBUaGluZ3MgYW5kIHRoZSB1cGNvbWluZyA1RyByZXZvbHV0aW9uIG5lY2Vzc2l0YXRlcyByZWFsLXRpbWUgcHJvY2Vzc2luZy4gIEx1Y2tpbHksIHRoZSBkeW5hbWljIHlldCBzbG93IGxhbmd1YWdlIG9mIHRoZSB3ZWIsIEphdmFTY3JpcHQgbm93IGdldHMgYSBzdXBlci1zcGVlZCBib29zdCBmcm9tIFdlYiBBc3NlbWJseSwgYSAgbXVjaCBsb3dlci1sZXZlbCwgYmluYXJ5IGxhbmd1YWdlLiBTaW5jZSBXZWIgQXNzZW1ibHkgb25seSByZWNvZ25pemVzIHR3byBmbG9hdGluZyBwb2ludCBudW1iZXIgdHlwZXMgYW5kIHR3byBpbnRlZ2VyIHR5cGVzLCBSdXN0IGhhbmRsZXMgc3RyaW5nIHZhbHVlcywgZXRjLjwvcD4gPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkJvdGggUnVzdCBhbmQgSmF2YVNjcmlwdCBoYXZlIHZpYnJhbnQgcGFja2FnZSBlY29zeXN0ZW1zLiBSdXN0IGhhcyBjYXJnbyBhbmQgY3JhdGVzLmlvLiBKYXZhU2NyaXB0IGhhcyBzZXZlcmFsIENMSSB0b29scywgaW5jbHVkaW5nIHRoZSBucG0gQ0xJLCB0aGF0IGludGVyZmFjZSB3aXRoIHRoZSBucG0gcmVnaXN0cnkuIEluIG9yZGVyIGZvciBXZWJBc3NlbWJseSB0byBiZSBzdWNjZXNzZnVsLCB3ZSBuZWVkIHRoZXNlIHR3byBzeXN0ZW1zIHRvIHdvcmsgd2VsbCB0b2dldGhlciwgc3BlY2lmaWNhbGx5Ojxici8+PGJyLz5cclxuXHJcbiAgUnVzdCBkZXZlbG9wZXJzIHNob3VsZCBiZSBhYmxlIHRvIHByb2R1Y2UgV2ViQXNzZW1ibHkgcGFja2FnZXMgZm9yIHVzZSBpbiBKYXZhU2NyaXB0IHdpdGhvdXQgcmVxdWlyaW5nIGEgTm9kZS5qcyBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxyXG4gIEphdmFTY3JpcHQgZGV2ZWxvcGVycyBzaG91bGQgYmUgYWJsZSB0byB1c2UgV2ViQXNzZW1ibHkgd2l0aG91dCByZXF1aXJpbmcgYSBSdXN0IGRldmVsb3BtZW50IGVudmlyb25tZW50XHJcbiAgPGJyLz48YnIvPlxyXG5FbnRlcjogd2FzbS1wYWNrLiBcclxud2FzbS1wYWNrIGlzIGEgdG9vbCBmb3IgYXNzZW1ibGluZyBhbmQgcGFja2FnaW5nIFJ1c3QgY3JhdGVzIHRoYXQgdGFyZ2V0IFdlYkFzc2VtYmx5LiBUaGVzZSBwYWNrYWdlcyBjYW4gYmUgcHVibGlzaGVkIHRvIHRoZSBucG0gUmVnaXN0cnkgYW5kIHVzZWQgYWxvbmdzaWRlIG90aGVyIHBhY2thZ2VzLiBUaGlzIG1lYW5zIHlvdSBjYW4gdXNlIHRoZW0gc2lkZS1ieS1zaWRlIHdpdGggSlMgYW5kIG90aGVyIHBhY2thZ2VzLCBhbmQgaW4gbWFueSBraW5kIG9mIGFwcGxpY2F0aW9ucywgYmUgaXQgYSBOb2RlLmpzIHNlcnZlciBzaWRlIGFwcCwgYSBjbGllbnQtc2lkZSBhcHBsaWNhdGlvbiBidW5kbGVkIGJ5IFdlYnBhY2ssIG9yIGFueSBvdGhlciBzb3J0IG9mIGFwcGxpY2F0aW9uIHRoYXQgdXNlcyBucG0gZGVwZW5kZW5jaWVzLiBZb3UgY2FuIGZpbmQgd2FzbS1wYWNrIG9uIGNyYXRlcy5pbyBhbmQgR2l0SHViLjxzdXA+MSA8L3N1cD48L3A+XHJcbjxwPlN0ZXAtYnktc3RlcCwgc29mdHdhcmUgYWR2YW5jZXMgaW4gc3RlcC1sb2NrIHdpdGggaGFyZHdhcmUuYDtcclxuXHJcbiAgdmFyICAgYmxvZ2NpdGUyNSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly9oYWNrcy5tb3ppbGxhLm9yZy8yMDE4LzA0L2hlbGxvLXdhc20tcGFjay9cIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vaGFja3MubW96aWxsYS5vcmcvMjAxOC8wNC9oZWxsby13YXNtLXBhY2svXHJcbiAgPC9hPlxyXG4gIDwvcD4gIFxyXG4gIGA7XHJcblxyXG4gIHZhciAgIGJsb2dwb3N0MjQgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5EZW1vY3JhY3ksIGkuZS4sIHBvd2VyIG9mIHRoZSBwZW9wbGUsIGlzIG9mdGVuIGV4cHJlc3NlZCBpbiB0aGUgdG9vbHMgYW5kIHJlc291cmNlcyBhdmFpbGFibGUgdG8gZXZlcnlvbmUuIERhdGEgdmlzdWFsaXphdGlvbiBzb2Z0d2FyZSBpcyBwcm9oaWJpdGl2ZWx5IGV4cGVuc2l2ZSwgYW5kIGNvbXBsaWNhdGVkLCBsaW1pdGluZyBhY2Nlc3MgdG8gdW5pdmVyc2l0aWVzIGFuZCBjb21tZXJjZS4gU28sIG1hbnkgaW1wb3J0YW50IGRhdGEgc3RvcmllcyBhcmUgcmVsZWdhdGVkIHRvIEV4Y2VsIGJhciBjaGFydHMuIFRoZXNlIGRheXMsIHRoZSBwcmVlbWluZW50IG1lZGl1bSBmb3IgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uIG9mIGRhdGEgaXMgZnJlZSB0byBhbGw6IDxpPjxzdHJvbmc+UGFuZGFzPC9zdHJvbmc+LCBzaG9ydCBmb3IgdGhlICBFY29ub21ldHJpY3MgdGVybSAnUGFuZWwgRGF0YScsIHRoYXQgZmVhdHVyZXMgcGFyYWdyYXBocyBvZiBzdGF0aXN0aWNhbCwgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2Ugd2l0aCBzcG9rZW4gbGFuZ3VhZ2UsIGNvdXBsZWQgd2l0aCBwb3dlcmZ1bCBkYXRhIHZpc3VhbGl6YXRpb246ICA8L2k+IDwvcD5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICAgIE1pbGxpb25zIG9mIHBlb3BsZSBhcm91bmQgdGhlIHdvcmxkIHVzZSBQYW5kYXMuIEluIE9jdG9iZXIgMjAxNyBhbG9uZSwgU3RhY2sgT3ZlcmZsb3csIGEgd2Vic2l0ZSBmb3IgcHJvZ3JhbW1lcnMsIHJlY29yZGVkIDUgbWlsbGlvbiB2aXNpdHMgdG8gcXVlc3Rpb25zIGFib3V0IFBhbmRhcyBmcm9tIG1vcmUgdGhhbiAxIG1pbGxpb24gdW5pcXVlIHZpc2l0b3JzLiBEYXRhIHNjaWVudGlzdHMgYXQgR29vZ2xlLCBGYWNlYm9vaywgSlAgTW9yZ2FuLCBhbmQgdmlydHVhbGx5IGV2ZXJ5IG90aGVyIG1ham9yIGNvbXBhbnkgdGhhdCBhbmFseXplIGRhdGEgdXNlcyBQYW5kYXMuIE1vc3QgcGVvcGxlIGhhdmVu4oCZdCBoZWFyZCBvZiBpdCwgYnV0IGZvciBtYW55IHBlb3BsZSB3aG8gZG8gaGVhdnkgZGF0YSBhbmFseXNpc+KAlGEgcmFwaWRseSBncm93aW5nIGdyb3VwIHRoZXNlIGRheXPigJRsaWZlIHdvdWxkbuKAmXQgYmUgdGhlIHNhbWUgd2l0aG91dCBpdC4gKFBhbmRhcyBpcyBvcGVuIHNvdXJjZSwgc28gaXTigJlzIGZyZWUgdG8gdXNlLikgIDxiciAvPjxiciAvPkJhc2ljYWxseSwgUGFuZGFzIG1ha2VzIGl0IHNvIHRoYXQgZGF0YSBhbmFseXNpcyB0YXNrcyB0aGF0IHdvdWxkIGhhdmUgdGFrZW4gNTAgY29tcGxleCBsaW5lcyBvZiBjb2RlIGluIHRoZSBwYXN0IG5vdyBvbmx5IHRha2UgNSBzaW1wbGUgbGluZXMsIGJlY2F1c2UgIFtQYW5kYXMgY3JlYXRvcl0gTWNLaW5uZXkgYWxyZWFkeSBkaWQgdGhlIGhlYXZ5IGxpZnRpbmcuICBcclxuICAgIDxzdXA+MTwvc3VwPjwvcD5cclxuPHA+ICAgICAgRGF0YSBleHByZXNzaW9uLCBhdCB0aGUgZW5kIG9mIHRoZSBkYXksIGFuZCBhY3Jvc3MgdGhlIGxhbmQsIGlzIG5vdyBhbiBleHByZXNzaW9uIGZvciBhbGwhPC9wPlxyXG4gICAgXHJcbiAgICBgO1xyXG4gICAgdmFyICAgYmxvZ2NpdGUyNCA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gMSA8YSBocmVmPVwiaHR0cHM6Ly9xei5jb20vMTEyNjYxNS90aGUtc3Rvcnktb2YtdGhlLW1vc3QtaW1wb3J0YW50LXRvb2wtaW4tZGF0YS1zY2llbmNlL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9xei5jb20vMTEyNjYxNS90aGUtc3Rvcnktb2YtdGhlLW1vc3QtaW1wb3J0YW50LXRvb2wtaW4tZGF0YS1zY2llbmNlL1xyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYDtcclxuICB2YXIgICAgIGJsb2dwb3N0MjMgPSBgIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5UaGUgQ29sbGVnZSBUZXJtLVBhcGVyLCB0aGUgcGVyZW5uaWFsIG9iamVjdCBvZiBkcmVhZCBvciBlbGF0aW9uLCBvZiB0ZWRpdW0gb3IgZXhjaXRlbWVudC4gWWV0LCBtb3JlIGFuZCBtb3JlLCB0aGUgbmVlZHMgZm9yIGNvbW11bmljYXRpb24gcmVxdWlyZSB0aGUgaW5jbHVzaW9uIG9mIHByb2dyYW1taW5nLCBhbmFseXRpYyBsYW5ndWFnZS4gUGFyYWdyYXBocyBvZiBlbG9xdWVudGx5IHdyaXR0ZW4gY29kZSB3aXRoIHBhcmFncmFwaHMgb2Ygc3lub3BzaXMsIGZyb20gb25lIGxvZ2ljYWwgc3RhdGVtZW50IHRvIHRoZSBuZXh0LCBsYXlpbmcgb3V0IHRoZSBwcm9vZnMgd2l0aCBlYWNoIHBhcmFncmFwaC4gQmVzdCB5ZXQsIGl0IGlzIGlubmF0ZWx5IG9ubGluZSBhbmQgcHJlc2VudGFibGUsIGFuZCBlbXBsb3lzIHRoZSBwb3dlcmZ1bCBsYW5ndWFnZXMgbGlrZSBQeXRob24gYW5kIFIuIEJ1dCBob3cgdG8gY29tbXVuaWNhdGUgdGhlc2Ugc3BlY2lhbGl6ZWQgcGFwZXJzIHRvIGEgd2lkZSBhdWRpZW5jZT88L3A+XHJcbiAgICA8cCBjbGFzcz1cInF1b3RlXCI+IFxyXG4gICAgVGhlIG1vcmUgc29waGlzdGljYXRlZCBzY2llbmNlIGJlY29tZXMsIHRoZSBoYXJkZXIgaXQgaXMgdG8gY29tbXVuaWNhdGUgcmVzdWx0cy4gUGFwZXJzIHRvZGF5IGFyZSBsb25nZXIgdGhhbiBldmVyIGFuZCBmdWxsIG9mIGphcmdvbiBhbmQgc3ltYm9scy4gVGhleSBkZXBlbmQgb24gY2hhaW5zIG9mIGNvbXB1dGVyIHByb2dyYW1zIHRoYXQgZ2VuZXJhdGUgZGF0YSwgYW5kIGNsZWFuIHVwIGRhdGEsIGFuZCBwbG90IGRhdGEsIGFuZCBydW4gc3RhdGlzdGljYWwgbW9kZWxzIG9uIGRhdGEuIFRoZXNlIHByb2dyYW1zIHRlbmQgdG8gYmUgYm90aCBzbyBzbG9wcGlseSB3cml0dGVuIGFuZCBzbyBjZW50cmFsIHRvIHRoZSByZXN1bHRzIHRoYXQgaXTigJlzIGNvbnRyaWJ1dGVkIHRvIGEgcmVwbGljYXRpb24gY3Jpc2lzLCBvciBwdXQgYW5vdGhlciB3YXksIGEgZmFpbHVyZSBvZiB0aGUgcGFwZXIgdG8gcGVyZm9ybSBpdHMgbW9zdCBiYXNpYyB0YXNrOiB0byByZXBvcnQgd2hhdCB5b3XigJl2ZSBhY3R1YWxseSBkaXNjb3ZlcmVkLCBjbGVhcmx5IGVub3VnaCB0aGF0IHNvbWVvbmUgZWxzZSBjYW4gZGlzY292ZXIgaXQgZm9yIHRoZW1zZWx2ZXMuPGJyIC8+PGJyIC8+XHJcbiAgICBQZXJoYXBzIHRoZSBwYXBlciBpdHNlbGYgaXMgdG8gYmxhbWUuIFNjaWVudGlmaWMgbWV0aG9kcyBldm9sdmUgbm93IGF0IHRoZSBzcGVlZCBvZiBzb2Z0d2FyZTsgdGhlIHNraWxsIG1vc3QgaW4gZGVtYW5kIGFtb25nIHBoeXNpY2lzdHMsIGJpb2xvZ2lzdHMsIGNoZW1pc3RzLCBnZW9sb2dpc3RzLCBldmVuIGFudGhyb3BvbG9naXN0cyBhbmQgcmVzZWFyY2ggcHN5Y2hvbG9naXN0cywgaXMgZmFjaWxpdHkgd2l0aCBwcm9ncmFtbWluZyBsYW5ndWFnZXMgYW5kIOKAnGRhdGEgc2NpZW5jZeKAnSBwYWNrYWdlcy4gQW5kIHlldCB0aGUgYmFzaWMgbWVhbnMgb2YgY29tbXVuaWNhdGluZyBzY2llbnRpZmljIHJlc3VsdHMgaGFzbuKAmXQgY2hhbmdlZCBmb3IgNDAwIHllYXJzLiBQYXBlcnMgbWF5IGJlIHBvc3RlZCBvbmxpbmUsIGJ1dCB0aGV54oCZcmUgc3RpbGwgdGV4dCBhbmQgcGljdHVyZXMgb24gYSBwYWdlLjxzdXA+MTwvc3VwPjwvcD5cclxuICAgIDxwPkFuYWNvbmRhLCB0aGUgcHJvZ3JhbW1pbmcgcGFja2FnZSBidW5kbGUgZmVhdHVyZXMgbWF0aCBzb2Z0d2FyZSB3aXRoIFNweWRlciBhcHBsaWNhdGlvbnMsIHlldCB0aGUgSnVweXRlciBub3RlYm9vayBpcyBhbHJlYWR5IHJldm9sdXRpb25pemluZyBhY2FkZW1pYyBwdWJsaWNhdGlvbnMuLi5gXHJcbiAgICA7XHJcbiAgICB2YXIgICAgICBibG9nY2l0ZTIzPSBgIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAxIDxhIGhyZWY9XCJcclxuICBodHRwczovL3d3dy50aGVhdGxhbnRpYy5jb20vc2NpZW5jZS9hcmNoaXZlLzIwMTgvMDQvdGhlLXNjaWVudGlmaWMtcGFwZXItaXMtb2Jzb2xldGUvNTU2Njc2L1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+XHJcbiAgaHR0cHM6Ly93d3cudGhlYXRsYW50aWMuY29tL3NjaWVuY2UvYXJjaGl2ZS8yMDE4LzA0L3RoZS1zY2llbnRpZmljLXBhcGVyLWlzLW9ic29sZXRlLzU1NjY3Ni8gXHJcbiAgPC9hPlxyXG4gIDwvcD4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPiAyIDxhIGhyZWY9XCJodHRwczovL3F6LmNvbS8xNDE2ODY3L3RoZS0yMDE4LW5vYmVsLXByaXplLWluLWVjb25vbWljcy1nb2VzLXRvLXdpbGxpYW0tbm9yZGhhdXMtYW5kLXBhdWwtcm9tZXIvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS8xNDE2ODY3L3RoZS0yMDE4LW5vYmVsLXByaXplLWluLWVjb25vbWljcy1nb2VzLXRvLXdpbGxpYW0tbm9yZGhhdXMtYW5kLXBhdWwtcm9tZXIvXHJcbiAgPC9hPlxyXG4gIDwvcD4gIFxyXG4gICAgIGA7ICBcclxuICAgICB2YXIgICAgICAgIGJsb2dwb3N0MjAgPSBgIDxwIGNsYXNzPVwicXVvdGVcIj4gPGJyIC8+PGJyIC8+XHJcbiAgPC9wPlxyXG4gIGA7XHJcbiAgdmFyICAgICAgICBibG9nY2l0ZTIwICAgPSAgYFxyXG4gICBcclxuICBgO1xyXG4gXHJcbiAgdmFyICAgICAgYmxvZ3Bvc3QxOT0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5Gb3IgZXZlcnkgYXJ0aWNsZSBhbmQgYmxvZyBvbiB0aGUgc2NpLWZpIGltYWdpbmF0aW9ucyBvZiB0ZWNoIHdyaXRlcnMsIHJlYWwgQS5JLiBwcmVzZW50cyBpdHNlbGYgZXZlcnkgc28gb2Z0ZW4gYXMgd2hhdCBpdCBpcyBlc3NlbnRpYWxseTogYSB0b29sLjxpPiBBIG11bHRpLXB1cnBvc2UgdG9vbHNldCwgdHJhY2luZyBpdHMgYWxnb3JpdGhtaWMgcm9vdCB0byAmRWFjdXRlO21pbGUgRHVya2hlaW1cXCdzIDE4NzBzIGVyYSBjbGFzc2lmaWNhdGlvbiBzY2llbmNlPC9pPiBvZiBodW1hbiBlcGlkaW9sb2d5IHVzaW5nIG5hdGlvbmFsIHBvcHVsYXRpb24gZGF0YSBmcm9tIFBhcmlzLiA8L3A+PHA+XHJcbiAgRWFybGllciAgU3RhdGlzdGljaWFucyBhbmQgU2NpZW50aXN0cywgaS5lLiBtb2Rlcm4gRGV2ZWxvcGVycyBhbmQgRW5naW5lZXJzIGFsc28gdG9vayB0aGVpciBnZW5lcmF0aW9uJ3MgSW5mb3JtYXRpb24gVGVjaG5vbG9neSwgYXBwbHlpbmcgaXQgdG93YXJkIGh1bWFuLWRyaXZlbiBwdXJwb3Nlcy4gPC9wPlxyXG4gIDxwPkknbSBhbiBvcHRpbWlzdCBhdCBoZWFydCwgc28gdGhpcyBibG9nIHBvc3Qgc3RhbmRzIG91dDogPC9wPjxwIGNsYXNzPVwicXVvdGVcIj5J4oCZZCBsaWtlIHRvIHBvaW50IG91dCB0aGF0IHRoZSByZWNpcGUgaXNu4oCZdCBhbGwgdGhhdCBkaWZmZXJlbnQgZnJvbSBjb2RlIHRoYXQgYSBwcm9ncmFtbWVyIG1pZ2h0IGhhdmUgd3JpdHRlbiBieSBleWViYWxsaW5nIHRoZSBwcm9ibGVtIGFuZCBtYW51YWxseSBtYWtpbmcgdXAgc29tZSBydWxlcy4gUXVpdCBhbnRocm9wb21vcnBoaXppbmcgbWFjaGluZSBsZWFybmluZyBhbHJlYWR5LiBBIG1vZGVsIGlzIGNvbmNlcHR1YWxseSB0aGUgc2FtZSBraW5kIG9mIHRoaW5nIGFzIHJlZ3VsYXIgY29kZS4gWW91IGtub3csIHRoZSBraW5kIG9mIHJlY2lwZSB0aGF04oCZcyBoYW5kY3JhZnRlZCBieSBzb21lIGh1bWFuIGFybWVkIHdpdGggYW4gb3BpbmlvbiBhbmQgYSBjYWZmZWluZSBzb3VyY2UuPGJyIC8+PGJyIC8+QW5kIGRvbuKAmXQgZ28gYXJvdW5kIHNheWluZyB0aGF0IHJldHJhaW5pbmfigIrigJTigIpqYXJnb24gZm9yIHJlcnVubmluZyB0aGUgYWxnb3JpdGhtIHRvIGFkanVzdCB0aGUgYm91bmRhcnkgYXMgbmV3IGV4YW1wbGVzIGFyZSBnYXRoZXJlZOKAiuKAlOKAim1ha2VzIGl0IGNyZWF0dXJlLWxpa2Ugb3IgaW5oZXJlbnRseSBkaWZmZXJlbnQgZnJvbSB5b3VyIHByb2dyYW1tZXLigJlzIHN0YW5kYXJkIHdvcmsgcHJvZHVjdC4gSHVtYW5zIGNhbiBzaXQgdGhlcmUgdHdlYWtpbmcgdGhlIGNvZGUgaW4gcmVzcG9uc2UgdG8gbmV3IGluZm8gdG9vLiA8c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+IE5vdywgQS5JLiB0aGF0IGlzIGF0dGFjaGVkIHRvIHJvYm90b3RpY3M/IFRoYXQgaXMgYW4gZW50aXJlbHkgZGlmZmVyZW50IHN0b3J5LCBhbmQgbW9yZSBha2luIHRvIGFub3RoZXIgdGVjaG5vbG9neSwgZ3VuIHdlYXBvbiBwcm9saWZlcmF0aW9uIGFuZCBhZHZhbmNlbWVudC4gQXBwbGVzIGFuZCBPcmFuZ2VzOiBUd28gY29tcGxldGVseSBkaWZmZXJlbnQgdGltZWxpbmVzIGFuZCBhbmFsb2dpZXMgdGhhdCBvbmx5IGltYWdpbmF0aXZlbHkgcmVsYXRlIGFjY29yZGluZyB0byBIb2xseXdvb2QtZXNxdWUgam91cm5hbGlzdHMgdGhhdCBjYW4gYXNzdW1lIG1hbGV2YWxlbnQgaW50ZW50IGZyb20gYSB0b29sLCB3aGV0aGVyIGEgdXRlbnNpbCwgYSBjYXIsIG9yIGFuIGFsZ29yaXRobS4gXHJcbiAgICA8L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ2NpdGUxOSAgID0gIGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9oYWNrZXJub29uLmNvbS9tYWNoaW5lLWxlYXJuaW5nLWlzLXRoZS1lbXBlcm9yLXdlYXJpbmctY2xvdGhlcy01OTkzM2QxMmEzY2NcIj5odHRwczovL2hhY2tlcm5vb24uY29tL21hY2hpbmUtbGVhcm5pbmctaXMtdGhlLWVtcGVyb3Itd2VhcmluZy1jbG90aGVzLTU5OTMzZDEyYTNjYzwvYT48L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxOCA9IGA8cD5UaGUgMjAwMCdzIFNpbGljb24gVmFsbGV5LWxlZCBib29tIGFuZCBidXN0IHJlc3VsdGVkIGZyb20gb3ZlcnNwZWN1bGF0aW9uLiBUaGUgY3J5cHRvLXBoZW5vbWVub24gbW9yZXNvIHJlc2VtYmxlcyB0aGUgZGVyaXZhdGl2ZXMgcGFja2FnZXMgZnJvbSB0aGUgMjAwNy04IHJlY2Vzc2lvbiBidXN0IGJlY2F1c2UgdmFsdWUgd2FzIHBsYWNlZCBvbiByZWFsIGVzdGF0ZSdzIG1pc2NhbGN1bGF0ZWQgd29ydGggYmFzZWQgb24gdGhlIGFzc3VtcHRpb24gdGhlIGhvbWVvd25lcnMgZGlkbid0IGJvcnJvdyBvdmVyIHRoZWlyIGluY29tZS4gTGlrZXdpc2UgY3J5cHRvLUlDTydzIHZhbHVlcyB3YXNuJ3QgYmFzZWQgb24gYSBjdXJyZW5jeSBjb21wcmlzZWQgb2YgcmVhbCBjYXNoLCBidXQgPGk+IHJhdGhlciwgSUNPJ3MgYW5kIGNyeXB0by1wbGF0Zm9ybXMgd2VyZSBpbnZlc3RtZW50cyBvZiBjcnlwdG8tY3VycmVuY3khPC9pPlNvLCBpZiB0aGUgb25lIGRvZXMgd2VsbCwgdGhlIG90aGVyIGNvbnRpbnVlcyB0byBkbyB3ZWxsLCBtdWx0aXBsaWVkLiBCdXQgZXhwb25lbnRpYWwgZ2FpbiBhbHNvIG1lYW5zIGxvZ2FyaXRobWljIGxvc3MgLi4uXHJcbiAgIDxwIGNsYXNzPVwicXVvdGVcIj4gVGhlcmUgaGFzIGJlZW4gYSBjb2xsYXBzZSBpbiB0aGUgbnVtYmVyIG9mIElDT3MgdGhhdCBoYXZlIHRyaWVkIHRvIHJhaXNlIGZpbmFuY2luZy5cclxuXHJcbiAgVGhpcyBoYXMgYmVlbiBkcml2ZW4gYnkgYSBudW1iZXIgb2YgZmFjdG9ycyBpbmNsdWRpbmcgdW5jZXJ0YWludHkgYXJvdW5kIHJlZ3VsYXRpb24sIGZhbGxpbmcgY3J5cHRvIG1hcmtldCBwcmljZXMgYW5kIG9mIGNvdXJzZSwgZGlzaWxsdXNpb25tZW50IGluIHRoZSBwcmV2aW91cyBJQ09zIHRoYXQgcmFpc2VkIGZ1bmRpbmcuICAgIEdpdmVuIHRoYXQgdGhlIEV0aGVyZXVtIGJsb2NrY2hhaW4gd2FzIHRoZSBwcmVtaWVyIHBsYXRmb3JtIGZvciBJQ09zIHRvIHJhaXNlIHRoZWlyIGZ1bmRpbmcsIGl0IGlzIGZlZWxpbmcgdGhlIGJydW50IG9mIHRoaXMgc2xvd2Rvd24uPGJyIC8+PGJyIC8+XHJcbiAgXHJcbiAgTm90IG9ubHkgaXMgdGhpcyBsYWNrIG9mIOKAnElDTyBkZW1hbmTigJ0gZm9yIEVUSCBoYXZpbmcgYW4gYWR2ZXJzZSBlZmZlY3Qgb24gdGhlIHByaWNlIGJ1dCB0aGUgcHJldmlvdXMgSUNPcyBhcmUgYWxzbyBkcml2aW5nIHRoZSBwcmljZSBsb3dlciBhcyB0aGV5IHRyeSB0byBjb252ZXJ0IHRoZWlyIEVUSCBpbnRvIEZpYXQgY3VycmVuY3kgdG8gbWVldCBleHBlbnNlcy48c3VwPjE8L3N1cD4gIDwvcD5cclxuICA8cD5Ob3R3aXRoc3RhbmRpbmcsIDxpPiBXZSBjYW4gYWxzbyBhcmUgbWlzY2FsY3VsYXRpbmcgYWJvdXQgY3J5cHRvLXBsYXRmb3JtcycgICBjZW50ZXIgb2YgdmFsdWUgIC4uLiBpdCdzICAgYWJvdXQgdGhlIHVwY29taW5nIGFjdHVhbCBhbmQgaW5ldml0YWJsZSBwcmFjdGljYWxpdHkgZm9yIGV2ZXJ5ZGF5IHVzZXMuPC9pPiBTbywgdGhyZWUgY2hlZXJzIHRvIGEgbG9uZywgc2xvdyByYW1wLS10byBhbm90aGVyICBncmVhdCAgYW5kIGxhc3RpbmcgY3J5cHRvLWN1cnJlbmN5IHJlc3VyZ2VuY2UhPC9wPi4wXHJcblxyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlMTggICA9ICBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vY29pbnRlbGVncmFwaC5jb20vbmV3cy9jcnlwdG9jdXJyZW5jeS1tYXJrZXRzLWNvbnRpbnVlLXJlc3VyZ2VuY2UtYXMtcmlwcGxlLWNsYWltcy02OC1wZXJjZW50LXdlZWtseS1nYWluc1wiPmh0dHBzOi8vdXNldGhlYml0Y29pbi5jb20vdGhlLWZhbGwtb2YtdGhlLWljby1pbXBhY3RpbmctZXRoLXByaWNlLzwvYT48L3A+XHJcbiAgYDtcclxuXHJcbiAgdmFyIGJsb2dwb3N0MTcgPSBgIFxyXG48cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+UmVndWxhdGlvbiBvZiBjcnlwdG8tY3VycmVuY2llcyByZW1haW5zIHRoZSBiYW5lIG9mIHdpZGVyIGFjY2VwdGFuY2UtLXdoaWxlIGl0IDxpPmFsc28gc2hvcmVzIHVwIHRydXN0IGFtb25nIGZpbnRlY2ggaW5zdGl1dGlvbnMsIHRvd2FyZCBhIG1vcmUgY2VydGFpbiBmdXR1cmUuIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IFRoZSBtb3ZlIHVwd2FyZHMsIHdoaWNoIG9jY3VycmVkIG92ZXIgc2V2ZXJhbCBob3VycywgY2FtZSBhcyBuZXdzIGJyb2tlIHRoYXQgVS5TLiByZWd1bGF0b3JzIGhhZCBhZ2FpbiBwb3N0cG9uZWQgdGhlaXIgZGVjaXNpb24gb24gdGhlIFZhbkVjay9Tb2xpZFggQml0Y29pbiBleGNoYW5nZS10cmFkZWQgZnVuZCAoRVRGKSwgYnV0IGhhZCBub3QgcmVqZWN0ZWQgaXQgb3V0cmlnaHQuXHJcbjxiciAvPjxiciAvPlxyXG4gIEF0IHByZXNzIHRpbWUsIEJUQy9VU0Qgd2FzIHRyYWRpbmcgYXJvdW5kICQ2LDcwNyBhbiBpbmNyZWFzZSBvZiBhYm91dCA1IHBlcmNlbnQgb24gdGhlIGRheSwgdGFraW5nIHByaWNlcyBiYWNrIHRvIHRoZSByYW5nZSB0aGV5IGhvdmVyZWQgaW4gZHVyaW5nIG1pZC1BdWd1c3QuIEluIGFsdGNvaW4gbWFya2V0cywgRXRoZXJldW3igJlzIChFVEgpIHJldmVyc2FsIG9mIGZvcnR1bmVzIGNvbnRpbnVlZCBhZnRlciB3ZWVrcyBvZiBiZWF0aW5nIEJpdGNvaW4gb24gbG9zc2VzLiBQcmljZXMgYXQgcHJlc3MgdGltZSBmb3IgRVRIL1VTRCBoaXQgJDIyNSwgYWxzbyBhIGZpcnN0IHNpbmNlIFNlcHRlbWJlciA3LCBoYXZpbmcgZmFsbGVuIGFzIGxvdyBhcyAkMTcxIGluIHRoZSBtZWFudGltZS48c3VwPjE8L3N1cD5cclxuICA8L3A+PHA+XHJcbiAgSW1hZ2luZSBpZiBhIGJhbmsgaGFkIHN0YWtlZCBwZW5zaW9uIHBvcnRmb2xpbydzIHRoZSB2YWx1ZSBvZiBFdGhlciBsYXN0IGZhbGwuIDxpPlRoYXQ8L2k+IHdvdWxkIGhhdmUgYmVlbiBhIFdpbnRlciBvZiBEaXNjb250ZW50IHZhbHVlIHByZWNpcGl0b3VzbHkgcGx1bW1ldGVkIGJ5IEFwcmlsLjwvcD5cclxuICBgO1xyXG4gIHZhciBibG9nY2l0ZTE3ICAgPSAgYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL2NvaW50ZWxlZ3JhcGguY29tL25ld3MvY3J5cHRvY3VycmVuY3ktbWFya2V0cy1jb250aW51ZS1yZXN1cmdlbmNlLWFzLXJpcHBsZS1jbGFpbXMtNjgtcGVyY2VudC13ZWVrbHktZ2FpbnNcIj5odHRwczovL2NvaW50ZWxlZ3JhcGguY29tL25ld3MvY3J5cHRvY3VycmVuY3ktbWFya2V0cy1jb250aW51ZS1yZXN1cmdlbmNlLWFzLXJpcHBsZS1jbGFpbXMtNjgtcGVyY2VudC13ZWVrbHktZ2FpbnM8L2E+PC9wPlxyXG4gIGA7XHJcbiAgdmFyIGJsb2dwb3N0MTYgPSBgIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5BbHRlcmluZyBNYXJrZXQgU3RhdGVzIGFuZCB0ZWNobm9sb2d5LWFkdmFuY2VtZW50IGZvcmNlcyBpbnRyb3NwZWN0aW9uIGFtb25nIGNyeXB0by1jdXJyZW5jeSBodWJzLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IEFjY29yZGluZyB0byBhIGxvY2FsIHJlcG9ydCwgYXMgYSByZXN1bHQgb2YgYSBzZWN1cml0eSBicmVhY2ggb24gU2VwdGVtYmVyIDE0LCBoYWNrZXJzIG1hbmFnZWQgdG8gc3RlYWwgNC41IGJpbGxpb24geWVuIGZyb20gdXNlcnMnIGhvdCB3YWxsZXRzLCBhcyB3ZWxsIGFzIDIuMiBiaWxsaW9uIHllbiBmcm9tIHRoZSBhc3NldHMgb2YgdGhlIGNvbXBhbnksIHdpdGggdG90YWwgbG9zc2VzIGFtb3VudGluZyB0byA2LjcgYmlsbGlvbiB5ZW4gb3IgYXJvdW5kICQ1OS43IG1pbGxpb24uXHJcbjxiciAvPlxyXG4gIFRlY2ggQnVyZWF1IEluYywgd2hpY2ggb3BlcmF0ZWQgWmFpZiwgc3RhdGVkIGluIHByZXNzIHJlbGVhc2UgdGhhdCB0aGUgZXhjaGFuZ2UgZGV0ZWN0ZWQgYSBzZXJ2ZXIgZXJyb3Igb24gU2VwdGVtYmVyIDE3LCBhZnRlciB3aGljaCBaYWlmIHN1c3BlbmRlZCBkZXBvc2l0cyBhbmQgd2l0aGRyYXdhbHMuIE9uIFNlcHRlbWJlciAxOCwgdGhlIGV4Y2hhbmdlIHJlYWxpemVkIHRoYXQgdGhlIGVycm9yIHdhcyBhIGhhY2ssIGFuZCByZXBvcnRlZCB0aGUgaW5jaWRlbnQgdG8gdGhlIEphcGFuZXNlIGZpbmFuY2lhbCByZWd1bGF0b3IsIHRoZSBGaW5hbmNpYWwgU2VydmljZXMgQWdlbmN5IChGU0EpLiBIYWNrZXJzIHN0b2xlIDUsOTY2IGJpdGNvaW5zIChCVEMpIGluIGFkZGl0aW9uIHRvIHNvbWUgQml0Y29pbiBDYXNoIChCQ0gpIGFuZCBNb25hQ29pbiAoTU9OQSkuPHN1cD4xPC9zdXA+IFxyXG4gIDwvcD48cD5GaW50ZWNoIHJlZ3VsYXRpb25zIGhhdmUgYmVlbiBsb25nIGluIGNvbWluZywgYnV0IGEgdGhvcm91Z2ggU0VDLXB1c2hlZCBzZWN1cml0eSBvdmVyaGF1bCBjb3VsZCBhdCBsZWFzdCBkaXNwZWxsIGZlYXJzIGFib3V0IHdoYXQgYW1vdW50cyB0byBiYW5rIHJvYmJlcmllcy48L3A+XHJcbiAgPC9wPlxyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlMTYgICA9ICBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vY29pbnRlbGVncmFwaC5jb20vbmV3cy9qYXBhbmVzZS1jcnlwdG9jdXJyZW5jeS1leGNoYW5nZS1oYWNrZWQtNTktbWlsbGlvbi1pbi1sb3NzZXMtcmVwb3J0ZWRcIj5odHRwczovL2NvaW50ZWxlZ3JhcGguY29tL25ld3MvamFwYW5lc2UtY3J5cHRvY3VycmVuY3ktZXhjaGFuZ2UtaGFja2VkLTU5LW1pbGxpb24taW4tbG9zc2VzLXJlcG9ydGVkPC9hPjwvcD5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDE1ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DcnlwdG8tY3VycmVuY3kgZGVhbGVycywgZGV2ZWxvcGVycyBhbmQgb3duZXJzIHNob3VsZCB3ZWxjb21lIG1vcmUgcmVndWxhdGlvbiwgc2NydXB1bG91cyBleGFtaW5hdGlvbiBmcm9tIGZpbmFuY2lhbCBhdXRob3JpdGllcy4uLnRoZSB2YWx1ZSBvZiB0cnVzdCBmYXIgb3V0d2VpZ2hzIHRoZSB2YWx1ZSBvZiBzcGVlZCB0byBtYXJrZXQuPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gVGhlIHJlY2VudCByZXBvcnQgZXhhbWluZXMgdGhlIHByYWN0aWNlcyBvZiB0ZW4gY3J5cHRvIHRyYWRpbmcgcGxhdGZvcm1zIGJhc2VkIGluIHRoZSBVLlMuIGFuZCBhYnJvYWQsIGFzIHdlbGwgZGF0YSBjb2xsZWN0ZWQgYnkgdGhlIEF0dG9ybmV5IEdlbmVyYWzigJlzIG9mZmljZSBhYm91dCB0aGUgc3RhdGUgb2YgZGlnaXRhbCBjdXJyZW5jeSBtYXJrZXRzIGFzIGEgd2hvbGUuPGJyIC8+PGJyIC8+XHJcblxyXG4gIFRoZSBzdHVkeSBmb3VuZCB0aGF0IHRoZSBhYnNlbmNlIG9mIGFjY2VwdGVkIG1ldGhvZHMgZm9yIGF1ZGl0aW5nIHZpcnR1YWwgYXNzZXRzIHJlc3VsdHMgaW4gdGhlIGxhY2sgb2YgYSBjb25zaXN0ZW50IGFuZCB0cmFuc3BhcmVudCBhcHByb2FjaCB0byBpbmRlcGVuZGVudGx5IGF1ZGl0aW5nIGRpZ2l0YWwgY3VycmVuY3kgdHJhZGVkIG9uIGV4Y2hhbmdlcy4gVGhpcyBwdXRzIGN1c3RvbWVyc+KAmSBmdW5kcyBoZWxkIG9uIHRoZWlyIGV4Y2hhbmdlIGFjY291bnRzIGF0IHJpc2sgb2YgYXR0YWNrcyBmcm9tIGhhY2tlcnMgb3IgdGhlZnQuIFRoZSByZXBvcnQgc3Vic2VxdWVudGx5IHF1ZXN0aW9ucyB0aGUgaXNzdWUgb2YgcHVibGljIHByb3RlY3Rpb24gYW5kIHRoZSBzdWZmaWNpZW5jeSBvZiB0aGUgY29tbWVyY2lhbCBpbnN1cmFuY2UgdG8gY292ZXIgcG9zc2libGUgbG9zc2VzLjxiciAvPjxiciAvPlxyXG4gIFxyXG4gIFRoZSByZXBvcnQgZnVydGhlciBvdXRsaW5lcyBhYnVzaXZlIHRyYWRpbmcgcHJhY3RpY2VzLCBlbXBoYXNpemluZyB0aGF0IHRoZSBtYWpvcml0eSBvZiBjcnlwdG8gdHJhZGluZyBwbGF0Zm9ybXMgZGVwbG95IGF1dG9tYXRlZCB0cmFkZXJzLCBvZmZlcmluZyB0aGVtIHNwZWNpYWwgY29uZGl0aW9ucywgd2hpY2ggbGVhdmVzIHJldGFpbCBjdXN0b21lcnMgYXQgYSBkaXNhZHZhbnRhZ2UuIEl0IGFsc28gc3RhdGVzIHRoYXQgZGlnaXRhbCBjdXJyZW5jeSBleGNoYW5nZXMgaW52b2x2ZSBudW1lcm91cywgb3ZlcmxhcHBpbmcgbGluZXMgb2YgYnVzaW5lc3MgdGhhdCByZXByZXNlbnQgc2VyaW91cyBjb25mbGljdHMgb2YgaW50ZXJlc3QuIFRoZSByZXBvcnQgZXhwbGFpbnM6XHJcbiAgPGJyIC8+PGJyIC8+XHJcbiAg4oCcQXV0b21hdGVkIHRyYWRpbmcgYWN0aXZpdGllcyBjb3VsZCBhbHNvIGFsbG93IGEgc2luZ2xlIHRyYWRlciBvciBncm91cCBvZiB0cmFkZXJzIHRvIGNvbW1hbmQgbXVsdGlwbGUgYWNjb3VudHMgc2ltdWx0YW5lb3VzbHkgdG8gb2JzY3VyZSBjb29yZGluYXRlZCB0cmFkaW5nLCBpbiBvcmRlciB0byBtYW5pcHVsYXRlIHByaWNlcy7igJ08c3VwPjE8L3N1cD5cclxuICA8L3A+PHA+U28sIHdoZXRoZXIgYmVmb3JlIG9yIGFmdGVyIGJyZWVjaGVzIG9mIHRydXN0LCB0aGF0IGFyZSBpbmV2aXRhYmxlIG9uIGRpZ2l0YWwgcGxhdGZvcm1zLCB3b3VsZG4ndCB5b3UgcHJlZmVyIFNFQyBzY3J1dGlueSBhbG9uZyB3aXRoIGl0cyBndWFyYW50ZWVzP1xyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlMTUgICA9ICBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHBzOi8vY29pbnRlbGVncmFwaC5jb20vbmV3cy9uZXcteW9yay1hdHRvcm5leS1nZW5lcmFsLXJlcG9ydC1zYXlzLWNyeXB0by1leGNoYW5nZXMtYXJlLWF0LXJpc2stb2YtbWFuaXB1bGF0aW9uXCI+IGh0dHBzOi8vY29pbnRlbGVncmFwaC5jb20vbmV3cy9uZXcteW9yay1hdHRvcm5leS1nZW5lcmFsLXJlcG9ydC1zYXlzLWNyeXB0by1leGNoYW5nZXMtYXJlLWF0LXJpc2stb2YtbWFuaXB1bGF0aW9uPC9hPjwvcD5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDE0ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5TZWN1cml0eSBvZiBhIG5ldHdvcmsgY2FuIGJlIG1lYXN1cmVkIGJ5IHRoZSBkZWdyZWUgb2YgY2FyZWZ1bG5lc3MgZnJvbSBhbnkgbm9kZSBvbiBhIG5ldHdvcmsuIExpa2V3aXNlLCBicmlkZ2luZywgY2VudHJhbCBodWJzIGNhbiB3b3JrIHRvIGJvdHRsZS1uZWNrIHRoZSBzcHJlYWQgb2YgbmV0d29yayBkYW5nZXJzLi4uICA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiBBcyBhbiBpbnRlcm5hdGlvbmFsIGRhdGEgaHViIGFuZCBkaWdpdGFsIGVudHJ5IHBvaW50IHRvIEV1cm9wZSwgdGhlIE5ldGhlcmxhbmRzIHBsYXlzIGFuIGltcG9ydGFudCByb2xlIHdoZW4gaXQgY29tZXMgdG8gdGFja2xpbmcgdGhlc2UgdGhyZWF0cyBhbmQgb3B0aW1hbGx5IGd1YXJhbnRlZWluZyB0aGUgY3liZXJzZWN1cml0eSBvZiBvdXIgY3JpdGljYWwgaW5mcmFzdHJ1Y3R1cmUuXHJcblxyXG4gIFNhc2tpYSBCcnVpbmVzLCBEZXB1dHkgTWF5b3IgZm9yIEVkdWNhdGlvbiwgS25vd2xlZGdlIEVjb25vbXkgYW5kIEludGVybmF0aW9uYWwgQWZmYWlycyBpbiB0aGUgTXVuaWNpcGFsaXR5IG9mIFRoZSBIYWd1ZTo8YnIgLz48YnIgLz5cclxuICBcclxuICBcIlRlY2hub2xvZ2ljYWwgZGV2ZWxvcG1lbnRzIGFyZSBjb250aW51aW5nIGFwYWNlIGFuZCB0aGUgY3VycmVudCBzaG9ydGFnZSBvZiB0YWxlbnQgd2lsbCBpbmNyZWFzZSBpZiB3ZSBmYWlsIHRvIHRha2UgYWN0aW9uIGFzIGEgc29jaWV0eS4gRm9yIHRoYXQgcmVhc29uLCBwdWJsaWMgYXV0aG9yaXRpZXMsIGVkdWNhdGlvbmFsIGluc3RpdHV0aW9ucyBhbmQgYnVzaW5lc3NlcyBuZWVkIHRvIGpvaW4gZm9yY2VzIHRvIHRyYWluLCBhdHRyYWN0IGFuZCByZXRhaW4gbW9yZSB0YWxlbnQuIFRoYXQgaXMgd2h5IGl0IGlzIGltcG9ydGFudCB0byB0ZWFjaCBjaGlsZHJlbiBkaWdpdGFsIHNraWxscyBmcm9tIGFuIGVhcmx5IGFnZS4gRnJvbSBwcmltYXJ5IHNjaG9vbCB0byB1bml2ZXJzaXR5LCBlZHVjYXRpbmcgY3liZXJ0YWxlbnQgaGFzIHRvIGJlIGhpZ2ggb24gdGhlIGFnZW5kYS4gV2Ugd2FudCBldmVyeW9uZSB0byBwYXJ0aWNpcGF0ZSBzbyB3ZSBjYW4gYWxsIHdvcmsgdG9nZXRoZXIgdG8gY3JlYXRlIGEgc2FmZSBzb2NpZXR5LlwiPHN1cD4xPC9zdXA+XHJcbiAgPC9wPlxyXG4gIDxwPldoZXRoZXIgb3Igbm90IHRoZSBzZWN1cml0eSBob2xlIGlzIGJyZWVjaGVkIGlzIGltbWF0ZXJpYWwtLXdoYXQgY291bnRzIGlzIGxvc3MgbWl0aWdhdGlvbiBhbmQgaW5zdXJhbmNlITwvcD5cclxuICBgO1xyXG4gIHZhciBibG9nY2l0ZTE0ID0gIGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly93d3cuYmVuemluZ2EuY29tL3ByZXNzcmVsZWFzZXMvMTgvMDkvcjEyMzY2NjA1L2N5YmVyLXNlY3VyaXR5LXdlZWstdG9nZXRoZXItd2Utc2VjdXJlLXRoZS1mdXR1cmUtMi01LW9jdG9iZXItMjAxOC10aGVcIj5odHRwczovL3d3dy5iZW56aW5nYS5jb20vcHJlc3NyZWxlYXNlcy8xOC8wOS9yMTIzNjY2MDUvY3liZXItc2VjdXJpdHktd2Vlay10b2dldGhlci13ZS1zZWN1cmUtdGhlLWZ1dHVyZS0yLTUtb2N0b2Jlci0yMDE4LXRoZTwvYT48L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxMyA9IGBcclxuIFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5QYXJpcywgYXMgYSBDaXR5IGZvcmVtb3N0LCBoYXMgbGVkIGdsb2JhbCBkaXNjdXNzaW9uIGFuZCBhd2FyZW5lc3Mgb24gY2xpbWF0ZS1jaGFuZ2UgcmVsYXRlZCBhY3Rpb24uIFBhcmlzJyBzbW9nLWRpc3BlbGxpbmcgY3VsdHVyZSBwcmVzZW50cyBpdHNlbGYgYXMgPGk+VGhlIENpdHkgYXQgdGhlIGNlbnRlciBvZiBhY3Rpb248L2k+IHdpdGggcmVzcGVjdCB0byBnbG9iYWwsIG1hY3JvLWxldmVsIHByb2JsZW1zLiBXaHkgdGhlIGNpdHk/IEl0IG9ubHkgbWFrZXMgc2Vuc2UgdGhhdCBjb2xsZWN0aXZlIGFjdGlvbiBhbmQgbW9iaWxpemF0aW9uIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHJhdGlvIG9mIGNvbW11bml0eSBsZWFkZXJzIGFuZCBhY3RvcnMgdG8gZW5nYWdlIGVub3VnaCBzb2NpYWwgbW9tZW50dW0gdG8gb3ZlcmNvbWUgYXBhdGh5LiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPlRoaXMgeWVhciwgdGhlIGJhbiBvbiBtb3Rvcml6ZWQgdHJhZmZpYyB3aWxsIGFwcGx5IHRvIHRoZSB3aG9sZSBvZiBQYXJpcywgZXhjZXB0IGZvciB0aGUgQm9pcyAod29vZHMpIGFuZCB0aGUgcMOpcmlwaMOpcmlxdWUgKGlubmVyIHJpbmcgcm9hZCkuIFxyXG4gIFRoZSBQYXJpc2lhbnMgdGhlbXNlbHZlcyB3aWxsIG5vdCBiZSBhYmxlIHRvIGRyaXZlIHRoZWlyIG93biB2ZWhpY2xlLCBpbmNsdWRpbmcgZWxlY3RyaWMgdmVoaWNsZXMsICdjbGVhbicgZW5lcmd5IHZlaGljbGVzLCBhbmQgQXV0b2xpYiB2ZWhpY2xlcy48YnIgLz48YnIgLz5cclxuICBcclxuICBUaGUgZm9sbG93aW5nIHZlaGljbGVzIHdpbGwgYmUgYWxsb3dlZCB0byBjaXJjdWxhdGUsIGF0IGEgbWF4aW11bSBvZiAzMCBrbS9oOiBub24tbW90b3JpemVkIHZlaGljbGVzLCBlbWVyZ2VuY3kgdmVoaWNsZXMsIHZlaGljbGVzIGZvciBkaXNhYmxlZCBwZW9wbGUsIHRheGlzLCBwdWJsaWMgdHJhbnNwb3J0LCBCaWdCdXMgYW5kIE9wZW4gVG91ciwgYW5kIFZUQyAodGhlIGxhdHRlciAocHJpdmF0ZSBoaXJlIHRheGlzKSB3ZXJlIG5vdCBhbGxvd2VkIHRvIGNpcmN1bGF0ZSBsYXN0IHllYXIpLiBUaGVyZSBhcmUgYWxzbyBudW1lcm91cyBhbHRlcm5hdGl2ZSBtb2RlcyBvZiB0cmFuc3BvcnQgLSBiaWN5Y2xlLCBob3JzZSAmIGNhcnJpYWdlLCBjeWNsb3BvbGl0YWluIChwZWRpY2Ficykg4oCmIDxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICAgIDxwPk9uIGEgbmF0aW9uYWwtbGV2ZWwsIGFjdGlvbiBpcyBoaWdobHkgZWZmZWN0aXZlIGJ1dCBwcmFjdGljYWxseSBpbXBvc3NpYmxlLCB3aGlsZSB0aGUgY29tbXVuaXR5LWxldmVsIGNhbiBoYXJkbHkgbXVzdGVyIHRoZSB0eXBlIG9mIGxldmVyYWdlIHRvIGluZmx1ZW5jZSBvdGhlciBjb21tdW5pdGllcy4gPGk+IFRoZSBjaXR5LCBvZnRlbiBjb21wb3NlZCBvZiBtdWx0aXBsZSBtaWxsaW9ucyBhbmQgc3Bhbm5pbmcgbGFyZ2VyIGdlb2dyYXBoaWVzLCByZXNlbWJsZXMgdGhlIHBvd2VyZnVsIGNpdGllcyB0aGF0IGdvdmVybmVkIG5hdGlvbi1zdGF0ZXMgZnJvbSB0aGUgbWlkZGxlIGFnZXMgZm9yd2FyZC48L2k+IEV4YW1wbGVzIGluY2x1ZGUgMTZ0aCBjZW50dXJ5IEZsb3JlbmNlLCAxN3RoIGNlbnR1cnkgSXN0YW5idWwsIDE4dGggY2VudHVyeSBQYXJpcywgYW5kIDE5dGggY2VudHVyeSBMb25kb24tLW5vdCB0byBtZW50aW9uIHRoZSBmaXJzdCBnbG9iYWwgY2l0eS1zdGF0ZSBwb3dlciwgUm9tZS4gSW4gdGVybXMgb2YgY29sbGVjdGlvbiBhY3Rpb24sIHRoaXMgaGlzdG9yaWNhbCBudWFuY2Ugb2YgdGhlIGNpdHkgdGFrZXMgYSBuZXcgcm9sZTogICAgXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5MYXN0IHdlZWsgYXQgdGhlIEdsb2JhbCBDbGltYXRlIEFjdGlvbiBTdW1taXQsIG1hbnkgb2YgdGhlIGJlc3QgbWluZHMgdGhlIGh1bWFuIHNwZWNpZXMgY2FuIG11c3RlciBnYXRoZXJlZCB0byByaWdodCB0aGUgY291cnNlLlxyXG5cclxuICBUaGVzZSBwZW9wbGUgaW5jbHVkZWQgYnV0IHdlcmUgbm90IGxpbWl0ZWQgdG86IGVudmlyb25tZW50YWxpc3RzLCBtYXlvcnMgZnJvbSBhcm91bmQgdGhlIHdvcmxkLCBodW1hbiByaWdodHMgYWN0aXZpc3RzLCB0ZWNobm9sb2dpc3RzLCBhY2FkZW1pY3MsIGJ1c2luZXNzIGxlYWRlcnMsIGxhYm9yIGxlYWRlcnMsIGFuZCBmb3JtZXIgc2VjcmV0YXJpZXMgb2Ygc3RhdGUuIFRoZSBraW5kcyBvZiBmb2xrcyB3aXRoIG5vYmxlIHB1cnN1aXRzLiBUaGlzIHdhcyBjbGltYXRlIGNoYW5nZSBhY3RpdmlzbSB3aXRob3V0IGJvcmRlcnMuIElmIHRoZSBQYXJpcyBBZ3JlZW1lbnQsIGRyYWZ0ZWQgaW4gMjAxNSwgd2FzIGFib3V0IGdvdmVybm1lbnRzIGNvbWluZyB0b2dldGhlciB0byBmaWdodCwgbGFzdCB3ZWVr4oCZcyBldmVudCBzaG93ZWQgdGhhdCB0aGUgbW9zdCBhbWJpdGlvdXMgY2xpbWF0ZSBhY3Rpb24gaXNu4oCZdCBoYXBwZW5pbmcgb24gdGhlIG5hdGlvbmFsIHNjYWxl4oCUaXTigJlzIGNpdGllcyBhbmQgc3RhdGVzIHRoYXQgYXJlIGxlYWRpbmcgdGhlIHdheS48c3VwPjI8L3N1cD48L3A+XHJcbiAgPHA+R3JhbnRlZCwgdGhlIGNpdHkgaXMgdGhlIGNlbnRlciBvZiBjbGltYXRlLWNoYW5nZSBwZXJpbCBhbmQgc28gaXQgaXMgb25seSBuYXR1cmFsIHRoZXkgYXJlIHRoZSBmaXJzdCB0byBhY3QsIGFuZCBhcmUgdGhlIGRlZmFjdG8gY2VudGVyIG9mIGFjdGlvbiAuLi4gYW5kIGhvcGUuPC9wPlxyXG5gO1xyXG4gIHZhciBibG9nY2l0ZTEzID0gYFxyXG5cclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9lbi5jb252ZW50aW9uLnBhcmlzaW5mby5jb20vdHJhdmVsLXRyYWRlL2Nhci1mcmVlLWRheS1wYXJpc1wiPlxyXG4gIGh0dHBzOi8vZW4uY29udmVudGlvbi5wYXJpc2luZm8uY29tL3RyYXZlbC10cmFkZS9jYXItZnJlZS1kYXktcGFyaXM8L2E+PC9wPlxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+MjxhIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXQtdGhlLWVkZ2Utb2YtdGhlLXdvcmxkLWZhY2luZy10aGUtZW5kLW9mLXRoZS13b3JsZC9cIj5cclxuICAgIGh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9hdC10aGUtZWRnZS1vZi10aGUtd29ybGQtZmFjaW5nLXRoZS1lbmQtb2YtdGhlLXdvcmxkLzwvYT48L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3QxMiA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TG9zIEFuZ2VsZXMnIHRlY2hub2xvZ2ljYWwgY2VudGFsaXR5IGhhcyBhbHdheXMgYmVlbiBvdmVyc2hhZG93ZWQgYnkgU2lsaWNvbiBWYWxsZXkgYW5kIFNlYXR0bGU7IGhvd2V2ZXIsIFNhbnRhIE1vbmljYSdzIHRyZW5keSB0ZWNoIGh1YiBoYXMgYmVndW4gdG8gbWFrZSBhIG5hbWUgZm9yIGl0c2VsZiB3aXRoIHJlc3BlY3QgdG8gb25lIDxzdHJvbmc+aHVnZWx5IGltcG9ydGFudCBzZWN0b3I6IGNsaW1hdGUtY2hhbmdlIHJlbGF0ZWQgdGVjaG5vbG9neTwvc3Ryb25nPi4gICAgIDxwIGNsYXNzPVwicXVvdGVcIj4gVGhpcyB3ZWVrLCBMb3MgQW5nZWxlcyBtYXlvciBFcmljIEdhcmNldHRpIGpvaW5lZCBvdGhlciBsZWFkZXJzLCBhbG9uZyB3aXRoIGFjdGl2aXN0cyBhbmQgYnVzaW5lc3MgbGVhZGVycywgYXQgdGhlIEdsb2JhbCBDbGltYXRlIEFjdGlvbiBTdW1taXQgaW4gU2FuIEZyYW5jaXNjby4gVGhlIG1pc3Npb24/IFN0b3AgY2xpbWF0ZSBjaGFuZ2UgYmVmb3JlIGl0IGRlc3Ryb3lzIHRoZSBwbGFuZXQsIGFuZCBvdXIgc3BlY2llcyBhbG9uZyB3aXRoIGl0LlxyXG4gIDxiciAvPjxiciAvPlxyXG4gICAgQnV0IHRoZSBjaXR5IGlzIGluIHRoZSBtaWRzdCBvZiBhIG1ldGFtb3JwaG9zaXMuIFdpdGggZmV3ZXIsIHlldCBzdHJvbmdlciBzdG9ybXMgb24gdGhlIGhvcml6b24sIGl04oCZcyBiZWd1biBhbiBhbWJpdGlvdXMgcGxhbiB0byBjdXQgaXRzIHJlbGlhbmNlIG9uIGltcG9ydGVkIHdhdGVyIGluIGhhbGYgYnkgMjAyNS4gQW5kIGl04oCZcyBlbWVyZ2luZyBhcyBhIGxlYWRlciBpbiB0aGUgZnJhbnRpYyBpbnRlcm5hdGlvbmFsIHF1ZXN0IHRvIGN1cmIgZW1pc3Npb25z4oCUaW4gMjAxNiBhbG9uZSwgaXQgc2xhc2hlZCBlbWlzc2lvbnMgYnkgMTEgcGVyY2VudCwgdGhlIGVxdWl2YWxlbnQgb2YgdGFraW5nIG1vcmUgdGhhbiA3MDAsMDAwIGNhcnMgb2ZmIHRoZSByb2FkLlxyXG4gICAgPGJyIC8+PGJyIC8+XHJcbiAgICBXZSBnZW5lcmF0ZWQgMzAsMDAwIG5ldyBncmVlbiBqb2JzIHNpbmNlIEkndmUgYmVlbiBtYXlvciwgc28gaW4gZml2ZSB5ZWFycy4gVG8gcHV0IHRoYXQgaW4gcGVyc3BlY3RpdmUsIHRoZXJlJ3MgNTAsMDAwIGNvYWwgam9icyBsZWZ0IGluIEFtZXJpY2EuIFNvIHRoaXMgdG93biB0aGF04oCZcyBqdXN0IDEgcGVyY2VudCwgcm91Z2hseSwgb2YgdGhlIFVTIHBvcHVsYXRpb24gaGFzIGNyZWF0ZWQgdGhlIGVxdWl2YWxlbnQgb2YgNjAgcGVyY2VudCBvZiB0aGUgcmVtYWluaW5nIGNvYWwgam9icyBsZWZ0IGluIEFtZXJpY2EuIEFwcGFsYWNoaWEgc2hvdWxkIGJlIGRvaW5nIHRoYXQsIGFyZWFzIHRoYXQgaGF2ZSBiZWVuIGhhcmQgaGl0IGJ5IGEgcmVjZXNzaW9uIGFuZCBub3QgcmVjb3ZlcmVkLiBUaGVzZSBhcmUgZ2VuZXJhbGx5IGdvb2QgbWlkZGxlIGNsYXNzIGpvYnMgdG9vLCBub3QganVzdCBtaW5pbXVtIHdhZ2UuPHN1cD4xPC9zdXA+XHJcbiAgICA8L3A+XHJcbiAgICA8cD5UaGUgZXhwYW5zZSBvZiBMLkEuJ3MgcmVhY2gsIG5vdyB0b3VjaGluZyBTYW4gRGllZ28sIG1ha2VzIGNsaW1hdGUtZnJpZW5kbHkgY29tbXV0aW5nIGEgdG9wIGlzc3VlOiBUaGUgdHdvIGFyZSBhZ2dsb21lcmF0aW5nIGludG8gb25lIGNpdHkgYWZ0ZXIgYWxsLCBuZWF0bHkgYW5kIG1lcmVseSBkaXZpZGVkIGJ5IENhbXAgUGVuZGxldG9uLiBOb3csIGFib3V0IHRoYXQgZXZlci1lbHVzaXZlIGhpZ2gtc3BlZWQgcmFpbCBzeXN0ZW0gY29ubmVjdGluZyB0aGUgdHdvIC4uLiBgO1xyXG4gIHZhciBibG9nY2l0ZTEyID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvaG93LWxvcy1hbmdlbGVzLWlzLWhlbHBpbmctbGVhZC10aGUtZmlnaHQtYWdhaW5zdC1jbGltYXRlLWNoYW5nZS9cIj5odHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvaG93LWxvcy1hbmdlbGVzLWlzLWhlbHBpbmctbGVhZC10aGUtZmlnaHQtYWdhaW5zdC1jbGltYXRlLWNoYW5nZS88L2E+PC9wPlxyXG4gICBgO1xyXG4gIHZhciBibG9ncG9zdDExID0gYCA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+V29ybGQgRWNvbm9taWMgRm9ydW0sIG1vc3Qgbm90YWJsZSBmb3IgaXRzIGFubnVhbCBjb252b2NhdGlvbiBvZiB3b3JsZCBsZWFkZXJzLCB3b3JrcyBhcm91bmQgdGhlIGNsb2NrLCB3aXRoIG5vIHNob3J0YWdlIG9mIHJlc291cmNlcyBmb3Igc29jaW8tZWNvbm9taWMgcmVzZWFyY2g6XHJcbiAgPC9wPiA8cCBjbGFzcz1cInF1b3RlXCI+IEFzIHRlY2hub2xvZ2ljYWwgYnJlYWt0aHJvdWdocyByYXBpZGx5IHNoaWZ0IHRoZSBmcm9udGllciBiZXR3ZWVuIHRoZSB3b3JrIHRhc2tzIHBlcmZvcm1lZCBieSBodW1hbnMgYW5kIHRob3NlIHBlcmZvcm1lZCBieSBtYWNoaW5lcyBhbmQgYWxnb3JpdGhtcywgZ2xvYmFsIGxhYm91ciBtYXJrZXRzIGFyZSBsaWtlbHkgdG8gdW5kZXJnbyBtYWpvciB0cmFuc2Zvcm1hdGlvbnMuIFRoZXNlIHRyYW5zZm9ybWF0aW9ucywgaWYgbWFuYWdlZCB3aXNlbHksIGNvdWxkIGxlYWQgdG8gYSBuZXcgYWdlIG9mIGdvb2Qgd29yaywgZ29vZCBqb2JzIGFuZCBpbXByb3ZlZCBxdWFsaXR5IG9mIGxpZmUgZm9yIGFsbCwgYnV0IGlmIG1hbmFnZWQgcG9vcmx5LCBwb3NlIHRoZSByaXNrIG9mIHdpZGVuaW5nIHNraWxscyBnYXBzLCBncmVhdGVyIGluZXF1YWxpdHkgYW5kIGJyb2FkZXIgcG9sYXJpemF0aW9uLiBJbiBtYW55IHdheXMsIHRoZSB0aW1lIHRvIHNoYXBlIHRoZSBmdXR1cmUgb2Ygd29yayBpcyBub3cuIFRoZSBGdXR1cmUgb2YgSm9icyByZXBvcnQgcHJvdmlkZXMgdG9vbHMgd2hpY2ggY2FuIHN1cHBvcnQgcmVzcG9uc2VzIHRvIHRoZSBjcml0aWNhbCBxdWVzdGlvbnMgY29uZnJvbnRpbmcgYnVzaW5lc3NlcywgZ292ZXJubWVudHMgYW5kIHdvcmtlcnMgaW4gdGhlIGhvcml6b24gdXAgdG8gMjAyMi48c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+T25lIGNsZWFyIHRha2UtYXdheSBmcm9tIHRoZSByZXBvcnQgZmVhdHVyZXMgdGhlIHVyZ2VudCBzaG9ydC10ZXJtIG5lZWQgdG8gcmVzcG9uc2liaWx5IGZpbGwgdmFzdCBob2xlcyBpbiB0aGUgbGFib3IgbWFya2V0OjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+TWFjaGluZXMgV2lsbCBEbyBNb3JlIFRhc2tzIFRoYW4gSHVtYW5zIGJ5IDIwMjUgYnV0IFJvYm90IFJldm9sdXRpb24gV2lsbCBTdGlsbCBDcmVhdGUgNTggTWlsbGlvbiBOZXQgTmV3IEpvYnMgaW4gTmV4dCBGaXZlIFllYXJzOjxiciAvPjxiciAvPlxyXG4gIDx1bD48bGk+XHJcbiAgTGF0ZXN0IHJlc2VhcmNoIGZyb20gdGhlIFdvcmxkIEVjb25vbWljIEZvcnVtIGZvcmVjYXN0cyB0aGF0IGJ5IDIwMjUsIG1hY2hpbmVzIHdpbGwgcGVyZm9ybSBtb3JlIGN1cnJlbnQgd29yayB0YXNrcyB0aGFuIGh1bWFucywgY29tcGFyZWQgdG8gNzElIGJlaW5nIHBlcmZvcm1lZCBieSBodW1hbnMgdG9kYXkuPC9saT5cclxuICA8bGk+XHJcbiAgVGhlIHJhcGlkIGV2b2x1dGlvbiBvZiBtYWNoaW5lcyBhbmQgYWxnb3JpdGhtcyBpbiB0aGUgd29ya3BsYWNlIGNvdWxkIGNyZWF0ZSAxMzMgbWlsbGlvbiBuZXcgcm9sZXMgaW4gcGxhY2Ugb2YgNzUgbWlsbGlvbiB0aGF0IHdpbGwgYmUgZGlzcGxhY2VkIGJldHdlZW4gbm93IGFuZCAyMDIyPC9saT48bGk+XHJcbiAgVXJnZW50IGNoYWxsZW5nZXMgaW5jbHVkZSBwcm92aWRpbmcgcmVza2lsbGluZyBvcHBvcnR1bml0aWVzLCBlbmFibGluZyByZW1vdGUgd29yayBhbmQgYnVpbGRpbmcgc2FmZXR5IG5ldHMgdG8gcHJvdGVjdCBhdC1yaXNrIHdvcmtlcnMgYW5kIGNvbW11bml0aWVzXHJcbiAgPC9saT5cclxuICA8L3VsPlxyXG4gIDwvcD5cclxuICA8cD48c3Ryb25nPi4uLiB0byB3aGljaCBJIHNheSwgPGk+SC5SLiBNYW5hZ2VycyBvZiB0aGUgV29ybGQ6IFVuaXRlITwvaT48L3N0cm9uZz48L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ2NpdGUxMSA9IGAgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+MS4gPGEgaHJlZj1cImh0dHA6Ly9yZXBvcnRzLndlZm9ydW0ub3JnL2Z1dHVyZS1vZi1qb2JzLTIwMTgvXCI+aHR0cDovL3JlcG9ydHMud2Vmb3J1bS5vcmcvZnV0dXJlLW9mLWpvYnMtMjAxOC88L2E+PC9wPlxyXG4gIFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPlBERiBEb3dubG9hZDxiciAvPjxhIGhyZWY9XCJodHRwOi8vd3d3My53ZWZvcnVtLm9yZy9kb2NzL1dFRl9GdXR1cmVfb2ZfSm9ic18yMDE4LnBkZlwiPmh0dHA6Ly93d3czLndlZm9ydW0ub3JnL2RvY3MvV0VGX0Z1dHVyZV9vZl9Kb2JzXzIwMTgucGRmPC9hPjwvcD5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDEwID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5cclxuICBJbnZpc2libGUgdXBncmFkZXMgYXJlIHRoZSB0cnVlIHRhbGtpbmcgcG9pbnRzIG9mIG5ldyBtb2JpbGUgZGV2aWNlICByZWxlYXNlcyBhcyB0aGV5IGhpbnQgYmlnIHRoaW5ncyB1bmRlciB0aGUgaG9vZC4uLiBMYXN0IHllYXIncyBpUGhvbmUgWCBtYXkgaGF2ZSBiZWVuIGFsb3Qgb2YgaGFyZHdhcmUgc2hvdyAod2l0aCB0aGUgWC84LzhwbHVzIHByb3ZpZGluZyB0aGUgZmlyc3QgQS5JLi1kZWRpY2F0ZWQgY2hpcCksIGJ1dCAyMDE4IGF1Z3VycyBiaWcgdGhpbmdzIGFoZWFkIGFuZCBiaWdnZXIgbXVzY2xlOlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj5cclxuICBPbiBXZWRuZXNkYXkgQXBwbGUgYW5ub3VuY2VkIHRoYXQgdGhlIG5ldXJhbCBlbmdpbmUgaXMgbm93IHNpZ25pZmljYW50bHkgbW9yZSBwb3dlcmZ1bC4gTGFzdCB5ZWFy4oCZcyBkZWJ1dCBtb2RlbCBjb3VsZCBjcmFuayB0aHJvdWdoIDYwMCBiaWxsaW9uIG9wZXJhdGlvbnMgcGVyIHNlY29uZC4gVGhlIG5ldyB2ZXJzaW9uIGNhbiB3b3JrIGFsbW9zdCAxMCB0aW1lcyBmYXN0ZXIsIHJlYWNoaW5nIDUgdHJpbGxpb24gb3BlcmF0aW9ucyBwZXIgc2Vjb25kLiBTb21lIG9mIHRoYXQgc3BlZWR1cCBtYXkgY29tZSBmcm9tIHVzaW5nIHNtYWxsZXIgdHJhbnNpc3RvcnMgaW5zaWRlIHRoZSBBMTIsIHdpdGggZmVhdHVyZXMgYXMgc21hbGwgYXMgNyBuYW5vbWV0ZXJzLjxzdXA+MTwvc3VwPlxyXG4gIDwvcD5cclxuICA8cD5TbywganVzdCBhcyBBcHBsZSB0ZW5kcyB0byBmdXR1cmUtcHJvb2YgaXRzIHRlY2hub2xvZ3ksIHRoaXMgeWVhcidzIHJlbGVhc2UgZG9lcyBub3QgZGlzYXBwb2ludCB0aGUgY29uc3RlbGxhdGlvbiBvZiBpT1MgZGV2ZWxvcGVycyB0aGF0IGNhbiB0YWtlIGFkdmFudGFnZSBvZiB0aGUgdGVjaCwgd2l0aCAgYmV0dGVyIGJhdHRlcnkgZWZmaWNpZW5jeSAuLi48L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPkFwcCBkZXZlbG9wZXJzIGNhbiBwbGF5IHdpdGggdGhlIHBvd2VyIG9mIEFwcGxl4oCZcyBuZXcgbmV1cmFsIGVuZ2luZSB0aHJvdWdoIENvcmUgTUwsIGEgZnJhbWV3b3JrIHRoZSBjb21wYW55IG9mZmVycyB0byBoZWxwIHByb2dyYW1tZXJzIGRlcGxveSBtYWNoaW5lIGxlYXJuaW5nIG9uIEFwcGxlIGRldmljZXMuIFRoZSBjb21wYW55IHNheXMgdGhhdCB0aGlzIGFsbG93cyBkZXZlbG9wZXJzIHRvIHJ1biBtYWNoaW5lIGxlYXJuaW5nIGNvZGUgbmluZSB0aW1lcyBmYXN0ZXIgdGhhbiBvbiB0aGUgaVBob25lIFgsIHdoaWxlIHVzaW5nIGEgdGVudGggb2YgdGhlIGVuZXJneS48c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+VGhhbmtzIHRvIEFwcGxlJ3MgY29tbWl0bWVudCB0byBBLkkuLCB0aGUgaVBob25lIFhzLCAgIFhzIE1heCwgYW5kICAgWHIgb2ZmZXIgYWxsIHRoZSBqb3lzIG9mIHNtYXJ0IHZpZGVvL2NhbWVyYSwgcHJvY2Vzc2luZywgYXVnbWVudGVkIHJlYWxpdHksIC0tPGk+YW5kIHdpdGggYmF0dGVyeSA8c3Ryb25nPnNhdmluZ3M/PC9zdHJvbmc+ICAgT29oIEwmYWFjdXRlOyBMJmFhY3V0ZTshPC9pPlxyXG5cclxuICBgO1xyXG4gIHZhciBibG9nY2l0ZTEwPSAgYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXBwbGVzLWxhdGVzdC1pcGhvbmVzLXBhY2tlZC13aXRoLWFpLXNtYXJ0c1wiPiBodHRwczovL3d3dy53aXJlZC5jb20vc3RvcnkvYXBwbGVzLWxhdGVzdC1pcGhvbmVzLXBhY2tlZC13aXRoLWFpLXNtYXJ0czwvYT48L3A+XHJcbiAgYDtcclxuICB2YXIgYmxvZ3Bvc3Q5ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5JbnRlcm5hdGlvbmFsIGh1YnMgb2YgdGVjaG5pY2FsIHNwZWNpYWxpemF0aW9ucy0tZnJvbSBoYXB0aWMgdG91Y2hzY3JlZW5zIHRvIGJhdHRlcnkgdGVjaC0taW1wbGljYXRlcyBnbG9iYWwgY29vcGVyYXRpb24tLWJleW9uZCBtZXJlbHkgcmFyZSBtZXRhbHMgYW5kIHJlc291cmNlcy4gXHJcbiAgPC9wPlxyXG4gIDxwIGNsYXNzPVwicXVvdGVcIj4gTGFzdCB3ZWVrLCBkb3plbnMgb2YgbWFudWZhY3R1cmluZyBjb21wYW5pZXMgdGVzdGlmaWVkIGJlZm9yZSBVUyBUcmFkZSBSZXByZXNlbnRhdGl2ZXMgYWJvdXQgaG93IFRydW1wJ3MgbmV4dCByb3VuZCBvZiBkdXRpZXMgYWdhaW5zdCBDaGluYSBjb3VsZCBhZmZlY3QgdGhlbS4gU29tZSBzaG93ZWQgY29uY2VybnMgb2YgbGF5b2ZmcyBmb3IgQW1lcmljYW4gcGVvcGxlIGFuZCBoYXJtIHRvIFVTIGVjb25vbWljIGludGVyZXN0cy48c3VwPjE8L3N1cD5cclxuICA8L3A+XHJcbiAgPHA+R2xvYmFsIFRlY2ggcHJlc3VwcHBvc2VzIGdsb2JhbCB0cmFkaW5nIGNvb3BlcmF0aW9uIHByaW1hcmlseSBiZWNhdXNlIG9mIHJhcmUgbWV0YWxzLiBCdXQgbW9yZSBpbXBvcnRhbnRseSwgZmFicmljYXRpb24gc3BlY2lhbHRpZXMgZ3Jvd2luZyB1cCBpbiBmb3JlaWduIDxpPlJlc2VhcmNoIFBhcmtzPC9pPi4gIEFuZCwgZW50cmVjaGVkIHRlY2hub2xvZ2ljYWwgc3BlY2lhbGl6YXRpb25zIGFyZSBhIGZ1bmN0aW9uIG9mIHRoZSBkZXB0aCBvZiBpdGVtaXplZCBzcGVjaWFsaXphdGlvbnMgdGhhdCBzcHJvdXQgYXJvdW5kIHVuaXZlcnNpdGllcyBhbmQgcHVibGljL3ByaXZhdGVseSBmdW5kZWQgcmVzZWFyY2ggcGFya3MsIGNvdXBsZWQgd2l0aCB0aGUgdGVjaG5pY2FsIHdvcmtmb3JjZSB0byBwdXQgZ2xhc3MgdG8gc2NyZWVuLjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+RXZlbiBpZiBldmVyeSBwYXJ0IHdhcyBtYWRlIGluIHRoZSBVUywgYW4gaVBob25lIHdvdWxkIGNvc3QgYWJvdXQgJDEwMCBtb3JlLCBLYWthZXMgY29uY2x1ZGVkLCBhc3N1bWluZyByYXcgbWF0ZXJpYWxzIHdlcmUgc3RpbGwgcHVyY2hhc2VkIG9uIGdsb2JhbCBtYXJrZXRzLjxiciAvPjxiciAvPlxyXG5cclxuICBUaGUgaXNzdWUgaXMgbm90IHNvIG11Y2ggY29zdCBvZiBwdXR0aW5nIGFuIGlQaG9uZSB0b2dldGhlciwgb3IgZXZlbiB0aGUgY29zdCBwZXIgcGFydCBvbiBwYXBlci4gVGhlIGlzc3VlIGlzIHNraWxsLCBzY2FsZSwgZXhwZXJ0aXNlLCBhbmQgaW5mcmFzdHJ1Y3R1cmUg4oCUIGFsbCBvZiB3aGljaCByZXF1aXJlIG1vbmV5LCB0aW1lIGFuZCBsb25nLXRlcm0gaW52ZXN0bWVudC4gVW5saWtlIG90aGVyIG1hbnVmYWN0dXJpbmcgam9icyB0aGF0IGhhdmUgbWlncmF0ZWQgZnJvbSB0aGUgVW5pdGVkIFN0YXRlcywgQXBwbGUgd291bGRu4oCZdCBiZSBicmluZ2luZyB0aGVtIOKAnGJhY2vigJ0gc28gbXVjaCBhcyBzdGFydGluZyBmcm9tIHNjcmF0Y2guIFRoZSBjb3N0IHdvdWxkIGNvbWUgaW4gYXR0ZW1wdGluZyB0byBidWlsZCBhIHN5c3RlbSB0aGF04oCZcyBuZXZlciBiZWVuIGluIHRoZSBVUywgYnV0IGhhcyBiZWVuIGJ1aWx0IG92ZXIgZGVjYWRlcyBhYnJvYWQuPHN1cD4yPC9zdXA+XHJcbiAgPC9wPjxwPlNvLCBhdCB0aGUgZW5kIG9mIHRoZSBkYXksIHdlIGNhbiBvbmx5IGhvcGUgdGhhdCBmb3JlaWduIHRlY2ggcmVzb3VyY2VzIGFsb25nIHdpdGggYXNzb2NpYXRlZCBodW1hbi9zb2NpYWwgY2FwaXRhbCB3b3VsZCBqdXN0IGJlIGxlZnQgYWxvbmUgZnJvbSBlY29ub21pYyB0aWZmcyAuLi4gUGVyaW9kaWMgdGFibGUgb2YgcmFyZSBtZXRhbHMgYW5kIHByZWNpb3VzIGVsZW1lbnRzIGFzaWRlLCB0aGUgdHJ1ZSBnZW1zIGFyZSB0aGUgZGl2ZXJzZSBwZW9wbGUhICAgIFxyXG4gIGA7XHJcbiAgdmFyIGJsb2djaXRlOT0gIGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4xLl88YSBocmVmPVwiaHR0cHM6Ly9tYXJrZXRzLmJ1c2luZXNzaW5zaWRlci5jb20vbmV3cy9zdG9ja3MvYXBwbGUtc3RvY2stcHJpY2Utc2xpZGVzLXRyYWRlLXdhci10ZW5zaW9ucy1vdmVyc2hhZG93LXByb2R1Y3QtbGF1bmNoZXMtMjAxOC05LTEwMjc1MjIyNDdcIj5odHRwczovL21hcmtldHMuYnVzaW5lc3NpbnNpZGVyLmNvbS9uZXdzL3N0b2Nrcy9hcHBsZS1zdG9jay1wcmljZS1zbGlkZXMtdHJhZGUtd2FyLXRlbnNpb25zLW92ZXJzaGFkb3ctcHJvZHVjdC1sYXVuY2hlcy0yMDE4LTktMTAyNzUyMjI0NzwvYT48L3A+XHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+Mi5fPGEgaHJlZj1cImh0dHBzOi8vd3d3LnZveC5jb20vdGVjaG5vbG9neS8yMDE4LzkvMTMvMTc4NTEwNTIvYXBwbGUtaXBob25lLXByaWNlLWNoaW5hLXRydW1wLXVzLXRyYWRlXCI+IGh0dHBzOi8vd3d3LnZveC5jb20vdGVjaG5vbG9neS8yMDE4LzkvMTMvMTc4NTEwNTIvYXBwbGUtaXBob25lLXByaWNlLWNoaW5hLXRydW1wLXVzLXRyYWRlPC9hPjwvcD5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDggPSBgXHJcbiAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlZpdGFsaWsgQnV0ZXJpbiwgYXJjaGl0ZWN0IG9mIEV0aGVyZXVtIGNyeXB0by1jb250cmFjdC9jdXJyZW5jeSwgcHJlc2VudGVkIGF0IHRoZSByZWNlbnQgVGVjaENydW5jaCBEaXNydXB0ISBjb25mZXJlbmNlIHdpdGggbm8gc2hvcnRhZ2Ugb2Ygb3BpbmlvbnMgb24gdGhlIGRpcmVjdGlvbiBvZiBibG9ja2NoYWluIGFuZCBjcnlwdG8tY3VycmVuY3kvY29udHJhY3QgaW52ZXN0bWVudHMuLi4gVGhpcywgYWZ0ZXIgdGhlIEV0aGVyZXVtIChXRUkpIGRlY2xpbmVzIG5lYXJseSB0ZW4tZm9sZCBhbG9uZyB3aXRoIEJpdGNvaW4ncyA3MCUgZHJvcDxzdXA+MTwvc3VwPiwgYWxvbmcgd2l0aCBvdGhlciBtYWpvciBjcnlwdG8tY3VycmVuY2llcy4gPC9wPlxyXG4gIDxwPlRoZSBzdG9yeSBpcyBsZXNzIGRyYW1hdGljIGFuZCBteXN0ZXJpb3VzIHRoYW4gaXQgaXMgc2ltcGx5IHRoZSBuYXR1cmFsIGNvdXJzZSBvZiBtYXJrZXQgbm92ZWx0aWVzJyA8aT50cmFuc2l0aW9uIGZyb20gRWFybHkgQWRhcHRlcnMgdG8gR2VuZXJhbCBBY2NlcHRhbmNlPC9pPjogVGhlIHVuZGVybHlpbmcgdmFsdWUgdHJhbnNpdGlvbnMgZnJvbSBpbmNyZWFzaW5nIHB1YmxpYyBhd2FyZW5lc3MgdG8gbWFpbnN0cmVhbSBhY2NlcHRhbmNlLCB3aGljaCByZXF1aXJlcyBuZXcsIGVuc3VpbmcgPGk+ZXhwZWN0YXRpb25zIHRoYXQgZGlmZmVyIGZyb20gdGhlIHByZXZpb3VzIHBlcmlvZDwvaT4uIFRoZSBzdWJzdGFuY2Ugb2YgcGVyY2VpdmVkIHZhbHVlIGRpY3RhdGVzIGFjdHVhbCB2YWx1ZS4gQnV0ZXJpbiBvcGluZXMgdG8gQmxvb21iZXJnIE5ld3MuLi5cclxuICAgIDxwIGNsYXNzPVwicXVvdGVcIj4gXHJcbiAgICAgVGhlIGJsb2NrY2hhaW4gc3BhY2UgaXMgZ2V0dGluZyB0byB0aGUgcG9pbnQgd2hlcmUgdGhlcmXigJlzIGEgY2VpbGluZyBpbiBzaWdodC4gSWYgeW91IHRhbGsgdG8gdGhlIGF2ZXJhZ2UgZWR1Y2F0ZWQgcGVyc29uIGF0IHRoaXMgcG9pbnQsIHRoZXkgcHJvYmFibHkgaGF2ZSBoZWFyZCBvZiBibG9ja2NoYWluIGF0IGxlYXN0IG9uY2UuIFRoZXJlIGlzbuKAmXQgYW4gb3Bwb3J0dW5pdHkgZm9yIHlldCBhbm90aGVyIDEsMDAwLXRpbWVzIGdyb3d0aCBpbiBhbnl0aGluZyBpbiB0aGUgc3BhY2UgYW55bW9yZSAuLi4gR3Jvd3RoIGluIEJpdGNvaW4gYW5kIG90aGVyIGNyeXB0b2N1cnJlbmNpZXMgaW4gdGhlIGJsb2NrY2hhaW4gY29tbXVuaXR5IHRocm91Z2ggaXRzIGZpcnN0IHNpeCBvciBzZXZlbiB5ZWFycyB3YXMgZGVwZW5kZW50IG9uIG1hcmtldGluZyBhbmQgdHJ5aW5nIHRvIGdldCB3aWRlciBhZG9wdGlvbi4gPGJyIC8+PGJyIC8+IFxyXG5UaGF0IHN0cmF0ZWd5IGlzIGdldHRpbmcgY2xvc2UgdG8gaGl0dGluZyBhIGRlYWQgZW5kLiAgVGhlIG5leHQgc3RlcCB3aWxsIGJlIGdldHRpbmcgcGVvcGxlIHdobyBhcmUgYWxyZWFkeSBpbnRlcmVzdGVkIGluIGNyeXB0b2N1cnJlbmNpZXMgdG8gYmUgaW52b2x2ZWQgaW4gYSBtb3JlIGluLWRlcHRoIHdheS4gXCJHbyBmcm9tIGp1c3QgcGVvcGxlIGJlaW5nIGludGVyZXN0ZWQgdG8gcmVhbCBhcHBsaWNhdGlvbnMgb2YgcmVhbCBlY29ub21pYyBhY3Rpdml0eVwiIFtCdXRlcmluXSBzYWlkLiAgPHN1cD4yPC9zdXA+PC9wPiBcclxuICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvZGlmZnVzaW9uLmpwZ1wiIGNsYXNzPVwiem9vbVwiIC8+XHJcbiAgICA8cD5TbywgdGhlIG9sZCBleHBlY3RhdGlvbnMgZ2VuZXJhdGVkIGEgdmVyeSBsb3cgYmFyIHRvIHByb3ZlIGFjdHVhbCB1dGlsaXR5LCB3aGVyZWFzIHByZXNlbnQtZGF5IGNvbGxlY3RpdmUga25vd2xlZGdlIGRlbWFuZHMgY2xlYXJlciBwcmFjdGljYWwgcHJvb2Y7IGluaGVyZW50bHkgdGhlIGJhciBpcyByYWlzZWQuIEFuZCBub3csIGJ5IHRlY2huaWNhbCBzd2VhdCBvZiB0aGUgYnJvdywgY3J5cHRvLWJhc2VkIGZpbnRlY2ggbm93IGZhY2VzIHRoZSByZWFsaXRpZXMgb2Ygd2hhdCB3aWxsIGJlIG5lZWRlZCBmb3Igd2lkZS1zcHJlYWQgdXNlOiB0ZWNobmljYWwgc29sdXRpb25zIHRvIHNjYWxhYmlsaXR5IHByb2JsZW1zLCBzZWN1cml0eSBpc3N1ZXMsIGFuZCBvZiBjb3Vyc2Ugc3BlZWQsIGF2YWlsYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgZGF0YSB0cmFuc2Zlci4gWWV0LCBub3cgbW9yZSBpbXBvcnRhbnRseSwgZWFzZS1vZi1tYWluc3RyZWFtLXVzZS4gPC9wPlxyXG4gICAgPHA+Rm9yIGV4YW1wbGUsIEV0aGVyZXVtIGNvbnRyYWN0IHdyaXRlcnMgbXVzdCBsZWFybiBhIG5ldyBsYW5ndWFnZSwgU29saWRpdHk7IGFuZCBFdGhlcmV1bSBjdXJyZW5jeSBob2xkZXJzIG11c3QgZ3JhcHBsZSB3aXRoIGJyb3dzZXItdG8tbGVkZ2VyIGludGVyZmFjZXMgbGlrZSBNZXRhTWFzaywgd2hpY2ggYXJlIGZhciBmcm9tIGludHVpdGl2ZSBmb3IgZXZlbiB0aGUgbW9zdCBlbnRodXNpYXN0aWMgb2YgZWFybHkgYWRvcHRlcnMhICA8L3A+XHJcbiAgICA8cD4gVGhpcyBjb25jZXB0IGlzIGxhaWQgYmFyZSBpbiBzb2Npb2xvZ2ljYWwgdGVybXMsIGNpdGluZyBSb2dlcnMgYW5kIFNodW1hY2hlcidzIDE5NzEgYXJ0aWNsZSBmcm9tIG15IEZlYi4gMTUgcG9zdDogdGhlIGdlbmVyYWwgc29jaW9sb2dpY2FsIEVhcmx5IEFkb3B0ZXIgdGhlb3J5LS1iYXNlZCBvbiBFdmVyZXR0IE0uIFJvZ2VycycgRGlmZnVzaW9uIG9mIElubm92YXRpb25zIHRoZW9yeSwgZGVzY3JpYmluZyB0aGUgdGltZWxpbmUgb2YgdGhlIElubm92YXRpb24gQWRvcHRpb24gTGlmZWN5Y2xlIGFzIGZhaXJseSBvcmRpbmFyeSwgb3IgYmV0dGVyIHN0YXRlZCwgZmFpcmx5IGhpc3RvcmljYWwtLWFnYWluIHJlcGVhdGluZyBpdHNlbGYuPHN1cD4zPC9zdXA+IDwvcD5cclxuICAgIGA7XHJcbiAgdmFyIGJsb2djaXRlOCA9IGAgXHJcbiAgICBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjEuIDxhIGhyZWY9XCJodHRwczovL21hcmtldHMuYnVzaW5lc3NpbnNpZGVyLmNvbS9jdXJyZW5jaWVzL2J0Yy11c2RcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vbWFya2V0cy5idXNpbmVzc2luc2lkZXIuY29tL2N1cnJlbmNpZXMvYnRjLXVzZFxyXG4gICAgPC9hPlxyXG4gICAgPC9wPiBcclxuICAgIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0wOC9jcnlwdG8tZ3Jvd3RoLW5lYXJzLWNlaWxpbmctZXRoZXJldW0tY28tZm91bmRlci1idXRlcmluLXNheXM/dXRtX2NhbXBhaWduPXNvY2lhbGZsb3ctb3JnYW5pYyZ1dG1fbWVkaXVtPXNvY2lhbCZjbXBpZD1zb2NpYWxmbG93LXR3aXR0ZXItYnVzaW5lc3MmdXRtX2NvbnRlbnQ9YnVzaW5lc3MmdXRtX3NvdXJjZT10d2l0dGVyXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3d3dy5ibG9vbWJlcmcuY29tL25ld3MvYXJ0aWNsZXMvMjAxOC0wOS0wOC9jcnlwdG8tZ3Jvd3RoLW5lYXJzLWNlaWxpbmctZXRoZXJldW0tY28tZm91bmRlci1idXRlcmluLXNheXNcclxuICAgIDwvYT5cclxuICAgIDwvcD4gIDxwIGNsYXNzPVwiY2l0ZVwiPjMuIDxhIGhyZWY9XCJodHRwczovL2VyaWMuZWQuZ292Lz9pZD1FRDA2NTk5OVwiICAgdGFyZ2V0PVwiX2JsYW5rXCI+Um9nZXJzLCBFLiBNLiwgJiBTaG9lbWFrZXIsIEYuIEYuICgxOTcxKS4gQ29tbXVuaWNhdGlvbiBvZiBJbm5vdmF0aW9uczsgQSBDcm9zcy1DdWx0dXJhbCBBcHByb2FjaC5cclxuICAgIDwvYT5cclxuICAgIDwvcD4gXHJcbiAgICAgYDsgIFxyXG5cclxuICAgICB2YXIgYmxvZ3Bvc3Q3ID0gYDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5DcnlwdG8tTWlsbGlvbmFpcmVzIG9uZSBkYXksIENyeXB0by1NaWRkbGUtY2xhc3MgdGhlIG5leHQuICBDcnlwdG8tY3VycmVuY2llcyBpbiBhbGwgZm9ybXMgaGF2ZSBzdXN0YWluZWQgYSA5LW1vbnRoIGRlY2xpbmUsIHdoaWNoIG1vc3QgY291bGQgbm90IGhhdmUgYW50aWNpcGF0ZWQuICBUYWtlIGZvciBpbnN0YW5jZSwgRGVjZW1iZXIgMjAxNydzICQxNTAwIEV0aGVyIHZhbHVlIHRvIHJlY2VudCB2YWx1ZXMgb2YgJDE4NTxzdXA+MTwvc3VwPiwgYW5kIEJpdGNvaW4ncyBOb3ZlbWJlciAyMDE3IHZhbHVhdGlvbiBvZiBqdXN0IHVuZGVyICQyMCwwMDAgb24gdGhlIENvaW5EZXNrIEJpdGNvaW4gUHJpY2UgSW5kZXggKEJQSSkgZG93biB0byB0aGlzIHdlZWsncyAkNiw0MDAuICA8L3A+XHJcbiAgICAgXHJcbiAgICAgPGltZyBzcmM9XCJkaXN0L2ltZy9jcnlwdG9jdXJyZW5jeS5qcGdcIiBjbGFzcz1cInpvb21cIiAvPlxyXG4gICAgIDxwPlRoZSB0aGVvcmllcyBhcmUgbXVsdGktZm9sZDo8L3A+XHJcbiAgICAgPHAgY2xhc3M9XCJxdW90ZVwiPlNvbWUgaGF2ZSBwb3NpdGVkIHRoYXQgYmxvY2tjaGFpbiBhbmQgY3J5cHRvY3VycmVuY3kgcHJvamVjdHMgbWlnaHQgYmUgY29udmVydGluZyB0aGVpciBldGhlciByZXNlcnZlcyBpbnRvIGZpYXQgY3VycmVuY2llcyB0byBtZWV0IGZpbmFuY2lhbCBvYmxpZ2F0aW9ucy4gQXQgZmFjZSB2YWx1ZSwgdGhpcyBhcHBlYXJzIHBsYXVzaWJsZSwgYXMgc3RhcnR1cHMgaW5jdXIgbWFueSBleHBlbnNlcyBkdXJpbmcgdGhlaXIgZ3Jvd3RoIHBoYXNlLiBJZiBhIGNvbGxlY3Rpb24gb2YgY29tcGFuaWVzIGxpcXVpZGF0ZWQgdGhlIGNyeXB0b2N1cnJlbmNpZXPigJRtb3N0bHkgZXRoZXLigJR0aGF0IHRoZXkgcmFpc2VkIGluIElDT3MgYXQgdGhlIHNhbWUgdGltZSwgdGhleSBjb3VsZCBleGVydCBkb3dud2FyZCBwcmVzc3VyZSBvbiBwcmljZXMuPHN1cD4yPC9zdXA+PC9wPlxyXG4gICAgICAgPHA+T3RoZXJzIGJsYW1lIGludmVzdG1lbnQgcHN5Y2hvbG9neSAuLi4gPC9wPiBcclxuICAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5JdOKAmXMgcG9zc2libGUgdGhhdCB0aGUgcHJpY2UgZGVjbGluZSByZWZsZWN0cyBhIG5lZ2F0aXZlIGZlZWRiYWNrIGxvb3AsIGEgY29tYmluYXRpb24gb2YgZWNvbm9taWNzIGFuZCBwc3ljaG9sb2d5LiBBcyBjcnlwdG8gaW52ZXN0b3JzIHNlbGwgdGhlaXIgaG9sZGluZ3MsIHRoZXkgc2VlIHRoYXQgcHJpY2VzIGFyZSBmYWxsaW5nLiBUaGlzIGNvdWxkIHNwb29rIHRoZW0gaW50byBzZWxsaW5nIGV2ZW4gbW9yZS4gVGhpcyBpcyBzb21ld2hhdCBsaWtlIGEgYmFuayBydW4sIGV4Y2VwdCBpbnZlc3RvcnMgbG9zZSBmYWl0aCBpbiB0aGUgdmFsdWUgb2YgY3J5cHRvY3VycmVuY2llcyByYXRoZXIgdGhhbiB0aGUgdmlhYmlsaXR5IG9mIGEgZmluYW5jaWFsIGluc3RpdHV0aW9uLjxzdXA+Mjwvc3VwPlxyXG4gICAgICAgPC9wPlxyXG4gICAgICAgPHA+T3RoZXJzIHN0aWxsLCB0aGV5IGJsYW1lIGVhc2Utb2YtdXNlIGFuZCBhY2Nlc2liaWxpdHkgLi4uIDwvcD5cclxuICAgICAgIDxwIGNsYXNzPVwicXVvdGVcIj5DcnlwdG9jdXJyZW5jeSBpbnZlc3RvcnMgKGFuZCBlc3BlY2lhbGx5IGV0aGVyZXVtIGJhY2tlcnMpIG1heSBiZSBkaXNhcHBvaW50ZWQgKHBheXdhbGwpIGJ5IHRoZSBsb3cgdXNhZ2Ugb2YgZGVjZW50cmFsaXplZCBhcHBsaWNhdGlvbnMgKGRhcHBzKSBsaWtlIElERVgsIEJhbmNvciwgYW5kIENyeXB0b0tpdHRpZXMuIFRoZXNlIGFwcHMgcnVuIG9uIGNyeXB0byB0b2tlbnMsIGFuZCB0aHVzIGdlbmVyYXRlIGRlbWFuZCBmb3IgdGhlIGFzc2V0cy5cclxuPGJyIC8+PGJyIC8+XHJcbiAgICAgICBCdXQgd2hlbiBpbnZlc3RvcnMgdmlzaXQgYSBjcnlwdG9jdXJyZW5jeSBleGNoYW5nZSwgdGhleSBhcmVu4oCZdCBwcmVzZW50ZWQgd2l0aCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZGFpbHkgYWN0aXZlIHVzZXJzIG9uIHZhcmlvdXMgZGFwcHMuIFRoZXnigJlyZSBnZW5lcmFsbHkgb25seSBwcmVzZW50ZWQgd2l0aCB0aGUgcHJpY2Ugb2YgYW4gYXNzZXQgYW5kIGEgY2hhcnQgb2YgaXRzIGhpc3RvcnkuPHN1cD4yPC9zdXA+XHJcbiAgICAgICA8L3A+XHJcbiAgICAgICA8cD5Ib3dldmVyIG9uZSBkaXN0cmlidXRlcyB0aGUgYmxhbWUsIHBzeWNob2xvZ2ljYWwgYW5kIGVjb25vbWljIGV4cGxhbmF0aW9ucyBvbmx5IGZhaWwgd2hlcmUgc29jaW9sb2dpY2FsIGV4cGxhbmF0aW9ucyBvZmZlciBjb2hlcmVudCBleHBsYW5hdGlvbnMgLi4uIExvb2sgbm8gZnVydGhlciB0aGFuIG15IFNlcHRlbWJlciAxMHRoIHBvc3QgLi4uXHJcbiAgICAgICA8L3A+XHJcbiAgICAgICBgO1xyXG4gICAgIHZhciBibG9nY2l0ZTcgPSBgXHJcbiAgICBcclxuICAgICA8cCBjbGFzcz1cImNpdGVcIj4xLiA8YSBocmVmPVwiaHR0cHM6Ly9tYXJrZXRzLmJ1c2luZXNzaW5zaWRlci5jb20vY3VycmVuY2llcy9idGMtdXNkXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL21hcmtldHMuYnVzaW5lc3NpbnNpZGVyLmNvbS9jdXJyZW5jaWVzL2J0Yy11c2RcclxuICAgICA8L2E+XHJcbiAgICAgPC9wPiBcclxuICAgICA8cCBjbGFzcz1cImNpdGVcIj4yLiA8YSBocmVmPVwiaHR0cHM6Ly9xei5jb20vMTM1NTk0NS93aHktaGF2ZS1jcnlwdG9jdXJyZW5jaWVzLWxpa2UtYml0Y29pbi1hbmQtZXRoZXJldW0tZmFsbGVuLXNvLW11Y2gvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS8xMzU1OTQ1L3doeS1oYXZlLWNyeXB0b2N1cnJlbmNpZXMtbGlrZS1iaXRjb2luLWFuZC1ldGhlcmV1bS1mYWxsZW4tc28tbXVjaC9cclxuICAgICA8L2E+XHJcbiAgICAgPC9wPiAgIDxwIGNsYXNzPVwiY2l0ZVwiPjIuIDxhIGhyZWY9XCJodHRwczovL3F6LmNvbS8xMzQ5MjA3L3dhbGwtc3RyZWV0cy1pbnRlcmVzdC1pbi1iaXRjb2luLWxpa2UtaWNlcy1iYWtrdC1pc250LWJvb3N0aW5nLWNyeXB0by1wcmljZXMvXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL3F6LmNvbS8xMzQ5MjA3L3dhbGwtc3RyZWV0cy1pbnRlcmVzdC1pbi1iaXRjb2luLWxpa2UtaWNlcy1iYWtrdC1pc250LWJvb3N0aW5nLWNyeXB0by1wcmljZXMvXHJcbiAgICAgPC9hPlxyXG4gICAgIDwvcD4gaHR0cHM6Ly9xei5jb20vMTM0OTIwNy93YWxsLXN0cmVldHMtaW50ZXJlc3QtaW4tYml0Y29pbi1saWtlLWljZXMtYmFra3QtaXNudC1ib29zdGluZy1jcnlwdG8tcHJpY2VzL1xyXG4gICAgICAgIGA7XHJcblxyXG4gICAgIHZhciBibG9ncG9zdDYgPSBgXHJcbiAgICAgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPlF1YW50dW0gc29sdXRpb25zIHRvIGNvbXB1dGluZyBuZWVkcyBiZWNvbWUgY2xlYXJlciwgYW5kIHNwZWNpZmljIHVzZXMgZm9yIHJlc2VhcmNoIGNvbWUgdG8gbGlnaHQuIEZpcnN0IGFuZCBmb3JlbW9zdCwgcXVhbnR1bSBtZWNoYW5pY3Mgb2ZmZXIgYSByZWFsbSBvZiBzb2x1dGlvbnMgdGhhdCBoYXMgZXZlciBlbHVkZWQgbW9kZXJuIHNjaWVuY2U6IHByb2JsZW0tc29sdmluZyBhbGdvcml0aG1zIHRoYXQgZmFjZSBvcmRlcnMgb2YgY29tcGxleGl0eSBvZiA0MCB0byA1MCBvcmRlcnMgb2YgbWFnbml0dWRlLCBpLmUuIENvbXBsZXhpdHk8c3VwPjUwPC9zdXA+IGlzIGp1c3QgYSB0YWQgdG9vIGNvbXBsZXggZm9yIHRoZSBmYXN0LCBidXQgc3RyYWlnaHQtbGluZSBkdW1iIEEuSS4tYmFzZWQgc29sdXRpb25zLCB3aGljaCBhcmUgaW5oZXJlbnQgdG8gY2xhc3NpZmljYXRvcnkgbWFjaGluZS1sZWFybmluZyBzY2hlbWEuIEJsb2NrY2hhaW4gYW5kIERpcmVjdGVkIEFjeWNsaWMgR3JhcGhzIGFyZSBsZXNzIGhlbHBmdWwsIGJ1dCBmaW5kIHRoZWlyIHV0aWxpdHkgaW4gdGhlIHVuZXNjYXBhYmx5IGZhc3QgYWJpbGl0eSB0byA8aT5zaGFyZSBkYXRhIHdoZXJlIGRhdGEgaXMgbmVlZGVkPC9pPjxiciAvPjxiciAvPjwvcD5cclxuICAgICBNYW5pcHVsYXRpb25zIG9mIHRoZSBxdWFudHVtIHJlYWxtIGFyZSBub3QgYXQgYWxsIGludHVpdGl2ZSB0byBjb25jZXB0cyB3ZSBsZWFybiBmcm9tIHRoZSBjbGFzc2ljYWwgd29ybGQuIExlc3MgaW50dWl0aXZlIGFyZSB0aGUgY29uc3RyYWludHMgb2YgdGhlIGRhdGEgYW5hbHlzaXMuIEZvciBleGFtcGxlLCB0aGUgcXVhbnR1bSBtZXRhcGhvciBvZiBmbGlwcGluZyB0d28gY29pbnMgc2ltdWx0YW5lb3VzbHkgbWVhbnMga25vd2luZyB0aGUgXCJzdGF0ZVwiIG9mIG9uZSBjb2luIGlmIHlvdSBrbm93IHRoZSBvdGhlciBjb2luJ3Mgc3RhdGUuIFRoZSBvbmUgbGFuZHMgb24gaGVhZHMsIGFuZCBiZWNhdXNlIGl0IHNoYXJlcyBhbiBlbnRhbmdsZWQgc3RhdGUgd2l0aCB0aGUgb3RoZXIsIDxpPnlvdSBhcmUgZ3VhcmFudGVlZCB0byBrbm93IHRoZSBvdXRjb21lIG9mIHRoZSBzZWNvbmQgY29pbjwvaT4uIDwvcD5cclxuICAgICA8aW1nIHNyYz1cImRpc3QvaW1nL3F1YW50dW1TY2llbmNlLmpwZ1wiICBjbGFzcz1cInpvb21cIiAvPlxyXG4gICAgIDxwPkltYWdlIGNyZWRpdDogVGVjaENydW5jaCBEaXNydXB0ISBEYXkgMzwvcD5cclxuICAgICA8cD5TdXBlcmNvbmR1Y3RpbmcgZGV2aWNlcyBvZmZlciBwb3dlcmZ1bCB0b29saW5nLCB5ZXQgPGk+dGhlIGNhdGNoIGlzIHRoYXQgdGhlIHRpbWUgeW91IGhhdmUgdG8gcnVuIGNhbGN1bGF0aW9ucyBpcyBhcHByb3hpbWF0ZWx5IDUwIG1pY3JvLXNlY29uZHM8L2k+LCBpLmUuIHRoZSA8c3Ryb25nPmNvaGVyZW5jZSB0aW1lIG9mIGVudGFuZ2xlZCwgc3VwZXJwb3NlZCBzdGF0ZTwvc3Ryb25nPi4gKGEgbWFya2VkIGltcHJvdmVtZW50IGZyb20gMTk5MCdzIGhhcmR3YXJlIHRoYXQgeWllbGRlZCBjb2hlcmVuY2UgdGltZSBvZiAxIG5hbm8tc2Vjb25kKS4gTm90IGV4YWN0bHkgZW5vdWdoIHRpbWUgdG8gcnVuIGEgbG9uZyBwcm9ncmFtLCBlc3BlY2lhbGx5IGlmIHlvdSBjb25zaWRlciBqdXN0IG9uZSBzbWFsbCBhbGdvcml0aG0gaXMgYSBzZXJpZXMgb2YgbG9naWNhbCBnYXRlcyB0aGF0IGRlcGVuZCBzZXF1ZW50aWFsbHkgb24gb3RoZXIgbG9naWNhbCBnYXRlcy4uLiwgbGV0IGFsb25lIGFuIGFjdHVhbCBwcm9ncmFtLiBTbyB0aGVuIHdoYXQncyB0aGUgdXNlPyBUaGUgc3BlY2lmaWMgdXNlcyBpbiBhY2FkZW1pYyByZXNlYXJjaCBhcmUgd2l0aG91dCBsaW1pdCBmb3IgdGhvc2UgcHJvYmxlbXMgdGhhdCBwcmVzZW50IHNwZWNpZmljLCBleHBvbmVudGlhbCBjb21wbGV4aXR5LS1tYW55IGNhc2VzIGluIGJpb3RlY2gsIGNoZW1pc3RyeSwgYW5kIHNvIG9uLiBRdWFudHVtIGNvbXB1dGluZyBvZmZlcnMgYSAnYnVyc3QnIG9mIGNhbGN1bGF0aW9ucywgYW5kIG5vdGhpbmcgbW9yZSwgYXQgbGVhc3QgZm9yIG5vdy4gPC9wPlxyXG4gICAgIDxpbWcgc3JjPVwiZGlzdC9pbWcvcXVhbnQtcHl0aG9uLmpwZ1wiIGNsYXNzPVwiem9vbVwiIC8+XHJcbiAgICAgPGltZyBzcmM9XCJkaXN0L2ltZy9xdWFudC1weXRob24yLmpwZ1wiIGNsYXNzPVwiem9vbVwiIC8+XHJcbiAgICAgPHA+VGhpcyBzaG9ydCBweXRob24tbGFuZ3VhZ2UgcHJvZ3JhbSBkZW1vbnN0cmF0ZXMgcXVhbnR1bSBtYW5pcHVsYXRpb24gdG8gbWFjaGluZS1sZWFybmluZyBjbGFzc2lmaWNhdGlvbiBkaXN0aW5ndWlzaGluZyBhIGRvZyBmcm9tIGEgY2F0PC9wPlxyXG4gICAgIDxwPkltYWdlIGNyZWRpdDogVGVjaENydW5jaCBEaXNydXB0ISBEYXkgMzwvcD5cclxuICAgICBcclxuICAgICA8cD5Ob3QgdG8gYmUgdW5kZXJlc3RpbWF0ZWQsIHF1YW50dW0gY2FsY3VsYXRpb25zIG9wZXJhdGUgYmVzdCB3aGVuIG1vZGVsaW5nIHRoZSBsYXdzIG9mIG5hdHVyZS0tYmVjYXVzZSBuYXR1cmUgb2JleXMgcXVhbnR1bSBtZWNoYW5pY2FsIHJ1bGVzLCBiZWdpbm5pbmcgd2l0aCBjaGVtaXN0cnkuIEFmdGVyIGFsbCwgcXVhbnR1bSBhbmFseXNpcyBzaW11bGF0ZWQgdGhlIGxhcmdlc3QgbW9sZWN1bGUgbGFzdCB5ZWFyLS1hbmQgdGhhdCdzIG5vIHNtYWxsIG1hdHRlciEgIDwvcD5cclxuICAgICAgIGA7XHJcbiAgICAgdmFyIGJsb2djaXRlNiA9IGAgXHJcbiAgICAgICA8cCBjbGFzcz1cImNpdGVcIj4gIFRlY2hDcnVuY2ggRGlzcnVwdCEgRGF5IDMgXHJcbiAgICAgICA8L3A+XHJcbiAgICAgICAgYDtcclxuICB2YXIgYmxvZ3Bvc3Q1ID0gYFxyXG4gIDxwIGNsYXNzPVwiZmlyc3RwYXJhZ3JhcGhcIj5NYWNoaW5lIGxlYXJuaW5nJ3MgaGV5LWRheSBub3Qgb25seSBibG9zc29tcywgYnV0IG92ZXJ0YWtlcyBtYW55IGFyZWFzIG9mIGNvbXB1dGluZyBzb2x1dGlvbnMgaWYgYW55dGhpbmcgZWxzZSBidXQgZm9yIHRoZSBzaGVlciBlYXNlIG9mIHVubG9hZGluZyBtdW5kYW5lIGNvbXB1dGluZyB0YXNrcy4gQnV0IHRoZSBtb3N0IHdpZGVzcHJlYWQgcHJvYmxlbSBpcyB0aGF0IG9mIG5vbi1BLkkuLCBub24tbWFjaGluZS1sZWFybmluZyB0aGF0IG1hc3F1ZXJhZGUgYXMgQS5JLiwgYnV0IGFyZSBvbmx5IGNvbXBsZXggbG9vcGluZyBhbGdvcml0aG1zLiBNdWNoIGFkbyBhYm91dCBub3RoaW5nIGhhcyBiZWVuIHRoZSBkZWF0aC1rbmVsbCBmb3IgbW9yZSB0aGFuIGEgZmV3IG9mIHRoZSBTdGFydHVwIEJhdHRsZWZpZWxkJ3MgY29udGVuZGVycy4gPGk+RGlzcnVwdCdzIG1lcmNpbGVzcyBwcmVtaXNlcyBhYnJ1cHRseSBkYXNoIGRyZWFtcywgYnV0IEkgZ3Vlc3MgdGhhdCdzIHdoYXQgYSBwdWJsaWMgYW5kIHB1YmxpY2l6ZWQgZm9ydW0gZm9yIFBlZXIgUmV2aWV3IGlzIGFsbCBhYm91dCE8L2k+PGJyIC8+IDxiciAvPi4uLiB0byBiZSBjb250aW51ZWQuIDwvcD4gXHJcbiAgICBgO1xyXG4gIHZhciBibG9nY2l0ZTUgPSBgIFxyXG4gICAgPHAgY2xhc3M9XCJjaXRlXCI+ICAgVGVjaENydW5jaCBEaXNydXB0ISBEYXkgMyBcclxuICAgIDwvcD5cclxuICAgICBgO1xyXG4gIHZhciBibG9ncG9zdDQgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPjxiciAvPiA8YnIgLz4gIDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+IDxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD4gPC9wPiBgO1xyXG4gIHZhciBibG9nY2l0ZTQgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+ICA8YSBocmVmPVwiXCIgICB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICA8L2E+XHJcbiAgPC9wPlxyXG4gICAgIGA7XHJcbiAgdmFyIGJsb2dwb3N0MyA9IGA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+QnJvd3NlciBVUkxzIGFyZSB0aGUgY29uc3RhbnQgb2YgdGhlIHdlYidzIGV2b2x1dGlvbnMgb3ZlciB0aGUgeWVhcnMuIEFmdGVyIGFsbCwgdGhleSBhcmUgdGhlIHNvbGlkLCBwcmVkaWN0YWJsZSB3b3JraG9yc2UgZm9yIHRyYW5zcG9ydGluZyB3ZWIgc3VyZmVycycgcmVxdWVzdHMgYW5kIHdlYiBzZXJ2ZXJzJyByZXNwb25zZXMuIEJ1dCBjb3VsZCB0aGVyZSBiZSBpbXByb3ZlbWVudHMgZXZlbiB3aXRoIHRoaXMsIGJleW9uZCB0aGUgSFRUUFMnIHNlY3VyaXR5IHVwZ3JhZGU/IFdpcmVkIHJlcG9ydHM6IDwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+Q2hyb21lIGxvb2tzIGFoZWFkIHRvIGl0cyBuZXh0IDEwIHllYXJzLCB0aGUgdGVhbSBpcyBtdWxsaW5nIGl0cyBtb3N0IGNvbnRyb3ZlcnNpYWwgaW5pdGlhdGl2ZSB5ZXQ6IGZ1bmRhbWVudGFsbHkgcmV0aGlua2luZyBVUkxzIGFjcm9zcyB0aGUgd2ViLlxyXG48YnIgLz48YnIgLz5cclxuICBVbmlmb3JtIFJlc291cmNlIExvY2F0b3JzIGFyZSB0aGUgZmFtaWxpYXIgd2ViIGFkZHJlc3NlcyB5b3UgdXNlIGV2ZXJ5IGRheS4gVGhleSBhcmUgbGlzdGVkIGluIHRoZSB3ZWIncyBETlMgYWRkcmVzcyBib29rIGFuZCBkaXJlY3QgYnJvd3NlcnMgdG8gdGhlIHJpZ2h0IEludGVybmV0IFByb3RvY29sIGFkZHJlc3NlcyB0aGF0IGlkZW50aWZ5IGFuZCBkaWZmZXJlbnRpYXRlIHdlYiBzZXJ2ZXJzLiA8YnIgLz48YnIgLz5cclxuICBBcyB3ZWIgZnVuY3Rpb25hbGl0eSBoYXMgZXhwYW5kZWQsIFVSTHMgaGF2ZSBpbmNyZWFzaW5nbHkgYmVjb21lIHVuaW50ZWxsaWdpYmxlIHN0cmluZ3Mgb2YgZ2liYmVyaXNoIGNvbWJpbmluZyBjb21wb25lbnRzIGZyb20gdGhpcmQtcGFydGllcyBvciBiZWluZyBtYXNrZWQgYnkgbGluayBzaG9ydGVuZXJzIGFuZCByZWRpcmVjdCBzY2hlbWVzLiBBbmQgb24gbW9iaWxlIGRldmljZXMgdGhlcmUgaXNuJ3Qgcm9vbSB0byBkaXNwbGF5IG11Y2ggb2YgYSBVUkwgYXQgYWxsLiAgVGhlIHJlc3VsdGluZyBvcGFjaXR5IGhhcyBiZWVuIGEgYm9vbiBmb3IgY3liZXIgY3JpbWluYWxzIHdobyBidWlsZCBtYWxpY2lvdXMgc2l0ZXMgdG8gZXhwbG9pdCB0aGUgY29uZnVzaW9uLlxyXG4gIDxiciAvPjxiciAvPlxyXG4gIFRoZSBmb2N1cyByaWdodCBub3csIHRoZXkgc2F5LCBpcyBvbiBpZGVudGlmeWluZyBhbGwgdGhlIHdheXMgcGVvcGxlIHVzZSBVUkxzIHRvIHRyeSB0byBmaW5kIGFuIGFsdGVybmF0aXZlIHRoYXQgd2lsbCBlbmhhbmNlIHNlY3VyaXR5IGFuZCBpZGVudGl0eSBpbnRlZ3JpdHkgb24gdGhlIHdlYiB3aGlsZSBhbHNvIGFkZGluZyBjb252ZW5pZW5jZSBmb3IgZXZlcnlkYXkgdGFza3MgbGlrZSBzaGFyaW5nIGxpbmtzIG9uIG1vYmlsZSBkZXZpY2VzLjxzdXA+MTwvc3VwPjwvcD5cclxuICA8cD5CcmluZyBpdCBvbiwgR29vZ2xlLCBhbmQgc2F2ZSB1cyBmcm9tIHRoZSBpbmNyZWFzaW5nIGZsb29kIG9mICY7QCMgYW1wZXJzYW5kcyAmJSBhbmQgZXhjZXNzaXZlICNfJiUgVVJMIHBhcmFtZXRlcnMgdGhhdCBncm93IGxvbmdlciBhbmQgbG9uZ2VyIC4uLiBhbmQgbG9uZ2VyIC4uLiBidXQgaG93PzwvcD4gYDtcclxuICB2YXIgYmxvZ2NpdGUzID0gYFxyXG4gIDxwIGNsYXNzPVwiY2l0ZVwiPjEgPGEgaHJlZj1cImh0dHBzOi8vd3d3LndpcmVkLmNvbS9zdG9yeS9nb29nbGUtd2FudHMtdG8ta2lsbC10aGUtdXJsL1wiICAgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly93d3cud2lyZWQuY29tL3N0b3J5L2dvb2dsZS13YW50cy10by1raWxsLXRoZS11cmwvXHJcbiAgPC9hPlxyXG4gIDwvcD5cclxuICBgO1xyXG4gIHZhciBibG9ncG9zdDIgPSBgPHAgY2xhc3M9XCJmaXJzdHBhcmFncmFwaFwiPiA8L3A+XHJcbiAgPHAgY2xhc3M9XCJxdW90ZVwiPiA8c3VwPjE8L3N1cD48L3A+XHJcbiAgPHA+IDwvcD5gO1xyXG4gIHZhciBibG9nY2l0ZTIgPSBgXHJcbiAgPHAgY2xhc3M9XCJjaXRlXCI+IDxhIGhyZWY9XCJcIiAgIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgYDtcclxuXHJcblxyXG4gIHZhciBibG9ncG9zdDEgPSBgPHAgY2xhc3M9XCJxdW90ZVwiPjxpPkF0IGZpcnN0IHRoZSBjb21wdXRlciBkcmV3IGEgYmxhbms7IHNlY29uZHMgbGF0ZXIsIGl0IGRlY2lkZWQgaXQgd2FzIGRlYWxpbmcgd2l0aCBhbm90aGVyIGNhciwgZXhwZWN0aW5nIGl0IHRvIGRyaXZlIGF3YXkgYW5kIHJlcXVpcmUgbm8gc3BlY2lhbCBhY3Rpb24uIE9ubHkgYXQgdGhlIGxhc3Qgc2Vjb25kIHdhcyBhIGNsZWFyIGlkZW50aWZpY2F0aW9uIGZvdW5kIOKAkyBhIHdvbWFuIHdpdGggYSBiaWtlLCBzaG9wcGluZyBiYWdzIGhhbmdpbmcgY29uZnVzaW5nbHkgZnJvbSBoYW5kbGViYXJzLCBkb3VidGxlc3MgYXNzdW1pbmcgdGhlIFZvbHZvIHdvdWxkIHJvdXRlIGFyb3VuZCBoZXIgYXMgYW55IG9yZGluYXJ5IHZlaGljbGUgd291bGQuIEJhcnJlZCBmcm9tIHRha2luZyBldmFzaXZlIGFjdGlvbiBvbiBpdHMgb3duLCB0aGUgY29tcHV0ZXIgYWJydXB0bHkgaGFuZGVkIGNvbnRyb2wgYmFjayB0byBpdHMgaHVtYW4gbWFzdGVyLCBidXQgdGhlIG1hc3RlciB3YXNu4oCZdCBwYXlpbmcgYXR0ZW50aW9uLiBFbGFpbmUgSGVyemJlcmcsIGFnZWQgNDksIHdhcyBzdHJ1Y2sgYW5kIGtpbGxlZCwgbGVhdmluZyBtb3JlIHJlZmxlY3RpdmUgbWVtYmVycyBvZiB0aGUgdGVjaCBjb21tdW5pdHkgd2l0aCB0d28gdW5jb21mb3J0YWJsZSBxdWVzdGlvbnM6IHdhcyB0aGlzIGFsZ29yaXRobWljIHRyYWdlZHkgaW5ldml0YWJsZT8gQW5kIGhvdyB1c2VkIHRvIHN1Y2ggaW5jaWRlbnRzIHdvdWxkIHdlLCBzaG91bGQgd2UsIGJlIHByZXBhcmVkIHRvIGdldD88L2k+PHN1cD4xIDwvc3VwPjwvcD5cclxuICA8cCBjbGFzcz1cImZpcnN0cGFyYWdyYXBoXCI+TWlzdGFrZXMgaW4gY29kZSBhcmUgYSBnaXZlbi4gQnV0IG5vdCBpbmV2aXRhYmxlLCB3aXRoIGxlc3MgaGFzdGUsIG1vcmUgdGVzdGluZywgYW5kIG1vcmUgY29ycmVjdGl2ZSByZWR1bmNlbmNpZXMuIFRoaXMgaG93ZXZlciBpcyBub3QgdGhlIHRyZW5kOjwvcD5cclxuICA8cCBjbGFzcz1cInF1b3RlXCI+4oCcSW4gc29tZSB3YXlzIHdl4oCZdmUgbG9zdCBhZ2VuY3kuIFdoZW4gcHJvZ3JhbXMgcGFzcyBpbnRvIGNvZGUgYW5kIGNvZGUgcGFzc2VzIGludG8gYWxnb3JpdGhtcyBhbmQgdGhlbiBhbGdvcml0aG1zIHN0YXJ0IHRvIGNyZWF0ZSBuZXcgYWxnb3JpdGhtcywgaXQgZ2V0cyBmYXJ0aGVyIGFuZCBmYXJ0aGVyIGZyb20gaHVtYW4gYWdlbmN5LiBTb2Z0d2FyZSBpcyByZWxlYXNlZCBpbnRvIGEgY29kZSB1bml2ZXJzZSB3aGljaCBubyBvbmUgY2FuIGZ1bGx5IHVuZGVyc3RhbmQu4oCdPHN1cD4gPC9zdXA+PC9wPlxyXG4gIDxwPjwvcD5cclxuICAgIGA7XHJcbiAgdmFyIGJsb2djaXRlMSA9IGBcclxuICA8cCBjbGFzcz1cImNpdGVcIj4gIDxhIGhyZWY9XCJodHRwczovL3d3dy50aGVndWFyZGlhbi5jb20vdGVjaG5vbG9neS8yMDE4L2F1Zy8yOS9jb2RpbmctYWxnb3JpdGhtcy1mcmFua2VuYWxnb3MtcHJvZ3JhbS1kYW5nZXJcIiAgIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vd3d3LnRoZWd1YXJkaWFuLmNvbS90ZWNobm9sb2d5LzIwMTgvYXVnLzI5L2NvZGluZy1hbGdvcml0aG1zLWZyYW5rZW5hbGdvcy1wcm9ncmFtLWRhbmdlclxyXG4gIDwvYT5cclxuICA8L3A+XHJcbiAgICBgO1xyXG5cclxuICB2YXIgdXJsID0gWyAgXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMjUnLFxyXG4gICAgICBkaWQ6ICc5LTI5LTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciAyOXRoLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdSZWFsLVRpbWUsIDIxc3QgV2ViLUFwcHNcXCdzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyNSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMjVcclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICBpZDogJzI0JyxcclxuICAgICAgZGlkOiAnOS0yOC0xOCcsXHJcbiAgICAgIGRhdGU6ICdTZXB0ZW1iZXIgMjh0aCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1dlYiBEZXYgQWZmYWlycycsXHJcbiAgICAgIHRpdGxlOiAnT3BlbiBTb3VyY2UgRGVtb2NyYWN5OiBQYXJ0IElJIDxiciAvPkRhdGEgVmlzdWFsaXphdGlvbiBmb3IgQWxsJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyNCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMjRcclxuICAgIH0sICBcclxuICAgIHtcclxuICAgICAgaWQ6ICcyMycsXHJcbiAgICAgIGRpZDogJzktMjctMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDI3dGgsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ09wZW4gU291cmNlIERlbW9jcmFjeTogUGFydCBJIDxiciAvPlRoZSBQcmltYWN5IG9mIHRoZSBKdXB5dGVyIE5vdGVib29rJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QyMyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMjNcclxuICAgIH0sXHJcbiAgICAgIHtcclxuXHRcdFx0IGlkOiBcIjIwXCIsXHJcbiAgICAgICBkaWQ6IFwiMDktMjQtMThcIixcclxuICAgICAgIGRhdGU6IFwiU2VwdGVtYmVyIDI0LCAyMDE4XCIsXHJcbiAgICAgICBhdXRob3I6IFwiVGhvbWFzIE1hZXN0YXNcIixcclxuICAgICAgIGNhdDM6IFwiQS5JLk5vdy5cIixcclxuICAgICAgIHRpdGxlOiBcIlNvY2lvbG9neSBUb21vcnJvdyFcIixcclxuICAgICAgIHBvc3Q6IGJsb2dwb3N0MjAsXHJcbiAgICAgICBibG9nY2l0ZTogYmxvZ2NpdGUyMFxyXG4gICAgfSwgXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZDogXCIxOVwiLFxyXG5cdFx0XHRcdGRpZDogXCIwOS0yMi0xOFwiLFxyXG5cdFx0XHRcdGRhdGU6IFwiU2VwdGVtYmVyIDIyLTIzLCAyMDE4IFwiLFxyXG5cdFx0XHRcdGF1dGhvcjogXCJUaG9tYXMgTWFlc3Rhc1wiLFxyXG5cdFx0XHRcdGNhdDM6IFwiQS5JLk5vdy5cIixcclxuXHRcdFx0XHR0aXRsZTogXCJBLkkuIFBlcnNvbmFsaXRpZXM6IFRlY2hhbnRocm9wb3Jtb3JwaGlzbSBNaXNnaXZpbmdzXCIsXHJcblx0XHRcdFx0cG9zdDogYmxvZ3Bvc3QxOSxcclxuXHRcdFx0XHRibG9nY2l0ZTogYmxvZ2NpdGUxOVxyXG5cdFx0XHR9LCBcclxuICAgICAgICB7XHJcbiAgICBpZDogJzE4JyxcclxuICAgIGRpZDogJzA5LTIxLTE4JyxcclxuICAgIGRhdGU6ICdTZXB0ZW1iZXIgMjEsIDIwMTgnLFxyXG4gICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgIHRpdGxlOiAnT24gdGhlIE90aGVyIFNpZGUgb2YgdGhlIENvaW46IFBhcnQgSVY8YnIgLz5EZW1vY3JhdGl6ZWQgTWFya2V0cycsXHJcbiAgICBwb3N0OiBibG9ncG9zdDE4LFxyXG4gICAgYmxvZ2NpdGU6IGJsb2djaXRlMThcclxuICB9LFxyXG4gICAge1xyXG4gICAgaWQ6ICcxNycsXHJcbiAgICBkaWQ6ICcwOS0yMC0xOCcsXHJcbiAgICBkYXRlOiAnU2VwdGVtYmVyIDIwLCAyMDE4JyxcclxuICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICB0aXRsZTogJ09uIHRoZSBPdGhlciBTaWRlIG9mIHRoZSBDb2luOiBQYXJ0IElJSTxiciAvPlRoZSBMb25nLCBSZXN1cmdlbnQgUm9hZCBGb3J3YXJkJyxcclxuICAgIHBvc3Q6IGJsb2dwb3N0MTcsXHJcbiAgICBibG9nY2l0ZTogYmxvZ2NpdGUxN1xyXG4gIH0sIHtcclxuICAgIGlkOiAnMTYnLFxyXG4gICAgZGlkOiAnMDktMTktMTgnLFxyXG4gICAgZGF0ZTogJ1NlcHRlbWJlciAxOSwgMjAxOCcsXHJcbiAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgdGl0bGU6ICdPbiB0aGUgT3RoZXIgU2lkZSBvZiB0aGUgQ29pbjogUGFydCBJSTxiciAvPkFsdGVyaW5nIENyeXB0by1NYXJrZXQgU3RhdGVzIGZyb20gVGVjaG5vbG9neSBBZHZhbmNlbWVudHMgSGVscCBEZXRlcm1pbmUgdGhlIFdpZGUgQ3J5cHRvLUN1cnJlbmN5IFZhcmlhbmNlcyBiZXR3ZWVuIFJpcHBsZSBDb2luLCBCaXRjb2luLCBhbmQgRXRoZXJldW0nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDE2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxNlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxNScsXHJcbiAgICAgIGRpZDogJzA5LTE4LTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciAxOCwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ011c2luZyBCbG9ja2NoYWluJyxcclxuICAgICAgdGl0bGU6ICdPbiB0aGUgT3RoZXIgU2lkZSBvZiB0aGUgQ29pbjogUGFydCBJPGJyIC8+U0VDIENvbmNlcm5zIEFib3V0IHRoZSBUb3AgVGhyZWUgQ3J5cHRvLUN1cnJlbmNpZXMnLFxyXG4gICAgICAgIHBvc3Q6IGJsb2dwb3N0MTUsXHJcbiAgICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTVcclxuICAgICAgfSwge1xyXG4gICAgICBpZDogJzE0JyxcclxuICAgICAgZGlkOiAnMDktMTctMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDE3LCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnU29jaW9sb2d5IFRvbW9ycm93IScsXHJcbiAgICAgIHRpdGxlOiAnRGVuIEhhYWd1ZSBTZWN1cml0eScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTQsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTE0XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEzJyxcclxuICAgICAgZGlkOiAnMDktMTUtMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDE1LTE2LCAyMDE4PGJyIC8+V2Vla2VuZCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ1NvY2lvbG9neSBUb21vcnJvdyEnLFxyXG4gICAgICB0aXRsZTogJ1RoZSBFbmQgb2YgVHJhZmZpYyBKYW1zLCBQYXJ0IElJOiA8YnIgLz5BIENhci1GcmVlIFBhcmlzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxMyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlMTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMTInLFxyXG4gICAgICBkaWQ6ICcwOS0xNC0xOCcsXHJcbiAgICAgIGRhdGU6ICdTZXB0ZW1iZXIgMTQsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdXZWIgRGV2IEFmZmFpcnMnLFxyXG4gICAgICB0aXRsZTogJ1RoZSBFbmQgb2YgVHJhZmZpYyBKYW1zLCBQYXJ0IEk6IDxiciAvPkEgR3JlZW4gTG9zIEFuZ2VsZXMnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDEyLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxMlxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICcxMScsXHJcbiAgICAgIGRpZDogJzA5LTEzLTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciAxMywgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJyAnLFxyXG4gICAgICBjYXQzOiAnICcsXHJcbiAgICAgIHRpdGxlOiAnICcsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTEsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTExXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzEwJyxcclxuICAgICAgZGlkOiAnMDktMTItMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDEyLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnQS5JLk5vdy4nLFxyXG4gICAgICB0aXRsZTogJ0FwcGxlXFwncyBOZXcgQTEyIENoaXAgd2l0aCBBLkkuIE5ldXJhbCBFbmdpbmU6PGJyIC8+IE9vaCBMJmFhY3V0ZTsgTCZhYWN1dGU7IScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0MTAsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTEwXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzknLFxyXG4gICAgICBkaWQ6ICcwOS0xMS0xOCcsXHJcbiAgICAgIGRhdGU6ICdTZXB0ZW1iZXIgMTEsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICcgJyxcclxuICAgICAgdGl0bGU6ICcgJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q5LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU5XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzgnLFxyXG4gICAgICBkaWQ6ICcwOS0xMC0xOCcsXHJcbiAgICAgIGRhdGU6ICdTZXB0ZW1iZXIgMTAsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdXaGVyZSBEaWQgQWxsIHRoZSBDcnlwdG8tQ2FzaCBHbz8gUGFydCBJSTo8YnIgLz5FeHBlY3RhdGlvbnMgb2YgU3BlY3VsYXRpb24nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDgsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZThcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnNycsXHJcbiAgICAgIGRpZDogJzA5LTA4LTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciA4LTksIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnTXVzaW5nIEJsb2NrY2hhaW4nLFxyXG4gICAgICB0aXRsZTogJ1doZXJlIERpZCBBbGwgdGhlIENyeXB0by1DYXNoIEdvPyBQYXJ0IEk6PGJyIC8+V2h5IHRoZSBMb25nIENyYXNoIC4uLicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NyxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlN1xyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc2JyxcclxuICAgICAgZGlkOiAnMDktMDctMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDcsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdRdWFudHVtIERhdGEnLFxyXG4gICAgICB0aXRsZTogJ1JlcG9ydHMgZnJvbSBUZWNoQ3J1bmNoIERpc3J1cHQhIFBhcnQgSUlJPGJyIC8+UXVhbnRhJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3Q2LFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGU2XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBpZDogJzUnLFxyXG4gICAgICBkaWQ6ICcwOS0wNi0xOCcsXHJcbiAgICAgIGRhdGU6ICdTZXB0ZW1iZXIgNiwgMjAxOCcsXHJcbiAgICAgIGF1dGhvcjogJ2J5IFRob21hcyBNYWVzdGFzJyxcclxuICAgICAgY2F0MzogJ0EuSS5Ob3cnLFxyXG4gICAgICB0aXRsZTogJ1JlcG9ydHMgZnJvbSBUZWNoQ3J1bmNoIERpc3J1cHQhIFBhcnQgSUk8YnIgLz5BcnRpZmljaWFsIEludGVsbGlnZW5jZScsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NSxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlNVxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICc0JyxcclxuICAgICAgZGlkOiAnMDktMDUtMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDUsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdNdXNpbmcgQmxvY2tjaGFpbicsXHJcbiAgICAgIHRpdGxlOiAnUmVwb3J0cyBmcm9tIFRlY2hDcnVuY2ggRGlzcnVwdCEgUGFydCBJPGJyIC8+QmxvY2tjaGFpbicsXHJcbiAgICAgIHBvc3Q6IGJsb2dwb3N0NCxcclxuICAgICAgYmxvZ2NpdGU6IGJsb2djaXRlNFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgaWQ6ICczJyxcclxuICAgICAgZGlkOiAnMDktMDQtMTgnLFxyXG4gICAgICBkYXRlOiAnU2VwdGVtYmVyIDQsIDIwMTgnLFxyXG4gICAgICBhdXRob3I6ICdieSBUaG9tYXMgTWFlc3RhcycsXHJcbiAgICAgIGNhdDM6ICdTb2Npb2xvZ3kgVG9tb3Jyb3chJyxcclxuICAgICAgdGl0bGU6ICdUaGUgQ3VtYmVyc29tZSwgTXVsdGlwdXJwb3NlIGFuZCBTb21ldGltZXMgVW5zZWN1cmUgVVJMIC4uLjxiciAvPklzIFRoZXJlIGEgQmV0dGVyIHdheT8nLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDMsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTNcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMicsXHJcbiAgICAgIGRpZDogJzA5LTAzLTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciAzLCAyMDE4JyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICBwb3N0OiBibG9ncG9zdDIsXHJcbiAgICAgIGJsb2djaXRlOiBibG9nY2l0ZTJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIGlkOiAnMScsXHJcbiAgICAgIGRpZDogJzA5LTAxLTE4JyxcclxuICAgICAgZGF0ZTogJ1NlcHRlbWJlciAxLTIsIDIwMTg8YnIgLz5XZWVrZW5kJyxcclxuICAgICAgYXV0aG9yOiAnYnkgVGhvbWFzIE1hZXN0YXMnLFxyXG4gICAgICBjYXQzOiAnV2ViIERldiBBZmZhaXJzJyxcclxuICAgICAgdGl0bGU6ICdNaXN0YWtlbiBpZGVudGl0aWVzJyxcclxuICAgICAgcG9zdDogYmxvZ3Bvc3QxLFxyXG4gICAgICBibG9nY2l0ZTogYmxvZ2NpdGUxXHJcbiAgICB9XHJcblxyXG4gIF07XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCB1cmwubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjYXQgPSBgIFxyXG4gICAgPGRpdiBpZD1cIiR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZcIj4gXHJcbiAgICA8aHIgLz4gIFxyXG4gICAgPGEgaHJlZj1cIiN0b3BcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gIFxyXG4gICAgPGg0IGNsYXNzPVwidGl0bGUgZGFpbHl0ZWNoIGxvbmd0aXRsZVwiPk9VUiBEQUlMWSBURUNIOjwvaDQ+ICBcclxuICAgIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiBcclxuICAgIDxwIGlkPVwiYXV0aG9yXCIgY2xhc3M9XCIgIGF1dGhvclwiPiR7dXJsW2ldLmF1dGhvcn08L3A+ICAgXHJcbiAgICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICAgIDxoNiAgaWQ9XCJ0aXRsZVwiICAgY2xhc3M9XCJkYWlseXRpdGxlIGNoYXB0ZXJudW1iZXJcIj4ke3VybFtpXS50aXRsZX08L2g2PlxyXG4gICAgPGJyIC8+XHJcbiAgICA8ZGl2IGlkPVwicG9zdFwiPiR7dXJsW2ldLnBvc3R9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJibG9nY2l0ZVwiPiR7dXJsW2ldLmJsb2djaXRlfVxyXG4gICAgPC9kaXY+YDtcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFyYWdyYXBoLXNlcFwiKS5pbm5lckhUTUwgKz0gY2F0O1xyXG4gIH1cclxuXHJcbiAgdmFyIGk7XHJcbiAgZm9yIChpID0gMDsgaSA8IHVybC5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGNhdE1vZCA9IGBcclxuICA8ZGl2IGlkPVwibW9kXyR7dXJsW2ldLmRpZH1cIiBjbGFzcz1cImJsb2dEaXZNb2RcIj4gXHJcbiAgPGhyIC8+ICBcclxuICA8YSBocmVmPVwiI3RvcC1tb2RcIj48YnV0dG9uPlRvcDwvYnV0dG9uPjwvYT4gICBcclxuICA8aDQgY2xhc3M9XCJ0aXRsZSBkYWlseXRlY2ggbG9uZ3RpdGxlXCI+T1VSIERBSUxZIFRFQ0g6PC9oND4gIFxyXG4gIDxoNSBpZD1cImNhdDNcIiBjbGFzcz1cIiAgc3ViZGFpbHl0ZWNoXCI+JHt1cmxbaV0uY2F0M308L2g1PiAgXHJcbiAgPHAgaWQ9XCJhdXRob3JcIiBjbGFzcz1cIiAgYXV0aG9yXCI+JHt1cmxbaV0uYXV0aG9yfTwvcD4gICBcclxuICA8aDYgIGlkPVwiZGF0ZVwiIGNsYXNzPVwiICBjaGFwdGVybnVtYmVyXCI+JHt1cmxbaV0uZGF0ZX08L2g2PiAgICBcclxuICA8aDYgIGlkPVwidGl0bGVcIiAgIGNsYXNzPVwiZGFpbHl0aXRsZSBjaGEtcHRlcm51bWJlclwiPiR7dXJsW2ldLnRpdGxlfTwvaDY+XHJcbiAgPGJyIC8+XHJcbiAgPGRpdiBpZD1cInBvc3RcIj4ke3VybFtpXS5wb3N0fTwvZGl2PlxyXG4gIDwvZGl2PlxyXG4gPGRpdiBpZD1cImJsb2djaXRlXCI+JHt1cmxbaV0uYmxvZ2NpdGV9XHJcbiA8L2Rpdj5gO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwYXJhZ3JhcGgtc2VwLW1vZFwiKS5pbm5lckhUTUwgKz0gY2F0TW9kO1xyXG4gIH1cclxuXHJcbiAgY29uc29sZS5sb2coJ2Jsb2dnZXItc2VwJyk7IFxyXG4gIC8vIGNvbnNvbGUubG9nKGFuZ3VsYXIudG9Kc29uKHVybCkpO1xyXG59O1xyXG5ibG9nZ2VyU2VwKCk7IiwidmFyIGlucHV0U3RyaW5nID0gXCJcIjtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVN0cmluZyh2YWx1ZSkgeyBcclxuICAgIGlucHV0U3RyaW5nICs9IHZhbHVlOyBcclxuICAgIGRvY3VtZW50LmZvcm1zWzBdLmlucHV0LnZhbHVlID0gaW5wdXRTdHJpbmc7IFxyXG59XHJcblxyXG52YXIgaW5uZXJmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYWxjXCIpO1xyXG4vLyBjYWxjdWxhdG9yIHN0eWxlXHJcbmlubmVyZm9ybS5zdHlsZS5ib3JkZXIgPSAnc29saWQgNXB4IGdyZXknO1xyXG5pbm5lcmZvcm0uc3R5bGUubWFyZ2luID0gJzAgMTAlJ1xyXG5pbm5lcmZvcm0uc3R5bGUucGFkZGluZyA9ICc1JSdcclxuXHJcbmlubmVyZm9ybS5pbm5lckhUTUwgPSBgXHJcbiAgICA8Zm9ybSBpZD1cImlubmVyZm9ybVwiIGFjdGlvbj1cIlwiPiBcclxuICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cInNldmVuXCIgaWQ9XCJidVwiIHZhbHVlPVwiN1wiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJzcnKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwiZWlnaHRcIiBpZD1cImJ1XCIgdmFsdWU9XCI4XCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnOCcpXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJuaW5lXCIgaWQ9XCJidVwiIHZhbHVlPVwiOVwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJzknKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwiZGl2XCIgaWQ9XCJidVwiIHZhbHVlPVwiL1wiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJy8nKVwiIC8+XHJcbiAgICA8YnIgLz5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJmb3VyXCIgaWQ9XCJidVwiIHZhbHVlPVwiNFwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJzQnKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwiZml2ZVwiIGlkPVwiYnVcIiB2YWx1ZT1cIjVcIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKCc1JylcIiAvPiBcclxuICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cInNpeFwiIGlkPVwiYnVcIiB2YWx1ZT1cIjZcIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKCc2JylcIiAvPiAgXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJtdWx0XCIgaWQ9XCJidVwiIHZhbHVlPVwiKlwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJyonKVwiIC8+XHJcbiAgICA8YnIgLz5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJvbmVcIiBpZD1cImJ1XCIgdmFsdWU9XCIxXCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnMScpXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJ0d29cIiBpZD1cImJ1XCIgdmFsdWU9XCIyXCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnMicpXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJ0aHJlZVwiIGlkPVwiYnVcIiB2YWx1ZT1cIjNcIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKCczJylcIiAvPiBcclxuICAgIDxpbnB1dCB0eXBlPVwiYnV0dG9uXCIgbmFtZT1cInBsdXNcIiBpZD1cImJ1XCIgdmFsdWU9XCIrXCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnKycpXCIgLz5cclxuICAgICA8YnIgLz5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJ6ZXJvXCIgaWQ9XCJidVwiIHZhbHVlPVwiMFwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJzAnKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwiZG90XCIgaWQ9XCJidVwiIHZhbHVlPVwiLlwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJy4nKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwiY2xlYXJcIiBpZD1cImJ1XCIgdmFsdWU9XCJDXCIgb25jbGljaz1cImRvY3VtZW50LmZvcm1zWzBdLmlucHV0LnZhbHVlPScnO2lucHV0U3RyaW5nPScnXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJtaW51c1wiIGlkPVwiYnVcIiB2YWx1ZT1cIi1cIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKCctJylcIiAvPlxyXG4gICAgPGJyIC8+XHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwib3BlbnBhcmVudGhcIiBpZD1cImJ1XCIgdmFsdWU9XCIoXCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnKCcpXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJjbG9zZXBhcmVudGhcIiBpZD1cImJ1XCIgdmFsdWU9XCIpXCIgb25jbGljaz1cInVwZGF0ZVN0cmluZygnKScpXCIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJwb3dlclwiIGlkPVwiYnVcIiB2YWx1ZT1cIl5cIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKCdeJylcIiAvPiAgXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJtb2R1bHVzXCIgaWQ9XCJidVwiIHZhbHVlPVwiJVwiIG9uY2xpY2s9XCJ1cGRhdGVTdHJpbmcoJyUnKVwiIC8+XHJcbiAgIFxyXG4gICAgPGJyIC8+XHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6Ymx1ZTtjb2xvcjp3aGl0ZTtcIiBuYW1lPVwiY2FsY1wiIGlkPVwiYnVcIiB2YWx1ZT1cIj1cIiBvbmNsaWNrPVwiZG9jdW1lbnQuZm9ybXNbMF0uaW5wdXQudmFsdWUgPSBldmFsKGlucHV0U3RyaW5nKTsgaW5wdXRTdHJpbmc9JydcIlxyXG4gICAgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJtZW1cIiBpZD1cImJ1XCIgdmFsdWU9XCJNICtcIiBvbmNsaWNrPVwiZG9jdW1lbnQuZm9ybXNbMF0uc3RvcmVkVmFsdWUudmFsdWUgPSBwYXJzZUludChkb2N1bWVudC5mb3Jtc1swXS5zdG9yZWRWYWx1ZS52YWx1ZSkgKyBwYXJzZUludChkb2N1bWVudC5mb3Jtc1swXS5pbnB1dC52YWx1ZSlcIlxyXG4gICAgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG5hbWU9XCJyZWNhbGxcIiBpZD1cImJ1XCIgdmFsdWU9XCJNUkNcIiBvbmNsaWNrPVwidXBkYXRlU3RyaW5nKGRvY3VtZW50LmZvcm1zWzBdLnN0b3JlZFZhbHVlLnZhbHVlKVwiIC8+IFxyXG4gICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiBuYW1lPVwibWVtQ2xlYXJcIiBpZD1cImJ1XCIgdmFsdWU9XCJNQ1wiIG9uY2xpY2s9XCJkb2N1bWVudC5mb3Jtc1swXS5zdG9yZWRWYWx1ZS52YWx1ZT0wXCIgLz48YnIgLz4gXHJcbiAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJzdG9yZWRWYWx1ZVwiIHZhbHVlPVwiMFwiIC8+IFxyXG4gICAgPGlucHV0IGlkPVwid2luZG93XCIgdHlwZT1cInRleHRcIiBzaXplPVwiNDBcIiBuYW1lPVwiaW5wdXRcIiAvPlxyXG4gICAgIFxyXG4gICAgPC9mb3JtPiBcclxuICAgIDwhLS0gQ2FsY3VsYXRvciBEZXV4IC0tPlxyXG4gICAgPGRpdiBpZD1cImlubmVyZm9ybTJcIj48L2Rpdj5cclxuICAgIGA7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgIC8vIENBTENVTEFUT1IyIC8vXHJcbi8qKlxyXG4gKiBDYWxjdWxhdG9yIGZ1bmN0aW9uIGNvbnN0cnVjdG9yLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIENhbGN1bGF0b3IoKSB7XHJcbiAgdGhpcy50b3RhbCA9IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHZhbHVlIHRvIGN1cnJlbnQgdG90YWwuIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuQ2FsY3VsYXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG51bWJlcikge1xyXG4gIHJldHVybiB0aGlzLnRvdGFsICs9IG51bWJlcjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbnVtYmVyIGZyb20gY3VycmVudCB0b3RhbC4gXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcclxuICogQHJldHVybnMgeyp9XHJcbiAqL1xyXG5DYWxjdWxhdG9yLnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIChudW1iZXIpIHtcclxuICByZXR1cm4gdGhpcy50b3RhbCAtPSBudW1iZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB2YWx1ZSB0byBjdXJyZW50IHRvdGFsLiBcclxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlclxyXG4gKiBAcmV0dXJucyB7Kn1cclxuICovXHJcbkNhbGN1bGF0b3IucHJvdG90eXBlLm11bHRpcGx5ID0gZnVuY3Rpb24gKG51bWJlcikge1xyXG4gIHJldHVybiB0aGlzLnRvdGFsICo9IG51bWJlcjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVzIHZhbHVlIHRvIGN1cnJlbnQgdG90YWwuIFxyXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyXHJcbiAqIEByZXR1cm5zIHsqfVxyXG4gKi9cclxuXHJcbkNhbGN1bGF0b3IucHJvdG90eXBlLmRpdmlkZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcclxuICBpZiAobnVtYmVyID09PSAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkaXZpZGUgYnkgemVybycpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRoaXMudG90YWwgLz0gbnVtYmVyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1vZHVsdXMgdmFsdWUgdG8gY3VycmVudC4gXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcclxuICogQHJldHVybnMgeyV9XHJcbiAqL1xyXG5DYWxjdWxhdG9yLnByb3RvdHlwZS5tb2R1bHVzID0gZnVuY3Rpb24gKG51bWJlcikge1xyXG4gIHJldHVybiB0aGlzLnRvdGFsICUgbnVtYmVyO1xyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgIC8vIFJFU1VMVFMgLy9cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHJlc3VsdCBmb3IgYSBzaW1wbGUgbWF0aGVtYXRpY2FsIGV4cHJlc3Npb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dFZhbHVlXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGUoaW5wdXRWYWx1ZSkge1xyXG4gIGNvbnN0IGV4cHJlc3Npb24gPSAvXFwrfFxcLXxcXCp8XFwvfFxcJS87XHJcbiAgY29uc3QgbnVtYmVycyA9IGlucHV0VmFsdWUuc3BsaXQoZXhwcmVzc2lvbik7XHJcblxyXG4gIGNvbnN0IG51bWJlckEgPSBwYXJzZUludChudW1iZXJzWzBdKTtcclxuICBjb25zdCBudW1iZXJCID0gcGFyc2VJbnQobnVtYmVyc1sxXSk7XHJcblxyXG4gIGNvbnN0IG9wZXJhdGlvbiA9IGlucHV0VmFsdWUubWF0Y2goZXhwcmVzc2lvbik7XHJcblxyXG4gIGlmIChOdW1iZXIuaXNOYU4obnVtYmVyQSkgfHwgTnVtYmVyLmlzTmFOKG51bWJlckIpIHx8IG9wZXJhdGlvbiA9PT0gbnVsbCkge1xyXG4gICAgdXBkYXRlUmVzdWx0KCdFeHByZXNzaW9uIG5vdCByZWNvZ25pemVkOiBtdXN0IGhhdmUgMiBudW1zICYgYW4gb3BlcmF0b3InKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNhbGN1bGF0b3IgPSBuZXcgQ2FsY3VsYXRvcigpO1xyXG4gIGNhbGN1bGF0b3IuYWRkKG51bWJlckEpO1xyXG5cclxuICBsZXQgcmVzdWx0O1xyXG4gIHN3aXRjaChvcGVyYXRpb25bMF0pIHtcclxuICAgIGNhc2UgJysnOlxyXG4gICAgICByZXN1bHQgPSBjYWxjdWxhdG9yLmFkZChudW1iZXJCKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICctJzpcclxuICAgICAgcmVzdWx0ID0gY2FsY3VsYXRvci5zdWJ0cmFjdChudW1iZXJCKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICcqJzpcclxuICAgICAgcmVzdWx0ID0gY2FsY3VsYXRvci5tdWx0aXBseShudW1iZXJCKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICcvJzpcclxuICAgICAgcmVzdWx0ID0gY2FsY3VsYXRvci5kaXZpZGUobnVtYmVyQik7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnJSc6XHJcbiAgICAgIHJlc3VsdCA9IGNhbGN1bGF0b3IubW9kdWx1cyhudW1iZXJCKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXN1bHQgPSAnT3BlcmF0aW9uIG5vdCByZWNvZ25pemVkOiBtdXN0IGJlICssLSwqLC8sJSc7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVSZXN1bHQocmVzdWx0KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFVwZGF0ZXMgcmVzdWx0IGluIERPTSBlbGVtZW50LlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVzdWx0XHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVSZXN1bHQocmVzdWx0KSB7XHJcbiAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXN1bHQtY2FsY3VsYXRvcicpO1xyXG5cclxuICBpZiAoZWxlbWVudCkge1xyXG4gICAgZWxlbWVudC5pbm5lclRleHQgPSByZXN1bHQ7XHJcbiAgfVxyXG59XHJcblxyXG5cclxudmFyIGlubmVyZm9ybTIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2lubmVyZm9ybTJcIik7XHJcbmlubmVyZm9ybTIuaW5uZXJIVE1MID0gYCBcclxuPGhyPlxyXG48ZGl2PlxyXG48c3R5bGU+XHJcbi50aXRsZS1jYWxjdWxhdG9yLCBoNCB7XHJcbiAgY29sb3I6Z29sZDsgXHJcbn1cclxuaW5wdXQuaW5wdXQge1xyXG4gIG1heC13aWR0aDo5MCU7XHJcbn1cclxuc3BhbiNyZXN1bHQtY2FsY3VsYXRvciB7XHJcbiAgYm9yZGVyOmluc2V0IDFweCB3aGl0ZTtcclxuICBtaW4td2lkdGg6MTAwcHg7XHJcbiAgcGFkZGluZzozcHggNXB4O1xyXG4gIGNvbG9yOmdvbGQ7XHJcbn1cclxuPC9zdHlsZT5cclxuPGg0PkNhbGN1bGF0b3IgRGV1eDwvaDQ+XHJcbiA8aW5wdXRcclxuICAgIGNsYXNzPVwiaW5wdXRcIlxyXG4gICAgdHlwZT1cInRleHRcIlxyXG4gICAgdGl0bGU9XCJjYWxjdWxhdG9yXCJcclxuICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgb3BlcmF0aW9uXCJcclxuICAgIHZhbHVlPVwiXCJcclxuICAgIG9uY2hhbmdlPVwiY2FsY3VsYXRlKHRoaXMudmFsdWUpXCJcclxuICAvPlxyXG5cclxuICA8ZGl2IGNsYXNzPVwicmVzdWx0LWNvbnRhaW5lclwiPlxyXG4gICAgPGRpdiBjbGFzcz1cInRpdGxlLWNhbGN1bGF0b3JcIj5SZXN1bHQ8L2Rpdj5cclxuICAgIDxzcGFuIGlkPVwicmVzdWx0LWNhbGN1bGF0b3JcIj48L3NwYW4+XHJcbiAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbiAgICBgOyIsIi8vIGh0dHBzOi8vZDNqcy5vcmcgVmVyc2lvbiA0LjIuMS4gQ29weXJpZ2h0IDIwMTYgTWlrZSBCb3N0b2NrLlxyXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xyXG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxyXG4gIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxyXG4gIChmYWN0b3J5KChnbG9iYWwuZDMgPSBnbG9iYWwuZDMgfHwge30pKSk7XHJcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXIgdmVyc2lvbiA9IFwiNC4yLjFcIjtcclxuXHJcbiAgZnVuY3Rpb24gYXNjZW5kaW5nKGEsIGIpIHtcclxuICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJpc2VjdG9yKGNvbXBhcmUpIHtcclxuICAgIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcclxuICAgICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xyXG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XHJcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcclxuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XHJcbiAgICAgICAgICBlbHNlIGhpID0gbWlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbG87XHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcclxuICAgICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xyXG4gICAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChsbyA8IGhpKSB7XHJcbiAgICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcclxuICAgICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcclxuICAgICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbG87XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XHJcbiAgICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XHJcbiAgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xyXG4gIHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XHJcblxyXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmcoYSwgYikge1xyXG4gICAgcmV0dXJuIGIgPCBhID8gLTEgOiBiID4gYSA/IDEgOiBiID49IGEgPyAwIDogTmFOO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbnVtYmVyKHgpIHtcclxuICAgIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB2YXJpYW5jZShhcnJheSwgZikge1xyXG4gICAgdmFyIG4gPSBhcnJheS5sZW5ndGgsXHJcbiAgICAgICAgbSA9IDAsXHJcbiAgICAgICAgYSxcclxuICAgICAgICBkLFxyXG4gICAgICAgIHMgPSAwLFxyXG4gICAgICAgIGkgPSAtMSxcclxuICAgICAgICBqID0gMDtcclxuXHJcbiAgICBpZiAoZiA9PSBudWxsKSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIHtcclxuICAgICAgICAgIGQgPSBhIC0gbTtcclxuICAgICAgICAgIG0gKz0gZCAvICsrajtcclxuICAgICAgICAgIHMgKz0gZCAqIChhIC0gbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgaWYgKCFpc05hTihhID0gbnVtYmVyKGYoYXJyYXlbaV0sIGksIGFycmF5KSkpKSB7XHJcbiAgICAgICAgICBkID0gYSAtIG07XHJcbiAgICAgICAgICBtICs9IGQgLyArK2o7XHJcbiAgICAgICAgICBzICs9IGQgKiAoYSAtIG0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChqID4gMSkgcmV0dXJuIHMgLyAoaiAtIDEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGV2aWF0aW9uKGFycmF5LCBmKSB7XHJcbiAgICB2YXIgdiA9IHZhcmlhbmNlKGFycmF5LCBmKTtcclxuICAgIHJldHVybiB2ID8gTWF0aC5zcXJ0KHYpIDogdjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGV4dGVudChhcnJheSwgZikge1xyXG4gICAgdmFyIGkgPSAtMSxcclxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxyXG4gICAgICAgIGEsXHJcbiAgICAgICAgYixcclxuICAgICAgICBjO1xyXG5cclxuICAgIGlmIChmID09IG51bGwpIHtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYyA9IGI7IGJyZWFrOyB9XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmIChhID4gYikgYSA9IGI7XHJcbiAgICAgICAgaWYgKGMgPCBiKSBjID0gYjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGVsc2Uge1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYyA9IGI7IGJyZWFrOyB9XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwpIHtcclxuICAgICAgICBpZiAoYSA+IGIpIGEgPSBiO1xyXG4gICAgICAgIGlmIChjIDwgYikgYyA9IGI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2EsIGNdO1xyXG4gIH1cclxuXHJcbiAgdmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xyXG5cclxuICB2YXIgc2xpY2UgPSBhcnJheS5zbGljZTtcclxuICB2YXIgbWFwID0gYXJyYXkubWFwO1xyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCh4KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIHN0b3AsIHN0ZXApIHtcclxuICAgIHN0YXJ0ID0gK3N0YXJ0LCBzdG9wID0gK3N0b3AsIHN0ZXAgPSAobiA9IGFyZ3VtZW50cy5sZW5ndGgpIDwgMiA/IChzdG9wID0gc3RhcnQsIHN0YXJ0ID0gMCwgMSkgOiBuIDwgMyA/IDEgOiArc3RlcDtcclxuXHJcbiAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxyXG4gICAgICAgIHJhbmdlID0gbmV3IEFycmF5KG4pO1xyXG5cclxuICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgIHJhbmdlW2ldID0gc3RhcnQgKyBpICogc3RlcDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmFuZ2U7XHJcbiAgfVxyXG5cclxuICB2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKTtcclxuICB2YXIgZTUgPSBNYXRoLnNxcnQoMTApO1xyXG4gIHZhciBlMiA9IE1hdGguc3FydCgyKTtcclxuICBmdW5jdGlvbiB0aWNrcyhzdGFydCwgc3RvcCwgY291bnQpIHtcclxuICAgIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KTtcclxuICAgIHJldHVybiByYW5nZShcclxuICAgICAgTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCkgKiBzdGVwLFxyXG4gICAgICBNYXRoLmZsb29yKHN0b3AgLyBzdGVwKSAqIHN0ZXAgKyBzdGVwIC8gMiwgLy8gaW5jbHVzaXZlXHJcbiAgICAgIHN0ZXBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcclxuICAgIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXHJcbiAgICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcclxuICAgICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XHJcbiAgICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcclxuICAgIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xyXG4gICAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XHJcbiAgICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdHVyZ2VzKHZhbHVlcykge1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoaXN0b2dyYW0oKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcclxuICAgICAgICBkb21haW4gPSBleHRlbnQsXHJcbiAgICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcclxuXHJcbiAgICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xyXG4gICAgICB2YXIgaSxcclxuICAgICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgIHgsXHJcbiAgICAgICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobik7XHJcblxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgdmFsdWVzW2ldID0gdmFsdWUoZGF0YVtpXSwgaSwgZGF0YSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxyXG4gICAgICAgICAgeDAgPSB4elswXSxcclxuICAgICAgICAgIHgxID0geHpbMV0sXHJcbiAgICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XHJcblxyXG4gICAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB0eiA9IHRpY2tzKHgwLCB4MSwgdHopO1xyXG5cclxuICAgICAgLy8gUmVtb3ZlIGFueSB0aHJlc2hvbGRzIG91dHNpZGUgdGhlIGRvbWFpbi5cclxuICAgICAgdmFyIG0gPSB0ei5sZW5ndGg7XHJcbiAgICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xyXG4gICAgICB3aGlsZSAodHpbbSAtIDFdID49IHgxKSB0ei5wb3AoKSwgLS1tO1xyXG5cclxuICAgICAgdmFyIGJpbnMgPSBuZXcgQXJyYXkobSArIDEpLFxyXG4gICAgICAgICAgYmluO1xyXG5cclxuICAgICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IG07ICsraSkge1xyXG4gICAgICAgIGJpbiA9IGJpbnNbaV0gPSBbXTtcclxuICAgICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xyXG4gICAgICAgIGJpbi54MSA9IGkgPCBtID8gdHpbaV0gOiB4MTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQXNzaWduIGRhdGEgdG8gYmlucyBieSB2YWx1ZSwgaWdub3JpbmcgYW55IG91dHNpZGUgdGhlIGRvbWFpbi5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIHggPSB2YWx1ZXNbaV07XHJcbiAgICAgICAgaWYgKHgwIDw9IHggJiYgeCA8PSB4MSkge1xyXG4gICAgICAgICAgYmluc1tiaXNlY3RSaWdodCh0eiwgeCwgMCwgbSldLnB1c2goZGF0YVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYmlucztcclxuICAgIH1cclxuXHJcbiAgICBoaXN0b2dyYW0udmFsdWUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBoaXN0b2dyYW0uZG9tYWluID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFtfWzBdLCBfWzFdXSksIGhpc3RvZ3JhbSkgOiBkb21haW47XHJcbiAgICB9O1xyXG5cclxuICAgIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBoaXN0b2dyYW0pIDogdGhyZXNob2xkO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gaGlzdG9ncmFtO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGhyZXNob2xkKGFycmF5LCBwLCBmKSB7XHJcbiAgICBpZiAoZiA9PSBudWxsKSBmID0gbnVtYmVyO1xyXG4gICAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcclxuICAgIGlmICgocCA9ICtwKSA8PSAwIHx8IG4gPCAyKSByZXR1cm4gK2YoYXJyYXlbMF0sIDAsIGFycmF5KTtcclxuICAgIGlmIChwID49IDEpIHJldHVybiArZihhcnJheVtuIC0gMV0sIG4gLSAxLCBhcnJheSk7XHJcbiAgICB2YXIgbixcclxuICAgICAgICBoID0gKG4gLSAxKSAqIHAsXHJcbiAgICAgICAgaSA9IE1hdGguZmxvb3IoaCksXHJcbiAgICAgICAgYSA9ICtmKGFycmF5W2ldLCBpLCBhcnJheSksXHJcbiAgICAgICAgYiA9ICtmKGFycmF5W2kgKyAxXSwgaSArIDEsIGFycmF5KTtcclxuICAgIHJldHVybiBhICsgKGIgLSBhKSAqIChoIC0gaSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmVlZG1hbkRpYWNvbmlzKHZhbHVlcywgbWluLCBtYXgpIHtcclxuICAgIHZhbHVlcyA9IG1hcC5jYWxsKHZhbHVlcywgbnVtYmVyKS5zb3J0KGFzY2VuZGluZyk7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAodGhyZXNob2xkKHZhbHVlcywgMC43NSkgLSB0aHJlc2hvbGQodmFsdWVzLCAwLjI1KSkgKiBNYXRoLnBvdyh2YWx1ZXMubGVuZ3RoLCAtMSAvIDMpKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzY290dCh2YWx1ZXMsIG1pbiwgbWF4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDMuNSAqIGRldmlhdGlvbih2YWx1ZXMpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWF4KGFycmF5LCBmKSB7XHJcbiAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXHJcbiAgICAgICAgYSxcclxuICAgICAgICBiO1xyXG5cclxuICAgIGlmIChmID09IG51bGwpIHtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPj0gYikgeyBhID0gYjsgYnJlYWs7IH1cclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGFycmF5W2ldKSAhPSBudWxsICYmIGIgPiBhKSBhID0gYjtcclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgoYiA9IGYoYXJyYXlbaV0sIGksIGFycmF5KSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+IGEpIGEgPSBiO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVhbihhcnJheSwgZikge1xyXG4gICAgdmFyIHMgPSAwLFxyXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXHJcbiAgICAgICAgYSxcclxuICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgaiA9IG47XHJcblxyXG4gICAgaWYgKGYgPT0gbnVsbCkge1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFpc05hTihhID0gbnVtYmVyKGFycmF5W2ldKSkpIHMgKz0gYTsgZWxzZSAtLWo7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIHMgKz0gYTsgZWxzZSAtLWo7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGopIHJldHVybiBzIC8gajtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1lZGlhbihhcnJheSwgZikge1xyXG4gICAgdmFyIG51bWJlcnMgPSBbXSxcclxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxyXG4gICAgICAgIGEsXHJcbiAgICAgICAgaSA9IC0xO1xyXG5cclxuICAgIGlmIChmID09IG51bGwpIHtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghaXNOYU4oYSA9IG51bWJlcihhcnJheVtpXSkpKSBudW1iZXJzLnB1c2goYSk7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWlzTmFOKGEgPSBudW1iZXIoZihhcnJheVtpXSwgaSwgYXJyYXkpKSkpIG51bWJlcnMucHVzaChhKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhyZXNob2xkKG51bWJlcnMuc29ydChhc2NlbmRpbmcpLCAwLjUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVyZ2UoYXJyYXlzKSB7XHJcbiAgICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXHJcbiAgICAgICAgbSxcclxuICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgaiA9IDAsXHJcbiAgICAgICAgbWVyZ2VkLFxyXG4gICAgICAgIGFycmF5O1xyXG5cclxuICAgIHdoaWxlICgrK2kgPCBuKSBqICs9IGFycmF5c1tpXS5sZW5ndGg7XHJcbiAgICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XHJcblxyXG4gICAgd2hpbGUgKC0tbiA+PSAwKSB7XHJcbiAgICAgIGFycmF5ID0gYXJyYXlzW25dO1xyXG4gICAgICBtID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoLS1tID49IDApIHtcclxuICAgICAgICBtZXJnZWRbLS1qXSA9IGFycmF5W21dO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1lcmdlZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1pbihhcnJheSwgZikge1xyXG4gICAgdmFyIGkgPSAtMSxcclxuICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxyXG4gICAgICAgIGEsXHJcbiAgICAgICAgYjtcclxuXHJcbiAgICBpZiAoZiA9PSBudWxsKSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBiID49IGIpIHsgYSA9IGI7IGJyZWFrOyB9XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBhcnJheVtpXSkgIT0gbnVsbCAmJiBhID4gYikgYSA9IGI7XHJcbiAgICB9XHJcblxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKGIgPSBmKGFycmF5W2ldLCBpLCBhcnJheSkpICE9IG51bGwgJiYgYiA+PSBiKSB7IGEgPSBiOyBicmVhazsgfVxyXG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKChiID0gZihhcnJheVtpXSwgaSwgYXJyYXkpKSAhPSBudWxsICYmIGEgPiBiKSBhID0gYjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhaXJzKGFycmF5KSB7XHJcbiAgICB2YXIgaSA9IDAsIG4gPSBhcnJheS5sZW5ndGggLSAxLCBwID0gYXJyYXlbMF0sIHBhaXJzID0gbmV3IEFycmF5KG4gPCAwID8gMCA6IG4pO1xyXG4gICAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IFtwLCBwID0gYXJyYXlbKytpXV07XHJcbiAgICByZXR1cm4gcGFpcnM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwZXJtdXRlKGFycmF5LCBpbmRleGVzKSB7XHJcbiAgICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcclxuICAgIHdoaWxlIChpLS0pIHBlcm11dGVzW2ldID0gYXJyYXlbaW5kZXhlc1tpXV07XHJcbiAgICByZXR1cm4gcGVybXV0ZXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzY2FuKGFycmF5LCBjb21wYXJlKSB7XHJcbiAgICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xyXG4gICAgdmFyIGkgPSAwLFxyXG4gICAgICAgIG4sXHJcbiAgICAgICAgaiA9IDAsXHJcbiAgICAgICAgeGksXHJcbiAgICAgICAgeGogPSBhcnJheVtqXTtcclxuXHJcbiAgICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XHJcblxyXG4gICAgd2hpbGUgKCsraSA8IG4pIGlmIChjb21wYXJlKHhpID0gYXJyYXlbaV0sIHhqKSA8IDAgfHwgY29tcGFyZSh4aiwgeGopICE9PSAwKSB4aiA9IHhpLCBqID0gaTtcclxuXHJcbiAgICBpZiAoY29tcGFyZSh4aiwgeGopID09PSAwKSByZXR1cm4gajtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXksIGkwLCBpMSkge1xyXG4gICAgdmFyIG0gPSAoaTEgPT0gbnVsbCA/IGFycmF5Lmxlbmd0aCA6IGkxKSAtIChpMCA9IGkwID09IG51bGwgPyAwIDogK2kwKSxcclxuICAgICAgICB0LFxyXG4gICAgICAgIGk7XHJcblxyXG4gICAgd2hpbGUgKG0pIHtcclxuICAgICAgaSA9IE1hdGgucmFuZG9tKCkgKiBtLS0gfCAwO1xyXG4gICAgICB0ID0gYXJyYXlbbSArIGkwXTtcclxuICAgICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XHJcbiAgICAgIGFycmF5W2kgKyBpMF0gPSB0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN1bShhcnJheSwgZikge1xyXG4gICAgdmFyIHMgPSAwLFxyXG4gICAgICAgIG4gPSBhcnJheS5sZW5ndGgsXHJcbiAgICAgICAgYSxcclxuICAgICAgICBpID0gLTE7XHJcblxyXG4gICAgaWYgKGYgPT0gbnVsbCkge1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKGEgPSArYXJyYXlbaV0pIHMgKz0gYTsgLy8gTm90ZTogemVybyBhbmQgbnVsbCBhcmUgZXF1aXZhbGVudC5cclxuICAgIH1cclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmIChhID0gK2YoYXJyYXlbaV0sIGksIGFycmF5KSkgcyArPSBhO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNwb3NlKG1hdHJpeCkge1xyXG4gICAgaWYgKCEobiA9IG1hdHJpeC5sZW5ndGgpKSByZXR1cm4gW107XHJcbiAgICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XHJcbiAgICAgIGZvciAodmFyIGogPSAtMSwgbiwgcm93ID0gdHJhbnNwb3NlW2ldID0gbmV3IEFycmF5KG4pOyArK2ogPCBuOykge1xyXG4gICAgICAgIHJvd1tqXSA9IG1hdHJpeFtqXVtpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyYW5zcG9zZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlbmd0aChkKSB7XHJcbiAgICByZXR1cm4gZC5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB6aXAoKSB7XHJcbiAgICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XHJcbiAgfVxyXG5cclxuICB2YXIgcHJlZml4ID0gXCIkXCI7XHJcblxyXG4gIGZ1bmN0aW9uIE1hcCgpIHt9XHJcblxyXG4gIE1hcC5wcm90b3R5cGUgPSBtYXAkMS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogTWFwLFxyXG4gICAgaGFzOiBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcclxuICAgICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgIHZhciBwcm9wZXJ0eSA9IHByZWZpeCArIGtleTtcclxuICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgZGVsZXRlIHRoaXNbcHJvcGVydHldO1xyXG4gICAgfSxcclxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcclxuICAgIH0sXHJcbiAgICBrZXlzOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGtleXMgPSBbXTtcclxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XHJcbiAgICAgIHJldHVybiBrZXlzO1xyXG4gICAgfSxcclxuICAgIHZhbHVlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcclxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHZhbHVlcy5wdXNoKHRoaXNbcHJvcGVydHldKTtcclxuICAgICAgcmV0dXJuIHZhbHVlcztcclxuICAgIH0sXHJcbiAgICBlbnRyaWVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGVudHJpZXMgPSBbXTtcclxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGVudHJpZXMucHVzaCh7a2V5OiBwcm9wZXJ0eS5zbGljZSgxKSwgdmFsdWU6IHRoaXNbcHJvcGVydHldfSk7XHJcbiAgICAgIHJldHVybiBlbnRyaWVzO1xyXG4gICAgfSxcclxuICAgIHNpemU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2l6ZSA9IDA7XHJcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XHJcbiAgICAgIHJldHVybiBzaXplO1xyXG4gICAgfSxcclxuICAgIGVtcHR5OiBmdW5jdGlvbigpIHtcclxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIHJldHVybiBmYWxzZTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgZWFjaDogZnVuY3Rpb24oZikge1xyXG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZih0aGlzW3Byb3BlcnR5XSwgcHJvcGVydHkuc2xpY2UoMSksIHRoaXMpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1hcCQxKG9iamVjdCwgZikge1xyXG4gICAgdmFyIG1hcCA9IG5ldyBNYXA7XHJcblxyXG4gICAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBNYXApIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHsgbWFwLnNldChrZXksIHZhbHVlKTsgfSk7XHJcblxyXG4gICAgLy8gSW5kZXggYXJyYXkgYnkgbnVtZXJpYyBpbmRleCBvciBzcGVjaWZpZWQga2V5IGZ1bmN0aW9uLlxyXG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XHJcbiAgICAgIHZhciBpID0gLTEsXHJcbiAgICAgICAgICBuID0gb2JqZWN0Lmxlbmd0aCxcclxuICAgICAgICAgIG87XHJcblxyXG4gICAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xyXG4gICAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBtYXAuc2V0KGYobyA9IG9iamVjdFtpXSwgaSwgb2JqZWN0KSwgbyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29udmVydCBvYmplY3QgdG8gbWFwLlxyXG4gICAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xyXG5cclxuICAgIHJldHVybiBtYXA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuZXN0KCkge1xyXG4gICAgdmFyIGtleXMgPSBbXSxcclxuICAgICAgICBzb3J0S2V5cyA9IFtdLFxyXG4gICAgICAgIHNvcnRWYWx1ZXMsXHJcbiAgICAgICAgcm9sbHVwLFxyXG4gICAgICAgIG5lc3Q7XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbHkoYXJyYXksIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkge1xyXG4gICAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHJldHVybiByb2xsdXAgIT0gbnVsbFxyXG4gICAgICAgICAgPyByb2xsdXAoYXJyYXkpIDogKHNvcnRWYWx1ZXMgIT0gbnVsbFxyXG4gICAgICAgICAgPyBhcnJheS5zb3J0KHNvcnRWYWx1ZXMpXHJcbiAgICAgICAgICA6IGFycmF5KTtcclxuXHJcbiAgICAgIHZhciBpID0gLTEsXHJcbiAgICAgICAgICBuID0gYXJyYXkubGVuZ3RoLFxyXG4gICAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcclxuICAgICAgICAgIGtleVZhbHVlLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCQxKCksXHJcbiAgICAgICAgICB2YWx1ZXMsXHJcbiAgICAgICAgICByZXN1bHQgPSBjcmVhdGVSZXN1bHQoKTtcclxuXHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlcyA9IHZhbHVlc0J5S2V5LmdldChrZXlWYWx1ZSA9IGtleSh2YWx1ZSA9IGFycmF5W2ldKSArIFwiXCIpKSB7XHJcbiAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhbHVlc0J5S2V5LnNldChrZXlWYWx1ZSwgW3ZhbHVlXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YWx1ZXNCeUtleS5lYWNoKGZ1bmN0aW9uKHZhbHVlcywga2V5KSB7XHJcbiAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwga2V5LCBhcHBseSh2YWx1ZXMsIGRlcHRoLCBjcmVhdGVSZXN1bHQsIHNldFJlc3VsdCkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZW50cmllcyhtYXAsIGRlcHRoKSB7XHJcbiAgICAgIGlmICgrK2RlcHRoID4ga2V5cy5sZW5ndGgpIHJldHVybiBtYXA7XHJcbiAgICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XHJcbiAgICAgIGlmIChyb2xsdXAgIT0gbnVsbCAmJiBkZXB0aCA+PSBrZXlzLmxlbmd0aCkgYXJyYXkgPSBtYXAuZW50cmllcygpO1xyXG4gICAgICBlbHNlIGFycmF5ID0gW10sIG1hcC5lYWNoKGZ1bmN0aW9uKHYsIGspIHsgYXJyYXkucHVzaCh7a2V5OiBrLCB2YWx1ZXM6IGVudHJpZXModiwgZGVwdGgpfSk7IH0pO1xyXG4gICAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5lc3QgPSB7XHJcbiAgICAgIG9iamVjdDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVPYmplY3QsIHNldE9iamVjdCk7IH0sXHJcbiAgICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXHJcbiAgICAgIGVudHJpZXM6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBlbnRyaWVzKGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCksIDApOyB9LFxyXG4gICAgICBrZXk6IGZ1bmN0aW9uKGQpIHsga2V5cy5wdXNoKGQpOyByZXR1cm4gbmVzdDsgfSxcclxuICAgICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXHJcbiAgICAgIHNvcnRWYWx1ZXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRWYWx1ZXMgPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXHJcbiAgICAgIHJvbGx1cDogZnVuY3Rpb24oZikgeyByb2xsdXAgPSBmOyByZXR1cm4gbmVzdDsgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdCgpIHtcclxuICAgIHJldHVybiB7fTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcclxuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVNYXAoKSB7XHJcbiAgICByZXR1cm4gbWFwJDEoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcclxuICAgIG1hcC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBTZXQoKSB7fVxyXG5cclxuICB2YXIgcHJvdG8gPSBtYXAkMS5wcm90b3R5cGU7XHJcblxyXG4gIFNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IFNldCxcclxuICAgIGhhczogcHJvdG8uaGFzLFxyXG4gICAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICB2YWx1ZSArPSBcIlwiO1xyXG4gICAgICB0aGlzW3ByZWZpeCArIHZhbHVlXSA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IHByb3RvLnJlbW92ZSxcclxuICAgIGNsZWFyOiBwcm90by5jbGVhcixcclxuICAgIHZhbHVlczogcHJvdG8ua2V5cyxcclxuICAgIHNpemU6IHByb3RvLnNpemUsXHJcbiAgICBlbXB0eTogcHJvdG8uZW1wdHksXHJcbiAgICBlYWNoOiBwcm90by5lYWNoXHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gc2V0KG9iamVjdCwgZikge1xyXG4gICAgdmFyIHNldCA9IG5ldyBTZXQ7XHJcblxyXG4gICAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBTZXQpIG9iamVjdC5lYWNoKGZ1bmN0aW9uKHZhbHVlKSB7IHNldC5hZGQodmFsdWUpOyB9KTtcclxuXHJcbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpdOKAmXMgYW4gYXJyYXkuXHJcbiAgICBlbHNlIGlmIChvYmplY3QpIHtcclxuICAgICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XHJcbiAgICAgIGlmIChmID09IG51bGwpIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKG9iamVjdFtpXSk7XHJcbiAgICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIHNldC5hZGQoZihvYmplY3RbaV0sIGksIG9iamVjdCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzZXQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBrZXlzKG1hcCkge1xyXG4gICAgdmFyIGtleXMgPSBbXTtcclxuICAgIGZvciAodmFyIGtleSBpbiBtYXApIGtleXMucHVzaChrZXkpO1xyXG4gICAgcmV0dXJuIGtleXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB2YWx1ZXMobWFwKSB7XHJcbiAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSB2YWx1ZXMucHVzaChtYXBba2V5XSk7XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW50cmllcyhtYXApIHtcclxuICAgIHZhciBlbnRyaWVzID0gW107XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gbWFwKSBlbnRyaWVzLnB1c2goe2tleToga2V5LCB2YWx1ZTogbWFwW2tleV19KTtcclxuICAgIHJldHVybiBlbnRyaWVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdW5pZm9ybShtaW4sIG1heCkge1xyXG4gICAgbWluID0gbWluID09IG51bGwgPyAwIDogK21pbjtcclxuICAgIG1heCA9IG1heCA9PSBudWxsID8gMSA6ICttYXg7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkgbWF4ID0gbWluLCBtaW4gPSAwO1xyXG4gICAgZWxzZSBtYXggLT0gbWluO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIG1heCArIG1pbjtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub3JtYWwobXUsIHNpZ21hKSB7XHJcbiAgICB2YXIgeCwgcjtcclxuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XHJcbiAgICBzaWdtYSA9IHNpZ21hID09IG51bGwgPyAxIDogK3NpZ21hO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgeTtcclxuXHJcbiAgICAgIC8vIElmIGF2YWlsYWJsZSwgdXNlIHRoZSBzZWNvbmQgcHJldmlvdXNseS1nZW5lcmF0ZWQgdW5pZm9ybSByYW5kb20uXHJcbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcclxuXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgZ2VuZXJhdGUgYSBuZXcgeCBhbmQgeS5cclxuICAgICAgZWxzZSBkbyB7XHJcbiAgICAgICAgeCA9IE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcclxuICAgICAgICB5ID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xyXG4gICAgICAgIHIgPSB4ICogeCArIHkgKiB5O1xyXG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XHJcblxyXG4gICAgICByZXR1cm4gbXUgKyBzaWdtYSAqIHkgKiBNYXRoLnNxcnQoLTIgKiBNYXRoLmxvZyhyKSAvIHIpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxvZ05vcm1hbCgpIHtcclxuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIE1hdGguZXhwKHJhbmRvbU5vcm1hbCgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpcndpbkhhbGwobikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IE1hdGgucmFuZG9tKCk7XHJcbiAgICAgIHJldHVybiBzdW07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYmF0ZXMobikge1xyXG4gICAgdmFyIHJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbChuKTtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHJhbmRvbUlyd2luSGFsbCgpIC8gbjtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBleHBvbmVudGlhbChsYW1iZGEpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIC1NYXRoLmxvZygxIC0gTWF0aC5yYW5kb20oKSkgLyBsYW1iZGE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGluZWFyKHQpIHtcclxuICAgIHJldHVybiArdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHF1YWRJbih0KSB7XHJcbiAgICByZXR1cm4gdCAqIHQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBxdWFkT3V0KHQpIHtcclxuICAgIHJldHVybiB0ICogKDIgLSB0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XHJcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCA6IC0tdCAqICgyIC0gdCkgKyAxKSAvIDI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjdWJpY0luKHQpIHtcclxuICAgIHJldHVybiB0ICogdCAqIHQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjdWJpY091dCh0KSB7XHJcbiAgICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZWFzZUN1YmljSW5PdXQodCkge1xyXG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcclxuICB9XHJcblxyXG4gIHZhciBleHBvbmVudCA9IDM7XHJcblxyXG4gIHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcclxuICAgIGUgPSArZTtcclxuXHJcbiAgICBmdW5jdGlvbiBwb2x5SW4odCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5wb3codCwgZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xyXG5cclxuICAgIHJldHVybiBwb2x5SW47XHJcbiAgfSkoZXhwb25lbnQpO1xyXG5cclxuICB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xyXG4gICAgZSA9ICtlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xyXG4gICAgICByZXR1cm4gMSAtIE1hdGgucG93KDEgLSB0LCBlKTtcclxuICAgIH1cclxuXHJcbiAgICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xyXG5cclxuICAgIHJldHVybiBwb2x5T3V0O1xyXG4gIH0pKGV4cG9uZW50KTtcclxuXHJcbiAgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xyXG4gICAgZSA9ICtlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XHJcbiAgICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IE1hdGgucG93KHQsIGUpIDogMiAtIE1hdGgucG93KDIgLSB0LCBlKSkgLyAyO1xyXG4gICAgfVxyXG5cclxuICAgIHBvbHlJbk91dC5leHBvbmVudCA9IGN1c3RvbTtcclxuXHJcbiAgICByZXR1cm4gcG9seUluT3V0O1xyXG4gIH0pKGV4cG9uZW50KTtcclxuXHJcbiAgdmFyIHBpID0gTWF0aC5QSTtcclxuICB2YXIgaGFsZlBpID0gcGkgLyAyO1xyXG4gIGZ1bmN0aW9uIHNpbkluKHQpIHtcclxuICAgIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzaW5PdXQodCkge1xyXG4gICAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2luSW5PdXQodCkge1xyXG4gICAgcmV0dXJuICgxIC0gTWF0aC5jb3MocGkgKiB0KSkgLyAyO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhwSW4odCkge1xyXG4gICAgcmV0dXJuIE1hdGgucG93KDIsIDEwICogdCAtIDEwKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGV4cE91dCh0KSB7XHJcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhwSW5PdXQodCkge1xyXG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3coMiwgMTAgKiB0IC0gMTApIDogMiAtIE1hdGgucG93KDIsIDEwIC0gMTAgKiB0KSkgLyAyO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xyXG4gICAgcmV0dXJuIDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNpcmNsZU91dCh0KSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLXQgKiB0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNpcmNsZUluT3V0KHQpIHtcclxuICAgIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcclxuICB9XHJcblxyXG4gIHZhciBiMSA9IDQgLyAxMTtcclxuICB2YXIgYjIgPSA2IC8gMTE7XHJcbiAgdmFyIGIzID0gOCAvIDExO1xyXG4gIHZhciBiNCA9IDMgLyA0O1xyXG4gIHZhciBiNSA9IDkgLyAxMTtcclxuICB2YXIgYjYgPSAxMCAvIDExO1xyXG4gIHZhciBiNyA9IDE1IC8gMTY7XHJcbiAgdmFyIGI4ID0gMjEgLyAyMjtcclxuICB2YXIgYjkgPSA2MyAvIDY0O1xyXG4gIHZhciBiMCA9IDEgLyBiMSAvIGIxO1xyXG4gIGZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcclxuICAgIHJldHVybiAxIC0gYm91bmNlT3V0KDEgLSB0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJvdW5jZU91dCh0KSB7XHJcbiAgICByZXR1cm4gKHQgPSArdCkgPCBiMSA/IGIwICogdCAqIHQgOiB0IDwgYjMgPyBiMCAqICh0IC09IGIyKSAqIHQgKyBiNCA6IHQgPCBiNiA/IGIwICogKHQgLT0gYjUpICogdCArIGI3IDogYjAgKiAodCAtPSBiOCkgKiB0ICsgYjk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XHJcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyAxIC0gYm91bmNlT3V0KDEgLSB0KSA6IGJvdW5jZU91dCh0IC0gMSkgKyAxKSAvIDI7XHJcbiAgfVxyXG5cclxuICB2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcclxuXHJcbiAgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xyXG4gICAgcyA9ICtzO1xyXG5cclxuICAgIGZ1bmN0aW9uIGJhY2tJbih0KSB7XHJcbiAgICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XHJcblxyXG4gICAgcmV0dXJuIGJhY2tJbjtcclxuICB9KShvdmVyc2hvb3QpO1xyXG5cclxuICB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xyXG4gICAgcyA9ICtzO1xyXG5cclxuICAgIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xyXG4gICAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcclxuXHJcbiAgICByZXR1cm4gYmFja091dDtcclxuICB9KShvdmVyc2hvb3QpO1xyXG5cclxuICB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XHJcbiAgICBzID0gK3M7XHJcblxyXG4gICAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcclxuICAgICAgcmV0dXJuICgodCAqPSAyKSA8IDEgPyB0ICogdCAqICgocyArIDEpICogdCAtIHMpIDogKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKSAvIDI7XHJcbiAgICB9XHJcblxyXG4gICAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcclxuXHJcbiAgICByZXR1cm4gYmFja0luT3V0O1xyXG4gIH0pKG92ZXJzaG9vdCk7XHJcblxyXG4gIHZhciB0YXUgPSAyICogTWF0aC5QSTtcclxuICB2YXIgYW1wbGl0dWRlID0gMTtcclxuICB2YXIgcGVyaW9kID0gMC4zO1xyXG4gIHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcclxuICAgIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XHJcbiAgICAgIHJldHVybiBhICogTWF0aC5wb3coMiwgMTAgKiAtLXQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApO1xyXG4gICAgfVxyXG5cclxuICAgIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XHJcbiAgICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xyXG5cclxuICAgIHJldHVybiBlbGFzdGljSW47XHJcbiAgfSkoYW1wbGl0dWRlLCBwZXJpb2QpO1xyXG5cclxuICB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xyXG4gICAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZWxhc3RpY091dCh0KSB7XHJcbiAgICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcclxuICAgIH1cclxuXHJcbiAgICBlbGFzdGljT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcclxuICAgIGVsYXN0aWNPdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xyXG5cclxuICAgIHJldHVybiBlbGFzdGljT3V0O1xyXG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcclxuXHJcbiAgdmFyIGVsYXN0aWNJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xyXG4gICAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcclxuICAgICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXHJcbiAgICAgICAgICA/IGEgKiBNYXRoLnBvdygyLCAxMCAqIHQpICogTWF0aC5zaW4oKHMgLSB0KSAvIHApXHJcbiAgICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcclxuICAgIH1cclxuXHJcbiAgICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xyXG4gICAgZWxhc3RpY0luT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcclxuXHJcbiAgICByZXR1cm4gZWxhc3RpY0luT3V0O1xyXG4gIH0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcclxuXHJcbiAgZnVuY3Rpb24gYXJlYShwb2x5Z29uKSB7XHJcbiAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcclxuICAgICAgICBhLFxyXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcclxuICAgICAgICBhcmVhID0gMDtcclxuXHJcbiAgICB3aGlsZSAoKytpIDwgbikge1xyXG4gICAgICBhID0gYjtcclxuICAgICAgYiA9IHBvbHlnb25baV07XHJcbiAgICAgIGFyZWEgKz0gYVsxXSAqIGJbMF0gLSBhWzBdICogYlsxXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJlYSAvIDI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZChwb2x5Z29uKSB7XHJcbiAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcclxuICAgICAgICB4ID0gMCxcclxuICAgICAgICB5ID0gMCxcclxuICAgICAgICBhLFxyXG4gICAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcclxuICAgICAgICBjLFxyXG4gICAgICAgIGsgPSAwO1xyXG5cclxuICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgIGEgPSBiO1xyXG4gICAgICBiID0gcG9seWdvbltpXTtcclxuICAgICAgayArPSBjID0gYVswXSAqIGJbMV0gLSBiWzBdICogYVsxXTtcclxuICAgICAgeCArPSAoYVswXSArIGJbMF0pICogYztcclxuICAgICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gayAqPSAzLCBbeCAvIGssIHkgLyBrXTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgdGhlIDJEIGNyb3NzIHByb2R1Y3Qgb2YgQUIgYW5kIEFDIHZlY3RvcnMsIGkuZS4sIHRoZSB6LWNvbXBvbmVudCBvZlxyXG4gIC8vIHRoZSAzRCBjcm9zcyBwcm9kdWN0IGluIGEgcXVhZHJhbnQgSSBDYXJ0ZXNpYW4gY29vcmRpbmF0ZSBzeXN0ZW0gKCt4IGlzXHJcbiAgLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcclxuICAvLyBuZWdhdGl2ZSBpZiBjbG9ja3dpc2UsIGFuZCB6ZXJvIGlmIHRoZSBwb2ludHMgYXJlIGNvbGxpbmVhci5cclxuICBmdW5jdGlvbiBjcm9zcyhhLCBiLCBjKSB7XHJcbiAgICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxleGljb2dyYXBoaWNPcmRlcihhLCBiKSB7XHJcbiAgICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XHJcbiAgfVxyXG5cclxuICAvLyBDb21wdXRlcyB0aGUgdXBwZXIgY29udmV4IGh1bGwgcGVyIHRoZSBtb25vdG9uZSBjaGFpbiBhbGdvcml0aG0uXHJcbiAgLy8gQXNzdW1lcyBwb2ludHMubGVuZ3RoID49IDMsIGlzIHNvcnRlZCBieSB4LCB1bmlxdWUgaW4geS5cclxuICAvLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cclxuICBmdW5jdGlvbiBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhwb2ludHMpIHtcclxuICAgIHZhciBuID0gcG9pbnRzLmxlbmd0aCxcclxuICAgICAgICBpbmRleGVzID0gWzAsIDFdLFxyXG4gICAgICAgIHNpemUgPSAyO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAyOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIHdoaWxlIChzaXplID4gMSAmJiBjcm9zcyhwb2ludHNbaW5kZXhlc1tzaXplIC0gMl1dLCBwb2ludHNbaW5kZXhlc1tzaXplIC0gMV1dLCBwb2ludHNbaV0pIDw9IDApIC0tc2l6ZTtcclxuICAgICAgaW5kZXhlc1tzaXplKytdID0gaTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5kZXhlcy5zbGljZSgwLCBzaXplKTsgLy8gcmVtb3ZlIHBvcHBlZCBwb2ludHNcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGh1bGwocG9pbnRzKSB7XHJcbiAgICBpZiAoKG4gPSBwb2ludHMubGVuZ3RoKSA8IDMpIHJldHVybiBudWxsO1xyXG5cclxuICAgIHZhciBpLFxyXG4gICAgICAgIG4sXHJcbiAgICAgICAgc29ydGVkUG9pbnRzID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgIGZsaXBwZWRQb2ludHMgPSBuZXcgQXJyYXkobik7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc29ydGVkUG9pbnRzW2ldID0gWytwb2ludHNbaV1bMF0sICtwb2ludHNbaV1bMV0sIGldO1xyXG4gICAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGZsaXBwZWRQb2ludHNbaV0gPSBbc29ydGVkUG9pbnRzW2ldWzBdLCAtc29ydGVkUG9pbnRzW2ldWzFdXTtcclxuXHJcbiAgICB2YXIgdXBwZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoc29ydGVkUG9pbnRzKSxcclxuICAgICAgICBsb3dlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhmbGlwcGVkUG9pbnRzKTtcclxuXHJcbiAgICAvLyBDb25zdHJ1Y3QgdGhlIGh1bGwgcG9seWdvbiwgcmVtb3ZpbmcgcG9zc2libGUgZHVwbGljYXRlIGVuZHBvaW50cy5cclxuICAgIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxyXG4gICAgICAgIHNraXBSaWdodCA9IGxvd2VySW5kZXhlc1tsb3dlckluZGV4ZXMubGVuZ3RoIC0gMV0gPT09IHVwcGVySW5kZXhlc1t1cHBlckluZGV4ZXMubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgaHVsbCA9IFtdO1xyXG5cclxuICAgIC8vIEFkZCB1cHBlciBodWxsIGluIHJpZ2h0LXRvLWwgb3JkZXIuXHJcbiAgICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXHJcbiAgICBmb3IgKGkgPSB1cHBlckluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW3VwcGVySW5kZXhlc1tpXV1bMl1dKTtcclxuICAgIGZvciAoaSA9ICtza2lwTGVmdDsgaSA8IGxvd2VySW5kZXhlcy5sZW5ndGggLSBza2lwUmlnaHQ7ICsraSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbbG93ZXJJbmRleGVzW2ldXVsyXV0pO1xyXG5cclxuICAgIHJldHVybiBodWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29udGFpbnMocG9seWdvbiwgcG9pbnQpIHtcclxuICAgIHZhciBuID0gcG9seWdvbi5sZW5ndGgsXHJcbiAgICAgICAgcCA9IHBvbHlnb25bbiAtIDFdLFxyXG4gICAgICAgIHggPSBwb2ludFswXSwgeSA9IHBvaW50WzFdLFxyXG4gICAgICAgIHgwID0gcFswXSwgeTAgPSBwWzFdLFxyXG4gICAgICAgIHgxLCB5MSxcclxuICAgICAgICBpbnNpZGUgPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICBwID0gcG9seWdvbltpXSwgeDEgPSBwWzBdLCB5MSA9IHBbMV07XHJcbiAgICAgIGlmICgoKHkxID4geSkgIT09ICh5MCA+IHkpKSAmJiAoeCA8ICh4MCAtIHgxKSAqICh5IC0geTEpIC8gKHkwIC0geTEpICsgeDEpKSBpbnNpZGUgPSAhaW5zaWRlO1xyXG4gICAgICB4MCA9IHgxLCB5MCA9IHkxO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbnNpZGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsZW5ndGgkMShwb2x5Z29uKSB7XHJcbiAgICB2YXIgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBwb2x5Z29uLmxlbmd0aCxcclxuICAgICAgICBiID0gcG9seWdvbltuIC0gMV0sXHJcbiAgICAgICAgeGEsXHJcbiAgICAgICAgeWEsXHJcbiAgICAgICAgeGIgPSBiWzBdLFxyXG4gICAgICAgIHliID0gYlsxXSxcclxuICAgICAgICBwZXJpbWV0ZXIgPSAwO1xyXG5cclxuICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgIHhhID0geGI7XHJcbiAgICAgIHlhID0geWI7XHJcbiAgICAgIGIgPSBwb2x5Z29uW2ldO1xyXG4gICAgICB4YiA9IGJbMF07XHJcbiAgICAgIHliID0gYlsxXTtcclxuICAgICAgeGEgLT0geGI7XHJcbiAgICAgIHlhIC09IHliO1xyXG4gICAgICBwZXJpbWV0ZXIgKz0gTWF0aC5zcXJ0KHhhICogeGEgKyB5YSAqIHlhKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGVyaW1ldGVyO1xyXG4gIH1cclxuXHJcbnZhciAgIHBpJDEgPSBNYXRoLlBJO1xyXG52YXIgICB0YXUkMSA9IDIgKiBwaSQxO1xyXG4gIHZhciBlcHNpbG9uID0gMWUtNjtcclxuICB2YXIgdGF1RXBzaWxvbiA9IHRhdSQxIC0gZXBzaWxvbjtcclxuICBmdW5jdGlvbiBQYXRoKCkge1xyXG4gICAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxyXG4gICAgdGhpcy5feDEgPSB0aGlzLl95MSA9IG51bGw7IC8vIGVuZCBvZiBjdXJyZW50IHN1YnBhdGhcclxuICAgIHRoaXMuXyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGF0aCgpIHtcclxuICAgIHJldHVybiBuZXcgUGF0aDtcclxuICB9XHJcblxyXG4gIFBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogUGF0aCxcclxuICAgIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB0aGlzLl8ucHVzaChcIk1cIiwgdGhpcy5feDAgPSB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcclxuICAgIH0sXHJcbiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcclxuICAgICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xyXG4gICAgICAgIHRoaXMuXy5wdXNoKFwiWlwiKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB0aGlzLl8ucHVzaChcIkxcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xyXG4gICAgfSxcclxuICAgIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xyXG4gICAgICB0aGlzLl8ucHVzaChcIlFcIiwgK3gxLCBcIixcIiwgK3kxLCBcIixcIiwgdGhpcy5feDEgPSAreCwgXCIsXCIsIHRoaXMuX3kxID0gK3kpO1xyXG4gICAgfSxcclxuICAgIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XHJcbiAgICAgIHRoaXMuXy5wdXNoKFwiQ1wiLCAreDEsIFwiLFwiLCAreTEsIFwiLFwiLCAreDIsIFwiLFwiLCAreTIsIFwiLFwiLCB0aGlzLl94MSA9ICt4LCBcIixcIiwgdGhpcy5feTEgPSAreSk7XHJcbiAgICB9LFxyXG4gICAgYXJjVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCByKSB7XHJcbiAgICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XHJcbiAgICAgIHZhciB4MCA9IHRoaXMuX3gxLFxyXG4gICAgICAgICAgeTAgPSB0aGlzLl95MSxcclxuICAgICAgICAgIHgyMSA9IHgyIC0geDEsXHJcbiAgICAgICAgICB5MjEgPSB5MiAtIHkxLFxyXG4gICAgICAgICAgeDAxID0geDAgLSB4MSxcclxuICAgICAgICAgIHkwMSA9IHkwIC0geTEsXHJcbiAgICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcclxuXHJcbiAgICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxyXG4gICAgICBpZiAociA8IDApIHRocm93IG5ldyBFcnJvcihcIm5lZ2F0aXZlIHJhZGl1czogXCIgKyByKTtcclxuXHJcbiAgICAgIC8vIElzIHRoaXMgcGF0aCBlbXB0eT8gTW92ZSB0byAoeDEseTEpLlxyXG4gICAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcclxuICAgICAgICB0aGlzLl8ucHVzaChcclxuICAgICAgICAgIFwiTVwiLCB0aGlzLl94MSA9IHgxLCBcIixcIiwgdGhpcy5feTEgPSB5MVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxyXG4gICAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xyXG5cclxuICAgICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cclxuICAgICAgLy8gRXF1aXZhbGVudGx5LCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDIseTIpP1xyXG4gICAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXHJcbiAgICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XHJcbiAgICAgICAgdGhpcy5fLnB1c2goXHJcbiAgICAgICAgICBcIkxcIiwgdGhpcy5feDEgPSB4MSwgXCIsXCIsIHRoaXMuX3kxID0geTFcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2YXIgeDIwID0geDIgLSB4MCxcclxuICAgICAgICAgICAgeTIwID0geTIgLSB5MCxcclxuICAgICAgICAgICAgbDIxXzIgPSB4MjEgKiB4MjEgKyB5MjEgKiB5MjEsXHJcbiAgICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxyXG4gICAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxyXG4gICAgICAgICAgICBsMDEgPSBNYXRoLnNxcnQobDAxXzIpLFxyXG4gICAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSQxIC0gTWF0aC5hY29zKChsMjFfMiArIGwwMV8yIC0gbDIwXzIpIC8gKDIgKiBsMjEgKiBsMDEpKSkgLyAyKSxcclxuICAgICAgICAgICAgdDAxID0gbCAvIGwwMSxcclxuICAgICAgICAgICAgdDIxID0gbCAvIGwyMTtcclxuXHJcbiAgICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxyXG4gICAgICAgIGlmIChNYXRoLmFicyh0MDEgLSAxKSA+IGVwc2lsb24pIHtcclxuICAgICAgICAgIHRoaXMuXy5wdXNoKFxyXG4gICAgICAgICAgICBcIkxcIiwgeDEgKyB0MDEgKiB4MDEsIFwiLFwiLCB5MSArIHQwMSAqIHkwMVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuXy5wdXNoKFxyXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLDAsXCIsICsoeTAxICogeDIwID4geDAxICogeTIwKSwgXCIsXCIsIHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEsIFwiLFwiLCB0aGlzLl95MSA9IHkxICsgdDIxICogeTIxXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGFyYzogZnVuY3Rpb24oeCwgeSwgciwgYTAsIGExLCBjY3cpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArcjtcclxuICAgICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcclxuICAgICAgICAgIGR5ID0gciAqIE1hdGguc2luKGEwKSxcclxuICAgICAgICAgIHgwID0geCArIGR4LFxyXG4gICAgICAgICAgeTAgPSB5ICsgZHksXHJcbiAgICAgICAgICBjdyA9IDEgXiBjY3csXHJcbiAgICAgICAgICBkYSA9IGNjdyA/IGEwIC0gYTEgOiBhMSAtIGEwO1xyXG5cclxuICAgICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXHJcbiAgICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xyXG5cclxuICAgICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXHJcbiAgICAgIGlmICh0aGlzLl94MSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuXy5wdXNoKFxyXG4gICAgICAgICAgXCJNXCIsIHgwLCBcIixcIiwgeTBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPciwgaXMgKHgwLHkwKSBub3QgY29pbmNpZGVudCB3aXRoIHRoZSBwcmV2aW91cyBwb2ludD8gTGluZSB0byAoeDAseTApLlxyXG4gICAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XHJcbiAgICAgICAgdGhpcy5fLnB1c2goXHJcbiAgICAgICAgICBcIkxcIiwgeDAsIFwiLFwiLCB5MFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElzIHRoaXMgYXJjIGVtcHR5PyBXZeKAmXJlIGRvbmUuXHJcbiAgICAgIGlmICghcikgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxyXG4gICAgICBpZiAoZGEgPiB0YXVFcHNpbG9uKSB7XHJcbiAgICAgICAgdGhpcy5fLnB1c2goXHJcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMSxcIiwgY3csIFwiLFwiLCB4IC0gZHgsIFwiLFwiLCB5IC0gZHksXHJcbiAgICAgICAgICBcIkFcIiwgciwgXCIsXCIsIHIsIFwiLDAsMSxcIiwgY3csIFwiLFwiLCB0aGlzLl94MSA9IHgwLCBcIixcIiwgdGhpcy5feTEgPSB5MFxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChkYSA8IDApIGRhID0gZGEgJSB0YXUkMSArIHRhdSQxO1xyXG4gICAgICAgIHRoaXMuXy5wdXNoKFxyXG4gICAgICAgICAgXCJBXCIsIHIsIFwiLFwiLCByLCBcIiwwLFwiLCArKGRhID49IHBpJDEpLCBcIixcIiwgY3csIFwiLFwiLCB0aGlzLl94MSA9IHggKyByICogTWF0aC5jb3MoYTEpLCBcIixcIiwgdGhpcy5feTEgPSB5ICsgciAqIE1hdGguc2luKGExKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWN0OiBmdW5jdGlvbih4LCB5LCB3LCBoKSB7XHJcbiAgICAgIHRoaXMuXy5wdXNoKFwiTVwiLCB0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gsIFwiLFwiLCB0aGlzLl95MCA9IHRoaXMuX3kxID0gK3ksIFwiaFwiLCArdywgXCJ2XCIsICtoLCBcImhcIiwgLXcsIFwiWlwiKTtcclxuICAgIH0sXHJcbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl8uam9pbihcIlwiKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiB0cmVlX2FkZChkKSB7XHJcbiAgICB2YXIgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXHJcbiAgICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XHJcbiAgICByZXR1cm4gYWRkKHRoaXMuY292ZXIoeCwgeSksIHgsIHksIGQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcclxuICAgIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xyXG5cclxuICAgIHZhciBwYXJlbnQsXHJcbiAgICAgICAgbm9kZSA9IHRyZWUuX3Jvb3QsXHJcbiAgICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcclxuICAgICAgICB4MCA9IHRyZWUuX3gwLFxyXG4gICAgICAgIHkwID0gdHJlZS5feTAsXHJcbiAgICAgICAgeDEgPSB0cmVlLl94MSxcclxuICAgICAgICB5MSA9IHRyZWUuX3kxLFxyXG4gICAgICAgIHhtLFxyXG4gICAgICAgIHltLFxyXG4gICAgICAgIHhwLFxyXG4gICAgICAgIHlwLFxyXG4gICAgICAgIHJpZ2h0LFxyXG4gICAgICAgIGJvdHRvbSxcclxuICAgICAgICBpLFxyXG4gICAgICAgIGo7XHJcblxyXG4gICAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxyXG4gICAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XHJcblxyXG4gICAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxyXG4gICAgd2hpbGUgKG5vZGUubGVuZ3RoKSB7XHJcbiAgICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcclxuICAgICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcclxuICAgICAgaWYgKHBhcmVudCA9IG5vZGUsICEobm9kZSA9IG5vZGVbaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHRdKSkgcmV0dXJuIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XHJcbiAgICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcclxuICAgIHlwID0gK3RyZWUuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpO1xyXG4gICAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xyXG5cclxuICAgIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cclxuICAgIGRvIHtcclxuICAgICAgcGFyZW50ID0gcGFyZW50ID8gcGFyZW50W2ldID0gbmV3IEFycmF5KDQpIDogdHJlZS5fcm9vdCA9IG5ldyBBcnJheSg0KTtcclxuICAgICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xyXG4gICAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xyXG4gICAgfSB3aGlsZSAoKGkgPSBib3R0b20gPDwgMSB8IHJpZ2h0KSA9PT0gKGogPSAoeXAgPj0geW0pIDw8IDEgfCAoeHAgPj0geG0pKSk7XHJcbiAgICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XHJcbiAgICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeSxcclxuICAgICAgICB4eiA9IG5ldyBBcnJheShuKSxcclxuICAgICAgICB5eiA9IG5ldyBBcnJheShuKSxcclxuICAgICAgICB4MCA9IEluZmluaXR5LFxyXG4gICAgICAgIHkwID0gSW5maW5pdHksXHJcbiAgICAgICAgeDEgPSAtSW5maW5pdHksXHJcbiAgICAgICAgeTEgPSAtSW5maW5pdHk7XHJcblxyXG4gICAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkID0gZGF0YVtpXSkpIHx8IGlzTmFOKHkgPSArdGhpcy5feS5jYWxsKG51bGwsIGQpKSkgY29udGludWU7XHJcbiAgICAgIHh6W2ldID0geDtcclxuICAgICAgeXpbaV0gPSB5O1xyXG4gICAgICBpZiAoeCA8IHgwKSB4MCA9IHg7XHJcbiAgICAgIGlmICh4ID4geDEpIHgxID0geDtcclxuICAgICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xyXG4gICAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgaW5oZXJpdCB0aGUgZXhpc3RpbmcgZXh0ZW50LlxyXG4gICAgaWYgKHgxIDwgeDApIHgwID0gdGhpcy5feDAsIHgxID0gdGhpcy5feDE7XHJcbiAgICBpZiAoeTEgPCB5MCkgeTAgPSB0aGlzLl95MCwgeTEgPSB0aGlzLl95MTtcclxuXHJcbiAgICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXHJcbiAgICB0aGlzLmNvdmVyKHgwLCB5MCkuY292ZXIoeDEsIHkxKTtcclxuXHJcbiAgICAvLyBBZGQgdGhlIG5ldyBwb2ludHMuXHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZV9jb3Zlcih4LCB5KSB7XHJcbiAgICBpZiAoaXNOYU4oeCA9ICt4KSB8fCBpc05hTih5ID0gK3kpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXHJcblxyXG4gICAgdmFyIHgwID0gdGhpcy5feDAsXHJcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcclxuICAgICAgICB4MSA9IHRoaXMuX3gxLFxyXG4gICAgICAgIHkxID0gdGhpcy5feTE7XHJcblxyXG4gICAgLy8gSWYgdGhlIHF1YWR0cmVlIGhhcyBubyBleHRlbnQsIGluaXRpYWxpemUgdGhlbS5cclxuICAgIC8vIEludGVnZXIgZXh0ZW50IGFyZSBuZWNlc3Nhcnkgc28gdGhhdCBpZiB3ZSBsYXRlciBkb3VibGUgdGhlIGV4dGVudCxcclxuICAgIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcclxuICAgIGlmIChpc05hTih4MCkpIHtcclxuICAgICAgeDEgPSAoeDAgPSBNYXRoLmZsb29yKHgpKSArIDE7XHJcbiAgICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE90aGVyd2lzZSwgZG91YmxlIHJlcGVhdGVkbHkgdG8gY292ZXIuXHJcbiAgICBlbHNlIGlmICh4MCA+IHggfHwgeCA+IHgxIHx8IHkwID4geSB8fCB5ID4geTEpIHtcclxuICAgICAgdmFyIHogPSB4MSAtIHgwLFxyXG4gICAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXHJcbiAgICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgICBpO1xyXG5cclxuICAgICAgc3dpdGNoIChpID0gKHkgPCAoeTAgKyB5MSkgLyAyKSA8PCAxIHwgKHggPCAoeDAgKyB4MSkgLyAyKSkge1xyXG4gICAgICAgIGNhc2UgMDoge1xyXG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xyXG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDEgPSB4MCArIHosIHkxID0geTAgKyB6LCB4ID4geDEgfHwgeSA+IHkxKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgIGRvIHBhcmVudCA9IG5ldyBBcnJheSg0KSwgcGFyZW50W2ldID0gbm9kZSwgbm9kZSA9IHBhcmVudDtcclxuICAgICAgICAgIHdoaWxlICh6ICo9IDIsIHgwID0geDEgLSB6LCB5MSA9IHkwICsgeiwgeDAgPiB4IHx8IHkgPiB5MSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAyOiB7XHJcbiAgICAgICAgICBkbyBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQ7XHJcbiAgICAgICAgICB3aGlsZSAoeiAqPSAyLCB4MSA9IHgwICsgeiwgeTAgPSB5MSAtIHosIHggPiB4MSB8fCB5MCA+IHkpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgMzoge1xyXG4gICAgICAgICAgZG8gcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50O1xyXG4gICAgICAgICAgd2hpbGUgKHogKj0gMiwgeDAgPSB4MSAtIHosIHkwID0geTEgLSB6LCB4MCA+IHggfHwgeTAgPiB5KTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBxdWFkdHJlZSBjb3ZlcnMgdGhlIHBvaW50IGFscmVhZHksIGp1c3QgcmV0dXJuLlxyXG4gICAgZWxzZSByZXR1cm4gdGhpcztcclxuXHJcbiAgICB0aGlzLl94MCA9IHgwO1xyXG4gICAgdGhpcy5feTAgPSB5MDtcclxuICAgIHRoaXMuX3gxID0geDE7XHJcbiAgICB0aGlzLl95MSA9IHkxO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmVlX2RhdGEoKSB7XHJcbiAgICB2YXIgZGF0YSA9IFtdO1xyXG4gICAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmVlX2V4dGVudChfKSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgID8gdGhpcy5jb3ZlcigrX1swXVswXSwgK19bMF1bMV0pLmNvdmVyKCtfWzFdWzBdLCArX1sxXVsxXSlcclxuICAgICAgICA6IGlzTmFOKHRoaXMuX3gwKSA/IHVuZGVmaW5lZCA6IFtbdGhpcy5feDAsIHRoaXMuX3kwXSwgW3RoaXMuX3gxLCB0aGlzLl95MV1dO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUXVhZChub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xyXG4gICAgdGhpcy5ub2RlID0gbm9kZTtcclxuICAgIHRoaXMueDAgPSB4MDtcclxuICAgIHRoaXMueTAgPSB5MDtcclxuICAgIHRoaXMueDEgPSB4MTtcclxuICAgIHRoaXMueTEgPSB5MTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyZWVfZmluZCh4LCB5LCByYWRpdXMpIHtcclxuICAgIHZhciBkYXRhLFxyXG4gICAgICAgIHgwID0gdGhpcy5feDAsXHJcbiAgICAgICAgeTAgPSB0aGlzLl95MCxcclxuICAgICAgICB4MSxcclxuICAgICAgICB5MSxcclxuICAgICAgICB4MixcclxuICAgICAgICB5MixcclxuICAgICAgICB4MyA9IHRoaXMuX3gxLFxyXG4gICAgICAgIHkzID0gdGhpcy5feTEsXHJcbiAgICAgICAgcXVhZHMgPSBbXSxcclxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcclxuICAgICAgICBxLFxyXG4gICAgICAgIGk7XHJcblxyXG4gICAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcclxuICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XHJcbiAgICBlbHNlIHtcclxuICAgICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XHJcbiAgICAgIHgzID0geCArIHJhZGl1cywgeTMgPSB5ICsgcmFkaXVzO1xyXG4gICAgICByYWRpdXMgKj0gcmFkaXVzO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcclxuXHJcbiAgICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXHJcbiAgICAgIGlmICghKG5vZGUgPSBxLm5vZGUpXHJcbiAgICAgICAgICB8fCAoeDEgPSBxLngwKSA+IHgzXHJcbiAgICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXHJcbiAgICAgICAgICB8fCAoeDIgPSBxLngxKSA8IHgwXHJcbiAgICAgICAgICB8fCAoeTIgPSBxLnkxKSA8IHkwKSBjb250aW51ZTtcclxuXHJcbiAgICAgIC8vIEJpc2VjdCB0aGUgY3VycmVudCBxdWFkcmFudC5cclxuICAgICAgaWYgKG5vZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIHhtID0gKHgxICsgeDIpIC8gMixcclxuICAgICAgICAgICAgeW0gPSAoeTEgKyB5MikgLyAyO1xyXG5cclxuICAgICAgICBxdWFkcy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxyXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVsyXSwgeDEsIHltLCB4bSwgeTIpLFxyXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVsxXSwgeG0sIHkxLCB4MiwgeW0pLFxyXG4gICAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gVmlzaXQgdGhlIGNsb3Nlc3QgcXVhZHJhbnQgZmlyc3QuXHJcbiAgICAgICAgaWYgKGkgPSAoeSA+PSB5bSkgPDwgMSB8ICh4ID49IHhtKSkge1xyXG4gICAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMV0gPSBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV07XHJcbiAgICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxIC0gaV0gPSBxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVmlzaXQgdGhpcyBwb2ludC4gKFZpc2l0aW5nIGNvaW5jaWRlbnQgcG9pbnRzIGlzbuKAmXQgbmVjZXNzYXJ5ISlcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGR4ID0geCAtICt0aGlzLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcclxuICAgICAgICAgICAgZHkgPSB5IC0gK3RoaXMuX3kuY2FsbChudWxsLCBub2RlLmRhdGEpLFxyXG4gICAgICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xyXG4gICAgICAgIGlmIChkMiA8IHJhZGl1cykge1xyXG4gICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQocmFkaXVzID0gZDIpO1xyXG4gICAgICAgICAgeDAgPSB4IC0gZCwgeTAgPSB5IC0gZDtcclxuICAgICAgICAgIHgzID0geCArIGQsIHkzID0geSArIGQ7XHJcbiAgICAgICAgICBkYXRhID0gbm9kZS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZV9yZW1vdmUoZCkge1xyXG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcclxuXHJcbiAgICB2YXIgcGFyZW50LFxyXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxyXG4gICAgICAgIHJldGFpbmVyLFxyXG4gICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgIG5leHQsXHJcbiAgICAgICAgeDAgPSB0aGlzLl94MCxcclxuICAgICAgICB5MCA9IHRoaXMuX3kwLFxyXG4gICAgICAgIHgxID0gdGhpcy5feDEsXHJcbiAgICAgICAgeTEgPSB0aGlzLl95MSxcclxuICAgICAgICB4LFxyXG4gICAgICAgIHksXHJcbiAgICAgICAgeG0sXHJcbiAgICAgICAgeW0sXHJcbiAgICAgICAgcmlnaHQsXHJcbiAgICAgICAgYm90dG9tLFxyXG4gICAgICAgIGksXHJcbiAgICAgICAgajtcclxuXHJcbiAgICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXHJcbiAgICBpZiAoIW5vZGUpIHJldHVybiB0aGlzO1xyXG5cclxuICAgIC8vIEZpbmQgdGhlIGxlYWYgbm9kZSBmb3IgdGhlIHBvaW50LlxyXG4gICAgLy8gV2hpbGUgZGVzY2VuZGluZywgYWxzbyByZXRhaW4gdGhlIGRlZXBlc3QgcGFyZW50IHdpdGggYSBub24tcmVtb3ZlZCBzaWJsaW5nLlxyXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XHJcbiAgICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XHJcbiAgICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xyXG4gICAgICBpZiAoIW5vZGUubGVuZ3RoKSBicmVhaztcclxuICAgICAgaWYgKHBhcmVudFsoaSArIDEpICYgM10gfHwgcGFyZW50WyhpICsgMikgJiAzXSB8fCBwYXJlbnRbKGkgKyAzKSAmIDNdKSByZXRhaW5lciA9IHBhcmVudCwgaiA9IGk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxyXG4gICAgd2hpbGUgKG5vZGUuZGF0YSAhPT0gZCkgaWYgKCEocHJldmlvdXMgPSBub2RlLCBub2RlID0gbm9kZS5uZXh0KSkgcmV0dXJuIHRoaXM7XHJcbiAgICBpZiAobmV4dCA9IG5vZGUubmV4dCkgZGVsZXRlIG5vZGUubmV4dDtcclxuXHJcbiAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29pbmNpZGVudCBwb2ludHMsIHJlbW92ZSBqdXN0IHRoZSBwb2ludC5cclxuICAgIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XHJcblxyXG4gICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxyXG4gICAgaWYgKCFwYXJlbnQpIHJldHVybiB0aGlzLl9yb290ID0gbmV4dCwgdGhpcztcclxuXHJcbiAgICAvLyBSZW1vdmUgdGhpcyBsZWFmLlxyXG4gICAgbmV4dCA/IHBhcmVudFtpXSA9IG5leHQgOiBkZWxldGUgcGFyZW50W2ldO1xyXG5cclxuICAgIC8vIElmIHRoZSBwYXJlbnQgbm93IGNvbnRhaW5zIGV4YWN0bHkgb25lIGxlYWYsIGNvbGxhcHNlIHN1cGVyZmx1b3VzIHBhcmVudHMuXHJcbiAgICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXHJcbiAgICAgICAgJiYgbm9kZSA9PT0gKHBhcmVudFszXSB8fCBwYXJlbnRbMl0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFswXSlcclxuICAgICAgICAmJiAhbm9kZS5sZW5ndGgpIHtcclxuICAgICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XHJcbiAgICAgIGVsc2UgdGhpcy5fcm9vdCA9IG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZW1vdmVBbGwoZGF0YSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyZWVfcm9vdCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9yb290O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZV9zaXplKCkge1xyXG4gICAgdmFyIHNpemUgPSAwO1xyXG4gICAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIGlmICghbm9kZS5sZW5ndGgpIGRvICsrc2l6ZTsgd2hpbGUgKG5vZGUgPSBub2RlLm5leHQpXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzaXplO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZV92aXNpdChjYWxsYmFjaykge1xyXG4gICAgdmFyIHF1YWRzID0gW10sIHEsIG5vZGUgPSB0aGlzLl9yb290LCBjaGlsZCwgeDAsIHkwLCB4MSwgeTE7XHJcbiAgICBpZiAobm9kZSkgcXVhZHMucHVzaChuZXcgUXVhZChub2RlLCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xyXG4gICAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xyXG4gICAgICBpZiAoIWNhbGxiYWNrKG5vZGUgPSBxLm5vZGUsIHgwID0gcS54MCwgeTAgPSBxLnkwLCB4MSA9IHEueDEsIHkxID0gcS55MSkgJiYgbm9kZS5sZW5ndGgpIHtcclxuICAgICAgICB2YXIgeG0gPSAoeDAgKyB4MSkgLyAyLCB5bSA9ICh5MCArIHkxKSAvIDI7XHJcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcclxuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xyXG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMV0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5MCwgeDEsIHltKSk7XHJcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmVlX3Zpc2l0QWZ0ZXIoY2FsbGJhY2spIHtcclxuICAgIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XHJcbiAgICBpZiAodGhpcy5fcm9vdCkgcXVhZHMucHVzaChuZXcgUXVhZCh0aGlzLl9yb290LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSkpO1xyXG4gICAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xyXG4gICAgICB2YXIgbm9kZSA9IHEubm9kZTtcclxuICAgICAgaWYgKG5vZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkLCB4MCA9IHEueDAsIHkwID0gcS55MCwgeDEgPSBxLngxLCB5MSA9IHEueTEsIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xyXG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XHJcbiAgICAgICAgaWYgKGNoaWxkID0gbm9kZVsxXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHkwLCB4MSwgeW0pKTtcclxuICAgICAgICBpZiAoY2hpbGQgPSBub2RlWzJdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4MCwgeW0sIHhtLCB5MSkpO1xyXG4gICAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XHJcbiAgICAgIH1cclxuICAgICAgbmV4dC5wdXNoKHEpO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKHEgPSBuZXh0LnBvcCgpKSB7XHJcbiAgICAgIGNhbGxiYWNrKHEubm9kZSwgcS54MCwgcS55MCwgcS54MSwgcS55MSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcclxuICAgIHJldHVybiBkWzBdO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZV94KF8pIHtcclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3ggPSBfLCB0aGlzKSA6IHRoaXMuX3g7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XHJcbiAgICByZXR1cm4gZFsxXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyZWVfeShfKSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl95ID0gXywgdGhpcykgOiB0aGlzLl95O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcclxuICAgIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xyXG4gICAgcmV0dXJuIG5vZGVzID09IG51bGwgPyB0cmVlIDogdHJlZS5hZGRBbGwobm9kZXMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcclxuICAgIHRoaXMuX3ggPSB4O1xyXG4gICAgdGhpcy5feSA9IHk7XHJcbiAgICB0aGlzLl94MCA9IHgwO1xyXG4gICAgdGhpcy5feTAgPSB5MDtcclxuICAgIHRoaXMuX3gxID0geDE7XHJcbiAgICB0aGlzLl95MSA9IHkxO1xyXG4gICAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlYWZfY29weShsZWFmKSB7XHJcbiAgICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcclxuICAgIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XHJcbiAgICByZXR1cm4gY29weTtcclxuICB9XHJcblxyXG4gIHZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XHJcblxyXG4gIHRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXHJcbiAgICAgICAgbm9kZSA9IHRoaXMuX3Jvb3QsXHJcbiAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgY2hpbGQ7XHJcblxyXG4gICAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcclxuXHJcbiAgICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcclxuXHJcbiAgICBub2RlcyA9IFt7c291cmNlOiBub2RlLCB0YXJnZXQ6IGNvcHkuX3Jvb3QgPSBuZXcgQXJyYXkoNCl9XTtcclxuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcclxuICAgICAgICBpZiAoY2hpbGQgPSBub2RlLnNvdXJjZVtpXSkge1xyXG4gICAgICAgICAgaWYgKGNoaWxkLmxlbmd0aCkgbm9kZXMucHVzaCh7c291cmNlOiBjaGlsZCwgdGFyZ2V0OiBub2RlLnRhcmdldFtpXSA9IG5ldyBBcnJheSg0KX0pO1xyXG4gICAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvcHk7XHJcbiAgfTtcclxuXHJcbiAgdHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xyXG4gIHRyZWVQcm90by5hZGRBbGwgPSBhZGRBbGw7XHJcbiAgdHJlZVByb3RvLmNvdmVyID0gdHJlZV9jb3ZlcjtcclxuICB0cmVlUHJvdG8uZGF0YSA9IHRyZWVfZGF0YTtcclxuICB0cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XHJcbiAgdHJlZVByb3RvLmZpbmQgPSB0cmVlX2ZpbmQ7XHJcbiAgdHJlZVByb3RvLnJlbW92ZSA9IHRyZWVfcmVtb3ZlO1xyXG4gIHRyZWVQcm90by5yZW1vdmVBbGwgPSByZW1vdmVBbGw7XHJcbiAgdHJlZVByb3RvLnJvb3QgPSB0cmVlX3Jvb3Q7XHJcbiAgdHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XHJcbiAgdHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcclxuICB0cmVlUHJvdG8udmlzaXRBZnRlciA9IHRyZWVfdmlzaXRBZnRlcjtcclxuICB0cmVlUHJvdG8ueCA9IHRyZWVfeDtcclxuICB0cmVlUHJvdG8ueSA9IHRyZWVfeTtcclxuXHJcbiAgdmFyIHNsaWNlJDEgPSBbXS5zbGljZTtcclxuXHJcbiAgdmFyIG5vYWJvcnQgPSB7fTtcclxuXHJcbiAgZnVuY3Rpb24gUXVldWUoc2l6ZSkge1xyXG4gICAgaWYgKCEoc2l6ZSA+PSAxKSkgdGhyb3cgbmV3IEVycm9yO1xyXG4gICAgdGhpcy5fc2l6ZSA9IHNpemU7XHJcbiAgICB0aGlzLl9jYWxsID1cclxuICAgIHRoaXMuX2Vycm9yID0gbnVsbDtcclxuICAgIHRoaXMuX3Rhc2tzID0gW107XHJcbiAgICB0aGlzLl9kYXRhID0gW107XHJcbiAgICB0aGlzLl93YWl0aW5nID1cclxuICAgIHRoaXMuX2FjdGl2ZSA9XHJcbiAgICB0aGlzLl9lbmRlZCA9XHJcbiAgICB0aGlzLl9zdGFydCA9IDA7IC8vIGluc2lkZSBhIHN5bmNocm9ub3VzIHRhc2sgY2FsbGJhY2s/XHJcbiAgfVxyXG5cclxuICBRdWV1ZS5wcm90b3R5cGUgPSBxdWV1ZS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogUXVldWUsXHJcbiAgICBkZWZlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcjtcclxuICAgICAgaWYgKHRoaXMuX2Vycm9yICE9IG51bGwpIHJldHVybiB0aGlzO1xyXG4gICAgICB2YXIgdCA9IHNsaWNlJDEuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICB0LnB1c2goY2FsbGJhY2spO1xyXG4gICAgICArK3RoaXMuX3dhaXRpbmcsIHRoaXMuX3Rhc2tzLnB1c2godCk7XHJcbiAgICAgIHBva2UodGhpcyk7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGFib3J0OiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuX2Vycm9yID09IG51bGwpIGFib3J0KHRoaXMsIG5ldyBFcnJvcihcImFib3J0XCIpKTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgYXdhaXQ6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIiB8fCB0aGlzLl9jYWxsKSB0aHJvdyBuZXcgRXJyb3I7XHJcbiAgICAgIHRoaXMuX2NhbGwgPSBmdW5jdGlvbihlcnJvciwgcmVzdWx0cykgeyBjYWxsYmFjay5hcHBseShudWxsLCBbZXJyb3JdLmNvbmNhdChyZXN1bHRzKSk7IH07XHJcbiAgICAgIG1heWJlTm90aWZ5KHRoaXMpO1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBhd2FpdEFsbDogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiIHx8IHRoaXMuX2NhbGwpIHRocm93IG5ldyBFcnJvcjtcclxuICAgICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xyXG4gICAgICBtYXliZU5vdGlmeSh0aGlzKTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gcG9rZShxKSB7XHJcbiAgICBpZiAoIXEuX3N0YXJ0KSB0cnkgeyBzdGFydChxKTsgfSAvLyBsZXQgdGhlIGN1cnJlbnQgdGFzayBjb21wbGV0ZVxyXG4gICAgY2F0Y2ggKGUpIHsgaWYgKHEuX3Rhc2tzW3EuX2VuZGVkICsgcS5fYWN0aXZlIC0gMV0pIGFib3J0KHEsIGUpOyB9IC8vIHRhc2sgZXJyb3JlZCBzeW5jaHJvbm91c2x5XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdGFydChxKSB7XHJcbiAgICB3aGlsZSAocS5fc3RhcnQgPSBxLl93YWl0aW5nICYmIHEuX2FjdGl2ZSA8IHEuX3NpemUpIHtcclxuICAgICAgdmFyIGkgPSBxLl9lbmRlZCArIHEuX2FjdGl2ZSxcclxuICAgICAgICAgIHQgPSBxLl90YXNrc1tpXSxcclxuICAgICAgICAgIGogPSB0Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICBjID0gdFtqXTtcclxuICAgICAgdFtqXSA9IGVuZChxLCBpKTtcclxuICAgICAgLS1xLl93YWl0aW5nLCArK3EuX2FjdGl2ZTtcclxuICAgICAgdCA9IGMuYXBwbHkobnVsbCwgdCk7XHJcbiAgICAgIGlmICghcS5fdGFza3NbaV0pIGNvbnRpbnVlOyAvLyB0YXNrIGZpbmlzaGVkIHN5bmNocm9ub3VzbHlcclxuICAgICAgcS5fdGFza3NbaV0gPSB0IHx8IG5vYWJvcnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbmQocSwgaSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUsIHIpIHtcclxuICAgICAgaWYgKCFxLl90YXNrc1tpXSkgcmV0dXJuOyAvLyBpZ25vcmUgbXVsdGlwbGUgY2FsbGJhY2tzXHJcbiAgICAgIC0tcS5fYWN0aXZlLCArK3EuX2VuZGVkO1xyXG4gICAgICBxLl90YXNrc1tpXSA9IG51bGw7XHJcbiAgICAgIGlmIChxLl9lcnJvciAhPSBudWxsKSByZXR1cm47IC8vIGlnbm9yZSBzZWNvbmRhcnkgZXJyb3JzXHJcbiAgICAgIGlmIChlICE9IG51bGwpIHtcclxuICAgICAgICBhYm9ydChxLCBlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBxLl9kYXRhW2ldID0gcjtcclxuICAgICAgICBpZiAocS5fd2FpdGluZykgcG9rZShxKTtcclxuICAgICAgICBlbHNlIG1heWJlTm90aWZ5KHEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWJvcnQocSwgZSkge1xyXG4gICAgdmFyIGkgPSBxLl90YXNrcy5sZW5ndGgsIHQ7XHJcbiAgICBxLl9lcnJvciA9IGU7IC8vIGlnbm9yZSBhY3RpdmUgY2FsbGJhY2tzXHJcbiAgICBxLl9kYXRhID0gdW5kZWZpbmVkOyAvLyBhbGxvdyBnY1xyXG4gICAgcS5fd2FpdGluZyA9IE5hTjsgLy8gcHJldmVudCBzdGFydGluZ1xyXG5cclxuICAgIHdoaWxlICgtLWkgPj0gMCkge1xyXG4gICAgICBpZiAodCA9IHEuX3Rhc2tzW2ldKSB7XHJcbiAgICAgICAgcS5fdGFza3NbaV0gPSBudWxsO1xyXG4gICAgICAgIGlmICh0LmFib3J0KSB0cnkgeyB0LmFib3J0KCk7IH1cclxuICAgICAgICBjYXRjaCAoZSkgeyAvKiBpZ25vcmUgKi8gfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcS5fYWN0aXZlID0gTmFOOyAvLyBhbGxvdyBub3RpZmljYXRpb25cclxuICAgIG1heWJlTm90aWZ5KHEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWF5YmVOb3RpZnkocSkge1xyXG4gICAgaWYgKCFxLl9hY3RpdmUgJiYgcS5fY2FsbCkgcS5fY2FsbChxLl9lcnJvciwgcS5fZGF0YSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBxdWV1ZShjb25jdXJyZW5jeSkge1xyXG4gICAgcmV0dXJuIG5ldyBRdWV1ZShhcmd1bWVudHMubGVuZ3RoID8gK2NvbmN1cnJlbmN5IDogSW5maW5pdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uc3RhbnQkMSh4KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY29uc3RhbnQoKSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciBlcHNpbG9uJDEgPSAxZS0xMjtcclxuICB2YXIgcGkkMiA9IE1hdGguUEk7XHJcbiAgdmFyIGhhbGZQaSQxID0gcGkkMiAvIDI7XHJcbiAgdmFyIHRhdSQyID0gMiAqIHBpJDI7XHJcblxyXG4gIGZ1bmN0aW9uIGFyY0lubmVyUmFkaXVzKGQpIHtcclxuICAgIHJldHVybiBkLmlubmVyUmFkaXVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xyXG4gICAgcmV0dXJuIGQub3V0ZXJSYWRpdXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmNTdGFydEFuZ2xlKGQpIHtcclxuICAgIHJldHVybiBkLnN0YXJ0QW5nbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmNFbmRBbmdsZShkKSB7XHJcbiAgICByZXR1cm4gZC5lbmRBbmdsZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcclxuICAgIHJldHVybiBkICYmIGQucGFkQW5nbGU7IC8vIE5vdGU6IG9wdGlvbmFsIVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXNpbih4KSB7XHJcbiAgICByZXR1cm4geCA+PSAxID8gaGFsZlBpJDEgOiB4IDw9IC0xID8gLWhhbGZQaSQxIDogTWF0aC5hc2luKHgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW50ZXJzZWN0KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xyXG4gICAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXHJcbiAgICAgICAgeDMyID0geDMgLSB4MiwgeTMyID0geTMgLSB5MixcclxuICAgICAgICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyAoeTMyICogeDEwIC0geDMyICogeTEwKTtcclxuICAgIHJldHVybiBbeDAgKyB0ICogeDEwLCB5MCArIHQgKiB5MTBdO1xyXG4gIH1cclxuXHJcbiAgLy8gQ29tcHV0ZSBwZXJwZW5kaWN1bGFyIG9mZnNldCBsaW5lIG9mIGxlbmd0aCByYy5cclxuICAvLyBodHRwOi8vbWF0aHdvcmxkLndvbGZyYW0uY29tL0NpcmNsZS1MaW5lSW50ZXJzZWN0aW9uLmh0bWxcclxuICBmdW5jdGlvbiBjb3JuZXJUYW5nZW50cyh4MCwgeTAsIHgxLCB5MSwgcjEsIHJjLCBjdykge1xyXG4gICAgdmFyIHgwMSA9IHgwIC0geDEsXHJcbiAgICAgICAgeTAxID0geTAgLSB5MSxcclxuICAgICAgICBsbyA9IChjdyA/IHJjIDogLXJjKSAvIE1hdGguc3FydCh4MDEgKiB4MDEgKyB5MDEgKiB5MDEpLFxyXG4gICAgICAgIG94ID0gbG8gKiB5MDEsXHJcbiAgICAgICAgb3kgPSAtbG8gKiB4MDEsXHJcbiAgICAgICAgeDExID0geDAgKyBveCxcclxuICAgICAgICB5MTEgPSB5MCArIG95LFxyXG4gICAgICAgIHgxMCA9IHgxICsgb3gsXHJcbiAgICAgICAgeTEwID0geTEgKyBveSxcclxuICAgICAgICB4MDAgPSAoeDExICsgeDEwKSAvIDIsXHJcbiAgICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxyXG4gICAgICAgIGR4ID0geDEwIC0geDExLFxyXG4gICAgICAgIGR5ID0geTEwIC0geTExLFxyXG4gICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXHJcbiAgICAgICAgciA9IHIxIC0gcmMsXHJcbiAgICAgICAgRCA9IHgxMSAqIHkxMCAtIHgxMCAqIHkxMSxcclxuICAgICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgciAqIHIgKiBkMiAtIEQgKiBEKSksXHJcbiAgICAgICAgY3gwID0gKEQgKiBkeSAtIGR4ICogZCkgLyBkMixcclxuICAgICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcclxuICAgICAgICBjeDEgPSAoRCAqIGR5ICsgZHggKiBkKSAvIGQyLFxyXG4gICAgICAgIGN5MSA9ICgtRCAqIGR4ICsgZHkgKiBkKSAvIGQyLFxyXG4gICAgICAgIGR4MCA9IGN4MCAtIHgwMCxcclxuICAgICAgICBkeTAgPSBjeTAgLSB5MDAsXHJcbiAgICAgICAgZHgxID0gY3gxIC0geDAwLFxyXG4gICAgICAgIGR5MSA9IGN5MSAtIHkwMDtcclxuXHJcbiAgICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxyXG4gICAgLy8gVE9ETyBJcyB0aGVyZSBhIGZhc3RlciB3YXkgdG8gZGV0ZXJtaW5lIHdoaWNoIGludGVyc2VjdGlvbiB0byB1c2U/XHJcbiAgICBpZiAoZHgwICogZHgwICsgZHkwICogZHkwID4gZHgxICogZHgxICsgZHkxICogZHkxKSBjeDAgPSBjeDEsIGN5MCA9IGN5MTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjeDogY3gwLFxyXG4gICAgICBjeTogY3kwLFxyXG4gICAgICB4MDE6IC1veCxcclxuICAgICAgeTAxOiAtb3ksXHJcbiAgICAgIHgxMTogY3gwICogKHIxIC8gciAtIDEpLFxyXG4gICAgICB5MTE6IGN5MCAqIChyMSAvIHIgLSAxKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyYygpIHtcclxuICAgIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxyXG4gICAgICAgIG91dGVyUmFkaXVzID0gYXJjT3V0ZXJSYWRpdXMsXHJcbiAgICAgICAgY29ybmVyUmFkaXVzID0gY29uc3RhbnQkMSgwKSxcclxuICAgICAgICBwYWRSYWRpdXMgPSBudWxsLFxyXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxyXG4gICAgICAgIGVuZEFuZ2xlID0gYXJjRW5kQW5nbGUsXHJcbiAgICAgICAgcGFkQW5nbGUgPSBhcmNQYWRBbmdsZSxcclxuICAgICAgICBjb250ZXh0ID0gbnVsbDtcclxuXHJcbiAgICBmdW5jdGlvbiBhcmMoKSB7XHJcbiAgICAgIHZhciBidWZmZXIsXHJcbiAgICAgICAgICByLFxyXG4gICAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcclxuICAgICAgICAgIHIxID0gK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXHJcbiAgICAgICAgICBhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSQxLFxyXG4gICAgICAgICAgYTEgPSBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gaGFsZlBpJDEsXHJcbiAgICAgICAgICBkYSA9IE1hdGguYWJzKGExIC0gYTApLFxyXG4gICAgICAgICAgY3cgPSBhMSA+IGEwO1xyXG5cclxuICAgICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xyXG5cclxuICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIG91dGVyIHJhZGl1cyBpcyBhbHdheXMgbGFyZ2VyIHRoYW4gdGhlIGlubmVyIHJhZGl1cy5cclxuICAgICAgaWYgKHIxIDwgcjApIHIgPSByMSwgcjEgPSByMCwgcjAgPSByO1xyXG5cclxuICAgICAgLy8gSXMgaXQgYSBwb2ludD9cclxuICAgICAgaWYgKCEocjEgPiBlcHNpbG9uJDEpKSBjb250ZXh0Lm1vdmVUbygwLCAwKTtcclxuXHJcbiAgICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XHJcbiAgICAgIGVsc2UgaWYgKGRhID4gdGF1JDIgLSBlcHNpbG9uJDEpIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIE1hdGguY29zKGEwKSwgcjEgKiBNYXRoLnNpbihhMCkpO1xyXG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMCwgYTEsICFjdyk7XHJcbiAgICAgICAgaWYgKHIwID4gZXBzaWxvbiQxKSB7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIE1hdGguY29zKGExKSwgcjAgKiBNYXRoLnNpbihhMSkpO1xyXG4gICAgICAgICAgY29udGV4dC5hcmMoMCwgMCwgcjAsIGExLCBhMCwgY3cpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gT3IgaXMgaXQgYSBjaXJjdWxhciBvciBhbm51bGFyIHNlY3Rvcj9cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGEwMSA9IGEwLFxyXG4gICAgICAgICAgICBhMTEgPSBhMSxcclxuICAgICAgICAgICAgYTAwID0gYTAsXHJcbiAgICAgICAgICAgIGExMCA9IGExLFxyXG4gICAgICAgICAgICBkYTAgPSBkYSxcclxuICAgICAgICAgICAgZGExID0gZGEsXHJcbiAgICAgICAgICAgIGFwID0gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvIDIsXHJcbiAgICAgICAgICAgIHJwID0gKGFwID4gZXBzaWxvbiQxKSAmJiAocGFkUmFkaXVzID8gK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogTWF0aC5zcXJ0KHIwICogcjAgKyByMSAqIHIxKSksXHJcbiAgICAgICAgICAgIHJjID0gTWF0aC5taW4oTWF0aC5hYnMocjEgLSByMCkgLyAyLCArY29ybmVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxyXG4gICAgICAgICAgICByYzAgPSByYyxcclxuICAgICAgICAgICAgcmMxID0gcmMsXHJcbiAgICAgICAgICAgIHQwLFxyXG4gICAgICAgICAgICB0MTtcclxuXHJcbiAgICAgICAgLy8gQXBwbHkgcGFkZGluZz8gTm90ZSB0aGF0IHNpbmNlIHIxIOKJpSByMCwgZGExIOKJpSBkYTAuXHJcbiAgICAgICAgaWYgKHJwID4gZXBzaWxvbiQxKSB7XHJcbiAgICAgICAgICB2YXIgcDAgPSBhc2luKHJwIC8gcjAgKiBNYXRoLnNpbihhcCkpLFxyXG4gICAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogTWF0aC5zaW4oYXApKTtcclxuICAgICAgICAgIGlmICgoZGEwIC09IHAwICogMikgPiBlcHNpbG9uJDEpIHAwICo9IChjdyA/IDEgOiAtMSksIGEwMCArPSBwMCwgYTEwIC09IHAwO1xyXG4gICAgICAgICAgZWxzZSBkYTAgPSAwLCBhMDAgPSBhMTAgPSAoYTAgKyBhMSkgLyAyO1xyXG4gICAgICAgICAgaWYgKChkYTEgLT0gcDEgKiAyKSA+IGVwc2lsb24kMSkgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XHJcbiAgICAgICAgICBlbHNlIGRhMSA9IDAsIGEwMSA9IGExMSA9IChhMCArIGExKSAvIDI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeDAxID0gcjEgKiBNYXRoLmNvcyhhMDEpLFxyXG4gICAgICAgICAgICB5MDEgPSByMSAqIE1hdGguc2luKGEwMSksXHJcbiAgICAgICAgICAgIHgxMCA9IHIwICogTWF0aC5jb3MoYTEwKSxcclxuICAgICAgICAgICAgeTEwID0gcjAgKiBNYXRoLnNpbihhMTApO1xyXG5cclxuICAgICAgICAvLyBBcHBseSByb3VuZGVkIGNvcm5lcnM/XHJcbiAgICAgICAgaWYgKHJjID4gZXBzaWxvbiQxKSB7XHJcbiAgICAgICAgICB2YXIgeDExID0gcjEgKiBNYXRoLmNvcyhhMTEpLFxyXG4gICAgICAgICAgICAgIHkxMSA9IHIxICogTWF0aC5zaW4oYTExKSxcclxuICAgICAgICAgICAgICB4MDAgPSByMCAqIE1hdGguY29zKGEwMCksXHJcbiAgICAgICAgICAgICAgeTAwID0gcjAgKiBNYXRoLnNpbihhMDApO1xyXG5cclxuICAgICAgICAgIC8vIFJlc3RyaWN0IHRoZSBjb3JuZXIgcmFkaXVzIGFjY29yZGluZyB0byB0aGUgc2VjdG9yIGFuZ2xlLlxyXG4gICAgICAgICAgaWYgKGRhIDwgcGkkMikge1xyXG4gICAgICAgICAgICB2YXIgb2MgPSBkYTAgPiBlcHNpbG9uJDEgPyBpbnRlcnNlY3QoeDAxLCB5MDEsIHgwMCwgeTAwLCB4MTEsIHkxMSwgeDEwLCB5MTApIDogW3gxMCwgeTEwXSxcclxuICAgICAgICAgICAgICAgIGF4ID0geDAxIC0gb2NbMF0sXHJcbiAgICAgICAgICAgICAgICBheSA9IHkwMSAtIG9jWzFdLFxyXG4gICAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcclxuICAgICAgICAgICAgICAgIGJ5ID0geTExIC0gb2NbMV0sXHJcbiAgICAgICAgICAgICAgICBrYyA9IDEgLyBNYXRoLnNpbihNYXRoLmFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkpICogTWF0aC5zcXJ0KGJ4ICogYnggKyBieSAqIGJ5KSkpIC8gMiksXHJcbiAgICAgICAgICAgICAgICBsYyA9IE1hdGguc3FydChvY1swXSAqIG9jWzBdICsgb2NbMV0gKiBvY1sxXSk7XHJcbiAgICAgICAgICAgIHJjMCA9IE1hdGgubWluKHJjLCAocjAgLSBsYykgLyAoa2MgLSAxKSk7XHJcbiAgICAgICAgICAgIHJjMSA9IE1hdGgubWluKHJjLCAocjEgLSBsYykgLyAoa2MgKyAxKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XHJcbiAgICAgICAgaWYgKCEoZGExID4gZXBzaWxvbiQxKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xyXG5cclxuICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XHJcbiAgICAgICAgZWxzZSBpZiAocmMxID4gZXBzaWxvbiQxKSB7XHJcbiAgICAgICAgICB0MCA9IGNvcm5lclRhbmdlbnRzKHgwMCwgeTAwLCB4MDEsIHkwMSwgcjEsIHJjMSwgY3cpO1xyXG4gICAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MTEsIHkxMSwgeDEwLCB5MTAsIHIxLCByYzEsIGN3KTtcclxuXHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xyXG5cclxuICAgICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xyXG4gICAgICAgICAgaWYgKHJjMSA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgTWF0aC5hdGFuMih0MC55MDEsIHQwLngwMSksIE1hdGguYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xyXG5cclxuICAgICAgICAgIC8vIE90aGVyd2lzZSwgZHJhdyB0aGUgdHdvIGNvcm5lcnMgYW5kIHRoZSByaW5nLlxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBNYXRoLmF0YW4yKHQwLnkwMSwgdDAueDAxKSwgTWF0aC5hdGFuMih0MC55MTEsIHQwLngxMSksICFjdyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBNYXRoLmF0YW4yKHQwLmN5ICsgdDAueTExLCB0MC5jeCArIHQwLngxMSksIE1hdGguYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgIWN3KTtcclxuICAgICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzEsIE1hdGguYXRhbjIodDEueTExLCB0MS54MTEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9yIGlzIHRoZSBvdXRlciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XHJcbiAgICAgICAgZWxzZSBjb250ZXh0Lm1vdmVUbyh4MDEsIHkwMSksIGNvbnRleHQuYXJjKDAsIDAsIHIxLCBhMDEsIGExMSwgIWN3KTtcclxuXHJcbiAgICAgICAgLy8gSXMgdGhlcmUgbm8gaW5uZXIgcmluZywgYW5kIGl04oCZcyBhIGNpcmN1bGFyIHNlY3Rvcj9cclxuICAgICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XHJcbiAgICAgICAgaWYgKCEocjAgPiBlcHNpbG9uJDEpIHx8ICEoZGEwID4gZXBzaWxvbiQxKSkgY29udGV4dC5saW5lVG8oeDEwLCB5MTApO1xyXG5cclxuICAgICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIGlubmVyIHJpbmcgKG9yIHBvaW50KSBoYXZlIHJvdW5kZWQgY29ybmVycz9cclxuICAgICAgICBlbHNlIGlmIChyYzAgPiBlcHNpbG9uJDEpIHtcclxuICAgICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xyXG4gICAgICAgICAgdDEgPSBjb3JuZXJUYW5nZW50cyh4MDEsIHkwMSwgeDAwLCB5MDAsIHIwLCAtcmMwLCBjdyk7XHJcblxyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcclxuXHJcbiAgICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cclxuICAgICAgICAgIGlmIChyYzAgPCByYykgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIE1hdGguYXRhbjIodDAueTAxLCB0MC54MDEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcclxuXHJcbiAgICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMCwgTWF0aC5hdGFuMih0MC55MDEsIHQwLngwMSksIE1hdGguYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMCwgTWF0aC5hdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBNYXRoLmF0YW4yKHQxLmN5ICsgdDEueTExLCB0MS5jeCArIHQxLngxMSksIGN3KTtcclxuICAgICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIE1hdGguYXRhbjIodDEueTExLCB0MS54MTEpLCBNYXRoLmF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XHJcbiAgICAgICAgZWxzZSBjb250ZXh0LmFyYygwLCAwLCByMCwgYTEwLCBhMDAsIGN3KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHJcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBjb250ZXh0ID0gbnVsbCwgYnVmZmVyICsgXCJcIiB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgciA9ICgraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSArICtvdXRlclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSAvIDIsXHJcbiAgICAgICAgICBhID0gKCtzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgKyArZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgLyAyIC0gcGkkMiAvIDI7XHJcbiAgICAgIHJldHVybiBbTWF0aC5jb3MoYSkgKiByLCBNYXRoLnNpbihhKSAqIHJdO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmMuaW5uZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGlubmVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IGlubmVyUmFkaXVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmMub3V0ZXJSYWRpdXMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IG91dGVyUmFkaXVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjb3JuZXJSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogY29ybmVyUmFkaXVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmMucGFkUmFkaXVzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRSYWRpdXMgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJjKSA6IHBhZFJhZGl1cztcclxuICAgIH07XHJcblxyXG4gICAgYXJjLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBhcmMpIDogc3RhcnRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBlbmRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgYXJjLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyYykgOiBwYWRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgYXJjLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGFyYztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIExpbmVhcihjb250ZXh0KSB7XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcblxyXG4gIExpbmVhci5wcm90b3R5cGUgPSB7XHJcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gMDtcclxuICAgIH0sXHJcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcclxuICAgIH0sXHJcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9wb2ludCA9IDA7XHJcbiAgICB9LFxyXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xyXG4gICAgfSxcclxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHggPSAreCwgeSA9ICt5O1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcclxuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxyXG4gICAgICAgIGRlZmF1bHQ6IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGN1cnZlTGluZWFyKGNvbnRleHQpIHtcclxuICAgIHJldHVybiBuZXcgTGluZWFyKGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24geChwKSB7XHJcbiAgICByZXR1cm4gcFswXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHkocCkge1xyXG4gICAgcmV0dXJuIHBbMV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsaW5lKCkge1xyXG4gICAgdmFyIHgkJCA9IHgsXHJcbiAgICAgICAgeSQkID0geSxcclxuICAgICAgICBkZWZpbmVkID0gY29uc3RhbnQkMSh0cnVlKSxcclxuICAgICAgICBjb250ZXh0ID0gbnVsbCxcclxuICAgICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxyXG4gICAgICAgIG91dHB1dCA9IG51bGw7XHJcblxyXG4gICAgZnVuY3Rpb24gbGluZShkYXRhKSB7XHJcbiAgICAgIHZhciBpLFxyXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgZCxcclxuICAgICAgICAgIGRlZmluZWQwID0gZmFsc2UsXHJcbiAgICAgICAgICBidWZmZXI7XHJcblxyXG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcclxuICAgICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XHJcbiAgICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIG91dHB1dC5saW5lU3RhcnQoKTtcclxuICAgICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZmluZWQwKSBvdXRwdXQucG9pbnQoK3gkJChkLCBpLCBkYXRhKSwgK3kkJChkLCBpLCBkYXRhKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgbGluZS54ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4JCQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBsaW5lKSA6IHgkJDtcclxuICAgIH07XHJcblxyXG4gICAgbGluZS55ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5JCQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBsaW5lKSA6IHkkJDtcclxuICAgIH07XHJcblxyXG4gICAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCEhXyksIGxpbmUpIDogZGVmaW5lZDtcclxuICAgIH07XHJcblxyXG4gICAgbGluZS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgbGluZSkgOiBjdXJ2ZTtcclxuICAgIH07XHJcblxyXG4gICAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgbGluZSkgOiBjb250ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbGluZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyZWEkMSgpIHtcclxuICAgIHZhciB4MCA9IHgsXHJcbiAgICAgICAgeDEgPSBudWxsLFxyXG4gICAgICAgIHkwID0gY29uc3RhbnQkMSgwKSxcclxuICAgICAgICB5MSA9IHksXHJcbiAgICAgICAgZGVmaW5lZCA9IGNvbnN0YW50JDEodHJ1ZSksXHJcbiAgICAgICAgY29udGV4dCA9IG51bGwsXHJcbiAgICAgICAgY3VydmUgPSBjdXJ2ZUxpbmVhcixcclxuICAgICAgICBvdXRwdXQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFyZWEoZGF0YSkge1xyXG4gICAgICB2YXIgaSxcclxuICAgICAgICAgIGosXHJcbiAgICAgICAgICBrLFxyXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgZCxcclxuICAgICAgICAgIGRlZmluZWQwID0gZmFsc2UsXHJcbiAgICAgICAgICBidWZmZXIsXHJcbiAgICAgICAgICB4MHogPSBuZXcgQXJyYXkobiksXHJcbiAgICAgICAgICB5MHogPSBuZXcgQXJyYXkobik7XHJcblxyXG4gICAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcclxuICAgICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XHJcbiAgICAgICAgICBpZiAoZGVmaW5lZDAgPSAhZGVmaW5lZDApIHtcclxuICAgICAgICAgICAgaiA9IGk7XHJcbiAgICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcclxuICAgICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcclxuICAgICAgICAgICAgb3V0cHV0LmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgICBmb3IgKGsgPSBpIC0gMTsgayA+PSBqOyAtLWspIHtcclxuICAgICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG91dHB1dC5saW5lRW5kKCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkZWZpbmVkMCkge1xyXG4gICAgICAgICAgeDB6W2ldID0gK3gwKGQsIGksIGRhdGEpLCB5MHpbaV0gPSAreTAoZCwgaSwgZGF0YSk7XHJcbiAgICAgICAgICBvdXRwdXQucG9pbnQoeDEgPyAreDEoZCwgaSwgZGF0YSkgOiB4MHpbaV0sIHkxID8gK3kxKGQsIGksIGRhdGEpIDogeTB6W2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChidWZmZXIpIHJldHVybiBvdXRwdXQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXJlYWxpbmUoKSB7XHJcbiAgICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBhcmVhLnggPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgeDEgPSBudWxsLCBhcmVhKSA6IHgwO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmVhLngwID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeDA7XHJcbiAgICB9O1xyXG5cclxuICAgIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgxID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIGFyZWEpIDogeDE7XHJcbiAgICB9O1xyXG5cclxuICAgIGFyZWEueSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTAgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCB5MSA9IG51bGwsIGFyZWEpIDogeTA7XHJcbiAgICB9O1xyXG5cclxuICAgIGFyZWEueTAgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJlYSkgOiB5MDtcclxuICAgIH07XHJcblxyXG4gICAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeTEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCtfKSwgYXJlYSkgOiB5MTtcclxuICAgIH07XHJcblxyXG4gICAgYXJlYS5saW5lWDAgPVxyXG4gICAgYXJlYS5saW5lWTAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGFyZWEubGluZVkxID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBhcmVhbGluZSgpLngoeDApLnkoeTEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgxKS55KHkwKTtcclxuICAgIH07XHJcblxyXG4gICAgYXJlYS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKCEhXyksIGFyZWEpIDogZGVmaW5lZDtcclxuICAgIH07XHJcblxyXG4gICAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY3VydmUgPSBfLCBjb250ZXh0ICE9IG51bGwgJiYgKG91dHB1dCA9IGN1cnZlKGNvbnRleHQpKSwgYXJlYSkgOiBjdXJ2ZTtcclxuICAgIH07XHJcblxyXG4gICAgYXJlYS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gYXJlYTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlc2NlbmRpbmckMShhLCBiKSB7XHJcbiAgICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpZGVudGl0eSQxKGQpIHtcclxuICAgIHJldHVybiBkO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGllKCkge1xyXG4gICAgdmFyIHZhbHVlID0gaWRlbnRpdHkkMSxcclxuICAgICAgICBzb3J0VmFsdWVzID0gZGVzY2VuZGluZyQxLFxyXG4gICAgICAgIHNvcnQgPSBudWxsLFxyXG4gICAgICAgIHN0YXJ0QW5nbGUgPSBjb25zdGFudCQxKDApLFxyXG4gICAgICAgIGVuZEFuZ2xlID0gY29uc3RhbnQkMSh0YXUkMiksXHJcbiAgICAgICAgcGFkQW5nbGUgPSBjb25zdGFudCQxKDApO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBpZShkYXRhKSB7XHJcbiAgICAgIHZhciBpLFxyXG4gICAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgaixcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICBzdW0gPSAwLFxyXG4gICAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXHJcbiAgICAgICAgICBhcmNzID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgICAgYTAgPSArc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxyXG4gICAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUkMiwgTWF0aC5tYXgoLXRhdSQyLCBlbmRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIC0gYTApKSxcclxuICAgICAgICAgIGExLFxyXG4gICAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxyXG4gICAgICAgICAgcGEgPSBwICogKGRhIDwgMCA/IC0xIDogMSksXHJcbiAgICAgICAgICB2O1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XHJcbiAgICAgICAgICBzdW0gKz0gdjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxyXG4gICAgICBpZiAoc29ydFZhbHVlcyAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnRWYWx1ZXMoYXJjc1tpXSwgYXJjc1tqXSk7IH0pO1xyXG4gICAgICBlbHNlIGlmIChzb3J0ICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydChkYXRhW2ldLCBkYXRhW2pdKTsgfSk7XHJcblxyXG4gICAgICAvLyBDb21wdXRlIHRoZSBhcmNzISBUaGV5IGFyZSBzdG9yZWQgaW4gdGhlIG9yaWdpbmFsIGRhdGEncyBvcmRlci5cclxuICAgICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XHJcbiAgICAgICAgaiA9IGluZGV4W2ldLCB2ID0gYXJjc1tqXSwgYTEgPSBhMCArICh2ID4gMCA/IHYgKiBrIDogMCkgKyBwYSwgYXJjc1tqXSA9IHtcclxuICAgICAgICAgIGRhdGE6IGRhdGFbal0sXHJcbiAgICAgICAgICBpbmRleDogaSxcclxuICAgICAgICAgIHZhbHVlOiB2LFxyXG4gICAgICAgICAgc3RhcnRBbmdsZTogYTAsXHJcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXHJcbiAgICAgICAgICBwYWRBbmdsZTogcFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBhcmNzO1xyXG4gICAgfVxyXG5cclxuICAgIHBpZS52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodmFsdWUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIHBpZS5zb3J0VmFsdWVzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xyXG4gICAgfTtcclxuXHJcbiAgICBwaWUuc29ydCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydCA9IF8sIHNvcnRWYWx1ZXMgPSBudWxsLCBwaWUpIDogc29ydDtcclxuICAgIH07XHJcblxyXG4gICAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgcGllLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChlbmRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHBpZSkgOiBlbmRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgcGllLnBhZEFuZ2xlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHBpZSkgOiBwYWRBbmdsZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHBpZTtcclxuICB9XHJcblxyXG4gIHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcclxuXHJcbiAgZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XHJcbiAgICB0aGlzLl9jdXJ2ZSA9IGN1cnZlO1xyXG4gIH1cclxuXHJcbiAgUmFkaWFsLnByb3RvdHlwZSA9IHtcclxuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2N1cnZlLmFyZWFTdGFydCgpO1xyXG4gICAgfSxcclxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9jdXJ2ZS5hcmVhRW5kKCk7XHJcbiAgICB9LFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fY3VydmUubGluZVN0YXJ0KCk7XHJcbiAgICB9LFxyXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2N1cnZlLmxpbmVFbmQoKTtcclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xyXG4gICAgICB0aGlzLl9jdXJ2ZS5wb2ludChyICogTWF0aC5zaW4oYSksIHIgKiAtTWF0aC5jb3MoYSkpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcclxuICAgICAgcmV0dXJuIG5ldyBSYWRpYWwoY3VydmUoY29udGV4dCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJhZGlhbC5fY3VydmUgPSBjdXJ2ZTtcclxuXHJcbiAgICByZXR1cm4gcmFkaWFsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmFkaWFsTGluZShsKSB7XHJcbiAgICB2YXIgYyA9IGwuY3VydmU7XHJcblxyXG4gICAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcclxuICAgIGwucmFkaXVzID0gbC55LCBkZWxldGUgbC55O1xyXG5cclxuICAgIGwuY3VydmUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gYyhjdXJ2ZVJhZGlhbChfKSkgOiBjKCkuX2N1cnZlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJhZGlhbExpbmUkMSgpIHtcclxuICAgIHJldHVybiByYWRpYWxMaW5lKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmFkaWFsQXJlYSgpIHtcclxuICAgIHZhciBhID0gYXJlYSQxKCkuY3VydmUoY3VydmVSYWRpYWxMaW5lYXIpLFxyXG4gICAgICAgIGMgPSBhLmN1cnZlLFxyXG4gICAgICAgIHgwID0gYS5saW5lWDAsXHJcbiAgICAgICAgeDEgPSBhLmxpbmVYMSxcclxuICAgICAgICB5MCA9IGEubGluZVkwLFxyXG4gICAgICAgIHkxID0gYS5saW5lWTE7XHJcblxyXG4gICAgYS5hbmdsZSA9IGEueCwgZGVsZXRlIGEueDtcclxuICAgIGEuc3RhcnRBbmdsZSA9IGEueDAsIGRlbGV0ZSBhLngwO1xyXG4gICAgYS5lbmRBbmdsZSA9IGEueDEsIGRlbGV0ZSBhLngxO1xyXG4gICAgYS5yYWRpdXMgPSBhLnksIGRlbGV0ZSBhLnk7XHJcbiAgICBhLmlubmVyUmFkaXVzID0gYS55MCwgZGVsZXRlIGEueTA7XHJcbiAgICBhLm91dGVyUmFkaXVzID0gYS55MSwgZGVsZXRlIGEueTE7XHJcbiAgICBhLmxpbmVTdGFydEFuZ2xlID0gZnVuY3Rpb24oKSB7IHJldHVybiByYWRpYWxMaW5lKHgwKCkpOyB9LCBkZWxldGUgYS5saW5lWDA7XHJcbiAgICBhLmxpbmVFbmRBbmdsZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcmFkaWFsTGluZSh4MSgpKTsgfSwgZGVsZXRlIGEubGluZVgxO1xyXG4gICAgYS5saW5lSW5uZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHJhZGlhbExpbmUoeTAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMDtcclxuICAgIGEubGluZU91dGVyUmFkaXVzID0gZnVuY3Rpb24oKSB7IHJldHVybiByYWRpYWxMaW5lKHkxKCkpOyB9LCBkZWxldGUgYS5saW5lWTE7XHJcblxyXG4gICAgYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjKGN1cnZlUmFkaWFsKF8pKSA6IGMoKS5fY3VydmU7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBhO1xyXG4gIH1cclxuXHJcbiAgdmFyIGNpcmNsZSA9IHtcclxuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcclxuICAgICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIHBpJDIpO1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbyhyLCAwKTtcclxuICAgICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1JDIpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBjcm9zcyQxID0ge1xyXG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xyXG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gNSkgLyAyO1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbygtMyAqIHIsIC1yKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oLXIsIC1yKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oLXIsIC0zICogcik7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIC0zICogcik7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKHIsIC1yKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIC1yKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oMyAqIHIsIHIpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhyLCByKTtcclxuICAgICAgY29udGV4dC5saW5lVG8ociwgMyAqIHIpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgMyAqIHIpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygtciwgcik7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC0zICogciwgcik7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHRhbjMwID0gTWF0aC5zcXJ0KDEgLyAzKTtcclxuICB2YXIgdGFuMzBfMiA9IHRhbjMwICogMjtcclxuICB2YXIgZGlhbW9uZCA9IHtcclxuICAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcclxuICAgICAgdmFyIHkgPSBNYXRoLnNxcnQoc2l6ZSAvIHRhbjMwXzIpLFxyXG4gICAgICAgICAgeCA9IHkgKiB0YW4zMDtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgLXkpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCAwKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oMCwgeSk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKC14LCAwKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIga2EgPSAwLjg5MDgxMzA5MTUyOTI4NTIyODEwO1xyXG4gIHZhciBrciA9IE1hdGguc2luKHBpJDIgLyAxMCkgLyBNYXRoLnNpbig3ICogcGkkMiAvIDEwKTtcclxuICB2YXIga3ggPSBNYXRoLnNpbih0YXUkMiAvIDEwKSAqIGtyO1xyXG4gIHZhciBreSA9IC1NYXRoLmNvcyh0YXUkMiAvIDEwKSAqIGtyO1xyXG4gIHZhciBzdGFyID0ge1xyXG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xyXG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplICoga2EpLFxyXG4gICAgICAgICAgeCA9IGt4ICogcixcclxuICAgICAgICAgIHkgPSBreSAqIHI7XHJcbiAgICAgIGNvbnRleHQubW92ZVRvKDAsIC1yKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oeCwgeSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgNTsgKytpKSB7XHJcbiAgICAgICAgdmFyIGEgPSB0YXUkMiAqIGkgLyA1LFxyXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MoYSksXHJcbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhzICogciwgLWMgKiByKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhjICogeCAtIHMgKiB5LCBzICogeCArIGMgKiB5KTtcclxuICAgICAgfVxyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBzcXVhcmUgPSB7XHJcbiAgICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XHJcbiAgICAgIHZhciB3ID0gTWF0aC5zcXJ0KHNpemUpLFxyXG4gICAgICAgICAgeCA9IC13IC8gMjtcclxuICAgICAgY29udGV4dC5yZWN0KHgsIHgsIHcsIHcpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBzcXJ0MyA9IE1hdGguc3FydCgzKTtcclxuXHJcbiAgdmFyIHRyaWFuZ2xlID0ge1xyXG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xyXG4gICAgICB2YXIgeSA9IC1NYXRoLnNxcnQoc2l6ZSAvIChzcXJ0MyAqIDMpKTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oMCwgeSAqIDIpO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKHNxcnQzICogeSwgLXkpO1xyXG4gICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBjID0gLTAuNTtcclxuICB2YXIgcyA9IE1hdGguc3FydCgzKSAvIDI7XHJcbiAgdmFyIGsgPSAxIC8gTWF0aC5zcXJ0KDEyKTtcclxuICB2YXIgYSA9IChrIC8gMiArIDEpICogMztcclxuICB2YXIgd3llID0ge1xyXG4gICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xyXG4gICAgICB2YXIgciA9IE1hdGguc3FydChzaXplIC8gYSksXHJcbiAgICAgICAgICB4MCA9IHIgLyAyLFxyXG4gICAgICAgICAgeTAgPSByICogayxcclxuICAgICAgICAgIHgxID0geDAsXHJcbiAgICAgICAgICB5MSA9IHIgKiBrICsgcixcclxuICAgICAgICAgIHgyID0gLXgxLFxyXG4gICAgICAgICAgeTIgPSB5MTtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oeDIsIHkyKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oYyAqIHgwIC0gcyAqIHkwLCBzICogeDAgKyBjICogeTApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgLSBzICogeTEsIHMgKiB4MSArIGMgKiB5MSk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiAtIHMgKiB5MiwgcyAqIHgyICsgYyAqIHkyKTtcclxuICAgICAgY29udGV4dC5saW5lVG8oYyAqIHgwICsgcyAqIHkwLCBjICogeTAgLSBzICogeDApO1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyhjICogeDEgKyBzICogeTEsIGMgKiB5MSAtIHMgKiB4MSk7XHJcbiAgICAgIGNvbnRleHQubGluZVRvKGMgKiB4MiArIHMgKiB5MiwgYyAqIHkyIC0gcyAqIHgyKTtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgc3ltYm9scyA9IFtcclxuICAgIGNpcmNsZSxcclxuICAgIGNyb3NzJDEsXHJcbiAgICBkaWFtb25kLFxyXG4gICAgc3F1YXJlLFxyXG4gICAgc3RhcixcclxuICAgIHRyaWFuZ2xlLFxyXG4gICAgd3llXHJcbiAgXTtcclxuXHJcbiAgZnVuY3Rpb24gc3ltYm9sKCkge1xyXG4gICAgdmFyIHR5cGUgPSBjb25zdGFudCQxKGNpcmNsZSksXHJcbiAgICAgICAgc2l6ZSA9IGNvbnN0YW50JDEoNjQpLFxyXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIHN5bWJvbCgpIHtcclxuICAgICAgdmFyIGJ1ZmZlcjtcclxuICAgICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xyXG4gICAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcclxuICAgICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc3ltYm9sLnR5cGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoXyksIHN5bWJvbCkgOiB0eXBlO1xyXG4gICAgfTtcclxuXHJcbiAgICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2l6ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHN5bWJvbCkgOiBzaXplO1xyXG4gICAgfTtcclxuXHJcbiAgICBzeW1ib2wuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY29udGV4dCA9IF8gPT0gbnVsbCA/IG51bGwgOiBfLCBzeW1ib2wpIDogY29udGV4dDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHN5bWJvbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vb3AoKSB7fVxyXG5cclxuICBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XHJcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oXHJcbiAgICAgICgyICogdGhhdC5feDAgKyB0aGF0Ll94MSkgLyAzLFxyXG4gICAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcclxuICAgICAgKHRoYXQuX3gwICsgMiAqIHRoYXQuX3gxKSAvIDMsXHJcbiAgICAgICh0aGF0Ll95MCArIDIgKiB0aGF0Ll95MSkgLyAzLFxyXG4gICAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXHJcbiAgICAgICh0aGF0Ll95MCArIDQgKiB0aGF0Ll95MSArIHkpIC8gNlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEJhc2lzKGNvbnRleHQpIHtcclxuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgQmFzaXMucHJvdG90eXBlID0ge1xyXG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IDA7XHJcbiAgICB9LFxyXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XHJcbiAgICB9LFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gcHJvY2VlZFxyXG4gICAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICB9LFxyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3k7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcclxuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fY29udGV4dC5saW5lVG8oKDUgKiB0aGlzLl94MCArIHRoaXMuX3gxKSAvIDYsICg1ICogdGhpcy5feTAgKyB0aGlzLl95MSkgLyA2KTsgLy8gcHJvY2VlZFxyXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBiYXNpcyhjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQmFzaXNDbG9zZWQoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBCYXNpc0Nsb3NlZC5wcm90b3R5cGUgPSB7XHJcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXHJcbiAgICBhcmVhRW5kOiBub29wLFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSBOYU47XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMToge1xyXG4gICAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAyOiB7XHJcbiAgICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDIgKyAyICogdGhpcy5feDMpIC8gMywgKHRoaXMuX3kyICsgMiAqIHRoaXMuX3kzKSAvIDMpO1xyXG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oKHRoaXMuX3gzICsgMiAqIHRoaXMuX3gyKSAvIDMsICh0aGlzLl95MyArIDIgKiB0aGlzLl95MikgLyAzKTtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAzOiB7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gyLCB0aGlzLl95Mik7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MiA9IHgsIHRoaXMuX3kyID0geTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX3gzID0geCwgdGhpcy5feTMgPSB5OyBicmVhaztcclxuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDQgPSB4LCB0aGlzLl95NCA9IHk7IHRoaXMuX2NvbnRleHQubW92ZVRvKCh0aGlzLl94MCArIDQgKiB0aGlzLl94MSArIHgpIC8gNiwgKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2KTsgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcclxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcclxuICAgIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBCYXNpc09wZW4ucHJvdG90eXBlID0ge1xyXG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IDA7XHJcbiAgICB9LFxyXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XHJcbiAgICB9LFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSBOYU47XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICB9LFxyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3k7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB2YXIgeDAgPSAodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsIHkwID0gKHRoaXMuX3kwICsgNCAqIHRoaXMuX3kxICsgeSkgLyA2OyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeDAsIHkwKSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgwLCB5MCk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXHJcbiAgICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcclxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGJhc2lzT3Blbihjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IEJhc2lzT3Blbihjb250ZXh0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEJ1bmRsZShjb250ZXh0LCBiZXRhKSB7XHJcbiAgICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcclxuICAgIHRoaXMuX2JldGEgPSBiZXRhO1xyXG4gIH1cclxuXHJcbiAgQnVuZGxlLnByb3RvdHlwZSA9IHtcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3ggPSBbXTtcclxuICAgICAgdGhpcy5feSA9IFtdO1xyXG4gICAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHggPSB0aGlzLl94LFxyXG4gICAgICAgICAgeSA9IHRoaXMuX3ksXHJcbiAgICAgICAgICBqID0geC5sZW5ndGggLSAxO1xyXG5cclxuICAgICAgaWYgKGogPiAwKSB7XHJcbiAgICAgICAgdmFyIHgwID0geFswXSxcclxuICAgICAgICAgICAgeTAgPSB5WzBdLFxyXG4gICAgICAgICAgICBkeCA9IHhbal0gLSB4MCxcclxuICAgICAgICAgICAgZHkgPSB5W2pdIC0geTAsXHJcbiAgICAgICAgICAgIGkgPSAtMSxcclxuICAgICAgICAgICAgdDtcclxuXHJcbiAgICAgICAgd2hpbGUgKCsraSA8PSBqKSB7XHJcbiAgICAgICAgICB0ID0gaSAvIGo7XHJcbiAgICAgICAgICB0aGlzLl9iYXNpcy5wb2ludChcclxuICAgICAgICAgICAgdGhpcy5fYmV0YSAqIHhbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHgwICsgdCAqIGR4KSxcclxuICAgICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcclxuICAgICAgdGhpcy5fYmFzaXMubGluZUVuZCgpO1xyXG4gICAgfSxcclxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHRoaXMuX3gucHVzaCgreCk7XHJcbiAgICAgIHRoaXMuX3kucHVzaCgreSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGJ1bmRsZSA9IChmdW5jdGlvbiBjdXN0b20oYmV0YSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGJ1bmRsZShjb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiBiZXRhID09PSAxID8gbmV3IEJhc2lzKGNvbnRleHQpIDogbmV3IEJ1bmRsZShjb250ZXh0LCBiZXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBidW5kbGUuYmV0YSA9IGZ1bmN0aW9uKGJldGEpIHtcclxuICAgICAgcmV0dXJuIGN1c3RvbSgrYmV0YSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBidW5kbGU7XHJcbiAgfSkoMC44NSk7XHJcblxyXG4gIGZ1bmN0aW9uIHBvaW50JDEodGhhdCwgeCwgeSkge1xyXG4gICAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKFxyXG4gICAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXHJcbiAgICAgIHRoYXQuX3kxICsgdGhhdC5fayAqICh0aGF0Ll95MiAtIHRoYXQuX3kwKSxcclxuICAgICAgdGhhdC5feDIgKyB0aGF0Ll9rICogKHRoYXQuX3gxIC0geCksXHJcbiAgICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxyXG4gICAgICB0aGF0Ll94MixcclxuICAgICAgdGhhdC5feTJcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcclxuICB9XHJcblxyXG4gIENhcmRpbmFsLnByb3RvdHlwZSA9IHtcclxuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xyXG4gICAgfSxcclxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xyXG4gICAgfSxcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcclxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xyXG4gICAgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcclxuICAgICAgICBjYXNlIDM6IHBvaW50JDEodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICB9LFxyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3k7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl94MSA9IHgsIHRoaXMuX3kxID0geTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcclxuICAgICAgICBkZWZhdWx0OiBwb2ludCQxKHRoaXMsIHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY2FyZGluYWwgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcclxuXHJcbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcclxuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBjYXJkaW5hbDtcclxuICB9KSgwKTtcclxuXHJcbiAgZnVuY3Rpb24gQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbikge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XHJcbiAgfVxyXG5cclxuICBDYXJkaW5hbENsb3NlZC5wcm90b3R5cGUgPSB7XHJcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXHJcbiAgICBhcmVhRW5kOiBub29wLFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cclxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xyXG4gICAgICB0aGlzLl9wb2ludCA9IDA7XHJcbiAgICB9LFxyXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XHJcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgMjoge1xyXG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAzOiB7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MyA9IHgsIHRoaXMuX3kzID0geTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g1ID0geCwgdGhpcy5feTUgPSB5OyBicmVhaztcclxuICAgICAgICBkZWZhdWx0OiBwb2ludCQxKHRoaXMsIHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY2FyZGluYWxDbG9zZWQgPSAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcclxuXHJcbiAgICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XHJcbiAgICAgIHJldHVybiBuZXcgQ2FyZGluYWxDbG9zZWQoY29udGV4dCwgdGVuc2lvbik7XHJcbiAgICB9XHJcblxyXG4gICAgY2FyZGluYWwudGVuc2lvbiA9IGZ1bmN0aW9uKHRlbnNpb24pIHtcclxuICAgICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBjYXJkaW5hbDtcclxuICB9KSgwKTtcclxuXHJcbiAgZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcclxuICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgdGhpcy5fayA9ICgxIC0gdGVuc2lvbikgLyA2O1xyXG4gIH1cclxuXHJcbiAgQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcclxuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xyXG4gICAgfSxcclxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xyXG4gICAgfSxcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcclxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xyXG4gICAgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMykpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyBicmVhaztcclxuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAzOiB0aGlzLl9wb2ludCA9IDQ7IC8vIHByb2NlZWRcclxuICAgICAgICBkZWZhdWx0OiBwb2ludCQxKHRoaXMsIHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY2FyZGluYWxPcGVuID0gKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xyXG4gICAgICByZXR1cm4gbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCB0ZW5zaW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xyXG4gICAgICByZXR1cm4gY3VzdG9tKCt0ZW5zaW9uKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNhcmRpbmFsO1xyXG4gIH0pKDApO1xyXG5cclxuICBmdW5jdGlvbiBwb2ludCQyKHRoYXQsIHgsIHkpIHtcclxuICAgIHZhciB4MSA9IHRoYXQuX3gxLFxyXG4gICAgICAgIHkxID0gdGhhdC5feTEsXHJcbiAgICAgICAgeDIgPSB0aGF0Ll94MixcclxuICAgICAgICB5MiA9IHRoYXQuX3kyO1xyXG5cclxuICAgIGlmICh0aGF0Ll9sMDFfYSA+IGVwc2lsb24kMSkge1xyXG4gICAgICB2YXIgYSA9IDIgKiB0aGF0Ll9sMDFfMmEgKyAzICogdGhhdC5fbDAxX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcclxuICAgICAgICAgIG4gPSAzICogdGhhdC5fbDAxX2EgKiAodGhhdC5fbDAxX2EgKyB0aGF0Ll9sMTJfYSk7XHJcbiAgICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcclxuICAgICAgeTEgPSAoeTEgKiBhIC0gdGhhdC5feTAgKiB0aGF0Ll9sMTJfMmEgKyB0aGF0Ll95MiAqIHRoYXQuX2wwMV8yYSkgLyBuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGF0Ll9sMjNfYSA+IGVwc2lsb24kMSkge1xyXG4gICAgICB2YXIgYiA9IDIgKiB0aGF0Ll9sMjNfMmEgKyAzICogdGhhdC5fbDIzX2EgKiB0aGF0Ll9sMTJfYSArIHRoYXQuX2wxMl8yYSxcclxuICAgICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XHJcbiAgICAgIHgyID0gKHgyICogYiArIHRoYXQuX3gxICogdGhhdC5fbDIzXzJhIC0geCAqIHRoYXQuX2wxMl8yYSkgLyBtO1xyXG4gICAgICB5MiA9ICh5MiAqIGIgKyB0aGF0Ll95MSAqIHRoYXQuX2wyM18yYSAtIHkgKiB0aGF0Ll9sMTJfMmEpIC8gbTtcclxuICAgIH1cclxuXHJcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSB7XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XHJcbiAgfVxyXG5cclxuICBDYXRtdWxsUm9tLnByb3RvdHlwZSA9IHtcclxuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xyXG4gICAgfSxcclxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xyXG4gICAgfSxcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcclxuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cclxuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cclxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xyXG4gICAgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcclxuICAgICAgICBjYXNlIDM6IHRoaXMucG9pbnQodGhpcywgdGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICB9LFxyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3k7XHJcblxyXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxyXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XHJcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcclxuICAgICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcclxuICAgICAgICBkZWZhdWx0OiBwb2ludCQyKHRoaXMsIHgsIHkpOyBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSwgdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYTtcclxuICAgICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XHJcbiAgICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0gdGhpcy5feDIsIHRoaXMuX3gyID0geDtcclxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBjYXRtdWxsUm9tID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xyXG4gICAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbShjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWwoY29udGV4dCwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XHJcbiAgICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNhdG11bGxSb207XHJcbiAgfSkoMC41KTtcclxuXHJcbiAgZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xyXG4gIH1cclxuXHJcbiAgQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XHJcbiAgICBhcmVhU3RhcnQ6IG5vb3AsXHJcbiAgICBhcmVhRW5kOiBub29wLFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID0gdGhpcy5feDMgPSB0aGlzLl94NCA9IHRoaXMuX3g1ID1cclxuICAgICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xyXG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxyXG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxyXG4gICAgICB0aGlzLl9wb2ludCA9IDA7XHJcbiAgICB9LFxyXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XHJcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgMjoge1xyXG4gICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAzOiB7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XHJcbiAgICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuXHJcbiAgICAgIGlmICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXHJcbiAgICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcclxuICAgICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94NCA9IHgsIHRoaXMuX3k0ID0geSk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyB0aGlzLl94NSA9IHgsIHRoaXMuX3k1ID0geTsgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMih0aGlzLCB4LCB5KTsgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XHJcbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSwgdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhO1xyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY2F0bXVsbFJvbUNsb3NlZCA9IChmdW5jdGlvbiBjdXN0b20oYWxwaGEpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBjYXRtdWxsUm9tKGNvbnRleHQpIHtcclxuICAgICAgcmV0dXJuIGFscGhhID8gbmV3IENhdG11bGxSb21DbG9zZWQoY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsQ2xvc2VkKGNvbnRleHQsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xyXG4gICAgICByZXR1cm4gY3VzdG9tKCthbHBoYSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBjYXRtdWxsUm9tO1xyXG4gIH0pKDAuNSk7XHJcblxyXG4gIGZ1bmN0aW9uIENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSB7XHJcbiAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XHJcbiAgfVxyXG5cclxuICBDYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XHJcbiAgICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gMDtcclxuICAgIH0sXHJcbiAgICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IE5hTjtcclxuICAgIH0sXHJcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxyXG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XHJcbiAgICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XHJcbiAgICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICB9LFxyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgeCA9ICt4LCB5ID0gK3k7XHJcblxyXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHtcclxuICAgICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxyXG4gICAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XHJcbiAgICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyBicmVhaztcclxuICAgICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gyLCB0aGlzLl95MikgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh0aGlzLl94MiwgdGhpcy5feTIpOyBicmVhaztcclxuICAgICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxyXG4gICAgICAgIGRlZmF1bHQ6IHBvaW50JDIodGhpcywgeCwgeSk7IGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hLCB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hO1xyXG4gICAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEsIHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYTtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xyXG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHRoaXMuX3kyLCB0aGlzLl95MiA9IHk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNhdG11bGxSb21PcGVuID0gKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xyXG4gICAgICByZXR1cm4gYWxwaGEgPyBuZXcgQ2F0bXVsbFJvbU9wZW4oY29udGV4dCwgYWxwaGEpIDogbmV3IENhcmRpbmFsT3Blbihjb250ZXh0LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBjYXRtdWxsUm9tLmFscGhhID0gZnVuY3Rpb24oYWxwaGEpIHtcclxuICAgICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gY2F0bXVsbFJvbTtcclxuICB9KSgwLjUpO1xyXG5cclxuICBmdW5jdGlvbiBMaW5lYXJDbG9zZWQoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBMaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xyXG4gICAgYXJlYVN0YXJ0OiBub29wLFxyXG4gICAgYXJlYUVuZDogbm9vcCxcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfSxcclxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHggPSAreCwgeSA9ICt5O1xyXG4gICAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xyXG4gICAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gbGluZWFyQ2xvc2VkKGNvbnRleHQpIHtcclxuICAgIHJldHVybiBuZXcgTGluZWFyQ2xvc2VkKGNvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2lnbih4KSB7XHJcbiAgICByZXR1cm4geCA8IDAgPyAtMSA6IDE7XHJcbiAgfVxyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxyXG4gIC8vIHRoZSBmb2xsb3dpbmcgcGFwZXI6IFN0ZWZmZW4sIE0uIDE5OTAuIEEgU2ltcGxlIE1ldGhvZCBmb3IgTW9ub3RvbmljXHJcbiAgLy8gSW50ZXJwb2xhdGlvbiBpbiBPbmUgRGltZW5zaW9uLiBBc3Ryb25vbXkgYW5kIEFzdHJvcGh5c2ljcywgVm9sLiAyMzksIE5PLlxyXG4gIC8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cclxuICBmdW5jdGlvbiBzbG9wZTModGhhdCwgeDIsIHkyKSB7XHJcbiAgICB2YXIgaDAgPSB0aGF0Ll94MSAtIHRoYXQuX3gwLFxyXG4gICAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcclxuICAgICAgICBzMCA9ICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIChoMCB8fCBoMSA8IDAgJiYgLTApLFxyXG4gICAgICAgIHMxID0gKHkyIC0gdGhhdC5feTEpIC8gKGgxIHx8IGgwIDwgMCAmJiAtMCksXHJcbiAgICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XHJcbiAgICByZXR1cm4gKHNpZ24oczApICsgc2lnbihzMSkpICogTWF0aC5taW4oTWF0aC5hYnMoczApLCBNYXRoLmFicyhzMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FsY3VsYXRlIGEgb25lLXNpZGVkIHNsb3BlLlxyXG4gIGZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XHJcbiAgICB2YXIgaCA9IHRoYXQuX3gxIC0gdGhhdC5feDA7XHJcbiAgICByZXR1cm4gaCA/ICgzICogKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gaCAtIHQpIC8gMiA6IHQ7XHJcbiAgfVxyXG5cclxuICAvLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXHJcbiAgLy8gXCJ5b3UgY2FuIGV4cHJlc3MgY3ViaWMgSGVybWl0ZSBpbnRlcnBvbGF0aW9uIGluIHRlcm1zIG9mIGN1YmljIELDqXppZXIgY3VydmVzXHJcbiAgLy8gd2l0aCByZXNwZWN0IHRvIHRoZSBmb3VyIHZhbHVlcyBwMCwgcDAgKyBtMCAvIDMsIHAxIC0gbTEgLyAzLCBwMVwiLlxyXG4gIGZ1bmN0aW9uIHBvaW50JDModGhhdCwgdDAsIHQxKSB7XHJcbiAgICB2YXIgeDAgPSB0aGF0Ll94MCxcclxuICAgICAgICB5MCA9IHRoYXQuX3kwLFxyXG4gICAgICAgIHgxID0gdGhhdC5feDEsXHJcbiAgICAgICAgeTEgPSB0aGF0Ll95MSxcclxuICAgICAgICBkeCA9ICh4MSAtIHgwKSAvIDM7XHJcbiAgICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDAgKyBkeCwgeTAgKyBkeCAqIHQwLCB4MSAtIGR4LCB5MSAtIGR4ICogdDEsIHgxLCB5MSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBNb25vdG9uZVgucHJvdG90eXBlID0ge1xyXG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IDA7XHJcbiAgICB9LFxyXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XHJcbiAgICB9LFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XHJcbiAgICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPVxyXG4gICAgICB0aGlzLl90MCA9IE5hTjtcclxuICAgICAgdGhpcy5fcG9pbnQgPSAwO1xyXG4gICAgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XHJcbiAgICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcclxuICAgICAgICBjYXNlIDM6IHBvaW50JDModGhpcywgdGhpcy5fdDAsIHNsb3BlMih0aGlzLCB0aGlzLl90MCkpOyBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB2YXIgdDEgPSBOYU47XHJcblxyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuICAgICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjogdGhpcy5fcG9pbnQgPSAzOyBwb2ludCQzKHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogcG9pbnQkMyh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xyXG4gICAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XHJcbiAgICAgIHRoaXMuX3QwID0gdDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBNb25vdG9uZVkoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcclxuICB9XHJcblxyXG4gIChNb25vdG9uZVkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNb25vdG9uZVgucHJvdG90eXBlKSkucG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICBNb25vdG9uZVgucHJvdG90eXBlLnBvaW50LmNhbGwodGhpcywgeSwgeCk7XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBSZWZsZWN0Q29udGV4dC5wcm90b3R5cGUgPSB7XHJcbiAgICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXHJcbiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uKCkgeyB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpOyB9LFxyXG4gICAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuX2NvbnRleHQubGluZVRvKHksIHgpOyB9LFxyXG4gICAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IE1vbm90b25lWChjb250ZXh0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vbm90b25lWShjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IE1vbm90b25lWShjb250ZXh0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIE5hdHVyYWwoY29udGV4dCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBOYXR1cmFsLnByb3RvdHlwZSA9IHtcclxuICAgIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSAwO1xyXG4gICAgfSxcclxuICAgIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLl9saW5lID0gTmFOO1xyXG4gICAgfSxcclxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX3ggPSBbXTtcclxuICAgICAgdGhpcy5feSA9IFtdO1xyXG4gICAgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgeCA9IHRoaXMuX3gsXHJcbiAgICAgICAgICB5ID0gdGhpcy5feSxcclxuICAgICAgICAgIG4gPSB4Lmxlbmd0aDtcclxuXHJcbiAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHhbMF0sIHlbMF0pIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeFswXSwgeVswXSk7XHJcbiAgICAgICAgaWYgKG4gPT09IDIpIHtcclxuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgcHggPSBjb250cm9sUG9pbnRzKHgpLFxyXG4gICAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcclxuICAgICAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAxOyBpMSA8IG47ICsraTAsICsraTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHB4WzBdW2kwXSwgcHlbMF1baTBdLCBweFsxXVtpMF0sIHB5WzFdW2kwXSwgeFtpMV0sIHlbaTFdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIG4gPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XHJcbiAgICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB0aGlzLl94LnB1c2goK3gpO1xyXG4gICAgICB0aGlzLl95LnB1c2goK3kpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIFNlZSBodHRwczovL3d3dy5wYXJ0aWNsZWluY2VsbC5jb20vMjAxMi9iZXppZXItc3BsaW5lcy8gZm9yIGRlcml2YXRpb24uXHJcbiAgZnVuY3Rpb24gY29udHJvbFBvaW50cyh4KSB7XHJcbiAgICB2YXIgaSxcclxuICAgICAgICBuID0geC5sZW5ndGggLSAxLFxyXG4gICAgICAgIG0sXHJcbiAgICAgICAgYSA9IG5ldyBBcnJheShuKSxcclxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobik7XHJcbiAgICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XHJcbiAgICBmb3IgKGkgPSAxOyBpIDwgbiAtIDE7ICsraSkgYVtpXSA9IDEsIGJbaV0gPSA0LCByW2ldID0gNCAqIHhbaV0gKyAyICogeFtpICsgMV07XHJcbiAgICBhW24gLSAxXSA9IDIsIGJbbiAtIDFdID0gNywgcltuIC0gMV0gPSA4ICogeFtuIC0gMV0gKyB4W25dO1xyXG4gICAgZm9yIChpID0gMTsgaSA8IG47ICsraSkgbSA9IGFbaV0gLyBiW2kgLSAxXSwgYltpXSAtPSBtLCByW2ldIC09IG0gKiByW2kgLSAxXTtcclxuICAgIGFbbiAtIDFdID0gcltuIC0gMV0gLyBiW24gLSAxXTtcclxuICAgIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IC0taSkgYVtpXSA9IChyW2ldIC0gYVtpICsgMV0pIC8gYltpXTtcclxuICAgIGJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG4gLSAxOyArK2kpIGJbaV0gPSAyICogeFtpICsgMV0gLSBhW2kgKyAxXTtcclxuICAgIHJldHVybiBbYSwgYl07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuYXR1cmFsKGNvbnRleHQpIHtcclxuICAgIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFN0ZXAoY29udGV4dCwgdCkge1xyXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLl90ID0gdDtcclxuICB9XHJcblxyXG4gIFN0ZXAucHJvdG90eXBlID0ge1xyXG4gICAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5fbGluZSA9IDA7XHJcbiAgICB9LFxyXG4gICAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuX2xpbmUgPSBOYU47XHJcbiAgICB9LFxyXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5feCA9IHRoaXMuX3kgPSBOYU47XHJcbiAgICAgIHRoaXMuX3BvaW50ID0gMDtcclxuICAgIH0sXHJcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcclxuICAgICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICBpZiAodGhpcy5fbGluZSA+PSAwKSB0aGlzLl90ID0gMSAtIHRoaXMuX3QsIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcclxuICAgIH0sXHJcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB4ID0gK3gsIHkgPSAreTtcclxuICAgICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xyXG4gICAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IC8vIHByb2NlZWRcclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fdCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gsIHkpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB4MSA9IHRoaXMuX3ggKiAoMSAtIHRoaXMuX3QpICsgeCAqIHRoaXMuX3Q7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcclxuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oeDEsIHkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzdGVwKGNvbnRleHQpIHtcclxuICAgIHJldHVybiBuZXcgU3RlcChjb250ZXh0LCAwLjUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RlcEJlZm9yZShjb250ZXh0KSB7XHJcbiAgICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xyXG4gICAgcmV0dXJuIG5ldyBTdGVwKGNvbnRleHQsIDEpO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNsaWNlJDIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4gIGZ1bmN0aW9uIG5vbmUoc2VyaWVzLCBvcmRlcikge1xyXG4gICAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDEpKSByZXR1cm47XHJcbiAgICBmb3IgKHZhciBpID0gMSwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICBzMCA9IHMxLCBzMSA9IHNlcmllc1tvcmRlcltpXV07XHJcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgICAgczFbal1bMV0gKz0gczFbal1bMF0gPSBpc05hTihzMFtqXVsxXSkgPyBzMFtqXVswXSA6IHMwW2pdWzFdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub25lJDEoc2VyaWVzKSB7XHJcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsIG8gPSBuZXcgQXJyYXkobik7XHJcbiAgICB3aGlsZSAoLS1uID49IDApIG9bbl0gPSBuO1xyXG4gICAgcmV0dXJuIG87XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdGFja1ZhbHVlKGQsIGtleSkge1xyXG4gICAgcmV0dXJuIGRba2V5XTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YWNrKCkge1xyXG4gICAgdmFyIGtleXMgPSBjb25zdGFudCQxKFtdKSxcclxuICAgICAgICBvcmRlciA9IG5vbmUkMSxcclxuICAgICAgICBvZmZzZXQgPSBub25lLFxyXG4gICAgICAgIHZhbHVlID0gc3RhY2tWYWx1ZTtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGFjayhkYXRhKSB7XHJcbiAgICAgIHZhciBreiA9IGtleXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBtID0gZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICBuID0ga3oubGVuZ3RoLFxyXG4gICAgICAgICAgc3ogPSBuZXcgQXJyYXkobiksXHJcbiAgICAgICAgICBvejtcclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBmb3IgKHZhciBraSA9IGt6W2ldLCBzaSA9IHN6W2ldID0gbmV3IEFycmF5KG0pLCBqID0gMCwgc2lqOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgICAgICBzaVtqXSA9IHNpaiA9IFswLCArdmFsdWUoZGF0YVtqXSwga2ksIGosIGRhdGEpXTtcclxuICAgICAgICAgIHNpai5kYXRhID0gZGF0YVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2kua2V5ID0ga2k7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoaSA9IDAsIG96ID0gb3JkZXIoc3opOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgc3pbb3pbaV1dLmluZGV4ID0gaTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb2Zmc2V0KHN6LCBveik7XHJcbiAgICAgIHJldHVybiBzejtcclxuICAgIH1cclxuXHJcbiAgICBzdGFjay5rZXlzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxKHNsaWNlJDIuY2FsbChfKSksIHN0YWNrKSA6IGtleXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YWNrLnZhbHVlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMSgrXyksIHN0YWNrKSA6IHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob3JkZXIgPSBfID09IG51bGwgPyBub25lJDEgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEoc2xpY2UkMi5jYWxsKF8pKSwgc3RhY2spIDogb3JkZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAob2Zmc2V0ID0gXyA9PSBudWxsID8gbm9uZSA6IF8sIHN0YWNrKSA6IG9mZnNldDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHN0YWNrO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhwYW5kKHNlcmllcywgb3JkZXIpIHtcclxuICAgIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xyXG4gICAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAoeSA9IGkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xyXG4gICAgICBpZiAoeSkgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc2VyaWVzW2ldW2pdWzFdIC89IHk7XHJcbiAgICB9XHJcbiAgICBub25lKHNlcmllcywgb3JkZXIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2lsaG91ZXR0ZShzZXJpZXMsIG9yZGVyKSB7XHJcbiAgICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcclxuICAgIGZvciAodmFyIGogPSAwLCBzMCA9IHNlcmllc1tvcmRlclswXV0sIG4sIG0gPSBzMC5sZW5ndGg7IGogPCBtOyArK2opIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xyXG4gICAgICBzMFtqXVsxXSArPSBzMFtqXVswXSA9IC15IC8gMjtcclxuICAgIH1cclxuICAgIG5vbmUoc2VyaWVzLCBvcmRlcik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB3aWdnbGUoc2VyaWVzLCBvcmRlcikge1xyXG4gICAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApIHx8ICEoKG0gPSAoczAgPSBzZXJpZXNbb3JkZXJbMF1dKS5sZW5ndGgpID4gMCkpIHJldHVybjtcclxuICAgIGZvciAodmFyIHkgPSAwLCBqID0gMSwgczAsIG0sIG47IGogPCBtOyArK2opIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIHMxID0gMCwgczIgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgdmFyIHNpID0gc2VyaWVzW29yZGVyW2ldXSxcclxuICAgICAgICAgICAgc2lqMCA9IHNpW2pdWzFdIHx8IDAsXHJcbiAgICAgICAgICAgIHNpajEgPSBzaVtqIC0gMV1bMV0gfHwgMCxcclxuICAgICAgICAgICAgczMgPSAoc2lqMCAtIHNpajEpIC8gMjtcclxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGk7ICsraykge1xyXG4gICAgICAgICAgdmFyIHNrID0gc2VyaWVzW29yZGVyW2tdXSxcclxuICAgICAgICAgICAgICBza2owID0gc2tbal1bMV0gfHwgMCxcclxuICAgICAgICAgICAgICBza2oxID0gc2tbaiAtIDFdWzFdIHx8IDA7XHJcbiAgICAgICAgICBzMyArPSBza2owIC0gc2tqMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgczEgKz0gc2lqMCwgczIgKz0gczMgKiBzaWowO1xyXG4gICAgICB9XHJcbiAgICAgIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xyXG4gICAgICBpZiAoczEpIHkgLT0gczIgLyBzMTtcclxuICAgIH1cclxuICAgIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xyXG4gICAgbm9uZShzZXJpZXMsIG9yZGVyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFzY2VuZGluZyQxKHNlcmllcykge1xyXG4gICAgdmFyIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQxKTtcclxuICAgIHJldHVybiBub25lJDEoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN1bSQxKHNlcmllcykge1xyXG4gICAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xyXG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICh2ID0gK3Nlcmllc1tpXVsxXSkgcyArPSB2O1xyXG4gICAgcmV0dXJuIHM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZXNjZW5kaW5nJDIoc2VyaWVzKSB7XHJcbiAgICByZXR1cm4gYXNjZW5kaW5nJDEoc2VyaWVzKS5yZXZlcnNlKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbnNpZGVPdXQoc2VyaWVzKSB7XHJcbiAgICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXHJcbiAgICAgICAgaSxcclxuICAgICAgICBqLFxyXG4gICAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSQxKSxcclxuICAgICAgICBvcmRlciA9IG5vbmUkMShzZXJpZXMpLnNvcnQoZnVuY3Rpb24oYSwgYikgeyByZXR1cm4gc3Vtc1tiXSAtIHN1bXNbYV07IH0pLFxyXG4gICAgICAgIHRvcCA9IDAsXHJcbiAgICAgICAgYm90dG9tID0gMCxcclxuICAgICAgICB0b3BzID0gW10sXHJcbiAgICAgICAgYm90dG9tcyA9IFtdO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgaiA9IG9yZGVyW2ldO1xyXG4gICAgICBpZiAodG9wIDwgYm90dG9tKSB7XHJcbiAgICAgICAgdG9wICs9IHN1bXNbal07XHJcbiAgICAgICAgdG9wcy5wdXNoKGopO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xyXG4gICAgICAgIGJvdHRvbXMucHVzaChqKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXZlcnNlKHNlcmllcykge1xyXG4gICAgcmV0dXJuIG5vbmUkMShzZXJpZXMpLnJldmVyc2UoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlZmluZShjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XHJcbiAgICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcclxuICAgIHByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXh0ZW5kKHBhcmVudCwgZGVmaW5pdGlvbikge1xyXG4gICAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XHJcbiAgICByZXR1cm4gcHJvdG90eXBlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQ29sb3IoKSB7fVxyXG5cclxuICB2YXIgZGFya2VyID0gMC43O1xyXG4gIHZhciBicmlnaHRlciA9IDEgLyBkYXJrZXI7XHJcblxyXG4gIHZhciByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC87XHJcbiAgdmFyIHJlSGV4NiA9IC9eIyhbMC05YS1mXXs2fSkkLztcclxuICB2YXIgcmVSZ2JJbnRlZ2VyID0gL15yZ2JcXChcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCspXFxzKlxcKSQvO1xyXG4gIHZhciByZVJnYlBlcmNlbnQgPSAvXnJnYlxcKFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqLFxccyooWy0rXT9cXGQrKD86XFwuXFxkKyk/KSVcXHMqXFwpJC87XHJcbiAgdmFyIHJlUmdiYUludGVnZXIgPSAvXnJnYmFcXChcXHMqKFstK10/XFxkKylcXHMqLFxccyooWy0rXT9cXGQrKVxccyosXFxzKihbLStdP1xcZCspXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqXFwpJC87XHJcbiAgdmFyIHJlUmdiYVBlcmNlbnQgPSAvXnJnYmFcXChcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqXFwpJC87XHJcbiAgdmFyIHJlSHNsUGVyY2VudCA9IC9eaHNsXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKlxcKSQvO1xyXG4gIHZhciByZUhzbGFQZXJjZW50ID0gL15oc2xhXFwoXFxzKihbLStdP1xcZCsoPzpcXC5cXGQrKT8pXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPyklXFxzKixcXHMqKFstK10/XFxkKyg/OlxcLlxcZCspPylcXHMqXFwpJC87XHJcbiAgdmFyIG5hbWVkID0ge1xyXG4gICAgYWxpY2VibHVlOiAweGYwZjhmZixcclxuICAgIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXHJcbiAgICBhcXVhOiAweDAwZmZmZixcclxuICAgIGFxdWFtYXJpbmU6IDB4N2ZmZmQ0LFxyXG4gICAgYXp1cmU6IDB4ZjBmZmZmLFxyXG4gICAgYmVpZ2U6IDB4ZjVmNWRjLFxyXG4gICAgYmlzcXVlOiAweGZmZTRjNCxcclxuICAgIGJsYWNrOiAweDAwMDAwMCxcclxuICAgIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcclxuICAgIGJsdWU6IDB4MDAwMGZmLFxyXG4gICAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXHJcbiAgICBicm93bjogMHhhNTJhMmEsXHJcbiAgICBidXJseXdvb2Q6IDB4ZGViODg3LFxyXG4gICAgY2FkZXRibHVlOiAweDVmOWVhMCxcclxuICAgIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxyXG4gICAgY2hvY29sYXRlOiAweGQyNjkxZSxcclxuICAgIGNvcmFsOiAweGZmN2Y1MCxcclxuICAgIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcclxuICAgIGNvcm5zaWxrOiAweGZmZjhkYyxcclxuICAgIGNyaW1zb246IDB4ZGMxNDNjLFxyXG4gICAgY3lhbjogMHgwMGZmZmYsXHJcbiAgICBkYXJrYmx1ZTogMHgwMDAwOGIsXHJcbiAgICBkYXJrY3lhbjogMHgwMDhiOGIsXHJcbiAgICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcclxuICAgIGRhcmtncmF5OiAweGE5YTlhOSxcclxuICAgIGRhcmtncmVlbjogMHgwMDY0MDAsXHJcbiAgICBkYXJrZ3JleTogMHhhOWE5YTksXHJcbiAgICBkYXJra2hha2k6IDB4YmRiNzZiLFxyXG4gICAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxyXG4gICAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxyXG4gICAgZGFya29yYW5nZTogMHhmZjhjMDAsXHJcbiAgICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcclxuICAgIGRhcmtyZWQ6IDB4OGIwMDAwLFxyXG4gICAgZGFya3NhbG1vbjogMHhlOTk2N2EsXHJcbiAgICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxyXG4gICAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXHJcbiAgICBkYXJrc2xhdGVncmF5OiAweDJmNGY0ZixcclxuICAgIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxyXG4gICAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXHJcbiAgICBkYXJrdmlvbGV0OiAweDk0MDBkMyxcclxuICAgIGRlZXBwaW5rOiAweGZmMTQ5MyxcclxuICAgIGRlZXBza3libHVlOiAweDAwYmZmZixcclxuICAgIGRpbWdyYXk6IDB4Njk2OTY5LFxyXG4gICAgZGltZ3JleTogMHg2OTY5NjksXHJcbiAgICBkb2RnZXJibHVlOiAweDFlOTBmZixcclxuICAgIGZpcmVicmljazogMHhiMjIyMjIsXHJcbiAgICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXHJcbiAgICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXHJcbiAgICBmdWNoc2lhOiAweGZmMDBmZixcclxuICAgIGdhaW5zYm9ybzogMHhkY2RjZGMsXHJcbiAgICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcclxuICAgIGdvbGQ6IDB4ZmZkNzAwLFxyXG4gICAgZ29sZGVucm9kOiAweGRhYTUyMCxcclxuICAgIGdyYXk6IDB4ODA4MDgwLFxyXG4gICAgZ3JlZW46IDB4MDA4MDAwLFxyXG4gICAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxyXG4gICAgZ3JleTogMHg4MDgwODAsXHJcbiAgICBob25leWRldzogMHhmMGZmZjAsXHJcbiAgICBob3RwaW5rOiAweGZmNjliNCxcclxuICAgIGluZGlhbnJlZDogMHhjZDVjNWMsXHJcbiAgICBpbmRpZ286IDB4NGIwMDgyLFxyXG4gICAgaXZvcnk6IDB4ZmZmZmYwLFxyXG4gICAga2hha2k6IDB4ZjBlNjhjLFxyXG4gICAgbGF2ZW5kZXI6IDB4ZTZlNmZhLFxyXG4gICAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXHJcbiAgICBsYXduZ3JlZW46IDB4N2NmYzAwLFxyXG4gICAgbGVtb25jaGlmZm9uOiAweGZmZmFjZCxcclxuICAgIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXHJcbiAgICBsaWdodGNvcmFsOiAweGYwODA4MCxcclxuICAgIGxpZ2h0Y3lhbjogMHhlMGZmZmYsXHJcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXHJcbiAgICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxyXG4gICAgbGlnaHRncmVlbjogMHg5MGVlOTAsXHJcbiAgICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxyXG4gICAgbGlnaHRwaW5rOiAweGZmYjZjMSxcclxuICAgIGxpZ2h0c2FsbW9uOiAweGZmYTA3YSxcclxuICAgIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxyXG4gICAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcclxuICAgIGxpZ2h0c2xhdGVncmF5OiAweDc3ODg5OSxcclxuICAgIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcclxuICAgIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcclxuICAgIGxpZ2h0eWVsbG93OiAweGZmZmZlMCxcclxuICAgIGxpbWU6IDB4MDBmZjAwLFxyXG4gICAgbGltZWdyZWVuOiAweDMyY2QzMixcclxuICAgIGxpbmVuOiAweGZhZjBlNixcclxuICAgIG1hZ2VudGE6IDB4ZmYwMGZmLFxyXG4gICAgbWFyb29uOiAweDgwMDAwMCxcclxuICAgIG1lZGl1bWFxdWFtYXJpbmU6IDB4NjZjZGFhLFxyXG4gICAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXHJcbiAgICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxyXG4gICAgbWVkaXVtcHVycGxlOiAweDkzNzBkYixcclxuICAgIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcclxuICAgIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXHJcbiAgICBtZWRpdW1zcHJpbmdncmVlbjogMHgwMGZhOWEsXHJcbiAgICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxyXG4gICAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcclxuICAgIG1pZG5pZ2h0Ymx1ZTogMHgxOTE5NzAsXHJcbiAgICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxyXG4gICAgbWlzdHlyb3NlOiAweGZmZTRlMSxcclxuICAgIG1vY2Nhc2luOiAweGZmZTRiNSxcclxuICAgIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcclxuICAgIG5hdnk6IDB4MDAwMDgwLFxyXG4gICAgb2xkbGFjZTogMHhmZGY1ZTYsXHJcbiAgICBvbGl2ZTogMHg4MDgwMDAsXHJcbiAgICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxyXG4gICAgb3JhbmdlOiAweGZmYTUwMCxcclxuICAgIG9yYW5nZXJlZDogMHhmZjQ1MDAsXHJcbiAgICBvcmNoaWQ6IDB4ZGE3MGQ2LFxyXG4gICAgcGFsZWdvbGRlbnJvZDogMHhlZWU4YWEsXHJcbiAgICBwYWxlZ3JlZW46IDB4OThmYjk4LFxyXG4gICAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXHJcbiAgICBwYWxldmlvbGV0cmVkOiAweGRiNzA5MyxcclxuICAgIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxyXG4gICAgcGVhY2hwdWZmOiAweGZmZGFiOSxcclxuICAgIHBlcnU6IDB4Y2Q4NTNmLFxyXG4gICAgcGluazogMHhmZmMwY2IsXHJcbiAgICBwbHVtOiAweGRkYTBkZCxcclxuICAgIHBvd2RlcmJsdWU6IDB4YjBlMGU2LFxyXG4gICAgcHVycGxlOiAweDgwMDA4MCxcclxuICAgIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxyXG4gICAgcmVkOiAweGZmMDAwMCxcclxuICAgIHJvc3licm93bjogMHhiYzhmOGYsXHJcbiAgICByb3lhbGJsdWU6IDB4NDE2OWUxLFxyXG4gICAgc2FkZGxlYnJvd246IDB4OGI0NTEzLFxyXG4gICAgc2FsbW9uOiAweGZhODA3MixcclxuICAgIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxyXG4gICAgc2VhZ3JlZW46IDB4MmU4YjU3LFxyXG4gICAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxyXG4gICAgc2llbm5hOiAweGEwNTIyZCxcclxuICAgIHNpbHZlcjogMHhjMGMwYzAsXHJcbiAgICBza3libHVlOiAweDg3Y2VlYixcclxuICAgIHNsYXRlYmx1ZTogMHg2YTVhY2QsXHJcbiAgICBzbGF0ZWdyYXk6IDB4NzA4MDkwLFxyXG4gICAgc2xhdGVncmV5OiAweDcwODA5MCxcclxuICAgIHNub3c6IDB4ZmZmYWZhLFxyXG4gICAgc3ByaW5nZ3JlZW46IDB4MDBmZjdmLFxyXG4gICAgc3RlZWxibHVlOiAweDQ2ODJiNCxcclxuICAgIHRhbjogMHhkMmI0OGMsXHJcbiAgICB0ZWFsOiAweDAwODA4MCxcclxuICAgIHRoaXN0bGU6IDB4ZDhiZmQ4LFxyXG4gICAgdG9tYXRvOiAweGZmNjM0NyxcclxuICAgIHR1cnF1b2lzZTogMHg0MGUwZDAsXHJcbiAgICB2aW9sZXQ6IDB4ZWU4MmVlLFxyXG4gICAgd2hlYXQ6IDB4ZjVkZWIzLFxyXG4gICAgd2hpdGU6IDB4ZmZmZmZmLFxyXG4gICAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXHJcbiAgICB5ZWxsb3c6IDB4ZmZmZjAwLFxyXG4gICAgeWVsbG93Z3JlZW46IDB4OWFjZDMyXHJcbiAgfTtcclxuXHJcbiAgZGVmaW5lKENvbG9yLCBjb2xvciwge1xyXG4gICAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xyXG4gICAgfSxcclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmdiKCkgKyBcIlwiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcclxuICAgIHZhciBtO1xyXG4gICAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcclxuICAgICAgICA6IChtID0gcmVIZXg2LmV4ZWMoZm9ybWF0KSkgPyByZ2JuKHBhcnNlSW50KG1bMV0sIDE2KSkgLy8gI2ZmMDAwMFxyXG4gICAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcclxuICAgICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXHJcbiAgICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXHJcbiAgICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcclxuICAgICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxyXG4gICAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcclxuICAgICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXHJcbiAgICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcclxuICAgICAgICA6IG51bGw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZ2JuKG4pIHtcclxuICAgIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcclxuICAgIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcclxuICAgIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XHJcbiAgICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XHJcbiAgICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xyXG4gICAgbyA9IG8ucmdiKCk7XHJcbiAgICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29sb3JSZ2IociwgZywgYiwgb3BhY2l0eSkge1xyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xyXG4gICAgdGhpcy5yID0gK3I7XHJcbiAgICB0aGlzLmcgPSArZztcclxuICAgIHRoaXMuYiA9ICtiO1xyXG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XHJcbiAgfVxyXG5cclxuICBkZWZpbmUoUmdiLCBjb2xvclJnYiwgZXh0ZW5kKENvbG9yLCB7XHJcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xyXG4gICAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XHJcbiAgICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XHJcbiAgICB9LFxyXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XHJcbiAgICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xyXG4gICAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgfSxcclxuICAgIHJnYjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuICgwIDw9IHRoaXMuciAmJiB0aGlzLnIgPD0gMjU1KVxyXG4gICAgICAgICAgJiYgKDAgPD0gdGhpcy5nICYmIHRoaXMuZyA8PSAyNTUpXHJcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcclxuICAgICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XHJcbiAgICB9LFxyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcclxuICAgICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXHJcbiAgICAgICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxyXG4gICAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcclxuICAgICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXHJcbiAgICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xyXG4gICAgfVxyXG4gIH0pKTtcclxuXHJcbiAgZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XHJcbiAgICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XHJcbiAgICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcclxuICAgIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcclxuICAgIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XHJcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcclxuICAgIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcclxuICAgIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XHJcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XHJcbiAgICBvID0gby5yZ2IoKTtcclxuICAgIHZhciByID0gby5yIC8gMjU1LFxyXG4gICAgICAgIGcgPSBvLmcgLyAyNTUsXHJcbiAgICAgICAgYiA9IG8uYiAvIDI1NSxcclxuICAgICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcclxuICAgICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcclxuICAgICAgICBoID0gTmFOLFxyXG4gICAgICAgIHMgPSBtYXggLSBtaW4sXHJcbiAgICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcclxuICAgIGlmIChzKSB7XHJcbiAgICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xyXG4gICAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XHJcbiAgICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcclxuICAgICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcclxuICAgICAgaCAqPSA2MDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbG9ySHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcclxuICAgIHRoaXMuaCA9ICtoO1xyXG4gICAgdGhpcy5zID0gK3M7XHJcbiAgICB0aGlzLmwgPSArbDtcclxuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKEhzbCwgY29sb3JIc2wsIGV4dGVuZChDb2xvciwge1xyXG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcclxuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xyXG4gICAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcclxuICAgIH0sXHJcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcclxuICAgICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XHJcbiAgICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgfSxcclxuICAgIHJnYjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxyXG4gICAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxyXG4gICAgICAgICAgbCA9IHRoaXMubCxcclxuICAgICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXHJcbiAgICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XHJcbiAgICAgIHJldHVybiBuZXcgUmdiKFxyXG4gICAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcclxuICAgICAgICBoc2wycmdiKGgsIG0xLCBtMiksXHJcbiAgICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXHJcbiAgICAgICAgdGhpcy5vcGFjaXR5XHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG4gICAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXHJcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXHJcbiAgICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xyXG4gICAgfVxyXG4gIH0pKTtcclxuXHJcbiAgLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xyXG4gIGZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XHJcbiAgICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXHJcbiAgICAgICAgOiBoIDwgMTgwID8gbTJcclxuICAgICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXHJcbiAgICAgICAgOiBtMSkgKiAyNTU7XHJcbiAgfVxyXG5cclxuICB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XHJcbiAgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xyXG5cclxuICB2YXIgS24gPSAxODtcclxuICB2YXIgWG4gPSAwLjk1MDQ3MDtcclxuICB2YXIgWW4gPSAxO1xyXG4gIHZhciBabiA9IDEuMDg4ODMwO1xyXG4gIHZhciB0MCA9IDQgLyAyOTtcclxuICB2YXIgdDEgPSA2IC8gMjk7XHJcbiAgdmFyIHQyID0gMyAqIHQxICogdDE7XHJcbiAgdmFyIHQzID0gdDEgKiB0MSAqIHQxO1xyXG4gIGZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xyXG4gICAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XHJcbiAgICBpZiAobyBpbnN0YW5jZW9mIEhjbCkge1xyXG4gICAgICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XHJcbiAgICAgIHJldHVybiBuZXcgTGFiKG8ubCwgTWF0aC5jb3MoaCkgKiBvLmMsIE1hdGguc2luKGgpICogby5jLCBvLm9wYWNpdHkpO1xyXG4gICAgfVxyXG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xyXG4gICAgdmFyIGIgPSByZ2IyeHl6KG8uciksXHJcbiAgICAgICAgYSA9IHJnYjJ4eXooby5nKSxcclxuICAgICAgICBsID0gcmdiMnh5eihvLmIpLFxyXG4gICAgICAgIHggPSB4eXoybGFiKCgwLjQxMjQ1NjQgKiBiICsgMC4zNTc1NzYxICogYSArIDAuMTgwNDM3NSAqIGwpIC8gWG4pLFxyXG4gICAgICAgIHkgPSB4eXoybGFiKCgwLjIxMjY3MjkgKiBiICsgMC43MTUxNTIyICogYSArIDAuMDcyMTc1MCAqIGwpIC8gWW4pLFxyXG4gICAgICAgIHogPSB4eXoybGFiKCgwLjAxOTMzMzkgKiBiICsgMC4xMTkxOTIwICogYSArIDAuOTUwMzA0MSAqIGwpIC8gWm4pO1xyXG4gICAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gbGFiQ29udmVydChsKSA6IG5ldyBMYWIobCwgYSwgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gTGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcclxuICAgIHRoaXMubCA9ICtsO1xyXG4gICAgdGhpcy5hID0gK2E7XHJcbiAgICB0aGlzLmIgPSArYjtcclxuICAgIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcclxuICAgIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XHJcbiAgICB9LFxyXG4gICAgZGFya2VyOiBmdW5jdGlvbihrKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEtuICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XHJcbiAgICB9LFxyXG4gICAgcmdiOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHkgPSAodGhpcy5sICsgMTYpIC8gMTE2LFxyXG4gICAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcclxuICAgICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XHJcbiAgICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XHJcbiAgICAgIHggPSBYbiAqIGxhYjJ4eXooeCk7XHJcbiAgICAgIHogPSBabiAqIGxhYjJ4eXooeik7XHJcbiAgICAgIHJldHVybiBuZXcgUmdiKFxyXG4gICAgICAgIHh5ejJyZ2IoIDMuMjQwNDU0MiAqIHggLSAxLjUzNzEzODUgKiB5IC0gMC40OTg1MzE0ICogeiksIC8vIEQ2NSAtPiBzUkdCXHJcbiAgICAgICAgeHl6MnJnYigtMC45NjkyNjYwICogeCArIDEuODc2MDEwOCAqIHkgKyAwLjA0MTU1NjAgKiB6KSxcclxuICAgICAgICB4eXoycmdiKCAwLjA1NTY0MzQgKiB4IC0gMC4yMDQwMjU5ICogeSArIDEuMDU3MjI1MiAqIHopLFxyXG4gICAgICAgIHRoaXMub3BhY2l0eVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0pKTtcclxuXHJcbiAgZnVuY3Rpb24geHl6MmxhYih0KSB7XHJcbiAgICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsYWIyeHl6KHQpIHtcclxuICAgIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24geHl6MnJnYih4KSB7XHJcbiAgICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJnYjJ4eXooeCkge1xyXG4gICAgcmV0dXJuICh4IC89IDI1NSkgPD0gMC4wNDA0NSA/IHggLyAxMi45MiA6IE1hdGgucG93KCh4ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcclxuICAgIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xyXG4gICAgaWYgKCEobyBpbnN0YW5jZW9mIExhYikpIG8gPSBsYWJDb252ZXJ0KG8pO1xyXG4gICAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XHJcbiAgICByZXR1cm4gbmV3IEhjbChoIDwgMCA/IGggKyAzNjAgOiBoLCBNYXRoLnNxcnQoby5hICogby5hICsgby5iICogby5iKSwgby5sLCBvLm9wYWNpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29sb3JIY2woaCwgYywgbCwgb3BhY2l0eSkge1xyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xyXG4gICAgdGhpcy5oID0gK2g7XHJcbiAgICB0aGlzLmMgPSArYztcclxuICAgIHRoaXMubCA9ICtsO1xyXG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XHJcbiAgfVxyXG5cclxuICBkZWZpbmUoSGNsLCBjb2xvckhjbCwgZXh0ZW5kKENvbG9yLCB7XHJcbiAgICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xyXG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgfSxcclxuICAgIGRhcmtlcjogZnVuY3Rpb24oaykge1xyXG4gICAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gS24gKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgfSxcclxuICAgIHJnYjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBsYWJDb252ZXJ0KHRoaXMpLnJnYigpO1xyXG4gICAgfVxyXG4gIH0pKTtcclxuXHJcbiAgdmFyIEEgPSAtMC4xNDg2MTtcclxuICB2YXIgQiA9ICsxLjc4Mjc3O1xyXG4gIHZhciBDID0gLTAuMjkyMjc7XHJcbiAgdmFyIEQgPSAtMC45MDY0OTtcclxuICB2YXIgRSA9ICsxLjk3Mjk0O1xyXG4gIHZhciBFRCA9IEUgKiBEO1xyXG4gIHZhciBFQiA9IEUgKiBCO1xyXG4gIHZhciBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XHJcbiAgZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XHJcbiAgICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcclxuICAgIGlmICghKG8gaW5zdGFuY2VvZiBSZ2IpKSBvID0gcmdiQ29udmVydChvKTtcclxuICAgIHZhciByID0gby5yIC8gMjU1LFxyXG4gICAgICAgIGcgPSBvLmcgLyAyNTUsXHJcbiAgICAgICAgYiA9IG8uYiAvIDI1NSxcclxuICAgICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcclxuICAgICAgICBibCA9IGIgLSBsLFxyXG4gICAgICAgIGsgPSAoRSAqIChnIC0gbCkgLSBDICogYmwpIC8gRCxcclxuICAgICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcclxuICAgICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcclxuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KGggPCAwID8gaCArIDM2MCA6IGgsIHMsIGwsIG8ub3BhY2l0eSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xyXG4gICAgdGhpcy5oID0gK2g7XHJcbiAgICB0aGlzLnMgPSArcztcclxuICAgIHRoaXMubCA9ICtsO1xyXG4gICAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XHJcbiAgfVxyXG5cclxuICBkZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xyXG4gICAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcclxuICAgICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xyXG4gICAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcclxuICAgIH0sXHJcbiAgICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcclxuICAgICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XHJcbiAgICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xyXG4gICAgfSxcclxuICAgIHJnYjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXHJcbiAgICAgICAgICBsID0gK3RoaXMubCxcclxuICAgICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxyXG4gICAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxyXG4gICAgICAgICAgc2luaCA9IE1hdGguc2luKGgpO1xyXG4gICAgICByZXR1cm4gbmV3IFJnYihcclxuICAgICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxyXG4gICAgICAgIDI1NSAqIChsICsgYSAqIChDICogY29zaCArIEQgKiBzaW5oKSksXHJcbiAgICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXHJcbiAgICAgICAgdGhpcy5vcGFjaXR5XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSkpO1xyXG5cclxuICBmdW5jdGlvbiBiYXNpcyQxKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xyXG4gICAgdmFyIHQyID0gdDEgKiB0MSwgdDMgPSB0MiAqIHQxO1xyXG4gICAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXHJcbiAgICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxyXG4gICAgICAgICsgKDEgKyAzICogdDEgKyAzICogdDIgLSAzICogdDMpICogdjJcclxuICAgICAgICArIHQzICogdjMpIC8gNjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJhc2lzJDIodmFsdWVzKSB7XHJcbiAgICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcclxuICAgICAgICAgIHYxID0gdmFsdWVzW2ldLFxyXG4gICAgICAgICAgdjIgPSB2YWx1ZXNbaSArIDFdLFxyXG4gICAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcclxuICAgICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xyXG4gICAgICByZXR1cm4gYmFzaXMkMSgodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBiYXNpc0Nsb3NlZCQxKHZhbHVlcykge1xyXG4gICAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxyXG4gICAgICAgICAgdjAgPSB2YWx1ZXNbKGkgKyBuIC0gMSkgJSBuXSxcclxuICAgICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcclxuICAgICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcclxuICAgICAgICAgIHYzID0gdmFsdWVzWyhpICsgMikgJSBuXTtcclxuICAgICAgcmV0dXJuIGJhc2lzJDEoKHQgLSBpIC8gbikgKiBuLCB2MCwgdjEsIHYyLCB2Myk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uc3RhbnQkMih4KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpbmVhciQxKGEsIGQpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XHJcbiAgICAgIHJldHVybiBhICsgdCAqIGQ7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXhwb25lbnRpYWwkMShhLCBiLCB5KSB7XHJcbiAgICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaHVlKGEsIGIpIHtcclxuICAgIHZhciBkID0gYiAtIGE7XHJcbiAgICByZXR1cm4gZCA/IGxpbmVhciQxKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQkMihpc05hTihhKSA/IGIgOiBhKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdhbW1hKHkpIHtcclxuICAgIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsJDEoYSwgYiwgeSkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xyXG4gICAgdmFyIGQgPSBiIC0gYTtcclxuICAgIHJldHVybiBkID8gbGluZWFyJDEoYSwgZCkgOiBjb25zdGFudCQyKGlzTmFOKGEpID8gYiA6IGEpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGludGVycG9sYXRlUmdiID0gKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcclxuICAgIHZhciBjb2xvciA9IGdhbW1hKHkpO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XHJcbiAgICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXHJcbiAgICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxyXG4gICAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcclxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgc3RhcnQuciA9IHIodCk7XHJcbiAgICAgICAgc3RhcnQuZyA9IGcodCk7XHJcbiAgICAgICAgc3RhcnQuYiA9IGIodCk7XHJcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcclxuXHJcbiAgICByZXR1cm4gcmdiO1xyXG4gIH0pKDEpO1xyXG5cclxuICBmdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XHJcbiAgICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcclxuICAgICAgICAgIHIgPSBuZXcgQXJyYXkobiksXHJcbiAgICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcclxuICAgICAgICAgIGksIGNvbG9yO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xyXG4gICAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XHJcbiAgICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcclxuICAgICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xyXG4gICAgICB9XHJcbiAgICAgIHIgPSBzcGxpbmUocik7XHJcbiAgICAgIGcgPSBzcGxpbmUoZyk7XHJcbiAgICAgIGIgPSBzcGxpbmUoYik7XHJcbiAgICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xyXG4gICAgICAgIGNvbG9yLnIgPSByKHQpO1xyXG4gICAgICAgIGNvbG9yLmcgPSBnKHQpO1xyXG4gICAgICAgIGNvbG9yLmIgPSBiKHQpO1xyXG4gICAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzJDIpO1xyXG4gIHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCQxKTtcclxuXHJcbiAgZnVuY3Rpb24gYXJyYXkkMShhLCBiKSB7XHJcbiAgICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxyXG4gICAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxyXG4gICAgICAgIHggPSBuZXcgQXJyYXkobmIpLFxyXG4gICAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxyXG4gICAgICAgIGk7XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSBpbnRlcnBvbGF0ZShhW2ldLCBiW2ldKTtcclxuICAgIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xyXG4gICAgICByZXR1cm4gYztcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkYXRlKGEsIGIpIHtcclxuICAgIHZhciBkID0gbmV3IERhdGU7XHJcbiAgICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlTnVtYmVyKGEsIGIpIHtcclxuICAgIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xyXG4gICAgICByZXR1cm4gYSArIGIgKiB0O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9iamVjdChhLCBiKSB7XHJcbiAgICB2YXIgaSA9IHt9LFxyXG4gICAgICAgIGMgPSB7fSxcclxuICAgICAgICBrO1xyXG5cclxuICAgIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XHJcbiAgICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xyXG5cclxuICAgIGZvciAoayBpbiBiKSB7XHJcbiAgICAgIGlmIChrIGluIGEpIHtcclxuICAgICAgICBpW2tdID0gaW50ZXJwb2xhdGUoYVtrXSwgYltrXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY1trXSA9IGJba107XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xyXG4gICAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XHJcbiAgICAgIHJldHVybiBjO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2c7XHJcbiAgdmFyIHJlQiA9IG5ldyBSZWdFeHAocmVBLnNvdXJjZSwgXCJnXCIpO1xyXG4gIGZ1bmN0aW9uIHplcm8oYikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gYjtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvbmUoYikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgcmV0dXJuIGIodCkgKyBcIlwiO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlU3RyaW5nKGEsIGIpIHtcclxuICAgIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxyXG4gICAgICAgIGFtLCAvLyBjdXJyZW50IG1hdGNoIGluIGFcclxuICAgICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXHJcbiAgICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XHJcbiAgICAgICAgaSA9IC0xLCAvLyBpbmRleCBpbiBzXHJcbiAgICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcclxuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXHJcblxyXG4gICAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxyXG4gICAgYSA9IGEgKyBcIlwiLCBiID0gYiArIFwiXCI7XHJcblxyXG4gICAgLy8gSW50ZXJwb2xhdGUgcGFpcnMgb2YgbnVtYmVycyBpbiBhICYgYi5cclxuICAgIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcclxuICAgICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcclxuICAgICAgaWYgKChicyA9IGJtLmluZGV4KSA+IGJpKSB7IC8vIGEgc3RyaW5nIHByZWNlZGVzIHRoZSBuZXh0IG51bWJlciBpbiBiXHJcbiAgICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XHJcbiAgICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXHJcbiAgICAgICAgZWxzZSBzWysraV0gPSBicztcclxuICAgICAgfVxyXG4gICAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxyXG4gICAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJtOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xyXG4gICAgICAgIGVsc2Ugc1srK2ldID0gYm07XHJcbiAgICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXHJcbiAgICAgICAgc1srK2ldID0gbnVsbDtcclxuICAgICAgICBxLnB1c2goe2k6IGksIHg6IGludGVycG9sYXRlTnVtYmVyKGFtLCBibSl9KTtcclxuICAgICAgfVxyXG4gICAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHJlbWFpbnMgb2YgYi5cclxuICAgIGlmIChiaSA8IGIubGVuZ3RoKSB7XHJcbiAgICAgIGJzID0gYi5zbGljZShiaSk7XHJcbiAgICAgIGlmIChzW2ldKSBzW2ldICs9IGJzOyAvLyBjb2FsZXNjZSB3aXRoIHByZXZpb3VzIHN0cmluZ1xyXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxyXG4gICAgLy8gT3RoZXJ3aXNlLCBpbnRlcnBvbGF0ZSBlYWNoIG9mIHRoZSBudW1iZXJzIGFuZCByZWpvaW4gdGhlIHN0cmluZy5cclxuICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxyXG4gICAgICAgID8gb25lKHFbMF0ueClcclxuICAgICAgICA6IHplcm8oYikpXHJcbiAgICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGEsIGIpIHtcclxuICAgIHZhciB0ID0gdHlwZW9mIGIsIGM7XHJcbiAgICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQkMihiKVxyXG4gICAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxyXG4gICAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpIDogaW50ZXJwb2xhdGVTdHJpbmcpXHJcbiAgICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxyXG4gICAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXHJcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXkkMVxyXG4gICAgICAgIDogaXNOYU4oYikgPyBvYmplY3RcclxuICAgICAgICA6IGludGVycG9sYXRlTnVtYmVyKShhLCBiKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlUm91bmQoYSwgYikge1xyXG4gICAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xyXG5cclxuICB2YXIgaWRlbnRpdHkkMiA9IHtcclxuICAgIHRyYW5zbGF0ZVg6IDAsXHJcbiAgICB0cmFuc2xhdGVZOiAwLFxyXG4gICAgcm90YXRlOiAwLFxyXG4gICAgc2tld1g6IDAsXHJcbiAgICBzY2FsZVg6IDEsXHJcbiAgICBzY2FsZVk6IDFcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBkZWNvbXBvc2UoYSwgYiwgYywgZCwgZSwgZikge1xyXG4gICAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcclxuICAgIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcclxuICAgIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcclxuICAgIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xyXG4gICAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRyYW5zbGF0ZVg6IGUsXHJcbiAgICAgIHRyYW5zbGF0ZVk6IGYsXHJcbiAgICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXHJcbiAgICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcclxuICAgICAgc2NhbGVYOiBzY2FsZVgsXHJcbiAgICAgIHNjYWxlWTogc2NhbGVZXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGNzc05vZGU7XHJcbiAgdmFyIGNzc1Jvb3Q7XHJcbiAgdmFyIGNzc1ZpZXc7XHJcbiAgdmFyIHN2Z05vZGU7XHJcbiAgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eSQyO1xyXG4gICAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG4gICAgY3NzTm9kZS5zdHlsZS50cmFuc2Zvcm0gPSB2YWx1ZTtcclxuICAgIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XHJcbiAgICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xyXG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSg3LCAtMSkuc3BsaXQoXCIsXCIpO1xyXG4gICAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5JDI7XHJcbiAgICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XHJcbiAgICBzdmdOb2RlLnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCB2YWx1ZSk7XHJcbiAgICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eSQyO1xyXG4gICAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XHJcbiAgICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gcG9wKHMpIHtcclxuICAgICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcclxuICAgICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcclxuICAgICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XHJcbiAgICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogaW50ZXJwb2xhdGVOdW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoeWEsIHliKX0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XHJcbiAgICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XHJcbiAgICAgIGlmIChhICE9PSBiKSB7XHJcbiAgICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXHJcbiAgICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKGEsIGIpfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYikge1xyXG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XHJcbiAgICAgIGlmIChhICE9PSBiKSB7XHJcbiAgICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogaW50ZXJwb2xhdGVOdW1iZXIoYSwgYil9KTtcclxuICAgICAgfSBlbHNlIGlmIChiKSB7XHJcbiAgICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcclxuICAgICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcclxuICAgICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xyXG4gICAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IGludGVycG9sYXRlTnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IGludGVycG9sYXRlTnVtYmVyKHlhLCB5Yil9KTtcclxuICAgICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xyXG4gICAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXHJcbiAgICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXHJcbiAgICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xyXG4gICAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcclxuICAgICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XHJcbiAgICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xyXG4gICAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XHJcbiAgICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XHJcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcclxuICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XHJcbiAgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtJDIgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xyXG5cclxuICB2YXIgcmhvID0gTWF0aC5TUVJUMjtcclxuICB2YXIgcmhvMiA9IDI7XHJcbiAgdmFyIHJobzQgPSA0O1xyXG4gIHZhciBlcHNpbG9uMiA9IDFlLTEyO1xyXG4gIGZ1bmN0aW9uIGNvc2goeCkge1xyXG4gICAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzaW5oKHgpIHtcclxuICAgIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGFuaCh4KSB7XHJcbiAgICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcclxuICB9XHJcblxyXG4gIC8vIHAwID0gW3V4MCwgdXkwLCB3MF1cclxuICAvLyBwMSA9IFt1eDEsIHV5MSwgdzFdXHJcbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGVab29tKHAwLCBwMSkge1xyXG4gICAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcclxuICAgICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXHJcbiAgICAgICAgZHggPSB1eDEgLSB1eDAsXHJcbiAgICAgICAgZHkgPSB1eTEgLSB1eTAsXHJcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcclxuICAgICAgICBpLFxyXG4gICAgICAgIFM7XHJcblxyXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXHJcbiAgICBpZiAoZDIgPCBlcHNpbG9uMikge1xyXG4gICAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XHJcbiAgICAgIGkgPSBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgIHV4MCArIHQgKiBkeCxcclxuICAgICAgICAgIHV5MCArIHQgKiBkeSxcclxuICAgICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXHJcbiAgICAgICAgXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdlbmVyYWwgY2FzZS5cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxyXG4gICAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXHJcbiAgICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcclxuICAgICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcclxuICAgICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcclxuICAgICAgUyA9IChyMSAtIHIwKSAvIHJobztcclxuICAgICAgaSA9IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICB2YXIgcyA9IHQgKiBTLFxyXG4gICAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcclxuICAgICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICB1eDAgKyB1ICogZHgsXHJcbiAgICAgICAgICB1eTAgKyB1ICogZHksXHJcbiAgICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XHJcblxyXG4gICAgcmV0dXJuIGk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoc2woaHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcclxuICAgICAgICAgIHMgPSBub2dhbW1hKHN0YXJ0LnMsIGVuZC5zKSxcclxuICAgICAgICAgIGwgPSBub2dhbW1hKHN0YXJ0LmwsIGVuZC5sKSxcclxuICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICBzdGFydC5oID0gaCh0KTtcclxuICAgICAgICBzdGFydC5zID0gcyh0KTtcclxuICAgICAgICBzdGFydC5sID0gbCh0KTtcclxuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcclxuICAgICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGhzbCQxID0gaHNsKGh1ZSk7XHJcbiAgdmFyIGhzbExvbmcgPSBoc2wobm9nYW1tYSk7XHJcblxyXG4gIGZ1bmN0aW9uIGxhYiQxKHN0YXJ0LCBlbmQpIHtcclxuICAgIHZhciBsID0gbm9nYW1tYSgoc3RhcnQgPSBsYWIoc3RhcnQpKS5sLCAoZW5kID0gbGFiKGVuZCkpLmwpLFxyXG4gICAgICAgIGEgPSBub2dhbW1hKHN0YXJ0LmEsIGVuZC5hKSxcclxuICAgICAgICBiID0gbm9nYW1tYShzdGFydC5iLCBlbmQuYiksXHJcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgc3RhcnQubCA9IGwodCk7XHJcbiAgICAgIHN0YXJ0LmEgPSBhKHQpO1xyXG4gICAgICBzdGFydC5iID0gYih0KTtcclxuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XHJcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGNsKGh1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXHJcbiAgICAgICAgICBjID0gbm9nYW1tYShzdGFydC5jLCBlbmQuYyksXHJcbiAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXHJcbiAgICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgc3RhcnQuaCA9IGgodCk7XHJcbiAgICAgICAgc3RhcnQuYyA9IGModCk7XHJcbiAgICAgICAgc3RhcnQubCA9IGwodCk7XHJcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBoY2wkMSA9IGhjbChodWUpO1xyXG4gIHZhciBoY2xMb25nID0gaGNsKG5vZ2FtbWEpO1xyXG5cclxuICBmdW5jdGlvbiBjdWJlaGVsaXgkMShodWUpIHtcclxuICAgIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xyXG4gICAgICB5ID0gK3k7XHJcblxyXG4gICAgICBmdW5jdGlvbiBjdWJlaGVsaXgkJChzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY3ViZWhlbGl4KHN0YXJ0KSkuaCwgKGVuZCA9IGN1YmVoZWxpeChlbmQpKS5oKSxcclxuICAgICAgICAgICAgcyA9IG5vZ2FtbWEoc3RhcnQucywgZW5kLnMpLFxyXG4gICAgICAgICAgICBsID0gbm9nYW1tYShzdGFydC5sLCBlbmQubCksXHJcbiAgICAgICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgc3RhcnQuaCA9IGgodCk7XHJcbiAgICAgICAgICBzdGFydC5zID0gcyh0KTtcclxuICAgICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcclxuICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xyXG4gICAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjdWJlaGVsaXgkJC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xyXG5cclxuICAgICAgcmV0dXJuIGN1YmVoZWxpeCQkO1xyXG4gICAgfSkoMSk7XHJcbiAgfVxyXG5cclxuICB2YXIgY3ViZWhlbGl4JDIgPSBjdWJlaGVsaXgkMShodWUpO1xyXG4gIHZhciBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgkMShub2dhbW1hKTtcclxuXHJcbiAgZnVuY3Rpb24gcXVhbnRpemUoaW50ZXJwb2xhdG9yLCBuKSB7XHJcbiAgICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSBzYW1wbGVzW2ldID0gaW50ZXJwb2xhdG9yKGkgLyAobiAtIDEpKTtcclxuICAgIHJldHVybiBzYW1wbGVzO1xyXG4gIH1cclxuXHJcbiAgdmFyIG5vb3AkMSA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XHJcblxyXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcclxuICAgICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XHJcbiAgICAgIF9bdF0gPSBbXTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBEaXNwYXRjaChfKSB7XHJcbiAgICB0aGlzLl8gPSBfO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xyXG4gICAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XHJcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XHJcbiAgICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XHJcbiAgICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xyXG4gICAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBEaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXHJcbiAgICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgIHZhciBfID0gdGhpcy5fLFxyXG4gICAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXHJcbiAgICAgICAgICB0LFxyXG4gICAgICAgICAgaSA9IC0xLFxyXG4gICAgICAgICAgbiA9IFQubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cclxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXHJcbiAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQkMShfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XHJcbiAgICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQkMShfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgY29weTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XHJcbiAgICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcclxuICAgICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcclxuICAgIH0sXHJcbiAgICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XHJcbiAgICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcclxuICAgICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcclxuICAgICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xyXG4gICAgfSxcclxuICAgIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XHJcbiAgICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XHJcbiAgICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcclxuICAgICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBjLnZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXQkMSh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XHJcbiAgICAgICAgdHlwZVtpXSA9IG5vb3AkMSwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XHJcbiAgICByZXR1cm4gdHlwZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XHJcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZFwiLCBcInJldHVybiB7XCIgKyBjb2x1bW5zLm1hcChmdW5jdGlvbihuYW1lLCBpKSB7XHJcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xyXG4gICAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjdXN0b21Db252ZXJ0ZXIoY29sdW1ucywgZikge1xyXG4gICAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcclxuICAgIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcclxuICAgICAgcmV0dXJuIGYob2JqZWN0KHJvdyksIGksIGNvbHVtbnMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxyXG4gIGZ1bmN0aW9uIGluZmVyQ29sdW1ucyhyb3dzKSB7XHJcbiAgICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcclxuICAgICAgICBjb2x1bW5zID0gW107XHJcblxyXG4gICAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xyXG4gICAgICBmb3IgKHZhciBjb2x1bW4gaW4gcm93KSB7XHJcbiAgICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcclxuICAgICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY29sdW1ucztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIpIHtcclxuICAgIHZhciByZUZvcm1hdCA9IG5ldyBSZWdFeHAoXCJbXFxcIlwiICsgZGVsaW1pdGVyICsgXCJcXG5dXCIpLFxyXG4gICAgICAgIGRlbGltaXRlckNvZGUgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XHJcbiAgICAgIHZhciBjb252ZXJ0LCBjb2x1bW5zLCByb3dzID0gcGFyc2VSb3dzKHRleHQsIGZ1bmN0aW9uKHJvdywgaSkge1xyXG4gICAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcclxuICAgICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zO1xyXG4gICAgICByZXR1cm4gcm93cztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVJvd3ModGV4dCwgZikge1xyXG4gICAgICB2YXIgRU9MID0ge30sIC8vIHNlbnRpbmVsIHZhbHVlIGZvciBlbmQtb2YtbGluZVxyXG4gICAgICAgICAgRU9GID0ge30sIC8vIHNlbnRpbmVsIHZhbHVlIGZvciBlbmQtb2YtZmlsZVxyXG4gICAgICAgICAgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xyXG4gICAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxyXG4gICAgICAgICAgSSA9IDAsIC8vIGN1cnJlbnQgY2hhcmFjdGVyIGluZGV4XHJcbiAgICAgICAgICBuID0gMCwgLy8gdGhlIGN1cnJlbnQgbGluZSBudW1iZXJcclxuICAgICAgICAgIHQsIC8vIHRoZSBjdXJyZW50IHRva2VuXHJcbiAgICAgICAgICBlb2w7IC8vIGlzIHRoZSBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHRva2VuKCkge1xyXG4gICAgICAgIGlmIChJID49IE4pIHJldHVybiBFT0Y7IC8vIHNwZWNpYWwgY2FzZTogZW5kIG9mIGZpbGVcclxuICAgICAgICBpZiAoZW9sKSByZXR1cm4gZW9sID0gZmFsc2UsIEVPTDsgLy8gc3BlY2lhbCBjYXNlOiBlbmQgb2YgbGluZVxyXG5cclxuICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IHF1b3Rlc1xyXG4gICAgICAgIHZhciBqID0gSSwgYztcclxuICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSAzNCkge1xyXG4gICAgICAgICAgdmFyIGkgPSBqO1xyXG4gICAgICAgICAgd2hpbGUgKGkrKyA8IE4pIHtcclxuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpKSA9PT0gMzQpIHtcclxuICAgICAgICAgICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMzQpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgSSA9IGkgKyAyO1xyXG4gICAgICAgICAgYyA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7XHJcbiAgICAgICAgICBpZiAoYyA9PT0gMTMpIHtcclxuICAgICAgICAgICAgZW9sID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHRleHQuY2hhckNvZGVBdChpICsgMikgPT09IDEwKSArK0k7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDEwKSB7XHJcbiAgICAgICAgICAgIGVvbCA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqICsgMSwgaSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjb21tb24gY2FzZTogZmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lXHJcbiAgICAgICAgd2hpbGUgKEkgPCBOKSB7XHJcbiAgICAgICAgICB2YXIgayA9IDE7XHJcbiAgICAgICAgICBjID0gdGV4dC5jaGFyQ29kZUF0KEkrKyk7XHJcbiAgICAgICAgICBpZiAoYyA9PT0gMTApIGVvbCA9IHRydWU7IC8vIFxcblxyXG4gICAgICAgICAgZWxzZSBpZiAoYyA9PT0gMTMpIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gMTApICsrSSwgKytrOyB9IC8vIFxccnxcXHJcXG5cclxuICAgICAgICAgIGVsc2UgaWYgKGMgIT09IGRlbGltaXRlckNvZGUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgSSAtIGspO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlOiBsYXN0IHRva2VuIGJlZm9yZSBFT0ZcclxuICAgICAgICByZXR1cm4gdGV4dC5zbGljZShqKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xyXG4gICAgICAgIHZhciBhID0gW107XHJcbiAgICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHtcclxuICAgICAgICAgIGEucHVzaCh0KTtcclxuICAgICAgICAgIHQgPSB0b2tlbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZiAmJiAoYSA9IGYoYSwgbisrKSkgPT0gbnVsbCkgY29udGludWU7XHJcbiAgICAgICAgcm93cy5wdXNoKGEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcm93cztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtYXQocm93cywgY29sdW1ucykge1xyXG4gICAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xyXG4gICAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChyb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcclxuICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24oY29sdW1uKSB7XHJcbiAgICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xyXG4gICAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcclxuICAgICAgfSkpLmpvaW4oXCJcXG5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XHJcbiAgICAgIHJldHVybiByb3dzLm1hcChmb3JtYXRSb3cpLmpvaW4oXCJcXG5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xyXG4gICAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHRleHQpIHtcclxuICAgICAgcmV0dXJuIHRleHQgPT0gbnVsbCA/IFwiXCJcclxuICAgICAgICAgIDogcmVGb3JtYXQudGVzdCh0ZXh0ICs9IFwiXCIpID8gXCJcXFwiXCIgKyB0ZXh0LnJlcGxhY2UoL1xcXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXHJcbiAgICAgICAgICA6IHRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGFyc2U6IHBhcnNlLFxyXG4gICAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcclxuICAgICAgZm9ybWF0OiBmb3JtYXQsXHJcbiAgICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgY3N2ID0gZHN2KFwiLFwiKTtcclxuXHJcbiAgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xyXG4gIHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xyXG4gIHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xyXG4gIHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XHJcblxyXG4gIHZhciB0c3YgPSBkc3YoXCJcXHRcIik7XHJcblxyXG4gIHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcclxuICB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcclxuICB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcclxuICB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xyXG5cclxuICBmdW5jdGlvbiByZXF1ZXN0KHVybCwgY2FsbGJhY2spIHtcclxuICAgIHZhciByZXF1ZXN0LFxyXG4gICAgICAgIGV2ZW50ID0gZGlzcGF0Y2goXCJiZWZvcmVzZW5kXCIsIFwicHJvZ3Jlc3NcIiwgXCJsb2FkXCIsIFwiZXJyb3JcIiksXHJcbiAgICAgICAgbWltZVR5cGUsXHJcbiAgICAgICAgaGVhZGVycyA9IG1hcCQxKCksXHJcbiAgICAgICAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0LFxyXG4gICAgICAgIHVzZXIgPSBudWxsLFxyXG4gICAgICAgIHBhc3N3b3JkID0gbnVsbCxcclxuICAgICAgICByZXNwb25zZSxcclxuICAgICAgICByZXNwb25zZVR5cGUsXHJcbiAgICAgICAgdGltZW91dCA9IDA7XHJcblxyXG4gICAgLy8gSWYgSUUgZG9lcyBub3Qgc3VwcG9ydCBDT1JTLCB1c2UgWERvbWFpblJlcXVlc3QuXHJcbiAgICBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9PSBcInVuZGVmaW5lZFwiXHJcbiAgICAgICAgJiYgIShcIndpdGhDcmVkZW50aWFsc1wiIGluIHhocilcclxuICAgICAgICAmJiAvXihodHRwKHMpPzopP1xcL1xcLy8udGVzdCh1cmwpKSB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3Q7XHJcblxyXG4gICAgXCJvbmxvYWRcIiBpbiB4aHJcclxuICAgICAgICA/IHhoci5vbmxvYWQgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSByZXNwb25kXHJcbiAgICAgICAgOiB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24obykgeyB4aHIucmVhZHlTdGF0ZSA+IDMgJiYgcmVzcG9uZChvKTsgfTtcclxuXHJcbiAgICBmdW5jdGlvbiByZXNwb25kKG8pIHtcclxuICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMsIHJlc3VsdDtcclxuICAgICAgaWYgKCFzdGF0dXMgJiYgaGFzUmVzcG9uc2UoeGhyKVxyXG4gICAgICAgICAgfHwgc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDBcclxuICAgICAgICAgIHx8IHN0YXR1cyA9PT0gMzA0KSB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXNwb25zZS5jYWxsKHJlcXVlc3QsIHhocik7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LmNhbGwoXCJlcnJvclwiLCByZXF1ZXN0LCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXN1bHQgPSB4aHI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV2ZW50LmNhbGwoXCJsb2FkXCIsIHJlcXVlc3QsIHJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXZlbnQuY2FsbChcImVycm9yXCIsIHJlcXVlc3QsIG8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgIGV2ZW50LmNhbGwoXCJwcm9ncmVzc1wiLCByZXF1ZXN0LCBlKTtcclxuICAgIH07XHJcblxyXG4gICAgcmVxdWVzdCA9IHtcclxuICAgICAgaGVhZGVyOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIG5hbWUgPSAobmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gaGVhZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIGhlYWRlcnMucmVtb3ZlKG5hbWUpO1xyXG4gICAgICAgIGVsc2UgaGVhZGVycy5zZXQobmFtZSwgdmFsdWUgKyBcIlwiKTtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIElmIG1pbWVUeXBlIGlzIG5vbi1udWxsIGFuZCBubyBBY2NlcHQgaGVhZGVyIGlzIHNldCwgYSBkZWZhdWx0IGlzIHVzZWQuXHJcbiAgICAgIG1pbWVUeXBlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIG1pbWVUeXBlO1xyXG4gICAgICAgIG1pbWVUeXBlID0gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZSArIFwiXCI7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBTcGVjaWZpZXMgd2hhdCB0eXBlIHRoZSByZXNwb25zZSB2YWx1ZSBzaG91bGQgdGFrZTtcclxuICAgICAgLy8gZm9yIGluc3RhbmNlLCBhcnJheWJ1ZmZlciwgYmxvYiwgZG9jdW1lbnQsIG9yIHRleHQuXHJcbiAgICAgIHJlc3BvbnNlVHlwZTogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiByZXNwb25zZVR5cGU7XHJcbiAgICAgICAgcmVzcG9uc2VUeXBlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICB0aW1lb3V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRpbWVvdXQ7XHJcbiAgICAgICAgdGltZW91dCA9ICt2YWx1ZTtcclxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHVzZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gdXNlciA6ICh1c2VyID0gdmFsdWUgPT0gbnVsbCA/IG51bGwgOiB2YWx1ZSArIFwiXCIsIHJlcXVlc3QpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcGFzc3dvcmQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAxID8gcGFzc3dvcmQgOiAocGFzc3dvcmQgPSB2YWx1ZSA9PSBudWxsID8gbnVsbCA6IHZhbHVlICsgXCJcIiwgcmVxdWVzdCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBTcGVjaWZ5IGhvdyB0byBjb252ZXJ0IHRoZSByZXNwb25zZSBjb250ZW50IHRvIGEgc3BlY2lmaWMgdHlwZTtcclxuICAgICAgLy8gY2hhbmdlcyB0aGUgY2FsbGJhY2sgdmFsdWUgb24gXCJsb2FkXCIgZXZlbnRzLlxyXG4gICAgICByZXNwb25zZTogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXNwb25zZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gQWxpYXMgZm9yIHNlbmQoXCJHRVRcIiwg4oCmKS5cclxuICAgICAgZ2V0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiByZXF1ZXN0LnNlbmQoXCJHRVRcIiwgZGF0YSwgY2FsbGJhY2spO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gQWxpYXMgZm9yIHNlbmQoXCJQT1NUXCIsIOKApikuXHJcbiAgICAgIHBvc3Q6IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Quc2VuZChcIlBPU1RcIiwgZGF0YSwgY2FsbGJhY2spO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLy8gSWYgY2FsbGJhY2sgaXMgbm9uLW51bGwsIGl0IHdpbGwgYmUgdXNlZCBmb3IgZXJyb3IgYW5kIGxvYWQgZXZlbnRzLlxyXG4gICAgICBzZW5kOiBmdW5jdGlvbihtZXRob2QsIGRhdGEsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUsIHVzZXIsIHBhc3N3b3JkKTtcclxuICAgICAgICBpZiAobWltZVR5cGUgIT0gbnVsbCAmJiAhaGVhZGVycy5oYXMoXCJhY2NlcHRcIikpIGhlYWRlcnMuc2V0KFwiYWNjZXB0XCIsIG1pbWVUeXBlICsgXCIsKi8qXCIpO1xyXG4gICAgICAgIGlmICh4aHIuc2V0UmVxdWVzdEhlYWRlcikgaGVhZGVycy5lYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7IHhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHZhbHVlKTsgfSk7XHJcbiAgICAgICAgaWYgKG1pbWVUeXBlICE9IG51bGwgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUpIHhoci5vdmVycmlkZU1pbWVUeXBlKG1pbWVUeXBlKTtcclxuICAgICAgICBpZiAocmVzcG9uc2VUeXBlICE9IG51bGwpIHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGU7XHJcbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB4aHIudGltZW91dCA9IHRpbWVvdXQ7XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikgY2FsbGJhY2sgPSBkYXRhLCBkYXRhID0gbnVsbDtcclxuICAgICAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiBjYWxsYmFjay5sZW5ndGggPT09IDEpIGNhbGxiYWNrID0gZml4Q2FsbGJhY2soY2FsbGJhY2spO1xyXG4gICAgICAgIGlmIChjYWxsYmFjayAhPSBudWxsKSByZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgY2FsbGJhY2spLm9uKFwibG9hZFwiLCBmdW5jdGlvbih4aHIpIHsgY2FsbGJhY2sobnVsbCwgeGhyKTsgfSk7XHJcbiAgICAgICAgZXZlbnQuY2FsbChcImJlZm9yZXNlbmRcIiwgcmVxdWVzdCwgeGhyKTtcclxuICAgICAgICB4aHIuc2VuZChkYXRhID09IG51bGwgPyBudWxsIDogZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgeGhyLmFib3J0KCk7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQub24uYXBwbHkoZXZlbnQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBldmVudCA/IHJlcXVlc3QgOiB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xyXG4gICAgICByZXR1cm4gcmVxdWVzdC5nZXQoY2FsbGJhY2spO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXF1ZXN0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZml4Q2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihlcnJvciwgeGhyKSB7XHJcbiAgICAgIGNhbGxiYWNrKGVycm9yID09IG51bGwgPyB4aHIgOiBudWxsKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYXNSZXNwb25zZSh4aHIpIHtcclxuICAgIHZhciB0eXBlID0geGhyLnJlc3BvbnNlVHlwZTtcclxuICAgIHJldHVybiB0eXBlICYmIHR5cGUgIT09IFwidGV4dFwiXHJcbiAgICAgICAgPyB4aHIucmVzcG9uc2UgLy8gbnVsbCBvbiBlcnJvclxyXG4gICAgICAgIDogeGhyLnJlc3BvbnNlVGV4dDsgLy8gXCJcIiBvbiBlcnJvclxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHlwZShkZWZhdWx0TWltZVR5cGUsIHJlc3BvbnNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odXJsLCBjYWxsYmFjaykge1xyXG4gICAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpLnJlc3BvbnNlKHJlc3BvbnNlKTtcclxuICAgICAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xyXG4gICAgICAgIHJldHVybiByLmdldChjYWxsYmFjayk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHI7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGh0bWwgPSB0eXBlKFwidGV4dC9odG1sXCIsIGZ1bmN0aW9uKHhocikge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHhoci5yZXNwb25zZVRleHQpO1xyXG4gIH0pO1xyXG5cclxuICB2YXIganNvbiA9IHR5cGUoXCJhcHBsaWNhdGlvbi9qc29uXCIsIGZ1bmN0aW9uKHhocikge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciB0ZXh0ID0gdHlwZShcInRleHQvcGxhaW5cIiwgZnVuY3Rpb24oeGhyKSB7XHJcbiAgICByZXR1cm4geGhyLnJlc3BvbnNlVGV4dDtcclxuICB9KTtcclxuXHJcbiAgdmFyIHhtbCA9IHR5cGUoXCJhcHBsaWNhdGlvbi94bWxcIiwgZnVuY3Rpb24oeGhyKSB7XHJcbiAgICB2YXIgeG1sID0geGhyLnJlc3BvbnNlWE1MO1xyXG4gICAgaWYgKCF4bWwpIHRocm93IG5ldyBFcnJvcihcInBhcnNlIGVycm9yXCIpO1xyXG4gICAgcmV0dXJuIHhtbDtcclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZHN2JDEoZGVmYXVsdE1pbWVUeXBlLCBwYXJzZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVybCwgcm93LCBjYWxsYmFjaykge1xyXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGNhbGxiYWNrID0gcm93LCByb3cgPSBudWxsO1xyXG4gICAgICB2YXIgciA9IHJlcXVlc3QodXJsKS5taW1lVHlwZShkZWZhdWx0TWltZVR5cGUpO1xyXG4gICAgICByLnJvdyA9IGZ1bmN0aW9uKF8pIHsgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByLnJlc3BvbnNlKHJlc3BvbnNlT2YocGFyc2UsIHJvdyA9IF8pKSA6IHJvdzsgfTtcclxuICAgICAgci5yb3cocm93KTtcclxuICAgICAgcmV0dXJuIGNhbGxiYWNrID8gci5nZXQoY2FsbGJhY2spIDogcjtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXNwb25zZU9mKHBhcnNlLCByb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiAgICAgIHJldHVybiBwYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCwgcm93KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgY3N2JDEgPSBkc3YkMShcInRleHQvY3N2XCIsIGNzdlBhcnNlKTtcclxuXHJcbiAgdmFyIHRzdiQxID0gZHN2JDEoXCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzXCIsIHRzdlBhcnNlKTtcclxuXHJcbiAgdmFyIGZyYW1lID0gMDtcclxuICB2YXIgdGltZW91dCA9IDA7XHJcbiAgdmFyIGludGVydmFsID0gMDtcclxuICB2YXIgcG9rZURlbGF5ID0gMTAwMDtcclxuICB2YXIgdGFza0hlYWQ7XHJcbiAgdmFyIHRhc2tUYWlsO1xyXG4gIHZhciBjbG9ja0xhc3QgPSAwO1xyXG4gIHZhciBjbG9ja05vdyA9IDA7XHJcbiAgdmFyIGNsb2NrU2tldyA9IDA7XHJcbiAgdmFyIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZTtcclxuICB2YXIgc2V0RnJhbWUgPSB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgID8gKGNsb2NrID09PSBEYXRlID8gZnVuY3Rpb24oZikgeyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7IGYoY2xvY2subm93KCkpOyB9KTsgfSA6IHJlcXVlc3RBbmltYXRpb25GcmFtZSlcclxuICAgICAgICAgIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcclxuICBmdW5jdGlvbiBub3coKSB7XHJcbiAgICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGVhck5vdygpIHtcclxuICAgIGNsb2NrTm93ID0gMDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFRpbWVyKCkge1xyXG4gICAgdGhpcy5fY2FsbCA9XHJcbiAgICB0aGlzLl90aW1lID1cclxuICAgIHRoaXMuX25leHQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IFRpbWVyLFxyXG4gICAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcclxuICAgICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XHJcbiAgICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XHJcbiAgICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XHJcbiAgICAgICAgdGFza1RhaWwgPSB0aGlzO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcclxuICAgICAgdGhpcy5fdGltZSA9IHRpbWU7XHJcbiAgICAgIHNsZWVwKCk7XHJcbiAgICB9LFxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLl9jYWxsKSB7XHJcbiAgICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xyXG4gICAgICAgIHNsZWVwKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcclxuICAgIHZhciB0ID0gbmV3IFRpbWVyO1xyXG4gICAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XHJcbiAgICByZXR1cm4gdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XHJcbiAgICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cclxuICAgICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxyXG4gICAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcclxuICAgIHdoaWxlICh0KSB7XHJcbiAgICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xyXG4gICAgICB0ID0gdC5fbmV4dDtcclxuICAgIH1cclxuICAgIC0tZnJhbWU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB3YWtlKHRpbWUpIHtcclxuICAgIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IHRpbWUgfHwgY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xyXG4gICAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRpbWVyRmx1c2goKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIGZyYW1lID0gMDtcclxuICAgICAgbmFwKCk7XHJcbiAgICAgIGNsb2NrTm93ID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBva2UkMSgpIHtcclxuICAgIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XHJcbiAgICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbmFwKCkge1xyXG4gICAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xyXG4gICAgd2hpbGUgKHQxKSB7XHJcbiAgICAgIGlmICh0MS5fY2FsbCkge1xyXG4gICAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcclxuICAgICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcclxuICAgICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRhc2tUYWlsID0gdDA7XHJcbiAgICBzbGVlcCh0aW1lKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcclxuICAgIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxyXG4gICAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XHJcbiAgICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7XHJcbiAgICBpZiAoZGVsYXkgPiAyNCkge1xyXG4gICAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCBkZWxheSk7XHJcbiAgICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghaW50ZXJ2YWwpIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSQxLCBwb2tlRGVsYXkpO1xyXG4gICAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGltZW91dCQxKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xyXG4gICAgdmFyIHQgPSBuZXcgVGltZXI7XHJcbiAgICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xyXG4gICAgdC5yZXN0YXJ0KGZ1bmN0aW9uKGVsYXBzZWQpIHtcclxuICAgICAgdC5zdG9wKCk7XHJcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XHJcbiAgICB9LCBkZWxheSwgdGltZSk7XHJcbiAgICByZXR1cm4gdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVydmFsJDEoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XHJcbiAgICB2YXIgdCA9IG5ldyBUaW1lciwgdG90YWwgPSBkZWxheTtcclxuICAgIGlmIChkZWxheSA9PSBudWxsKSByZXR1cm4gdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSksIHQ7XHJcbiAgICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XHJcbiAgICB0LnJlc3RhcnQoZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XHJcbiAgICAgIGVsYXBzZWQgKz0gdG90YWw7XHJcbiAgICAgIHQucmVzdGFydCh0aWNrLCB0b3RhbCArPSBkZWxheSwgdGltZSk7XHJcbiAgICAgIGNhbGxiYWNrKGVsYXBzZWQpO1xyXG4gICAgfSwgZGVsYXksIHRpbWUpO1xyXG4gICAgcmV0dXJuIHQ7XHJcbiAgfVxyXG5cclxudmFyICAgdDAkMSA9IG5ldyBEYXRlO1xyXG52YXIgICB0MSQxID0gbmV3IERhdGU7XHJcbiAgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XHJcbiAgICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSksIGRhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcclxuXHJcbiAgICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XHJcbiAgICB9O1xyXG5cclxuICAgIGludGVydmFsLnJvdW5kID0gZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcclxuICAgICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcclxuICAgICAgcmV0dXJuIGRhdGUgLSBkMCA8IGQxIC0gZGF0ZSA/IGQwIDogZDE7XHJcbiAgICB9O1xyXG5cclxuICAgIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbnRlcnZhbC5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XHJcbiAgICAgIHZhciByYW5nZSA9IFtdO1xyXG4gICAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xyXG4gICAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XHJcbiAgICAgIGlmICghKHN0YXJ0IDwgc3RvcCkgfHwgIShzdGVwID4gMCkpIHJldHVybiByYW5nZTsgLy8gYWxzbyBoYW5kbGVzIEludmFsaWQgRGF0ZVxyXG4gICAgICBkbyByYW5nZS5wdXNoKG5ldyBEYXRlKCtzdGFydCkpOyB3aGlsZSAob2Zmc2V0aShzdGFydCwgc3RlcCksIGZsb29yaShzdGFydCksIHN0YXJ0IDwgc3RvcClcclxuICAgICAgcmV0dXJuIHJhbmdlO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XHJcbiAgICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICAgICAgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgICAgICB3aGlsZSAoLS1zdGVwID49IDApIHdoaWxlIChvZmZzZXRpKGRhdGUsIDEpLCAhdGVzdChkYXRlKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoY291bnQpIHtcclxuICAgICAgaW50ZXJ2YWwuY291bnQgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICAgICAgdDAkMS5zZXRUaW1lKCtzdGFydCksIHQxJDEuc2V0VGltZSgrZW5kKTtcclxuICAgICAgICBmbG9vcmkodDAkMSksIGZsb29yaSh0MSQxKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCQxLCB0MSQxKSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcclxuICAgICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcclxuICAgICAgICByZXR1cm4gIWlzRmluaXRlKHN0ZXApIHx8ICEoc3RlcCA+IDApID8gbnVsbFxyXG4gICAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcclxuICAgICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcclxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oZCkgeyByZXR1cm4gZmllbGQoZCkgJSBzdGVwID09PSAwOyB9XHJcbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGludGVydmFsO1xyXG4gIH1cclxuXHJcbiAgdmFyIG1pbGxpc2Vjb25kID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBub29wXHJcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xyXG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XHJcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xyXG4gIH0pO1xyXG5cclxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXHJcbiAgbWlsbGlzZWNvbmQuZXZlcnkgPSBmdW5jdGlvbihrKSB7XHJcbiAgICBrID0gTWF0aC5mbG9vcihrKTtcclxuICAgIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKCEoayA+IDEpKSByZXR1cm4gbWlsbGlzZWNvbmQ7XHJcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcclxuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xyXG4gICAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGs7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XHJcblxyXG4gIHZhciBkdXJhdGlvblNlY29uZCA9IDFlMztcclxuICB2YXIgZHVyYXRpb25NaW51dGUgPSA2ZTQ7XHJcbiAgdmFyIGR1cmF0aW9uSG91ciA9IDM2ZTU7XHJcbiAgdmFyIGR1cmF0aW9uRGF5ID0gODY0ZTU7XHJcbiAgdmFyIGR1cmF0aW9uV2VlayA9IDYwNDhlNTtcclxuXHJcbiAgdmFyIHNlY29uZCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBkdXJhdGlvblNlY29uZCkgKiBkdXJhdGlvblNlY29uZCk7XHJcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xyXG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uU2Vjb25kKTtcclxuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcclxuICB9KTtcclxuXHJcbiAgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XHJcblxyXG4gIHZhciBtaW51dGUgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gZHVyYXRpb25NaW51dGUpICogZHVyYXRpb25NaW51dGUpO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XHJcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcclxuICB9LCBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBtaW51dGVzID0gbWludXRlLnJhbmdlO1xyXG5cclxuICB2YXIgaG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHZhciBvZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgKiBkdXJhdGlvbk1pbnV0ZSAlIGR1cmF0aW9uSG91cjtcclxuICAgIGlmIChvZmZzZXQgPCAwKSBvZmZzZXQgKz0gZHVyYXRpb25Ib3VyO1xyXG4gICAgZGF0ZS5zZXRUaW1lKE1hdGguZmxvb3IoKCtkYXRlIC0gb2Zmc2V0KSAvIGR1cmF0aW9uSG91cikgKiBkdXJhdGlvbkhvdXIgKyBvZmZzZXQpO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xyXG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBob3VycyA9IGhvdXIucmFuZ2U7XHJcblxyXG4gIHZhciBkYXkgPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xyXG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uRGF5O1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBkYXlzID0gZGF5LnJhbmdlO1xyXG5cclxuICBmdW5jdGlvbiB3ZWVrZGF5KGkpIHtcclxuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XHJcbiAgICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XHJcbiAgICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcclxuICAgIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgdGltZVdlZWsgPSB3ZWVrZGF5KDApO1xyXG4gIHZhciB0aW1lTW9uZGF5ID0gd2Vla2RheSgxKTtcclxuICB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XHJcbiAgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XHJcbiAgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcclxuICB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcclxuICB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xyXG5cclxuICB2YXIgc3VuZGF5cyA9IHRpbWVXZWVrLnJhbmdlO1xyXG4gIHZhciBtb25kYXlzID0gdGltZU1vbmRheS5yYW5nZTtcclxuICB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xyXG4gIHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xyXG4gIHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcclxuICB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcclxuICB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XHJcblxyXG4gIHZhciBtb250aCA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIGRhdGUuc2V0RGF0ZSgxKTtcclxuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xyXG4gICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCkgKyBzdGVwKTtcclxuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcclxuICB9LCBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XHJcblxyXG4gIHZhciB5ZWFyID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcclxuICAgIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xyXG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcclxuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cclxuICB5ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xyXG4gICAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgICBkYXRlLnNldEZ1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRGdWxsWWVhcigpIC8gaykgKiBrKTtcclxuICAgICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcclxuICAgICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xyXG5cclxuICB2YXIgdXRjTWludXRlID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XHJcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcclxuICB9LCBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xyXG5cclxuICB2YXIgdXRjSG91ciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcclxuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XHJcbiAgICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcclxuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcclxuICB9LCBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xyXG5cclxuICB2YXIgdXRjRGF5ID0gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcclxuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XHJcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcclxuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uRGF5O1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XHJcbiAgfSk7XHJcblxyXG4gIHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xyXG5cclxuICBmdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcclxuICAgIHJldHVybiBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIChkYXRlLmdldFVUQ0RheSgpICsgNyAtIGkpICUgNyk7XHJcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XHJcbiAgICAgIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIHN0ZXAgKiA3KTtcclxuICAgIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcclxuICAgICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZhciB1dGNXZWVrID0gdXRjV2Vla2RheSgwKTtcclxuICB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcclxuICB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XHJcbiAgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XHJcbiAgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcclxuICB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcclxuICB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xyXG5cclxuICB2YXIgdXRjU3VuZGF5cyA9IHV0Y1dlZWsucmFuZ2U7XHJcbiAgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XHJcbiAgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcclxuICB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcclxuICB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XHJcbiAgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XHJcbiAgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xyXG5cclxuICB2YXIgdXRjTW9udGggPSBuZXdJbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XHJcbiAgICBkYXRlLnNldFVUQ0RhdGUoMSk7XHJcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0VVRDTW9udGgoZGF0ZS5nZXRVVENNb250aCgpICsgc3RlcCk7XHJcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XHJcbiAgfSwgZnVuY3Rpb24oZGF0ZSkge1xyXG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcclxuICB9KTtcclxuXHJcbiAgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xyXG5cclxuICB2YXIgdXRjWWVhciA9IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XHJcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xyXG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcclxuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XHJcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xyXG4gICAgcmV0dXJuIGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKTtcclxuICB9LCBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXHJcbiAgdXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcclxuICAgIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcclxuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSAvIGspICogayk7XHJcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XHJcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XHJcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcclxuXHJcbiAgLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxyXG4gIC8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxyXG4gIC8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxyXG4gIGZ1bmN0aW9uIGZvcm1hdERlY2ltYWwoeCwgcCkge1xyXG4gICAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XHJcbiAgICB2YXIgaSwgY29lZmZpY2llbnQgPSB4LnNsaWNlKDAsIGkpO1xyXG5cclxuICAgIC8vIFRoZSBzdHJpbmcgcmV0dXJuZWQgYnkgdG9FeHBvbmVudGlhbCBlaXRoZXIgaGFzIHRoZSBmb3JtIFxcZFxcLlxcZCtlWy0rXVxcZCtcclxuICAgIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXHJcbiAgICByZXR1cm4gW1xyXG4gICAgICBjb2VmZmljaWVudC5sZW5ndGggPiAxID8gY29lZmZpY2llbnRbMF0gKyBjb2VmZmljaWVudC5zbGljZSgyKSA6IGNvZWZmaWNpZW50LFxyXG4gICAgICAreC5zbGljZShpICsgMSlcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBleHBvbmVudCQxKHgpIHtcclxuICAgIHJldHVybiB4ID0gZm9ybWF0RGVjaW1hbChNYXRoLmFicyh4KSksIHggPyB4WzFdIDogTmFOO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0R3JvdXAoZ3JvdXBpbmcsIHRob3VzYW5kcykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xyXG4gICAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcclxuICAgICAgICAgIHQgPSBbXSxcclxuICAgICAgICAgIGogPSAwLFxyXG4gICAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxyXG4gICAgICAgICAgbGVuZ3RoID0gMDtcclxuXHJcbiAgICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xyXG4gICAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xyXG4gICAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xyXG4gICAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcclxuICAgICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdERlZmF1bHQoeCwgcCkge1xyXG4gICAgeCA9IHgudG9QcmVjaXNpb24ocCk7XHJcblxyXG4gICAgb3V0OiBmb3IgKHZhciBuID0geC5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xyXG4gICAgICBzd2l0Y2ggKHhbaV0pIHtcclxuICAgICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImVcIjogYnJlYWsgb3V0O1xyXG4gICAgICAgIGRlZmF1bHQ6IGlmIChpMCA+IDApIGkwID0gMDsgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaTAgPiAwID8geC5zbGljZSgwLCBpMCkgKyB4LnNsaWNlKGkxICsgMSkgOiB4O1xyXG4gIH1cclxuXHJcbiAgdmFyIHByZWZpeEV4cG9uZW50O1xyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXhBdXRvKHgsIHApIHtcclxuICAgIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcclxuICAgIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xyXG4gICAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcclxuICAgICAgICBleHBvbmVudCA9IGRbMV0sXHJcbiAgICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxyXG4gICAgICAgIG4gPSBjb2VmZmljaWVudC5sZW5ndGg7XHJcbiAgICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XHJcbiAgICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcclxuICAgICAgICA6IGkgPiAwID8gY29lZmZpY2llbnQuc2xpY2UoMCwgaSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGkpXHJcbiAgICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0Um91bmRlZCh4LCBwKSB7XHJcbiAgICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XHJcbiAgICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcclxuICAgIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXHJcbiAgICAgICAgZXhwb25lbnQgPSBkWzFdO1xyXG4gICAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcclxuICAgICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcclxuICAgICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XHJcbiAgfVxyXG5cclxuICB2YXIgZm9ybWF0VHlwZXMgPSB7XHJcbiAgICBcIlwiOiBmb3JtYXREZWZhdWx0LFxyXG4gICAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxyXG4gICAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXHJcbiAgICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXHJcbiAgICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXHJcbiAgICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxyXG4gICAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcclxuICAgIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxyXG4gICAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXHJcbiAgICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcclxuICAgIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxyXG4gICAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXHJcbiAgICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcclxuICAgIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxyXG4gIH07XHJcblxyXG4gIC8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bdHlwZV1cclxuICB2YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtXFwoIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KFthLXolXSk/JC9pO1xyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XHJcbiAgICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xyXG4gICAgaWYgKCEobWF0Y2ggPSByZS5leGVjKHNwZWNpZmllcikpKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGZvcm1hdDogXCIgKyBzcGVjaWZpZXIpO1xyXG5cclxuICAgIHZhciBtYXRjaCxcclxuICAgICAgICBmaWxsID0gbWF0Y2hbMV0gfHwgXCIgXCIsXHJcbiAgICAgICAgYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIixcclxuICAgICAgICBzaWduID0gbWF0Y2hbM10gfHwgXCItXCIsXHJcbiAgICAgICAgc3ltYm9sID0gbWF0Y2hbNF0gfHwgXCJcIixcclxuICAgICAgICB6ZXJvID0gISFtYXRjaFs1XSxcclxuICAgICAgICB3aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XSxcclxuICAgICAgICBjb21tYSA9ICEhbWF0Y2hbN10sXHJcbiAgICAgICAgcHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpLFxyXG4gICAgICAgIHR5cGUgPSBtYXRjaFs5XSB8fCBcIlwiO1xyXG5cclxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXHJcbiAgICBpZiAodHlwZSA9PT0gXCJuXCIpIGNvbW1hID0gdHJ1ZSwgdHlwZSA9IFwiZ1wiO1xyXG5cclxuICAgIC8vIE1hcCBpbnZhbGlkIHR5cGVzIHRvIHRoZSBkZWZhdWx0IGZvcm1hdC5cclxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgdHlwZSA9IFwiXCI7XHJcblxyXG4gICAgLy8gSWYgemVybyBmaWxsIGlzIHNwZWNpZmllZCwgcGFkZGluZyBnb2VzIGFmdGVyIHNpZ24gYW5kIGJlZm9yZSBkaWdpdHMuXHJcbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcclxuXHJcbiAgICB0aGlzLmZpbGwgPSBmaWxsO1xyXG4gICAgdGhpcy5hbGlnbiA9IGFsaWduO1xyXG4gICAgdGhpcy5zaWduID0gc2lnbjtcclxuICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xyXG4gICAgdGhpcy56ZXJvID0gemVybztcclxuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgIHRoaXMuY29tbWEgPSBjb21tYTtcclxuICAgIHRoaXMucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICB9XHJcblxyXG4gIEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLmZpbGxcclxuICAgICAgICArIHRoaXMuYWxpZ25cclxuICAgICAgICArIHRoaXMuc2lnblxyXG4gICAgICAgICsgdGhpcy5zeW1ib2xcclxuICAgICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXHJcbiAgICAgICAgKyAodGhpcy53aWR0aCA9PSBudWxsID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcclxuICAgICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxyXG4gICAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxyXG4gICAgICAgICsgdGhpcy50eXBlO1xyXG4gIH07XHJcblxyXG4gIHZhciBwcmVmaXhlcyA9IFtcInlcIixcInpcIixcImFcIixcImZcIixcInBcIixcIm5cIixcIlxceEI1XCIsXCJtXCIsXCJcIixcImtcIixcIk1cIixcIkdcIixcIlRcIixcIlBcIixcIkVcIixcIlpcIixcIllcIl07XHJcblxyXG4gIGZ1bmN0aW9uIGlkZW50aXR5JDMoeCkge1xyXG4gICAgcmV0dXJuIHg7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XHJcbiAgICB2YXIgZ3JvdXAgPSBsb2NhbGUuZ3JvdXBpbmcgJiYgbG9jYWxlLnRob3VzYW5kcyA/IGZvcm1hdEdyb3VwKGxvY2FsZS5ncm91cGluZywgbG9jYWxlLnRob3VzYW5kcykgOiBpZGVudGl0eSQzLFxyXG4gICAgICAgIGN1cnJlbmN5ID0gbG9jYWxlLmN1cnJlbmN5LFxyXG4gICAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbDtcclxuXHJcbiAgICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XHJcbiAgICAgIHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xyXG5cclxuICAgICAgdmFyIGZpbGwgPSBzcGVjaWZpZXIuZmlsbCxcclxuICAgICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxyXG4gICAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxyXG4gICAgICAgICAgc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCxcclxuICAgICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcclxuICAgICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxyXG4gICAgICAgICAgY29tbWEgPSBzcGVjaWZpZXIuY29tbWEsXHJcbiAgICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxyXG4gICAgICAgICAgdHlwZSA9IHNwZWNpZmllci50eXBlO1xyXG5cclxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXHJcbiAgICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxyXG4gICAgICB2YXIgcHJlZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzBdIDogc3ltYm9sID09PSBcIiNcIiAmJiAvW2JveFhdLy50ZXN0KHR5cGUpID8gXCIwXCIgKyB0eXBlLnRvTG93ZXJDYXNlKCkgOiBcIlwiLFxyXG4gICAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzFdIDogL1slcF0vLnRlc3QodHlwZSkgPyBcIiVcIiA6IFwiXCI7XHJcblxyXG4gICAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xyXG4gICAgICAvLyBJcyB0aGlzIGFuIGludGVnZXIgdHlwZT9cclxuICAgICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cclxuICAgICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcclxuICAgICAgICAgIG1heWJlU3VmZml4ID0gIXR5cGUgfHwgL1tkZWZncHJzJV0vLnRlc3QodHlwZSk7XHJcblxyXG4gICAgICAvLyBTZXQgdGhlIGRlZmF1bHQgcHJlY2lzaW9uIGlmIG5vdCBzcGVjaWZpZWQsXHJcbiAgICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXHJcbiAgICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cclxuICAgICAgLy8gRm9yIGZpeGVkIHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMCwgMjBdLlxyXG4gICAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/ICh0eXBlID8gNiA6IDEyKVxyXG4gICAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXHJcbiAgICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xyXG4gICAgICAgIHZhciB2YWx1ZVByZWZpeCA9IHByZWZpeCxcclxuICAgICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXHJcbiAgICAgICAgICAgIGksIG4sIGM7XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xyXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBmb3JtYXRUeXBlKHZhbHVlKSArIHZhbHVlU3VmZml4O1xyXG4gICAgICAgICAgdmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZSA9ICt2YWx1ZTtcclxuXHJcbiAgICAgICAgICAvLyBDb252ZXJ0IG5lZ2F0aXZlIHRvIHBvc2l0aXZlLCBhbmQgY29tcHV0ZSB0aGUgcHJlZml4LlxyXG4gICAgICAgICAgLy8gTm90ZSB0aGF0IC0wIGlzIG5vdCBsZXNzIHRoYW4gMCwgYnV0IDEgLyAtMCBpcyFcclxuICAgICAgICAgIHZhciB2YWx1ZU5lZ2F0aXZlID0gKHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwKSAmJiAodmFsdWUgKj0gLTEsIHRydWUpO1xyXG5cclxuICAgICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cclxuICAgICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZSh2YWx1ZSwgcHJlY2lzaW9uKTtcclxuXHJcbiAgICAgICAgICAvLyBJZiB0aGUgb3JpZ2luYWwgdmFsdWUgd2FzIG5lZ2F0aXZlLCBpdCBtYXkgYmUgcm91bmRlZCB0byB6ZXJvIGR1cmluZ1xyXG4gICAgICAgICAgLy8gZm9ybWF0dGluZzsgdHJlYXQgdGhpcyBhcyAocG9zaXRpdmUpIHplcm8uXHJcbiAgICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSkge1xyXG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksICg0OCA8IGMgJiYgYyA8IDU4KVxyXG4gICAgICAgICAgICAgICAgICB8fCAodHlwZSA9PT0gXCJ4XCIgJiYgOTYgPCBjICYmIGMgPCAxMDMpXHJcbiAgICAgICAgICAgICAgICAgIHx8ICh0eXBlID09PSBcIlhcIiAmJiA2NCA8IGMgJiYgYyA8IDcxKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cclxuICAgICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcclxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gdmFsdWVTdWZmaXggKyAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xyXG5cclxuICAgICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXHJcbiAgICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cclxuICAgICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xyXG4gICAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXHJcbiAgICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXHJcbiAgICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcclxuICAgICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxyXG4gICAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxyXG4gICAgICAgIHN3aXRjaCAoYWxpZ24pIHtcclxuICAgICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nO1xyXG4gICAgICAgICAgY2FzZSBcIj1cIjogcmV0dXJuIHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7XHJcbiAgICAgICAgICBjYXNlIFwiXlwiOiByZXR1cm4gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIGZvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xyXG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxyXG4gICAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMsXHJcbiAgICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcclxuICAgICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZm9ybWF0OiBuZXdGb3JtYXQsXHJcbiAgICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGxvY2FsZTtcclxuICBkZWZhdWx0TG9jYWxlKHtcclxuICAgIGRlY2ltYWw6IFwiLlwiLFxyXG4gICAgdGhvdXNhbmRzOiBcIixcIixcclxuICAgIGdyb3VwaW5nOiBbM10sXHJcbiAgICBjdXJyZW5jeTogW1wiJFwiLCBcIlwiXVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcclxuICAgIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcclxuICAgIGV4cG9ydHMuZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcclxuICAgIGV4cG9ydHMuZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcclxuICAgIHJldHVybiBsb2NhbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcmVjaXNpb25GaXhlZChzdGVwKSB7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50JDEoTWF0aC5hYnMoc3RlcCkpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50JDEodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudCQxKE1hdGguYWJzKHN0ZXApKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcmVjaXNpb25Sb3VuZChzdGVwLCBtYXgpIHtcclxuICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQkMShtYXgpIC0gZXhwb25lbnQkMShzdGVwKSkgKyAxO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9jYWxEYXRlKGQpIHtcclxuICAgIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcclxuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XHJcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoZC55KTtcclxuICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IERhdGUoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xyXG4gICAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xyXG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XHJcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcclxuICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuZXdZZWFyKHkpIHtcclxuICAgIHJldHVybiB7eTogeSwgbTogMCwgZDogMSwgSDogMCwgTTogMCwgUzogMCwgTDogMH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRMb2NhbGUkMShsb2NhbGUpIHtcclxuICAgIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXHJcbiAgICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcclxuICAgICAgICBsb2NhbGVfdGltZSA9IGxvY2FsZS50aW1lLFxyXG4gICAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXHJcbiAgICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXHJcbiAgICAgICAgbG9jYWxlX3Nob3J0V2Vla2RheXMgPSBsb2NhbGUuc2hvcnREYXlzLFxyXG4gICAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxyXG4gICAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcclxuXHJcbiAgICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXHJcbiAgICAgICAgcGVyaW9kTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9wZXJpb2RzKSxcclxuICAgICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxyXG4gICAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcclxuICAgICAgICBzaG9ydFdlZWtkYXlSZSA9IGZvcm1hdFJlKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcclxuICAgICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxyXG4gICAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcclxuICAgICAgICBtb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfbW9udGhzKSxcclxuICAgICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxyXG4gICAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcclxuXHJcbiAgICB2YXIgZm9ybWF0cyA9IHtcclxuICAgICAgXCJhXCI6IGZvcm1hdFNob3J0V2Vla2RheSxcclxuICAgICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXHJcbiAgICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxyXG4gICAgICBcIkJcIjogZm9ybWF0TW9udGgsXHJcbiAgICAgIFwiY1wiOiBudWxsLFxyXG4gICAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcclxuICAgICAgXCJlXCI6IGZvcm1hdERheU9mTW9udGgsXHJcbiAgICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXHJcbiAgICAgIFwiSVwiOiBmb3JtYXRIb3VyMTIsXHJcbiAgICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXHJcbiAgICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXHJcbiAgICAgIFwibVwiOiBmb3JtYXRNb250aE51bWJlcixcclxuICAgICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXHJcbiAgICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXHJcbiAgICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxyXG4gICAgICBcIlVcIjogZm9ybWF0V2Vla051bWJlclN1bmRheSxcclxuICAgICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXIsXHJcbiAgICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxyXG4gICAgICBcInhcIjogbnVsbCxcclxuICAgICAgXCJYXCI6IG51bGwsXHJcbiAgICAgIFwieVwiOiBmb3JtYXRZZWFyLFxyXG4gICAgICBcIllcIjogZm9ybWF0RnVsbFllYXIsXHJcbiAgICAgIFwiWlwiOiBmb3JtYXRab25lLFxyXG4gICAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHV0Y0Zvcm1hdHMgPSB7XHJcbiAgICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXHJcbiAgICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxyXG4gICAgICBcImJcIjogZm9ybWF0VVRDU2hvcnRNb250aCxcclxuICAgICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxyXG4gICAgICBcImNcIjogbnVsbCxcclxuICAgICAgXCJkXCI6IGZvcm1hdFVUQ0RheU9mTW9udGgsXHJcbiAgICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxyXG4gICAgICBcIkhcIjogZm9ybWF0VVRDSG91cjI0LFxyXG4gICAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxyXG4gICAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxyXG4gICAgICBcIkxcIjogZm9ybWF0VVRDTWlsbGlzZWNvbmRzLFxyXG4gICAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXHJcbiAgICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxyXG4gICAgICBcInBcIjogZm9ybWF0VVRDUGVyaW9kLFxyXG4gICAgICBcIlNcIjogZm9ybWF0VVRDU2Vjb25kcyxcclxuICAgICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXHJcbiAgICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyLFxyXG4gICAgICBcIldcIjogZm9ybWF0VVRDV2Vla051bWJlck1vbmRheSxcclxuICAgICAgXCJ4XCI6IG51bGwsXHJcbiAgICAgIFwiWFwiOiBudWxsLFxyXG4gICAgICBcInlcIjogZm9ybWF0VVRDWWVhcixcclxuICAgICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxyXG4gICAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcclxuICAgICAgXCIlXCI6IGZvcm1hdExpdGVyYWxQZXJjZW50XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBwYXJzZXMgPSB7XHJcbiAgICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcclxuICAgICAgXCJBXCI6IHBhcnNlV2Vla2RheSxcclxuICAgICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcclxuICAgICAgXCJCXCI6IHBhcnNlTW9udGgsXHJcbiAgICAgIFwiY1wiOiBwYXJzZUxvY2FsZURhdGVUaW1lLFxyXG4gICAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxyXG4gICAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxyXG4gICAgICBcIkhcIjogcGFyc2VIb3VyMjQsXHJcbiAgICAgIFwiSVwiOiBwYXJzZUhvdXIyNCxcclxuICAgICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxyXG4gICAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXHJcbiAgICAgIFwibVwiOiBwYXJzZU1vbnRoTnVtYmVyLFxyXG4gICAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxyXG4gICAgICBcInBcIjogcGFyc2VQZXJpb2QsXHJcbiAgICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXHJcbiAgICAgIFwiVVwiOiBwYXJzZVdlZWtOdW1iZXJTdW5kYXksXHJcbiAgICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXIsXHJcbiAgICAgIFwiV1wiOiBwYXJzZVdlZWtOdW1iZXJNb25kYXksXHJcbiAgICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXHJcbiAgICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXHJcbiAgICAgIFwieVwiOiBwYXJzZVllYXIsXHJcbiAgICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxyXG4gICAgICBcIlpcIjogcGFyc2Vab25lLFxyXG4gICAgICBcIiVcIjogcGFyc2VMaXRlcmFsUGVyY2VudFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXHJcbiAgICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xyXG4gICAgZm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCBmb3JtYXRzKTtcclxuICAgIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xyXG4gICAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcclxuICAgIHV0Y0Zvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgdXRjRm9ybWF0cyk7XHJcbiAgICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcclxuXHJcbiAgICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XHJcbiAgICAgICAgdmFyIHN0cmluZyA9IFtdLFxyXG4gICAgICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgICAgIGogPSAwLFxyXG4gICAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcclxuICAgICAgICAgICAgYyxcclxuICAgICAgICAgICAgcGFkLFxyXG4gICAgICAgICAgICBmb3JtYXQ7XHJcblxyXG4gICAgICAgIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcclxuICAgICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcclxuICAgICAgICAgICAgaWYgKChwYWQgPSBwYWRzW2MgPSBzcGVjaWZpZXIuY2hhckF0KCsraSldKSAhPSBudWxsKSBjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpO1xyXG4gICAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcclxuICAgICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcclxuICAgICAgICAgICAgc3RyaW5nLnB1c2goYyk7XHJcbiAgICAgICAgICAgIGogPSBpICsgMTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0cmluZy5wdXNoKHNwZWNpZmllci5zbGljZShqLCBpKSk7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5ld1BhcnNlKHNwZWNpZmllciwgbmV3RGF0ZSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxyXG4gICAgICAgICAgICBpID0gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcgKz0gXCJcIiwgMCk7XHJcbiAgICAgICAgaWYgKGkgIT0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIC8vIFRoZSBhbS1wbSBmbGFnIGlzIDAgZm9yIEFNLCBhbmQgMSBmb3IgUE0uXHJcbiAgICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cclxuICAgICAgICBpZiAoXCJXXCIgaW4gZCB8fCBcIlVcIiBpbiBkKSB7XHJcbiAgICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJXXCIgaW4gZCA/IDEgOiAwO1xyXG4gICAgICAgICAgdmFyIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XHJcbiAgICAgICAgICBkLm0gPSAwO1xyXG4gICAgICAgICAgZC5kID0gXCJXXCIgaW4gZCA/IChkLncgKyA2KSAlIDcgKyBkLlcgKiA3IC0gKGRheSArIDUpICUgNyA6IGQudyArIGQuVSAqIDcgLSAoZGF5ICsgNikgJSA3O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cclxuICAgICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxyXG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XHJcbiAgICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcclxuICAgICAgICAgIGQuTSArPSBkLlogJSAxMDA7XHJcbiAgICAgICAgICByZXR1cm4gdXRjRGF0ZShkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cclxuICAgICAgICByZXR1cm4gbmV3RGF0ZShkKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xyXG4gICAgICB2YXIgaSA9IDAsXHJcbiAgICAgICAgICBuID0gc3BlY2lmaWVyLmxlbmd0aCxcclxuICAgICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxyXG4gICAgICAgICAgYyxcclxuICAgICAgICAgIHBhcnNlO1xyXG5cclxuICAgICAgd2hpbGUgKGkgPCBuKSB7XHJcbiAgICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xyXG4gICAgICAgIGlmIChjID09PSAzNykge1xyXG4gICAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcclxuICAgICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xyXG4gICAgICAgICAgaWYgKCFwYXJzZSB8fCAoKGogPSBwYXJzZShkLCBzdHJpbmcsIGopKSA8IDApKSByZXR1cm4gLTE7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBqO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xyXG4gICAgICB2YXIgbiA9IHBlcmlvZFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcclxuICAgICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcclxuICAgICAgdmFyIG4gPSBzaG9ydFdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XHJcbiAgICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xyXG4gICAgICB2YXIgbiA9IHdlZWtkYXlSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XHJcbiAgICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcclxuICAgICAgdmFyIG4gPSBzaG9ydE1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xyXG4gICAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xyXG4gICAgICB2YXIgbiA9IG1vbnRoUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xyXG4gICAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcclxuICAgICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlVGltZSwgc3RyaW5nLCBpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZVRpbWUoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xyXG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0V2Vla2RheXNbZC5nZXREYXkoKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XHJcbiAgICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0U2hvcnRNb250aChkKSB7XHJcbiAgICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XHJcbiAgICAgIHJldHVybiBsb2NhbGVfbW9udGhzW2QuZ2V0TW9udGgoKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcclxuICAgICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDU2hvcnRXZWVrZGF5KGQpIHtcclxuICAgICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xyXG4gICAgICByZXR1cm4gbG9jYWxlX3dlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xyXG4gICAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9ybWF0VVRDTW9udGgoZCkge1xyXG4gICAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XHJcbiAgICAgIHJldHVybiBsb2NhbGVfcGVyaW9kc1srKGQuZ2V0VVRDSG91cnMoKSA+PSAxMildO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XHJcbiAgICAgICAgdmFyIGYgPSBuZXdGb3JtYXQoc3BlY2lmaWVyICs9IFwiXCIsIGZvcm1hdHMpO1xyXG4gICAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcclxuICAgICAgICByZXR1cm4gZjtcclxuICAgICAgfSxcclxuICAgICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xyXG4gICAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XHJcbiAgICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgICB9LFxyXG4gICAgICB1dGNGb3JtYXQ6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xyXG4gICAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcclxuICAgICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XHJcbiAgICAgICAgcmV0dXJuIGY7XHJcbiAgICAgIH0sXHJcbiAgICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcclxuICAgICAgICB2YXIgcCA9IG5ld1BhcnNlKHNwZWNpZmllciwgdXRjRGF0ZSk7XHJcbiAgICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifTtcclxuICB2YXIgbnVtYmVyUmUgPSAvXlxccypcXGQrLztcclxuICB2YXIgcGVyY2VudFJlID0gL14lLztcclxuICB2YXIgcmVxdW90ZVJlID0gL1tcXFxcXFxeXFwkXFwqXFwrXFw/XFx8XFxbXFxdXFwoXFwpXFwuXFx7XFx9XS9nO1xyXG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcclxuICAgIHZhciBzaWduID0gdmFsdWUgPCAwID8gXCItXCIgOiBcIlwiLFxyXG4gICAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcclxuICAgICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHNpZ24gKyAobGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpICsgc3RyaW5nIDogc3RyaW5nKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlcXVvdGUocykge1xyXG4gICAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0UmUobmFtZXMpIHtcclxuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xyXG4gICAgdmFyIG1hcCA9IHt9LCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcclxuICAgIHJldHVybiBtYXA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xyXG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLlUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyTW9uZGF5KGQsIHN0cmluZywgaSkge1xyXG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcclxuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDQpKTtcclxuICAgIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IC9eKFopfChbKy1dXFxkXFxkKSg/OlxcOj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xyXG4gICAgcmV0dXJuIG4gPyAoZC5aID0gblsxXSA/IDAgOiAtKG5bMl0gKyAoblszXSB8fCBcIjAwXCIpKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcclxuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcclxuICAgIHJldHVybiBuID8gKGQubSA9IG5bMF0gLSAxLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLm0gPSAwLCBkLmQgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XHJcbiAgICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XHJcbiAgICByZXR1cm4gbiA/IChkLkggPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xyXG4gICAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xyXG4gICAgcmV0dXJuIG4gPyAoZC5NID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcclxuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcclxuICAgIHJldHVybiBuID8gKGQuUyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcclxuICAgIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcclxuICAgIHJldHVybiBuID8gKGQuTCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xyXG4gICAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcclxuICAgIHJldHVybiBuID8gaSArIG5bMF0ubGVuZ3RoIDogLTE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXREYXlPZk1vbnRoKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXRIb3VycygpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XHJcbiAgICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdERheU9mWWVhcihkLCBwKSB7XHJcbiAgICByZXR1cm4gcGFkKDEgKyBkYXkuY291bnQoeWVhcihkKSwgZCksIHAsIDMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XHJcbiAgICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0TWludXRlcyhkLCBwKSB7XHJcbiAgICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFNlY29uZHMoKSwgcCwgMik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcclxuICAgIHJldHVybiBwYWQodGltZVdlZWsuY291bnQoeWVhcihkKSwgZCksIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlcihkKSB7XHJcbiAgICByZXR1cm4gZC5nZXREYXkoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHllYXIoZCksIGQpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRab25lKGQpIHtcclxuICAgIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xyXG4gICAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcclxuICAgICAgICArIHBhZCh6IC8gNjAgfCAwLCBcIjBcIiwgMilcclxuICAgICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0RhdGUoKSwgcCwgMik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VVRDSG91cjEyKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoMSArIHV0Y0RheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXRVVENNb250aCgpICsgMSwgcCwgMik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcclxuICAgIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VVRDU2Vjb25kcyhkLCBwKSB7XHJcbiAgICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZCh1dGNXZWVrLmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXIoZCkge1xyXG4gICAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcclxuICAgIHJldHVybiBwYWQodXRjTW9uZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VVRDRnVsbFllYXIoZCwgcCkge1xyXG4gICAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xyXG4gICAgcmV0dXJuIFwiKzAwMDBcIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xyXG4gICAgcmV0dXJuIFwiJVwiO1xyXG4gIH1cclxuXHJcbiAgdmFyIGxvY2FsZSQxO1xyXG4gIGRlZmF1bHRMb2NhbGUkMSh7XHJcbiAgICBkYXRlVGltZTogXCIleCwgJVhcIixcclxuICAgIGRhdGU6IFwiJS1tLyUtZC8lWVwiLFxyXG4gICAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcclxuICAgIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXHJcbiAgICBkYXlzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcclxuICAgIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxyXG4gICAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcclxuICAgIHNob3J0TW9udGhzOiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdExvY2FsZSQxKGRlZmluaXRpb24pIHtcclxuICAgIGxvY2FsZSQxID0gZm9ybWF0TG9jYWxlJDEoZGVmaW5pdGlvbik7XHJcbiAgICBleHBvcnRzLnRpbWVGb3JtYXQgPSBsb2NhbGUkMS5mb3JtYXQ7XHJcbiAgICBleHBvcnRzLnRpbWVQYXJzZSA9IGxvY2FsZSQxLnBhcnNlO1xyXG4gICAgZXhwb3J0cy51dGNGb3JtYXQgPSBsb2NhbGUkMS51dGNGb3JtYXQ7XHJcbiAgICBleHBvcnRzLnV0Y1BhcnNlID0gbG9jYWxlJDEudXRjUGFyc2U7XHJcbiAgICByZXR1cm4gbG9jYWxlJDE7XHJcbiAgfVxyXG5cclxuICB2YXIgaXNvU3BlY2lmaWVyID0gXCIlWS0lbS0lZFQlSDolTTolUy4lTFpcIjtcclxuXHJcbiAgZnVuY3Rpb24gZm9ybWF0SXNvTmF0aXZlKGRhdGUpIHtcclxuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XHJcbiAgfVxyXG5cclxuICB2YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcclxuICAgICAgPyBmb3JtYXRJc29OYXRpdmVcclxuICAgICAgOiBleHBvcnRzLnV0Y0Zvcm1hdChpc29TcGVjaWZpZXIpO1xyXG5cclxuICBmdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcclxuICAgIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcclxuICAgIHJldHVybiBpc05hTihkYXRlKSA/IG51bGwgOiBkYXRlO1xyXG4gIH1cclxuXHJcbiAgdmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXHJcbiAgICAgID8gcGFyc2VJc29OYXRpdmVcclxuICAgICAgOiBleHBvcnRzLnV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XHJcblxyXG4gIHZhciBhcnJheSQyID0gQXJyYXkucHJvdG90eXBlO1xyXG5cclxuICB2YXIgbWFwJDIgPSBhcnJheSQyLm1hcDtcclxuICB2YXIgc2xpY2UkMyA9IGFycmF5JDIuc2xpY2U7XHJcblxyXG4gIHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xyXG5cclxuICBmdW5jdGlvbiBvcmRpbmFsKHJhbmdlKSB7XHJcbiAgICB2YXIgaW5kZXggPSBtYXAkMSgpLFxyXG4gICAgICAgIGRvbWFpbiA9IFtdLFxyXG4gICAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcclxuXHJcbiAgICByYW5nZSA9IHJhbmdlID09IG51bGwgPyBbXSA6IHNsaWNlJDMuY2FsbChyYW5nZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUoZCkge1xyXG4gICAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcclxuICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcclxuICAgICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xyXG4gICAgICBkb21haW4gPSBbXSwgaW5kZXggPSBtYXAkMSgpO1xyXG4gICAgICB2YXIgaSA9IC0xLCBuID0gXy5sZW5ndGgsIGQsIGtleTtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghaW5kZXguaGFzKGtleSA9IChkID0gX1tpXSkgKyBcIlwiKSkgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2goZCkpO1xyXG4gICAgICByZXR1cm4gc2NhbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIG9yZGluYWwoKVxyXG4gICAgICAgICAgLmRvbWFpbihkb21haW4pXHJcbiAgICAgICAgICAucmFuZ2UocmFuZ2UpXHJcbiAgICAgICAgICAudW5rbm93bih1bmtub3duKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNjYWxlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYmFuZCgpIHtcclxuICAgIHZhciBzY2FsZSA9IG9yZGluYWwoKS51bmtub3duKHVuZGVmaW5lZCksXHJcbiAgICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluLFxyXG4gICAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxyXG4gICAgICAgIHJhbmdlJCQgPSBbMCwgMV0sXHJcbiAgICAgICAgc3RlcCxcclxuICAgICAgICBiYW5kd2lkdGgsXHJcbiAgICAgICAgcm91bmQgPSBmYWxzZSxcclxuICAgICAgICBwYWRkaW5nSW5uZXIgPSAwLFxyXG4gICAgICAgIHBhZGRpbmdPdXRlciA9IDAsXHJcbiAgICAgICAgYWxpZ24gPSAwLjU7XHJcblxyXG4gICAgZGVsZXRlIHNjYWxlLnVua25vd247XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcclxuICAgICAgdmFyIG4gPSBkb21haW4oKS5sZW5ndGgsXHJcbiAgICAgICAgICByZXZlcnNlID0gcmFuZ2UkJFsxXSA8IHJhbmdlJCRbMF0sXHJcbiAgICAgICAgICBzdGFydCA9IHJhbmdlJCRbcmV2ZXJzZSAtIDBdLFxyXG4gICAgICAgICAgc3RvcCA9IHJhbmdlJCRbMSAtIHJldmVyc2VdO1xyXG4gICAgICBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgxLCBuIC0gcGFkZGluZ0lubmVyICsgcGFkZGluZ091dGVyICogMik7XHJcbiAgICAgIGlmIChyb3VuZCkgc3RlcCA9IE1hdGguZmxvb3Ioc3RlcCk7XHJcbiAgICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xyXG4gICAgICBiYW5kd2lkdGggPSBzdGVwICogKDEgLSBwYWRkaW5nSW5uZXIpO1xyXG4gICAgICBpZiAocm91bmQpIHN0YXJ0ID0gTWF0aC5yb3VuZChzdGFydCksIGJhbmR3aWR0aCA9IE1hdGgucm91bmQoYmFuZHdpZHRoKTtcclxuICAgICAgdmFyIHZhbHVlcyA9IHJhbmdlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcclxuICAgICAgcmV0dXJuIG9yZGluYWxSYW5nZShyZXZlcnNlID8gdmFsdWVzLnJldmVyc2UoKSA6IHZhbHVlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlJCQgPSBbK19bMF0sICtfWzFdXSwgcmVzY2FsZSgpKSA6IHJhbmdlJCQuc2xpY2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIHJhbmdlJCQgPSBbK19bMF0sICtfWzFdXSwgcm91bmQgPSB0cnVlLCByZXNjYWxlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmJhbmR3aWR0aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gYmFuZHdpZHRoO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5zdGVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBzdGVwO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocm91bmQgPSAhIV8sIHJlc2NhbGUoKSkgOiByb3VuZDtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucGFkZGluZyA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gcGFkZGluZ091dGVyID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgXykpLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucGFkZGluZ091dGVyID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nT3V0ZXIgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmFsaWduID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbGlnbiA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIF8pKSwgcmVzY2FsZSgpKSA6IGFsaWduO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBiYW5kKClcclxuICAgICAgICAgIC5kb21haW4oZG9tYWluKCkpXHJcbiAgICAgICAgICAucmFuZ2UocmFuZ2UkJClcclxuICAgICAgICAgIC5yb3VuZChyb3VuZClcclxuICAgICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxyXG4gICAgICAgICAgLnBhZGRpbmdPdXRlcihwYWRkaW5nT3V0ZXIpXHJcbiAgICAgICAgICAuYWxpZ24oYWxpZ24pO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcclxuICAgIHZhciBjb3B5ID0gc2NhbGUuY29weTtcclxuXHJcbiAgICBzY2FsZS5wYWRkaW5nID0gc2NhbGUucGFkZGluZ091dGVyO1xyXG4gICAgZGVsZXRlIHNjYWxlLnBhZGRpbmdJbm5lcjtcclxuICAgIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XHJcblxyXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gcG9pbnRpc2goY29weSgpKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNjYWxlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcG9pbnQkNCgpIHtcclxuICAgIHJldHVybiBwb2ludGlzaChiYW5kKCkucGFkZGluZ0lubmVyKDEpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDMoeCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBudW1iZXIkMSh4KSB7XHJcbiAgICByZXR1cm4gK3g7XHJcbiAgfVxyXG5cclxuICB2YXIgdW5pdCA9IFswLCAxXTtcclxuXHJcbiAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXHJcbiAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxyXG4gICAgICAgIDogY29uc3RhbnQkMyhiKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICB2YXIgZCA9IGRlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4geCA8PSBhID8gMCA6IHggPj0gYiA/IDEgOiBkKHgpOyB9O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGVDbGFtcChyZWludGVycG9sYXRlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICB2YXIgciA9IHJlaW50ZXJwb2xhdGUoYSA9ICthLCBiID0gK2IpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gdCA8PSAwID8gYSA6IHQgPj0gMSA/IGIgOiByKHQpOyB9O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGRlaW50ZXJwb2xhdGUsIHJlaW50ZXJwb2xhdGUpIHtcclxuICAgIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XHJcbiAgICBpZiAoZDEgPCBkMCkgZDAgPSBkZWludGVycG9sYXRlKGQxLCBkMCksIHIwID0gcmVpbnRlcnBvbGF0ZShyMSwgcjApO1xyXG4gICAgZWxzZSBkMCA9IGRlaW50ZXJwb2xhdGUoZDAsIGQxKSwgcjAgPSByZWludGVycG9sYXRlKHIwLCByMSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSB7XHJcbiAgICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxyXG4gICAgICAgIGQgPSBuZXcgQXJyYXkoaiksXHJcbiAgICAgICAgciA9IG5ldyBBcnJheShqKSxcclxuICAgICAgICBpID0gLTE7XHJcblxyXG4gICAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXHJcbiAgICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XHJcbiAgICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcclxuICAgICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoKytpIDwgaikge1xyXG4gICAgICBkW2ldID0gZGVpbnRlcnBvbGF0ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xyXG4gICAgICByW2ldID0gcmVpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xyXG4gICAgICB2YXIgaSA9IGJpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xyXG4gICAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGFyZ2V0XHJcbiAgICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXHJcbiAgICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxyXG4gICAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcclxuICAgICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpO1xyXG4gIH1cclxuXHJcbiAgLy8gZGVpbnRlcnBvbGF0ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxyXG4gIC8vIHJlaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBkb21haW4gdmFsdWUgeCBpbiBbYSxiXS5cclxuICBmdW5jdGlvbiBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUkJCwgcmVpbnRlcnBvbGF0ZSkge1xyXG4gICAgdmFyIGRvbWFpbiA9IHVuaXQsXHJcbiAgICAgICAgcmFuZ2UgPSB1bml0LFxyXG4gICAgICAgIGludGVycG9sYXRlJCQgPSBpbnRlcnBvbGF0ZSxcclxuICAgICAgICBjbGFtcCA9IGZhbHNlLFxyXG4gICAgICAgIHBpZWNld2lzZSxcclxuICAgICAgICBvdXRwdXQsXHJcbiAgICAgICAgaW5wdXQ7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcclxuICAgICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XHJcbiAgICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcclxuICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcclxuICAgICAgcmV0dXJuIChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4sIHJhbmdlLCBjbGFtcCA/IGRlaW50ZXJwb2xhdGVDbGFtcChkZWludGVycG9sYXRlJCQpIDogZGVpbnRlcnBvbGF0ZSQkLCBpbnRlcnBvbGF0ZSQkKSkpKCt4KTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiAoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4sIGRlaW50ZXJwb2xhdGUsIGNsYW1wID8gcmVpbnRlcnBvbGF0ZUNsYW1wKHJlaW50ZXJwb2xhdGUpIDogcmVpbnRlcnBvbGF0ZSkpKSgreSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDIuY2FsbChfLCBudW1iZXIkMSksIHJlc2NhbGUoKSkgOiBkb21haW4uc2xpY2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIHJhbmdlID0gc2xpY2UkMy5jYWxsKF8pLCBpbnRlcnBvbGF0ZSQkID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xhbXAgPSAhIV8sIHJlc2NhbGUoKSkgOiBjbGFtcDtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlJCQgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGUkJDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZG9tYWluLCBjb3VudCwgc3BlY2lmaWVyKSB7XHJcbiAgICB2YXIgc3RhcnQgPSBkb21haW5bMF0sXHJcbiAgICAgICAgc3RvcCA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCksXHJcbiAgICAgICAgcHJlY2lzaW9uO1xyXG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcclxuICAgIHN3aXRjaCAoc3BlY2lmaWVyLnR5cGUpIHtcclxuICAgICAgY2FzZSBcInNcIjoge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xyXG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvblByZWZpeChzdGVwLCB2YWx1ZSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xyXG4gICAgICAgIHJldHVybiBleHBvcnRzLmZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIFwiXCI6XHJcbiAgICAgIGNhc2UgXCJlXCI6XHJcbiAgICAgIGNhc2UgXCJnXCI6XHJcbiAgICAgIGNhc2UgXCJwXCI6XHJcbiAgICAgIGNhc2UgXCJyXCI6IHtcclxuICAgICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBcImZcIjpcclxuICAgICAgY2FzZSBcIiVcIjoge1xyXG4gICAgICAgIGlmIChzcGVjaWZpZXIucHJlY2lzaW9uID09IG51bGwgJiYgIWlzTmFOKHByZWNpc2lvbiA9IHByZWNpc2lvbkZpeGVkKHN0ZXApKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCIlXCIpICogMjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cG9ydHMuZm9ybWF0KHNwZWNpZmllcik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcclxuICAgIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XHJcblxyXG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xyXG4gICAgICB2YXIgZCA9IGRvbWFpbigpO1xyXG4gICAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XHJcbiAgICAgIHJldHVybiB0aWNrRm9ybWF0KGRvbWFpbigpLCBjb3VudCwgc3BlY2lmaWVyKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XHJcbiAgICAgIHZhciBkID0gZG9tYWluKCksXHJcbiAgICAgICAgICBpID0gZC5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LFxyXG4gICAgICAgICAgc3RhcnQgPSBkWzBdLFxyXG4gICAgICAgICAgc3RvcCA9IGRbaV0sXHJcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIG4pO1xyXG5cclxuICAgICAgaWYgKHN0ZXApIHtcclxuICAgICAgICBzdGVwID0gdGlja1N0ZXAoTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcCwgTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXAsIG4pO1xyXG4gICAgICAgIGRbMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xyXG4gICAgICAgIGRbaV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcclxuICAgICAgICBkb21haW4oZCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzY2FsZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHNjYWxlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGluZWFyJDIoKSB7XHJcbiAgICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGRlaW50ZXJwb2xhdGUsIGludGVycG9sYXRlTnVtYmVyKTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIkMigpKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpZGVudGl0eSQ0KCkge1xyXG4gICAgdmFyIGRvbWFpbiA9IFswLCAxXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XHJcbiAgICAgIHJldHVybiAreDtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5pbnZlcnQgPSBzY2FsZTtcclxuXHJcbiAgICBzY2FsZS5kb21haW4gPSBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwJDIuY2FsbChfLCBudW1iZXIkMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBpZGVudGl0eSQ0KCkuZG9tYWluKGRvbWFpbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbmljZShkb21haW4sIGludGVydmFsKSB7XHJcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcclxuXHJcbiAgICB2YXIgaTAgPSAwLFxyXG4gICAgICAgIGkxID0gZG9tYWluLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgeDAgPSBkb21haW5baTBdLFxyXG4gICAgICAgIHgxID0gZG9tYWluW2kxXSxcclxuICAgICAgICB0O1xyXG5cclxuICAgIGlmICh4MSA8IHgwKSB7XHJcbiAgICAgIHQgPSBpMCwgaTAgPSBpMSwgaTEgPSB0O1xyXG4gICAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcclxuICAgIH1cclxuXHJcbiAgICBkb21haW5baTBdID0gaW50ZXJ2YWwuZmxvb3IoeDApO1xyXG4gICAgZG9tYWluW2kxXSA9IGludGVydmFsLmNlaWwoeDEpO1xyXG4gICAgcmV0dXJuIGRvbWFpbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlaW50ZXJwb2xhdGUkMShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGIgPSBNYXRoLmxvZyhiIC8gYSkpXHJcbiAgICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4IC8gYSkgLyBiOyB9XHJcbiAgICAgICAgOiBjb25zdGFudCQzKGIpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVpbnRlcnBvbGF0ZShhLCBiKSB7XHJcbiAgICByZXR1cm4gYSA8IDBcclxuICAgICAgICA/IGZ1bmN0aW9uKHQpIHsgcmV0dXJuIC1NYXRoLnBvdygtYiwgdCkgKiBNYXRoLnBvdygtYSwgMSAtIHQpOyB9XHJcbiAgICAgICAgOiBmdW5jdGlvbih0KSB7IHJldHVybiBNYXRoLnBvdyhiLCB0KSAqIE1hdGgucG93KGEsIDEgLSB0KTsgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBvdzEwKHgpIHtcclxuICAgIHJldHVybiBpc0Zpbml0ZSh4KSA/ICsoXCIxZVwiICsgeCkgOiB4IDwgMCA/IDAgOiB4O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcG93cChiYXNlKSB7XHJcbiAgICByZXR1cm4gYmFzZSA9PT0gMTAgPyBwb3cxMFxyXG4gICAgICAgIDogYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5leHBcclxuICAgICAgICA6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucG93KGJhc2UsIHgpOyB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9ncChiYXNlKSB7XHJcbiAgICByZXR1cm4gYmFzZSA9PT0gTWF0aC5FID8gTWF0aC5sb2dcclxuICAgICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcclxuICAgICAgICB8fCBiYXNlID09PSAyICYmIE1hdGgubG9nMlxyXG4gICAgICAgIHx8IChiYXNlID0gTWF0aC5sb2coYmFzZSksIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubG9nKHgpIC8gYmFzZTsgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZWZsZWN0KGYpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiAtZigteCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbG9nKCkge1xyXG4gICAgdmFyIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlJDEsIHJlaW50ZXJwb2xhdGUpLmRvbWFpbihbMSwgMTBdKSxcclxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW4sXHJcbiAgICAgICAgYmFzZSA9IDEwLFxyXG4gICAgICAgIGxvZ3MgPSBsb2dwKDEwKSxcclxuICAgICAgICBwb3dzID0gcG93cCgxMCk7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcclxuICAgICAgbG9ncyA9IGxvZ3AoYmFzZSksIHBvd3MgPSBwb3dwKGJhc2UpO1xyXG4gICAgICBpZiAoZG9tYWluKClbMF0gPCAwKSBsb2dzID0gcmVmbGVjdChsb2dzKSwgcG93cyA9IHJlZmxlY3QocG93cyk7XHJcbiAgICAgIHJldHVybiBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5iYXNlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChiYXNlID0gK18sIHJlc2NhbGUoKSkgOiBiYXNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbihfKSwgcmVzY2FsZSgpKSA6IGRvbWFpbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XHJcbiAgICAgIHZhciBkID0gZG9tYWluKCksXHJcbiAgICAgICAgICB1ID0gZFswXSxcclxuICAgICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICByO1xyXG5cclxuICAgICAgaWYgKHIgPSB2IDwgdSkgaSA9IHUsIHUgPSB2LCB2ID0gaTtcclxuXHJcbiAgICAgIHZhciBpID0gbG9ncyh1KSxcclxuICAgICAgICAgIGogPSBsb2dzKHYpLFxyXG4gICAgICAgICAgcCxcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICB0LFxyXG4gICAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcclxuICAgICAgICAgIHogPSBbXTtcclxuXHJcbiAgICAgIGlmICghKGJhc2UgJSAxKSAmJiBqIC0gaSA8IG4pIHtcclxuICAgICAgICBpID0gTWF0aC5yb3VuZChpKSAtIDEsIGogPSBNYXRoLnJvdW5kKGopICsgMTtcclxuICAgICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XHJcbiAgICAgICAgICBmb3IgKGsgPSAxLCBwID0gcG93cyhpKTsgayA8IGJhc2U7ICsraykge1xyXG4gICAgICAgICAgICB0ID0gcCAqIGs7XHJcbiAgICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmICh0ID4gdikgYnJlYWs7XHJcbiAgICAgICAgICAgIHoucHVzaCh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgZm9yICg7IGkgPCBqOyArK2kpIHtcclxuICAgICAgICAgIGZvciAoayA9IGJhc2UgLSAxLCBwID0gcG93cyhpKTsgayA+PSAxOyAtLWspIHtcclxuICAgICAgICAgICAgdCA9IHAgKiBrO1xyXG4gICAgICAgICAgICBpZiAodCA8IHUpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAodCA+IHYpIGJyZWFrO1xyXG4gICAgICAgICAgICB6LnB1c2godCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHogPSB0aWNrcyhpLCBqLCBNYXRoLm1pbihqIC0gaSwgbikpLm1hcChwb3dzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHIgPyB6LnJldmVyc2UoKSA6IHo7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XHJcbiAgICAgIGlmIChzcGVjaWZpZXIgPT0gbnVsbCkgc3BlY2lmaWVyID0gYmFzZSA9PT0gMTAgPyBcIi4wZVwiIDogXCIsXCI7XHJcbiAgICAgIGlmICh0eXBlb2Ygc3BlY2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHNwZWNpZmllciA9IGV4cG9ydHMuZm9ybWF0KHNwZWNpZmllcik7XHJcbiAgICAgIGlmIChjb3VudCA9PT0gSW5maW5pdHkpIHJldHVybiBzcGVjaWZpZXI7XHJcbiAgICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xyXG4gICAgICB2YXIgayA9IE1hdGgubWF4KDEsIGJhc2UgKiBjb3VudCAvIHNjYWxlLnRpY2tzKCkubGVuZ3RoKTsgLy8gVE9ETyBmYXN0IGVzdGltYXRlP1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xyXG4gICAgICAgIHZhciBpID0gZCAvIHBvd3MoTWF0aC5yb3VuZChsb2dzKGQpKSk7XHJcbiAgICAgICAgaWYgKGkgKiBiYXNlIDwgYmFzZSAtIDAuNSkgaSAqPSBiYXNlO1xyXG4gICAgICAgIHJldHVybiBpIDw9IGsgPyBzcGVjaWZpZXIoZCkgOiBcIlwiO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBkb21haW4obmljZShkb21haW4oKSwge1xyXG4gICAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguZmxvb3IobG9ncyh4KSkpOyB9LFxyXG4gICAgICAgIGNlaWw6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHBvd3MoTWF0aC5jZWlsKGxvZ3MoeCkpKTsgfVxyXG4gICAgICB9KSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZygpLmJhc2UoYmFzZSkpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2NhbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByYWlzZSh4LCBleHBvbmVudCkge1xyXG4gICAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBleHBvbmVudCkgOiBNYXRoLnBvdyh4LCBleHBvbmVudCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwb3coKSB7XHJcbiAgICB2YXIgZXhwb25lbnQgPSAxLFxyXG4gICAgICAgIHNjYWxlID0gY29udGludW91cyhkZWludGVycG9sYXRlLCByZWludGVycG9sYXRlKSxcclxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XHJcblxyXG4gICAgZnVuY3Rpb24gZGVpbnRlcnBvbGF0ZShhLCBiKSB7XHJcbiAgICAgIHJldHVybiAoYiA9IHJhaXNlKGIsIGV4cG9uZW50KSAtIChhID0gcmFpc2UoYSwgZXhwb25lbnQpKSlcclxuICAgICAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHJhaXNlKHgsIGV4cG9uZW50KSAtIGEpIC8gYjsgfVxyXG4gICAgICAgICAgOiBjb25zdGFudCQzKGIpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlaW50ZXJwb2xhdGUoYSwgYikge1xyXG4gICAgICBiID0gcmFpc2UoYiwgZXhwb25lbnQpIC0gKGEgPSByYWlzZShhLCBleHBvbmVudCkpO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkgeyByZXR1cm4gcmFpc2UoYSArIGIgKiB0LCAxIC8gZXhwb25lbnQpOyB9O1xyXG4gICAgfVxyXG5cclxuICAgIHNjYWxlLmV4cG9uZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHBvbmVudCA9ICtfLCBkb21haW4oZG9tYWluKCkpKSA6IGV4cG9uZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBwb3coKS5leHBvbmVudChleHBvbmVudCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNxcnQoKSB7XHJcbiAgICByZXR1cm4gcG93KCkuZXhwb25lbnQoMC41KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHF1YW50aWxlKCkge1xyXG4gICAgdmFyIGRvbWFpbiA9IFtdLFxyXG4gICAgICAgIHJhbmdlID0gW10sXHJcbiAgICAgICAgdGhyZXNob2xkcyA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XHJcbiAgICAgIHZhciBpID0gMCwgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XHJcbiAgICAgIHRocmVzaG9sZHMgPSBuZXcgQXJyYXkobiAtIDEpO1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgdGhyZXNob2xkc1tpIC0gMV0gPSB0aHJlc2hvbGQoZG9tYWluLCBpIC8gbik7XHJcbiAgICAgIHJldHVybiBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XHJcbiAgICAgIGlmICghaXNOYU4oeCA9ICt4KSkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KHRocmVzaG9sZHMsIHgpXTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcclxuICAgICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXSA6IFtcclxuICAgICAgICBpID4gMCA/IHRocmVzaG9sZHNbaSAtIDFdIDogZG9tYWluWzBdLFxyXG4gICAgICAgIGkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbaV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdXHJcbiAgICAgIF07XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XHJcbiAgICAgIGRvbWFpbiA9IFtdO1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IF8ubGVuZ3RoLCBkOyBpIDwgbjsgKytpKSBpZiAoZCA9IF9baV0sIGQgIT0gbnVsbCAmJiAhaXNOYU4oZCA9ICtkKSkgZG9tYWluLnB1c2goZCk7XHJcbiAgICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XHJcbiAgICAgIHJldHVybiByZXNjYWxlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlJDMuY2FsbChfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLnF1YW50aWxlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhyZXNob2xkcy5zbGljZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBxdWFudGlsZSgpXHJcbiAgICAgICAgICAuZG9tYWluKGRvbWFpbilcclxuICAgICAgICAgIC5yYW5nZShyYW5nZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzY2FsZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHF1YW50aXplJDEoKSB7XHJcbiAgICB2YXIgeDAgPSAwLFxyXG4gICAgICAgIHgxID0gMSxcclxuICAgICAgICBuID0gMSxcclxuICAgICAgICBkb21haW4gPSBbMC41XSxcclxuICAgICAgICByYW5nZSA9IFswLCAxXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzY2FsZSh4KSB7XHJcbiAgICAgIGlmICh4IDw9IHgpIHJldHVybiByYW5nZVtiaXNlY3RSaWdodChkb21haW4sIHgsIDAsIG4pXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXNjYWxlKCkge1xyXG4gICAgICB2YXIgaSA9IC0xO1xyXG4gICAgICBkb21haW4gPSBuZXcgQXJyYXkobik7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBkb21haW5baV0gPSAoKGkgKyAxKSAqIHgxIC0gKGkgLSBuKSAqIHgwKSAvIChuICsgMSk7XHJcbiAgICAgIHJldHVybiBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF0sIHgxID0gK19bMV0sIHJlc2NhbGUoKSkgOiBbeDAsIHgxXTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG4gPSAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5pbnZlcnRFeHRlbnQgPSBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcclxuICAgICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXVxyXG4gICAgICAgICAgOiBpIDwgMSA/IFt4MCwgZG9tYWluWzBdXVxyXG4gICAgICAgICAgOiBpID49IG4gPyBbZG9tYWluW24gLSAxXSwgeDFdXHJcbiAgICAgICAgICA6IFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBxdWFudGl6ZSQxKClcclxuICAgICAgICAgIC5kb21haW4oW3gwLCB4MV0pXHJcbiAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRocmVzaG9sZCQxKCkge1xyXG4gICAgdmFyIGRvbWFpbiA9IFswLjVdLFxyXG4gICAgICAgIHJhbmdlID0gWzAsIDFdLFxyXG4gICAgICAgIG4gPSAxO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlKHgpIHtcclxuICAgICAgaWYgKHggPD0geCkgcmV0dXJuIHJhbmdlW2Jpc2VjdFJpZ2h0KGRvbWFpbiwgeCwgMCwgbildO1xyXG4gICAgfVxyXG5cclxuICAgIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gc2xpY2UkMy5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IGRvbWFpbi5zbGljZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZSQzLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xyXG4gICAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XHJcbiAgICAgIHJldHVybiBbZG9tYWluW2kgLSAxXSwgZG9tYWluW2ldXTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhyZXNob2xkJDEoKVxyXG4gICAgICAgICAgLmRvbWFpbihkb21haW4pXHJcbiAgICAgICAgICAucmFuZ2UocmFuZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2NhbGU7XHJcbiAgfVxyXG5cclxudmFyICAgZHVyYXRpb25TZWNvbmQkMSA9IDEwMDA7XHJcbnZhciAgIGR1cmF0aW9uTWludXRlJDEgPSBkdXJhdGlvblNlY29uZCQxICogNjA7XHJcbnZhciAgIGR1cmF0aW9uSG91ciQxID0gZHVyYXRpb25NaW51dGUkMSAqIDYwO1xyXG52YXIgICBkdXJhdGlvbkRheSQxID0gZHVyYXRpb25Ib3VyJDEgKiAyNDtcclxudmFyICAgZHVyYXRpb25XZWVrJDEgPSBkdXJhdGlvbkRheSQxICogNztcclxuICB2YXIgZHVyYXRpb25Nb250aCA9IGR1cmF0aW9uRGF5JDEgKiAzMDtcclxuICB2YXIgZHVyYXRpb25ZZWFyID0gZHVyYXRpb25EYXkkMSAqIDM2NTtcclxuICBmdW5jdGlvbiBkYXRlJDEodCkge1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKHQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbnVtYmVyJDIodCkge1xyXG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcclxuICAgIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoZGVpbnRlcnBvbGF0ZSwgaW50ZXJwb2xhdGVOdW1iZXIpLFxyXG4gICAgICAgIGludmVydCA9IHNjYWxlLmludmVydCxcclxuICAgICAgICBkb21haW4gPSBzY2FsZS5kb21haW47XHJcblxyXG4gICAgdmFyIGZvcm1hdE1pbGxpc2Vjb25kID0gZm9ybWF0KFwiLiVMXCIpLFxyXG4gICAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcclxuICAgICAgICBmb3JtYXRNaW51dGUgPSBmb3JtYXQoXCIlSTolTVwiKSxcclxuICAgICAgICBmb3JtYXRIb3VyID0gZm9ybWF0KFwiJUkgJXBcIiksXHJcbiAgICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXHJcbiAgICAgICAgZm9ybWF0V2VlayA9IGZvcm1hdChcIiViICVkXCIpLFxyXG4gICAgICAgIGZvcm1hdE1vbnRoID0gZm9ybWF0KFwiJUJcIiksXHJcbiAgICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xyXG5cclxuICAgIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xyXG4gICAgICBbc2Vjb25kLCAgMSwgICAgICBkdXJhdGlvblNlY29uZCQxXSxcclxuICAgICAgW3NlY29uZCwgIDUsICA1ICogZHVyYXRpb25TZWNvbmQkMV0sXHJcbiAgICAgIFtzZWNvbmQsIDE1LCAxNSAqIGR1cmF0aW9uU2Vjb25kJDFdLFxyXG4gICAgICBbc2Vjb25kLCAzMCwgMzAgKiBkdXJhdGlvblNlY29uZCQxXSxcclxuICAgICAgW21pbnV0ZSwgIDEsICAgICAgZHVyYXRpb25NaW51dGUkMV0sXHJcbiAgICAgIFttaW51dGUsICA1LCAgNSAqIGR1cmF0aW9uTWludXRlJDFdLFxyXG4gICAgICBbbWludXRlLCAxNSwgMTUgKiBkdXJhdGlvbk1pbnV0ZSQxXSxcclxuICAgICAgW21pbnV0ZSwgMzAsIDMwICogZHVyYXRpb25NaW51dGUkMV0sXHJcbiAgICAgIFsgIGhvdXIsICAxLCAgICAgIGR1cmF0aW9uSG91ciQxICBdLFxyXG4gICAgICBbICBob3VyLCAgMywgIDMgKiBkdXJhdGlvbkhvdXIkMSAgXSxcclxuICAgICAgWyAgaG91ciwgIDYsICA2ICogZHVyYXRpb25Ib3VyJDEgIF0sXHJcbiAgICAgIFsgIGhvdXIsIDEyLCAxMiAqIGR1cmF0aW9uSG91ciQxICBdLFxyXG4gICAgICBbICAgZGF5LCAgMSwgICAgICBkdXJhdGlvbkRheSQxICAgXSxcclxuICAgICAgWyAgIGRheSwgIDIsICAyICogZHVyYXRpb25EYXkkMSAgIF0sXHJcbiAgICAgIFsgIHdlZWssICAxLCAgICAgIGR1cmF0aW9uV2VlayQxICBdLFxyXG4gICAgICBbIG1vbnRoLCAgMSwgICAgICBkdXJhdGlvbk1vbnRoIF0sXHJcbiAgICAgIFsgbW9udGgsICAzLCAgMyAqIGR1cmF0aW9uTW9udGggXSxcclxuICAgICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXHJcbiAgICBdO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRpY2tGb3JtYXQoZGF0ZSkge1xyXG4gICAgICByZXR1cm4gKHNlY29uZChkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaWxsaXNlY29uZFxyXG4gICAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXHJcbiAgICAgICAgICA6IGhvdXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWludXRlXHJcbiAgICAgICAgICA6IGRheShkYXRlKSA8IGRhdGUgPyBmb3JtYXRIb3VyXHJcbiAgICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXHJcbiAgICAgICAgICA6IHllYXIoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TW9udGhcclxuICAgICAgICAgIDogZm9ybWF0WWVhcikoZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xyXG4gICAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbCkgaW50ZXJ2YWwgPSAxMDtcclxuXHJcbiAgICAgIC8vIElmIGEgZGVzaXJlZCB0aWNrIGNvdW50IGlzIHNwZWNpZmllZCwgcGljayBhIHJlYXNvbmFibGUgdGljayBpbnRlcnZhbFxyXG4gICAgICAvLyBiYXNlZCBvbiB0aGUgZXh0ZW50IG9mIHRoZSBkb21haW4gYW5kIGEgcm91Z2ggZXN0aW1hdGUgb2YgdGljayBzaXplLlxyXG4gICAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxyXG4gICAgICBpZiAodHlwZW9mIGludGVydmFsID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBpbnRlcnZhbCxcclxuICAgICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKGkgPT09IHRpY2tJbnRlcnZhbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBzdGVwID0gdGlja1N0ZXAoc3RhcnQgLyBkdXJhdGlvblllYXIsIHN0b3AgLyBkdXJhdGlvblllYXIsIGludGVydmFsKTtcclxuICAgICAgICAgIGludGVydmFsID0geWVhcjtcclxuICAgICAgICB9IGVsc2UgaWYgKGkpIHtcclxuICAgICAgICAgIGkgPSB0aWNrSW50ZXJ2YWxzW3RhcmdldCAvIHRpY2tJbnRlcnZhbHNbaSAtIDFdWzJdIDwgdGlja0ludGVydmFsc1tpXVsyXSAvIHRhcmdldCA/IGkgLSAxIDogaV07XHJcbiAgICAgICAgICBzdGVwID0gaVsxXTtcclxuICAgICAgICAgIGludGVydmFsID0gaVswXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCk7XHJcbiAgICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHN0ZXAgPT0gbnVsbCA/IGludGVydmFsIDogaW50ZXJ2YWwuZXZlcnkoc3RlcCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4gbmV3IERhdGUoaW52ZXJ0KHkpKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAkMi5jYWxsKF8sIG51bWJlciQyKSkgOiBkb21haW4oKS5tYXAoZGF0ZSQxKTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xyXG4gICAgICB2YXIgZCA9IGRvbWFpbigpLFxyXG4gICAgICAgICAgdDAgPSBkWzBdLFxyXG4gICAgICAgICAgdDEgPSBkW2QubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICByID0gdDEgPCB0MCxcclxuICAgICAgICAgIHQ7XHJcbiAgICAgIGlmIChyKSB0ID0gdDAsIHQwID0gdDEsIHQxID0gdDtcclxuICAgICAgdCA9IHRpY2tJbnRlcnZhbChpbnRlcnZhbCwgdDAsIHQxLCBzdGVwKTtcclxuICAgICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXHJcbiAgICAgIHJldHVybiByID8gdC5yZXZlcnNlKCkgOiB0O1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xyXG4gICAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihpbnRlcnZhbCwgc3RlcCkge1xyXG4gICAgICB2YXIgZCA9IGRvbWFpbigpO1xyXG4gICAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxyXG4gICAgICAgICAgPyBkb21haW4obmljZShkLCBpbnRlcnZhbCkpXHJcbiAgICAgICAgICA6IHNjYWxlO1xyXG4gICAgfTtcclxuXHJcbiAgICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBjb3B5KHNjYWxlLCBjYWxlbmRhcih5ZWFyLCBtb250aCwgd2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGZvcm1hdCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc2NhbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0aW1lKCkge1xyXG4gICAgcmV0dXJuIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB0aW1lV2VlaywgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQsIGV4cG9ydHMudGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHV0Y1RpbWUoKSB7XHJcbiAgICByZXR1cm4gY2FsZW5kYXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBleHBvcnRzLnV0Y0Zvcm1hdCkuZG9tYWluKFtEYXRlLlVUQygyMDAwLCAwLCAxKSwgRGF0ZS5VVEMoMjAwMCwgMCwgMildKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbG9ycyhzKSB7XHJcbiAgICByZXR1cm4gcy5tYXRjaCgvLns2fS9nKS5tYXAoZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gXCIjXCIgKyB4O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgY2F0ZWdvcnkxMCA9IGNvbG9ycyhcIjFmNzdiNGZmN2YwZTJjYTAyY2Q2MjcyODk0NjdiZDhjNTY0YmUzNzdjMjdmN2Y3ZmJjYmQyMjE3YmVjZlwiKTtcclxuXHJcbiAgdmFyIGNhdGVnb3J5MjBiID0gY29sb3JzKFwiMzkzYjc5NTI1NGEzNmI2ZWNmOWM5ZWRlNjM3OTM5OGNhMjUyYjVjZjZiY2VkYjljOGM2ZDMxYmQ5ZTM5ZTdiYTUyZTdjYjk0ODQzYzM5YWQ0OTRhZDY2MTZiZTc5NjljN2I0MTczYTU1MTk0Y2U2ZGJkZGU5ZWQ2XCIpO1xyXG5cclxuICB2YXIgY2F0ZWdvcnkyMGMgPSBjb2xvcnMoXCIzMTgyYmQ2YmFlZDY5ZWNhZTFjNmRiZWZlNjU1MGRmZDhkM2NmZGFlNmJmZGQwYTIzMWEzNTQ3NGM0NzZhMWQ5OWJjN2U5YzA3NTZiYjE5ZTlhYzhiY2JkZGNkYWRhZWI2MzYzNjM5Njk2OTZiZGJkYmRkOWQ5ZDlcIik7XHJcblxyXG4gIHZhciBjYXRlZ29yeTIwID0gY29sb3JzKFwiMWY3N2I0YWVjN2U4ZmY3ZjBlZmZiYjc4MmNhMDJjOThkZjhhZDYyNzI4ZmY5ODk2OTQ2N2JkYzViMGQ1OGM1NjRiYzQ5Yzk0ZTM3N2MyZjdiNmQyN2Y3ZjdmYzdjN2M3YmNiZDIyZGJkYjhkMTdiZWNmOWVkYWU1XCIpO1xyXG5cclxuICB2YXIgY3ViZWhlbGl4JDMgPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcclxuXHJcbiAgdmFyIHdhcm0gPSBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KC0xMDAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xyXG5cclxuICB2YXIgY29vbCA9IGludGVycG9sYXRlQ3ViZWhlbGl4TG9uZyhjdWJlaGVsaXgoMjYwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcclxuXHJcbiAgdmFyIHJhaW5ib3cgPSBjdWJlaGVsaXgoKTtcclxuXHJcbiAgZnVuY3Rpb24gcmFpbmJvdyQxKHQpIHtcclxuICAgIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xyXG4gICAgdmFyIHRzID0gTWF0aC5hYnModCAtIDAuNSk7XHJcbiAgICByYWluYm93LmggPSAzNjAgKiB0IC0gMTAwO1xyXG4gICAgcmFpbmJvdy5zID0gMS41IC0gMS41ICogdHM7XHJcbiAgICByYWluYm93LmwgPSAwLjggLSAwLjkgKiB0cztcclxuICAgIHJldHVybiByYWluYm93ICsgXCJcIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJhbXAocmFuZ2UpIHtcclxuICAgIHZhciBuID0gcmFuZ2UubGVuZ3RoO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgdmlyaWRpcyA9IHJhbXAoY29sb3JzKFwiNDQwMTU0NDQwMjU2NDUwNDU3NDUwNTU5NDYwNzVhNDYwODVjNDYwYTVkNDYwYjVlNDcwZDYwNDcwZTYxNDcxMDYzNDcxMTY0NDcxMzY1NDgxNDY3NDgxNjY4NDgxNzY5NDgxODZhNDgxYTZjNDgxYjZkNDgxYzZlNDgxZDZmNDgxZjcwNDgyMDcxNDgyMTczNDgyMzc0NDgyNDc1NDgyNTc2NDgyNjc3NDgyODc4NDgyOTc5NDcyYTdhNDcyYzdhNDcyZDdiNDcyZTdjNDcyZjdkNDYzMDdlNDYzMjdlNDYzMzdmNDYzNDgwNDUzNTgxNDUzNzgxNDUzODgyNDQzOTgzNDQzYTgzNDQzYjg0NDMzZDg0NDMzZTg1NDIzZjg1NDI0MDg2NDI0MTg2NDE0Mjg3NDE0NDg3NDA0NTg4NDA0Njg4M2Y0Nzg4M2Y0ODg5M2U0OTg5M2U0YTg5M2U0YzhhM2Q0ZDhhM2Q0ZThhM2M0ZjhhM2M1MDhiM2I1MThiM2I1MjhiM2E1MzhiM2E1NDhjMzk1NThjMzk1NjhjMzg1ODhjMzg1OThjMzc1YThjMzc1YjhkMzY1YzhkMzY1ZDhkMzU1ZThkMzU1ZjhkMzQ2MDhkMzQ2MThkMzM2MjhkMzM2MzhkMzI2NDhlMzI2NThlMzE2NjhlMzE2NzhlMzE2ODhlMzA2OThlMzA2YThlMmY2YjhlMmY2YzhlMmU2ZDhlMmU2ZThlMmU2ZjhlMmQ3MDhlMmQ3MThlMmM3MThlMmM3MjhlMmM3MzhlMmI3NDhlMmI3NThlMmE3NjhlMmE3NzhlMmE3ODhlMjk3OThlMjk3YThlMjk3YjhlMjg3YzhlMjg3ZDhlMjc3ZThlMjc3ZjhlMjc4MDhlMjY4MThlMjY4MjhlMjY4MjhlMjU4MzhlMjU4NDhlMjU4NThlMjQ4NjhlMjQ4NzhlMjM4ODhlMjM4OThlMjM4YThkMjI4YjhkMjI4YzhkMjI4ZDhkMjE4ZThkMjE4ZjhkMjE5MDhkMjE5MThjMjA5MjhjMjA5MjhjMjA5MzhjMWY5NDhjMWY5NThiMWY5NjhiMWY5NzhiMWY5ODhiMWY5OThhMWY5YThhMWU5YjhhMWU5Yzg5MWU5ZDg5MWY5ZTg5MWY5Zjg4MWZhMDg4MWZhMTg4MWZhMTg3MWZhMjg3MjBhMzg2MjBhNDg2MjFhNTg1MjFhNjg1MjJhNzg1MjJhODg0MjNhOTgzMjRhYTgzMjVhYjgyMjVhYzgyMjZhZDgxMjdhZDgxMjhhZTgwMjlhZjdmMmFiMDdmMmNiMTdlMmRiMjdkMmViMzdjMmZiNDdjMzFiNTdiMzJiNjdhMzRiNjc5MzViNzc5MzdiODc4MzhiOTc3M2FiYTc2M2JiYjc1M2RiYzc0M2ZiYzczNDBiZDcyNDJiZTcxNDRiZjcwNDZjMDZmNDhjMTZlNGFjMTZkNGNjMjZjNGVjMzZiNTBjNDZhNTJjNTY5NTRjNTY4NTZjNjY3NThjNzY1NWFjODY0NWNjODYzNWVjOTYyNjBjYTYwNjNjYjVmNjVjYjVlNjdjYzVjNjljZDViNmNjZDVhNmVjZTU4NzBjZjU3NzNkMDU2NzVkMDU0NzdkMTUzN2FkMTUxN2NkMjUwN2ZkMzRlODFkMzRkODRkNDRiODZkNTQ5ODlkNTQ4OGJkNjQ2OGVkNjQ1OTBkNzQzOTNkNzQxOTVkODQwOThkODNlOWJkOTNjOWRkOTNiYTBkYTM5YTJkYTM3YTVkYjM2YThkYjM0YWFkYzMyYWRkYzMwYjBkZDJmYjJkZDJkYjVkZTJiYjhkZTI5YmFkZTI4YmRkZjI2YzBkZjI1YzJkZjIzYzVlMDIxYzhlMDIwY2FlMTFmY2RlMTFkZDBlMTFjZDJlMjFiZDVlMjFhZDhlMjE5ZGFlMzE5ZGRlMzE4ZGZlMzE4ZTJlNDE4ZTVlNDE5ZTdlNDE5ZWFlNTFhZWNlNTFiZWZlNTFjZjFlNTFkZjRlNjFlZjZlNjIwZjhlNjIxZmJlNzIzZmRlNzI1XCIpKTtcclxuXHJcbiAgdmFyIG1hZ21hID0gcmFtcChjb2xvcnMoXCIwMDAwMDQwMTAwMDUwMTAxMDYwMTAxMDgwMjAxMDkwMjAyMGIwMjAyMGQwMzAzMGYwMzAzMTIwNDA0MTQwNTA0MTYwNjA1MTgwNjA1MWEwNzA2MWMwODA3MWUwOTA3MjAwYTA4MjIwYjA5MjQwYzA5MjYwZDBhMjkwZTBiMmIxMDBiMmQxMTBjMmYxMjBkMzExMzBkMzQxNDBlMzYxNTBlMzgxNjBmM2IxODBmM2QxOTEwM2YxYTEwNDIxYzEwNDQxZDExNDcxZTExNDkyMDExNGIyMTExNGUyMjExNTAyNDEyNTMyNTEyNTUyNzEyNTgyOTExNWEyYTExNWMyYzExNWYyZDExNjEyZjExNjMzMTExNjUzMzEwNjczNDEwNjkzNjEwNmIzODEwNmMzOTBmNmUzYjBmNzAzZDBmNzEzZjBmNzI0MDBmNzQ0MjBmNzU0NDBmNzY0NTEwNzc0NzEwNzg0OTEwNzg0YTEwNzk0YzExN2E0ZTExN2I0ZjEyN2I1MTEyN2M1MjEzN2M1NDEzN2Q1NjE0N2Q1NzE1N2U1OTE1N2U1YTE2N2U1YzE2N2Y1ZDE3N2Y1ZjE4N2Y2MDE4ODA2MjE5ODA2NDFhODA2NTFhODA2NzFiODA2ODFjODE2YTFjODE2YjFkODE2ZDFkODE2ZTFlODE3MDFmODE3MjFmODE3MzIwODE3NTIxODE3NjIxODE3ODIyODE3OTIyODI3YjIzODI3YzIzODI3ZTI0ODI4MDI1ODI4MTI1ODE4MzI2ODE4NDI2ODE4NjI3ODE4ODI3ODE4OTI4ODE4YjI5ODE4YzI5ODE4ZTJhODE5MDJhODE5MTJiODE5MzJiODA5NDJjODA5NjJjODA5ODJkODA5OTJkODA5YjJlN2Y5YzJlN2Y5ZTJmN2ZhMDJmN2ZhMTMwN2VhMzMwN2VhNTMxN2VhNjMxN2RhODMyN2RhYTMzN2RhYjMzN2NhZDM0N2NhZTM0N2JiMDM1N2JiMjM1N2JiMzM2N2FiNTM2N2FiNzM3NzliODM3NzliYTM4NzhiYzM5NzhiZDM5NzdiZjNhNzdjMDNhNzZjMjNiNzVjNDNjNzVjNTNjNzRjNzNkNzNjODNlNzNjYTNlNzJjYzNmNzFjZDQwNzFjZjQwNzBkMDQxNmZkMjQyNmZkMzQzNmVkNTQ0NmRkNjQ1NmNkODQ1NmNkOTQ2NmJkYjQ3NmFkYzQ4NjlkZTQ5NjhkZjRhNjhlMDRjNjdlMjRkNjZlMzRlNjVlNDRmNjRlNTUwNjRlNzUyNjNlODUzNjJlOTU0NjJlYTU2NjFlYjU3NjBlYzU4NjBlZDVhNWZlZTViNWVlZjVkNWVmMDVmNWVmMTYwNWRmMjYyNWRmMjY0NWNmMzY1NWNmNDY3NWNmNDY5NWNmNTZiNWNmNjZjNWNmNjZlNWNmNzcwNWNmNzcyNWNmODc0NWNmODc2NWNmOTc4NWRmOTc5NWRmOTdiNWRmYTdkNWVmYTdmNWVmYTgxNWZmYjgzNWZmYjg1NjBmYjg3NjFmYzg5NjFmYzhhNjJmYzhjNjNmYzhlNjRmYzkwNjVmZDkyNjZmZDk0NjdmZDk2NjhmZDk4NjlmZDlhNmFmZDliNmJmZTlkNmNmZTlmNmRmZWExNmVmZWEzNmZmZWE1NzFmZWE3NzJmZWE5NzNmZWFhNzRmZWFjNzZmZWFlNzdmZWIwNzhmZWIyN2FmZWI0N2JmZWI2N2NmZWI3N2VmZWI5N2ZmZWJiODFmZWJkODJmZWJmODRmZWMxODVmZWMyODdmZWM0ODhmZWM2OGFmZWM4OGNmZWNhOGRmZWNjOGZmZWNkOTBmZWNmOTJmZWQxOTRmZWQzOTVmZWQ1OTdmZWQ3OTlmZWQ4OWFmZGRhOWNmZGRjOWVmZGRlYTBmZGUwYTFmZGUyYTNmZGUzYTVmZGU1YTdmZGU3YTlmZGU5YWFmZGViYWNmY2VjYWVmY2VlYjBmY2YwYjJmY2YyYjRmY2Y0YjZmY2Y2YjhmY2Y3YjlmY2Y5YmJmY2ZiYmRmY2ZkYmZcIikpO1xyXG5cclxuICB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcclxuXHJcbiAgdmFyIHBsYXNtYSA9IHJhbXAoY29sb3JzKFwiMGQwODg3MTAwNzg4MTMwNzg5MTYwNzhhMTkwNjhjMWIwNjhkMWQwNjhlMjAwNjhmMjIwNjkwMjQwNjkxMjYwNTkxMjgwNTkyMmEwNTkzMmMwNTk0MmUwNTk1MmYwNTk2MzEwNTk3MzMwNTk3MzUwNDk4MzcwNDk5MzgwNDlhM2EwNDlhM2MwNDliM2UwNDljM2YwNDljNDEwNDlkNDMwMzllNDQwMzllNDYwMzlmNDgwMzlmNDkwM2EwNGIwM2ExNGMwMmExNGUwMmEyNTAwMmEyNTEwMmEzNTMwMmEzNTUwMmE0NTYwMWE0NTgwMWE0NTkwMWE1NWIwMWE1NWMwMWE2NWUwMWE2NjAwMWE2NjEwMGE3NjMwMGE3NjQwMGE3NjYwMGE3NjcwMGE4NjkwMGE4NmEwMGE4NmMwMGE4NmUwMGE4NmYwMGE4NzEwMGE4NzIwMWE4NzQwMWE4NzUwMWE4NzcwMWE4NzgwMWE4N2EwMmE4N2IwMmE4N2QwM2E4N2UwM2E4ODAwNGE4ODEwNGE3ODMwNWE3ODQwNWE3ODYwNmE2ODcwN2E2ODgwOGE2OGEwOWE1OGIwYWE1OGQwYmE1OGUwY2E0OGYwZGE0OTEwZWEzOTIwZmEzOTQxMGEyOTUxMWExOTYxM2ExOTgxNGEwOTkxNTlmOWExNjlmOWMxNzllOWQxODlkOWUxOTlkYTAxYTljYTExYjliYTIxZDlhYTMxZTlhYTUxZjk5YTYyMDk4YTcyMTk3YTgyMjk2YWEyMzk1YWIyNDk0YWMyNjk0YWQyNzkzYWUyODkyYjAyOTkxYjEyYTkwYjIyYjhmYjMyYzhlYjQyZThkYjUyZjhjYjYzMDhiYjczMThhYjgzMjg5YmEzMzg4YmIzNDg4YmMzNTg3YmQzNzg2YmUzODg1YmYzOTg0YzAzYTgzYzEzYjgyYzIzYzgxYzMzZDgwYzQzZTdmYzU0MDdlYzY0MTdkYzc0MjdjYzg0MzdiYzk0NDdhY2E0NTdhY2I0Njc5Y2M0Nzc4Y2M0OTc3Y2Q0YTc2Y2U0Yjc1Y2Y0Yzc0ZDA0ZDczZDE0ZTcyZDI0ZjcxZDM1MTcxZDQ1MjcwZDU1MzZmZDU1NDZlZDY1NTZkZDc1NjZjZDg1NzZiZDk1ODZhZGE1YTZhZGE1YjY5ZGI1YzY4ZGM1ZDY3ZGQ1ZTY2ZGU1ZjY1ZGU2MTY0ZGY2MjYzZTA2MzYzZTE2NDYyZTI2NTYxZTI2NjYwZTM2ODVmZTQ2OTVlZTU2YTVkZTU2YjVkZTY2YzVjZTc2ZTViZTc2ZjVhZTg3MDU5ZTk3MTU4ZTk3MjU3ZWE3NDU3ZWI3NTU2ZWI3NjU1ZWM3NzU0ZWQ3OTUzZWQ3YTUyZWU3YjUxZWY3YzUxZWY3ZTUwZjA3ZjRmZjA4MDRlZjE4MTRkZjE4MzRjZjI4NDRiZjM4NTRiZjM4NzRhZjQ4ODQ5ZjQ4OTQ4ZjU4YjQ3ZjU4YzQ2ZjY4ZDQ1ZjY4ZjQ0Zjc5MDQ0Zjc5MTQzZjc5MzQyZjg5NDQxZjg5NTQwZjk5NzNmZjk5ODNlZjk5YTNlZmE5YjNkZmE5YzNjZmE5ZTNiZmI5ZjNhZmJhMTM5ZmJhMjM4ZmNhMzM4ZmNhNTM3ZmNhNjM2ZmNhODM1ZmNhOTM0ZmRhYjMzZmRhYzMzZmRhZTMyZmRhZjMxZmRiMTMwZmRiMjJmZmRiNDJmZmRiNTJlZmViNzJkZmViODJjZmViYTJjZmViYjJiZmViZDJhZmViZTJhZmVjMDI5ZmRjMjI5ZmRjMzI4ZmRjNTI3ZmRjNjI3ZmRjODI3ZmRjYTI2ZmRjYjI2ZmNjZDI1ZmNjZTI1ZmNkMDI1ZmNkMjI1ZmJkMzI0ZmJkNTI0ZmJkNzI0ZmFkODI0ZmFkYTI0ZjlkYzI0ZjlkZDI1ZjhkZjI1ZjhlMTI1ZjdlMjI1ZjdlNDI1ZjZlNjI2ZjZlODI2ZjVlOTI2ZjVlYjI3ZjRlZDI3ZjNlZTI3ZjNmMDI3ZjJmMjI3ZjFmNDI2ZjFmNTI1ZjBmNzI0ZjBmOTIxXCIpKTtcclxuXHJcbiAgZnVuY3Rpb24gc2VxdWVudGlhbChpbnRlcnBvbGF0b3IpIHtcclxuICAgIHZhciB4MCA9IDAsXHJcbiAgICAgICAgeDEgPSAxLFxyXG4gICAgICAgIGNsYW1wID0gZmFsc2U7XHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUoeCkge1xyXG4gICAgICB2YXIgdCA9ICh4IC0geDApIC8gKHgxIC0geDApO1xyXG4gICAgICByZXR1cm4gaW50ZXJwb2xhdG9yKGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpIDogdCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCBzY2FsZSkgOiBbeDAsIHgxXTtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuY2xhbXAgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcclxuICAgIH07XHJcblxyXG4gICAgc2NhbGUuaW50ZXJwb2xhdG9yID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XHJcbiAgICB9O1xyXG5cclxuICAgIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHNlcXVlbnRpYWwoaW50ZXJwb2xhdG9yKS5kb21haW4oW3gwLCB4MV0pLmNsYW1wKGNsYW1wKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XHJcbiAgfVxyXG5cclxuICB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcclxuXHJcbiAgdmFyIG5hbWVzcGFjZXMgPSB7XHJcbiAgICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcclxuICAgIHhodG1sOiB4aHRtbCxcclxuICAgIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcclxuICAgIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcclxuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBuYW1lc3BhY2UobmFtZSkge1xyXG4gICAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcclxuICAgIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcclxuICAgIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0b3JJbmhlcml0KG5hbWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxyXG4gICAgICAgICAgdXJpID0gdGhpcy5uYW1lc3BhY2VVUkk7XHJcbiAgICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXHJcbiAgICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcclxuICAgICAgICAgIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHVyaSwgbmFtZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRvcihuYW1lKSB7XHJcbiAgICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XHJcbiAgICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXHJcbiAgICAgICAgPyBjcmVhdG9yRml4ZWRcclxuICAgICAgICA6IGNyZWF0b3JJbmhlcml0KShmdWxsbmFtZSk7XHJcbiAgfVxyXG5cclxuICB2YXIgbmV4dElkID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gbG9jYWwoKSB7XHJcbiAgICByZXR1cm4gbmV3IExvY2FsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gTG9jYWwoKSB7XHJcbiAgICB0aGlzLl8gPSBcIkBcIiArICgrK25leHRJZCkudG9TdHJpbmcoMzYpO1xyXG4gIH1cclxuXHJcbiAgTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IExvY2FsLFxyXG4gICAgZ2V0OiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHZhciBpZCA9IHRoaXMuXztcclxuICAgICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XHJcbiAgICAgIHJldHVybiBub2RlW2lkXTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBub2RlW3RoaXMuX10gPSB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuXyBpbiBub2RlICYmIGRlbGV0ZSBub2RlW3RoaXMuX107XHJcbiAgICB9LFxyXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBtYXRjaGVyID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhzZWxlY3Rvcik7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgaWYgKCFlbGVtZW50Lm1hdGNoZXMpIHtcclxuICAgICAgdmFyIHZlbmRvck1hdGNoZXMgPSBlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvclxyXG4gICAgICAgICAgfHwgZWxlbWVudC5tc01hdGNoZXNTZWxlY3RvclxyXG4gICAgICAgICAgfHwgZWxlbWVudC5tb3pNYXRjaGVzU2VsZWN0b3JcclxuICAgICAgICAgIHx8IGVsZW1lbnQub01hdGNoZXNTZWxlY3RvcjtcclxuICAgICAgbWF0Y2hlciA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHZlbmRvck1hdGNoZXMuY2FsbCh0aGlzLCBzZWxlY3Rvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBtYXRjaGVyJDEgPSBtYXRjaGVyO1xyXG5cclxuICB2YXIgZmlsdGVyRXZlbnRzID0ge307XHJcblxyXG4gIGV4cG9ydHMuZXZlbnQgPSBudWxsO1xyXG5cclxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICB2YXIgZWxlbWVudCQxID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4gICAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50JDEpKSB7XHJcbiAgICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcclxuICAgIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcclxuICAgICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xyXG4gICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcclxuICAgICAgdmFyIGV2ZW50MCA9IGV4cG9ydHMuZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXHJcbiAgICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDA7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyQxKHR5cGVuYW1lcykge1xyXG4gICAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XHJcbiAgICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XHJcbiAgICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XHJcbiAgICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBvbiA9IHRoaXMuX19vbjtcclxuICAgICAgaWYgKCFvbikgcmV0dXJuO1xyXG4gICAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBvblsrK2ldID0gbztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcclxuICAgICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xyXG4gICAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcclxuICAgICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcclxuICAgICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xyXG4gICAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xyXG4gICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcclxuICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XHJcbiAgICAgICAgICBvLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcbiAgICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xyXG4gICAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XHJcbiAgICAgIGVsc2Ugb24ucHVzaChvKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XHJcbiAgICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXMkMSh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcclxuICAgICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xyXG4gICAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG8udmFsdWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcclxuICAgIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcclxuICAgIHZhciBldmVudDAgPSBleHBvcnRzLmV2ZW50O1xyXG4gICAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXhwb3J0cy5ldmVudDtcclxuICAgIGV4cG9ydHMuZXZlbnQgPSBldmVudDE7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICBleHBvcnRzLmV2ZW50ID0gZXZlbnQwO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc291cmNlRXZlbnQoKSB7XHJcbiAgICB2YXIgY3VycmVudCA9IGV4cG9ydHMuZXZlbnQsIHNvdXJjZTtcclxuICAgIHdoaWxlIChzb3VyY2UgPSBjdXJyZW50LnNvdXJjZUV2ZW50KSBjdXJyZW50ID0gc291cmNlO1xyXG4gICAgcmV0dXJuIGN1cnJlbnQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwb2ludCQ1KG5vZGUsIGV2ZW50KSB7XHJcbiAgICB2YXIgc3ZnID0gbm9kZS5vd25lclNWR0VsZW1lbnQgfHwgbm9kZTtcclxuXHJcbiAgICBpZiAoc3ZnLmNyZWF0ZVNWR1BvaW50KSB7XHJcbiAgICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xyXG4gICAgICBwb2ludC54ID0gZXZlbnQuY2xpZW50WCwgcG9pbnQueSA9IGV2ZW50LmNsaWVudFk7XHJcbiAgICAgIHBvaW50ID0gcG9pbnQubWF0cml4VHJhbnNmb3JtKG5vZGUuZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKTtcclxuICAgICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICByZXR1cm4gW2V2ZW50LmNsaWVudFggLSByZWN0LmxlZnQgLSBub2RlLmNsaWVudExlZnQsIGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCAtIG5vZGUuY2xpZW50VG9wXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1vdXNlKG5vZGUpIHtcclxuICAgIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XHJcbiAgICBpZiAoZXZlbnQuY2hhbmdlZFRvdWNoZXMpIGV2ZW50ID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICByZXR1cm4gcG9pbnQkNShub2RlLCBldmVudCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub25lJDIoKSB7fVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3RvcihzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lJDIgOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NlbGVjdChzZWxlY3QpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XHJcblxyXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xyXG4gICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcclxuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1wdHkoKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3RvckFsbChzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fc2VsZWN0QWxsKHNlbGVjdCkge1xyXG4gICAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcclxuXHJcbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XHJcbiAgICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xyXG4gICAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZmlsdGVyKG1hdGNoKSB7XHJcbiAgICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlciQxKG1hdGNoKTtcclxuXHJcbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xyXG4gICAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3BhcnNlKHVwZGF0ZSkge1xyXG4gICAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9lbnRlcigpIHtcclxuICAgIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xyXG4gICAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XHJcbiAgICB0aGlzLl9uZXh0ID0gbnVsbDtcclxuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcclxuICAgIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcclxuICB9XHJcblxyXG4gIEVudGVyTm9kZS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxyXG4gICAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcclxuICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxyXG4gICAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcclxuICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCQ0KHgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cclxuXHJcbiAgZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcclxuICAgIHZhciBpID0gMCxcclxuICAgICAgICBub2RlLFxyXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcclxuXHJcbiAgICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxyXG4gICAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXHJcbiAgICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXHJcbiAgICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xyXG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XHJcbiAgICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XHJcbiAgICAgICAgdXBkYXRlW2ldID0gbm9kZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXHJcbiAgICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xyXG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xyXG4gICAgdmFyIGksXHJcbiAgICAgICAgbm9kZSxcclxuICAgICAgICBub2RlQnlLZXlWYWx1ZSA9IHt9LFxyXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICBrZXlWYWx1ZXMgPSBuZXcgQXJyYXkoZ3JvdXBMZW5ndGgpLFxyXG4gICAgICAgIGtleVZhbHVlO1xyXG5cclxuICAgIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxyXG4gICAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxyXG4gICAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xyXG4gICAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xyXG4gICAgICAgIGlmIChrZXlWYWx1ZSBpbiBub2RlQnlLZXlWYWx1ZSkge1xyXG4gICAgICAgICAgZXhpdFtpXSA9IG5vZGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29tcHV0ZSB0aGUga2V5IGZvciBlYWNoIGRhdHVtLlxyXG4gICAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cclxuICAgIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcclxuICAgICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xyXG4gICAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xyXG4gICAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XHJcbiAgICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XHJcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFkZCBhbnkgcmVtYWluaW5nIG5vZGVzIHRoYXQgd2VyZSBub3QgYm91bmQgdG8gZGF0YSB0byBleGl0LlxyXG4gICAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xyXG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0YSh2YWx1ZSwga2V5KSB7XHJcbiAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgIGRhdGEgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBqID0gLTE7XHJcbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbihkKSB7IGRhdGFbKytqXSA9IGQ7IH0pO1xyXG4gICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXHJcbiAgICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXHJcbiAgICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xyXG5cclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCQ0KHZhbHVlKTtcclxuXHJcbiAgICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcclxuICAgICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXHJcbiAgICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcclxuICAgICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxyXG4gICAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcclxuICAgICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgIGVudGVyR3JvdXAgPSBlbnRlcltqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcclxuICAgICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxyXG4gICAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XHJcblxyXG4gICAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XHJcblxyXG4gICAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcclxuICAgICAgLy8gYXBwZW5kQ2hpbGQgY2FuIGluc2VydCB0aGUgbWF0ZXJpYWxpemVkIGVudGVyIG5vZGUgYmVmb3JlIHRoaXMgbm9kZSxcclxuICAgICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXHJcbiAgICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XHJcbiAgICAgICAgaWYgKHByZXZpb3VzID0gZW50ZXJHcm91cFtpMF0pIHtcclxuICAgICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XHJcbiAgICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XHJcbiAgICAgICAgICBwcmV2aW91cy5fbmV4dCA9IG5leHQgfHwgbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUgPSBuZXcgU2VsZWN0aW9uKHVwZGF0ZSwgcGFyZW50cyk7XHJcbiAgICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XHJcbiAgICB1cGRhdGUuX2V4aXQgPSBleGl0O1xyXG4gICAgcmV0dXJuIHVwZGF0ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9leGl0KCkge1xyXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX21lcmdlKHNlbGVjdGlvbikge1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcclxuICAgICAgICAgIG1lcmdlW2ldID0gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IgKDsgaiA8IG0wOyArK2opIHtcclxuICAgICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX29yZGVyKCkge1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcclxuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xyXG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcclxuICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09IG5vZGUubmV4dFNpYmxpbmcpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XHJcbiAgICAgICAgICBuZXh0ID0gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9zb3J0KGNvbXBhcmUpIHtcclxuICAgIGlmICghY29tcGFyZSkgY29tcGFyZSA9IGFzY2VuZGluZyQyO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGEgJiYgYiA/IGNvbXBhcmUoYS5fX2RhdGFfXywgYi5fX2RhdGFfXykgOiAhYSAtICFiO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcclxuICAgICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXNjZW5kaW5nJDIoYSwgYikge1xyXG4gICAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2NhbGwoKSB7XHJcbiAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XHJcbiAgICBhcmd1bWVudHNbMF0gPSB0aGlzO1xyXG4gICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX25vZGVzKCkge1xyXG4gICAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xyXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbm9kZSgpIHtcclxuXHJcbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xyXG4gICAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3NpemUoKSB7XHJcbiAgICB2YXIgc2l6ZSA9IDA7XHJcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XHJcbiAgICByZXR1cm4gc2l6ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9lbXB0eSgpIHtcclxuICAgIHJldHVybiAhdGhpcy5ub2RlKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZWFjaChjYWxsYmFjaykge1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQobmFtZSwgdmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdmFsdWUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIHYpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcclxuICAgICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgdik7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcclxuICAgICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXHJcbiAgICAgICAgICA/IG5vZGUuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKVxyXG4gICAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxyXG4gICAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0clJlbW92ZU5TIDogYXR0clJlbW92ZSkgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxyXG4gICAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB3aW5kb3cobm9kZSkge1xyXG4gICAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxyXG4gICAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcclxuICAgICAgICB8fCBub2RlLmRlZmF1bHRWaWV3OyAvLyBub2RlIGlzIGEgRG9jdW1lbnRcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbHVlLCBwcmlvcml0eSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xyXG4gICAgICBlbHNlIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdiwgcHJpb3JpdHkpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcclxuICAgIHZhciBub2RlO1xyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXHJcbiAgICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcclxuICAgICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb25cclxuICAgICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcclxuICAgICAgICA6IHdpbmRvdyhub2RlID0gdGhpcy5ub2RlKCkpXHJcbiAgICAgICAgICAgIC5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIG51bGwpXHJcbiAgICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICBkZWxldGUgdGhpc1tuYW1lXTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcm9wZXJ0eUNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XHJcbiAgICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX3Byb3BlcnR5KG5hbWUsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcclxuICAgICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxyXG4gICAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICAgICAgPyBwcm9wZXJ0eUZ1bmN0aW9uXHJcbiAgICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxyXG4gICAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xyXG4gICAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcclxuICAgIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcclxuICAgIHRoaXMuX25vZGUgPSBub2RlO1xyXG4gICAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XHJcbiAgfVxyXG5cclxuICBDbGFzc0xpc3QucHJvdG90eXBlID0ge1xyXG4gICAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcclxuICAgICAgaWYgKGkgPCAwKSB7XHJcbiAgICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XHJcbiAgICAgIGlmIChpID49IDApIHtcclxuICAgICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcclxuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xyXG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcclxuICAgIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2NsYXNzZWQobmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xyXG5cclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xyXG4gICAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcclxuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXHJcbiAgICAgICAgPyBjbGFzc2VkVHJ1ZVxyXG4gICAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XHJcbiAgICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl90ZXh0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcclxuICAgICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXHJcbiAgICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXHJcbiAgICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XHJcbiAgICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9odG1sKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcclxuICAgICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXHJcbiAgICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXHJcbiAgICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByYWlzZSQxKCkge1xyXG4gICAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9yYWlzZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2gocmFpc2UkMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsb3dlcigpIHtcclxuICAgIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fbG93ZXIoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9hcHBlbmQobmFtZSkge1xyXG4gICAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcclxuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9pbnNlcnQobmFtZSwgYmVmb3JlKSB7XHJcbiAgICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxyXG4gICAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcclxuICAgIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlKCkge1xyXG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcclxuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9yZW1vdmUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fZGF0dW0odmFsdWUpIHtcclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXHJcbiAgICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XHJcbiAgICB2YXIgd2luZG93JCQgPSB3aW5kb3cobm9kZSksXHJcbiAgICAgICAgZXZlbnQgPSB3aW5kb3ckJC5DdXN0b21FdmVudDtcclxuXHJcbiAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGV2ZW50ID0gd2luZG93JCQuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcclxuICAgICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XHJcbiAgICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdGlvbl9kaXNwYXRjaCh0eXBlLCBwYXJhbXMpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxyXG4gICAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XHJcbiAgfVxyXG5cclxuICB2YXIgcm9vdCA9IFtudWxsXTtcclxuXHJcbiAgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xyXG4gICAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xyXG4gICAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcclxuICB9XHJcblxyXG4gIFNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcclxuICAgIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcclxuICAgIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcclxuICAgIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcclxuICAgIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxyXG4gICAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcclxuICAgIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxyXG4gICAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcclxuICAgIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXHJcbiAgICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcclxuICAgIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxyXG4gICAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcclxuICAgIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxyXG4gICAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXHJcbiAgICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxyXG4gICAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXHJcbiAgICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcclxuICAgIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXHJcbiAgICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxyXG4gICAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXHJcbiAgICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcclxuICAgIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxyXG4gICAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcclxuICAgIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXHJcbiAgICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXHJcbiAgICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXHJcbiAgICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXHJcbiAgICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxyXG4gICAgb246IHNlbGVjdGlvbl9vbixcclxuICAgIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IpIHtcclxuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCJcclxuICAgICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcclxuICAgICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNlbGVjdEFsbChzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxyXG4gICAgICAgID8gbmV3IFNlbGVjdGlvbihbZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcclxuICAgICAgICA6IG5ldyBTZWxlY3Rpb24oW3NlbGVjdG9yID09IG51bGwgPyBbXSA6IHNlbGVjdG9yXSwgcm9vdCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0b3VjaChub2RlLCB0b3VjaGVzLCBpZGVudGlmaWVyKSB7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGlmICgodG91Y2ggPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHBvaW50JDUobm9kZSwgdG91Y2gpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0b3VjaGVzKG5vZGUsIHRvdWNoZXMpIHtcclxuICAgIGlmICh0b3VjaGVzID09IG51bGwpIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLnRvdWNoZXM7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCBwb2ludHMgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcclxuICAgICAgcG9pbnRzW2ldID0gcG9pbnQkNShub2RlLCB0b3VjaGVzW2ldKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG4gIH1cclxuXHJcbiAgdmFyIGVtcHR5T24gPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZW5kXCIsIFwiaW50ZXJydXB0XCIpO1xyXG4gIHZhciBlbXB0eVR3ZWVuID0gW107XHJcblxyXG4gIHZhciBDUkVBVEVEID0gMDtcclxuICB2YXIgU0NIRURVTEVEID0gMTtcclxuICB2YXIgU1RBUlRJTkcgPSAyO1xyXG4gIHZhciBTVEFSVEVEID0gMztcclxuICB2YXIgRU5ESU5HID0gNDtcclxuICB2YXIgRU5ERUQgPSA1O1xyXG5cclxuICBmdW5jdGlvbiBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcclxuICAgIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbjtcclxuICAgIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xyXG4gICAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XHJcbiAgICBjcmVhdGUobm9kZSwgaWQsIHtcclxuICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXHJcbiAgICAgIGdyb3VwOiBncm91cCwgLy8gRm9yIGNvbnRleHQgZHVyaW5nIGNhbGxiYWNrLlxyXG4gICAgICBvbjogZW1wdHlPbixcclxuICAgICAgdHdlZW46IGVtcHR5VHdlZW4sXHJcbiAgICAgIHRpbWU6IHRpbWluZy50aW1lLFxyXG4gICAgICBkZWxheTogdGltaW5nLmRlbGF5LFxyXG4gICAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxyXG4gICAgICBlYXNlOiB0aW1pbmcuZWFzZSxcclxuICAgICAgdGltZXI6IG51bGwsXHJcbiAgICAgIHN0YXRlOiBDUkVBVEVEXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXQobm9kZSwgaWQpIHtcclxuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xyXG4gICAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSB8fCBzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlXCIpO1xyXG4gICAgcmV0dXJuIHNjaGVkdWxlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0JDIobm9kZSwgaWQpIHtcclxuICAgIHZhciBzY2hlZHVsZSA9IG5vZGUuX190cmFuc2l0aW9uO1xyXG4gICAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSB8fCBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZVwiKTtcclxuICAgIHJldHVybiBzY2hlZHVsZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldCQxKG5vZGUsIGlkKSB7XHJcbiAgICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcclxuICAgIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlXCIpO1xyXG4gICAgcmV0dXJuIHNjaGVkdWxlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XHJcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXHJcbiAgICAgICAgdHdlZW47XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgc2VsZiB0aW1lciB3aGVuIHRoZSB0cmFuc2l0aW9uIGlzIGNyZWF0ZWQuXHJcbiAgICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcclxuICAgIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xyXG4gICAgc2VsZi50aW1lciA9IHRpbWVyKHNjaGVkdWxlLCAwLCBzZWxmLnRpbWUpO1xyXG5cclxuICAgIC8vIElmIHRoZSBkZWxheSBpcyBncmVhdGVyIHRoYW4gdGhpcyBmaXJzdCBzbGVlcCwgc2xlZXAgc29tZSBtb3JlO1xyXG4gICAgLy8gb3RoZXJ3aXNlLCBzdGFydCBpbW1lZGlhdGVseS5cclxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlKGVsYXBzZWQpIHtcclxuICAgICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcclxuICAgICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xyXG4gICAgICBlbHNlIHNlbGYudGltZXIucmVzdGFydChzdGFydCwgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XHJcbiAgICAgIHZhciBpLCBqLCBuLCBvO1xyXG5cclxuICAgICAgZm9yIChpIGluIHNjaGVkdWxlcykge1xyXG4gICAgICAgIG8gPSBzY2hlZHVsZXNbaV07XHJcbiAgICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxyXG4gICAgICAgIC8vIERpc3BhdGNoIHRoZSBpbnRlcnJ1cHQgZXZlbnQuXHJcbiAgICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHtcclxuICAgICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcclxuICAgICAgICAgIG8udGltZXIuc3RvcCgpO1xyXG4gICAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xyXG4gICAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENhbmNlbCBhbnkgcHJlLWVtcHRlZCB0cmFuc2l0aW9ucy4gTm8gaW50ZXJydXB0IGV2ZW50IGlzIGRpc3BhdGNoZWRcclxuICAgICAgICAvLyBiZWNhdXNlIHRoZSBjYW5jZWxsZWQgdHJhbnNpdGlvbnMgbmV2ZXIgc3RhcnRlZC4gTm90ZSB0aGF0IHRoaXMgYWxzb1xyXG4gICAgICAgIC8vIHJlbW92ZXMgdGhpcyB0cmFuc2l0aW9uIGZyb20gdGhlIHBlbmRpbmcgbGlzdCFcclxuICAgICAgICBlbHNlIGlmICgraSA8IGlkKSB7XHJcbiAgICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XHJcbiAgICAgICAgICBvLnRpbWVyLnN0b3AoKTtcclxuICAgICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBtYm9zdG9jay9kMyMxNTc2LlxyXG4gICAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxyXG4gICAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBzY2hlZHVsZWQgYmVmb3JlIHRoZSBzdGFydCBldmVudDsgc2VlIGQzL2QzLXRyYW5zaXRpb24jMTYhXHJcbiAgICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cclxuICAgICAgdGltZW91dCQxKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XHJcbiAgICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcclxuICAgICAgICAgIHRpY2soZWxhcHNlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cclxuICAgICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgdGhlIHR3ZWVuIGFyZSBpbml0aWFsaXplZC5cclxuICAgICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xyXG4gICAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcclxuICAgICAgaWYgKHNlbGYuc3RhdGUgIT09IFNUQVJUSU5HKSByZXR1cm47IC8vIGludGVycnVwdGVkXHJcbiAgICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xyXG5cclxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXHJcbiAgICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XHJcbiAgICAgIGZvciAoaSA9IDAsIGogPSAtMTsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XHJcbiAgICAgICAgICB0d2VlblsrK2pdID0gbztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdGljayhlbGFwc2VkKSB7XHJcbiAgICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi5zdGF0ZSA9IEVORElORywgMSksXHJcbiAgICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xyXG5cclxuICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICB0d2VlbltpXS5jYWxsKG51bGwsIHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBEaXNwYXRjaCB0aGUgZW5kIGV2ZW50LlxyXG4gICAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XHJcbiAgICAgICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xyXG4gICAgICAgIHNlbGYudGltZXIuc3RvcCgpO1xyXG4gICAgICAgIHNlbGYub24uY2FsbChcImVuZFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcclxuICAgICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSBpZiAoK2kgIT09IGlkKSByZXR1cm4gdm9pZCBkZWxldGUgc2NoZWR1bGVzW2lkXTtcclxuICAgICAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGludGVycnVwdChub2RlLCBuYW1lKSB7XHJcbiAgICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXHJcbiAgICAgICAgc2NoZWR1bGUsXHJcbiAgICAgICAgYWN0aXZlLFxyXG4gICAgICAgIGVtcHR5ID0gdHJ1ZSxcclxuICAgICAgICBpO1xyXG5cclxuICAgIGlmICghc2NoZWR1bGVzKSByZXR1cm47XHJcblxyXG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcclxuXHJcbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XHJcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cclxuICAgICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPT09IFNUQVJURUQ7XHJcbiAgICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XHJcbiAgICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcclxuICAgICAgaWYgKGFjdGl2ZSkgc2NoZWR1bGUub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xyXG4gICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2VsZWN0aW9uX2ludGVycnVwdChuYW1lKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XHJcbiAgICB2YXIgdHdlZW4wLCB0d2VlbjE7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCQyKHRoaXMsIGlkKSxcclxuICAgICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XHJcblxyXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXHJcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxyXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXHJcbiAgICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XHJcbiAgICAgICAgdHdlZW4xID0gdHdlZW4wID0gdHdlZW47XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcclxuICAgICAgICAgICAgdHdlZW4xID0gdHdlZW4xLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciB0d2VlbjAsIHR3ZWVuMTtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQkMih0aGlzLCBpZCksXHJcbiAgICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xyXG5cclxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxyXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcclxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxyXG4gICAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xyXG4gICAgICAgIHR3ZWVuMSA9ICh0d2VlbjAgPSB0d2Vlbikuc2xpY2UoKTtcclxuICAgICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XHJcbiAgICAgICAgICAgIHR3ZWVuMVtpXSA9IHQ7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdHdlZW4obmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xyXG5cclxuICAgIG5hbWUgKz0gXCJcIjtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcclxuICAgICAgdmFyIHR3ZWVuID0gZ2V0JDEodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcclxuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBpZiAoKHQgPSB0d2VlbltpXSkubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgdmFyIGlkID0gdHJhbnNpdGlvbi5faWQ7XHJcblxyXG4gICAgdHJhbnNpdGlvbi5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQkMih0aGlzLCBpZCk7XHJcbiAgICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHJldHVybiBnZXQkMShub2RlLCBpZCkudmFsdWVbbmFtZV07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW50ZXJwb2xhdGUkMShhLCBiKSB7XHJcbiAgICB2YXIgYztcclxuICAgIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxyXG4gICAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gaW50ZXJwb2xhdGVSZ2JcclxuICAgICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcclxuICAgICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmUkMShuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF0dHJSZW1vdmVOUyQxKGZ1bGxuYW1lKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnQkMShuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XHJcbiAgICB2YXIgdmFsdWUwMCxcclxuICAgICAgICBpbnRlcnBvbGF0ZTA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcclxuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxyXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcclxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyQ29uc3RhbnROUyQxKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XHJcbiAgICB2YXIgdmFsdWUwMCxcclxuICAgICAgICBpbnRlcnBvbGF0ZTA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XHJcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcclxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwID8gaW50ZXJwb2xhdGUwXHJcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XHJcbiAgICB2YXIgdmFsdWUwMCxcclxuICAgICAgICB2YWx1ZTEwLFxyXG4gICAgICAgIGludGVycG9sYXRlMDtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XHJcbiAgICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XHJcbiAgICAgIHZhbHVlMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXHJcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcclxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMkMShmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XHJcbiAgICB2YXIgdmFsdWUwMCxcclxuICAgICAgICB2YWx1ZTEwLFxyXG4gICAgICAgIGludGVycG9sYXRlMDtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHZhbHVlMCwgdmFsdWUxID0gdmFsdWUodGhpcyk7XHJcbiAgICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xyXG4gICAgICB2YWx1ZTAgPSB0aGlzLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XHJcbiAgICAgIHJldHVybiB2YWx1ZTAgPT09IHZhbHVlMSA/IG51bGxcclxuICAgICAgICAgIDogdmFsdWUwID09PSB2YWx1ZTAwICYmIHZhbHVlMSA9PT0gdmFsdWUxMCA/IGludGVycG9sYXRlMFxyXG4gICAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZSh2YWx1ZTAwID0gdmFsdWUwLCB2YWx1ZTEwID0gdmFsdWUxKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX2F0dHIobmFtZSwgdmFsdWUpIHtcclxuICAgIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0kMiA6IGludGVycG9sYXRlJDE7XHJcbiAgICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TJDEgOiBhdHRyRnVuY3Rpb24kMSkoZnVsbG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJhdHRyLlwiICsgbmFtZSwgdmFsdWUpKVxyXG4gICAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyQxIDogYXR0clJlbW92ZSQxKShmdWxsbmFtZSlcclxuICAgICAgICA6IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJDb25zdGFudE5TJDEgOiBhdHRyQ29uc3RhbnQkMSkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyVHdlZW5OUyhmdWxsbmFtZSwgdmFsdWUpIHtcclxuICAgIGZ1bmN0aW9uIHR3ZWVuKCkge1xyXG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xyXG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkodCkpO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XHJcbiAgICByZXR1cm4gdHdlZW47XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcclxuICAgIGZ1bmN0aW9uIHR3ZWVuKCkge1xyXG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xyXG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgaSh0KSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIHJldHVybiB0d2VlbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XHJcbiAgICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xyXG4gICAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xyXG4gICAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZGVsYXkodmFsdWUpIHtcclxuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xyXG5cclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxyXG4gICAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXHJcbiAgICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgc2V0JDIodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNldCQyKHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fZHVyYXRpb24odmFsdWUpIHtcclxuICAgIHZhciBpZCA9IHRoaXMuX2lkO1xyXG5cclxuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXHJcbiAgICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxyXG4gICAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXHJcbiAgICAgICAgOiBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHNldCQyKHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9lYXNlKHZhbHVlKSB7XHJcbiAgICB2YXIgaWQgPSB0aGlzLl9pZDtcclxuXHJcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxyXG4gICAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxyXG4gICAgICAgIDogZ2V0JDEodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9maWx0ZXIobWF0Y2gpIHtcclxuICAgIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyJDEobWF0Y2gpO1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcclxuICAgICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XHJcbiAgICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fbWVyZ2UodHJhbnNpdGlvbikge1xyXG4gICAgaWYgKHRyYW5zaXRpb24uX2lkICE9PSB0aGlzLl9pZCkgdGhyb3cgbmV3IEVycm9yO1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSB0cmFuc2l0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XHJcbiAgICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICg7IGogPCBtMDsgKytqKSB7XHJcbiAgICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RhcnQkMShuYW1lKSB7XHJcbiAgICByZXR1cm4gKG5hbWUgKyBcIlwiKS50cmltKCkuc3BsaXQoL158XFxzKy8pLmV2ZXJ5KGZ1bmN0aW9uKHQpIHtcclxuICAgICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xyXG4gICAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcclxuICAgICAgcmV0dXJuICF0IHx8IHQgPT09IFwic3RhcnRcIjtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcclxuICAgIHZhciBvbjAsIG9uMSwgc2l0ID0gc3RhcnQkMShuYW1lKSA/IGluaXQgOiBzZXQkMjtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHNjaGVkdWxlID0gc2l0KHRoaXMsIGlkKSxcclxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XHJcblxyXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcclxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXHJcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cclxuICAgICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xyXG5cclxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9vbihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgdmFyIGlkID0gdGhpcy5faWQ7XHJcblxyXG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyXHJcbiAgICAgICAgPyBnZXQkMSh0aGlzLm5vZGUoKSwgaWQpLm9uLm9uKG5hbWUpXHJcbiAgICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcclxuICAgICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fcmVtb3ZlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3NlbGVjdChzZWxlY3QpIHtcclxuICAgIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcclxuICAgICAgICBpZCA9IHRoaXMuX2lkO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XHJcblxyXG4gICAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xyXG4gICAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcclxuICAgICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcclxuICAgICAgICAgIHNjaGVkdWxlKHN1Ymdyb3VwW2ldLCBuYW1lLCBpZCwgaSwgc3ViZ3JvdXAsIGdldCQxKG5vZGUsIGlkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zZWxlY3RBbGwoc2VsZWN0KSB7XHJcbiAgICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXHJcbiAgICAgICAgaWQgPSB0aGlzLl9pZDtcclxuXHJcbiAgICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcclxuICAgICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldCQxKG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcclxuICAgICAgICAgICAgICBzY2hlZHVsZShjaGlsZCwgbmFtZSwgaWQsIGssIGNoaWxkcmVuLCBpbmhlcml0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3ViZ3JvdXBzLnB1c2goY2hpbGRyZW4pO1xyXG4gICAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcclxuICB9XHJcblxyXG4gIHZhciBTZWxlY3Rpb24kMSA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc2VsZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24kMSh0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3R5bGVSZW1vdmUkMShuYW1lLCBpbnRlcnBvbGF0ZSkge1xyXG4gICAgdmFyIHZhbHVlMDAsXHJcbiAgICAgICAgdmFsdWUxMCxcclxuICAgICAgICBpbnRlcnBvbGF0ZTA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzdHlsZSA9IHdpbmRvdyh0aGlzKS5nZXRDb21wdXRlZFN0eWxlKHRoaXMsIG51bGwpLFxyXG4gICAgICAgICAgdmFsdWUwID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSxcclxuICAgICAgICAgIHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpKTtcclxuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxyXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgJiYgdmFsdWUxID09PSB2YWx1ZTEwID8gaW50ZXJwb2xhdGUwXHJcbiAgICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHZhbHVlMDAgPSB2YWx1ZTAsIHZhbHVlMTAgPSB2YWx1ZTEpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0eWxlUmVtb3ZlRW5kKG5hbWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdHlsZUNvbnN0YW50JDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xyXG4gICAgdmFyIHZhbHVlMDAsXHJcbiAgICAgICAgaW50ZXJwb2xhdGUwO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdmFsdWUwID0gd2luZG93KHRoaXMpLmdldENvbXB1dGVkU3R5bGUodGhpcywgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcclxuICAgICAgcmV0dXJuIHZhbHVlMCA9PT0gdmFsdWUxID8gbnVsbFxyXG4gICAgICAgICAgOiB2YWx1ZTAgPT09IHZhbHVlMDAgPyBpbnRlcnBvbGF0ZTBcclxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdHlsZUZ1bmN0aW9uJDEobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XHJcbiAgICB2YXIgdmFsdWUwMCxcclxuICAgICAgICB2YWx1ZTEwLFxyXG4gICAgICAgIGludGVycG9sYXRlMDtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHN0eWxlID0gd2luZG93KHRoaXMpLmdldENvbXB1dGVkU3R5bGUodGhpcywgbnVsbCksXHJcbiAgICAgICAgICB2YWx1ZTAgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpLFxyXG4gICAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyk7XHJcbiAgICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSkpO1xyXG4gICAgICByZXR1cm4gdmFsdWUwID09PSB2YWx1ZTEgPyBudWxsXHJcbiAgICAgICAgICA6IHZhbHVlMCA9PT0gdmFsdWUwMCAmJiB2YWx1ZTEgPT09IHZhbHVlMTAgPyBpbnRlcnBvbGF0ZTBcclxuICAgICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUodmFsdWUwMCA9IHZhbHVlMCwgdmFsdWUxMCA9IHZhbHVlMSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJhbnNpdGlvbl9zdHlsZShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcclxuICAgIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSQxIDogaW50ZXJwb2xhdGUkMTtcclxuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xyXG4gICAgICAgICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZVJlbW92ZSQxKG5hbWUsIGkpKVxyXG4gICAgICAgICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZUVuZChuYW1lKSlcclxuICAgICAgICA6IHRoaXMuc3R5bGVUd2VlbihuYW1lLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgICAgICA/IHN0eWxlRnVuY3Rpb24kMShuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpXHJcbiAgICAgICAgICAgIDogc3R5bGVDb25zdGFudCQxKG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcclxuICAgIGZ1bmN0aW9uIHR3ZWVuKCkge1xyXG4gICAgICB2YXIgbm9kZSA9IHRoaXMsIGkgPSB2YWx1ZS5hcHBseShub2RlLCBhcmd1bWVudHMpO1xyXG4gICAgICByZXR1cm4gaSAmJiBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcclxuICAgIHJldHVybiB0d2VlbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcclxuICAgIHZhciBrZXkgPSBcInN0eWxlLlwiICsgKG5hbWUgKz0gXCJcIik7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xyXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcclxuICAgIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdGV4dENvbnN0YW50JDEodmFsdWUpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRleHRGdW5jdGlvbiQxKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcclxuICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmFuc2l0aW9uX3RleHQodmFsdWUpIHtcclxuICAgIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgID8gdGV4dEZ1bmN0aW9uJDEodHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxyXG4gICAgICAgIDogdGV4dENvbnN0YW50JDEodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25fdHJhbnNpdGlvbigpIHtcclxuICAgIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcclxuICAgICAgICBpZDAgPSB0aGlzLl9pZCxcclxuICAgICAgICBpZDEgPSBuZXdJZCgpO1xyXG5cclxuICAgIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcclxuICAgICAgICAgIHZhciBpbmhlcml0ID0gZ2V0JDEobm9kZSwgaWQwKTtcclxuICAgICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcclxuICAgICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXHJcbiAgICAgICAgICAgIGRlbGF5OiAwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcclxuICAgICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZDEpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGlkID0gMDtcclxuXHJcbiAgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XHJcbiAgICB0aGlzLl9ncm91cHMgPSBncm91cHM7XHJcbiAgICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5faWQgPSBpZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xyXG4gICAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBuZXdJZCgpIHtcclxuICAgIHJldHVybiArK2lkO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xyXG5cclxuICBUcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXHJcbiAgICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxyXG4gICAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcclxuICAgIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXHJcbiAgICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcclxuICAgIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXHJcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXHJcbiAgICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXHJcbiAgICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcclxuICAgIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcclxuICAgIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcclxuICAgIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxyXG4gICAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxyXG4gICAgb246IHRyYW5zaXRpb25fb24sXHJcbiAgICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXHJcbiAgICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxyXG4gICAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXHJcbiAgICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXHJcbiAgICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXHJcbiAgICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxyXG4gICAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXHJcbiAgICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcclxuICAgIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxyXG4gICAgZWFzZTogdHJhbnNpdGlvbl9lYXNlXHJcbiAgfTtcclxuXHJcbiAgdmFyIGRlZmF1bHRUaW1pbmcgPSB7XHJcbiAgICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxyXG4gICAgZGVsYXk6IDAsXHJcbiAgICBkdXJhdGlvbjogMjUwLFxyXG4gICAgZWFzZTogZWFzZUN1YmljSW5PdXRcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XHJcbiAgICB2YXIgdGltaW5nO1xyXG4gICAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcclxuICAgICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFRpbWluZy50aW1lID0gbm93KCksIGRlZmF1bHRUaW1pbmc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aW1pbmc7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZWxlY3Rpb25fdHJhbnNpdGlvbihuYW1lKSB7XHJcbiAgICB2YXIgaWQsXHJcbiAgICAgICAgdGltaW5nO1xyXG5cclxuICAgIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xyXG4gICAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xyXG4gICAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XHJcbiAgICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xyXG4gIH1cclxuXHJcbiAgc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xyXG4gIHNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xyXG5cclxuICB2YXIgcm9vdCQxID0gW251bGxdO1xyXG5cclxuICBmdW5jdGlvbiBhY3RpdmUobm9kZSwgbmFtZSkge1xyXG4gICAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxyXG4gICAgICAgIHNjaGVkdWxlLFxyXG4gICAgICAgIGk7XHJcblxyXG4gICAgaWYgKHNjaGVkdWxlcykge1xyXG4gICAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xyXG4gICAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XHJcbiAgICAgICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkuc3RhdGUgPiBTQ0hFRFVMRUQgJiYgc2NoZWR1bGUubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290JDEsIG5hbWUsICtpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHZhciBzbGljZSQ0ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xyXG5cclxuICBmdW5jdGlvbiBpZGVudGl0eSQ1KHgpIHtcclxuICAgIHJldHVybiB4O1xyXG4gIH1cclxuXHJcbiAgdmFyIHRvcCA9IDE7XHJcbiAgdmFyIHJpZ2h0ID0gMjtcclxuICB2YXIgYm90dG9tID0gMztcclxuICB2YXIgbGVmdCA9IDQ7XHJcbnZhciAgIGVwc2lsb24kMiA9IDFlLTY7XHJcbiAgZnVuY3Rpb24gdHJhbnNsYXRlWChzY2FsZTAsIHNjYWxlMSwgZCkge1xyXG4gICAgdmFyIHggPSBzY2FsZTAoZCk7XHJcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoaXNGaW5pdGUoeCkgPyB4IDogc2NhbGUxKGQpKSArIFwiLDApXCI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmFuc2xhdGVZKHNjYWxlMCwgc2NhbGUxLCBkKSB7XHJcbiAgICB2YXIgeSA9IHNjYWxlMChkKTtcclxuICAgIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgKGlzRmluaXRlKHkpID8geSA6IHNjYWxlMShkKSkgKyBcIilcIjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRlcihzY2FsZSkge1xyXG4gICAgdmFyIG9mZnNldCA9IHNjYWxlLmJhbmR3aWR0aCgpIC8gMjtcclxuICAgIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oZCkge1xyXG4gICAgICByZXR1cm4gc2NhbGUoZCkgKyBvZmZzZXQ7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW50ZXJpbmcoKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuX19heGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXhpcyhvcmllbnQsIHNjYWxlKSB7XHJcbiAgICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxyXG4gICAgICAgIHRpY2tWYWx1ZXMgPSBudWxsLFxyXG4gICAgICAgIHRpY2tGb3JtYXQgPSBudWxsLFxyXG4gICAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxyXG4gICAgICAgIHRpY2tTaXplT3V0ZXIgPSA2LFxyXG4gICAgICAgIHRpY2tQYWRkaW5nID0gMztcclxuXHJcbiAgICBmdW5jdGlvbiBheGlzKGNvbnRleHQpIHtcclxuICAgICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXHJcbiAgICAgICAgICBmb3JtYXQgPSB0aWNrRm9ybWF0ID09IG51bGwgPyAoc2NhbGUudGlja0Zvcm1hdCA/IHNjYWxlLnRpY2tGb3JtYXQuYXBwbHkoc2NhbGUsIHRpY2tBcmd1bWVudHMpIDogaWRlbnRpdHkkNSkgOiB0aWNrRm9ybWF0LFxyXG4gICAgICAgICAgc3BhY2luZyA9IE1hdGgubWF4KHRpY2tTaXplSW5uZXIsIDApICsgdGlja1BhZGRpbmcsXHJcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGJvdHRvbSA/IHRyYW5zbGF0ZVggOiB0cmFuc2xhdGVZLFxyXG4gICAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxyXG4gICAgICAgICAgcmFuZ2UwID0gcmFuZ2VbMF0gKyAwLjUsXHJcbiAgICAgICAgICByYW5nZTEgPSByYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcclxuICAgICAgICAgIHBvc2l0aW9uID0gKHNjYWxlLmJhbmR3aWR0aCA/IGNlbnRlciA6IGlkZW50aXR5JDUpKHNjYWxlLmNvcHkoKSksXHJcbiAgICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxyXG4gICAgICAgICAgcGF0aCA9IHNlbGVjdGlvbi5zZWxlY3RBbGwoXCIuZG9tYWluXCIpLmRhdGEoW251bGxdKSxcclxuICAgICAgICAgIHRpY2sgPSBzZWxlY3Rpb24uc2VsZWN0QWxsKFwiLnRpY2tcIikuZGF0YSh2YWx1ZXMsIHNjYWxlKS5vcmRlcigpLFxyXG4gICAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcclxuICAgICAgICAgIHRpY2tFbnRlciA9IHRpY2suZW50ZXIoKS5hcHBlbmQoXCJnXCIpLmF0dHIoXCJjbGFzc1wiLCBcInRpY2tcIiksXHJcbiAgICAgICAgICBsaW5lID0gdGljay5zZWxlY3QoXCJsaW5lXCIpLFxyXG4gICAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKSxcclxuICAgICAgICAgIGsgPSBvcmllbnQgPT09IHRvcCB8fCBvcmllbnQgPT09IGxlZnQgPyAtMSA6IDEsXHJcbiAgICAgICAgICB4LCB5ID0gb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PT0gcmlnaHQgPyAoeCA9IFwieFwiLCBcInlcIikgOiAoeCA9IFwieVwiLCBcInhcIik7XHJcblxyXG4gICAgICBwYXRoID0gcGF0aC5tZXJnZShwYXRoLmVudGVyKCkuaW5zZXJ0KFwicGF0aFwiLCBcIi50aWNrXCIpXHJcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZG9tYWluXCIpXHJcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIikpO1xyXG5cclxuICAgICAgdGljayA9IHRpY2subWVyZ2UodGlja0VudGVyKTtcclxuXHJcbiAgICAgIGxpbmUgPSBsaW5lLm1lcmdlKHRpY2tFbnRlci5hcHBlbmQoXCJsaW5lXCIpXHJcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiMwMDBcIilcclxuICAgICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpXHJcbiAgICAgICAgICAuYXR0cih5ICsgXCIxXCIsIDAuNSlcclxuICAgICAgICAgIC5hdHRyKHkgKyBcIjJcIiwgMC41KSk7XHJcblxyXG4gICAgICB0ZXh0ID0gdGV4dC5tZXJnZSh0aWNrRW50ZXIuYXBwZW5kKFwidGV4dFwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzAwMFwiKVxyXG4gICAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXHJcbiAgICAgICAgICAuYXR0cih5LCAwLjUpXHJcbiAgICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcclxuXHJcbiAgICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcclxuICAgICAgICBwYXRoID0gcGF0aC50cmFuc2l0aW9uKGNvbnRleHQpO1xyXG4gICAgICAgIHRpY2sgPSB0aWNrLnRyYW5zaXRpb24oY29udGV4dCk7XHJcbiAgICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcclxuICAgICAgICB0ZXh0ID0gdGV4dC50cmFuc2l0aW9uKGNvbnRleHQpO1xyXG5cclxuICAgICAgICB0aWNrRXhpdCA9IHRpY2tFeGl0LnRyYW5zaXRpb24oY29udGV4dClcclxuICAgICAgICAgICAgLmF0dHIoXCJvcGFjaXR5XCIsIGVwc2lsb24kMilcclxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uLCB0aGlzLnBhcmVudE5vZGUuX19heGlzIHx8IHBvc2l0aW9uLCBkKTsgfSk7XHJcblxyXG4gICAgICAgIHRpY2tFbnRlclxyXG4gICAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgZXBzaWxvbiQyKVxyXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0cmFuc2Zvcm0odGhpcy5wYXJlbnROb2RlLl9fYXhpcyB8fCBwb3NpdGlvbiwgcG9zaXRpb24sIGQpOyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGlja0V4aXQucmVtb3ZlKCk7XHJcblxyXG4gICAgICBwYXRoXHJcbiAgICAgICAgICAuYXR0cihcImRcIiwgb3JpZW50ID09PSBsZWZ0IHx8IG9yaWVudCA9PSByaWdodFxyXG4gICAgICAgICAgICAgID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlclxyXG4gICAgICAgICAgICAgIDogXCJNXCIgKyByYW5nZTAgKyBcIixcIiArIGsgKiB0aWNrU2l6ZU91dGVyICsgXCJWMC41SFwiICsgcmFuZ2UxICsgXCJWXCIgKyBrICogdGlja1NpemVPdXRlcik7XHJcblxyXG4gICAgICB0aWNrXHJcbiAgICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcclxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRyYW5zZm9ybShwb3NpdGlvbiwgcG9zaXRpb24sIGQpOyB9KTtcclxuXHJcbiAgICAgIGxpbmVcclxuICAgICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xyXG5cclxuICAgICAgdGV4dFxyXG4gICAgICAgICAgLmF0dHIoeCwgayAqIHNwYWNpbmcpXHJcbiAgICAgICAgICAudGV4dChmb3JtYXQpO1xyXG5cclxuICAgICAgc2VsZWN0aW9uLmZpbHRlcihlbnRlcmluZylcclxuICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcclxuICAgICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIDEwKVxyXG4gICAgICAgICAgLmF0dHIoXCJmb250LWZhbWlseVwiLCBcInNhbnMtc2VyaWZcIilcclxuICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcclxuXHJcbiAgICAgIHNlbGVjdGlvblxyXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7IHRoaXMuX19heGlzID0gcG9zaXRpb247IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGF4aXMuc2NhbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcclxuICAgIH07XHJcblxyXG4gICAgYXhpcy50aWNrcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gdGlja0FyZ3VtZW50cyA9IHNsaWNlJDQuY2FsbChhcmd1bWVudHMpLCBheGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBheGlzLnRpY2tBcmd1bWVudHMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlJDQuY2FsbChfKSwgYXhpcykgOiB0aWNrQXJndW1lbnRzLnNsaWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1ZhbHVlcyA9IF8gPT0gbnVsbCA/IG51bGwgOiBzbGljZSQ0LmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGF4aXMudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja0Zvcm1hdCA9IF8sIGF4aXMpIDogdGlja0Zvcm1hdDtcclxuICAgIH07XHJcblxyXG4gICAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlja1NpemVJbm5lciA9IHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBheGlzLnRpY2tTaXplSW5uZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBheGlzLnRpY2tTaXplT3V0ZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplT3V0ZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZU91dGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrUGFkZGluZyA9ICtfLCBheGlzKSA6IHRpY2tQYWRkaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gYXhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF4aXNUb3Aoc2NhbGUpIHtcclxuICAgIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XHJcbiAgICByZXR1cm4gYXhpcyhyaWdodCwgc2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXhpc0JvdHRvbShzY2FsZSkge1xyXG4gICAgcmV0dXJuIGF4aXMoYm90dG9tLCBzY2FsZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBheGlzTGVmdChzY2FsZSkge1xyXG4gICAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xyXG4gICAgcmV0dXJuIGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVhblgoY2hpbGRyZW4pIHtcclxuICAgIHJldHVybiBjaGlsZHJlbi5yZWR1Y2UobWVhblhSZWR1Y2UsIDApIC8gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVhblhSZWR1Y2UoeCwgYykge1xyXG4gICAgcmV0dXJuIHggKyBjLng7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtYXhZKGNoaWxkcmVuKSB7XHJcbiAgICByZXR1cm4gMSArIGNoaWxkcmVuLnJlZHVjZShtYXhZUmVkdWNlLCAwKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1heFlSZWR1Y2UoeSwgYykge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KHksIGMueSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsZWFmTGVmdChub2RlKSB7XHJcbiAgICB2YXIgY2hpbGRyZW47XHJcbiAgICB3aGlsZSAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSBub2RlID0gY2hpbGRyZW5bMF07XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XHJcbiAgICB2YXIgY2hpbGRyZW47XHJcbiAgICB3aGlsZSAoY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuKSBub2RlID0gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV07XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsdXN0ZXIoKSB7XHJcbiAgICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uLFxyXG4gICAgICAgIGR4ID0gMSxcclxuICAgICAgICBkeSA9IDEsXHJcbiAgICAgICAgbm9kZVNpemUgPSBmYWxzZTtcclxuXHJcbiAgICBmdW5jdGlvbiBjbHVzdGVyKHJvb3QpIHtcclxuICAgICAgdmFyIHByZXZpb3VzTm9kZSxcclxuICAgICAgICAgIHggPSAwO1xyXG5cclxuICAgICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cclxuICAgICAgcm9vdC5lYWNoQWZ0ZXIoZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICBub2RlLnggPSBtZWFuWChjaGlsZHJlbik7XHJcbiAgICAgICAgICBub2RlLnkgPSBtYXhZKGNoaWxkcmVuKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbm9kZS54ID0gcHJldmlvdXNOb2RlID8geCArPSBzZXBhcmF0aW9uKG5vZGUsIHByZXZpb3VzTm9kZSkgOiAwO1xyXG4gICAgICAgICAgbm9kZS55ID0gMDtcclxuICAgICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZhciBsZWZ0ID0gbGVhZkxlZnQocm9vdCksXHJcbiAgICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcclxuICAgICAgICAgIHgwID0gbGVmdC54IC0gc2VwYXJhdGlvbihsZWZ0LCByaWdodCkgLyAyLFxyXG4gICAgICAgICAgeDEgPSByaWdodC54ICsgc2VwYXJhdGlvbihyaWdodCwgbGVmdCkgLyAyO1xyXG5cclxuICAgICAgLy8gU2Vjb25kIHdhbGssIG5vcm1hbGl6aW5nIHggJiB5IHRvIHRoZSBkZXNpcmVkIHNpemUuXHJcbiAgICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICBub2RlLnggPSAobm9kZS54IC0gcm9vdC54KSAqIGR4O1xyXG4gICAgICAgIG5vZGUueSA9IChyb290LnkgLSBub2RlLnkpICogZHk7XHJcbiAgICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgbm9kZS54ID0gKG5vZGUueCAtIHgwKSAvICh4MSAtIHgwKSAqIGR4O1xyXG4gICAgICAgIG5vZGUueSA9ICgxIC0gKHJvb3QueSA/IG5vZGUueSAvIHJvb3QueSA6IDEpKSAqIGR5O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjbHVzdGVyLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNlcGFyYXRpb24gPSB4LCBjbHVzdGVyKSA6IHNlcGFyYXRpb247XHJcbiAgICB9O1xyXG5cclxuICAgIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgY2x1c3RlcikgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjbHVzdGVyLm5vZGVTaXplID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNsdXN0ZXI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub2RlX2VhY2goY2FsbGJhY2spIHtcclxuICAgIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XHJcbiAgICBkbyB7XHJcbiAgICAgIGN1cnJlbnQgPSBuZXh0LnJldmVyc2UoKSwgbmV4dCA9IFtdO1xyXG4gICAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcclxuICAgICAgICBjYWxsYmFjayhub2RlKSwgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgIGlmIChjaGlsZHJlbikgZm9yIChpID0gMCwgbiA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9lYWNoQmVmb3JlKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcclxuICAgIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcclxuICAgICAgY2FsbGJhY2sobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGRyZW5baV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vZGVfZWFjaEFmdGVyKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xyXG4gICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xyXG4gICAgICBuZXh0LnB1c2gobm9kZSksIGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHdoaWxlIChub2RlID0gbmV4dC5wb3AoKSkge1xyXG4gICAgICBjYWxsYmFjayhub2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9zdW0odmFsdWUpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHZhciBzdW0gPSArdmFsdWUobm9kZS5kYXRhKSB8fCAwLFxyXG4gICAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxyXG4gICAgICAgICAgaSA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XHJcbiAgICAgIG5vZGUudmFsdWUgPSBzdW07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vZGVfc29ydChjb21wYXJlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICBub2RlLmNoaWxkcmVuLnNvcnQoY29tcGFyZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9wYXRoKGVuZCkge1xyXG4gICAgdmFyIHN0YXJ0ID0gdGhpcyxcclxuICAgICAgICBhbmNlc3RvciA9IGxlYXN0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCksXHJcbiAgICAgICAgbm9kZXMgPSBbc3RhcnRdO1xyXG4gICAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xyXG4gICAgICBzdGFydCA9IHN0YXJ0LnBhcmVudDtcclxuICAgICAgbm9kZXMucHVzaChzdGFydCk7XHJcbiAgICB9XHJcbiAgICB2YXIgayA9IG5vZGVzLmxlbmd0aDtcclxuICAgIHdoaWxlIChlbmQgIT09IGFuY2VzdG9yKSB7XHJcbiAgICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xyXG4gICAgICBlbmQgPSBlbmQucGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGVhc3RDb21tb25BbmNlc3RvcihhLCBiKSB7XHJcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGE7XHJcbiAgICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcclxuICAgICAgICBiTm9kZXMgPSBiLmFuY2VzdG9ycygpLFxyXG4gICAgICAgIGMgPSBudWxsO1xyXG4gICAgYSA9IGFOb2Rlcy5wb3AoKTtcclxuICAgIGIgPSBiTm9kZXMucG9wKCk7XHJcbiAgICB3aGlsZSAoYSA9PT0gYikge1xyXG4gICAgICBjID0gYTtcclxuICAgICAgYSA9IGFOb2Rlcy5wb3AoKTtcclxuICAgICAgYiA9IGJOb2Rlcy5wb3AoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9hbmNlc3RvcnMoKSB7XHJcbiAgICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdO1xyXG4gICAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudCkge1xyXG4gICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9kZXNjZW5kYW50cygpIHtcclxuICAgIHZhciBub2RlcyA9IFtdO1xyXG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgbm9kZXMucHVzaChub2RlKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG5vZGVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9sZWF2ZXMoKSB7XHJcbiAgICB2YXIgbGVhdmVzID0gW107XHJcbiAgICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICBsZWF2ZXMucHVzaChub2RlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbGVhdmVzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9kZV9saW5rcygpIHtcclxuICAgIHZhciByb290ID0gdGhpcywgbGlua3MgPSBbXTtcclxuICAgIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIGlmIChub2RlICE9PSByb290KSB7IC8vIERvbuKAmXQgaW5jbHVkZSB0aGUgcm9vdOKAmXMgcGFyZW50LCBpZiBhbnkuXHJcbiAgICAgICAgbGlua3MucHVzaCh7c291cmNlOiBub2RlLnBhcmVudCwgdGFyZ2V0OiBub2RlfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGxpbmtzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGllcmFyY2h5KGRhdGEsIGNoaWxkcmVuKSB7XHJcbiAgICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxyXG4gICAgICAgIHZhbHVlZCA9ICtkYXRhLnZhbHVlICYmIChyb290LnZhbHVlID0gZGF0YS52YWx1ZSksXHJcbiAgICAgICAgbm9kZSxcclxuICAgICAgICBub2RlcyA9IFtyb290XSxcclxuICAgICAgICBjaGlsZCxcclxuICAgICAgICBjaGlsZHMsXHJcbiAgICAgICAgaSxcclxuICAgICAgICBuO1xyXG5cclxuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSBjaGlsZHJlbiA9IGRlZmF1bHRDaGlsZHJlbjtcclxuXHJcbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XHJcbiAgICAgIGlmICh2YWx1ZWQpIG5vZGUudmFsdWUgPSArbm9kZS5kYXRhLnZhbHVlO1xyXG4gICAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcclxuICAgICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4pO1xyXG4gICAgICAgIGZvciAoaSA9IG4gLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcclxuICAgICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XHJcbiAgICAgICAgICBjaGlsZC5kZXB0aCA9IG5vZGUuZGVwdGggKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByb290LmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub2RlX2NvcHkoKSB7XHJcbiAgICByZXR1cm4gaGllcmFyY2h5KHRoaXMpLmVhY2hCZWZvcmUoY29weURhdGEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdENoaWxkcmVuKGQpIHtcclxuICAgIHJldHVybiBkLmNoaWxkcmVuO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29weURhdGEobm9kZSkge1xyXG4gICAgbm9kZS5kYXRhID0gbm9kZS5kYXRhLmRhdGE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0KG5vZGUpIHtcclxuICAgIHZhciBoZWlnaHQgPSAwO1xyXG4gICAgZG8gbm9kZS5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB3aGlsZSAoKG5vZGUgPSBub2RlLnBhcmVudCkgJiYgKG5vZGUuaGVpZ2h0IDwgKytoZWlnaHQpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIE5vZGUoZGF0YSkge1xyXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuZGVwdGggPVxyXG4gICAgdGhpcy5oZWlnaHQgPSAwO1xyXG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgTm9kZS5wcm90b3R5cGUgPSBoaWVyYXJjaHkucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IE5vZGUsXHJcbiAgICBlYWNoOiBub2RlX2VhY2gsXHJcbiAgICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxyXG4gICAgZWFjaEJlZm9yZTogbm9kZV9lYWNoQmVmb3JlLFxyXG4gICAgc3VtOiBub2RlX3N1bSxcclxuICAgIHNvcnQ6IG5vZGVfc29ydCxcclxuICAgIHBhdGg6IG5vZGVfcGF0aCxcclxuICAgIGFuY2VzdG9yczogbm9kZV9hbmNlc3RvcnMsXHJcbiAgICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcclxuICAgIGxlYXZlczogbm9kZV9sZWF2ZXMsXHJcbiAgICBsaW5rczogbm9kZV9saW5rcyxcclxuICAgIGNvcHk6IG5vZGVfY29weVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIE5vZGUkMih2YWx1ZSkge1xyXG4gICAgdGhpcy5fID0gdmFsdWU7XHJcbiAgICB0aGlzLm5leHQgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2h1ZmZsZSQxKGFycmF5KSB7XHJcbiAgICB2YXIgaSxcclxuICAgICAgICBuID0gKGFycmF5ID0gYXJyYXkuc2xpY2UoKSkubGVuZ3RoLFxyXG4gICAgICAgIGhlYWQgPSBudWxsLFxyXG4gICAgICAgIG5vZGUgPSBoZWFkO1xyXG5cclxuICAgIHdoaWxlIChuKSB7XHJcbiAgICAgIHZhciBuZXh0ID0gbmV3IE5vZGUkMihhcnJheVtuIC0gMV0pO1xyXG4gICAgICBpZiAobm9kZSkgbm9kZSA9IG5vZGUubmV4dCA9IG5leHQ7XHJcbiAgICAgIGVsc2Ugbm9kZSA9IGhlYWQgPSBuZXh0O1xyXG4gICAgICBhcnJheVtpXSA9IGFycmF5Wy0tbl07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaGVhZDogaGVhZCxcclxuICAgICAgdGFpbDogbm9kZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVuY2xvc2UoY2lyY2xlcykge1xyXG4gICAgcmV0dXJuIGVuY2xvc2VOKHNodWZmbGUkMShjaXJjbGVzKSwgW10pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW5jbG9zZXMoYSwgYikge1xyXG4gICAgdmFyIGR4ID0gYi54IC0gYS54LFxyXG4gICAgICAgIGR5ID0gYi55IC0gYS55LFxyXG4gICAgICAgIGRyID0gYS5yIC0gYi5yO1xyXG4gICAgcmV0dXJuIGRyICogZHIgKyAxZS02ID4gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm5zIHRoZSBzbWFsbGVzdCBjaXJjbGUgdGhhdCBjb250YWlucyBjaXJjbGVzIEwgYW5kIGludGVyc2VjdHMgY2lyY2xlcyBCLlxyXG4gIGZ1bmN0aW9uIGVuY2xvc2VOKEwsIEIpIHtcclxuICAgIHZhciBjaXJjbGUsXHJcbiAgICAgICAgbDAgPSBudWxsLFxyXG4gICAgICAgIGwxID0gTC5oZWFkLFxyXG4gICAgICAgIGwyLFxyXG4gICAgICAgIHAxO1xyXG5cclxuICAgIHN3aXRjaCAoQi5sZW5ndGgpIHtcclxuICAgICAgY2FzZSAxOiBjaXJjbGUgPSBlbmNsb3NlMShCWzBdKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgMjogY2lyY2xlID0gZW5jbG9zZTIoQlswXSwgQlsxXSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIDM6IGNpcmNsZSA9IGVuY2xvc2UzKEJbMF0sIEJbMV0sIEJbMl0pOyBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAobDEpIHtcclxuICAgICAgcDEgPSBsMS5fLCBsMiA9IGwxLm5leHQ7XHJcbiAgICAgIGlmICghY2lyY2xlIHx8ICFlbmNsb3NlcyhjaXJjbGUsIHAxKSkge1xyXG5cclxuICAgICAgICAvLyBUZW1wb3JhcmlseSB0cnVuY2F0ZSBMIGJlZm9yZSBsMS5cclxuICAgICAgICBpZiAobDApIEwudGFpbCA9IGwwLCBsMC5uZXh0ID0gbnVsbDtcclxuICAgICAgICBlbHNlIEwuaGVhZCA9IEwudGFpbCA9IG51bGw7XHJcblxyXG4gICAgICAgIEIucHVzaChwMSk7XHJcbiAgICAgICAgY2lyY2xlID0gZW5jbG9zZU4oTCwgQik7IC8vIE5vdGU6IHJlb3JkZXJzIEwhXHJcbiAgICAgICAgQi5wb3AoKTtcclxuXHJcbiAgICAgICAgLy8gTW92ZSBsMSB0byB0aGUgZnJvbnQgb2YgTCBhbmQgcmVjb25uZWN0IHRoZSB0cnVuY2F0ZWQgbGlzdCBMLlxyXG4gICAgICAgIGlmIChMLmhlYWQpIGwxLm5leHQgPSBMLmhlYWQsIEwuaGVhZCA9IGwxO1xyXG4gICAgICAgIGVsc2UgbDEubmV4dCA9IG51bGwsIEwuaGVhZCA9IEwudGFpbCA9IGwxO1xyXG4gICAgICAgIGwwID0gTC50YWlsLCBsMC5uZXh0ID0gbDI7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGwwID0gbDE7XHJcbiAgICAgIH1cclxuICAgICAgbDEgPSBsMjtcclxuICAgIH1cclxuXHJcbiAgICBMLnRhaWwgPSBsMDtcclxuICAgIHJldHVybiBjaXJjbGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbmNsb3NlMShhKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBhLngsXHJcbiAgICAgIHk6IGEueSxcclxuICAgICAgcjogYS5yXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW5jbG9zZTIoYSwgYikge1xyXG4gICAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXHJcbiAgICAgICAgeDIgPSBiLngsIHkyID0gYi55LCByMiA9IGIucixcclxuICAgICAgICB4MjEgPSB4MiAtIHgxLCB5MjEgPSB5MiAtIHkxLCByMjEgPSByMiAtIHIxLFxyXG4gICAgICAgIGwgPSBNYXRoLnNxcnQoeDIxICogeDIxICsgeTIxICogeTIxKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6ICh4MSArIHgyICsgeDIxIC8gbCAqIHIyMSkgLyAyLFxyXG4gICAgICB5OiAoeTEgKyB5MiArIHkyMSAvIGwgKiByMjEpIC8gMixcclxuICAgICAgcjogKGwgKyByMSArIHIyKSAvIDJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbmNsb3NlMyhhLCBiLCBjKSB7XHJcbiAgICB2YXIgeDEgPSBhLngsIHkxID0gYS55LCByMSA9IGEucixcclxuICAgICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxyXG4gICAgICAgIHgzID0gYy54LCB5MyA9IGMueSwgcjMgPSBjLnIsXHJcbiAgICAgICAgYTIgPSAyICogKHgxIC0geDIpLFxyXG4gICAgICAgIGIyID0gMiAqICh5MSAtIHkyKSxcclxuICAgICAgICBjMiA9IDIgKiAocjIgLSByMSksXHJcbiAgICAgICAgZDIgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEgLSB4MiAqIHgyIC0geTIgKiB5MiArIHIyICogcjIsXHJcbiAgICAgICAgYTMgPSAyICogKHgxIC0geDMpLFxyXG4gICAgICAgIGIzID0gMiAqICh5MSAtIHkzKSxcclxuICAgICAgICBjMyA9IDIgKiAocjMgLSByMSksXHJcbiAgICAgICAgZDMgPSB4MSAqIHgxICsgeTEgKiB5MSAtIHIxICogcjEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXHJcbiAgICAgICAgYWIgPSBhMyAqIGIyIC0gYTIgKiBiMyxcclxuICAgICAgICB4YSA9IChiMiAqIGQzIC0gYjMgKiBkMikgLyBhYiAtIHgxLFxyXG4gICAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxyXG4gICAgICAgIHlhID0gKGEzICogZDIgLSBhMiAqIGQzKSAvIGFiIC0geTEsXHJcbiAgICAgICAgeWIgPSAoYTIgKiBjMyAtIGEzICogYzIpIC8gYWIsXHJcbiAgICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcclxuICAgICAgICBCID0gMiAqICh4YSAqIHhiICsgeWEgKiB5YiArIHIxKSxcclxuICAgICAgICBDID0geGEgKiB4YSArIHlhICogeWEgLSByMSAqIHIxLFxyXG4gICAgICAgIHIgPSAoLUIgLSBNYXRoLnNxcnQoQiAqIEIgLSA0ICogQSAqIEMpKSAvICgyICogQSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiB4YSArIHhiICogciArIHgxLFxyXG4gICAgICB5OiB5YSArIHliICogciArIHkxLFxyXG4gICAgICByOiByXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGxhY2UoYSwgYiwgYykge1xyXG4gICAgdmFyIGF4ID0gYS54LFxyXG4gICAgICAgIGF5ID0gYS55LFxyXG4gICAgICAgIGRhID0gYi5yICsgYy5yLFxyXG4gICAgICAgIGRiID0gYS5yICsgYy5yLFxyXG4gICAgICAgIGR4ID0gYi54IC0gYXgsXHJcbiAgICAgICAgZHkgPSBiLnkgLSBheSxcclxuICAgICAgICBkYyA9IGR4ICogZHggKyBkeSAqIGR5O1xyXG4gICAgaWYgKGRjKSB7XHJcbiAgICAgIHZhciB4ID0gMC41ICsgKChkYiAqPSBkYikgLSAoZGEgKj0gZGEpKSAvICgyICogZGMpLFxyXG4gICAgICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCAyICogZGEgKiAoZGIgKyBkYykgLSAoZGIgLT0gZGMpICogZGIgLSBkYSAqIGRhKSkgLyAoMiAqIGRjKTtcclxuICAgICAgYy54ID0gYXggKyB4ICogZHggKyB5ICogZHk7XHJcbiAgICAgIGMueSA9IGF5ICsgeCAqIGR5IC0geSAqIGR4O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYy54ID0gYXggKyBkYjtcclxuICAgICAgYy55ID0gYXk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcclxuICAgIHZhciBkeCA9IGIueCAtIGEueCxcclxuICAgICAgICBkeSA9IGIueSAtIGEueSxcclxuICAgICAgICBkciA9IGEuciArIGIucjtcclxuICAgIHJldHVybiBkciAqIGRyID4gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkaXN0YW5jZTIoY2lyY2xlLCB4LCB5KSB7XHJcbiAgICB2YXIgZHggPSBjaXJjbGUueCAtIHgsXHJcbiAgICAgICAgZHkgPSBjaXJjbGUueSAtIHk7XHJcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBOb2RlJDEoY2lyY2xlKSB7XHJcbiAgICB0aGlzLl8gPSBjaXJjbGU7XHJcbiAgICB0aGlzLm5leHQgPSBudWxsO1xyXG4gICAgdGhpcy5wcmV2aW91cyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XHJcbiAgICBpZiAoIShuID0gY2lyY2xlcy5sZW5ndGgpKSByZXR1cm4gMDtcclxuXHJcbiAgICB2YXIgYSwgYiwgYywgbjtcclxuXHJcbiAgICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxyXG4gICAgYSA9IGNpcmNsZXNbMF0sIGEueCA9IDAsIGEueSA9IDA7XHJcbiAgICBpZiAoIShuID4gMSkpIHJldHVybiBhLnI7XHJcblxyXG4gICAgLy8gUGxhY2UgdGhlIHNlY29uZCBjaXJjbGUuXHJcbiAgICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xyXG4gICAgaWYgKCEobiA+IDIpKSByZXR1cm4gYS5yICsgYi5yO1xyXG5cclxuICAgIC8vIFBsYWNlIHRoZSB0aGlyZCBjaXJjbGUuXHJcbiAgICBwbGFjZShiLCBhLCBjID0gY2lyY2xlc1syXSk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgd2VpZ2h0ZWQgY2VudHJvaWQuXHJcbiAgICB2YXIgYWEgPSBhLnIgKiBhLnIsXHJcbiAgICAgICAgYmEgPSBiLnIgKiBiLnIsXHJcbiAgICAgICAgY2EgPSBjLnIgKiBjLnIsXHJcbiAgICAgICAgb2EgPSBhYSArIGJhICsgY2EsXHJcbiAgICAgICAgb3ggPSBhYSAqIGEueCArIGJhICogYi54ICsgY2EgKiBjLngsXHJcbiAgICAgICAgb3kgPSBhYSAqIGEueSArIGJhICogYi55ICsgY2EgKiBjLnksXHJcbiAgICAgICAgY3gsIGN5LCBpLCBqLCBrLCBzaiwgc2s7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgZnJvbnQtY2hhaW4gdXNpbmcgdGhlIGZpcnN0IHRocmVlIGNpcmNsZXMgYSwgYiBhbmQgYy5cclxuICAgIGEgPSBuZXcgTm9kZSQxKGEpLCBiID0gbmV3IE5vZGUkMShiKSwgYyA9IG5ldyBOb2RlJDEoYyk7XHJcbiAgICBhLm5leHQgPSBjLnByZXZpb3VzID0gYjtcclxuICAgIGIubmV4dCA9IGEucHJldmlvdXMgPSBjO1xyXG4gICAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XHJcblxyXG4gICAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcclxuICAgIHBhY2s6IGZvciAoaSA9IDM7IGkgPCBuOyArK2kpIHtcclxuICAgICAgcGxhY2UoYS5fLCBiLl8sIGMgPSBjaXJjbGVzW2ldKSwgYyA9IG5ldyBOb2RlJDEoYyk7XHJcblxyXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgb25seSB0aHJlZSBlbGVtZW50cyBpbiB0aGUgZnJvbnQtY2hhaW7igKZcclxuICAgICAgaWYgKChrID0gYS5wcmV2aW91cykgPT09IChqID0gYi5uZXh0KSkge1xyXG4gICAgICAgIC8vIElmIHRoZSBuZXcgY2lyY2xlIGludGVyc2VjdHMgdGhlIHRoaXJkIGNpcmNsZSxcclxuICAgICAgICAvLyByb3RhdGUgdGhlIGZyb250IGNoYWluIHRvIHRyeSB0aGUgbmV4dCBwb3NpdGlvbi5cclxuICAgICAgICBpZiAoaW50ZXJzZWN0cyhqLl8sIGMuXykpIHtcclxuICAgICAgICAgIGEgPSBiLCBiID0gaiwgLS1pO1xyXG4gICAgICAgICAgY29udGludWUgcGFjaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2ogPSBqLl8uciwgc2sgPSBrLl8ucjtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICBpZiAoc2ogPD0gc2spIHtcclxuICAgICAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XHJcbiAgICAgICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XHJcbiAgICAgICAgICAgICAgY29udGludWUgcGFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBqID0gai5uZXh0LCBzaiArPSBqLl8ucjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xyXG4gICAgICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgayA9IGsucHJldmlvdXMsIHNrICs9IGsuXy5yO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFN1Y2Nlc3MhIEluc2VydCB0aGUgbmV3IGNpcmNsZSBjIGJldHdlZW4gYSBhbmQgYi5cclxuICAgICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSB0aGUgd2VpZ2h0ZWQgY2VudHJvaWQuXHJcbiAgICAgIG9hICs9IGNhID0gYy5fLnIgKiBjLl8ucjtcclxuICAgICAgb3ggKz0gY2EgKiBjLl8ueDtcclxuICAgICAgb3kgKz0gY2EgKiBjLl8ueTtcclxuXHJcbiAgICAgIC8vIENvbXB1dGUgdGhlIG5ldyBjbG9zZXN0IGNpcmNsZSBhIHRvIGNlbnRyb2lkLlxyXG4gICAgICBhYSA9IGRpc3RhbmNlMihhLl8sIGN4ID0gb3ggLyBvYSwgY3kgPSBveSAvIG9hKTtcclxuICAgICAgd2hpbGUgKChjID0gYy5uZXh0KSAhPT0gYikge1xyXG4gICAgICAgIGlmICgoY2EgPSBkaXN0YW5jZTIoYy5fLCBjeCwgY3kpKSA8IGFhKSB7XHJcbiAgICAgICAgICBhID0gYywgYWEgPSBjYTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYiA9IGEubmV4dDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb21wdXRlIHRoZSBlbmNsb3NpbmcgY2lyY2xlIG9mIHRoZSBmcm9udCBjaGFpbi5cclxuICAgIGEgPSBbYi5fXSwgYyA9IGI7IHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIGEucHVzaChjLl8pOyBjID0gZW5jbG9zZShhKTtcclxuXHJcbiAgICAvLyBUcmFuc2xhdGUgdGhlIGNpcmNsZXMgdG8gcHV0IHRoZSBlbmNsb3NpbmcgY2lyY2xlIGFyb3VuZCB0aGUgb3JpZ2luLlxyXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XHJcblxyXG4gICAgcmV0dXJuIGMucjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNpYmxpbmdzKGNpcmNsZXMpIHtcclxuICAgIHBhY2tFbmNsb3NlKGNpcmNsZXMpO1xyXG4gICAgcmV0dXJuIGNpcmNsZXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvcHRpb25hbChmKSB7XHJcbiAgICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVxdWlyZWQoZikge1xyXG4gICAgaWYgKHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcclxuICAgIHJldHVybiBmO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uc3RhbnRaZXJvKCkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCQ1KHgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KGQudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5kZXgoKSB7XHJcbiAgICB2YXIgcmFkaXVzID0gbnVsbCxcclxuICAgICAgICBkeCA9IDEsXHJcbiAgICAgICAgZHkgPSAxLFxyXG4gICAgICAgIHBhZGRpbmcgPSBjb25zdGFudFplcm87XHJcblxyXG4gICAgZnVuY3Rpb24gcGFjayhyb290KSB7XHJcbiAgICAgIHJvb3QueCA9IGR4IC8gMiwgcm9vdC55ID0gZHkgLyAyO1xyXG4gICAgICBpZiAocmFkaXVzKSB7XHJcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKHJhZGl1c0xlYWYocmFkaXVzKSlcclxuICAgICAgICAgICAgLmVhY2hBZnRlcihwYWNrQ2hpbGRyZW4ocGFkZGluZywgMC41KSlcclxuICAgICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJvb3QuZWFjaEJlZm9yZShyYWRpdXNMZWFmKGRlZmF1bHRSYWRpdXMpKVxyXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxyXG4gICAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihwYWRkaW5nLCByb290LnIgLyBNYXRoLm1pbihkeCwgZHkpKSlcclxuICAgICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoTWF0aC5taW4oZHgsIGR5KSAvICgyICogcm9vdC5yKSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByb290O1xyXG4gICAgfVxyXG5cclxuICAgIHBhY2sucmFkaXVzID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHBhY2suc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFjaykgOiBbZHgsIGR5XTtcclxuICAgIH07XHJcblxyXG4gICAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcGFjaztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJhZGl1c0xlYWYocmFkaXVzKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICBpZiAoIW5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICBub2RlLnIgPSBNYXRoLm1heCgwLCArcmFkaXVzKG5vZGUpIHx8IDApO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFja0NoaWxkcmVuKHBhZGRpbmcsIGspIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgY2hpbGRyZW4sXHJcbiAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgIG4gPSBjaGlsZHJlbi5sZW5ndGgsXHJcbiAgICAgICAgICAgIHIgPSBwYWRkaW5nKG5vZGUpICogayB8fCAwLFxyXG4gICAgICAgICAgICBlO1xyXG5cclxuICAgICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xyXG4gICAgICAgIGUgPSBwYWNrRW5jbG9zZShjaGlsZHJlbik7XHJcbiAgICAgICAgaWYgKHIpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNoaWxkcmVuW2ldLnIgLT0gcjtcclxuICAgICAgICBub2RlLnIgPSBlICsgcjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudDtcclxuICAgICAgbm9kZS5yICo9IGs7XHJcbiAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBub2RlLnggPSBwYXJlbnQueCArIGsgKiBub2RlLng7XHJcbiAgICAgICAgbm9kZS55ID0gcGFyZW50LnkgKyBrICogbm9kZS55O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcm91bmROb2RlKG5vZGUpIHtcclxuICAgIG5vZGUueDAgPSBNYXRoLnJvdW5kKG5vZGUueDApO1xyXG4gICAgbm9kZS55MCA9IE1hdGgucm91bmQobm9kZS55MCk7XHJcbiAgICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcclxuICAgIG5vZGUueTEgPSBNYXRoLnJvdW5kKG5vZGUueTEpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gdHJlZW1hcERpY2UocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xyXG4gICAgdmFyIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxyXG4gICAgICAgIG5vZGUsXHJcbiAgICAgICAgaSA9IC0xLFxyXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXHJcbiAgICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XHJcblxyXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MTtcclxuICAgICAgbm9kZS54MCA9IHgwLCBub2RlLngxID0geDAgKz0gbm9kZS52YWx1ZSAqIGs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJ0aXRpb24oKSB7XHJcbiAgICB2YXIgZHggPSAxLFxyXG4gICAgICAgIGR5ID0gMSxcclxuICAgICAgICBwYWRkaW5nID0gMCxcclxuICAgICAgICByb3VuZCA9IGZhbHNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnRpdGlvbihyb290KSB7XHJcbiAgICAgIHZhciBuID0gcm9vdC5oZWlnaHQgKyAxO1xyXG4gICAgICByb290LngwID1cclxuICAgICAgcm9vdC55MCA9IHBhZGRpbmc7XHJcbiAgICAgIHJvb3QueDEgPSBkeDtcclxuICAgICAgcm9vdC55MSA9IGR5IC8gbjtcclxuICAgICAgcm9vdC5lYWNoQmVmb3JlKHBvc2l0aW9uTm9kZShkeSwgbikpO1xyXG4gICAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xyXG4gICAgICByZXR1cm4gcm9vdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUoZHksIG4pIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgdHJlZW1hcERpY2Uobm9kZSwgbm9kZS54MCwgZHkgKiAobm9kZS5kZXB0aCArIDEpIC8gbiwgbm9kZS54MSwgZHkgKiAobm9kZS5kZXB0aCArIDIpIC8gbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB4MCA9IG5vZGUueDAsXHJcbiAgICAgICAgICAgIHkwID0gbm9kZS55MCxcclxuICAgICAgICAgICAgeDEgPSBub2RlLngxIC0gcGFkZGluZyxcclxuICAgICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcclxuICAgICAgICBpZiAoeDEgPCB4MCkgeDAgPSB4MSA9ICh4MCArIHgxKSAvIDI7XHJcbiAgICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xyXG4gICAgICAgIG5vZGUueDAgPSB4MDtcclxuICAgICAgICBub2RlLnkwID0geTA7XHJcbiAgICAgICAgbm9kZS54MSA9IHgxO1xyXG4gICAgICAgIG5vZGUueTEgPSB5MTtcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwYXJ0aXRpb24ucm91bmQgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCBwYXJ0aXRpb24pIDogcm91bmQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHBhcnRpdGlvbi5zaXplID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBwYXJ0aXRpb24pIDogW2R4LCBkeV07XHJcbiAgICB9O1xyXG5cclxuICAgIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nID0gK3gsIHBhcnRpdGlvbikgOiBwYWRkaW5nO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcGFydGl0aW9uO1xyXG4gIH1cclxuXHJcbnZhciAgIGtleVByZWZpeCQxID0gXCIkXCI7XHJcbiAgdmFyIHByZXJvb3QgPSB7ZGVwdGg6IC0xfTtcclxuICB2YXIgYW1iaWd1b3VzID0ge307XHJcbiAgZnVuY3Rpb24gZGVmYXVsdElkKGQpIHtcclxuICAgIHJldHVybiBkLmlkO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdFBhcmVudElkKGQpIHtcclxuICAgIHJldHVybiBkLnBhcmVudElkO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3RyYXRpZnkoKSB7XHJcbiAgICB2YXIgaWQgPSBkZWZhdWx0SWQsXHJcbiAgICAgICAgcGFyZW50SWQgPSBkZWZhdWx0UGFyZW50SWQ7XHJcblxyXG4gICAgZnVuY3Rpb24gc3RyYXRpZnkoZGF0YSkge1xyXG4gICAgICB2YXIgZCxcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBuID0gZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICByb290LFxyXG4gICAgICAgICAgcGFyZW50LFxyXG4gICAgICAgICAgbm9kZSxcclxuICAgICAgICAgIG5vZGVzID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgICAgbm9kZUlkLFxyXG4gICAgICAgICAgbm9kZUtleSxcclxuICAgICAgICAgIG5vZGVCeUtleSA9IHt9O1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGQgPSBkYXRhW2ldLCBub2RlID0gbm9kZXNbaV0gPSBuZXcgTm9kZShkKTtcclxuICAgICAgICBpZiAoKG5vZGVJZCA9IGlkKGQsIGksIGRhdGEpKSAhPSBudWxsICYmIChub2RlSWQgKz0gXCJcIikpIHtcclxuICAgICAgICAgIG5vZGVLZXkgPSBrZXlQcmVmaXgkMSArIChub2RlLmlkID0gbm9kZUlkKTtcclxuICAgICAgICAgIG5vZGVCeUtleVtub2RlS2V5XSA9IG5vZGVLZXkgaW4gbm9kZUJ5S2V5ID8gYW1iaWd1b3VzIDogbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGVJZCA9IHBhcmVudElkKGRhdGFbaV0sIGksIGRhdGEpO1xyXG4gICAgICAgIGlmIChub2RlSWQgPT0gbnVsbCB8fCAhKG5vZGVJZCArPSBcIlwiKSkge1xyXG4gICAgICAgICAgaWYgKHJvb3QpIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIHJvb3RzXCIpO1xyXG4gICAgICAgICAgcm9vdCA9IG5vZGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBhcmVudCA9IG5vZGVCeUtleVtrZXlQcmVmaXgkMSArIG5vZGVJZF07XHJcbiAgICAgICAgICBpZiAoIXBhcmVudCkgdGhyb3cgbmV3IEVycm9yKFwibWlzc2luZzogXCIgKyBub2RlSWQpO1xyXG4gICAgICAgICAgaWYgKHBhcmVudCA9PT0gYW1iaWd1b3VzKSB0aHJvdyBuZXcgRXJyb3IoXCJhbWJpZ3VvdXM6IFwiICsgbm9kZUlkKTtcclxuICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGRyZW4pIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgZWxzZSBwYXJlbnQuY2hpbGRyZW4gPSBbbm9kZV07XHJcbiAgICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghcm9vdCkgdGhyb3cgbmV3IEVycm9yKFwibm8gcm9vdFwiKTtcclxuICAgICAgcm9vdC5wYXJlbnQgPSBwcmVyb290O1xyXG4gICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkgeyBub2RlLmRlcHRoID0gbm9kZS5wYXJlbnQuZGVwdGggKyAxOyAtLW47IH0pLmVhY2hCZWZvcmUoY29tcHV0ZUhlaWdodCk7XHJcbiAgICAgIHJvb3QucGFyZW50ID0gbnVsbDtcclxuICAgICAgaWYgKG4gPiAwKSB0aHJvdyBuZXcgRXJyb3IoXCJjeWNsZVwiKTtcclxuXHJcbiAgICAgIHJldHVybiByb290O1xyXG4gICAgfVxyXG5cclxuICAgIHN0cmF0aWZ5LmlkID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IHJlcXVpcmVkKHgpLCBzdHJhdGlmeSkgOiBpZDtcclxuICAgIH07XHJcblxyXG4gICAgc3RyYXRpZnkucGFyZW50SWQgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhcmVudElkID0gcmVxdWlyZWQoeCksIHN0cmF0aWZ5KSA6IHBhcmVudElkO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gc3RyYXRpZnk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbiQxKGEsIGIpIHtcclxuICAgIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcclxuICB9XHJcblxyXG4gIC8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xyXG4gIC8vICAgcmV0dXJuIChhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMikgLyBhLmRlcHRoO1xyXG4gIC8vIH1cclxuXHJcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYXZlcnNlIHRoZSBsZWZ0IGNvbnRvdXIgb2YgYSBzdWJ0cmVlIChvclxyXG4gIC8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcclxuICAvLyBlaXRoZXIgZ2l2ZW4gYnkgdGhlIGxlZnRtb3N0IGNoaWxkIG9mIHYgb3IgYnkgdGhlIHRocmVhZCBvZiB2LiBUaGUgZnVuY3Rpb25cclxuICAvLyByZXR1cm5zIG51bGwgaWYgYW5kIG9ubHkgaWYgdiBpcyBvbiB0aGUgaGlnaGVzdCBsZXZlbCBvZiBpdHMgc3VidHJlZS5cclxuICBmdW5jdGlvbiBuZXh0TGVmdCh2KSB7XHJcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bMF0gOiB2LnQ7XHJcbiAgfVxyXG5cclxuICAvLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxyXG4gIGZ1bmN0aW9uIG5leHRSaWdodCh2KSB7XHJcbiAgICB2YXIgY2hpbGRyZW4gPSB2LmNoaWxkcmVuO1xyXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XHJcbiAgfVxyXG5cclxuICAvLyBTaGlmdHMgdGhlIGN1cnJlbnQgc3VidHJlZSByb290ZWQgYXQgdysuIFRoaXMgaXMgZG9uZSBieSBpbmNyZWFzaW5nXHJcbiAgLy8gcHJlbGltKHcrKSBhbmQgbW9kKHcrKSBieSBzaGlmdC5cclxuICBmdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XHJcbiAgICB2YXIgY2hhbmdlID0gc2hpZnQgLyAod3AuaSAtIHdtLmkpO1xyXG4gICAgd3AuYyAtPSBjaGFuZ2U7XHJcbiAgICB3cC5zICs9IHNoaWZ0O1xyXG4gICAgd20uYyArPSBjaGFuZ2U7XHJcbiAgICB3cC56ICs9IHNoaWZ0O1xyXG4gICAgd3AubSArPSBzaGlmdDtcclxuICB9XHJcblxyXG4gIC8vIEFsbCBvdGhlciBzaGlmdHMsIGFwcGxpZWQgdG8gdGhlIHNtYWxsZXIgc3VidHJlZXMgYmV0d2VlbiB3LSBhbmQgdyssIGFyZVxyXG4gIC8vIHBlcmZvcm1lZCBieSB0aGlzIGZ1bmN0aW9uLiBUbyBwcmVwYXJlIHRoZSBzaGlmdHMsIHdlIGhhdmUgdG8gYWRqdXN0XHJcbiAgLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cclxuICBmdW5jdGlvbiBleGVjdXRlU2hpZnRzKHYpIHtcclxuICAgIHZhciBzaGlmdCA9IDAsXHJcbiAgICAgICAgY2hhbmdlID0gMCxcclxuICAgICAgICBjaGlsZHJlbiA9IHYuY2hpbGRyZW4sXHJcbiAgICAgICAgaSA9IGNoaWxkcmVuLmxlbmd0aCxcclxuICAgICAgICB3O1xyXG4gICAgd2hpbGUgKC0taSA+PSAwKSB7XHJcbiAgICAgIHcgPSBjaGlsZHJlbltpXTtcclxuICAgICAgdy56ICs9IHNoaWZ0O1xyXG4gICAgICB3Lm0gKz0gc2hpZnQ7XHJcbiAgICAgIHNoaWZ0ICs9IHcucyArIChjaGFuZ2UgKz0gdy5jKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIElmIHZpLeKAmXMgYW5jZXN0b3IgaXMgYSBzaWJsaW5nIG9mIHYsIHJldHVybnMgdmkt4oCZcyBhbmNlc3Rvci4gT3RoZXJ3aXNlLFxyXG4gIC8vIHJldHVybnMgdGhlIHNwZWNpZmllZCAoZGVmYXVsdCkgYW5jZXN0b3IuXHJcbiAgZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcclxuICAgIHJldHVybiB2aW0uYS5wYXJlbnQgPT09IHYucGFyZW50ID8gdmltLmEgOiBhbmNlc3RvcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFRyZWVOb2RlKG5vZGUsIGkpIHtcclxuICAgIHRoaXMuXyA9IG5vZGU7XHJcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICB0aGlzLmNoaWxkcmVuID0gbnVsbDtcclxuICAgIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcclxuICAgIHRoaXMuYSA9IHRoaXM7IC8vIGFuY2VzdG9yXHJcbiAgICB0aGlzLnogPSAwOyAvLyBwcmVsaW1cclxuICAgIHRoaXMubSA9IDA7IC8vIG1vZFxyXG4gICAgdGhpcy5jID0gMDsgLy8gY2hhbmdlXHJcbiAgICB0aGlzLnMgPSAwOyAvLyBzaGlmdFxyXG4gICAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXHJcbiAgICB0aGlzLmkgPSBpOyAvLyBudW1iZXJcclxuICB9XHJcblxyXG4gIFRyZWVOb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTm9kZS5wcm90b3R5cGUpO1xyXG5cclxuICBmdW5jdGlvbiB0cmVlUm9vdChyb290KSB7XHJcbiAgICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcclxuICAgICAgICBub2RlLFxyXG4gICAgICAgIG5vZGVzID0gW3RyZWVdLFxyXG4gICAgICAgIGNoaWxkLFxyXG4gICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgIGksXHJcbiAgICAgICAgbjtcclxuXHJcbiAgICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XHJcbiAgICAgIGlmIChjaGlsZHJlbiA9IG5vZGUuXy5jaGlsZHJlbikge1xyXG4gICAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobiA9IGNoaWxkcmVuLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICBub2Rlcy5wdXNoKGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXSA9IG5ldyBUcmVlTm9kZShjaGlsZHJlbltpXSwgaSkpO1xyXG4gICAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAodHJlZS5wYXJlbnQgPSBuZXcgVHJlZU5vZGUobnVsbCwgMCkpLmNoaWxkcmVuID0gW3RyZWVdO1xyXG4gICAgcmV0dXJuIHRyZWU7XHJcbiAgfVxyXG5cclxuICAvLyBOb2RlLWxpbmsgdHJlZSBkaWFncmFtIHVzaW5nIHRoZSBSZWluZ29sZC1UaWxmb3JkIFwidGlkeVwiIGFsZ29yaXRobVxyXG4gIGZ1bmN0aW9uIHRyZWUoKSB7XHJcbiAgICB2YXIgc2VwYXJhdGlvbiA9IGRlZmF1bHRTZXBhcmF0aW9uJDEsXHJcbiAgICAgICAgZHggPSAxLFxyXG4gICAgICAgIGR5ID0gMSxcclxuICAgICAgICBub2RlU2l6ZSA9IG51bGw7XHJcblxyXG4gICAgZnVuY3Rpb24gdHJlZShyb290KSB7XHJcbiAgICAgIHZhciB0ID0gdHJlZVJvb3Qocm9vdCk7XHJcblxyXG4gICAgICAvLyBDb21wdXRlIHRoZSBsYXlvdXQgdXNpbmcgQnVjaGhlaW0gZXQgYWwu4oCZcyBhbGdvcml0aG0uXHJcbiAgICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xyXG4gICAgICB0LmVhY2hCZWZvcmUoc2Vjb25kV2Fsayk7XHJcblxyXG4gICAgICAvLyBJZiBhIGZpeGVkIG5vZGUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkuXHJcbiAgICAgIGlmIChub2RlU2l6ZSkgcm9vdC5lYWNoQmVmb3JlKHNpemVOb2RlKTtcclxuXHJcbiAgICAgIC8vIElmIGEgZml4ZWQgdHJlZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeSBiYXNlZCBvbiB0aGUgZXh0ZW50LlxyXG4gICAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2YXIgbGVmdCA9IHJvb3QsXHJcbiAgICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcclxuICAgICAgICAgICAgYm90dG9tID0gcm9vdDtcclxuICAgICAgICByb290LmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XHJcbiAgICAgICAgICBpZiAobm9kZS54ID4gcmlnaHQueCkgcmlnaHQgPSBub2RlO1xyXG4gICAgICAgICAgaWYgKG5vZGUuZGVwdGggPiBib3R0b20uZGVwdGgpIGJvdHRvbSA9IG5vZGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHMgPSBsZWZ0ID09PSByaWdodCA/IDEgOiBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXHJcbiAgICAgICAgICAgIHR4ID0gcyAtIGxlZnQueCxcclxuICAgICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcclxuICAgICAgICAgICAga3kgPSBkeSAvIChib3R0b20uZGVwdGggfHwgMSk7XHJcbiAgICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcclxuICAgICAgICAgIG5vZGUueSA9IG5vZGUuZGVwdGggKiBreTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJvb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29tcHV0ZXMgYSBwcmVsaW1pbmFyeSB4LWNvb3JkaW5hdGUgZm9yIHYuIEJlZm9yZSB0aGF0LCBGSVJTVCBXQUxLIGlzXHJcbiAgICAvLyBhcHBsaWVkIHJlY3Vyc2l2ZWx5IHRvIHRoZSBjaGlsZHJlbiBvZiB2LCBhcyB3ZWxsIGFzIHRoZSBmdW5jdGlvblxyXG4gICAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXHJcbiAgICAvLyBub2RlIHYgaXMgcGxhY2VkIHRvIHRoZSBtaWRwb2ludCBvZiBpdHMgb3V0ZXJtb3N0IGNoaWxkcmVuLlxyXG4gICAgZnVuY3Rpb24gZmlyc3RXYWxrKHYpIHtcclxuICAgICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcclxuICAgICAgICAgIHNpYmxpbmdzID0gdi5wYXJlbnQuY2hpbGRyZW4sXHJcbiAgICAgICAgICB3ID0gdi5pID8gc2libGluZ3Nbdi5pIC0gMV0gOiBudWxsO1xyXG4gICAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICBleGVjdXRlU2hpZnRzKHYpO1xyXG4gICAgICAgIHZhciBtaWRwb2ludCA9IChjaGlsZHJlblswXS56ICsgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0ueikgLyAyO1xyXG4gICAgICAgIGlmICh3KSB7XHJcbiAgICAgICAgICB2LnogPSB3LnogKyBzZXBhcmF0aW9uKHYuXywgdy5fKTtcclxuICAgICAgICAgIHYubSA9IHYueiAtIG1pZHBvaW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2LnogPSBtaWRwb2ludDtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodykge1xyXG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xyXG4gICAgICB9XHJcbiAgICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ29tcHV0ZXMgYWxsIHJlYWwgeC1jb29yZGluYXRlcyBieSBzdW1taW5nIHVwIHRoZSBtb2RpZmllcnMgcmVjdXJzaXZlbHkuXHJcbiAgICBmdW5jdGlvbiBzZWNvbmRXYWxrKHYpIHtcclxuICAgICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xyXG4gICAgICB2Lm0gKz0gdi5wYXJlbnQubTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgY29yZSBvZiB0aGUgYWxnb3JpdGhtLiBIZXJlLCBhIG5ldyBzdWJ0cmVlIGlzIGNvbWJpbmVkIHdpdGggdGhlXHJcbiAgICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXHJcbiAgICAvLyBjb250b3VycyBvZiB0aGUgbGVmdCBhbmQgcmlnaHQgc3VidHJlZSB1cCB0byB0aGUgaGlnaGVzdCBjb21tb24gbGV2ZWwuIFRoZVxyXG4gICAgLy8gdmVydGljZXMgdXNlZCBmb3IgdGhlIHRyYXZlcnNhbHMgYXJlIHZpKywgdmktLCB2by0sIGFuZCB2byssIHdoZXJlIHRoZVxyXG4gICAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcclxuICAgIC8vIHN1YnRyZWUgYW5kICsgbWVhbnMgcmlnaHQgc3VidHJlZS4gRm9yIHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyBhbG9uZyB0aGVcclxuICAgIC8vIGNvbnRvdXIsIHdlIHVzZSByZXNwZWN0aXZlIHZhcmlhYmxlcyBzaSssIHNpLSwgc28tLCBhbmQgc28rLiBXaGVuZXZlciB0d29cclxuICAgIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxyXG4gICAgLy8gZ3JlYXRlc3QgdW5jb21tb24gYW5jZXN0b3JzIHVzaW5nIHRoZSBmdW5jdGlvbiBBTkNFU1RPUiBhbmQgY2FsbCBNT1ZFXHJcbiAgICAvLyBTVUJUUkVFIHRvIHNoaWZ0IHRoZSBzdWJ0cmVlIGFuZCBwcmVwYXJlIHRoZSBzaGlmdHMgb2Ygc21hbGxlciBzdWJ0cmVlcy5cclxuICAgIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXHJcbiAgICBmdW5jdGlvbiBhcHBvcnRpb24odiwgdywgYW5jZXN0b3IpIHtcclxuICAgICAgaWYgKHcpIHtcclxuICAgICAgICB2YXIgdmlwID0gdixcclxuICAgICAgICAgICAgdm9wID0gdixcclxuICAgICAgICAgICAgdmltID0gdyxcclxuICAgICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcclxuICAgICAgICAgICAgc2lwID0gdmlwLm0sXHJcbiAgICAgICAgICAgIHNvcCA9IHZvcC5tLFxyXG4gICAgICAgICAgICBzaW0gPSB2aW0ubSxcclxuICAgICAgICAgICAgc29tID0gdm9tLm0sXHJcbiAgICAgICAgICAgIHNoaWZ0O1xyXG4gICAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xyXG4gICAgICAgICAgdm9tID0gbmV4dExlZnQodm9tKTtcclxuICAgICAgICAgIHZvcCA9IG5leHRSaWdodCh2b3ApO1xyXG4gICAgICAgICAgdm9wLmEgPSB2O1xyXG4gICAgICAgICAgc2hpZnQgPSB2aW0ueiArIHNpbSAtIHZpcC56IC0gc2lwICsgc2VwYXJhdGlvbih2aW0uXywgdmlwLl8pO1xyXG4gICAgICAgICAgaWYgKHNoaWZ0ID4gMCkge1xyXG4gICAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcclxuICAgICAgICAgICAgc2lwICs9IHNoaWZ0O1xyXG4gICAgICAgICAgICBzb3AgKz0gc2hpZnQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzaW0gKz0gdmltLm07XHJcbiAgICAgICAgICBzaXAgKz0gdmlwLm07XHJcbiAgICAgICAgICBzb20gKz0gdm9tLm07XHJcbiAgICAgICAgICBzb3AgKz0gdm9wLm07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XHJcbiAgICAgICAgICB2b3AudCA9IHZpbTtcclxuICAgICAgICAgIHZvcC5tICs9IHNpbSAtIHNvcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZpcCAmJiAhbmV4dExlZnQodm9tKSkge1xyXG4gICAgICAgICAgdm9tLnQgPSB2aXA7XHJcbiAgICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XHJcbiAgICAgICAgICBhbmNlc3RvciA9IHY7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhbmNlc3RvcjtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaXplTm9kZShub2RlKSB7XHJcbiAgICAgIG5vZGUueCAqPSBkeDtcclxuICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGR5O1xyXG4gICAgfVxyXG5cclxuICAgIHRyZWUuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcclxuICAgIH07XHJcblxyXG4gICAgdHJlZS5zaXplID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG5vZGVTaXplID0gdHJ1ZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBbZHgsIGR5XSA6IG51bGwpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdHJlZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyZWVtYXBTbGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXHJcbiAgICAgICAgbm9kZSxcclxuICAgICAgICBpID0gLTEsXHJcbiAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcclxuICAgICAgICBrID0gcGFyZW50LnZhbHVlICYmICh5MSAtIHkwKSAvIHBhcmVudC52YWx1ZTtcclxuXHJcbiAgICB3aGlsZSAoKytpIDwgbikge1xyXG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xyXG4gICAgICBub2RlLnkwID0geTAsIG5vZGUueTEgPSB5MCArPSBub2RlLnZhbHVlICogaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBwaGkgPSAoMSArIE1hdGguc3FydCg1KSkgLyAyO1xyXG5cclxuICBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgcm93cyA9IFtdLFxyXG4gICAgICAgIG5vZGVzID0gcGFyZW50LmNoaWxkcmVuLFxyXG4gICAgICAgIHJvdyxcclxuICAgICAgICBub2RlVmFsdWUsXHJcbiAgICAgICAgaTAgPSAwLFxyXG4gICAgICAgIGkxLFxyXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXHJcbiAgICAgICAgZHgsIGR5LFxyXG4gICAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlLFxyXG4gICAgICAgIHN1bVZhbHVlLFxyXG4gICAgICAgIG1pblZhbHVlLFxyXG4gICAgICAgIG1heFZhbHVlLFxyXG4gICAgICAgIG5ld1JhdGlvLFxyXG4gICAgICAgIG1pblJhdGlvLFxyXG4gICAgICAgIGFscGhhLFxyXG4gICAgICAgIGJldGE7XHJcblxyXG4gICAgd2hpbGUgKGkwIDwgbikge1xyXG4gICAgICBkeCA9IHgxIC0geDAsIGR5ID0geTEgLSB5MDtcclxuICAgICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlID0gbm9kZXNbaTBdLnZhbHVlO1xyXG4gICAgICBhbHBoYSA9IE1hdGgubWF4KGR5IC8gZHgsIGR4IC8gZHkpIC8gKHZhbHVlICogcmF0aW8pO1xyXG4gICAgICBiZXRhID0gc3VtVmFsdWUgKiBzdW1WYWx1ZSAqIGFscGhhO1xyXG4gICAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcclxuXHJcbiAgICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxyXG4gICAgICBmb3IgKGkxID0gaTAgKyAxOyBpMSA8IG47ICsraTEpIHtcclxuICAgICAgICBzdW1WYWx1ZSArPSBub2RlVmFsdWUgPSBub2Rlc1tpMV0udmFsdWU7XHJcbiAgICAgICAgaWYgKG5vZGVWYWx1ZSA8IG1pblZhbHVlKSBtaW5WYWx1ZSA9IG5vZGVWYWx1ZTtcclxuICAgICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xyXG4gICAgICAgIGJldGEgPSBzdW1WYWx1ZSAqIHN1bVZhbHVlICogYWxwaGE7XHJcbiAgICAgICAgbmV3UmF0aW8gPSBNYXRoLm1heChtYXhWYWx1ZSAvIGJldGEsIGJldGEgLyBtaW5WYWx1ZSk7XHJcbiAgICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxyXG4gICAgICAgIG1pblJhdGlvID0gbmV3UmF0aW87XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFBvc2l0aW9uIGFuZCByZWNvcmQgdGhlIHJvdyBvcmllbnRhdGlvbi5cclxuICAgICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XHJcbiAgICAgIGlmIChyb3cuZGljZSkgdHJlZW1hcERpY2Uocm93LCB4MCwgeTAsIHgxLCB2YWx1ZSA/IHkwICs9IGR5ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHkxKTtcclxuICAgICAgZWxzZSB0cmVlbWFwU2xpY2Uocm93LCB4MCwgeTAsIHZhbHVlID8geDAgKz0gZHggKiBzdW1WYWx1ZSAvIHZhbHVlIDogeDEsIHkxKTtcclxuICAgICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJvd3M7XHJcbiAgfVxyXG5cclxuICB2YXIgc3F1YXJpZnkgPSAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xyXG4gICAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcclxuICAgIH1cclxuXHJcbiAgICBzcXVhcmlmeS5yYXRpbyA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBzcXVhcmlmeTtcclxuICB9KShwaGkpO1xyXG5cclxuICBmdW5jdGlvbiBpbmRleCQxKCkge1xyXG4gICAgdmFyIHRpbGUgPSBzcXVhcmlmeSxcclxuICAgICAgICByb3VuZCA9IGZhbHNlLFxyXG4gICAgICAgIGR4ID0gMSxcclxuICAgICAgICBkeSA9IDEsXHJcbiAgICAgICAgcGFkZGluZ1N0YWNrID0gWzBdLFxyXG4gICAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcclxuICAgICAgICBwYWRkaW5nVG9wID0gY29uc3RhbnRaZXJvLFxyXG4gICAgICAgIHBhZGRpbmdSaWdodCA9IGNvbnN0YW50WmVybyxcclxuICAgICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxyXG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gY29uc3RhbnRaZXJvO1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyZWVtYXAocm9vdCkge1xyXG4gICAgICByb290LngwID1cclxuICAgICAgcm9vdC55MCA9IDA7XHJcbiAgICAgIHJvb3QueDEgPSBkeDtcclxuICAgICAgcm9vdC55MSA9IGR5O1xyXG4gICAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcclxuICAgICAgcGFkZGluZ1N0YWNrID0gWzBdO1xyXG4gICAgICBpZiAocm91bmQpIHJvb3QuZWFjaEJlZm9yZShyb3VuZE5vZGUpO1xyXG4gICAgICByZXR1cm4gcm9vdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwb3NpdGlvbk5vZGUobm9kZSkge1xyXG4gICAgICB2YXIgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoXSxcclxuICAgICAgICAgIHgwID0gbm9kZS54MCArIHAsXHJcbiAgICAgICAgICB5MCA9IG5vZGUueTAgKyBwLFxyXG4gICAgICAgICAgeDEgPSBub2RlLngxIC0gcCxcclxuICAgICAgICAgIHkxID0gbm9kZS55MSAtIHA7XHJcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcclxuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xyXG4gICAgICBub2RlLngwID0geDA7XHJcbiAgICAgIG5vZGUueTAgPSB5MDtcclxuICAgICAgbm9kZS54MSA9IHgxO1xyXG4gICAgICBub2RlLnkxID0geTE7XHJcbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgcCA9IHBhZGRpbmdTdGFja1tub2RlLmRlcHRoICsgMV0gPSBwYWRkaW5nSW5uZXIobm9kZSkgLyAyO1xyXG4gICAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcclxuICAgICAgICB5MCArPSBwYWRkaW5nVG9wKG5vZGUpIC0gcDtcclxuICAgICAgICB4MSAtPSBwYWRkaW5nUmlnaHQobm9kZSkgLSBwO1xyXG4gICAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xyXG4gICAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcclxuICAgICAgICBpZiAoeTEgPCB5MCkgeTAgPSB5MSA9ICh5MCArIHkxKSAvIDI7XHJcbiAgICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0cmVlbWFwLnJvdW5kID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcclxuICAgIH07XHJcblxyXG4gICAgdHJlZW1hcC5zaXplID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlbWFwKSA6IFtkeCwgZHldO1xyXG4gICAgfTtcclxuXHJcbiAgICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpbGUgPSByZXF1aXJlZCh4KSwgdHJlZW1hcCkgOiB0aWxlO1xyXG4gICAgfTtcclxuXHJcbiAgICB0cmVlbWFwLnBhZGRpbmcgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgdHJlZW1hcC5wYWRkaW5nSW5uZXIgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdJbm5lciA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ0lubmVyO1xyXG4gICAgfTtcclxuXHJcbiAgICB0cmVlbWFwLnBhZGRpbmdPdXRlciA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcclxuICAgIH07XHJcblxyXG4gICAgdHJlZW1hcC5wYWRkaW5nVG9wID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nVG9wID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nVG9wO1xyXG4gICAgfTtcclxuXHJcbiAgICB0cmVlbWFwLnBhZGRpbmdSaWdodCA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1JpZ2h0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCQ1KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nUmlnaHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0JvdHRvbSA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQkNSgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcclxuICAgIH07XHJcblxyXG4gICAgdHJlZW1hcC5wYWRkaW5nTGVmdCA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0xlZnQgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50JDUoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdMZWZ0O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdHJlZW1hcDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJpbmFyeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgbm9kZXMgPSBwYXJlbnQuY2hpbGRyZW4sXHJcbiAgICAgICAgaSwgbiA9IG5vZGVzLmxlbmd0aCxcclxuICAgICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xyXG5cclxuICAgIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIHN1bXNbaSArIDFdID0gc3VtICs9IG5vZGVzW2ldLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcnRpdGlvbigwLCBuLCBwYXJlbnQudmFsdWUsIHgwLCB5MCwgeDEsIHkxKTtcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oaSwgaiwgdmFsdWUsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICAgIGlmIChpID49IGogLSAxKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICBub2RlLngwID0geDAsIG5vZGUueTAgPSB5MDtcclxuICAgICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciB2YWx1ZU9mZnNldCA9IHN1bXNbaV0sXHJcbiAgICAgICAgICB2YWx1ZVRhcmdldCA9ICh2YWx1ZSAvIDIpICsgdmFsdWVPZmZzZXQsXHJcbiAgICAgICAgICBrID0gaSArIDEsXHJcbiAgICAgICAgICBoaSA9IGogLSAxO1xyXG5cclxuICAgICAgd2hpbGUgKGsgPCBoaSkge1xyXG4gICAgICAgIHZhciBtaWQgPSBrICsgaGkgPj4+IDE7XHJcbiAgICAgICAgaWYgKHN1bXNbbWlkXSA8IHZhbHVlVGFyZ2V0KSBrID0gbWlkICsgMTtcclxuICAgICAgICBlbHNlIGhpID0gbWlkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxyXG4gICAgICAgICAgdmFsdWVSaWdodCA9IHZhbHVlIC0gdmFsdWVMZWZ0O1xyXG5cclxuICAgICAgaWYgKCh5MSAtIHkwKSA+ICh4MSAtIHgwKSkge1xyXG4gICAgICAgIHZhciB5ayA9ICh5MCAqIHZhbHVlUmlnaHQgKyB5MSAqIHZhbHVlTGVmdCkgLyB2YWx1ZTtcclxuICAgICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHgxLCB5ayk7XHJcbiAgICAgICAgcGFydGl0aW9uKGssIGosIHZhbHVlUmlnaHQsIHgwLCB5aywgeDEsIHkxKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgeGsgPSAoeDAgKiB2YWx1ZVJpZ2h0ICsgeDEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XHJcbiAgICAgICAgcGFydGl0aW9uKGksIGssIHZhbHVlTGVmdCwgeDAsIHkwLCB4aywgeTEpO1xyXG4gICAgICAgIHBhcnRpdGlvbihrLCBqLCB2YWx1ZVJpZ2h0LCB4aywgeTAsIHgxLCB5MSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNsaWNlRGljZShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICAocGFyZW50LmRlcHRoICYgMSA/IHRyZWVtYXBTbGljZSA6IHRyZWVtYXBEaWNlKShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcclxuICB9XHJcblxyXG4gIHZhciByZXNxdWFyaWZ5ID0gKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlc3F1YXJpZnkocGFyZW50LCB4MCwgeTAsIHgxLCB5MSkge1xyXG4gICAgICBpZiAoKHJvd3MgPSBwYXJlbnQuX3NxdWFyaWZ5KSAmJiAocm93cy5yYXRpbyA9PT0gcmF0aW8pKSB7XHJcbiAgICAgICAgdmFyIHJvd3MsXHJcbiAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgIGogPSAtMSxcclxuICAgICAgICAgICAgbixcclxuICAgICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxyXG4gICAgICAgICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZTtcclxuXHJcbiAgICAgICAgd2hpbGUgKCsraiA8IG0pIHtcclxuICAgICAgICAgIHJvdyA9IHJvd3Nbal0sIG5vZGVzID0gcm93LmNoaWxkcmVuO1xyXG4gICAgICAgICAgZm9yIChpID0gcm93LnZhbHVlID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkgcm93LnZhbHVlICs9IG5vZGVzW2ldLnZhbHVlO1xyXG4gICAgICAgICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHkwICs9ICh5MSAtIHkwKSAqIHJvdy52YWx1ZSAvIHZhbHVlKTtcclxuICAgICAgICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB4MCArPSAoeDEgLSB4MCkgKiByb3cudmFsdWUgLyB2YWx1ZSwgeTEpO1xyXG4gICAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xyXG4gICAgICAgIHJvd3MucmF0aW8gPSByYXRpbztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzcXVhcmlmeTtcclxuICB9KShwaGkpO1xyXG5cclxuICBmdW5jdGlvbiBjZW50ZXIkMSh4LCB5KSB7XHJcbiAgICB2YXIgbm9kZXM7XHJcblxyXG4gICAgaWYgKHggPT0gbnVsbCkgeCA9IDA7XHJcbiAgICBpZiAoeSA9PSBudWxsKSB5ID0gMDtcclxuXHJcbiAgICBmdW5jdGlvbiBmb3JjZSgpIHtcclxuICAgICAgdmFyIGksXHJcbiAgICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxyXG4gICAgICAgICAgbm9kZSxcclxuICAgICAgICAgIHN4ID0gMCxcclxuICAgICAgICAgIHN5ID0gMDtcclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBub2RlID0gbm9kZXNbaV0sIHN4ICs9IG5vZGUueCwgc3kgKz0gbm9kZS55O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS54IC09IHN4LCBub2RlLnkgLT0gc3k7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBub2RlcyA9IF87XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcclxuICAgIH07XHJcblxyXG4gICAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZm9yY2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCQ2KHgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gamlnZ2xlKCkge1xyXG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDFlLTY7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB4JDEoZCkge1xyXG4gICAgcmV0dXJuIGQueCArIGQudng7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB5JDEoZCkge1xyXG4gICAgcmV0dXJuIGQueSArIGQudnk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb2xsaWRlKHJhZGl1cykge1xyXG4gICAgdmFyIG5vZGVzLFxyXG4gICAgICAgIHJhZGlpLFxyXG4gICAgICAgIHN0cmVuZ3RoID0gMSxcclxuICAgICAgICBpdGVyYXRpb25zID0gMTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSByYWRpdXMgPSBjb25zdGFudCQ2KHJhZGl1cyA9PSBudWxsID8gMSA6ICtyYWRpdXMpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGZvcmNlKCkge1xyXG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCxcclxuICAgICAgICAgIHRyZWUsXHJcbiAgICAgICAgICBub2RlLFxyXG4gICAgICAgICAgeGksXHJcbiAgICAgICAgICB5aSxcclxuICAgICAgICAgIHJpLFxyXG4gICAgICAgICAgcmkyO1xyXG5cclxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcclxuICAgICAgICB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgkMSwgeSQxKS52aXNpdEFmdGVyKHByZXBhcmUpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgIHJpID0gcmFkaWlbaV0sIHJpMiA9IHJpICogcmk7XHJcbiAgICAgICAgICB4aSA9IG5vZGUueCArIG5vZGUudng7XHJcbiAgICAgICAgICB5aSA9IG5vZGUueSArIG5vZGUudnk7XHJcbiAgICAgICAgICB0cmVlLnZpc2l0KGFwcGx5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBxdWFkLmRhdGEsIHJqID0gcXVhZC5yLCByID0gcmkgKyByajtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgaWYgKGRhdGEuaW5kZXggPiBpKSB7XHJcbiAgICAgICAgICAgIHZhciB4ID0geGkgLSBkYXRhLnggLSBkYXRhLnZ4LFxyXG4gICAgICAgICAgICAgICAgeSA9IHlpIC0gZGF0YS55IC0gZGF0YS52eSxcclxuICAgICAgICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xyXG4gICAgICAgICAgICBpZiAobCA8IHIgKiByKSB7XHJcbiAgICAgICAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcclxuICAgICAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xyXG4gICAgICAgICAgICAgIGwgPSAociAtIChsID0gTWF0aC5zcXJ0KGwpKSkgLyBsICogc3RyZW5ndGg7XHJcbiAgICAgICAgICAgICAgbm9kZS52eCArPSAoeCAqPSBsKSAqIChyID0gKHJqICo9IHJqKSAvIChyaTIgKyByaikpO1xyXG4gICAgICAgICAgICAgIG5vZGUudnkgKz0gKHkgKj0gbCkgKiByO1xyXG4gICAgICAgICAgICAgIGRhdGEudnggLT0geCAqIChyID0gMSAtIHIpO1xyXG4gICAgICAgICAgICAgIGRhdGEudnkgLT0geSAqIHI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHgwID4geGkgKyByIHx8IHgxIDwgeGkgLSByIHx8IHkwID4geWkgKyByIHx8IHkxIDwgeWkgLSByO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJlcGFyZShxdWFkKSB7XHJcbiAgICAgIGlmIChxdWFkLmRhdGEpIHJldHVybiBxdWFkLnIgPSByYWRpaVtxdWFkLmRhdGEuaW5kZXhdO1xyXG4gICAgICBmb3IgKHZhciBpID0gcXVhZC5yID0gMDsgaSA8IDQ7ICsraSkge1xyXG4gICAgICAgIGlmIChxdWFkW2ldICYmIHF1YWRbaV0uciA+IHF1YWQucikge1xyXG4gICAgICAgICAgcXVhZC5yID0gcXVhZFtpXS5yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHZhciBpLCBuID0gKG5vZGVzID0gXykubGVuZ3RoOyByYWRpaSA9IG5ldyBBcnJheShuKTtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgcmFkaWlbaV0gPSArcmFkaXVzKG5vZGVzW2ldLCBpLCBub2Rlcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGl0ZXJhdGlvbnMgPSArXywgZm9yY2UpIDogaXRlcmF0aW9ucztcclxuICAgIH07XHJcblxyXG4gICAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xyXG4gICAgfTtcclxuXHJcbiAgICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGZvcmNlKSA6IHJhZGl1cztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGZvcmNlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5kZXgkMihkLCBpKSB7XHJcbiAgICByZXR1cm4gaTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpbmsobGlua3MpIHtcclxuICAgIHZhciBpZCA9IGluZGV4JDIsXHJcbiAgICAgICAgc3RyZW5ndGggPSBkZWZhdWx0U3RyZW5ndGgsXHJcbiAgICAgICAgc3RyZW5ndGhzLFxyXG4gICAgICAgIGRpc3RhbmNlID0gY29uc3RhbnQkNigzMCksXHJcbiAgICAgICAgZGlzdGFuY2VzLFxyXG4gICAgICAgIG5vZGVzLFxyXG4gICAgICAgIGNvdW50LFxyXG4gICAgICAgIGJpYXMsXHJcbiAgICAgICAgaXRlcmF0aW9ucyA9IDE7XHJcblxyXG4gICAgaWYgKGxpbmtzID09IG51bGwpIGxpbmtzID0gW107XHJcblxyXG4gICAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcclxuICAgICAgcmV0dXJuIDEgLyBNYXRoLm1pbihjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZm9yY2UoYWxwaGEpIHtcclxuICAgICAgZm9yICh2YXIgayA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGluaywgc291cmNlLCB0YXJnZXQsIHgsIHksIGwsIGI7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICAgIGxpbmsgPSBsaW5rc1tpXSwgc291cmNlID0gbGluay5zb3VyY2UsIHRhcmdldCA9IGxpbmsudGFyZ2V0O1xyXG4gICAgICAgICAgeCA9IHRhcmdldC54ICsgdGFyZ2V0LnZ4IC0gc291cmNlLnggLSBzb3VyY2UudnggfHwgamlnZ2xlKCk7XHJcbiAgICAgICAgICB5ID0gdGFyZ2V0LnkgKyB0YXJnZXQudnkgLSBzb3VyY2UueSAtIHNvdXJjZS52eSB8fCBqaWdnbGUoKTtcclxuICAgICAgICAgIGwgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XHJcbiAgICAgICAgICBsID0gKGwgLSBkaXN0YW5jZXNbaV0pIC8gbCAqIGFscGhhICogc3RyZW5ndGhzW2ldO1xyXG4gICAgICAgICAgeCAqPSBsLCB5ICo9IGw7XHJcbiAgICAgICAgICB0YXJnZXQudnggLT0geCAqIChiID0gYmlhc1tpXSk7XHJcbiAgICAgICAgICB0YXJnZXQudnkgLT0geSAqIGI7XHJcbiAgICAgICAgICBzb3VyY2UudnggKz0geCAqIChiID0gMSAtIGIpO1xyXG4gICAgICAgICAgc291cmNlLnZ5ICs9IHkgKiBiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcclxuXHJcbiAgICAgIHZhciBpLFxyXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcclxuICAgICAgICAgIG0gPSBsaW5rcy5sZW5ndGgsXHJcbiAgICAgICAgICBub2RlQnlJZCA9IG1hcCQxKG5vZGVzLCBpZCksXHJcbiAgICAgICAgICBsaW5rO1xyXG5cclxuICAgICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBjb3VudFtpXSA9IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtOyArK2kpIHtcclxuICAgICAgICBsaW5rID0gbGlua3NbaV0sIGxpbmsuaW5kZXggPSBpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGluay5zb3VyY2UgIT09IFwib2JqZWN0XCIpIGxpbmsuc291cmNlID0gbm9kZUJ5SWQuZ2V0KGxpbmsuc291cmNlKTtcclxuICAgICAgICBpZiAodHlwZW9mIGxpbmsudGFyZ2V0ICE9PSBcIm9iamVjdFwiKSBsaW5rLnRhcmdldCA9IG5vZGVCeUlkLmdldChsaW5rLnRhcmdldCk7XHJcbiAgICAgICAgKytjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0sICsrY291bnRbbGluay50YXJnZXQuaW5kZXhdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XHJcbiAgICAgICAgbGluayA9IGxpbmtzW2ldLCBiaWFzW2ldID0gY291bnRbbGluay5zb3VyY2UuaW5kZXhdIC8gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSArIGNvdW50W2xpbmsudGFyZ2V0LmluZGV4XSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZVN0cmVuZ3RoKCk7XHJcbiAgICAgIGRpc3RhbmNlcyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZVN0cmVuZ3RoKCkge1xyXG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZURpc3RhbmNlKCkge1xyXG4gICAgICBpZiAoIW5vZGVzKSByZXR1cm47XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGRpc3RhbmNlc1tpXSA9ICtkaXN0YW5jZShsaW5rc1tpXSwgaSwgbGlua3MpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgbm9kZXMgPSBfO1xyXG4gICAgICBpbml0aWFsaXplKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChsaW5rcyA9IF8sIGluaXRpYWxpemUoKSwgZm9yY2UpIDogbGlua3M7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLmlkID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xyXG4gICAgfTtcclxuXHJcbiAgICBmb3JjZS5pdGVyYXRpb25zID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpdGVyYXRpb25zID0gK18sIGZvcmNlKSA6IGl0ZXJhdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemVTdHJlbmd0aCgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcclxuICAgIH07XHJcblxyXG4gICAgZm9yY2UuZGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ2KCtfKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCksIGZvcmNlKSA6IGRpc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZm9yY2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB4JDIoZCkge1xyXG4gICAgcmV0dXJuIGQueDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHkkMihkKSB7XHJcbiAgICByZXR1cm4gZC55O1xyXG4gIH1cclxuXHJcbiAgdmFyIGluaXRpYWxSYWRpdXMgPSAxMDtcclxuICB2YXIgaW5pdGlhbEFuZ2xlID0gTWF0aC5QSSAqICgzIC0gTWF0aC5zcXJ0KDUpKTtcclxuICBmdW5jdGlvbiBzaW11bGF0aW9uKG5vZGVzKSB7XHJcbiAgICB2YXIgc2ltdWxhdGlvbixcclxuICAgICAgICBhbHBoYSA9IDEsXHJcbiAgICAgICAgYWxwaGFNaW4gPSAwLjAwMSxcclxuICAgICAgICBhbHBoYURlY2F5ID0gMSAtIE1hdGgucG93KGFscGhhTWluLCAxIC8gMzAwKSxcclxuICAgICAgICBhbHBoYVRhcmdldCA9IDAsXHJcbiAgICAgICAgdmVsb2NpdHlEZWNheSA9IDAuNixcclxuICAgICAgICBmb3JjZXMgPSBtYXAkMSgpLFxyXG4gICAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcclxuICAgICAgICBldmVudCA9IGRpc3BhdGNoKFwidGlja1wiLCBcImVuZFwiKTtcclxuXHJcbiAgICBpZiAobm9kZXMgPT0gbnVsbCkgbm9kZXMgPSBbXTtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGVwKCkge1xyXG4gICAgICB0aWNrKCk7XHJcbiAgICAgIGV2ZW50LmNhbGwoXCJ0aWNrXCIsIHNpbXVsYXRpb24pO1xyXG4gICAgICBpZiAoYWxwaGEgPCBhbHBoYU1pbikge1xyXG4gICAgICAgIHN0ZXBwZXIuc3RvcCgpO1xyXG4gICAgICAgIGV2ZW50LmNhbGwoXCJlbmRcIiwgc2ltdWxhdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0aWNrKCkge1xyXG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgbm9kZTtcclxuXHJcbiAgICAgIGFscGhhICs9IChhbHBoYVRhcmdldCAtIGFscGhhKSAqIGFscGhhRGVjYXk7XHJcblxyXG4gICAgICBmb3JjZXMuZWFjaChmdW5jdGlvbihmb3JjZSkge1xyXG4gICAgICAgIGZvcmNlKGFscGhhKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xyXG4gICAgICAgIGlmIChub2RlLmZ4ID09IG51bGwpIG5vZGUueCArPSBub2RlLnZ4ICo9IHZlbG9jaXR5RGVjYXk7XHJcbiAgICAgICAgZWxzZSBub2RlLnggPSBub2RlLmZ4LCBub2RlLnZ4ID0gMDtcclxuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xyXG4gICAgICAgIGVsc2Ugbm9kZS55ID0gbm9kZS5meSwgbm9kZS52eSA9IDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplTm9kZXMoKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLmluZGV4ID0gaTtcclxuICAgICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XHJcbiAgICAgICAgICB2YXIgcmFkaXVzID0gaW5pdGlhbFJhZGl1cyAqIE1hdGguc3FydChpKSwgYW5nbGUgPSBpICogaW5pdGlhbEFuZ2xlO1xyXG4gICAgICAgICAgbm9kZS54ID0gcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpO1xyXG4gICAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNOYU4obm9kZS52eCkgfHwgaXNOYU4obm9kZS52eSkpIHtcclxuICAgICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRm9yY2UoZm9yY2UpIHtcclxuICAgICAgaWYgKGZvcmNlLmluaXRpYWxpemUpIGZvcmNlLmluaXRpYWxpemUobm9kZXMpO1xyXG4gICAgICByZXR1cm4gZm9yY2U7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdGlhbGl6ZU5vZGVzKCk7XHJcblxyXG4gICAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XHJcbiAgICAgIHRpY2s6IHRpY2ssXHJcblxyXG4gICAgICByZXN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3RlcHBlci5yZXN0YXJ0KHN0ZXApLCBzaW11bGF0aW9uO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ZXBwZXIuc3RvcCgpLCBzaW11bGF0aW9uO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgbm9kZXM6IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlcyA9IF8sIGluaXRpYWxpemVOb2RlcygpLCBmb3JjZXMuZWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IG5vZGVzO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYWxwaGE6IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYSA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChhbHBoYU1pbiA9ICtfLCBzaW11bGF0aW9uKSA6IGFscGhhTWluO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYWxwaGFEZWNheTogZnVuY3Rpb24oXykge1xyXG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhRGVjYXkgPSArXywgc2ltdWxhdGlvbikgOiArYWxwaGFEZWNheTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGFscGhhVGFyZ2V0OiBmdW5jdGlvbihfKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGFUYXJnZXQgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYVRhcmdldDtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2ZWxvY2l0eURlY2F5ID0gMSAtIF8sIHNpbXVsYXRpb24pIDogMSAtIHZlbG9jaXR5RGVjYXk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBmb3JjZTogZnVuY3Rpb24obmFtZSwgXykge1xyXG4gICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/ICgoXyA9PSBudWxsID8gZm9yY2VzLnJlbW92ZShuYW1lKSA6IGZvcmNlcy5zZXQobmFtZSwgaW5pdGlhbGl6ZUZvcmNlKF8pKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGZpbmQ6IGZ1bmN0aW9uKHgsIHksIHJhZGl1cykge1xyXG4gICAgICAgIHZhciBpID0gMCxcclxuICAgICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcclxuICAgICAgICAgICAgZHgsXHJcbiAgICAgICAgICAgIGR5LFxyXG4gICAgICAgICAgICBkMixcclxuICAgICAgICAgICAgbm9kZSxcclxuICAgICAgICAgICAgY2xvc2VzdDtcclxuXHJcbiAgICAgICAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcclxuICAgICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgIGR4ID0geCAtIG5vZGUueDtcclxuICAgICAgICAgIGR5ID0geSAtIG5vZGUueTtcclxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICAgICAgICBpZiAoZDIgPCByYWRpdXMpIGNsb3Nlc3QgPSBub2RlLCByYWRpdXMgPSBkMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjbG9zZXN0O1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgb246IGZ1bmN0aW9uKG5hbWUsIF8pIHtcclxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAoZXZlbnQub24obmFtZSwgXyksIHNpbXVsYXRpb24pIDogZXZlbnQub24obmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBtYW55Qm9keSgpIHtcclxuICAgIHZhciBub2RlcyxcclxuICAgICAgICBub2RlLFxyXG4gICAgICAgIGFscGhhLFxyXG4gICAgICAgIHN0cmVuZ3RoID0gY29uc3RhbnQkNigtMzApLFxyXG4gICAgICAgIHN0cmVuZ3RocyxcclxuICAgICAgICBkaXN0YW5jZU1pbjIgPSAxLFxyXG4gICAgICAgIGRpc3RhbmNlTWF4MiA9IEluZmluaXR5LFxyXG4gICAgICAgIHRoZXRhMiA9IDAuODE7XHJcblxyXG4gICAgZnVuY3Rpb24gZm9yY2UoXykge1xyXG4gICAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4JDIsIHkkMikudmlzaXRBZnRlcihhY2N1bXVsYXRlKTtcclxuICAgICAgZm9yIChhbHBoYSA9IF8sIGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHRyZWUudmlzaXQoYXBwbHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcclxuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XHJcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc3RyZW5ndGhzW2ldID0gK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZShxdWFkKSB7XHJcbiAgICAgIHZhciBzdHJlbmd0aCA9IDAsIHEsIGMsIHgsIHksIGk7XHJcblxyXG4gICAgICAvLyBGb3IgaW50ZXJuYWwgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY2hpbGQgcXVhZHJhbnRzLlxyXG4gICAgICBpZiAocXVhZC5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKHggPSB5ID0gaSA9IDA7IGkgPCA0OyArK2kpIHtcclxuICAgICAgICAgIGlmICgocSA9IHF1YWRbaV0pICYmIChjID0gcS52YWx1ZSkpIHtcclxuICAgICAgICAgICAgc3RyZW5ndGggKz0gYywgeCArPSBjICogcS54LCB5ICs9IGMgKiBxLnk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1YWQueCA9IHggLyBzdHJlbmd0aDtcclxuICAgICAgICBxdWFkLnkgPSB5IC8gc3RyZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZvciBsZWFmIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNvaW5jaWRlbnQgcXVhZHJhbnRzLlxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBxID0gcXVhZDtcclxuICAgICAgICBxLnggPSBxLmRhdGEueDtcclxuICAgICAgICBxLnkgPSBxLmRhdGEueTtcclxuICAgICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcclxuICAgICAgICB3aGlsZSAocSA9IHEubmV4dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHF1YWQudmFsdWUgPSBzdHJlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcclxuICAgICAgaWYgKCFxdWFkLnZhbHVlKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgIHZhciB4ID0gcXVhZC54IC0gbm9kZS54LFxyXG4gICAgICAgICAgeSA9IHF1YWQueSAtIG5vZGUueSxcclxuICAgICAgICAgIHcgPSB4MiAtIHgxLFxyXG4gICAgICAgICAgbCA9IHggKiB4ICsgeSAqIHk7XHJcblxyXG4gICAgICAvLyBBcHBseSB0aGUgQmFybmVzLUh1dCBhcHByb3hpbWF0aW9uIGlmIHBvc3NpYmxlLlxyXG4gICAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cclxuICAgICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xyXG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNYXgyKSB7XHJcbiAgICAgICAgICBpZiAoeCA9PT0gMCkgeCA9IGppZ2dsZSgpLCBsICs9IHggKiB4O1xyXG4gICAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcclxuICAgICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xyXG4gICAgICAgICAgbm9kZS52eCArPSB4ICogcXVhZC52YWx1ZSAqIGFscGhhIC8gbDtcclxuICAgICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxyXG4gICAgICBlbHNlIGlmIChxdWFkLmxlbmd0aCB8fCBsID49IGRpc3RhbmNlTWF4MikgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXHJcbiAgICAgIGlmIChxdWFkLmRhdGEgIT09IG5vZGUgfHwgcXVhZC5uZXh0KSB7XHJcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcclxuICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xyXG4gICAgICAgIGlmIChsIDwgZGlzdGFuY2VNaW4yKSBsID0gTWF0aC5zcXJ0KGRpc3RhbmNlTWluMiAqIGwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XHJcbiAgICAgICAgdyA9IHN0cmVuZ3Roc1txdWFkLmRhdGEuaW5kZXhdICogYWxwaGEgLyBsO1xyXG4gICAgICAgIG5vZGUudnggKz0geCAqIHc7XHJcbiAgICAgICAgbm9kZS52eSArPSB5ICogdztcclxuICAgICAgfSB3aGlsZSAocXVhZCA9IHF1YWQubmV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgbm9kZXMgPSBfO1xyXG4gICAgICBpbml0aWFsaXplKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1pbjIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWluMik7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLmRpc3RhbmNlTWF4ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnRoZXRhID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGV0YTIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KHRoZXRhMik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBmb3JjZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHgkMyh4KSB7XHJcbiAgICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCQ2KDAuMSksXHJcbiAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgc3RyZW5ndGhzLFxyXG4gICAgICAgIHh6O1xyXG5cclxuICAgIGlmICh0eXBlb2YgeCAhPT0gXCJmdW5jdGlvblwiKSB4ID0gY29uc3RhbnQkNih4ID09IG51bGwgPyAwIDogK3gpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ4ICs9ICh4eltpXSAtIG5vZGUueCkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcclxuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XHJcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcclxuICAgICAgeHogPSBuZXcgQXJyYXkobik7XHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgbm9kZXMgPSBfO1xyXG4gICAgICBpbml0aWFsaXplKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHg7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBmb3JjZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHkkMyh5KSB7XHJcbiAgICB2YXIgc3RyZW5ndGggPSBjb25zdGFudCQ2KDAuMSksXHJcbiAgICAgICAgbm9kZXMsXHJcbiAgICAgICAgc3RyZW5ndGhzLFxyXG4gICAgICAgIHl6O1xyXG5cclxuICAgIGlmICh0eXBlb2YgeSAhPT0gXCJmdW5jdGlvblwiKSB5ID0gY29uc3RhbnQkNih5ID09IG51bGwgPyAwIDogK3kpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnZ5ICs9ICh5eltpXSAtIG5vZGUueSkgKiBzdHJlbmd0aHNbaV0gKiBhbHBoYTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XHJcbiAgICAgIGlmICghbm9kZXMpIHJldHVybjtcclxuICAgICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XHJcbiAgICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcclxuICAgICAgeXogPSBuZXcgQXJyYXkobik7XHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih5eltpXSA9ICt5KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgbm9kZXMgPSBfO1xyXG4gICAgICBpbml0aWFsaXplKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNigrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDYoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBmb3JjZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24oKSB7XHJcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9ldmVudCgpIHtcclxuICAgIGV4cG9ydHMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmFnRGlzYWJsZSh2aWV3KSB7XHJcbiAgICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxyXG4gICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdCh2aWV3KS5vbihcImRyYWdzdGFydC5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xyXG4gICAgaWYgKFwib25zZWxlY3RzdGFydFwiIGluIHJvb3QpIHtcclxuICAgICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJvb3QuX19ub3NlbGVjdCA9IHJvb3Quc3R5bGUuTW96VXNlclNlbGVjdDtcclxuICAgICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmFnRW5hYmxlKHZpZXcsIG5vY2xpY2spIHtcclxuICAgIHZhciByb290ID0gdmlldy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XHJcbiAgICBpZiAobm9jbGljaykge1xyXG4gICAgICBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG5vZXZlbnQsIHRydWUpO1xyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcclxuICAgIH1cclxuICAgIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XHJcbiAgICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByb290LnN0eWxlLk1velVzZXJTZWxlY3QgPSByb290Ll9fbm9zZWxlY3Q7XHJcbiAgICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCQ3KHgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRHJhZ0V2ZW50KHRhcmdldCwgdHlwZSwgc3ViamVjdCwgaWQsIGFjdGl2ZSwgeCwgeSwgZHgsIGR5LCBkaXNwYXRjaCkge1xyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcclxuICAgIHRoaXMuaWRlbnRpZmllciA9IGlkO1xyXG4gICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICAgIHRoaXMuZHggPSBkeDtcclxuICAgIHRoaXMuZHkgPSBkeTtcclxuICAgIHRoaXMuXyA9IGRpc3BhdGNoO1xyXG4gIH1cclxuXHJcbiAgRHJhZ0V2ZW50LnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcclxuICAgIHJldHVybiB2YWx1ZSA9PT0gdGhpcy5fID8gdGhpcyA6IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gIC8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XHJcbiAgICByZXR1cm4gIWV4cG9ydHMuZXZlbnQuYnV0dG9uO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdENvbnRhaW5lcigpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0U3ViamVjdChkKSB7XHJcbiAgICByZXR1cm4gZCA9PSBudWxsID8ge3g6IGV4cG9ydHMuZXZlbnQueCwgeTogZXhwb3J0cy5ldmVudC55fSA6IGQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkcmFnKCkge1xyXG4gICAgdmFyIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXHJcbiAgICAgICAgY29udGFpbmVyID0gZGVmYXVsdENvbnRhaW5lcixcclxuICAgICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXHJcbiAgICAgICAgZ2VzdHVyZXMgPSB7fSxcclxuICAgICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiZHJhZ1wiLCBcImVuZFwiKSxcclxuICAgICAgICBhY3RpdmUgPSAwLFxyXG4gICAgICAgIG1vdXNlbW92aW5nLFxyXG4gICAgICAgIHRvdWNoZW5kaW5nO1xyXG5cclxuICAgIGZ1bmN0aW9uIGRyYWcoc2VsZWN0aW9uKSB7XHJcbiAgICAgIHNlbGVjdGlvblxyXG4gICAgICAgICAgLm9uKFwibW91c2Vkb3duLmRyYWdcIiwgbW91c2Vkb3duZWQpXHJcbiAgICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxyXG4gICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmRyYWdcIiwgdG91Y2htb3ZlZClcclxuICAgICAgICAgIC5vbihcInRvdWNoZW5kLmRyYWcgdG91Y2hjYW5jZWwuZHJhZ1wiLCB0b3VjaGVuZGVkKVxyXG4gICAgICAgICAgLnN0eWxlKFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCIsIFwicmdiYSgwLDAsMCwwKVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb3VzZWRvd25lZCgpIHtcclxuICAgICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xyXG4gICAgICB2YXIgZ2VzdHVyZSA9IGJlZm9yZXN0YXJ0KFwibW91c2VcIiwgY29udGFpbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIG1vdXNlLCB0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICBpZiAoIWdlc3R1cmUpIHJldHVybjtcclxuICAgICAgc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuZHJhZ1wiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuZHJhZ1wiLCBtb3VzZXVwcGVkLCB0cnVlKTtcclxuICAgICAgZHJhZ0Rpc2FibGUoZXhwb3J0cy5ldmVudC52aWV3KTtcclxuICAgICAgbm9wcm9wYWdhdGlvbigpO1xyXG4gICAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xyXG4gICAgICBnZXN0dXJlKFwic3RhcnRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcclxuICAgICAgbm9ldmVudCgpO1xyXG4gICAgICBtb3VzZW1vdmluZyA9IHRydWU7XHJcbiAgICAgIGdlc3R1cmVzLm1vdXNlKFwiZHJhZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xyXG4gICAgICBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcclxuICAgICAgZHJhZ0VuYWJsZShleHBvcnRzLmV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcclxuICAgICAgbm9ldmVudCgpO1xyXG4gICAgICBnZXN0dXJlcy5tb3VzZShcImVuZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XHJcbiAgICAgIGlmICghZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcclxuICAgICAgdmFyIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxyXG4gICAgICAgICAgYyA9IGNvbnRhaW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxyXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChnZXN0dXJlID0gYmVmb3Jlc3RhcnQodG91Y2hlc1tpXS5pZGVudGlmaWVyLCBjLCB0b3VjaCwgdGhpcywgYXJndW1lbnRzKSkge1xyXG4gICAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XHJcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcclxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcclxuICAgICAgICAgIG5vZXZlbnQoKTtcclxuICAgICAgICAgIGdlc3R1cmUoXCJkcmFnXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvdWNoZW5kZWQoKSB7XHJcbiAgICAgIHZhciB0b3VjaGVzID0gZXhwb3J0cy5ldmVudC5jaGFuZ2VkVG91Y2hlcyxcclxuICAgICAgICAgIG4gPSB0b3VjaGVzLmxlbmd0aCwgaSwgZ2VzdHVyZTtcclxuXHJcbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcclxuICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmIChnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xyXG4gICAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZ2VzdHVyZShcImVuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBiZWZvcmVzdGFydChpZCwgY29udGFpbmVyLCBwb2ludCwgdGhhdCwgYXJncykge1xyXG4gICAgICB2YXIgcCA9IHBvaW50KGNvbnRhaW5lciwgaWQpLCBzLCBkeCwgZHksXHJcbiAgICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xyXG5cclxuICAgICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKChleHBvcnRzLmV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGR4ID0gcy54IC0gcFswXSB8fCAwO1xyXG4gICAgICAgIGR5ID0gcy55IC0gcFsxXSB8fCAwO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KSkgcmV0dXJuO1xyXG5cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdlc3R1cmUodHlwZSkge1xyXG4gICAgICAgIHZhciBwMCA9IHAsIG47XHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICBjYXNlIFwic3RhcnRcIjogZ2VzdHVyZXNbaWRdID0gZ2VzdHVyZSwgbiA9IGFjdGl2ZSsrOyBicmVhaztcclxuICAgICAgICAgIGNhc2UgXCJlbmRcIjogZGVsZXRlIGdlc3R1cmVzW2lkXSwgLS1hY3RpdmU7IC8vIG5vYnJlYWtcclxuICAgICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1c3RvbUV2ZW50KG5ldyBEcmFnRXZlbnQoZHJhZywgdHlwZSwgcywgaWQsIG4sIHBbMF0gKyBkeCwgcFsxXSArIGR5LCBwWzBdIC0gcDBbMF0sIHBbMV0gLSBwMFsxXSwgc3VibGlzdGVuZXJzKSwgc3VibGlzdGVuZXJzLmFwcGx5LCBzdWJsaXN0ZW5lcnMsIFt0eXBlLCB0aGF0LCBhcmdzXSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZHJhZy5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyghIV8pLCBkcmFnKSA6IGZpbHRlcjtcclxuICAgIH07XHJcblxyXG4gICAgZHJhZy5jb250YWluZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyhfKSwgZHJhZykgOiBjb250YWluZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3ViamVjdCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkNyhfKSwgZHJhZykgOiBzdWJqZWN0O1xyXG4gICAgfTtcclxuXHJcbiAgICBkcmFnLm9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gZHJhZyA6IHZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gZHJhZztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDgoeCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB4JDQoZCkge1xyXG4gICAgcmV0dXJuIGRbMF07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB5JDQoZCkge1xyXG4gICAgcmV0dXJuIGRbMV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBSZWRCbGFja1RyZWUoKSB7XHJcbiAgICB0aGlzLl8gPSBudWxsOyAvLyByb290IG5vZGVcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIFJlZEJsYWNrTm9kZShub2RlKSB7XHJcbiAgICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxyXG4gICAgbm9kZS5DID0gLy8gY29sb3IgLSB0cnVlIGZvciByZWQsIGZhbHNlIGZvciBibGFja1xyXG4gICAgbm9kZS5MID0gLy8gbGVmdCBub2RlXHJcbiAgICBub2RlLlIgPSAvLyByaWdodCBub2RlXHJcbiAgICBub2RlLlAgPSAvLyBwcmV2aW91cyBub2RlXHJcbiAgICBub2RlLk4gPSBudWxsOyAvLyBuZXh0IG5vZGVcclxuICB9XHJcblxyXG4gIFJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogUmVkQmxhY2tUcmVlLFxyXG5cclxuICAgIGluc2VydDogZnVuY3Rpb24oYWZ0ZXIsIG5vZGUpIHtcclxuICAgICAgdmFyIHBhcmVudCwgZ3JhbmRwYSwgdW5jbGU7XHJcblxyXG4gICAgICBpZiAoYWZ0ZXIpIHtcclxuICAgICAgICBub2RlLlAgPSBhZnRlcjtcclxuICAgICAgICBub2RlLk4gPSBhZnRlci5OO1xyXG4gICAgICAgIGlmIChhZnRlci5OKSBhZnRlci5OLlAgPSBub2RlO1xyXG4gICAgICAgIGFmdGVyLk4gPSBub2RlO1xyXG4gICAgICAgIGlmIChhZnRlci5SKSB7XHJcbiAgICAgICAgICBhZnRlciA9IGFmdGVyLlI7XHJcbiAgICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xyXG4gICAgICAgICAgYWZ0ZXIuTCA9IG5vZGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGFmdGVyLlIgPSBub2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnQgPSBhZnRlcjtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcclxuICAgICAgICBhZnRlciA9IFJlZEJsYWNrRmlyc3QodGhpcy5fKTtcclxuICAgICAgICBub2RlLlAgPSBudWxsO1xyXG4gICAgICAgIG5vZGUuTiA9IGFmdGVyO1xyXG4gICAgICAgIGFmdGVyLlAgPSBhZnRlci5MID0gbm9kZTtcclxuICAgICAgICBwYXJlbnQgPSBhZnRlcjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBub2RlLlAgPSBub2RlLk4gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuXyA9IG5vZGU7XHJcbiAgICAgICAgcGFyZW50ID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBub2RlLkwgPSBub2RlLlIgPSBudWxsO1xyXG4gICAgICBub2RlLlUgPSBwYXJlbnQ7XHJcbiAgICAgIG5vZGUuQyA9IHRydWU7XHJcblxyXG4gICAgICBhZnRlciA9IG5vZGU7XHJcbiAgICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LkMpIHtcclxuICAgICAgICBncmFuZHBhID0gcGFyZW50LlU7XHJcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gZ3JhbmRwYS5MKSB7XHJcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuUjtcclxuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xyXG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5SKSB7XHJcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XHJcbiAgICAgICAgICAgICAgYWZ0ZXIgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgcGFyZW50ID0gYWZ0ZXIuVTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJlbnQuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xyXG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcclxuICAgICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5DID0gdW5jbGUuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xyXG4gICAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XHJcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgIGFmdGVyID0gcGFyZW50O1xyXG4gICAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyZW50LkMgPSBmYWxzZTtcclxuICAgICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcclxuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIGdyYW5kcGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnQgPSBhZnRlci5VO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuXy5DID0gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICBpZiAobm9kZS5OKSBub2RlLk4uUCA9IG5vZGUuUDtcclxuICAgICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XHJcbiAgICAgIG5vZGUuTiA9IG5vZGUuUCA9IG51bGw7XHJcblxyXG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5VLFxyXG4gICAgICAgICAgc2libGluZyxcclxuICAgICAgICAgIGxlZnQgPSBub2RlLkwsXHJcbiAgICAgICAgICByaWdodCA9IG5vZGUuUixcclxuICAgICAgICAgIG5leHQsXHJcbiAgICAgICAgICByZWQ7XHJcblxyXG4gICAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcclxuICAgICAgZWxzZSBpZiAoIXJpZ2h0KSBuZXh0ID0gbGVmdDtcclxuICAgICAgZWxzZSBuZXh0ID0gUmVkQmxhY2tGaXJzdChyaWdodCk7XHJcblxyXG4gICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XHJcbiAgICAgICAgZWxzZSBwYXJlbnQuUiA9IG5leHQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5fID0gbmV4dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGxlZnQgJiYgcmlnaHQpIHtcclxuICAgICAgICByZWQgPSBuZXh0LkM7XHJcbiAgICAgICAgbmV4dC5DID0gbm9kZS5DO1xyXG4gICAgICAgIG5leHQuTCA9IGxlZnQ7XHJcbiAgICAgICAgbGVmdC5VID0gbmV4dDtcclxuICAgICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcclxuICAgICAgICAgIHBhcmVudCA9IG5leHQuVTtcclxuICAgICAgICAgIG5leHQuVSA9IG5vZGUuVTtcclxuICAgICAgICAgIG5vZGUgPSBuZXh0LlI7XHJcbiAgICAgICAgICBwYXJlbnQuTCA9IG5vZGU7XHJcbiAgICAgICAgICBuZXh0LlIgPSByaWdodDtcclxuICAgICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBuZXh0LlUgPSBwYXJlbnQ7XHJcbiAgICAgICAgICBwYXJlbnQgPSBuZXh0O1xyXG4gICAgICAgICAgbm9kZSA9IG5leHQuUjtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVkID0gbm9kZS5DO1xyXG4gICAgICAgIG5vZGUgPSBuZXh0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xyXG4gICAgICBpZiAocmVkKSByZXR1cm47XHJcbiAgICAgIGlmIChub2RlICYmIG5vZGUuQykgeyBub2RlLkMgPSBmYWxzZTsgcmV0dXJuOyB9XHJcblxyXG4gICAgICBkbyB7XHJcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XHJcbiAgICAgICAgaWYgKG5vZGUgPT09IHBhcmVudC5MKSB7XHJcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XHJcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XHJcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XHJcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcclxuICAgICAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xyXG4gICAgICAgICAgICBpZiAoIXNpYmxpbmcuUiB8fCAhc2libGluZy5SLkMpIHtcclxuICAgICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBzaWJsaW5nKTtcclxuICAgICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2libGluZy5DID0gcGFyZW50LkM7XHJcbiAgICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcclxuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XHJcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl87XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XHJcbiAgICAgICAgICBpZiAoc2libGluZy5DKSB7XHJcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XHJcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcclxuICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKChzaWJsaW5nLkwgJiYgc2libGluZy5MLkMpXHJcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XHJcbiAgICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xyXG4gICAgICAgICAgICAgIHNpYmxpbmcuUi5DID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcclxuICAgICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XHJcbiAgICAgICAgICAgICAgc2libGluZyA9IHBhcmVudC5MO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xyXG4gICAgICAgICAgICBwYXJlbnQuQyA9IHNpYmxpbmcuTC5DID0gZmFsc2U7XHJcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgcGFyZW50KTtcclxuICAgICAgICAgICAgbm9kZSA9IHRoaXMuXztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XHJcbiAgICAgICAgbm9kZSA9IHBhcmVudDtcclxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcclxuICAgICAgfSB3aGlsZSAoIW5vZGUuQyk7XHJcblxyXG4gICAgICBpZiAobm9kZSkgbm9kZS5DID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcclxuICAgIHZhciBwID0gbm9kZSxcclxuICAgICAgICBxID0gbm9kZS5SLFxyXG4gICAgICAgIHBhcmVudCA9IHAuVTtcclxuXHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xyXG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRyZWUuXyA9IHE7XHJcbiAgICB9XHJcblxyXG4gICAgcS5VID0gcGFyZW50O1xyXG4gICAgcC5VID0gcTtcclxuICAgIHAuUiA9IHEuTDtcclxuICAgIGlmIChwLlIpIHAuUi5VID0gcDtcclxuICAgIHEuTCA9IHA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRyZWUsIG5vZGUpIHtcclxuICAgIHZhciBwID0gbm9kZSxcclxuICAgICAgICBxID0gbm9kZS5MLFxyXG4gICAgICAgIHBhcmVudCA9IHAuVTtcclxuXHJcbiAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgIGlmIChwYXJlbnQuTCA9PT0gcCkgcGFyZW50LkwgPSBxO1xyXG4gICAgICBlbHNlIHBhcmVudC5SID0gcTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRyZWUuXyA9IHE7XHJcbiAgICB9XHJcblxyXG4gICAgcS5VID0gcGFyZW50O1xyXG4gICAgcC5VID0gcTtcclxuICAgIHAuTCA9IHEuUjtcclxuICAgIGlmIChwLkwpIHAuTC5VID0gcDtcclxuICAgIHEuUiA9IHA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBSZWRCbGFja0ZpcnN0KG5vZGUpIHtcclxuICAgIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XHJcbiAgICByZXR1cm4gbm9kZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUVkZ2UobGVmdCwgcmlnaHQsIHYwLCB2MSkge1xyXG4gICAgdmFyIGVkZ2UgPSBbbnVsbCwgbnVsbF0sXHJcbiAgICAgICAgaW5kZXggPSBlZGdlcy5wdXNoKGVkZ2UpIC0gMTtcclxuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XHJcbiAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XHJcbiAgICBpZiAodjApIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHYwKTtcclxuICAgIGlmICh2MSkgc2V0RWRnZUVuZChlZGdlLCByaWdodCwgbGVmdCwgdjEpO1xyXG4gICAgY2VsbHNbbGVmdC5pbmRleF0uaGFsZmVkZ2VzLnB1c2goaW5kZXgpO1xyXG4gICAgY2VsbHNbcmlnaHQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcclxuICAgIHJldHVybiBlZGdlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQm9yZGVyRWRnZShsZWZ0LCB2MCwgdjEpIHtcclxuICAgIHZhciBlZGdlID0gW3YwLCB2MV07XHJcbiAgICBlZGdlLmxlZnQgPSBsZWZ0O1xyXG4gICAgcmV0dXJuIGVkZ2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRFZGdlRW5kKGVkZ2UsIGxlZnQsIHJpZ2h0LCB2ZXJ0ZXgpIHtcclxuICAgIGlmICghZWRnZVswXSAmJiAhZWRnZVsxXSkge1xyXG4gICAgICBlZGdlWzBdID0gdmVydGV4O1xyXG4gICAgICBlZGdlLmxlZnQgPSBsZWZ0O1xyXG4gICAgICBlZGdlLnJpZ2h0ID0gcmlnaHQ7XHJcbiAgICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcclxuICAgICAgZWRnZVsxXSA9IHZlcnRleDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBMaWFuZ+KAk0JhcnNreSBsaW5lIGNsaXBwaW5nLlxyXG4gIGZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgYSA9IGVkZ2VbMF0sXHJcbiAgICAgICAgYiA9IGVkZ2VbMV0sXHJcbiAgICAgICAgYXggPSBhWzBdLFxyXG4gICAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgICBieCA9IGJbMF0sXHJcbiAgICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICAgIHQwID0gMCxcclxuICAgICAgICB0MSA9IDEsXHJcbiAgICAgICAgZHggPSBieCAtIGF4LFxyXG4gICAgICAgIGR5ID0gYnkgLSBheSxcclxuICAgICAgICByO1xyXG5cclxuICAgIHIgPSB4MCAtIGF4O1xyXG4gICAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xyXG4gICAgciAvPSBkeDtcclxuICAgIGlmIChkeCA8IDApIHtcclxuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xyXG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XHJcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xyXG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XHJcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcclxuICAgIH1cclxuXHJcbiAgICByID0geDEgLSBheDtcclxuICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcclxuICAgIHIgLz0gZHg7XHJcbiAgICBpZiAoZHggPCAwKSB7XHJcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcclxuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xyXG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcclxuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xyXG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XHJcbiAgICB9XHJcblxyXG4gICAgciA9IHkwIC0gYXk7XHJcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XHJcbiAgICByIC89IGR5O1xyXG4gICAgaWYgKGR5IDwgMCkge1xyXG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XHJcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcclxuICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XHJcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcclxuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xyXG4gICAgfVxyXG5cclxuICAgIHIgPSB5MSAtIGF5O1xyXG4gICAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xyXG4gICAgciAvPSBkeTtcclxuICAgIGlmIChkeSA8IDApIHtcclxuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xyXG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XHJcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xyXG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XHJcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISh0MCA+IDApICYmICEodDEgPCAxKSkgcmV0dXJuIHRydWU7IC8vIFRPRE8gQmV0dGVyIGNoZWNrP1xyXG5cclxuICAgIGlmICh0MCA+IDApIGVkZ2VbMF0gPSBbYXggKyB0MCAqIGR4LCBheSArIHQwICogZHldO1xyXG4gICAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbm5lY3RFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgdjEgPSBlZGdlWzFdO1xyXG4gICAgaWYgKHYxKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICB2YXIgdjAgPSBlZGdlWzBdLFxyXG4gICAgICAgIGxlZnQgPSBlZGdlLmxlZnQsXHJcbiAgICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxyXG4gICAgICAgIGx4ID0gbGVmdFswXSxcclxuICAgICAgICBseSA9IGxlZnRbMV0sXHJcbiAgICAgICAgcnggPSByaWdodFswXSxcclxuICAgICAgICByeSA9IHJpZ2h0WzFdLFxyXG4gICAgICAgIGZ4ID0gKGx4ICsgcngpIC8gMixcclxuICAgICAgICBmeSA9IChseSArIHJ5KSAvIDIsXHJcbiAgICAgICAgZm0sXHJcbiAgICAgICAgZmI7XHJcblxyXG4gICAgaWYgKHJ5ID09PSBseSkge1xyXG4gICAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xyXG4gICAgICBpZiAobHggPiByeCkge1xyXG4gICAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MF07XHJcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcclxuICAgICAgICB2MSA9IFtmeCwgeTFdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XHJcbiAgICAgICAgZWxzZSBpZiAodjBbMV0gPCB5MCkgcmV0dXJuO1xyXG4gICAgICAgIHYxID0gW2Z4LCB5MF07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZtID0gKGx4IC0gcngpIC8gKHJ5IC0gbHkpO1xyXG4gICAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcclxuICAgICAgaWYgKGZtIDwgLTEgfHwgZm0gPiAxKSB7XHJcbiAgICAgICAgaWYgKGx4ID4gcngpIHtcclxuICAgICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XHJcbiAgICAgICAgICBlbHNlIGlmICh2MFsxXSA+PSB5MSkgcmV0dXJuO1xyXG4gICAgICAgICAgdjEgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbKHkxIC0gZmIpIC8gZm0sIHkxXTtcclxuICAgICAgICAgIGVsc2UgaWYgKHYwWzFdIDwgeTApIHJldHVybjtcclxuICAgICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChseSA8IHJ5KSB7XHJcbiAgICAgICAgICBpZiAoIXYwKSB2MCA9IFt4MCwgZm0gKiB4MCArIGZiXTtcclxuICAgICAgICAgIGVsc2UgaWYgKHYwWzBdID49IHgxKSByZXR1cm47XHJcbiAgICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKCF2MCkgdjAgPSBbeDEsIGZtICogeDEgKyBmYl07XHJcbiAgICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XHJcbiAgICAgICAgICB2MSA9IFt4MCwgZm0gKiB4MCArIGZiXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBlZGdlWzBdID0gdjA7XHJcbiAgICBlZGdlWzFdID0gdjE7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xyXG4gICAgdmFyIGkgPSBlZGdlcy5sZW5ndGgsXHJcbiAgICAgICAgZWRnZTtcclxuXHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgIGlmICghY29ubmVjdEVkZ2UoZWRnZSA9IGVkZ2VzW2ldLCB4MCwgeTAsIHgxLCB5MSlcclxuICAgICAgICAgIHx8ICFjbGlwRWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSlcclxuICAgICAgICAgIHx8ICEoTWF0aC5hYnMoZWRnZVswXVswXSAtIGVkZ2VbMV1bMF0pID4gZXBzaWxvbiQzXHJcbiAgICAgICAgICAgICAgfHwgTWF0aC5hYnMoZWRnZVswXVsxXSAtIGVkZ2VbMV1bMV0pID4gZXBzaWxvbiQzKSkge1xyXG4gICAgICAgIGRlbGV0ZSBlZGdlc1tpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQ2VsbChzaXRlKSB7XHJcbiAgICByZXR1cm4gY2VsbHNbc2l0ZS5pbmRleF0gPSB7XHJcbiAgICAgIHNpdGU6IHNpdGUsXHJcbiAgICAgIGhhbGZlZGdlczogW11cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XHJcbiAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcclxuICAgICAgICB2YSA9IGVkZ2UubGVmdCxcclxuICAgICAgICB2YiA9IGVkZ2UucmlnaHQ7XHJcbiAgICBpZiAoc2l0ZSA9PT0gdmIpIHZiID0gdmEsIHZhID0gc2l0ZTtcclxuICAgIGlmICh2YikgcmV0dXJuIE1hdGguYXRhbjIodmJbMV0gLSB2YVsxXSwgdmJbMF0gLSB2YVswXSk7XHJcbiAgICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xyXG4gICAgZWxzZSB2YSA9IGVkZ2VbMF0sIHZiID0gZWRnZVsxXTtcclxuICAgIHJldHVybiBNYXRoLmF0YW4yKHZhWzBdIC0gdmJbMF0sIHZiWzFdIC0gdmFbMV0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZSkge1xyXG4gICAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcclxuICAgIHJldHVybiBlZGdlWysoZWRnZS5sZWZ0ID09PSBjZWxsLnNpdGUpXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNvcnRDZWxsSGFsZmVkZ2VzKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBjZWxscy5sZW5ndGgsIGNlbGwsIGhhbGZlZGdlcywgaiwgbTsgaSA8IG47ICsraSkge1xyXG4gICAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBuZXcgQXJyYXkobSksXHJcbiAgICAgICAgICAgIGFycmF5ID0gbmV3IEFycmF5KG0pO1xyXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcclxuICAgICAgICBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIGFycmF5W2pdIC0gYXJyYXlbaV07IH0pO1xyXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGFycmF5W2pdID0gaGFsZmVkZ2VzW2luZGV4W2pdXTtcclxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xpcENlbGxzKHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxyXG4gICAgICAgIGlDZWxsLFxyXG4gICAgICAgIGNlbGwsXHJcbiAgICAgICAgc2l0ZSxcclxuICAgICAgICBpSGFsZmVkZ2UsXHJcbiAgICAgICAgaGFsZmVkZ2VzLFxyXG4gICAgICAgIG5IYWxmZWRnZXMsXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgc3RhcnRYLFxyXG4gICAgICAgIHN0YXJ0WSxcclxuICAgICAgICBlbmQsXHJcbiAgICAgICAgZW5kWCxcclxuICAgICAgICBlbmRZLFxyXG4gICAgICAgIGNvdmVyID0gdHJ1ZTtcclxuXHJcbiAgICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcclxuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcclxuICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xyXG4gICAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzO1xyXG4gICAgICAgIGlIYWxmZWRnZSA9IGhhbGZlZGdlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZGFuZ2xpbmcgY2xpcHBlZCBlZGdlcy5cclxuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcclxuICAgICAgICAgIGlmICghZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSB7XHJcbiAgICAgICAgICAgIGhhbGZlZGdlcy5zcGxpY2UoaUhhbGZlZGdlLCAxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluc2VydCBhbnkgYm9yZGVyIGVkZ2VzIGFzIG5lY2Vzc2FyeS5cclxuICAgICAgICBpSGFsZmVkZ2UgPSAwLCBuSGFsZmVkZ2VzID0gaGFsZmVkZ2VzLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xyXG4gICAgICAgICAgZW5kID0gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1tpSGFsZmVkZ2VdXSksIGVuZFggPSBlbmRbMF0sIGVuZFkgPSBlbmRbMV07XHJcbiAgICAgICAgICBzdGFydCA9IGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2VzW2hhbGZlZGdlc1srK2lIYWxmZWRnZSAlIG5IYWxmZWRnZXNdXSksIHN0YXJ0WCA9IHN0YXJ0WzBdLCBzdGFydFkgPSBzdGFydFsxXTtcclxuICAgICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24kMyB8fCBNYXRoLmFicyhlbmRZIC0gc3RhcnRZKSA+IGVwc2lsb24kMykge1xyXG4gICAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMCwgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIGVuZCxcclxuICAgICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uJDMgJiYgeTEgLSBlbmRZID4gZXBzaWxvbiQzID8gW3gwLCBNYXRoLmFicyhzdGFydFggLSB4MCkgPCBlcHNpbG9uJDMgPyBzdGFydFkgOiB5MV1cclxuICAgICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWSAtIHkxKSA8IGVwc2lsb24kMyAmJiB4MSAtIGVuZFggPiBlcHNpbG9uJDMgPyBbTWF0aC5hYnMoc3RhcnRZIC0geTEpIDwgZXBzaWxvbiQzID8gc3RhcnRYIDogeDEsIHkxXVxyXG4gICAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRYIC0geDEpIDwgZXBzaWxvbiQzICYmIGVuZFkgLSB5MCA+IGVwc2lsb24kMyA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiQzID8gc3RhcnRZIDogeTBdXHJcbiAgICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uJDMgJiYgZW5kWCAtIHgwID4gZXBzaWxvbiQzID8gW01hdGguYWJzKHN0YXJ0WSAtIHkwKSA8IGVwc2lsb24kMyA/IHN0YXJ0WCA6IHgwLCB5MF1cclxuICAgICAgICAgICAgICAgIDogbnVsbCkpIC0gMSk7XHJcbiAgICAgICAgICAgICsrbkhhbGZlZGdlcztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuSGFsZmVkZ2VzKSBjb3ZlciA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXHJcbiAgICAvLyBJdCBkb2VzbuKAmXQgbWF0dGVyIHdoaWNoIGNvcm5lciBvZiB0aGUgZXh0ZW50IHdlIG1lYXN1cmUhXHJcbiAgICBpZiAoY292ZXIpIHtcclxuICAgICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XHJcblxyXG4gICAgICBmb3IgKGlDZWxsID0gMCwgY292ZXIgPSBudWxsOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xyXG4gICAgICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XHJcbiAgICAgICAgICBzaXRlID0gY2VsbC5zaXRlO1xyXG4gICAgICAgICAgZHggPSBzaXRlWzBdIC0geDA7XHJcbiAgICAgICAgICBkeSA9IHNpdGVbMV0gLSB5MDtcclxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICAgICAgICBpZiAoZDIgPCBkYykgZGMgPSBkMiwgY292ZXIgPSBjZWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNvdmVyKSB7XHJcbiAgICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xyXG4gICAgICAgIGNvdmVyLmhhbGZlZGdlcy5wdXNoKFxyXG4gICAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUgPSBjb3Zlci5zaXRlLCB2MDAsIHYwMSkpIC0gMSxcclxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcclxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTEsIHYxMCkpIC0gMSxcclxuICAgICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MTAsIHYwMCkpIC0gMVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBMYXN0bHkgZGVsZXRlIGFueSBjZWxscyB3aXRoIG5vIGVkZ2VzOyB0aGVzZSB3ZXJlIGVudGlyZWx5IGNsaXBwZWQuXHJcbiAgICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcclxuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcclxuICAgICAgICBpZiAoIWNlbGwuaGFsZmVkZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBjaXJjbGVQb29sID0gW107XHJcblxyXG4gIHZhciBmaXJzdENpcmNsZTtcclxuXHJcbiAgZnVuY3Rpb24gQ2lyY2xlKCkge1xyXG4gICAgUmVkQmxhY2tOb2RlKHRoaXMpO1xyXG4gICAgdGhpcy54ID1cclxuICAgIHRoaXMueSA9XHJcbiAgICB0aGlzLmFyYyA9XHJcbiAgICB0aGlzLnNpdGUgPVxyXG4gICAgdGhpcy5jeSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XHJcbiAgICB2YXIgbEFyYyA9IGFyYy5QLFxyXG4gICAgICAgIHJBcmMgPSBhcmMuTjtcclxuXHJcbiAgICBpZiAoIWxBcmMgfHwgIXJBcmMpIHJldHVybjtcclxuXHJcbiAgICB2YXIgbFNpdGUgPSBsQXJjLnNpdGUsXHJcbiAgICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcclxuICAgICAgICByU2l0ZSA9IHJBcmMuc2l0ZTtcclxuXHJcbiAgICBpZiAobFNpdGUgPT09IHJTaXRlKSByZXR1cm47XHJcblxyXG4gICAgdmFyIGJ4ID0gY1NpdGVbMF0sXHJcbiAgICAgICAgYnkgPSBjU2l0ZVsxXSxcclxuICAgICAgICBheCA9IGxTaXRlWzBdIC0gYngsXHJcbiAgICAgICAgYXkgPSBsU2l0ZVsxXSAtIGJ5LFxyXG4gICAgICAgIGN4ID0gclNpdGVbMF0gLSBieCxcclxuICAgICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XHJcblxyXG4gICAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcclxuICAgIGlmIChkID49IC1lcHNpbG9uMiQxKSByZXR1cm47XHJcblxyXG4gICAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXHJcbiAgICAgICAgaGMgPSBjeCAqIGN4ICsgY3kgKiBjeSxcclxuICAgICAgICB4ID0gKGN5ICogaGEgLSBheSAqIGhjKSAvIGQsXHJcbiAgICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkO1xyXG5cclxuICAgIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XHJcbiAgICBjaXJjbGUuYXJjID0gYXJjO1xyXG4gICAgY2lyY2xlLnNpdGUgPSBjU2l0ZTtcclxuICAgIGNpcmNsZS54ID0geCArIGJ4O1xyXG4gICAgY2lyY2xlLnkgPSAoY2lyY2xlLmN5ID0geSArIGJ5KSArIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTsgLy8geSBib3R0b21cclxuXHJcbiAgICBhcmMuY2lyY2xlID0gY2lyY2xlO1xyXG5cclxuICAgIHZhciBiZWZvcmUgPSBudWxsLFxyXG4gICAgICAgIG5vZGUgPSBjaXJjbGVzLl87XHJcblxyXG4gICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcclxuICAgICAgICBpZiAobm9kZS5MKSBub2RlID0gbm9kZS5MO1xyXG4gICAgICAgIGVsc2UgeyBiZWZvcmUgPSBub2RlLlA7IGJyZWFrOyB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKG5vZGUuUikgbm9kZSA9IG5vZGUuUjtcclxuICAgICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZTsgYnJlYWs7IH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNpcmNsZXMuaW5zZXJ0KGJlZm9yZSwgY2lyY2xlKTtcclxuICAgIGlmICghYmVmb3JlKSBmaXJzdENpcmNsZSA9IGNpcmNsZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRldGFjaENpcmNsZShhcmMpIHtcclxuICAgIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xyXG4gICAgaWYgKGNpcmNsZSkge1xyXG4gICAgICBpZiAoIWNpcmNsZS5QKSBmaXJzdENpcmNsZSA9IGNpcmNsZS5OO1xyXG4gICAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xyXG4gICAgICBjaXJjbGVQb29sLnB1c2goY2lyY2xlKTtcclxuICAgICAgUmVkQmxhY2tOb2RlKGNpcmNsZSk7XHJcbiAgICAgIGFyYy5jaXJjbGUgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGJlYWNoUG9vbCA9IFtdO1xyXG5cclxuICBmdW5jdGlvbiBCZWFjaCgpIHtcclxuICAgIFJlZEJsYWNrTm9kZSh0aGlzKTtcclxuICAgIHRoaXMuZWRnZSA9XHJcbiAgICB0aGlzLnNpdGUgPVxyXG4gICAgdGhpcy5jaXJjbGUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQmVhY2goc2l0ZSkge1xyXG4gICAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaDtcclxuICAgIGJlYWNoLnNpdGUgPSBzaXRlO1xyXG4gICAgcmV0dXJuIGJlYWNoO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcclxuICAgIGRldGFjaENpcmNsZShiZWFjaCk7XHJcbiAgICBiZWFjaGVzLnJlbW92ZShiZWFjaCk7XHJcbiAgICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XHJcbiAgICBSZWRCbGFja05vZGUoYmVhY2gpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVtb3ZlQmVhY2goYmVhY2gpIHtcclxuICAgIHZhciBjaXJjbGUgPSBiZWFjaC5jaXJjbGUsXHJcbiAgICAgICAgeCA9IGNpcmNsZS54LFxyXG4gICAgICAgIHkgPSBjaXJjbGUuY3ksXHJcbiAgICAgICAgdmVydGV4ID0gW3gsIHldLFxyXG4gICAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcclxuICAgICAgICBuZXh0ID0gYmVhY2guTixcclxuICAgICAgICBkaXNhcHBlYXJpbmcgPSBbYmVhY2hdO1xyXG5cclxuICAgIGRldGFjaEJlYWNoKGJlYWNoKTtcclxuXHJcbiAgICB2YXIgbEFyYyA9IHByZXZpb3VzO1xyXG4gICAgd2hpbGUgKGxBcmMuY2lyY2xlXHJcbiAgICAgICAgJiYgTWF0aC5hYnMoeCAtIGxBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQzXHJcbiAgICAgICAgJiYgTWF0aC5hYnMoeSAtIGxBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24kMykge1xyXG4gICAgICBwcmV2aW91cyA9IGxBcmMuUDtcclxuICAgICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XHJcbiAgICAgIGRldGFjaEJlYWNoKGxBcmMpO1xyXG4gICAgICBsQXJjID0gcHJldmlvdXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzYXBwZWFyaW5nLnVuc2hpZnQobEFyYyk7XHJcbiAgICBkZXRhY2hDaXJjbGUobEFyYyk7XHJcblxyXG4gICAgdmFyIHJBcmMgPSBuZXh0O1xyXG4gICAgd2hpbGUgKHJBcmMuY2lyY2xlXHJcbiAgICAgICAgJiYgTWF0aC5hYnMoeCAtIHJBcmMuY2lyY2xlLngpIDwgZXBzaWxvbiQzXHJcbiAgICAgICAgJiYgTWF0aC5hYnMoeSAtIHJBcmMuY2lyY2xlLmN5KSA8IGVwc2lsb24kMykge1xyXG4gICAgICBuZXh0ID0gckFyYy5OO1xyXG4gICAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcclxuICAgICAgZGV0YWNoQmVhY2gockFyYyk7XHJcbiAgICAgIHJBcmMgPSBuZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xyXG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xyXG5cclxuICAgIHZhciBuQXJjcyA9IGRpc2FwcGVhcmluZy5sZW5ndGgsXHJcbiAgICAgICAgaUFyYztcclxuICAgIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XHJcbiAgICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbaUFyY107XHJcbiAgICAgIGxBcmMgPSBkaXNhcHBlYXJpbmdbaUFyYyAtIDFdO1xyXG4gICAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgbEFyYyA9IGRpc2FwcGVhcmluZ1swXTtcclxuICAgIHJBcmMgPSBkaXNhcHBlYXJpbmdbbkFyY3MgLSAxXTtcclxuICAgIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XHJcblxyXG4gICAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xyXG4gICAgYXR0YWNoQ2lyY2xlKHJBcmMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWRkQmVhY2goc2l0ZSkge1xyXG4gICAgdmFyIHggPSBzaXRlWzBdLFxyXG4gICAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXHJcbiAgICAgICAgbEFyYyxcclxuICAgICAgICByQXJjLFxyXG4gICAgICAgIGR4bCxcclxuICAgICAgICBkeHIsXHJcbiAgICAgICAgbm9kZSA9IGJlYWNoZXMuXztcclxuXHJcbiAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICBkeGwgPSBsZWZ0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpIC0geDtcclxuICAgICAgaWYgKGR4bCA+IGVwc2lsb24kMykgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XHJcbiAgICAgICAgZHhyID0geCAtIHJpZ2h0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpO1xyXG4gICAgICAgIGlmIChkeHIgPiBlcHNpbG9uJDMpIHtcclxuICAgICAgICAgIGlmICghbm9kZS5SKSB7XHJcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIG5vZGUgPSBub2RlLlI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChkeGwgPiAtZXBzaWxvbiQzKSB7XHJcbiAgICAgICAgICAgIGxBcmMgPSBub2RlLlA7XHJcbiAgICAgICAgICAgIHJBcmMgPSBub2RlO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChkeHIgPiAtZXBzaWxvbiQzKSB7XHJcbiAgICAgICAgICAgIGxBcmMgPSBub2RlO1xyXG4gICAgICAgICAgICByQXJjID0gbm9kZS5OO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbEFyYyA9IHJBcmMgPSBub2RlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ2VsbChzaXRlKTtcclxuICAgIHZhciBuZXdBcmMgPSBjcmVhdGVCZWFjaChzaXRlKTtcclxuICAgIGJlYWNoZXMuaW5zZXJ0KGxBcmMsIG5ld0FyYyk7XHJcblxyXG4gICAgaWYgKCFsQXJjICYmICFyQXJjKSByZXR1cm47XHJcblxyXG4gICAgaWYgKGxBcmMgPT09IHJBcmMpIHtcclxuICAgICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xyXG4gICAgICByQXJjID0gY3JlYXRlQmVhY2gobEFyYy5zaXRlKTtcclxuICAgICAgYmVhY2hlcy5pbnNlcnQobmV3QXJjLCByQXJjKTtcclxuICAgICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xyXG4gICAgICBhdHRhY2hDaXJjbGUobEFyYyk7XHJcbiAgICAgIGF0dGFjaENpcmNsZShyQXJjKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghckFyYykgeyAvLyAmJiBsQXJjXHJcbiAgICAgIG5ld0FyYy5lZGdlID0gY3JlYXRlRWRnZShsQXJjLnNpdGUsIG5ld0FyYy5zaXRlKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGVsc2UgbEFyYyAhPT0gckFyY1xyXG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xyXG4gICAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xyXG5cclxuICAgIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcclxuICAgICAgICBheCA9IGxTaXRlWzBdLFxyXG4gICAgICAgIGF5ID0gbFNpdGVbMV0sXHJcbiAgICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXHJcbiAgICAgICAgYnkgPSBzaXRlWzFdIC0gYXksXHJcbiAgICAgICAgclNpdGUgPSByQXJjLnNpdGUsXHJcbiAgICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxyXG4gICAgICAgIGN5ID0gclNpdGVbMV0gLSBheSxcclxuICAgICAgICBkID0gMiAqIChieCAqIGN5IC0gYnkgKiBjeCksXHJcbiAgICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcclxuICAgICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxyXG4gICAgICAgIHZlcnRleCA9IFsoY3kgKiBoYiAtIGJ5ICogaGMpIC8gZCArIGF4LCAoYnggKiBoYyAtIGN4ICogaGIpIC8gZCArIGF5XTtcclxuXHJcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbFNpdGUsIHJTaXRlLCB2ZXJ0ZXgpO1xyXG4gICAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xyXG4gICAgckFyYy5lZGdlID0gY3JlYXRlRWRnZShzaXRlLCByU2l0ZSwgbnVsbCwgdmVydGV4KTtcclxuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcclxuICAgIGF0dGFjaENpcmNsZShyQXJjKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlZnRCcmVha1BvaW50KGFyYywgZGlyZWN0cml4KSB7XHJcbiAgICB2YXIgc2l0ZSA9IGFyYy5zaXRlLFxyXG4gICAgICAgIHJmb2N4ID0gc2l0ZVswXSxcclxuICAgICAgICByZm9jeSA9IHNpdGVbMV0sXHJcbiAgICAgICAgcGJ5MiA9IHJmb2N5IC0gZGlyZWN0cml4O1xyXG5cclxuICAgIGlmICghcGJ5MikgcmV0dXJuIHJmb2N4O1xyXG5cclxuICAgIHZhciBsQXJjID0gYXJjLlA7XHJcbiAgICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XHJcblxyXG4gICAgc2l0ZSA9IGxBcmMuc2l0ZTtcclxuICAgIHZhciBsZm9jeCA9IHNpdGVbMF0sXHJcbiAgICAgICAgbGZvY3kgPSBzaXRlWzFdLFxyXG4gICAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XHJcblxyXG4gICAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xyXG5cclxuICAgIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsXHJcbiAgICAgICAgYWJ5MiA9IDEgLyBwYnkyIC0gMSAvIHBsYnkyLFxyXG4gICAgICAgIGIgPSBobCAvIHBsYnkyO1xyXG5cclxuICAgIGlmIChhYnkyKSByZXR1cm4gKC1iICsgTWF0aC5zcXJ0KGIgKiBiIC0gMiAqIGFieTIgKiAoaGwgKiBobCAvICgtMiAqIHBsYnkyKSAtIGxmb2N5ICsgcGxieTIgLyAyICsgcmZvY3kgLSBwYnkyIC8gMikpKSAvIGFieTIgKyByZm9jeDtcclxuXHJcbiAgICByZXR1cm4gKHJmb2N4ICsgbGZvY3gpIC8gMjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xyXG4gICAgdmFyIHJBcmMgPSBhcmMuTjtcclxuICAgIGlmIChyQXJjKSByZXR1cm4gbGVmdEJyZWFrUG9pbnQockFyYywgZGlyZWN0cml4KTtcclxuICAgIHZhciBzaXRlID0gYXJjLnNpdGU7XHJcbiAgICByZXR1cm4gc2l0ZVsxXSA9PT0gZGlyZWN0cml4ID8gc2l0ZVswXSA6IEluZmluaXR5O1xyXG4gIH1cclxuXHJcbiAgdmFyIGVwc2lsb24kMyA9IDFlLTY7XHJcbiAgdmFyIGVwc2lsb24yJDEgPSAxZS0xMjtcclxuICB2YXIgYmVhY2hlcztcclxuICB2YXIgY2VsbHM7XHJcbiAgdmFyIGNpcmNsZXM7XHJcbiAgdmFyIGVkZ2VzO1xyXG5cclxuICBmdW5jdGlvbiB0cmlhbmdsZUFyZWEoYSwgYiwgYykge1xyXG4gICAgcmV0dXJuIChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGFbMV0pIC0gKGFbMF0gLSBiWzBdKSAqIChjWzFdIC0gYVsxXSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsZXhpY29ncmFwaGljKGEsIGIpIHtcclxuICAgIHJldHVybiBiWzFdIC0gYVsxXVxyXG4gICAgICAgIHx8IGJbMF0gLSBhWzBdO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRGlhZ3JhbShzaXRlcywgZXh0ZW50KSB7XHJcbiAgICB2YXIgc2l0ZSA9IHNpdGVzLnNvcnQobGV4aWNvZ3JhcGhpYykucG9wKCksXHJcbiAgICAgICAgeCxcclxuICAgICAgICB5LFxyXG4gICAgICAgIGNpcmNsZTtcclxuXHJcbiAgICBlZGdlcyA9IFtdO1xyXG4gICAgY2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcclxuICAgIGJlYWNoZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xyXG4gICAgY2lyY2xlcyA9IG5ldyBSZWRCbGFja1RyZWU7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XHJcbiAgICAgIGlmIChzaXRlICYmICghY2lyY2xlIHx8IHNpdGVbMV0gPCBjaXJjbGUueSB8fCAoc2l0ZVsxXSA9PT0gY2lyY2xlLnkgJiYgc2l0ZVswXSA8IGNpcmNsZS54KSkpIHtcclxuICAgICAgICBpZiAoc2l0ZVswXSAhPT0geCB8fCBzaXRlWzFdICE9PSB5KSB7XHJcbiAgICAgICAgICBhZGRCZWFjaChzaXRlKTtcclxuICAgICAgICAgIHggPSBzaXRlWzBdLCB5ID0gc2l0ZVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGNpcmNsZSkge1xyXG4gICAgICAgIHJlbW92ZUJlYWNoKGNpcmNsZS5hcmMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc29ydENlbGxIYWxmZWRnZXMoKTtcclxuXHJcbiAgICBpZiAoZXh0ZW50KSB7XHJcbiAgICAgIHZhciB4MCA9ICtleHRlbnRbMF1bMF0sXHJcbiAgICAgICAgICB5MCA9ICtleHRlbnRbMF1bMV0sXHJcbiAgICAgICAgICB4MSA9ICtleHRlbnRbMV1bMF0sXHJcbiAgICAgICAgICB5MSA9ICtleHRlbnRbMV1bMV07XHJcbiAgICAgIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSk7XHJcbiAgICAgIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5lZGdlcyA9IGVkZ2VzO1xyXG4gICAgdGhpcy5jZWxscyA9IGNlbGxzO1xyXG5cclxuICAgIGJlYWNoZXMgPVxyXG4gICAgY2lyY2xlcyA9XHJcbiAgICBlZGdlcyA9XHJcbiAgICBjZWxscyA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBEaWFncmFtLnByb3RvdHlwZSA9IHtcclxuICAgIGNvbnN0cnVjdG9yOiBEaWFncmFtLFxyXG5cclxuICAgIHBvbHlnb25zOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGVkZ2VzID0gdGhpcy5lZGdlcztcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmNlbGxzLm1hcChmdW5jdGlvbihjZWxsKSB7XHJcbiAgICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcclxuICAgICAgICBwb2x5Z29uLmRhdGEgPSBjZWxsLnNpdGUuZGF0YTtcclxuICAgICAgICByZXR1cm4gcG9seWdvbjtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRyaWFuZ2xlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB0cmlhbmdsZXMgPSBbXSxcclxuICAgICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcclxuXHJcbiAgICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XHJcbiAgICAgICAgdmFyIHNpdGUgPSBjZWxsLnNpdGUsXHJcbiAgICAgICAgICAgIGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzLFxyXG4gICAgICAgICAgICBqID0gLTEsXHJcbiAgICAgICAgICAgIG0gPSBoYWxmZWRnZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICBzMCxcclxuICAgICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcclxuICAgICAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xyXG5cclxuICAgICAgICB3aGlsZSAoKytqIDwgbSkge1xyXG4gICAgICAgICAgczAgPSBzMTtcclxuICAgICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcclxuICAgICAgICAgIHMxID0gZTEubGVmdCA9PT0gc2l0ZSA/IGUxLnJpZ2h0IDogZTEubGVmdDtcclxuICAgICAgICAgIGlmIChpIDwgczAuaW5kZXggJiYgaSA8IHMxLmluZGV4ICYmIHRyaWFuZ2xlQXJlYShzaXRlLCBzMCwgczEpIDwgMCkge1xyXG4gICAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiB0cmlhbmdsZXM7XHJcbiAgICB9LFxyXG5cclxuICAgIGxpbmtzOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHtcclxuICAgICAgICByZXR1cm4gZWRnZS5yaWdodDtcclxuICAgICAgfSkubWFwKGZ1bmN0aW9uKGVkZ2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcclxuICAgICAgICAgIHRhcmdldDogZWRnZS5yaWdodC5kYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB2b3Jvbm9pKCkge1xyXG4gICAgdmFyIHggPSB4JDQsXHJcbiAgICAgICAgeSA9IHkkNCxcclxuICAgICAgICBleHRlbnQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIHZvcm9ub2koZGF0YSkge1xyXG4gICAgICByZXR1cm4gbmV3IERpYWdyYW0oZGF0YS5tYXAoZnVuY3Rpb24oZCwgaSkge1xyXG4gICAgICAgIHZhciBzID0gW01hdGgucm91bmQoeChkLCBpLCBkYXRhKSAvIGVwc2lsb24kMykgKiBlcHNpbG9uJDMsIE1hdGgucm91bmQoeShkLCBpLCBkYXRhKSAvIGVwc2lsb24kMykgKiBlcHNpbG9uJDNdO1xyXG4gICAgICAgIHMuaW5kZXggPSBpO1xyXG4gICAgICAgIHMuZGF0YSA9IGQ7XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICAgIH0pLCBleHRlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHZvcm9ub2kucG9seWdvbnMgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLnBvbHlnb25zKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgIHJldHVybiB2b3Jvbm9pKGRhdGEpLmxpbmtzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZvcm9ub2kudHJpYW5nbGVzID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gdm9yb25vaShkYXRhKS50cmlhbmdsZXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgdm9yb25vaS54ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQ4KCtfKSwgdm9yb25vaSkgOiB4O1xyXG4gICAgfTtcclxuXHJcbiAgICB2b3Jvbm9pLnkgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDgoK18pLCB2b3Jvbm9pKSA6IHk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZvcm9ub2kuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0sIHZvcm9ub2kpIDogZXh0ZW50ICYmIFtbZXh0ZW50WzBdWzBdLCBleHRlbnRbMF1bMV1dLCBbZXh0ZW50WzFdWzBdLCBleHRlbnRbMV1bMV1dXTtcclxuICAgIH07XHJcblxyXG4gICAgdm9yb25vaS5zaXplID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1swLCAwXSwgWytfWzBdLCArX1sxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV1dO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gdm9yb25vaTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDkoeCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBab29tRXZlbnQodGFyZ2V0LCB0eXBlLCB0cmFuc2Zvcm0pIHtcclxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gVHJhbnNmb3JtKGssIHgsIHkpIHtcclxuICAgIHRoaXMuayA9IGs7XHJcbiAgICB0aGlzLnggPSB4O1xyXG4gICAgdGhpcy55ID0geTtcclxuICB9XHJcblxyXG4gIFRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtLFxyXG4gICAgc2NhbGU6IGZ1bmN0aW9uKGspIHtcclxuICAgICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XHJcbiAgICB9LFxyXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XHJcbiAgICB9LFxyXG4gICAgYXBwbHk6IGZ1bmN0aW9uKHBvaW50KSB7XHJcbiAgICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcclxuICAgIH0sXHJcbiAgICBhcHBseVg6IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XHJcbiAgICB9LFxyXG4gICAgYXBwbHlZOiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xyXG4gICAgfSxcclxuICAgIGludmVydDogZnVuY3Rpb24obG9jYXRpb24pIHtcclxuICAgICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcclxuICAgIH0sXHJcbiAgICBpbnZlcnRYOiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XHJcbiAgICB9LFxyXG4gICAgaW52ZXJ0WTogZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xyXG4gICAgfSxcclxuICAgIHJlc2NhbGVYOiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xyXG4gICAgfSxcclxuICAgIHJlc2NhbGVZOiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xyXG4gICAgfSxcclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgaWRlbnRpdHkkNiA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XHJcblxyXG4gIHRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xyXG5cclxuICBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUuX196b29tIHx8IGlkZW50aXR5JDY7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uJDEoKSB7XHJcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbm9ldmVudCQxKCkge1xyXG4gICAgZXhwb3J0cy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgZXhwb3J0cy5ldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIkMSgpIHtcclxuICAgIHJldHVybiAhZXhwb3J0cy5ldmVudC5idXR0b247XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xyXG4gICAgdmFyIGUgPSB0aGlzLCB3LCBoO1xyXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XHJcbiAgICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xyXG4gICAgICB3ID0gZS53aWR0aC5iYXNlVmFsLnZhbHVlO1xyXG4gICAgICBoID0gZS5oZWlnaHQuYmFzZVZhbC52YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHcgPSBlLmNsaWVudFdpZHRoO1xyXG4gICAgICBoID0gZS5jbGllbnRIZWlnaHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW1swLCAwXSwgW3csIGhdXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRUcmFuc2Zvcm0oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHkkNjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHpvb20oKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlciQxLFxyXG4gICAgICAgIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXHJcbiAgICAgICAgazAgPSAwLFxyXG4gICAgICAgIGsxID0gSW5maW5pdHksXHJcbiAgICAgICAgeDAgPSAtazEsXHJcbiAgICAgICAgeDEgPSBrMSxcclxuICAgICAgICB5MCA9IHgwLFxyXG4gICAgICAgIHkxID0geDEsXHJcbiAgICAgICAgZHVyYXRpb24gPSAyNTAsXHJcbiAgICAgICAgZ2VzdHVyZXMgPSBbXSxcclxuICAgICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChcInN0YXJ0XCIsIFwiem9vbVwiLCBcImVuZFwiKSxcclxuICAgICAgICB0b3VjaHN0YXJ0aW5nLFxyXG4gICAgICAgIHRvdWNoZW5kaW5nLFxyXG4gICAgICAgIHRvdWNoRGVsYXkgPSA1MDAsXHJcbiAgICAgICAgd2hlZWxEZWxheSA9IDE1MDtcclxuXHJcbiAgICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbikge1xyXG4gICAgICBzZWxlY3Rpb25cclxuICAgICAgICAgIC5vbihcIndoZWVsLnpvb21cIiwgd2hlZWxlZClcclxuICAgICAgICAgIC5vbihcIm1vdXNlZG93bi56b29tXCIsIG1vdXNlZG93bmVkKVxyXG4gICAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxyXG4gICAgICAgICAgLm9uKFwidG91Y2hzdGFydC56b29tXCIsIHRvdWNoc3RhcnRlZClcclxuICAgICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXHJcbiAgICAgICAgICAub24oXCJ0b3VjaGVuZC56b29tIHRvdWNoY2FuY2VsLnpvb21cIiwgdG91Y2hlbmRlZClcclxuICAgICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIilcclxuICAgICAgICAgIC5wcm9wZXJ0eShcIl9fem9vbVwiLCBkZWZhdWx0VHJhbnNmb3JtKTtcclxuICAgIH1cclxuXHJcbiAgICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSkge1xyXG4gICAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcclxuICAgICAgc2VsZWN0aW9uLnByb3BlcnR5KFwiX196b29tXCIsIGRlZmF1bHRUcmFuc2Zvcm0pO1xyXG4gICAgICBpZiAoY29sbGVjdGlvbiAhPT0gc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxlY3Rpb24uaW50ZXJydXB0KCkuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGdlc3R1cmUodGhpcywgYXJndW1lbnRzKVxyXG4gICAgICAgICAgICAgIC5zdGFydCgpXHJcbiAgICAgICAgICAgICAgLnpvb20obnVsbCwgdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiB0cmFuc2Zvcm0pXHJcbiAgICAgICAgICAgICAgLmVuZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHpvb20uc2NhbGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaykge1xyXG4gICAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgazAgPSB0aGlzLl9fem9vbS5rLFxyXG4gICAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xyXG4gICAgICAgIHJldHVybiBrMCAqIGsxO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgem9vbS5zY2FsZVRvID0gZnVuY3Rpb24oc2VsZWN0aW9uLCBrKSB7XHJcbiAgICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcclxuICAgICAgICAgICAgdDAgPSB0aGlzLl9fem9vbSxcclxuICAgICAgICAgICAgcDAgPSBjZW50cm9pZChlKSxcclxuICAgICAgICAgICAgcDEgPSB0MC5pbnZlcnQocDApLFxyXG4gICAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xyXG4gICAgICAgIHJldHVybiBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGUpO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgem9vbS50cmFuc2xhdGVCeSA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgeCwgeSkge1xyXG4gICAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxyXG4gICAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHguYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHgsXHJcbiAgICAgICAgICB0eXBlb2YgeSA9PT0gXCJmdW5jdGlvblwiID8geS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeVxyXG4gICAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlKHRyYW5zZm9ybSwgaykge1xyXG4gICAgICBrID0gTWF0aC5tYXgoazAsIE1hdGgubWluKGsxLCBrKSk7XHJcbiAgICAgIHJldHVybiBrID09PSB0cmFuc2Zvcm0uayA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0oaywgdHJhbnNmb3JtLngsIHRyYW5zZm9ybS55KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUodHJhbnNmb3JtLCBwMCwgcDEpIHtcclxuICAgICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XHJcbiAgICAgIHJldHVybiB4ID09PSB0cmFuc2Zvcm0ueCAmJiB5ID09PSB0cmFuc2Zvcm0ueSA/IHRyYW5zZm9ybSA6IG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtLmssIHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCkge1xyXG4gICAgICB2YXIgZHggPSBNYXRoLm1pbigwLCB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMF1bMF0pIC0geDApIHx8IE1hdGgubWF4KDAsIHRyYW5zZm9ybS5pbnZlcnRYKGV4dGVudFsxXVswXSkgLSB4MSksXHJcbiAgICAgICAgICBkeSA9IE1hdGgubWluKDAsIHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFswXVsxXSkgLSB5MCkgfHwgTWF0aC5tYXgoMCwgdHJhbnNmb3JtLmludmVydFkoZXh0ZW50WzFdWzFdKSAtIHkxKTtcclxuICAgICAgcmV0dXJuIGR4IHx8IGR5ID8gdHJhbnNmb3JtLnRyYW5zbGF0ZShkeCwgZHkpIDogdHJhbnNmb3JtO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNlbnRyb2lkKGV4dGVudCkge1xyXG4gICAgICByZXR1cm4gWygrZXh0ZW50WzBdWzBdICsgK2V4dGVudFsxXVswXSkgLyAyLCAoK2V4dGVudFswXVsxXSArICtleHRlbnRbMV1bMV0pIC8gMl07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2NoZWR1bGUodHJhbnNpdGlvbiwgdHJhbnNmb3JtLCBjZW50ZXIpIHtcclxuICAgICAgdHJhbnNpdGlvblxyXG4gICAgICAgICAgLm9uKFwic3RhcnQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLnN0YXJ0KCk7IH0pXHJcbiAgICAgICAgICAub24oXCJpbnRlcnJ1cHQuem9vbSBlbmQuem9vbVwiLCBmdW5jdGlvbigpIHsgZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxyXG4gICAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLFxyXG4gICAgICAgICAgICAgICAgZSA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKSxcclxuICAgICAgICAgICAgICAgIHAgPSBjZW50ZXIgfHwgY2VudHJvaWQoZSksXHJcbiAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcclxuICAgICAgICAgICAgICAgIGEgPSB0aGF0Ll9fem9vbSxcclxuICAgICAgICAgICAgICAgIGIgPSB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhhdCwgYXJncykgOiB0cmFuc2Zvcm0sXHJcbiAgICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGVab29tKGEuaW52ZXJ0KHApLmNvbmNhdCh3IC8gYS5rKSwgYi5pbnZlcnQocCkuY29uY2F0KHcgLyBiLmspKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICAgICAgICBpZiAodCA9PT0gMSkgdCA9IGI7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yIG9uIGVuZC5cclxuICAgICAgICAgICAgICBlbHNlIHsgdmFyIGwgPSBpKHQpLCBrID0gdyAvIGxbMl07IHQgPSBuZXcgVHJhbnNmb3JtKGssIHBbMF0gLSBsWzBdICogaywgcFsxXSAtIGxbMV0gKiBrKTsgfVxyXG4gICAgICAgICAgICAgIGcuem9vbShudWxsLCB0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdlc3R1cmUodGhhdCwgYXJncykge1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGdlc3R1cmVzLmxlbmd0aCwgZzsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIGlmICgoZyA9IGdlc3R1cmVzW2ldKS50aGF0ID09PSB0aGF0KSB7XHJcbiAgICAgICAgICByZXR1cm4gZztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIEdlc3R1cmUodGhhdCwgYXJncykge1xyXG4gICAgICB0aGlzLnRoYXQgPSB0aGF0O1xyXG4gICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4gICAgICB0aGlzLmluZGV4ID0gLTE7XHJcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcclxuICAgICAgdGhpcy5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhhdCwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgR2VzdHVyZS5wcm90b3R5cGUgPSB7XHJcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkge1xyXG4gICAgICAgICAgdGhpcy5pbmRleCA9IGdlc3R1cmVzLnB1c2godGhpcykgLSAxO1xyXG4gICAgICAgICAgdGhpcy5lbWl0KFwic3RhcnRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9LFxyXG4gICAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlICYmIGtleSAhPT0gXCJtb3VzZVwiKSB0aGlzLm1vdXNlWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLm1vdXNlWzBdKTtcclxuICAgICAgICBpZiAodGhpcy50b3VjaDAgJiYga2V5ICE9PSBcInRvdWNoXCIpIHRoaXMudG91Y2gwWzFdID0gdHJhbnNmb3JtLmludmVydCh0aGlzLnRvdWNoMFswXSk7XHJcbiAgICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xyXG4gICAgICAgIHRoaXMudGhhdC5fX3pvb20gPSB0cmFuc2Zvcm07XHJcbiAgICAgICAgdGhpcy5lbWl0KFwiem9vbVwiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgZW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xyXG4gICAgICAgICAgZ2VzdHVyZXMuc3BsaWNlKHRoaXMuaW5kZXgsIDEpO1xyXG4gICAgICAgICAgdGhpcy5pbmRleCA9IC0xO1xyXG4gICAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIGN1c3RvbUV2ZW50KG5ldyBab29tRXZlbnQoem9vbSwgdHlwZSwgdGhpcy50aGF0Ll9fem9vbSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiB3aGVlbGVkKCkge1xyXG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XHJcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxyXG4gICAgICAgICAgdCA9IHRoaXMuX196b29tLFxyXG4gICAgICAgICAgayA9IE1hdGgubWF4KGswLCBNYXRoLm1pbihrMSwgdC5rICogTWF0aC5wb3coMiwgLWV4cG9ydHMuZXZlbnQuZGVsdGFZICogKGV4cG9ydHMuZXZlbnQuZGVsdGFNb2RlID8gMTIwIDogMSkgLyA1MDApKSksXHJcbiAgICAgICAgICBwID0gbW91c2UodGhpcyk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgbW91c2UgaXMgaW4gdGhlIHNhbWUgbG9jYXRpb24gYXMgYmVmb3JlLCByZXVzZSBpdC5cclxuICAgICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxyXG4gICAgICBpZiAoZy53aGVlbCkge1xyXG4gICAgICAgIGlmIChnLm1vdXNlWzBdWzBdICE9PSBwWzBdIHx8IGcubW91c2VbMF1bMV0gIT09IHBbMV0pIHtcclxuICAgICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsZWFyVGltZW91dChnLndoZWVsKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXHJcbiAgICAgIGVsc2UgaWYgKHQuayA9PT0gaykgcmV0dXJuO1xyXG5cclxuICAgICAgLy8gT3RoZXJ3aXNlLCBjYXB0dXJlIHRoZSBtb3VzZSBwb2ludCBhbmQgbG9jYXRpb24gYXQgdGhlIHN0YXJ0LlxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcclxuICAgICAgICBpbnRlcnJ1cHQodGhpcyk7XHJcbiAgICAgICAgZy5zdGFydCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBub2V2ZW50JDEoKTtcclxuICAgICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XHJcbiAgICAgIGcuem9vbShcIm1vdXNlXCIsIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodCwgayksIGcubW91c2VbMF0sIGcubW91c2VbMV0pLCBnLmV4dGVudCkpO1xyXG5cclxuICAgICAgZnVuY3Rpb24gd2hlZWxpZGxlZCgpIHtcclxuICAgICAgICBnLndoZWVsID0gbnVsbDtcclxuICAgICAgICBnLmVuZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XHJcbiAgICAgIGlmICh0b3VjaGVuZGluZyB8fCAhZmlsdGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHJldHVybjtcclxuICAgICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXHJcbiAgICAgICAgICB2ID0gc2VsZWN0KGV4cG9ydHMuZXZlbnQudmlldykub24oXCJtb3VzZW1vdmUuem9vbVwiLCBtb3VzZW1vdmVkLCB0cnVlKS5vbihcIm1vdXNldXAuem9vbVwiLCBtb3VzZXVwcGVkLCB0cnVlKSxcclxuICAgICAgICAgIHAgPSBtb3VzZSh0aGlzKTtcclxuXHJcbiAgICAgIGRyYWdEaXNhYmxlKGV4cG9ydHMuZXZlbnQudmlldyk7XHJcbiAgICAgIG5vcHJvcGFnYXRpb24kMSgpO1xyXG4gICAgICBnLm1vdXNlID0gW3AsIHRoaXMuX196b29tLmludmVydChwKV07XHJcbiAgICAgIGludGVycnVwdCh0aGlzKTtcclxuICAgICAgZy5zdGFydCgpO1xyXG5cclxuICAgICAgZnVuY3Rpb24gbW91c2Vtb3ZlZCgpIHtcclxuICAgICAgICBub2V2ZW50JDEoKTtcclxuICAgICAgICBnLm1vdmVkID0gdHJ1ZTtcclxuICAgICAgICBnLnpvb20oXCJtb3VzZVwiLCBjb25zdHJhaW4odHJhbnNsYXRlKGcudGhhdC5fX3pvb20sIGcubW91c2VbMF0gPSBtb3VzZShnLnRoYXQpLCBnLm1vdXNlWzFdKSwgZy5leHRlbnQpKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbW91c2V1cHBlZCgpIHtcclxuICAgICAgICB2Lm9uKFwibW91c2Vtb3ZlLnpvb20gbW91c2V1cC56b29tXCIsIG51bGwpO1xyXG4gICAgICAgIGRyYWdFbmFibGUoZXhwb3J0cy5ldmVudC52aWV3LCBnLm1vdmVkKTtcclxuICAgICAgICBub2V2ZW50JDEoKTtcclxuICAgICAgICBnLmVuZCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGJsY2xpY2tlZCgpIHtcclxuICAgICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xyXG4gICAgICB2YXIgdDAgPSB0aGlzLl9fem9vbSxcclxuICAgICAgICAgIHAwID0gbW91c2UodGhpcyksXHJcbiAgICAgICAgICBwMSA9IHQwLmludmVydChwMCksXHJcbiAgICAgICAgICBrMSA9IHQwLmsgKiAoZXhwb3J0cy5ldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxyXG4gICAgICAgICAgdDEgPSBjb25zdHJhaW4odHJhbnNsYXRlKHNjYWxlKHQwLCBrMSksIHAwLCBwMSksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcclxuXHJcbiAgICAgIG5vZXZlbnQkMSgpO1xyXG4gICAgICBpZiAoZHVyYXRpb24gPiAwKSBzZWxlY3QodGhpcykudHJhbnNpdGlvbigpLmR1cmF0aW9uKGR1cmF0aW9uKS5jYWxsKHNjaGVkdWxlLCB0MSwgcDApO1xyXG4gICAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG91Y2hzdGFydGVkKCkge1xyXG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XHJcbiAgICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxyXG4gICAgICAgICAgdG91Y2hlcyA9IGV4cG9ydHMuZXZlbnQuY2hhbmdlZFRvdWNoZXMsXHJcbiAgICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQsIHA7XHJcblxyXG4gICAgICBub3Byb3BhZ2F0aW9uJDEoKTtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgIHQgPSB0b3VjaGVzW2ldLCBwID0gdG91Y2godGhpcywgdG91Y2hlcywgdC5pZGVudGlmaWVyKTtcclxuICAgICAgICBwID0gW3AsIHRoaXMuX196b29tLmludmVydChwKSwgdC5pZGVudGlmaWVyXTtcclxuICAgICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHA7XHJcbiAgICAgICAgZWxzZSBpZiAoIWcudG91Y2gxKSBnLnRvdWNoMSA9IHA7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRvdWNoc3RhcnRpbmcpIHtcclxuICAgICAgICB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xyXG4gICAgICAgIGlmICghZy50b3VjaDEpIHJldHVybiBnLmVuZCgpLCBkYmxjbGlja2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IG4pIHtcclxuICAgICAgICB0b3VjaHN0YXJ0aW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hzdGFydGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xyXG4gICAgICAgIGludGVycnVwdCh0aGlzKTtcclxuICAgICAgICBnLnN0YXJ0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xyXG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcclxuICAgICAgICAgIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxyXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xyXG5cclxuICAgICAgbm9ldmVudCQxKCk7XHJcbiAgICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBnLnRvdWNoMFswXSA9IHA7XHJcbiAgICAgICAgZWxzZSBpZiAoZy50b3VjaDEgJiYgZy50b3VjaDFbMl0gPT09IHQuaWRlbnRpZmllcikgZy50b3VjaDFbMF0gPSBwO1xyXG4gICAgICB9XHJcbiAgICAgIHQgPSBnLnRoYXQuX196b29tO1xyXG4gICAgICBpZiAoZy50b3VjaDEpIHtcclxuICAgICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcclxuICAgICAgICAgICAgcDEgPSBnLnRvdWNoMVswXSwgbDEgPSBnLnRvdWNoMVsxXSxcclxuICAgICAgICAgICAgZHAgPSAoZHAgPSBwMVswXSAtIHAwWzBdKSAqIGRwICsgKGRwID0gcDFbMV0gLSBwMFsxXSkgKiBkcCxcclxuICAgICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcclxuICAgICAgICB0ID0gc2NhbGUodCwgTWF0aC5zcXJ0KGRwIC8gZGwpKTtcclxuICAgICAgICBwID0gWyhwMFswXSArIHAxWzBdKSAvIDIsIChwMFsxXSArIHAxWzFdKSAvIDJdO1xyXG4gICAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoZy50b3VjaDApIHAgPSBnLnRvdWNoMFswXSwgbCA9IGcudG91Y2gwWzFdO1xyXG4gICAgICBlbHNlIHJldHVybjtcclxuICAgICAgZy56b29tKFwidG91Y2hcIiwgY29uc3RyYWluKHRyYW5zbGF0ZSh0LCBwLCBsKSwgZy5leHRlbnQpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xyXG4gICAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcclxuICAgICAgICAgIHRvdWNoZXMgPSBleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLFxyXG4gICAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0O1xyXG5cclxuICAgICAgbm9wcm9wYWdhdGlvbiQxKCk7XHJcbiAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcclxuICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIHRvdWNoRGVsYXkpO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgdCA9IHRvdWNoZXNbaV07XHJcbiAgICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGRlbGV0ZSBnLnRvdWNoMDtcclxuICAgICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGcudG91Y2gxICYmICFnLnRvdWNoMCkgZy50b3VjaDAgPSBnLnRvdWNoMSwgZGVsZXRlIGcudG91Y2gxO1xyXG4gICAgICBpZiAoIWcudG91Y2gwKSBnLmVuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHpvb20uZmlsdGVyID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDkoISFfKSwgem9vbSkgOiBmaWx0ZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDkoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcclxuICAgIH07XHJcblxyXG4gICAgem9vbS5zY2FsZUV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoazAgPSArX1swXSwgazEgPSArX1sxXSwgem9vbSkgOiBbazAsIGsxXTtcclxuICAgIH07XHJcblxyXG4gICAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF0sIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV0sIHpvb20pIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XHJcbiAgICB9O1xyXG5cclxuICAgIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR1cmF0aW9uID0gK18sIHpvb20pIDogZHVyYXRpb247XHJcbiAgICB9O1xyXG5cclxuICAgIHpvb20ub24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcclxuICAgICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyB6b29tIDogdmFsdWU7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB6b29tO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uc3RhbnQkMTAoeCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4geDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBCcnVzaEV2ZW50KHRhcmdldCwgdHlwZSwgc2VsZWN0aW9uKSB7XHJcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vcHJvcGFnYXRpb24kMigpIHtcclxuICAgIGV4cG9ydHMuZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBub2V2ZW50JDIoKSB7XHJcbiAgICBleHBvcnRzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBleHBvcnRzLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG4gIH1cclxuXHJcbiAgdmFyIE1PREVfRFJBRyA9IHtuYW1lOiBcImRyYWdcIn07XHJcbiAgdmFyIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifTtcclxuICB2YXIgTU9ERV9IQU5ETEUgPSB7bmFtZTogXCJoYW5kbGVcIn07XHJcbiAgdmFyIE1PREVfQ0VOVEVSID0ge25hbWU6IFwiY2VudGVyXCJ9O1xyXG4gIHZhciBYID0ge1xyXG4gICAgbmFtZTogXCJ4XCIsXHJcbiAgICBoYW5kbGVzOiBbXCJlXCIsIFwid1wiXS5tYXAodHlwZSQxKSxcclxuICAgIGlucHV0OiBmdW5jdGlvbih4LCBlKSB7IHJldHVybiB4ICYmIFtbeFswXSwgZVswXVsxXV0sIFt4WzFdLCBlWzFdWzFdXV07IH0sXHJcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMF0sIHh5WzFdWzBdXTsgfVxyXG4gIH07XHJcblxyXG4gIHZhciBZID0ge1xyXG4gICAgbmFtZTogXCJ5XCIsXHJcbiAgICBoYW5kbGVzOiBbXCJuXCIsIFwic1wiXS5tYXAodHlwZSQxKSxcclxuICAgIGlucHV0OiBmdW5jdGlvbih5LCBlKSB7IHJldHVybiB5ICYmIFtbZVswXVswXSwgeVswXV0sIFtlWzFdWzBdLCB5WzFdXV07IH0sXHJcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eSAmJiBbeHlbMF1bMV0sIHh5WzFdWzFdXTsgfVxyXG4gIH07XHJcblxyXG4gIHZhciBYWSA9IHtcclxuICAgIG5hbWU6IFwieHlcIixcclxuICAgIGhhbmRsZXM6IFtcIm5cIiwgXCJlXCIsIFwic1wiLCBcIndcIiwgXCJud1wiLCBcIm5lXCIsIFwic2VcIiwgXCJzd1wiXS5tYXAodHlwZSQxKSxcclxuICAgIGlucHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHk7IH0sXHJcbiAgICBvdXRwdXQ6IGZ1bmN0aW9uKHh5KSB7IHJldHVybiB4eTsgfVxyXG4gIH07XHJcblxyXG4gIHZhciBjdXJzb3JzID0ge1xyXG4gICAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcclxuICAgIHNlbGVjdGlvbjogXCJtb3ZlXCIsXHJcbiAgICBuOiBcIm5zLXJlc2l6ZVwiLFxyXG4gICAgZTogXCJldy1yZXNpemVcIixcclxuICAgIHM6IFwibnMtcmVzaXplXCIsXHJcbiAgICB3OiBcImV3LXJlc2l6ZVwiLFxyXG4gICAgbnc6IFwibndzZS1yZXNpemVcIixcclxuICAgIG5lOiBcIm5lc3ctcmVzaXplXCIsXHJcbiAgICBzZTogXCJud3NlLXJlc2l6ZVwiLFxyXG4gICAgc3c6IFwibmVzdy1yZXNpemVcIlxyXG4gIH07XHJcblxyXG4gIHZhciBmbGlwWCA9IHtcclxuICAgIGU6IFwid1wiLFxyXG4gICAgdzogXCJlXCIsXHJcbiAgICBudzogXCJuZVwiLFxyXG4gICAgbmU6IFwibndcIixcclxuICAgIHNlOiBcInN3XCIsXHJcbiAgICBzdzogXCJzZVwiXHJcbiAgfTtcclxuXHJcbiAgdmFyIGZsaXBZID0ge1xyXG4gICAgbjogXCJzXCIsXHJcbiAgICBzOiBcIm5cIixcclxuICAgIG53OiBcInN3XCIsXHJcbiAgICBuZTogXCJzZVwiLFxyXG4gICAgc2U6IFwibmVcIixcclxuICAgIHN3OiBcIm53XCJcclxuICB9O1xyXG5cclxuICB2YXIgc2lnbnNYID0ge1xyXG4gICAgb3ZlcmxheTogKzEsXHJcbiAgICBzZWxlY3Rpb246ICsxLFxyXG4gICAgbjogbnVsbCxcclxuICAgIGU6ICsxLFxyXG4gICAgczogbnVsbCxcclxuICAgIHc6IC0xLFxyXG4gICAgbnc6IC0xLFxyXG4gICAgbmU6ICsxLFxyXG4gICAgc2U6ICsxLFxyXG4gICAgc3c6IC0xXHJcbiAgfTtcclxuXHJcbiAgdmFyIHNpZ25zWSA9IHtcclxuICAgIG92ZXJsYXk6ICsxLFxyXG4gICAgc2VsZWN0aW9uOiArMSxcclxuICAgIG46IC0xLFxyXG4gICAgZTogbnVsbCxcclxuICAgIHM6ICsxLFxyXG4gICAgdzogbnVsbCxcclxuICAgIG53OiAtMSxcclxuICAgIG5lOiAtMSxcclxuICAgIHNlOiArMSxcclxuICAgIHN3OiArMVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIHR5cGUkMSh0KSB7XHJcbiAgICByZXR1cm4ge3R5cGU6IHR9O1xyXG4gIH1cclxuXHJcbiAgLy8gSWdub3JlIHJpZ2h0LWNsaWNrLCBzaW5jZSB0aGF0IHNob3VsZCBvcGVuIHRoZSBjb250ZXh0IG1lbnUuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdEZpbHRlciQyKCkge1xyXG4gICAgcmV0dXJuICFleHBvcnRzLmV2ZW50LmJ1dHRvbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQkMSgpIHtcclxuICAgIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xyXG4gICAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XHJcbiAgfVxyXG5cclxuICAvLyBMaWtlIGQzLmxvY2FsLCBidXQgd2l0aCB0aGUgbmFtZSDigJxfX2JydXNo4oCdIHJhdGhlciB0aGFuIGF1dG8tZ2VuZXJhdGVkLlxyXG4gIGZ1bmN0aW9uIGxvY2FsJDEobm9kZSkge1xyXG4gICAgd2hpbGUgKCFub2RlLl9fYnJ1c2gpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XHJcbiAgICByZXR1cm4gbm9kZS5fX2JydXNoO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1wdHkkMShleHRlbnQpIHtcclxuICAgIHJldHVybiBleHRlbnRbMF1bMF0gPT09IGV4dGVudFsxXVswXVxyXG4gICAgICAgIHx8IGV4dGVudFswXVsxXSA9PT0gZXh0ZW50WzFdWzFdO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYnJ1c2hTZWxlY3Rpb24obm9kZSkge1xyXG4gICAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xyXG4gICAgcmV0dXJuIHN0YXRlID8gc3RhdGUuZGltLm91dHB1dChzdGF0ZS5zZWxlY3Rpb24pIDogbnVsbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJydXNoWCgpIHtcclxuICAgIHJldHVybiBicnVzaCQxKFgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYnJ1c2hZKCkge1xyXG4gICAgcmV0dXJuIGJydXNoJDEoWSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBicnVzaCgpIHtcclxuICAgIHJldHVybiBicnVzaCQxKFhZKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJydXNoJDEoZGltKSB7XHJcbiAgICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCQxLFxyXG4gICAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIkMixcclxuICAgICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxyXG4gICAgICAgIGhhbmRsZVNpemUgPSA2LFxyXG4gICAgICAgIHRvdWNoZW5kaW5nO1xyXG5cclxuICAgIGZ1bmN0aW9uIGJydXNoKGdyb3VwKSB7XHJcbiAgICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcclxuICAgICAgICAgIC5wcm9wZXJ0eShcIl9fYnJ1c2hcIiwgaW5pdGlhbGl6ZSlcclxuICAgICAgICAuc2VsZWN0QWxsKFwiLm92ZXJsYXlcIilcclxuICAgICAgICAuZGF0YShbdHlwZSQxKFwib3ZlcmxheVwiKV0pO1xyXG5cclxuICAgICAgb3ZlcmxheS5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXHJcbiAgICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXHJcbiAgICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpXHJcbiAgICAgICAgLm1lcmdlKG92ZXJsYXkpXHJcbiAgICAgICAgICAuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGV4dGVudCA9IGxvY2FsJDEodGhpcykuZXh0ZW50O1xyXG4gICAgICAgICAgICBzZWxlY3QodGhpcylcclxuICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZXh0ZW50WzBdWzFdKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBleHRlbnRbMV1bMF0gLSBleHRlbnRbMF1bMF0pXHJcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXHJcbiAgICAgICAgLmRhdGEoW3R5cGUkMShcInNlbGVjdGlvblwiKV0pXHJcbiAgICAgICAgLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pXHJcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNzc3XCIpXHJcbiAgICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXHJcbiAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIiNmZmZcIilcclxuICAgICAgICAgIC5hdHRyKFwic2hhcGUtcmVuZGVyaW5nXCIsIFwiY3Jpc3BFZGdlc1wiKTtcclxuXHJcbiAgICAgIHZhciBoYW5kbGUgPSBncm91cC5zZWxlY3RBbGwoXCIuaGFuZGxlXCIpXHJcbiAgICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XHJcblxyXG4gICAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcImhhbmRsZSBoYW5kbGUtLVwiICsgZC50eXBlOyB9KVxyXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY3Vyc29yc1tkLnR5cGVdOyB9KTtcclxuXHJcbiAgICAgIGdyb3VwXHJcbiAgICAgICAgICAuZWFjaChyZWRyYXcpXHJcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpXHJcbiAgICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXHJcbiAgICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2ggdG91Y2hzdGFydC5icnVzaFwiLCBzdGFydGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xyXG4gICAgICBpZiAoZ3JvdXAuc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgZ3JvdXBcclxuICAgICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXHJcbiAgICAgICAgICAgIC5vbihcImludGVycnVwdC5icnVzaCBlbmQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcclxuICAgICAgICAgICAgLnR3ZWVuKFwiYnJ1c2hcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcclxuICAgICAgICAgICAgICAgICAgZW1pdCA9IGVtaXR0ZXIodGhhdCwgYXJndW1lbnRzKSxcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uMSA9IGRpbS5pbnB1dCh0eXBlb2Ygc2VsZWN0aW9uID09PSBcImZ1bmN0aW9uXCIgPyBzZWxlY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcclxuICAgICAgICAgICAgICAgICAgaSA9IGludGVycG9sYXRlKHNlbGVjdGlvbjAsIHNlbGVjdGlvbjEpO1xyXG5cclxuICAgICAgICAgICAgICBmdW5jdGlvbiB0d2Vlbih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIGVtcHR5JDEoc2VsZWN0aW9uMSkgPyBudWxsIDogaSh0KTtcclxuICAgICAgICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xyXG4gICAgICAgICAgICAgICAgZW1pdC5icnVzaCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgJiYgc2VsZWN0aW9uMSA/IHR3ZWVuIDogdHdlZW4oMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdyb3VwXHJcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcclxuICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGF0Ll9fYnJ1c2gsXHJcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjEgPSBkaW0uaW5wdXQodHlwZW9mIHNlbGVjdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gc2VsZWN0aW9uLmFwcGx5KHRoYXQsIGFyZ3MpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxyXG4gICAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xyXG5cclxuICAgICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XHJcbiAgICAgICAgICAgICAgc3RhdGUuc2VsZWN0aW9uID0gc2VsZWN0aW9uMSA9PSBudWxsIHx8IGVtcHR5JDEoc2VsZWN0aW9uMSkgPyBudWxsIDogc2VsZWN0aW9uMTtcclxuICAgICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcclxuICAgICAgICAgICAgICBlbWl0LnN0YXJ0KCkuYnJ1c2goKS5lbmQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcmVkcmF3KCkge1xyXG4gICAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhpcyksXHJcbiAgICAgICAgICBzZWxlY3Rpb24gPSBsb2NhbCQxKHRoaXMpLnNlbGVjdGlvbjtcclxuXHJcbiAgICAgIGlmIChzZWxlY3Rpb24pIHtcclxuICAgICAgICBncm91cC5zZWxlY3RBbGwoXCIuc2VsZWN0aW9uXCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcclxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIHNlbGVjdGlvblswXVswXSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIHNlbGVjdGlvblswXVsxXSlcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSk7XHJcblxyXG4gICAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5oYW5kbGVcIilcclxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBudWxsKVxyXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlWzBdID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVsxXSAtIGhhbmRsZVNpemUgLyAyIDogc2VsZWN0aW9uWzBdWzFdIC0gaGFuZGxlU2l6ZSAvIDI7IH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlID09PSBcIm5cIiB8fCBkLnR5cGUgPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzBdIC0gc2VsZWN0aW9uWzBdWzBdICsgaGFuZGxlU2l6ZSA6IGhhbmRsZVNpemU7IH0pXHJcbiAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvbiwuaGFuZGxlXCIpXHJcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCBudWxsKVxyXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgbnVsbClcclxuICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxyXG4gICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBudWxsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncykge1xyXG4gICAgICByZXR1cm4gdGhhdC5fX2JydXNoLmVtaXR0ZXIgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gRW1pdHRlcih0aGF0LCBhcmdzKSB7XHJcbiAgICAgIHRoaXMudGhhdCA9IHRoYXQ7XHJcbiAgICAgIHRoaXMuYXJncyA9IGFyZ3M7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSB0aGF0Ll9fYnJ1c2g7XHJcbiAgICAgIHRoaXMuYWN0aXZlID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcclxuICAgICAgYmVmb3Jlc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICgrK3RoaXMuYWN0aXZlID09PSAxKSB0aGlzLnN0YXRlLmVtaXR0ZXIgPSB0aGlzLCB0aGlzLnN0YXJ0aW5nID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICB9LFxyXG4gICAgICBicnVzaDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH0sXHJcbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKC0tdGhpcy5hY3RpdmUgPT09IDApIGRlbGV0ZSB0aGlzLnN0YXRlLmVtaXR0ZXIsIHRoaXMuZW1pdChcImVuZFwiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgZW1pdDogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIGN1c3RvbUV2ZW50KG5ldyBCcnVzaEV2ZW50KGJydXNoLCB0eXBlLCBkaW0ub3V0cHV0KHRoaXMuc3RhdGUuc2VsZWN0aW9uKSksIGxpc3RlbmVycy5hcHBseSwgbGlzdGVuZXJzLCBbdHlwZSwgdGhpcy50aGF0LCB0aGlzLmFyZ3NdKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBzdGFydGVkKCkge1xyXG4gICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzKSB7IGlmIChleHBvcnRzLmV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA8IGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybiBub2V2ZW50JDIoKTsgfVxyXG4gICAgICBlbHNlIGlmICh0b3VjaGVuZGluZykgcmV0dXJuO1xyXG4gICAgICBpZiAoIWZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSByZXR1cm47XHJcblxyXG4gICAgICB2YXIgdGhhdCA9IHRoaXMsXHJcbiAgICAgICAgICB0eXBlID0gZXhwb3J0cy5ldmVudC50YXJnZXQuX19kYXRhX18udHlwZSxcclxuICAgICAgICAgIG1vZGUgPSAoZXhwb3J0cy5ldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoZXhwb3J0cy5ldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcclxuICAgICAgICAgIHNpZ25YID0gZGltID09PSBZID8gbnVsbCA6IHNpZ25zWFt0eXBlXSxcclxuICAgICAgICAgIHNpZ25ZID0gZGltID09PSBYID8gbnVsbCA6IHNpZ25zWVt0eXBlXSxcclxuICAgICAgICAgIHN0YXRlID0gbG9jYWwkMSh0aGF0KSxcclxuICAgICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcclxuICAgICAgICAgIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbixcclxuICAgICAgICAgIFcgPSBleHRlbnRbMF1bMF0sIHcwLCB3MSxcclxuICAgICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcclxuICAgICAgICAgIEUgPSBleHRlbnRbMV1bMF0sIGUwLCBlMSxcclxuICAgICAgICAgIFMgPSBleHRlbnRbMV1bMV0sIHMwLCBzMSxcclxuICAgICAgICAgIGR4LFxyXG4gICAgICAgICAgZHksXHJcbiAgICAgICAgICBtb3ZpbmcsXHJcbiAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZICYmIGV4cG9ydHMuZXZlbnQuc2hpZnRLZXksXHJcbiAgICAgICAgICBsb2NrWCxcclxuICAgICAgICAgIGxvY2tZLFxyXG4gICAgICAgICAgcG9pbnQwID0gbW91c2UodGhhdCksXHJcbiAgICAgICAgICBwb2ludCA9IHBvaW50MCxcclxuICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cykuYmVmb3Jlc3RhcnQoKTtcclxuXHJcbiAgICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xyXG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcclxuICAgICAgICAgIFt3MCA9IGRpbSA9PT0gWSA/IFcgOiBwb2ludDBbMF0sIG4wID0gZGltID09PSBYID8gTiA6IHBvaW50MFsxXV0sXHJcbiAgICAgICAgICBbZTAgPSBkaW0gPT09IFkgPyBFIDogdzAsIHMwID0gZGltID09PSBYID8gUyA6IG4wXVxyXG4gICAgICAgIF07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdzAgPSBzZWxlY3Rpb25bMF1bMF07XHJcbiAgICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XHJcbiAgICAgICAgZTAgPSBzZWxlY3Rpb25bMV1bMF07XHJcbiAgICAgICAgczAgPSBzZWxlY3Rpb25bMV1bMV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHcxID0gdzA7XHJcbiAgICAgIG4xID0gbjA7XHJcbiAgICAgIGUxID0gZTA7XHJcbiAgICAgIHMxID0gczA7XHJcblxyXG4gICAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcclxuICAgICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpO1xyXG5cclxuICAgICAgdmFyIG92ZXJsYXkgPSBncm91cC5zZWxlY3RBbGwoXCIub3ZlcmxheVwiKVxyXG4gICAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XHJcblxyXG4gICAgICBpZiAoZXhwb3J0cy5ldmVudC50b3VjaGVzKSB7XHJcbiAgICAgICAgZ3JvdXBcclxuICAgICAgICAgICAgLm9uKFwidG91Y2htb3ZlLmJydXNoXCIsIG1vdmVkLCB0cnVlKVxyXG4gICAgICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXhwb3J0cy5ldmVudC52aWV3KVxyXG4gICAgICAgICAgICAub24oXCJrZXlkb3duLmJydXNoXCIsIGtleWRvd25lZCwgdHJ1ZSlcclxuICAgICAgICAgICAgLm9uKFwia2V5dXAuYnJ1c2hcIiwga2V5dXBwZWQsIHRydWUpXHJcbiAgICAgICAgICAgIC5vbihcIm1vdXNlbW92ZS5icnVzaFwiLCBtb3ZlZCwgdHJ1ZSlcclxuICAgICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIGRyYWdEaXNhYmxlKGV4cG9ydHMuZXZlbnQudmlldyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5vcHJvcGFnYXRpb24kMigpO1xyXG4gICAgICBpbnRlcnJ1cHQodGhhdCk7XHJcbiAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xyXG4gICAgICBlbWl0LnN0YXJ0KCk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBtb3ZlZCgpIHtcclxuICAgICAgICB2YXIgcG9pbnQxID0gbW91c2UodGhhdCk7XHJcbiAgICAgICAgaWYgKHNoaWZ0aW5nICYmICFsb2NrWCAmJiAhbG9ja1kpIHtcclxuICAgICAgICAgIGlmIChNYXRoLmFicyhwb2ludDFbMF0gLSBwb2ludFswXSkgPiBNYXRoLmFicyhwb2ludDFbMV0gLSBwb2ludFsxXSkpIGxvY2tZID0gdHJ1ZTtcclxuICAgICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb2ludCA9IHBvaW50MTtcclxuICAgICAgICBtb3ZpbmcgPSB0cnVlO1xyXG4gICAgICAgIG5vZXZlbnQkMigpO1xyXG4gICAgICAgIG1vdmUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbW92ZSgpIHtcclxuICAgICAgICB2YXIgdDtcclxuXHJcbiAgICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcclxuICAgICAgICBkeSA9IHBvaW50WzFdIC0gcG9pbnQwWzFdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcclxuICAgICAgICAgIGNhc2UgTU9ERV9TUEFDRTpcclxuICAgICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XHJcbiAgICAgICAgICAgIGlmIChzaWduWCkgZHggPSBNYXRoLm1heChXIC0gdzAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCArIGR4LCBlMSA9IGUwICsgZHg7XHJcbiAgICAgICAgICAgIGlmIChzaWduWSkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwICsgZHk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY2FzZSBNT0RFX0hBTkRMRToge1xyXG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25YID4gMCkgZHggPSBNYXRoLm1heChXIC0gZTAsIE1hdGgubWluKEUgLSBlMCwgZHgpKSwgdzEgPSB3MCwgZTEgPSBlMCArIGR4O1xyXG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBkeSA9IE1hdGgubWF4KE4gLSBuMCwgTWF0aC5taW4oUyAtIG4wLCBkeSkpLCBuMSA9IG4wICsgZHksIHMxID0gczA7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcclxuICAgICAgICAgICAgaWYgKHNpZ25YKSB3MSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIHcwIC0gZHggKiBzaWduWCkpLCBlMSA9IE1hdGgubWF4KFcsIE1hdGgubWluKEUsIGUwICsgZHggKiBzaWduWCkpO1xyXG4gICAgICAgICAgICBpZiAoc2lnblkpIG4xID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgbjAgLSBkeSAqIHNpZ25ZKSksIHMxID0gTWF0aC5tYXgoTiwgTWF0aC5taW4oUywgczAgKyBkeSAqIHNpZ25ZKSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGUxIDwgdzEpIHtcclxuICAgICAgICAgIHNpZ25YICo9IC0xO1xyXG4gICAgICAgICAgdCA9IHcwLCB3MCA9IGUwLCBlMCA9IHQ7XHJcbiAgICAgICAgICB0ID0gdzEsIHcxID0gZTEsIGUxID0gdDtcclxuICAgICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzMSA8IG4xKSB7XHJcbiAgICAgICAgICBzaWduWSAqPSAtMTtcclxuICAgICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xyXG4gICAgICAgICAgdCA9IG4xLCBuMSA9IHMxLCBzMSA9IHQ7XHJcbiAgICAgICAgICBpZiAodHlwZSBpbiBmbGlwWSkgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZSA9IGZsaXBZW3R5cGVdXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcclxuXHJcbiAgICAgICAgaWYgKGxvY2tYKSB3MSA9IHNlbGVjdGlvblswXVswXSwgZTEgPSBzZWxlY3Rpb25bMV1bMF07XHJcbiAgICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XHJcblxyXG4gICAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXHJcbiAgICAgICAgICAgIHx8IHNlbGVjdGlvblswXVsxXSAhPT0gbjFcclxuICAgICAgICAgICAgfHwgc2VsZWN0aW9uWzFdWzBdICE9PSBlMVxyXG4gICAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XHJcbiAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBbW3cxLCBuMV0sIFtlMSwgczFdXTtcclxuICAgICAgICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xyXG4gICAgICAgICAgZW1pdC5icnVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZW5kZWQoKSB7XHJcbiAgICAgICAgbm9wcm9wYWdhdGlvbiQyKCk7XHJcbiAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcykge1xyXG4gICAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQudG91Y2hlcy5sZW5ndGgpIHJldHVybjtcclxuICAgICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcclxuICAgICAgICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCA1MDApOyAvLyBHaG9zdCBjbGlja3MgYXJlIGRlbGF5ZWQhXHJcbiAgICAgICAgICBncm91cC5vbihcInRvdWNobW92ZS5icnVzaCB0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCBudWxsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZHJhZ0VuYWJsZShleHBvcnRzLmV2ZW50LnZpZXcsIG1vdmluZyk7XHJcbiAgICAgICAgICB2aWV3Lm9uKFwia2V5ZG93bi5icnVzaCBrZXl1cC5icnVzaCBtb3VzZW1vdmUuYnJ1c2ggbW91c2V1cC5icnVzaFwiLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JvdXAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwiYWxsXCIpO1xyXG4gICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLm92ZXJsYXkpO1xyXG4gICAgICAgIGlmIChlbXB0eSQxKHNlbGVjdGlvbikpIHN0YXRlLnNlbGVjdGlvbiA9IG51bGwsIHJlZHJhdy5jYWxsKHRoYXQpO1xyXG4gICAgICAgIGVtaXQuZW5kKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcclxuICAgICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxyXG4gICAgICAgICAgICBzaGlmdGluZyA9IHNpZ25YICYmIHNpZ25ZO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXHJcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xyXG4gICAgICAgICAgICAgIGlmIChzaWduWCkgZTAgPSBlMSAtIGR4ICogc2lnblgsIHcwID0gdzEgKyBkeCAqIHNpZ25YO1xyXG4gICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xyXG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcclxuICAgICAgICAgICAgICBtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFOyB0YWtlcyBwcmlvcml0eSBvdmVyIEFMVFxyXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcclxuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxIC0gZHg7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MSAtIGR4O1xyXG4gICAgICAgICAgICAgIGlmIChzaWduWSA8IDApIHMwID0gczEgLSBkeTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xIC0gZHk7XHJcbiAgICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XHJcbiAgICAgICAgICAgICAgb3ZlcmxheS5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnMuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICBtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkZWZhdWx0OiByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vZXZlbnQkMigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBrZXl1cHBlZCgpIHtcclxuICAgICAgICBzd2l0Y2ggKGV4cG9ydHMuZXZlbnQua2V5Q29kZSkge1xyXG4gICAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxyXG4gICAgICAgICAgICBpZiAoc2hpZnRpbmcpIHtcclxuICAgICAgICAgICAgICBsb2NrWCA9IGxvY2tZID0gc2hpZnRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxyXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcclxuICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XHJcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xyXG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0hBTkRMRTtcclxuICAgICAgICAgICAgICBtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXNlIDMyOiB7IC8vIFNQQUNFXHJcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX1NQQUNFKSB7XHJcbiAgICAgICAgICAgICAgaWYgKGV4cG9ydHMuZXZlbnQuYWx0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcclxuICAgICAgICAgICAgICAgIGlmIChzaWduWSkgczAgPSBzMSAtIGR5ICogc2lnblksIG4wID0gbjEgKyBkeSAqIHNpZ25ZO1xyXG4gICAgICAgICAgICAgICAgbW9kZSA9IE1PREVfQ0VOVEVSO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XHJcbiAgICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGVdKTtcclxuICAgICAgICAgICAgICBtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBkZWZhdWx0OiByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vZXZlbnQkMigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xyXG4gICAgICBzdGF0ZS5leHRlbnQgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgc3RhdGUuZGltID0gZGltO1xyXG4gICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgYnJ1c2guZXh0ZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEwKFtbK19bMF1bMF0sICtfWzBdWzFdXSwgWytfWzFdWzBdLCArX1sxXVsxXV1dKSwgYnJ1c2gpIDogZXh0ZW50O1xyXG4gICAgfTtcclxuXHJcbiAgICBicnVzaC5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGZpbHRlciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTAoISFfKSwgYnJ1c2gpIDogZmlsdGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChoYW5kbGVTaXplID0gK18sIGJydXNoKSA6IGhhbmRsZVNpemU7XHJcbiAgICB9O1xyXG5cclxuICAgIGJydXNoLm9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbGlzdGVuZXJzID8gYnJ1c2ggOiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGJydXNoO1xyXG4gIH1cclxuXHJcbiAgdmFyIGNvcyA9IE1hdGguY29zO1xyXG4gIHZhciBzaW4gPSBNYXRoLnNpbjtcclxuICB2YXIgcGkkMyA9IE1hdGguUEk7XHJcbiAgdmFyIGhhbGZQaSQyID0gcGkkMyAvIDI7XHJcbiAgdmFyIHRhdSQzID0gcGkkMyAqIDI7XHJcbiAgdmFyIG1heCQxID0gTWF0aC5tYXg7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbXBhcmVWYWx1ZShjb21wYXJlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZShcclxuICAgICAgICBhLnNvdXJjZS52YWx1ZSArIGEudGFyZ2V0LnZhbHVlLFxyXG4gICAgICAgIGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWVcclxuICAgICAgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjaG9yZCgpIHtcclxuICAgIHZhciBwYWRBbmdsZSA9IDAsXHJcbiAgICAgICAgc29ydEdyb3VwcyA9IG51bGwsXHJcbiAgICAgICAgc29ydFN1Ymdyb3VwcyA9IG51bGwsXHJcbiAgICAgICAgc29ydENob3JkcyA9IG51bGw7XHJcblxyXG4gICAgZnVuY3Rpb24gY2hvcmQobWF0cml4KSB7XHJcbiAgICAgIHZhciBuID0gbWF0cml4Lmxlbmd0aCxcclxuICAgICAgICAgIGdyb3VwU3VtcyA9IFtdLFxyXG4gICAgICAgICAgZ3JvdXBJbmRleCA9IHJhbmdlKG4pLFxyXG4gICAgICAgICAgc3ViZ3JvdXBJbmRleCA9IFtdLFxyXG4gICAgICAgICAgY2hvcmRzID0gW10sXHJcbiAgICAgICAgICBncm91cHMgPSBjaG9yZHMuZ3JvdXBzID0gbmV3IEFycmF5KG4pLFxyXG4gICAgICAgICAgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG4gKiBuKSxcclxuICAgICAgICAgIGssXHJcbiAgICAgICAgICB4LFxyXG4gICAgICAgICAgeDAsXHJcbiAgICAgICAgICBkeCxcclxuICAgICAgICAgIGksXHJcbiAgICAgICAgICBqO1xyXG5cclxuICAgICAgLy8gQ29tcHV0ZSB0aGUgc3VtLlxyXG4gICAgICBrID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xyXG4gICAgICAgIHggPSAwLCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XHJcbiAgICAgICAgICB4ICs9IG1hdHJpeFtpXVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3JvdXBTdW1zLnB1c2goeCk7XHJcbiAgICAgICAgc3ViZ3JvdXBJbmRleC5wdXNoKHJhbmdlKG4pKTtcclxuICAgICAgICBrICs9IHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNvcnQgZ3JvdXBz4oCmXHJcbiAgICAgIGlmIChzb3J0R3JvdXBzKSBncm91cEluZGV4LnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBTb3J0IHN1Ymdyb3Vwc+KAplxyXG4gICAgICBpZiAoc29ydFN1Ymdyb3Vwcykgc3ViZ3JvdXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGQsIGkpIHtcclxuICAgICAgICBkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICAgICAgcmV0dXJuIHNvcnRTdWJncm91cHMobWF0cml4W2ldW2FdLCBtYXRyaXhbaV1bYl0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbnZlcnQgdGhlIHN1bSB0byBzY2FsaW5nIGZhY3RvciBmb3IgWzAsIDJwaV0uXHJcbiAgICAgIC8vIFRPRE8gQWxsb3cgc3RhcnQgYW5kIGVuZCBhbmdsZSB0byBiZSBzcGVjaWZpZWQ/XHJcbiAgICAgIC8vIFRPRE8gQWxsb3cgcGFkZGluZyB0byBiZSBzcGVjaWZpZWQgYXMgcGVyY2VudGFnZT9cclxuICAgICAgayA9IG1heCQxKDAsIHRhdSQzIC0gcGFkQW5nbGUgKiBuKSAvIGs7XHJcbiAgICAgIGR4ID0gayA/IHBhZEFuZ2xlIDogdGF1JDMgLyBuO1xyXG5cclxuICAgICAgLy8gQ29tcHV0ZSB0aGUgc3RhcnQgYW5kIGVuZCBhbmdsZSBmb3IgZWFjaCBncm91cCBhbmQgc3ViZ3JvdXAuXHJcbiAgICAgIC8vIE5vdGU6IE9wZXJhIGhhcyBhIGJ1ZyByZW9yZGVyaW5nIG9iamVjdCBsaXRlcmFsIHByb3BlcnRpZXMhXHJcbiAgICAgIHggPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgeDAgPSB4LCBqID0gLTE7IHdoaWxlICgrK2ogPCBuKSB7XHJcbiAgICAgICAgICB2YXIgZGkgPSBncm91cEluZGV4W2ldLFxyXG4gICAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXHJcbiAgICAgICAgICAgICAgdiA9IG1hdHJpeFtkaV1bZGpdLFxyXG4gICAgICAgICAgICAgIGEwID0geCxcclxuICAgICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XHJcbiAgICAgICAgICBzdWJncm91cHNbZGogKiBuICsgZGldID0ge1xyXG4gICAgICAgICAgICBpbmRleDogZGksXHJcbiAgICAgICAgICAgIHN1YmluZGV4OiBkaixcclxuICAgICAgICAgICAgc3RhcnRBbmdsZTogYTAsXHJcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBhMSxcclxuICAgICAgICAgICAgdmFsdWU6IHZcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdyb3Vwc1tkaV0gPSB7XHJcbiAgICAgICAgICBpbmRleDogZGksXHJcbiAgICAgICAgICBzdGFydEFuZ2xlOiB4MCxcclxuICAgICAgICAgIGVuZEFuZ2xlOiB4LFxyXG4gICAgICAgICAgdmFsdWU6IGdyb3VwU3Vtc1tkaV1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHggKz0gZHg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIGNob3JkcyBmb3IgZWFjaCAobm9uLWVtcHR5KSBzdWJncm91cC1zdWJncm91cCBsaW5rLlxyXG4gICAgICBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgaiA9IGkgLSAxOyB3aGlsZSAoKytqIDwgbikge1xyXG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHN1Ymdyb3Vwc1tqICogbiArIGldLFxyXG4gICAgICAgICAgICAgIHRhcmdldCA9IHN1Ymdyb3Vwc1tpICogbiArIGpdO1xyXG4gICAgICAgICAgaWYgKHNvdXJjZS52YWx1ZSB8fCB0YXJnZXQudmFsdWUpIHtcclxuICAgICAgICAgICAgY2hvcmRzLnB1c2goc291cmNlLnZhbHVlIDwgdGFyZ2V0LnZhbHVlXHJcbiAgICAgICAgICAgICAgICA/IHtzb3VyY2U6IHRhcmdldCwgdGFyZ2V0OiBzb3VyY2V9XHJcbiAgICAgICAgICAgICAgICA6IHtzb3VyY2U6IHNvdXJjZSwgdGFyZ2V0OiB0YXJnZXR9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBzb3J0Q2hvcmRzID8gY2hvcmRzLnNvcnQoc29ydENob3JkcykgOiBjaG9yZHM7XHJcbiAgICB9XHJcblxyXG4gICAgY2hvcmQucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZEFuZ2xlID0gbWF4JDEoMCwgXyksIGNob3JkKSA6IHBhZEFuZ2xlO1xyXG4gICAgfTtcclxuXHJcbiAgICBjaG9yZC5zb3J0R3JvdXBzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0R3JvdXBzID0gXywgY2hvcmQpIDogc29ydEdyb3VwcztcclxuICAgIH07XHJcblxyXG4gICAgY2hvcmQuc29ydFN1Ymdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc29ydFN1Ymdyb3VwcyA9IF8sIGNob3JkKSA6IHNvcnRTdWJncm91cHM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IHNvcnRDaG9yZHMgPSBudWxsIDogKHNvcnRDaG9yZHMgPSBjb21wYXJlVmFsdWUoXykpLl8gPSBfLCBjaG9yZCkgOiBzb3J0Q2hvcmRzICYmIHNvcnRDaG9yZHMuXztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNob3JkO1xyXG4gIH1cclxuXHJcbiAgdmFyIHNsaWNlJDUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4gIGZ1bmN0aW9uIGNvbnN0YW50JDExKHgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHg7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdFNvdXJjZShkKSB7XHJcbiAgICByZXR1cm4gZC5zb3VyY2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0VGFyZ2V0KGQpIHtcclxuICAgIHJldHVybiBkLnRhcmdldDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlZmF1bHRSYWRpdXMkMShkKSB7XHJcbiAgICByZXR1cm4gZC5yYWRpdXM7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWZhdWx0U3RhcnRBbmdsZShkKSB7XHJcbiAgICByZXR1cm4gZC5zdGFydEFuZ2xlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVmYXVsdEVuZEFuZ2xlKGQpIHtcclxuICAgIHJldHVybiBkLmVuZEFuZ2xlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmliYm9uKCkge1xyXG4gICAgdmFyIHNvdXJjZSA9IGRlZmF1bHRTb3VyY2UsXHJcbiAgICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcclxuICAgICAgICByYWRpdXMgPSBkZWZhdWx0UmFkaXVzJDEsXHJcbiAgICAgICAgc3RhcnRBbmdsZSA9IGRlZmF1bHRTdGFydEFuZ2xlLFxyXG4gICAgICAgIGVuZEFuZ2xlID0gZGVmYXVsdEVuZEFuZ2xlLFxyXG4gICAgICAgIGNvbnRleHQgPSBudWxsO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJpYmJvbigpIHtcclxuICAgICAgdmFyIGJ1ZmZlcixcclxuICAgICAgICAgIGFyZ3YgPSBzbGljZSQ1LmNhbGwoYXJndW1lbnRzKSxcclxuICAgICAgICAgIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksXHJcbiAgICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxyXG4gICAgICAgICAgc3IgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLFxyXG4gICAgICAgICAgc2EwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQyLFxyXG4gICAgICAgICAgc2ExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMixcclxuICAgICAgICAgIHN4MCA9IHNyICogY29zKHNhMCksXHJcbiAgICAgICAgICBzeTAgPSBzciAqIHNpbihzYTApLFxyXG4gICAgICAgICAgdHIgPSArcmFkaXVzLmFwcGx5KHRoaXMsIChhcmd2WzBdID0gdCwgYXJndikpLFxyXG4gICAgICAgICAgdGEwID0gc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd2KSAtIGhhbGZQaSQyLFxyXG4gICAgICAgICAgdGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGkkMjtcclxuXHJcbiAgICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcclxuXHJcbiAgICAgIGNvbnRleHQubW92ZVRvKHN4MCwgc3kwKTtcclxuICAgICAgY29udGV4dC5hcmMoMCwgMCwgc3IsIHNhMCwgc2ExKTtcclxuICAgICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7IC8vIFRPRE8gc3IgIT09IHRyP1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCB0ciAqIGNvcyh0YTApLCB0ciAqIHNpbih0YTApKTtcclxuICAgICAgICBjb250ZXh0LmFyYygwLCAwLCB0ciwgdGEwLCB0YTEpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbygwLCAwLCBzeDAsIHN5MCk7XHJcbiAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IHJhZGl1cztcclxuICAgIH07XHJcblxyXG4gICAgcmliYm9uLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XHJcbiAgICB9O1xyXG5cclxuICAgIHJpYmJvbi5lbmRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDExKCtfKSwgcmliYm9uKSA6IGVuZEFuZ2xlO1xyXG4gICAgfTtcclxuXHJcbiAgICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3VyY2UgPSBfLCByaWJib24pIDogc291cmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICByaWJib24udGFyZ2V0ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xyXG4gICAgfTtcclxuXHJcbiAgICByaWJib24uY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXyksIHJpYmJvbikgOiBjb250ZXh0O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmliYm9uO1xyXG4gIH1cclxuXHJcbiAgLy8gQWRkcyBmbG9hdGluZyBwb2ludCBudW1iZXJzIHdpdGggdHdpY2UgdGhlIG5vcm1hbCBwcmVjaXNpb24uXHJcbiAgLy8gUmVmZXJlbmNlOiBKLiBSLiBTaGV3Y2h1aywgQWRhcHRpdmUgUHJlY2lzaW9uIEZsb2F0aW5nLVBvaW50IEFyaXRobWV0aWMgYW5kXHJcbiAgLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxyXG4gIC8vIDMwNeKAkzM2MyAoMTk5NykuXHJcbiAgLy8gQ29kZSBhZGFwdGVkIGZyb20gR2VvZ3JhcGhpY0xpYiBieSBDaGFybGVzIEYuIEYuIEthcm5leSxcclxuICAvLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXHJcblxyXG4gIGZ1bmN0aW9uIGFkZGVyKCkge1xyXG4gICAgcmV0dXJuIG5ldyBBZGRlcjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIEFkZGVyKCkge1xyXG4gICAgdGhpcy5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgQWRkZXIucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IEFkZGVyLFxyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLnMgPSAvLyByb3VuZGVkIHZhbHVlXHJcbiAgICAgIHRoaXMudCA9IDA7IC8vIGV4YWN0IGVycm9yXHJcbiAgICB9LFxyXG4gICAgYWRkOiBmdW5jdGlvbih5KSB7XHJcbiAgICAgIGFkZCQxKHRlbXAsIHksIHRoaXMudCk7XHJcbiAgICAgIGFkZCQxKHRoaXMsIHRlbXAucywgdGhpcy5zKTtcclxuICAgICAgaWYgKHRoaXMucykgdGhpcy50ICs9IHRlbXAudDtcclxuICAgICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XHJcbiAgICB9LFxyXG4gICAgdmFsdWVPZjogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnM7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHRlbXAgPSBuZXcgQWRkZXI7XHJcblxyXG4gIGZ1bmN0aW9uIGFkZCQxKGFkZGVyLCBhLCBiKSB7XHJcbiAgICB2YXIgeCA9IGFkZGVyLnMgPSBhICsgYixcclxuICAgICAgICBidiA9IHggLSBhLFxyXG4gICAgICAgIGF2ID0geCAtIGJ2O1xyXG4gICAgYWRkZXIudCA9IChhIC0gYXYpICsgKGIgLSBidik7XHJcbiAgfVxyXG5cclxuICB2YXIgZXBzaWxvbiQ0ID0gMWUtNjtcclxuICB2YXIgZXBzaWxvbjIkMiA9IDFlLTEyO1xyXG4gIHZhciBwaSQ0ID0gTWF0aC5QSTtcclxuICB2YXIgaGFsZlBpJDMgPSBwaSQ0IC8gMjtcclxuICB2YXIgcXVhcnRlclBpID0gcGkkNCAvIDQ7XHJcbiAgdmFyIHRhdSQ0ID0gcGkkNCAqIDI7XHJcblxyXG4gIHZhciBkZWdyZWVzJDEgPSAxODAgLyBwaSQ0O1xyXG4gIHZhciByYWRpYW5zID0gcGkkNCAvIDE4MDtcclxuXHJcbiAgdmFyIGFicyA9IE1hdGguYWJzO1xyXG4gIHZhciBhdGFuID0gTWF0aC5hdGFuO1xyXG4gIHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XHJcbiAgdmFyIGNvcyQxID0gTWF0aC5jb3M7XHJcbiAgdmFyIGNlaWwgPSBNYXRoLmNlaWw7XHJcbiAgdmFyIGV4cCA9IE1hdGguZXhwO1xyXG4gIHZhciBsb2ckMSA9IE1hdGgubG9nO1xyXG4gIHZhciBwb3ckMSA9IE1hdGgucG93O1xyXG4gIHZhciBzaW4kMSA9IE1hdGguc2luO1xyXG4gIHZhciBzaWduJDEgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4geCA+IDAgPyAxIDogeCA8IDAgPyAtMSA6IDA7IH07XHJcbiAgdmFyIHNxcnQkMSA9IE1hdGguc3FydDtcclxuICB2YXIgdGFuID0gTWF0aC50YW47XHJcblxyXG4gIGZ1bmN0aW9uIGFjb3MoeCkge1xyXG4gICAgcmV0dXJuIHggPiAxID8gMCA6IHggPCAtMSA/IHBpJDQgOiBNYXRoLmFjb3MoeCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhc2luJDEoeCkge1xyXG4gICAgcmV0dXJuIHggPiAxID8gaGFsZlBpJDMgOiB4IDwgLTEgPyAtaGFsZlBpJDMgOiBNYXRoLmFzaW4oeCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYXZlcnNpbih4KSB7XHJcbiAgICByZXR1cm4gKHggPSBzaW4kMSh4IC8gMikpICogeDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vb3AkMigpIHt9XHJcblxyXG4gIGZ1bmN0aW9uIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJ5LCBzdHJlYW0pIHtcclxuICAgIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcclxuICAgICAgc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBzdHJlYW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XHJcbiAgICBGZWF0dXJlOiBmdW5jdGlvbihmZWF0dXJlLCBzdHJlYW0pIHtcclxuICAgICAgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZS5nZW9tZXRyeSwgc3RyZWFtKTtcclxuICAgIH0sXHJcbiAgICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcclxuICAgICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XHJcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgc3RyZWFtKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xyXG4gICAgU3BoZXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xyXG4gICAgICBzdHJlYW0uc3BoZXJlKCk7XHJcbiAgICB9LFxyXG4gICAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XHJcbiAgICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcclxuICAgICAgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xyXG4gICAgfSxcclxuICAgIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XHJcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgb2JqZWN0ID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChvYmplY3RbMF0sIG9iamVjdFsxXSwgb2JqZWN0WzJdKTtcclxuICAgIH0sXHJcbiAgICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xyXG4gICAgICBzdHJlYW1MaW5lKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtLCAwKTtcclxuICAgIH0sXHJcbiAgICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XHJcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcclxuICAgIH0sXHJcbiAgICBQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xyXG4gICAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcclxuICAgIH0sXHJcbiAgICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XHJcbiAgICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgc3RyZWFtKTtcclxuICAgIH0sXHJcbiAgICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XHJcbiAgICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cmllc1tpXSwgc3RyZWFtKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xyXG4gICAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aCAtIGNsb3NlZCwgY29vcmRpbmF0ZTtcclxuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcclxuICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcclxuICAgIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XHJcbiAgICBzdHJlYW0ucG9seWdvblN0YXJ0KCk7XHJcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcclxuICAgIHN0cmVhbS5wb2x5Z29uRW5kKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZW9TdHJlYW0ob2JqZWN0LCBzdHJlYW0pIHtcclxuICAgIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcclxuICAgICAgc3RyZWFtT2JqZWN0VHlwZVtvYmplY3QudHlwZV0ob2JqZWN0LCBzdHJlYW0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcclxuXHJcbiAgdmFyIGFyZWFTdW0gPSBhZGRlcigpO1xyXG4gIHZhciBsYW1iZGEwMDtcclxuICB2YXIgcGhpMDA7XHJcbiAgdmFyIGxhbWJkYTA7XHJcbiAgdmFyIGNvc1BoaTA7XHJcbiAgdmFyIHNpblBoaTA7XHJcbiAgdmFyIGFyZWFTdHJlYW0gPSB7XHJcbiAgICBwb2ludDogbm9vcCQyLFxyXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXHJcbiAgICBsaW5lRW5kOiBub29wJDIsXHJcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBhcmVhUmluZ1N1bS5yZXNldCgpO1xyXG4gICAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XHJcbiAgICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xyXG4gICAgfSxcclxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgYXJlYVJpbmcgPSArYXJlYVJpbmdTdW07XHJcbiAgICAgIGFyZWFTdW0uYWRkKGFyZWFSaW5nIDwgMCA/IHRhdSQ0ICsgYXJlYVJpbmcgOiBhcmVhUmluZyk7XHJcbiAgICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5saW5lRW5kID0gdGhpcy5wb2ludCA9IG5vb3AkMjtcclxuICAgIH0sXHJcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBhcmVhU3VtLmFkZCh0YXUkNCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcclxuICAgIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xyXG4gICAgYXJlYVBvaW50KGxhbWJkYTAwLCBwaGkwMCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xyXG4gICAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludDtcclxuICAgIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcclxuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcclxuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3MkMShwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbiQxKHBoaSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcclxuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcclxuICAgIHBoaSA9IHBoaSAvIDIgKyBxdWFydGVyUGk7IC8vIGhhbGYgdGhlIGFuZ3VsYXIgZGlzdGFuY2UgZnJvbSBzb3V0aCBwb2xlXHJcblxyXG4gICAgLy8gU3BoZXJpY2FsIGV4Y2VzcyBFIGZvciBhIHNwaGVyaWNhbCB0cmlhbmdsZSB3aXRoIHZlcnRpY2VzOiBzb3V0aCBwb2xlLFxyXG4gICAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcclxuICAgIC8vIHRoZW9yZW0uICBTZWUgVG9kaHVudGVyLCBTcGhlcmljYWwgVHJpZy4gKDE4NzEpLCBTZWMuIDEwMywgRXEuICgyKS5cclxuICAgIHZhciBkTGFtYmRhID0gbGFtYmRhIC0gbGFtYmRhMCxcclxuICAgICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcclxuICAgICAgICBhZExhbWJkYSA9IHNkTGFtYmRhICogZExhbWJkYSxcclxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxyXG4gICAgICAgIHNpblBoaSA9IHNpbiQxKHBoaSksXHJcbiAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGksXHJcbiAgICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zJDEoYWRMYW1iZGEpLFxyXG4gICAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4kMShhZExhbWJkYSk7XHJcbiAgICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xyXG5cclxuICAgIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cclxuICAgIGxhbWJkYTAgPSBsYW1iZGEsIGNvc1BoaTAgPSBjb3NQaGksIHNpblBoaTAgPSBzaW5QaGk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhcmVhJDIob2JqZWN0KSB7XHJcbiAgICBhcmVhU3VtLnJlc2V0KCk7XHJcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBhcmVhU3RyZWFtKTtcclxuICAgIHJldHVybiBhcmVhU3VtICogMjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcclxuICAgIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luJDEoY2FydGVzaWFuWzJdKV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XHJcbiAgICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyQxKHBoaSk7XHJcbiAgICByZXR1cm4gW2Nvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSldO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2FydGVzaWFuRG90KGEsIGIpIHtcclxuICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Dcm9zcyhhLCBiKSB7XHJcbiAgICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyByZXR1cm4gYVxyXG4gIGZ1bmN0aW9uIGNhcnRlc2lhbkFkZEluUGxhY2UoYSwgYikge1xyXG4gICAgYVswXSArPSBiWzBdLCBhWzFdICs9IGJbMV0sIGFbMl0gKz0gYlsyXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNhcnRlc2lhblNjYWxlKHZlY3Rvciwgaykge1xyXG4gICAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcclxuICB9XHJcblxyXG4gIC8vIFRPRE8gcmV0dXJuIGRcclxuICBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGQpIHtcclxuICAgIHZhciBsID0gc3FydCQxKGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XHJcbiAgICBkWzBdIC89IGwsIGRbMV0gLz0gbCwgZFsyXSAvPSBsO1xyXG4gIH1cclxuXHJcbnZhciAgIGxhbWJkYTAkMTtcclxuICB2YXIgcGhpMDtcclxuICB2YXIgbGFtYmRhMTtcclxuICB2YXIgcGhpMTtcclxuICB2YXIgbGFtYmRhMjtcclxudmFyICAgbGFtYmRhMDAkMTtcclxudmFyICAgcGhpMDAkMTtcclxuICB2YXIgcDA7XHJcbiAgdmFyIGRlbHRhU3VtID0gYWRkZXIoKTtcclxuICB2YXIgcmFuZ2VzO1xyXG52YXIgICByYW5nZSQxO1xyXG4gIHZhciBib3VuZHNTdHJlYW0gPSB7XHJcbiAgICBwb2ludDogYm91bmRzUG9pbnQsXHJcbiAgICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcclxuICAgIGxpbmVFbmQ6IGJvdW5kc0xpbmVFbmQsXHJcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XHJcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lU3RhcnQgPSBib3VuZHNSaW5nU3RhcnQ7XHJcbiAgICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzUmluZ0VuZDtcclxuICAgICAgZGVsdGFTdW0ucmVzZXQoKTtcclxuICAgICAgYXJlYVN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcclxuICAgIH0sXHJcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgYXJlYVN0cmVhbS5wb2x5Z29uRW5kKCk7XHJcbiAgICAgIGJvdW5kc1N0cmVhbS5wb2ludCA9IGJvdW5kc1BvaW50O1xyXG4gICAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xyXG4gICAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc0xpbmVFbmQ7XHJcbiAgICAgIGlmIChhcmVhUmluZ1N1bSA8IDApIGxhbWJkYTAkMSA9IC0obGFtYmRhMSA9IDE4MCksIHBoaTAgPSAtKHBoaTEgPSA5MCk7XHJcbiAgICAgIGVsc2UgaWYgKGRlbHRhU3VtID4gZXBzaWxvbiQ0KSBwaGkxID0gOTA7XHJcbiAgICAgIGVsc2UgaWYgKGRlbHRhU3VtIDwgLWVwc2lsb24kNCkgcGhpMCA9IC05MDtcclxuICAgICAgcmFuZ2UkMVswXSA9IGxhbWJkYTAkMSwgcmFuZ2UkMVsxXSA9IGxhbWJkYTE7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpIHtcclxuICAgIHJhbmdlcy5wdXNoKHJhbmdlJDEgPSBbbGFtYmRhMCQxID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XHJcbiAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcclxuICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICB2YXIgcCA9IGNhcnRlc2lhbihbbGFtYmRhICogcmFkaWFucywgcGhpICogcmFkaWFuc10pO1xyXG4gICAgaWYgKHAwKSB7XHJcbiAgICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXHJcbiAgICAgICAgICBlcXVhdG9yaWFsID0gW25vcm1hbFsxXSwgLW5vcm1hbFswXSwgMF0sXHJcbiAgICAgICAgICBpbmZsZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3MoZXF1YXRvcmlhbCwgbm9ybWFsKTtcclxuICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcclxuICAgICAgaW5mbGVjdGlvbiA9IHNwaGVyaWNhbChpbmZsZWN0aW9uKTtcclxuICAgICAgdmFyIGRlbHRhID0gbGFtYmRhIC0gbGFtYmRhMixcclxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXHJcbiAgICAgICAgICBsYW1iZGFpID0gaW5mbGVjdGlvblswXSAqIGRlZ3JlZXMkMSAqIHNpZ24sXHJcbiAgICAgICAgICBwaGlpLFxyXG4gICAgICAgICAgYW50aW1lcmlkaWFuID0gYWJzKGRlbHRhKSA+IDE4MDtcclxuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XHJcbiAgICAgICAgcGhpaSA9IGluZmxlY3Rpb25bMV0gKiBkZWdyZWVzJDE7XHJcbiAgICAgICAgaWYgKHBoaWkgPiBwaGkxKSBwaGkxID0gcGhpaTtcclxuICAgICAgfSBlbHNlIGlmIChsYW1iZGFpID0gKGxhbWJkYWkgKyAzNjApICUgMzYwIC0gMTgwLCBhbnRpbWVyaWRpYW4gXiAoc2lnbiAqIGxhbWJkYTIgPCBsYW1iZGFpICYmIGxhbWJkYWkgPCBzaWduICogbGFtYmRhKSkge1xyXG4gICAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXMkMTtcclxuICAgICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xyXG4gICAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChhbnRpbWVyaWRpYW4pIHtcclxuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xyXG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAkMSwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobGFtYmRhMSA+PSBsYW1iZGEwJDEpIHtcclxuICAgICAgICAgIGlmIChsYW1iZGEgPCBsYW1iZGEwJDEpIGxhbWJkYTAkMSA9IGxhbWJkYTtcclxuICAgICAgICAgIGlmIChsYW1iZGEgPiBsYW1iZGExKSBsYW1iZGExID0gbGFtYmRhO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xyXG4gICAgICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCQxLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMSA9IGxhbWJkYTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEsIGxhbWJkYTEpID4gYW5nbGUobGFtYmRhMCQxLCBsYW1iZGExKSkgbGFtYmRhMCQxID0gbGFtYmRhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYm91bmRzUG9pbnQobGFtYmRhLCBwaGkpO1xyXG4gICAgfVxyXG4gICAgcDAgPSBwLCBsYW1iZGEyID0gbGFtYmRhO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYm91bmRzTGluZVN0YXJ0KCkge1xyXG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYm91bmRzTGluZUVuZCgpIHtcclxuICAgIHJhbmdlJDFbMF0gPSBsYW1iZGEwJDEsIHJhbmdlJDFbMV0gPSBsYW1iZGExO1xyXG4gICAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XHJcbiAgICBwMCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBib3VuZHNSaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcclxuICAgIGlmIChwMCkge1xyXG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGEgLSBsYW1iZGEyO1xyXG4gICAgICBkZWx0YVN1bS5hZGQoYWJzKGRlbHRhKSA+IDE4MCA/IGRlbHRhICsgKGRlbHRhID4gMCA/IDM2MCA6IC0zNjApIDogZGVsdGEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGFtYmRhMDAkMSA9IGxhbWJkYSwgcGhpMDAkMSA9IHBoaTtcclxuICAgIH1cclxuICAgIGFyZWFTdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xyXG4gICAgbGluZVBvaW50KGxhbWJkYSwgcGhpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcclxuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0KCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBib3VuZHNSaW5nRW5kKCkge1xyXG4gICAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwJDEsIHBoaTAwJDEpO1xyXG4gICAgYXJlYVN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24kNCkgbGFtYmRhMCQxID0gLShsYW1iZGExID0gMTgwKTtcclxuICAgIHJhbmdlJDFbMF0gPSBsYW1iZGEwJDEsIHJhbmdlJDFbMV0gPSBsYW1iZGExO1xyXG4gICAgcDAgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLy8gRmluZHMgdGhlIGxlZnQtcmlnaHQgZGlzdGFuY2UgYmV0d2VlbiB0d28gbG9uZ2l0dWRlcy5cclxuICAvLyBUaGlzIGlzIGFsbW9zdCB0aGUgc2FtZSBhcyAobGFtYmRhMSAtIGxhbWJkYTAgKyAzNjDCsCkgJSAzNjDCsCwgZXhjZXB0IHRoYXQgd2Ugd2FudFxyXG4gIC8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXHJcbiAgZnVuY3Rpb24gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkge1xyXG4gICAgcmV0dXJuIChsYW1iZGExIC09IGxhbWJkYTApIDwgMCA/IGxhbWJkYTEgKyAzNjAgOiBsYW1iZGExO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcclxuICAgIHJldHVybiBhWzBdIC0gYlswXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJhbmdlQ29udGFpbnMocmFuZ2UsIHgpIHtcclxuICAgIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBib3VuZHMoZmVhdHVyZSkge1xyXG4gICAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xyXG5cclxuICAgIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwJDEgPSBwaGkwID0gSW5maW5pdHkpO1xyXG4gICAgcmFuZ2VzID0gW107XHJcbiAgICBnZW9TdHJlYW0oZmVhdHVyZSwgYm91bmRzU3RyZWFtKTtcclxuXHJcbiAgICAvLyBGaXJzdCwgc29ydCByYW5nZXMgYnkgdGhlaXIgbWluaW11bSBsb25naXR1ZGVzLlxyXG4gICAgaWYgKG4gPSByYW5nZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XHJcblxyXG4gICAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cclxuICAgICAgZm9yIChpID0gMSwgYSA9IHJhbmdlc1swXSwgbWVyZ2VkID0gW2FdOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgYiA9IHJhbmdlc1tpXTtcclxuICAgICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XHJcbiAgICAgICAgICBpZiAoYW5nbGUoYVswXSwgYlsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVsxXSA9IGJbMV07XHJcbiAgICAgICAgICBpZiAoYW5nbGUoYlswXSwgYVsxXSkgPiBhbmdsZShhWzBdLCBhWzFdKSkgYVswXSA9IGJbMF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1lcmdlZC5wdXNoKGEgPSBiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXHJcbiAgICAgIC8vIFRoZSBmaW5hbCBib3VuZGluZyBib3ggd2lsbCBiZSB0aGUgaW52ZXJzZSBvZiB0aGlzIGdhcC5cclxuICAgICAgZm9yIChkZWx0YU1heCA9IC1JbmZpbml0eSwgbiA9IG1lcmdlZC5sZW5ndGggLSAxLCBpID0gMCwgYSA9IG1lcmdlZFtuXTsgaSA8PSBuOyBhID0gYiwgKytpKSB7XHJcbiAgICAgICAgYiA9IG1lcmdlZFtpXTtcclxuICAgICAgICBpZiAoKGRlbHRhID0gYW5nbGUoYVsxXSwgYlswXSkpID4gZGVsdGFNYXgpIGRlbHRhTWF4ID0gZGVsdGEsIGxhbWJkYTAkMSA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmFuZ2VzID0gcmFuZ2UkMSA9IG51bGw7XHJcblxyXG4gICAgcmV0dXJuIGxhbWJkYTAkMSA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcclxuICAgICAgICA/IFtbTmFOLCBOYU5dLCBbTmFOLCBOYU5dXVxyXG4gICAgICAgIDogW1tsYW1iZGEwJDEsIHBoaTBdLCBbbGFtYmRhMSwgcGhpMV1dO1xyXG4gIH1cclxuXHJcbiAgdmFyIFcwO1xyXG4gIHZhciBXMTtcclxuICB2YXIgWDA7XHJcbiAgdmFyIFkwO1xyXG4gIHZhciBaMDtcclxuICB2YXIgWDE7XHJcbiAgdmFyIFkxO1xyXG4gIHZhciBaMTtcclxuICB2YXIgWDI7XHJcbiAgdmFyIFkyO1xyXG4gIHZhciBaMjtcclxudmFyICAgbGFtYmRhMDAkMjtcclxudmFyICAgcGhpMDAkMjtcclxuICB2YXIgeDA7XHJcbiAgdmFyIHkwO1xyXG4gIHZhciB6MDtcclxuICAvLyBwcmV2aW91cyBwb2ludFxyXG5cclxuICB2YXIgY2VudHJvaWRTdHJlYW0gPSB7XHJcbiAgICBzcGhlcmU6IG5vb3AkMixcclxuICAgIHBvaW50OiBjZW50cm9pZFBvaW50LFxyXG4gICAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcclxuICAgIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcclxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xyXG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xyXG4gICAgfSxcclxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcclxuICAgICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBBcml0aG1ldGljIG1lYW4gb2YgQ2FydGVzaWFuIHZlY3RvcnMuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludChsYW1iZGEsIHBoaSkge1xyXG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xyXG4gICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSk7XHJcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKGNvc1BoaSAqIGNvcyQxKGxhbWJkYSksIGNvc1BoaSAqIHNpbiQxKGxhbWJkYSksIHNpbiQxKHBoaSkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludENhcnRlc2lhbih4LCB5LCB6KSB7XHJcbiAgICArK1cwO1xyXG4gICAgWDAgKz0gKHggLSBYMCkgLyBXMDtcclxuICAgIFkwICs9ICh5IC0gWTApIC8gVzA7XHJcbiAgICBaMCArPSAoeiAtIFowKSAvIFcwO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XHJcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50Rmlyc3Q7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XHJcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XHJcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKTtcclxuICAgIHgwID0gY29zUGhpICogY29zJDEobGFtYmRhKTtcclxuICAgIHkwID0gY29zUGhpICogc2luJDEobGFtYmRhKTtcclxuICAgIHowID0gc2luJDEocGhpKTtcclxuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRMaW5lUG9pbnQ7XHJcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lUG9pbnQobGFtYmRhLCBwaGkpIHtcclxuICAgIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcclxuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpLFxyXG4gICAgICAgIHggPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpLFxyXG4gICAgICAgIHkgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpLFxyXG4gICAgICAgIHogPSBzaW4kMShwaGkpLFxyXG4gICAgICAgIHcgPSBhdGFuMihzcXJ0JDEoKHcgPSB5MCAqIHogLSB6MCAqIHkpICogdyArICh3ID0gejAgKiB4IC0geDAgKiB6KSAqIHcgKyAodyA9IHgwICogeSAtIHkwICogeCkgKiB3KSwgeDAgKiB4ICsgeTAgKiB5ICsgejAgKiB6KTtcclxuICAgIFcxICs9IHc7XHJcbiAgICBYMSArPSB3ICogKHgwICsgKHgwID0geCkpO1xyXG4gICAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcclxuICAgIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XHJcbiAgICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRMaW5lRW5kKCkge1xyXG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xyXG4gIH1cclxuXHJcbiAgLy8gU2VlIEouIEUuIEJyb2NrLCBUaGUgSW5lcnRpYSBUZW5zb3IgZm9yIGEgU3BoZXJpY2FsIFRyaWFuZ2xlLFxyXG4gIC8vIEouIEFwcGxpZWQgTWVjaGFuaWNzIDQyLCAyMzkgKDE5NzUpLlxyXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xyXG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludEZpcnN0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xyXG4gICAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAkMiwgcGhpMDAkMik7XHJcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XHJcbiAgICBsYW1iZGEwMCQyID0gbGFtYmRhLCBwaGkwMCQyID0gcGhpO1xyXG4gICAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xyXG4gICAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFJpbmdQb2ludDtcclxuICAgIHZhciBjb3NQaGkgPSBjb3MkMShwaGkpO1xyXG4gICAgeDAgPSBjb3NQaGkgKiBjb3MkMShsYW1iZGEpO1xyXG4gICAgeTAgPSBjb3NQaGkgKiBzaW4kMShsYW1iZGEpO1xyXG4gICAgejAgPSBzaW4kMShwaGkpO1xyXG4gICAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XHJcbiAgICB2YXIgY29zUGhpID0gY29zJDEocGhpKSxcclxuICAgICAgICB4ID0gY29zUGhpICogY29zJDEobGFtYmRhKSxcclxuICAgICAgICB5ID0gY29zUGhpICogc2luJDEobGFtYmRhKSxcclxuICAgICAgICB6ID0gc2luJDEocGhpKSxcclxuICAgICAgICBjeCA9IHkwICogeiAtIHowICogeSxcclxuICAgICAgICBjeSA9IHowICogeCAtIHgwICogeixcclxuICAgICAgICBjeiA9IHgwICogeSAtIHkwICogeCxcclxuICAgICAgICBtID0gc3FydCQxKGN4ICogY3ggKyBjeSAqIGN5ICsgY3ogKiBjeiksXHJcbiAgICAgICAgdSA9IHgwICogeCArIHkwICogeSArIHowICogeixcclxuICAgICAgICB2ID0gbSAmJiAtYWNvcyh1KSAvIG0sIC8vIGFyZWEgd2VpZ2h0XHJcbiAgICAgICAgdyA9IGF0YW4yKG0sIHUpOyAvLyBsaW5lIHdlaWdodFxyXG4gICAgWDIgKz0gdiAqIGN4O1xyXG4gICAgWTIgKz0gdiAqIGN5O1xyXG4gICAgWjIgKz0gdiAqIGN6O1xyXG4gICAgVzEgKz0gdztcclxuICAgIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XHJcbiAgICBZMSArPSB3ICogKHkwICsgKHkwID0geSkpO1xyXG4gICAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcclxuICAgIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZCQxKG9iamVjdCkge1xyXG4gICAgVzAgPSBXMSA9XHJcbiAgICBYMCA9IFkwID0gWjAgPVxyXG4gICAgWDEgPSBZMSA9IFoxID1cclxuICAgIFgyID0gWTIgPSBaMiA9IDA7XHJcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBjZW50cm9pZFN0cmVhbSk7XHJcblxyXG4gICAgdmFyIHggPSBYMixcclxuICAgICAgICB5ID0gWTIsXHJcbiAgICAgICAgeiA9IFoyLFxyXG4gICAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XHJcblxyXG4gICAgLy8gSWYgdGhlIGFyZWEtd2VpZ2h0ZWQgY2NlbnRyb2lkIGlzIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIGxlbmd0aC13ZWlnaHRlZCBjY2VudHJvaWQuXHJcbiAgICBpZiAobSA8IGVwc2lsb24yJDIpIHtcclxuICAgICAgeCA9IFgxLCB5ID0gWTEsIHogPSBaMTtcclxuICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIHplcm8gbGVuZ3RoLCBmYWxsIGJhY2sgdG8gYXJpdGhtZXRpYyBtZWFuIG9mIHBvaW50IHZlY3RvcnMuXHJcbiAgICAgIGlmIChXMSA8IGVwc2lsb24kNCkgeCA9IFgwLCB5ID0gWTAsIHogPSBaMDtcclxuICAgICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcclxuICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgc3RpbGwgaGFzIGFuIHVuZGVmaW5lZCBjY2VudHJvaWQsIHRoZW4gcmV0dXJuLlxyXG4gICAgICBpZiAobSA8IGVwc2lsb24yJDIpIHJldHVybiBbTmFOLCBOYU5dO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbYXRhbjIoeSwgeCkgKiBkZWdyZWVzJDEsIGFzaW4kMSh6IC8gc3FydCQxKG0pKSAqIGRlZ3JlZXMkMV07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25zdGFudCQxMih4KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbXBvc2UoYSwgYikge1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xyXG4gICAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGNvbXBvc2U7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByb3RhdGlvbklkZW50aXR5KGxhbWJkYSwgcGhpKSB7XHJcbiAgICByZXR1cm4gW2xhbWJkYSA+IHBpJDQgPyBsYW1iZGEgLSB0YXUkNCA6IGxhbWJkYSA8IC1waSQ0ID8gbGFtYmRhICsgdGF1JDQgOiBsYW1iZGEsIHBoaV07XHJcbiAgfVxyXG5cclxuICByb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XHJcblxyXG4gIGZ1bmN0aW9uIHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XHJcbiAgICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSQ0KSA/IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gY29tcG9zZShyb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSksIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpKVxyXG4gICAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcclxuICAgICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXHJcbiAgICAgIDogcm90YXRpb25JZGVudGl0eSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xyXG4gICAgICByZXR1cm4gbGFtYmRhICs9IGRlbHRhTGFtYmRhLCBbbGFtYmRhID4gcGkkNCA/IGxhbWJkYSAtIHRhdSQ0IDogbGFtYmRhIDwgLXBpJDQgPyBsYW1iZGEgKyB0YXUkNCA6IGxhbWJkYSwgcGhpXTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xyXG4gICAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcclxuICAgIHJvdGF0aW9uLmludmVydCA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYSgtZGVsdGFMYW1iZGEpO1xyXG4gICAgcmV0dXJuIHJvdGF0aW9uO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xyXG4gICAgdmFyIGNvc0RlbHRhUGhpID0gY29zJDEoZGVsdGFQaGkpLFxyXG4gICAgICAgIHNpbkRlbHRhUGhpID0gc2luJDEoZGVsdGFQaGkpLFxyXG4gICAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MkMShkZWx0YUdhbW1hKSxcclxuICAgICAgICBzaW5EZWx0YUdhbW1hID0gc2luJDEoZGVsdGFHYW1tYSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcclxuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXHJcbiAgICAgICAgICB4ID0gY29zJDEobGFtYmRhKSAqIGNvc1BoaSxcclxuICAgICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxyXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXHJcbiAgICAgICAgICBrID0geiAqIGNvc0RlbHRhUGhpICsgeCAqIHNpbkRlbHRhUGhpO1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXHJcbiAgICAgICAgYXNpbiQxKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXHJcbiAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcclxuICAgICAgdmFyIGNvc1BoaSA9IGNvcyQxKHBoaSksXHJcbiAgICAgICAgICB4ID0gY29zJDEobGFtYmRhKSAqIGNvc1BoaSxcclxuICAgICAgICAgIHkgPSBzaW4kMShsYW1iZGEpICogY29zUGhpLFxyXG4gICAgICAgICAgeiA9IHNpbiQxKHBoaSksXHJcbiAgICAgICAgICBrID0geiAqIGNvc0RlbHRhR2FtbWEgLSB5ICogc2luRGVsdGFHYW1tYTtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxyXG4gICAgICAgIGFzaW4kMShrICogY29zRGVsdGFQaGkgLSB4ICogc2luRGVsdGFQaGkpXHJcbiAgICAgIF07XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByb3RhdGlvbjtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKHJvdGF0ZSkge1xyXG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcclxuXHJcbiAgICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcclxuICAgICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcyQxLCBjb29yZGluYXRlcztcclxuICAgIH1cclxuXHJcbiAgICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XHJcbiAgICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzJDEsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMkMSwgY29vcmRpbmF0ZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBmb3J3YXJkO1xyXG4gIH1cclxuXHJcbiAgLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cclxuICBmdW5jdGlvbiBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIHQwLCB0MSkge1xyXG4gICAgaWYgKCFkZWx0YSkgcmV0dXJuO1xyXG4gICAgdmFyIGNvc1JhZGl1cyA9IGNvcyQxKHJhZGl1cyksXHJcbiAgICAgICAgc2luUmFkaXVzID0gc2luJDEocmFkaXVzKSxcclxuICAgICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XHJcbiAgICBpZiAodDAgPT0gbnVsbCkge1xyXG4gICAgICB0MCA9IHJhZGl1cyArIGRpcmVjdGlvbiAqIHRhdSQ0O1xyXG4gICAgICB0MSA9IHJhZGl1cyAtIHN0ZXAgLyAyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdDAgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MCk7XHJcbiAgICAgIHQxID0gY2lyY2xlUmFkaXVzKGNvc1JhZGl1cywgdDEpO1xyXG4gICAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXUkNDtcclxuICAgIH1cclxuICAgIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xyXG4gICAgICBwb2ludCA9IHNwaGVyaWNhbChbY29zUmFkaXVzLCAtc2luUmFkaXVzICogY29zJDEodCksIC1zaW5SYWRpdXMgKiBzaW4kMSh0KV0pO1xyXG4gICAgICBzdHJlYW0ucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cclxuICBmdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xyXG4gICAgcG9pbnQgPSBjYXJ0ZXNpYW4ocG9pbnQpLCBwb2ludFswXSAtPSBjb3NSYWRpdXM7XHJcbiAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcclxuICAgIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XHJcbiAgICByZXR1cm4gKCgtcG9pbnRbMl0gPCAwID8gLXJhZGl1cyA6IHJhZGl1cykgKyB0YXUkNCAtIGVwc2lsb24kNCkgJSB0YXUkNDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNpcmNsZSQxKCkge1xyXG4gICAgdmFyIGNlbnRlciA9IGNvbnN0YW50JDEyKFswLCAwXSksXHJcbiAgICAgICAgcmFkaXVzID0gY29uc3RhbnQkMTIoOTApLFxyXG4gICAgICAgIHByZWNpc2lvbiA9IGNvbnN0YW50JDEyKDYpLFxyXG4gICAgICAgIHJpbmcsXHJcbiAgICAgICAgcm90YXRlLFxyXG4gICAgICAgIHN0cmVhbSA9IHtwb2ludDogcG9pbnR9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcclxuICAgICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xyXG4gICAgICB4WzBdICo9IGRlZ3JlZXMkMSwgeFsxXSAqPSBkZWdyZWVzJDE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2lyY2xlKCkge1xyXG4gICAgICB2YXIgYyA9IGNlbnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxyXG4gICAgICAgICAgciA9IHJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucyxcclxuICAgICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XHJcbiAgICAgIHJpbmcgPSBbXTtcclxuICAgICAgcm90YXRlID0gcm90YXRlUmFkaWFucygtY1swXSAqIHJhZGlhbnMsIC1jWzFdICogcmFkaWFucywgMCkuaW52ZXJ0O1xyXG4gICAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcclxuICAgICAgYyA9IHt0eXBlOiBcIlBvbHlnb25cIiwgY29vcmRpbmF0ZXM6IFtyaW5nXX07XHJcbiAgICAgIHJpbmcgPSByb3RhdGUgPSBudWxsO1xyXG4gICAgICByZXR1cm4gYztcclxuICAgIH1cclxuXHJcbiAgICBjaXJjbGUuY2VudGVyID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50JDEyKFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcclxuICAgIH07XHJcblxyXG4gICAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCQxMigrXyksIGNpcmNsZSkgOiByYWRpdXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNpcmNsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQkMTIoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gY2lyY2xlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY2xpcEJ1ZmZlcigpIHtcclxuICAgIHZhciBsaW5lcyA9IFtdLFxyXG4gICAgICAgIGxpbmU7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICAgIGxpbmUucHVzaChbeCwgeV0pO1xyXG4gICAgICB9LFxyXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcclxuICAgICAgfSxcclxuICAgICAgbGluZUVuZDogbm9vcCQyLFxyXG4gICAgICByZWpvaW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGxpbmVzO1xyXG4gICAgICAgIGxpbmVzID0gW107XHJcbiAgICAgICAgbGluZSA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSB7XHJcbiAgICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgICBieCA9IGJbMF0sXHJcbiAgICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICAgIHQwID0gMCxcclxuICAgICAgICB0MSA9IDEsXHJcbiAgICAgICAgZHggPSBieCAtIGF4LFxyXG4gICAgICAgIGR5ID0gYnkgLSBheSxcclxuICAgICAgICByO1xyXG5cclxuICAgIHIgPSB4MCAtIGF4O1xyXG4gICAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xyXG4gICAgciAvPSBkeDtcclxuICAgIGlmIChkeCA8IDApIHtcclxuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xyXG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XHJcbiAgICB9IGVsc2UgaWYgKGR4ID4gMCkge1xyXG4gICAgICBpZiAociA+IHQxKSByZXR1cm47XHJcbiAgICAgIGlmIChyID4gdDApIHQwID0gcjtcclxuICAgIH1cclxuXHJcbiAgICByID0geDEgLSBheDtcclxuICAgIGlmICghZHggJiYgciA8IDApIHJldHVybjtcclxuICAgIHIgLz0gZHg7XHJcbiAgICBpZiAoZHggPCAwKSB7XHJcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcclxuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xyXG4gICAgfSBlbHNlIGlmIChkeCA+IDApIHtcclxuICAgICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xyXG4gICAgICBpZiAociA8IHQxKSB0MSA9IHI7XHJcbiAgICB9XHJcblxyXG4gICAgciA9IHkwIC0gYXk7XHJcbiAgICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XHJcbiAgICByIC89IGR5O1xyXG4gICAgaWYgKGR5IDwgMCkge1xyXG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XHJcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcclxuICAgIH0gZWxzZSBpZiAoZHkgPiAwKSB7XHJcbiAgICAgIGlmIChyID4gdDEpIHJldHVybjtcclxuICAgICAgaWYgKHIgPiB0MCkgdDAgPSByO1xyXG4gICAgfVxyXG5cclxuICAgIHIgPSB5MSAtIGF5O1xyXG4gICAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xyXG4gICAgciAvPSBkeTtcclxuICAgIGlmIChkeSA8IDApIHtcclxuICAgICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xyXG4gICAgICBpZiAociA+IHQwKSB0MCA9IHI7XHJcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xyXG4gICAgICBpZiAociA8IHQwKSByZXR1cm47XHJcbiAgICAgIGlmIChyIDwgdDEpIHQxID0gcjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodDAgPiAwKSBhWzBdID0gYXggKyB0MCAqIGR4LCBhWzFdID0gYXkgKyB0MCAqIGR5O1xyXG4gICAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcG9pbnRFcXVhbChhLCBiKSB7XHJcbiAgICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24kNCAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbiQ0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gSW50ZXJzZWN0aW9uKHBvaW50LCBwb2ludHMsIG90aGVyLCBlbnRyeSkge1xyXG4gICAgdGhpcy54ID0gcG9pbnQ7XHJcbiAgICB0aGlzLnogPSBwb2ludHM7XHJcbiAgICB0aGlzLm8gPSBvdGhlcjsgLy8gYW5vdGhlciBpbnRlcnNlY3Rpb25cclxuICAgIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cclxuICAgIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXHJcbiAgICB0aGlzLm4gPSB0aGlzLnAgPSBudWxsOyAvLyBuZXh0ICYgcHJldmlvdXNcclxuICB9XHJcblxyXG4gIC8vIEEgZ2VuZXJhbGl6ZWQgcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG06IGdpdmVuIGEgcG9seWdvbiB0aGF0IGhhcyBiZWVuIGN1dFxyXG4gIC8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcclxuICAvLyBhbG9uZyB0aGUgY2xpcCBlZGdlLlxyXG4gIGZ1bmN0aW9uIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSkge1xyXG4gICAgdmFyIHN1YmplY3QgPSBbXSxcclxuICAgICAgICBjbGlwID0gW10sXHJcbiAgICAgICAgaSxcclxuICAgICAgICBuO1xyXG5cclxuICAgIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xyXG4gICAgICBpZiAoKG4gPSBzZWdtZW50Lmxlbmd0aCAtIDEpIDw9IDApIHJldHVybjtcclxuICAgICAgdmFyIG4sIHAwID0gc2VnbWVudFswXSwgcDEgPSBzZWdtZW50W25dLCB4O1xyXG5cclxuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBvZiBhIHNlZ21lbnQgYXJlIGNvaW5jaWRlbnQsIHRoZW4gdHJlYXQgYXMgYVxyXG4gICAgICAvLyBjbG9zZWQgcmluZy4gVE9ETyBpZiBhbGwgcmluZ3MgYXJlIGNsb3NlZCwgdGhlbiB0aGUgd2luZGluZyBvcmRlciBvZiB0aGVcclxuICAgICAgLy8gZXh0ZXJpb3IgcmluZyBzaG91bGQgYmUgY2hlY2tlZC5cclxuICAgICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xyXG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHAwID0gc2VnbWVudFtpXSlbMF0sIHAwWzFdKTtcclxuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3ViamVjdC5wdXNoKHggPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBzZWdtZW50LCBudWxsLCB0cnVlKSk7XHJcbiAgICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBudWxsLCB4LCBmYWxzZSkpO1xyXG4gICAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XHJcbiAgICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAxLCBudWxsLCB4LCB0cnVlKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgY2xpcC5zb3J0KGNvbXBhcmVJbnRlcnNlY3Rpb24pO1xyXG4gICAgbGluayQxKHN1YmplY3QpO1xyXG4gICAgbGluayQxKGNsaXApO1xyXG5cclxuICAgIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3RhcnQgPSBzdWJqZWN0WzBdLFxyXG4gICAgICAgIHBvaW50cyxcclxuICAgICAgICBwb2ludDtcclxuXHJcbiAgICB3aGlsZSAoMSkge1xyXG4gICAgICAvLyBGaW5kIGZpcnN0IHVudmlzaXRlZCBpbnRlcnNlY3Rpb24uXHJcbiAgICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXHJcbiAgICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xyXG4gICAgICB3aGlsZSAoY3VycmVudC52KSBpZiAoKGN1cnJlbnQgPSBjdXJyZW50Lm4pID09PSBzdGFydCkgcmV0dXJuO1xyXG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XHJcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgZG8ge1xyXG4gICAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY3VycmVudC5lKSB7XHJcbiAgICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50Lm4ueCwgMSwgc3RyZWFtKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChpc1N1YmplY3QpIHtcclxuICAgICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHBvaW50cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubztcclxuICAgICAgICBwb2ludHMgPSBjdXJyZW50Lno7XHJcbiAgICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcclxuICAgICAgfSB3aGlsZSAoIWN1cnJlbnQudik7XHJcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsaW5rJDEoYXJyYXkpIHtcclxuICAgIGlmICghKG4gPSBhcnJheS5sZW5ndGgpKSByZXR1cm47XHJcbiAgICB2YXIgbixcclxuICAgICAgICBpID0gMCxcclxuICAgICAgICBhID0gYXJyYXlbMF0sXHJcbiAgICAgICAgYjtcclxuICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgIGEubiA9IGIgPSBhcnJheVtpXTtcclxuICAgICAgYi5wID0gYTtcclxuICAgICAgYSA9IGI7XHJcbiAgICB9XHJcbiAgICBhLm4gPSBiID0gYXJyYXlbMF07XHJcbiAgICBiLnAgPSBhO1xyXG4gIH1cclxuXHJcbiAgdmFyIGNsaXBNYXggPSAxZTk7XHJcbiAgdmFyIGNsaXBNaW4gPSAtY2xpcE1heDtcclxuICAvLyBUT0RPIFVzZSBkMy1wb2x5Z29u4oCZcyBwb2x5Z29uQ29udGFpbnMgaGVyZSBmb3IgdGhlIHJpbmcgY2hlY2s/XHJcbiAgLy8gVE9ETyBFbGltaW5hdGUgZHVwbGljYXRlIGJ1ZmZlcmluZyBpbiBjbGlwQnVmZmVyIGFuZCBwb2x5Z29uLnB1c2g/XHJcblxyXG4gIGZ1bmN0aW9uIGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpIHtcclxuXHJcbiAgICBmdW5jdGlvbiB2aXNpYmxlKHgsIHkpIHtcclxuICAgICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XHJcbiAgICAgIHZhciBhID0gMCwgYTEgPSAwO1xyXG4gICAgICBpZiAoZnJvbSA9PSBudWxsXHJcbiAgICAgICAgICB8fCAoYSA9IGNvcm5lcihmcm9tLCBkaXJlY3Rpb24pKSAhPT0gKGExID0gY29ybmVyKHRvLCBkaXJlY3Rpb24pKVxyXG4gICAgICAgICAgfHwgY29tcGFyZVBvaW50KGZyb20sIHRvKSA8IDAgXiBkaXJlY3Rpb24gPiAwKSB7XHJcbiAgICAgICAgZG8gc3RyZWFtLnBvaW50KGEgPT09IDAgfHwgYSA9PT0gMyA/IHgwIDogeDEsIGEgPiAxID8geTEgOiB5MCk7XHJcbiAgICAgICAgd2hpbGUgKChhID0gKGEgKyBkaXJlY3Rpb24gKyA0KSAlIDQpICE9PSBhMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb3JuZXIocCwgZGlyZWN0aW9uKSB7XHJcbiAgICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAwIDogM1xyXG4gICAgICAgICAgOiBhYnMocFswXSAtIHgxKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAyIDogMVxyXG4gICAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24kNCA/IGRpcmVjdGlvbiA+IDAgPyAxIDogMFxyXG4gICAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xyXG4gICAgICByZXR1cm4gY29tcGFyZVBvaW50KGEueCwgYi54KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21wYXJlUG9pbnQoYSwgYikge1xyXG4gICAgICB2YXIgY2EgPSBjb3JuZXIoYSwgMSksXHJcbiAgICAgICAgICBjYiA9IGNvcm5lcihiLCAxKTtcclxuICAgICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2JcclxuICAgICAgICAgIDogY2EgPT09IDAgPyBiWzFdIC0gYVsxXVxyXG4gICAgICAgICAgOiBjYSA9PT0gMSA/IGFbMF0gLSBiWzBdXHJcbiAgICAgICAgICA6IGNhID09PSAyID8gYVsxXSAtIGJbMV1cclxuICAgICAgICAgIDogYlswXSAtIGFbMF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xyXG4gICAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxyXG4gICAgICAgICAgYnVmZmVyU3RyZWFtID0gY2xpcEJ1ZmZlcigpLFxyXG4gICAgICAgICAgc2VnbWVudHMsXHJcbiAgICAgICAgICBwb2x5Z29uLFxyXG4gICAgICAgICAgcmluZyxcclxuICAgICAgICAgIHhfXywgeV9fLCB2X18sIC8vIGZpcnN0IHBvaW50XHJcbiAgICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxyXG4gICAgICAgICAgZmlyc3QsXHJcbiAgICAgICAgICBjbGVhbjtcclxuXHJcbiAgICAgIHZhciBjbGlwU3RyZWFtID0ge1xyXG4gICAgICAgIHBvaW50OiBwb2ludCxcclxuICAgICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcclxuICAgICAgICBsaW5lRW5kOiBsaW5lRW5kLFxyXG4gICAgICAgIHBvbHlnb25TdGFydDogcG9seWdvblN0YXJ0LFxyXG4gICAgICAgIHBvbHlnb25FbmQ6IHBvbHlnb25FbmRcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcclxuICAgICAgICBpZiAodmlzaWJsZSh4LCB5KSkgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uSW5zaWRlKCkge1xyXG4gICAgICAgIHZhciB3aW5kaW5nID0gMDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgZm9yICh2YXIgcmluZyA9IHBvbHlnb25baV0sIGogPSAxLCBtID0gcmluZy5sZW5ndGgsIHBvaW50ID0gcmluZ1swXSwgYTAsIGExLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdOyBqIDwgbTsgKytqKSB7XHJcbiAgICAgICAgICAgIGEwID0gYjAsIGExID0gYjEsIHBvaW50ID0gcmluZ1tqXSwgYjAgPSBwb2ludFswXSwgYjEgPSBwb2ludFsxXTtcclxuICAgICAgICAgICAgaWYgKGExIDw9IHkxKSB7IGlmIChiMSA+IHkxICYmIChiMCAtIGEwKSAqICh5MSAtIGExKSA+IChiMSAtIGExKSAqICh4MCAtIGEwKSkgKyt3aW5kaW5nOyB9XHJcbiAgICAgICAgICAgIGVsc2UgeyBpZiAoYjEgPD0geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpIDwgKGIxIC0gYTEpICogKHgwIC0gYTApKSAtLXdpbmRpbmc7IH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB3aW5kaW5nO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxyXG4gICAgICBmdW5jdGlvbiBwb2x5Z29uU3RhcnQoKSB7XHJcbiAgICAgICAgYWN0aXZlU3RyZWFtID0gYnVmZmVyU3RyZWFtLCBzZWdtZW50cyA9IFtdLCBwb2x5Z29uID0gW10sIGNsZWFuID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcclxuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uSW5zaWRlKCksXHJcbiAgICAgICAgICAgIGNsZWFuSW5zaWRlID0gY2xlYW4gJiYgc3RhcnRJbnNpZGUsXHJcbiAgICAgICAgICAgIHZpc2libGUgPSAoc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cykpLmxlbmd0aDtcclxuICAgICAgICBpZiAoY2xlYW5JbnNpZGUgfHwgdmlzaWJsZSkge1xyXG4gICAgICAgICAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xyXG4gICAgICAgICAgaWYgKGNsZWFuSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc3RyZWFtKTtcclxuICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVTdHJlYW0gPSBzdHJlYW0sIHNlZ21lbnRzID0gcG9seWdvbiA9IHJpbmcgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XHJcbiAgICAgICAgY2xpcFN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcclxuICAgICAgICBpZiAocG9seWdvbikgcG9seWdvbi5wdXNoKHJpbmcgPSBbXSk7XHJcbiAgICAgICAgZmlyc3QgPSB0cnVlO1xyXG4gICAgICAgIHZfID0gZmFsc2U7XHJcbiAgICAgICAgeF8gPSB5XyA9IE5hTjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxyXG4gICAgICAvLyBJZGVhbGx5LCBjb2luY2lkZW50IGludGVyc2VjdGlvbiBwb2ludHMgc2hvdWxkIGJlIGppdHRlcmVkIHRvIGF2b2lkXHJcbiAgICAgIC8vIGNsaXBwaW5nIGlzc3Vlcy5cclxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcclxuICAgICAgICBpZiAoc2VnbWVudHMpIHtcclxuICAgICAgICAgIGxpbmVQb2ludCh4X18sIHlfXyk7XHJcbiAgICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XHJcbiAgICAgICAgICBzZWdtZW50cy5wdXNoKGJ1ZmZlclN0cmVhbS5yZXN1bHQoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcclxuICAgICAgICBpZiAodl8pIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGxpbmVQb2ludCh4LCB5KSB7XHJcbiAgICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xyXG4gICAgICAgIGlmIChwb2x5Z29uKSByaW5nLnB1c2goW3gsIHldKTtcclxuICAgICAgICBpZiAoZmlyc3QpIHtcclxuICAgICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XHJcbiAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICh2ICYmIHZfKSBhY3RpdmVTdHJlYW0ucG9pbnQoeCwgeSk7XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxyXG4gICAgICAgICAgICAgICAgYiA9IFt4ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeCkpLCB5ID0gTWF0aC5tYXgoY2xpcE1pbiwgTWF0aC5taW4oY2xpcE1heCwgeSkpXTtcclxuICAgICAgICAgICAgaWYgKGNsaXBMaW5lKGEsIGIsIHgwLCB5MCwgeDEsIHkxKSkge1xyXG4gICAgICAgICAgICAgIGlmICghdl8pIHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludChhWzBdLCBhWzFdKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KGJbMF0sIGJbMV0pO1xyXG4gICAgICAgICAgICAgIGlmICghdikgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcclxuICAgICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHYpIHtcclxuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ubGluZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xyXG4gICAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgeF8gPSB4LCB5XyA9IHksIHZfID0gdjtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNsaXBTdHJlYW07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXh0ZW50JDEoKSB7XHJcbiAgICB2YXIgeDAgPSAwLFxyXG4gICAgICAgIHkwID0gMCxcclxuICAgICAgICB4MSA9IDk2MCxcclxuICAgICAgICB5MSA9IDUwMCxcclxuICAgICAgICBjYWNoZSxcclxuICAgICAgICBjYWNoZVN0cmVhbSxcclxuICAgICAgICBjbGlwO1xyXG5cclxuICAgIHJldHVybiBjbGlwID0ge1xyXG4gICAgICBzdHJlYW06IGZ1bmN0aW9uKHN0cmVhbSkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IGNsaXBFeHRlbnQoeDAsIHkwLCB4MSwgeTEpKGNhY2hlU3RyZWFtID0gc3RyZWFtKTtcclxuICAgICAgfSxcclxuICAgICAgZXh0ZW50OiBmdW5jdGlvbihfKSB7XHJcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgbGVuZ3RoU3VtID0gYWRkZXIoKTtcclxudmFyICAgbGFtYmRhMCQyO1xyXG52YXIgICBzaW5QaGkwJDE7XHJcbnZhciAgIGNvc1BoaTAkMTtcclxuICB2YXIgbGVuZ3RoU3RyZWFtID0ge1xyXG4gICAgc3BoZXJlOiBub29wJDIsXHJcbiAgICBwb2ludDogbm9vcCQyLFxyXG4gICAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXHJcbiAgICBsaW5lRW5kOiBub29wJDIsXHJcbiAgICBwb2x5Z29uU3RhcnQ6IG5vb3AkMixcclxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMlxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGxlbmd0aExpbmVTdGFydCgpIHtcclxuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XHJcbiAgICBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IGxlbmd0aExpbmVFbmQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsZW5ndGhMaW5lRW5kKCkge1xyXG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wJDI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XHJcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XHJcbiAgICBsYW1iZGEwJDIgPSBsYW1iZGEsIHNpblBoaTAkMSA9IHNpbiQxKHBoaSksIGNvc1BoaTAkMSA9IGNvcyQxKHBoaSk7XHJcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlbmd0aFBvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XHJcbiAgICB2YXIgc2luUGhpID0gc2luJDEocGhpKSxcclxuICAgICAgICBjb3NQaGkgPSBjb3MkMShwaGkpLFxyXG4gICAgICAgIGRlbHRhID0gYWJzKGxhbWJkYSAtIGxhbWJkYTAkMiksXHJcbiAgICAgICAgY29zRGVsdGEgPSBjb3MkMShkZWx0YSksXHJcbiAgICAgICAgc2luRGVsdGEgPSBzaW4kMShkZWx0YSksXHJcbiAgICAgICAgeCA9IGNvc1BoaSAqIHNpbkRlbHRhLFxyXG4gICAgICAgIHkgPSBjb3NQaGkwJDEgKiBzaW5QaGkgLSBzaW5QaGkwJDEgKiBjb3NQaGkgKiBjb3NEZWx0YSxcclxuICAgICAgICB6ID0gc2luUGhpMCQxICogc2luUGhpICsgY29zUGhpMCQxICogY29zUGhpICogY29zRGVsdGE7XHJcbiAgICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQkMSh4ICogeCArIHkgKiB5KSwgeikpO1xyXG4gICAgbGFtYmRhMCQyID0gbGFtYmRhLCBzaW5QaGkwJDEgPSBzaW5QaGksIGNvc1BoaTAkMSA9IGNvc1BoaTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxlbmd0aCQyKG9iamVjdCkge1xyXG4gICAgbGVuZ3RoU3VtLnJlc2V0KCk7XHJcbiAgICBnZW9TdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xyXG4gICAgcmV0dXJuICtsZW5ndGhTdW07XHJcbiAgfVxyXG5cclxuICB2YXIgY29vcmRpbmF0ZXMgPSBbbnVsbCwgbnVsbF07XHJcbnZhciAgIG9iamVjdCQxID0ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xyXG4gIGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcclxuICAgIGNvb3JkaW5hdGVzWzBdID0gYTtcclxuICAgIGNvb3JkaW5hdGVzWzFdID0gYjtcclxuICAgIHJldHVybiBsZW5ndGgkMihvYmplY3QkMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBncmF0aWN1bGVYKHkwLCB5MSwgZHkpIHtcclxuICAgIHZhciB5ID0gcmFuZ2UoeTAsIHkxIC0gZXBzaWxvbiQ0LCBkeSkuY29uY2F0KHkxKTtcclxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZ3JhdGljdWxlWSh4MCwgeDEsIGR4KSB7XHJcbiAgICB2YXIgeCA9IHJhbmdlKHgwLCB4MSAtIGVwc2lsb24kNCwgZHgpLmNvbmNhdCh4MSk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeSkgeyByZXR1cm4geC5tYXAoZnVuY3Rpb24oeCkgeyByZXR1cm4gW3gsIHldOyB9KTsgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcclxuICAgIHZhciB4MSwgeDAsIFgxLCBYMCxcclxuICAgICAgICB5MSwgeTAsIFkxLCBZMCxcclxuICAgICAgICBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCxcclxuICAgICAgICB4LCB5LCBYLCBZLFxyXG4gICAgICAgIHByZWNpc2lvbiA9IDIuNTtcclxuXHJcbiAgICBmdW5jdGlvbiBncmF0aWN1bGUoKSB7XHJcbiAgICAgIHJldHVybiB7dHlwZTogXCJNdWx0aUxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGxpbmVzKCl9O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpbmVzKCkge1xyXG4gICAgICByZXR1cm4gcmFuZ2UoY2VpbChYMCAvIERYKSAqIERYLCBYMSwgRFgpLm1hcChYKVxyXG4gICAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKVxyXG4gICAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKHgwIC8gZHgpICogZHgsIHgxLCBkeCkuZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIGFicyh4ICUgRFgpID4gZXBzaWxvbiQ0OyB9KS5tYXAoeCkpXHJcbiAgICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeTAgLyBkeSkgKiBkeSwgeTEsIGR5KS5maWx0ZXIoZnVuY3Rpb24oeSkgeyByZXR1cm4gYWJzKHkgJSBEWSkgPiBlcHNpbG9uJDQ7IH0pLm1hcCh5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ3JhdGljdWxlLmxpbmVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBsaW5lcygpLm1hcChmdW5jdGlvbihjb29yZGluYXRlcykgeyByZXR1cm4ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9OyB9KTtcclxuICAgIH07XHJcblxyXG4gICAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBcIlBvbHlnb25cIixcclxuICAgICAgICBjb29yZGluYXRlczogW1xyXG4gICAgICAgICAgWChYMCkuY29uY2F0KFxyXG4gICAgICAgICAgWShZMSkuc2xpY2UoMSksXHJcbiAgICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXHJcbiAgICAgICAgICBZKFkwKS5yZXZlcnNlKCkuc2xpY2UoMSkpXHJcbiAgICAgICAgXVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBncmF0aWN1bGUuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuZXh0ZW50TWlub3IoKTtcclxuICAgICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcclxuICAgIH07XHJcblxyXG4gICAgZ3JhdGljdWxlLmV4dGVudE1ham9yID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbW1gwLCBZMF0sIFtYMSwgWTFdXTtcclxuICAgICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcclxuICAgICAgWTAgPSArX1swXVsxXSwgWTEgPSArX1sxXVsxXTtcclxuICAgICAgaWYgKFgwID4gWDEpIF8gPSBYMCwgWDAgPSBYMSwgWDEgPSBfO1xyXG4gICAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XHJcbiAgICAgIHJldHVybiBncmF0aWN1bGUucHJlY2lzaW9uKHByZWNpc2lvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIGdyYXRpY3VsZS5leHRlbnRNaW5vciA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XHJcbiAgICAgIHgwID0gK19bMF1bMF0sIHgxID0gK19bMV1bMF07XHJcbiAgICAgIHkwID0gK19bMF1bMV0sIHkxID0gK19bMV1bMV07XHJcbiAgICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcclxuICAgICAgaWYgKHkwID4geTEpIF8gPSB5MCwgeTAgPSB5MSwgeTEgPSBfO1xyXG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnByZWNpc2lvbihwcmVjaXNpb24pO1xyXG4gICAgfTtcclxuXHJcbiAgICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNaW5vcigpO1xyXG4gICAgICByZXR1cm4gZ3JhdGljdWxlLnN0ZXBNYWpvcihfKS5zdGVwTWlub3IoXyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGdyYXRpY3VsZS5zdGVwTWFqb3IgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtEWCwgRFldO1xyXG4gICAgICBEWCA9ICtfWzBdLCBEWSA9ICtfWzFdO1xyXG4gICAgICByZXR1cm4gZ3JhdGljdWxlO1xyXG4gICAgfTtcclxuXHJcbiAgICBncmF0aWN1bGUuc3RlcE1pbm9yID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBbZHgsIGR5XTtcclxuICAgICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcclxuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcclxuICAgIH07XHJcblxyXG4gICAgZ3JhdGljdWxlLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xyXG4gICAgICBwcmVjaXNpb24gPSArXztcclxuICAgICAgeCA9IGdyYXRpY3VsZVgoeTAsIHkxLCA5MCk7XHJcbiAgICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcclxuICAgICAgWCA9IGdyYXRpY3VsZVgoWTAsIFkxLCA5MCk7XHJcbiAgICAgIFkgPSBncmF0aWN1bGVZKFgwLCBYMSwgcHJlY2lzaW9uKTtcclxuICAgICAgcmV0dXJuIGdyYXRpY3VsZTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGdyYXRpY3VsZVxyXG4gICAgICAgIC5leHRlbnRNYWpvcihbWy0xODAsIC05MCArIGVwc2lsb24kNF0sIFsxODAsIDkwIC0gZXBzaWxvbiQ0XV0pXHJcbiAgICAgICAgLmV4dGVudE1pbm9yKFtbLTE4MCwgLTgwIC0gZXBzaWxvbiQ0XSwgWzE4MCwgODAgKyBlcHNpbG9uJDRdXSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZSQyKGEsIGIpIHtcclxuICAgIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxyXG4gICAgICAgIHkwID0gYVsxXSAqIHJhZGlhbnMsXHJcbiAgICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcclxuICAgICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxyXG4gICAgICAgIGN5MCA9IGNvcyQxKHkwKSxcclxuICAgICAgICBzeTAgPSBzaW4kMSh5MCksXHJcbiAgICAgICAgY3kxID0gY29zJDEoeTEpLFxyXG4gICAgICAgIHN5MSA9IHNpbiQxKHkxKSxcclxuICAgICAgICBreDAgPSBjeTAgKiBjb3MkMSh4MCksXHJcbiAgICAgICAga3kwID0gY3kwICogc2luJDEoeDApLFxyXG4gICAgICAgIGt4MSA9IGN5MSAqIGNvcyQxKHgxKSxcclxuICAgICAgICBreTEgPSBjeTEgKiBzaW4kMSh4MSksXHJcbiAgICAgICAgZCA9IDIgKiBhc2luJDEoc3FydCQxKGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcclxuICAgICAgICBrID0gc2luJDEoZCk7XHJcblxyXG4gICAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgdmFyIEIgPSBzaW4kMSh0ICo9IGQpIC8gayxcclxuICAgICAgICAgIEEgPSBzaW4kMShkIC0gdCkgLyBrLFxyXG4gICAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxyXG4gICAgICAgICAgeSA9IEEgKiBreTAgKyBCICoga3kxLFxyXG4gICAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIGF0YW4yKHksIHgpICogZGVncmVlcyQxLFxyXG4gICAgICAgIGF0YW4yKHosIHNxcnQkMSh4ICogeCArIHkgKiB5KSkgKiBkZWdyZWVzJDFcclxuICAgICAgXTtcclxuICAgIH0gOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMkMSwgeTAgKiBkZWdyZWVzJDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBpbnRlcnBvbGF0ZS5kaXN0YW5jZSA9IGQ7XHJcblxyXG4gICAgcmV0dXJuIGludGVycG9sYXRlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaWRlbnRpdHkkNyh4KSB7XHJcbiAgICByZXR1cm4geDtcclxuICB9XHJcblxyXG52YXIgICBhcmVhU3VtJDEgPSBhZGRlcigpO1xyXG52YXIgICBhcmVhUmluZ1N1bSQxID0gYWRkZXIoKTtcclxuICB2YXIgeDAwO1xyXG4gIHZhciB5MDA7XHJcbnZhciAgIHgwJDE7XHJcbnZhciAgIHkwJDE7XHJcbiAgdmFyIGFyZWFTdHJlYW0kMSA9IHtcclxuICAgIHBvaW50OiBub29wJDIsXHJcbiAgICBsaW5lU3RhcnQ6IG5vb3AkMixcclxuICAgIGxpbmVFbmQ6IG5vb3AkMixcclxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0JDE7XHJcbiAgICAgIGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVJpbmdFbmQkMTtcclxuICAgIH0sXHJcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgYXJlYVN0cmVhbSQxLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0kMS5saW5lRW5kID0gYXJlYVN0cmVhbSQxLnBvaW50ID0gbm9vcCQyO1xyXG4gICAgICBhcmVhU3VtJDEuYWRkKGFicyhhcmVhUmluZ1N1bSQxKSk7XHJcbiAgICAgIGFyZWFSaW5nU3VtJDEucmVzZXQoKTtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgYXJlYSA9IGFyZWFTdW0kMSAvIDI7XHJcbiAgICAgIGFyZWFTdW0kMS5yZXNldCgpO1xyXG4gICAgICByZXR1cm4gYXJlYTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBhcmVhUmluZ1N0YXJ0JDEoKSB7XHJcbiAgICBhcmVhU3RyZWFtJDEucG9pbnQgPSBhcmVhUG9pbnRGaXJzdCQxO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QkMSh4LCB5KSB7XHJcbiAgICBhcmVhU3RyZWFtJDEucG9pbnQgPSBhcmVhUG9pbnQkMTtcclxuICAgIHgwMCA9IHgwJDEgPSB4LCB5MDAgPSB5MCQxID0geTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFyZWFQb2ludCQxKHgsIHkpIHtcclxuICAgIGFyZWFSaW5nU3VtJDEuYWRkKHkwJDEgKiB4IC0geDAkMSAqIHkpO1xyXG4gICAgeDAkMSA9IHgsIHkwJDEgPSB5O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXJlYVJpbmdFbmQkMSgpIHtcclxuICAgIGFyZWFQb2ludCQxKHgwMCwgeTAwKTtcclxuICB9XHJcblxyXG52YXIgICB4MCQyID0gSW5maW5pdHk7XHJcbnZhciAgIHkwJDIgPSB4MCQyO1xyXG4gIHZhciB4MSA9IC14MCQyO1xyXG4gIHZhciB5MSA9IHgxO1xyXG4gIHZhciBib3VuZHNTdHJlYW0kMSA9IHtcclxuICAgIHBvaW50OiBib3VuZHNQb2ludCQxLFxyXG4gICAgbGluZVN0YXJ0OiBub29wJDIsXHJcbiAgICBsaW5lRW5kOiBub29wJDIsXHJcbiAgICBwb2x5Z29uU3RhcnQ6IG5vb3AkMixcclxuICAgIHBvbHlnb25FbmQ6IG5vb3AkMixcclxuICAgIHJlc3VsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBib3VuZHMgPSBbW3gwJDIsIHkwJDJdLCBbeDEsIHkxXV07XHJcbiAgICAgIHgxID0geTEgPSAtKHkwJDIgPSB4MCQyID0gSW5maW5pdHkpO1xyXG4gICAgICByZXR1cm4gYm91bmRzO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIGJvdW5kc1BvaW50JDEoeCwgeSkge1xyXG4gICAgaWYgKHggPCB4MCQyKSB4MCQyID0geDtcclxuICAgIGlmICh4ID4geDEpIHgxID0geDtcclxuICAgIGlmICh5IDwgeTAkMikgeTAkMiA9IHk7XHJcbiAgICBpZiAoeSA+IHkxKSB5MSA9IHk7XHJcbiAgfVxyXG5cclxudmFyICAgWDAkMSA9IDA7XHJcbnZhciAgIFkwJDEgPSAwO1xyXG52YXIgICBaMCQxID0gMDtcclxudmFyICAgWDEkMSA9IDA7XHJcbnZhciAgIFkxJDEgPSAwO1xyXG52YXIgICBaMSQxID0gMDtcclxudmFyICAgWDIkMSA9IDA7XHJcbnZhciAgIFkyJDEgPSAwO1xyXG52YXIgICBaMiQxID0gMDtcclxudmFyICAgeDAwJDE7XHJcbnZhciAgIHkwMCQxO1xyXG52YXIgICB4MCQzO1xyXG52YXIgICB5MCQzO1xyXG4gIHZhciBjZW50cm9pZFN0cmVhbSQxID0ge1xyXG4gICAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQkMSxcclxuICAgIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQkMSxcclxuICAgIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCQxLFxyXG4gICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydCQxO1xyXG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQkMTtcclxuICAgIH0sXHJcbiAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnQkMTtcclxuICAgICAgY2VudHJvaWRTdHJlYW0kMS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydCQxO1xyXG4gICAgICBjZW50cm9pZFN0cmVhbSQxLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQkMTtcclxuICAgIH0sXHJcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgY2VudHJvaWQgPSBaMiQxID8gW1gyJDEgLyBaMiQxLCBZMiQxIC8gWjIkMV1cclxuICAgICAgICAgIDogWjEkMSA/IFtYMSQxIC8gWjEkMSwgWTEkMSAvIFoxJDFdXHJcbiAgICAgICAgICA6IFowJDEgPyBbWDAkMSAvIFowJDEsIFkwJDEgLyBaMCQxXVxyXG4gICAgICAgICAgOiBbTmFOLCBOYU5dO1xyXG4gICAgICBYMCQxID0gWTAkMSA9IFowJDEgPVxyXG4gICAgICBYMSQxID0gWTEkMSA9IFoxJDEgPVxyXG4gICAgICBYMiQxID0gWTIkMSA9IFoyJDEgPSAwO1xyXG4gICAgICByZXR1cm4gY2VudHJvaWQ7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gY2VudHJvaWRQb2ludCQxKHgsIHkpIHtcclxuICAgIFgwJDEgKz0geDtcclxuICAgIFkwJDEgKz0geTtcclxuICAgICsrWjAkMTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0JDEoKSB7XHJcbiAgICBjZW50cm9pZFN0cmVhbSQxLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xyXG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xyXG4gICAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50TGluZSh4LCB5KSB7XHJcbiAgICB2YXIgZHggPSB4IC0geDAkMywgZHkgPSB5IC0geTAkMywgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XHJcbiAgICBYMSQxICs9IHogKiAoeDAkMyArIHgpIC8gMjtcclxuICAgIFkxJDEgKz0geiAqICh5MCQzICsgeSkgLyAyO1xyXG4gICAgWjEkMSArPSB6O1xyXG4gICAgY2VudHJvaWRQb2ludCQxKHgwJDMgPSB4LCB5MCQzID0geSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZExpbmVFbmQkMSgpIHtcclxuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50JDE7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCQxKCkge1xyXG4gICAgY2VudHJvaWRTdHJlYW0kMS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdFJpbmc7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQkMSgpIHtcclxuICAgIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCQxLCB5MDAkMSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjZW50cm9pZFBvaW50Rmlyc3RSaW5nKHgsIHkpIHtcclxuICAgIGNlbnRyb2lkU3RyZWFtJDEucG9pbnQgPSBjZW50cm9pZFBvaW50UmluZztcclxuICAgIGNlbnRyb2lkUG9pbnQkMSh4MDAkMSA9IHgwJDMgPSB4LCB5MDAkMSA9IHkwJDMgPSB5KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRSaW5nKHgsIHkpIHtcclxuICAgIHZhciBkeCA9IHggLSB4MCQzLFxyXG4gICAgICAgIGR5ID0geSAtIHkwJDMsXHJcbiAgICAgICAgeiA9IHNxcnQkMShkeCAqIGR4ICsgZHkgKiBkeSk7XHJcblxyXG4gICAgWDEkMSArPSB6ICogKHgwJDMgKyB4KSAvIDI7XHJcbiAgICBZMSQxICs9IHogKiAoeTAkMyArIHkpIC8gMjtcclxuICAgIFoxJDEgKz0gejtcclxuXHJcbiAgICB6ID0geTAkMyAqIHggLSB4MCQzICogeTtcclxuICAgIFgyJDEgKz0geiAqICh4MCQzICsgeCk7XHJcbiAgICBZMiQxICs9IHogKiAoeTAkMyArIHkpO1xyXG4gICAgWjIkMSArPSB6ICogMztcclxuICAgIGNlbnRyb2lkUG9pbnQkMSh4MCQzID0geCwgeTAkMyA9IHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUGF0aENvbnRleHQoY29udGV4dCkge1xyXG4gICAgdmFyIHBvaW50UmFkaXVzID0gNC41O1xyXG5cclxuICAgIHZhciBzdHJlYW0gPSB7XHJcbiAgICAgIHBvaW50OiBwb2ludCxcclxuXHJcbiAgICAgIC8vIFdoaWxlIGluc2lkZSBhIGxpbmUsIG92ZXJyaWRlIHBvaW50IHRvIG1vdmVUbyB0aGVuIGxpbmVUby5cclxuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvaW50ID0gcG9pbnRMaW5lU3RhcnQ7IH0sXHJcbiAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXHJcblxyXG4gICAgICAvLyBXaGlsZSBpbnNpZGUgYSBwb2x5Z29uLCBvdmVycmlkZSBsaW5lRW5kIHRvIGNsb3NlUGF0aC5cclxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kUG9seWdvbjsgfSxcclxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5saW5lRW5kID0gbGluZUVuZDsgc3RyZWFtLnBvaW50ID0gcG9pbnQ7IH0sXHJcblxyXG4gICAgICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xyXG4gICAgICAgIHBvaW50UmFkaXVzID0gXztcclxuICAgICAgICByZXR1cm4gc3RyZWFtO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgcmVzdWx0OiBub29wJDJcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xyXG4gICAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcG9pbnRSYWRpdXMsIHkpO1xyXG4gICAgICBjb250ZXh0LmFyYyh4LCB5LCBwb2ludFJhZGl1cywgMCwgdGF1JDQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBvaW50TGluZVN0YXJ0KHgsIHkpIHtcclxuICAgICAgY29udGV4dC5tb3ZlVG8oeCwgeSk7XHJcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwb2ludExpbmUoeCwgeSkge1xyXG4gICAgICBjb250ZXh0LmxpbmVUbyh4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xyXG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsaW5lRW5kUG9seWdvbigpIHtcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RyZWFtO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUGF0aFN0cmluZygpIHtcclxuICAgIHZhciBwb2ludENpcmNsZSA9IGNpcmNsZSQyKDQuNSksXHJcbiAgICAgICAgc3RyaW5nID0gW107XHJcblxyXG4gICAgdmFyIHN0cmVhbSA9IHtcclxuICAgICAgcG9pbnQ6IHBvaW50LFxyXG4gICAgICBsaW5lU3RhcnQ6IGxpbmVTdGFydCxcclxuICAgICAgbGluZUVuZDogbGluZUVuZCxcclxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmRQb2x5Z29uO1xyXG4gICAgICB9LFxyXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBzdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XHJcbiAgICAgICAgc3RyZWFtLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgIH0sXHJcbiAgICAgIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XHJcbiAgICAgICAgcG9pbnRDaXJjbGUgPSBjaXJjbGUkMihfKTtcclxuICAgICAgICByZXR1cm4gc3RyZWFtO1xyXG4gICAgICB9LFxyXG4gICAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChzdHJpbmcubGVuZ3RoKSB7XHJcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICBzdHJpbmcgPSBbXTtcclxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcclxuICAgICAgc3RyaW5nLnB1c2goXCJNXCIsIHgsIFwiLFwiLCB5LCBwb2ludENpcmNsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lU3RhcnQoeCwgeSkge1xyXG4gICAgICBzdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xyXG4gICAgICBzdHJlYW0ucG9pbnQgPSBwb2ludExpbmU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKHgsIHkpIHtcclxuICAgICAgc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XHJcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50TGluZVN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XHJcbiAgICAgIHN0cmVhbS5wb2ludCA9IHBvaW50O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGxpbmVFbmRQb2x5Z29uKCkge1xyXG4gICAgICBzdHJpbmcucHVzaChcIlpcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0cmVhbTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNpcmNsZSQyKHJhZGl1cykge1xyXG4gICAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcclxuICAgICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgLTIgKiByYWRpdXNcclxuICAgICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1c1xyXG4gICAgICAgICsgXCJ6XCI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbmRleCQzKCkge1xyXG4gICAgdmFyIHBvaW50UmFkaXVzID0gNC41LFxyXG4gICAgICAgIHByb2plY3Rpb24sXHJcbiAgICAgICAgcHJvamVjdGlvblN0cmVhbSxcclxuICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgIGNvbnRleHRTdHJlYW07XHJcblxyXG4gICAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcclxuICAgICAgaWYgKG9iamVjdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XHJcbiAgICAgICAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYXJlYVN0cmVhbSQxKSk7XHJcbiAgICAgIHJldHVybiBhcmVhU3RyZWFtJDEucmVzdWx0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oYm91bmRzU3RyZWFtJDEpKTtcclxuICAgICAgcmV0dXJuIGJvdW5kc1N0cmVhbSQxLnJlc3VsdCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY2VudHJvaWRTdHJlYW0kMSkpO1xyXG4gICAgICByZXR1cm4gY2VudHJvaWRTdHJlYW0kMS5yZXN1bHQoKTtcclxuICAgIH07XHJcblxyXG4gICAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gKHByb2plY3Rpb24gPSBfKSA9PSBudWxsID8gaWRlbnRpdHkkNyA6IF8uc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XHJcbiAgICB9O1xyXG5cclxuICAgIHBhdGguY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcclxuICAgICAgY29udGV4dFN0cmVhbSA9IChjb250ZXh0ID0gXykgPT0gbnVsbCA/IG5ldyBQYXRoU3RyaW5nIDogbmV3IFBhdGhDb250ZXh0KF8pO1xyXG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xyXG4gICAgICByZXR1cm4gcGF0aDtcclxuICAgIH07XHJcblxyXG4gICAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XHJcbiAgICAgIHBvaW50UmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiAoY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrXyksICtfKTtcclxuICAgICAgcmV0dXJuIHBhdGg7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwYXRoLnByb2plY3Rpb24obnVsbCkuY29udGV4dChudWxsKTtcclxuICB9XHJcblxyXG4gIHZhciBzdW0kMiA9IGFkZGVyKCk7XHJcblxyXG4gIGZ1bmN0aW9uIHBvbHlnb25Db250YWlucyhwb2x5Z29uLCBwb2ludCkge1xyXG4gICAgdmFyIGxhbWJkYSA9IHBvaW50WzBdLFxyXG4gICAgICAgIHBoaSA9IHBvaW50WzFdLFxyXG4gICAgICAgIG5vcm1hbCA9IFtzaW4kMShsYW1iZGEpLCAtY29zJDEobGFtYmRhKSwgMF0sXHJcbiAgICAgICAgYW5nbGUgPSAwLFxyXG4gICAgICAgIHdpbmRpbmcgPSAwO1xyXG5cclxuICAgIHN1bSQyLnJlc2V0KCk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xyXG4gICAgICBpZiAoIShtID0gKHJpbmcgPSBwb2x5Z29uW2ldKS5sZW5ndGgpKSBjb250aW51ZTtcclxuICAgICAgdmFyIHJpbmcsXHJcbiAgICAgICAgICBtLFxyXG4gICAgICAgICAgcG9pbnQwID0gcmluZ1ttIC0gMV0sXHJcbiAgICAgICAgICBsYW1iZGEwID0gcG9pbnQwWzBdLFxyXG4gICAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXHJcbiAgICAgICAgICBzaW5QaGkwID0gc2luJDEocGhpMCksXHJcbiAgICAgICAgICBjb3NQaGkwID0gY29zJDEocGhpMCk7XHJcblxyXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraiwgbGFtYmRhMCA9IGxhbWJkYTEsIHNpblBoaTAgPSBzaW5QaGkxLCBjb3NQaGkwID0gY29zUGhpMSwgcG9pbnQwID0gcG9pbnQxKSB7XHJcbiAgICAgICAgdmFyIHBvaW50MSA9IHJpbmdbal0sXHJcbiAgICAgICAgICAgIGxhbWJkYTEgPSBwb2ludDFbMF0sXHJcbiAgICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxyXG4gICAgICAgICAgICBzaW5QaGkxID0gc2luJDEocGhpMSksXHJcbiAgICAgICAgICAgIGNvc1BoaTEgPSBjb3MkMShwaGkxKSxcclxuICAgICAgICAgICAgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcclxuICAgICAgICAgICAgc2lnbiA9IGRlbHRhID49IDAgPyAxIDogLTEsXHJcbiAgICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxyXG4gICAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnNEZWx0YSA+IHBpJDQsXHJcbiAgICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcclxuXHJcbiAgICAgICAgc3VtJDIuYWRkKGF0YW4yKGsgKiBzaWduICogc2luJDEoYWJzRGVsdGEpLCBjb3NQaGkwICogY29zUGhpMSArIGsgKiBjb3MkMShhYnNEZWx0YSkpKTtcclxuICAgICAgICBhbmdsZSArPSBhbnRpbWVyaWRpYW4gPyBkZWx0YSArIHNpZ24gKiB0YXUkNCA6IGRlbHRhO1xyXG5cclxuICAgICAgICAvLyBBcmUgdGhlIGxvbmdpdHVkZXMgZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW504oCZcyBtZXJpZGlhbiAobGFtYmRhKSxcclxuICAgICAgICAvLyBhbmQgYXJlIHRoZSBsYXRpdHVkZXMgc21hbGxlciB0aGFuIHRoZSBwYXJhbGxlbCAocGhpKT9cclxuICAgICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xyXG4gICAgICAgICAgdmFyIGFyYyA9IGNhcnRlc2lhbkNyb3NzKGNhcnRlc2lhbihwb2ludDApLCBjYXJ0ZXNpYW4ocG9pbnQxKSk7XHJcbiAgICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGFyYyk7XHJcbiAgICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xyXG4gICAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbnRlcnNlY3Rpb24pO1xyXG4gICAgICAgICAgdmFyIHBoaUFyYyA9IChhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gLTEgOiAxKSAqIGFzaW4kMShpbnRlcnNlY3Rpb25bMl0pO1xyXG4gICAgICAgICAgaWYgKHBoaSA+IHBoaUFyYyB8fCBwaGkgPT09IHBoaUFyYyAmJiAoYXJjWzBdIHx8IGFyY1sxXSkpIHtcclxuICAgICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcclxuICAgIC8vXHJcbiAgICAvLyBJdCBpcyBpbnNpZGUgaWY6XHJcbiAgICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXHJcbiAgICAvLyAqIHRoZSBwb2x5Z29uIGRvZXMgbm90IChjdW11bGF0aXZlbHkpIHdpbmQgYXJvdW5kIGl0LCBidXQgaGFzIGEgbmVnYXRpdmVcclxuICAgIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxyXG4gICAgLy9cclxuICAgIC8vIFNlY29uZCwgY291bnQgdGhlIChzaWduZWQpIG51bWJlciBvZiB0aW1lcyBhIHNlZ21lbnQgY3Jvc3NlcyBhIGxhbWJkYVxyXG4gICAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcclxuICAgIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cclxuXHJcbiAgICByZXR1cm4gKGFuZ2xlIDwgLWVwc2lsb24kNCB8fCBhbmdsZSA8IGVwc2lsb24kNCAmJiBzdW0kMiA8IC1lcHNpbG9uJDQpIF4gKHdpbmRpbmcgJiAxKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsaXAocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24ocm90YXRlLCBzaW5rKSB7XHJcbiAgICAgIHZhciBsaW5lID0gY2xpcExpbmUoc2luayksXHJcbiAgICAgICAgICByb3RhdGVkU3RhcnQgPSByb3RhdGUuaW52ZXJ0KHN0YXJ0WzBdLCBzdGFydFsxXSksXHJcbiAgICAgICAgICByaW5nQnVmZmVyID0gY2xpcEJ1ZmZlcigpLFxyXG4gICAgICAgICAgcmluZ1NpbmsgPSBjbGlwTGluZShyaW5nQnVmZmVyKSxcclxuICAgICAgICAgIHBvbHlnb25TdGFydGVkID0gZmFsc2UsXHJcbiAgICAgICAgICBwb2x5Z29uLFxyXG4gICAgICAgICAgc2VnbWVudHMsXHJcbiAgICAgICAgICByaW5nO1xyXG5cclxuICAgICAgdmFyIGNsaXAgPSB7XHJcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxyXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxyXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXHJcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XHJcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IHJpbmdTdGFydDtcclxuICAgICAgICAgIGNsaXAubGluZUVuZCA9IHJpbmdFbmQ7XHJcbiAgICAgICAgICBzZWdtZW50cyA9IFtdO1xyXG4gICAgICAgICAgcG9seWdvbiA9IFtdO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgICBjbGlwLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcclxuICAgICAgICAgIGNsaXAubGluZUVuZCA9IGxpbmVFbmQ7XHJcbiAgICAgICAgICBzZWdtZW50cyA9IG1lcmdlKHNlZ21lbnRzKTtcclxuICAgICAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25Db250YWlucyhwb2x5Z29uLCByb3RhdGVkU3RhcnQpO1xyXG4gICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNsaXBQb2x5Z29uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHNpbmspO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFydEluc2lkZSkge1xyXG4gICAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xyXG4gICAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uRW5kKCksIHBvbHlnb25TdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XHJcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XHJcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcclxuICAgICAgICAgIHNpbmsucG9seWdvbkVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICAgICAgdmFyIHBvaW50ID0gcm90YXRlKGxhbWJkYSwgcGhpKTtcclxuICAgICAgICBpZiAocG9pbnRWaXNpYmxlKGxhbWJkYSA9IHBvaW50WzBdLCBwaGkgPSBwb2ludFsxXSkpIHNpbmsucG9pbnQobGFtYmRhLCBwaGkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcclxuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xyXG4gICAgICAgIGxpbmUucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xyXG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XHJcbiAgICAgICAgbGluZS5saW5lU3RhcnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcclxuICAgICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XHJcbiAgICAgICAgbGluZS5saW5lRW5kKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHBvaW50UmluZyhsYW1iZGEsIHBoaSkge1xyXG4gICAgICAgIHJpbmcucHVzaChbbGFtYmRhLCBwaGldKTtcclxuICAgICAgICB2YXIgcG9pbnQgPSByb3RhdGUobGFtYmRhLCBwaGkpO1xyXG4gICAgICAgIHJpbmdTaW5rLnBvaW50KHBvaW50WzBdLCBwb2ludFsxXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcclxuICAgICAgICByaW5nU2luay5saW5lU3RhcnQoKTtcclxuICAgICAgICByaW5nID0gW107XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XHJcbiAgICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xyXG4gICAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcclxuXHJcbiAgICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcclxuICAgICAgICAgICAgcmluZ1NlZ21lbnRzID0gcmluZ0J1ZmZlci5yZXN1bHQoKSxcclxuICAgICAgICAgICAgaSwgbiA9IHJpbmdTZWdtZW50cy5sZW5ndGgsIG0sXHJcbiAgICAgICAgICAgIHNlZ21lbnQsXHJcbiAgICAgICAgICAgIHBvaW50O1xyXG5cclxuICAgICAgICByaW5nLnBvcCgpO1xyXG4gICAgICAgIHBvbHlnb24ucHVzaChyaW5nKTtcclxuICAgICAgICByaW5nID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKCFuKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXHJcbiAgICAgICAgaWYgKGNsZWFuICYgMSkge1xyXG4gICAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcclxuICAgICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XHJcbiAgICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xyXG4gICAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlam9pbiBjb25uZWN0ZWQgc2VnbWVudHMuXHJcbiAgICAgICAgLy8gVE9ETyByZXVzZSByaW5nQnVmZmVyLnJlam9pbigpP1xyXG4gICAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcclxuXHJcbiAgICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY2xpcDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB2YWxpZFNlZ21lbnQoc2VnbWVudCkge1xyXG4gICAgcmV0dXJuIHNlZ21lbnQubGVuZ3RoID4gMTtcclxuICB9XHJcblxyXG4gIC8vIEludGVyc2VjdGlvbnMgYXJlIHNvcnRlZCBhbG9uZyB0aGUgY2xpcCBlZGdlLiBGb3IgYm90aCBhbnRpbWVyaWRpYW4gY3V0dGluZ1xyXG4gIC8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cclxuICBmdW5jdGlvbiBjb21wYXJlSW50ZXJzZWN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmUGkkMyAtIGVwc2lsb24kNCA6IGhhbGZQaSQzIC0gYVsxXSlcclxuICAgICAgICAgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmUGkkMyAtIGVwc2lsb24kNCA6IGhhbGZQaSQzIC0gYlsxXSk7XHJcbiAgfVxyXG5cclxuICB2YXIgY2xpcEFudGltZXJpZGlhbiA9IGNsaXAoXHJcbiAgICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXHJcbiAgICBjbGlwQW50aW1lcmlkaWFuTGluZSxcclxuICAgIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcclxuICAgIFstcGkkNCwgLWhhbGZQaSQzXVxyXG4gICk7XHJcblxyXG4gIC8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXM6IDAgLSB0aGVyZSB3ZXJlXHJcbiAgLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxyXG4gIC8vIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHMgc2hvdWxkIGJlIHJlam9pbmVkLlxyXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5MaW5lKHN0cmVhbSkge1xyXG4gICAgdmFyIGxhbWJkYTAgPSBOYU4sXHJcbiAgICAgICAgcGhpMCA9IE5hTixcclxuICAgICAgICBzaWduMCA9IE5hTixcclxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xyXG4gICAgICAgIGNsZWFuID0gMTtcclxuICAgICAgfSxcclxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYTEsIHBoaTEpIHtcclxuICAgICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpJDQgOiAtcGkkNCxcclxuICAgICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xyXG4gICAgICAgIGlmIChhYnMoZGVsdGEgLSBwaSQ0KSA8IGVwc2lsb24kNCkgeyAvLyBsaW5lIGNyb3NzZXMgYSBwb2xlXHJcbiAgICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSQzIDogLWhhbGZQaSQzKTtcclxuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XHJcbiAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xyXG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcclxuICAgICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcclxuICAgICAgICAgIGNsZWFuID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHNpZ24wICE9PSBzaWduMSAmJiBkZWx0YSA+PSBwaSQ0KSB7IC8vIGxpbmUgY3Jvc3NlcyBhbnRpbWVyaWRpYW5cclxuICAgICAgICAgIGlmIChhYnMobGFtYmRhMCAtIHNpZ24wKSA8IGVwc2lsb24kNCkgbGFtYmRhMCAtPSBzaWduMCAqIGVwc2lsb24kNDsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xyXG4gICAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbiQ0KSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbiQ0O1xyXG4gICAgICAgICAgcGhpMCA9IGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSk7XHJcbiAgICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xyXG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcclxuICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XHJcbiAgICAgICAgICBjbGVhbiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwID0gbGFtYmRhMSwgcGhpMCA9IHBoaTEpO1xyXG4gICAgICAgIHNpZ24wID0gc2lnbjE7XHJcbiAgICAgIH0sXHJcbiAgICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgICAgbGFtYmRhMCA9IHBoaTAgPSBOYU47XHJcbiAgICAgIH0sXHJcbiAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gMiAtIGNsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSkge1xyXG4gICAgdmFyIGNvc1BoaTAsXHJcbiAgICAgICAgY29zUGhpMSxcclxuICAgICAgICBzaW5MYW1iZGEwTGFtYmRhMSA9IHNpbiQxKGxhbWJkYTAgLSBsYW1iZGExKTtcclxuICAgIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvbiQ0XHJcbiAgICAgICAgPyBhdGFuKChzaW4kMShwaGkwKSAqIChjb3NQaGkxID0gY29zJDEocGhpMSkpICogc2luJDEobGFtYmRhMSlcclxuICAgICAgICAgICAgLSBzaW4kMShwaGkxKSAqIChjb3NQaGkwID0gY29zJDEocGhpMCkpICogc2luJDEobGFtYmRhMCkpXHJcbiAgICAgICAgICAgIC8gKGNvc1BoaTAgKiBjb3NQaGkxICogc2luTGFtYmRhMExhbWJkYTEpKVxyXG4gICAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XHJcbiAgICB2YXIgcGhpO1xyXG4gICAgaWYgKGZyb20gPT0gbnVsbCkge1xyXG4gICAgICBwaGkgPSBkaXJlY3Rpb24gKiBoYWxmUGkkMztcclxuICAgICAgc3RyZWFtLnBvaW50KC1waSQ0LCBwaGkpO1xyXG4gICAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcclxuICAgICAgc3RyZWFtLnBvaW50KHBpJDQsIHBoaSk7XHJcbiAgICAgIHN0cmVhbS5wb2ludChwaSQ0LCAwKTtcclxuICAgICAgc3RyZWFtLnBvaW50KHBpJDQsIC1waGkpO1xyXG4gICAgICBzdHJlYW0ucG9pbnQoMCwgLXBoaSk7XHJcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgLXBoaSk7XHJcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgMCk7XHJcbiAgICAgIHN0cmVhbS5wb2ludCgtcGkkNCwgcGhpKTtcclxuICAgIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uJDQpIHtcclxuICAgICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpJDQgOiAtcGkkNDtcclxuICAgICAgcGhpID0gZGlyZWN0aW9uICogbGFtYmRhIC8gMjtcclxuICAgICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XHJcbiAgICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xyXG4gICAgICBzdHJlYW0ucG9pbnQobGFtYmRhLCBwaGkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjbGlwQ2lyY2xlKHJhZGl1cywgZGVsdGEpIHtcclxuICAgIHZhciBjciA9IGNvcyQxKHJhZGl1cyksXHJcbiAgICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXHJcbiAgICAgICAgbm90SGVtaXNwaGVyZSA9IGFicyhjcikgPiBlcHNpbG9uJDQ7IC8vIFRPRE8gb3B0aW1pc2UgZm9yIHRoaXMgY29tbW9uIGNhc2VcclxuXHJcbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcclxuICAgICAgY2lyY2xlU3RyZWFtKHN0cmVhbSwgcmFkaXVzLCBkZWx0YSwgZGlyZWN0aW9uLCBmcm9tLCB0byk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xyXG4gICAgICByZXR1cm4gY29zJDEobGFtYmRhKSAqIGNvcyQxKHBoaSkgPiBjcjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cclxuICAgIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXHJcbiAgICAvLyBpbnRlcnNlY3Rpb25zIDIgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMsIGFuZCB0aGUgZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcclxuICAgIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cclxuICAgIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xyXG4gICAgICB2YXIgcG9pbnQwLCAvLyBwcmV2aW91cyBwb2ludFxyXG4gICAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XHJcbiAgICAgICAgICB2MCwgLy8gdmlzaWJpbGl0eSBvZiBwcmV2aW91cyBwb2ludFxyXG4gICAgICAgICAgdjAwLCAvLyB2aXNpYmlsaXR5IG9mIGZpcnN0IHBvaW50XHJcbiAgICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xyXG4gICAgICAgICAgY2xlYW4gPSAxO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XHJcbiAgICAgICAgICB2YXIgcG9pbnQxID0gW2xhbWJkYSwgcGhpXSxcclxuICAgICAgICAgICAgICBwb2ludDIsXHJcbiAgICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxyXG4gICAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1c1xyXG4gICAgICAgICAgICAgICAgPyB2ID8gMCA6IGNvZGUobGFtYmRhLCBwaGkpXHJcbiAgICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkkNCA6IC1waSQ0KSwgcGhpKSA6IDA7XHJcbiAgICAgICAgICBpZiAoIXBvaW50MCAmJiAodjAwID0gdjAgPSB2KSkgc3RyZWFtLmxpbmVTdGFydCgpO1xyXG4gICAgICAgICAgLy8gSGFuZGxlIGRlZ2VuZXJhY2llcy5cclxuICAgICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cclxuICAgICAgICAgIGlmICh2ICE9PSB2MCkge1xyXG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRFcXVhbChwb2ludDAsIHBvaW50MikgfHwgcG9pbnRFcXVhbChwb2ludDEsIHBvaW50MikpIHtcclxuICAgICAgICAgICAgICBwb2ludDFbMF0gKz0gZXBzaWxvbiQ0O1xyXG4gICAgICAgICAgICAgIHBvaW50MVsxXSArPSBlcHNpbG9uJDQ7XHJcbiAgICAgICAgICAgICAgdiA9IHZpc2libGUocG9pbnQxWzBdLCBwb2ludDFbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodiAhPT0gdjApIHtcclxuICAgICAgICAgICAgY2xlYW4gPSAwO1xyXG4gICAgICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICAgIC8vIG91dHNpZGUgZ29pbmcgaW5cclxuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwKTtcclxuICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQocG9pbnQyWzBdLCBwb2ludDJbMV0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIGluc2lkZSBnb2luZyBvdXRcclxuICAgICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQwLCBwb2ludDEpO1xyXG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XHJcbiAgICAgICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKG5vdEhlbWlzcGhlcmUgJiYgcG9pbnQwICYmIHNtYWxsUmFkaXVzIF4gdikge1xyXG4gICAgICAgICAgICB2YXIgdDtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGNvZGVzIGZvciB0d28gcG9pbnRzIGFyZSBkaWZmZXJlbnQsIG9yIGFyZSBib3RoIHplcm8sXHJcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSB0aGlzIHNlZ21lbnQgaW50ZXJzZWN0cyB3aXRoIHRoZSBzbWFsbCBjaXJjbGUuXHJcbiAgICAgICAgICAgIGlmICghKGMgJiBjMCkgJiYgKHQgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDAsIHRydWUpKSkge1xyXG4gICAgICAgICAgICAgIGNsZWFuID0gMDtcclxuICAgICAgICAgICAgICBpZiAoc21hbGxSYWRpdXMpIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzFdWzBdLCB0WzFdWzFdKTtcclxuICAgICAgICAgICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBzdHJlYW0ucG9pbnQodFswXVswXSwgdFswXVsxXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAodiAmJiAoIXBvaW50MCB8fCAhcG9pbnRFcXVhbChwb2ludDAsIHBvaW50MSkpKSB7XHJcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBwb2ludDAgPSBwb2ludDEsIHYwID0gdiwgYzAgPSBjO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAodjApIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgICAgICBwb2ludDAgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gUmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIGlmIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucyBhbmQgdGhlIGZpcnN0XHJcbiAgICAgICAgLy8gYW5kIGxhc3QgcG9pbnRzIHdlcmUgdmlzaWJsZS5cclxuICAgICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2xlYW4gfCAoKHYwMCAmJiB2MCkgPDwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEludGVyc2VjdHMgdGhlIGdyZWF0IGNpcmNsZSBiZXR3ZWVuIGEgYW5kIGIgd2l0aCB0aGUgY2xpcCBjaXJjbGUuXHJcbiAgICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XHJcbiAgICAgIHZhciBwYSA9IGNhcnRlc2lhbihhKSxcclxuICAgICAgICAgIHBiID0gY2FydGVzaWFuKGIpO1xyXG5cclxuICAgICAgLy8gV2UgaGF2ZSB0d28gcGxhbmVzLCBuMS5wID0gZDEgYW5kIG4yLnAgPSBkMi5cclxuICAgICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXHJcbiAgICAgIHZhciBuMSA9IFsxLCAwLCAwXSwgLy8gbm9ybWFsXHJcbiAgICAgICAgICBuMiA9IGNhcnRlc2lhbkNyb3NzKHBhLCBwYiksXHJcbiAgICAgICAgICBuMm4yID0gY2FydGVzaWFuRG90KG4yLCBuMiksXHJcbiAgICAgICAgICBuMW4yID0gbjJbMF0sIC8vIGNhcnRlc2lhbkRvdChuMSwgbjIpLFxyXG4gICAgICAgICAgZGV0ZXJtaW5hbnQgPSBuMm4yIC0gbjFuMiAqIG4xbjI7XHJcblxyXG4gICAgICAvLyBUd28gcG9sYXIgcG9pbnRzLlxyXG4gICAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xyXG5cclxuICAgICAgdmFyIGMxID0gIGNyICogbjJuMiAvIGRldGVybWluYW50LFxyXG4gICAgICAgICAgYzIgPSAtY3IgKiBuMW4yIC8gZGV0ZXJtaW5hbnQsXHJcbiAgICAgICAgICBuMXhuMiA9IGNhcnRlc2lhbkNyb3NzKG4xLCBuMiksXHJcbiAgICAgICAgICBBID0gY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcclxuICAgICAgICAgIEIgPSBjYXJ0ZXNpYW5TY2FsZShuMiwgYzIpO1xyXG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKEEsIEIpO1xyXG5cclxuICAgICAgLy8gU29sdmUgfHAodCl8XjIgPSAxLlxyXG4gICAgICB2YXIgdSA9IG4xeG4yLFxyXG4gICAgICAgICAgdyA9IGNhcnRlc2lhbkRvdChBLCB1KSxcclxuICAgICAgICAgIHV1ID0gY2FydGVzaWFuRG90KHUsIHUpLFxyXG4gICAgICAgICAgdDIgPSB3ICogdyAtIHV1ICogKGNhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xyXG5cclxuICAgICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xyXG5cclxuICAgICAgdmFyIHQgPSBzcXJ0JDEodDIpLFxyXG4gICAgICAgICAgcSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xyXG4gICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHEsIEEpO1xyXG4gICAgICBxID0gc3BoZXJpY2FsKHEpO1xyXG5cclxuICAgICAgaWYgKCF0d28pIHJldHVybiBxO1xyXG5cclxuICAgICAgLy8gVHdvIGludGVyc2VjdGlvbiBwb2ludHMuXHJcbiAgICAgIHZhciBsYW1iZGEwID0gYVswXSxcclxuICAgICAgICAgIGxhbWJkYTEgPSBiWzBdLFxyXG4gICAgICAgICAgcGhpMCA9IGFbMV0sXHJcbiAgICAgICAgICBwaGkxID0gYlsxXSxcclxuICAgICAgICAgIHo7XHJcblxyXG4gICAgICBpZiAobGFtYmRhMSA8IGxhbWJkYTApIHogPSBsYW1iZGEwLCBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHo7XHJcblxyXG4gICAgICB2YXIgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcclxuICAgICAgICAgIHBvbGFyID0gYWJzKGRlbHRhIC0gcGkkNCkgPCBlcHNpbG9uJDQsXHJcbiAgICAgICAgICBtZXJpZGlhbiA9IHBvbGFyIHx8IGRlbHRhIDwgZXBzaWxvbiQ0O1xyXG5cclxuICAgICAgaWYgKCFwb2xhciAmJiBwaGkxIDwgcGhpMCkgeiA9IHBoaTAsIHBoaTAgPSBwaGkxLCBwaGkxID0gejtcclxuXHJcbiAgICAgIC8vIENoZWNrIHRoYXQgdGhlIGZpcnN0IHBvaW50IGlzIGJldHdlZW4gYSBhbmQgYi5cclxuICAgICAgaWYgKG1lcmlkaWFuXHJcbiAgICAgICAgICA/IHBvbGFyXHJcbiAgICAgICAgICAgID8gcGhpMCArIHBoaTEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIGxhbWJkYTApIDwgZXBzaWxvbiQ0ID8gcGhpMCA6IHBoaTEpXHJcbiAgICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxyXG4gICAgICAgICAgOiBkZWx0YSA+IHBpJDQgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcclxuICAgICAgICB2YXIgcTEgPSBjYXJ0ZXNpYW5TY2FsZSh1LCAoLXcgKyB0KSAvIHV1KTtcclxuICAgICAgICBjYXJ0ZXNpYW5BZGRJblBsYWNlKHExLCBBKTtcclxuICAgICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2VuZXJhdGVzIGEgNC1iaXQgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYXRpb24gb2YgYSBwb2ludCByZWxhdGl2ZSB0b1xyXG4gICAgLy8gdGhlIHNtYWxsIGNpcmNsZSdzIGJvdW5kaW5nIGJveC5cclxuICAgIGZ1bmN0aW9uIGNvZGUobGFtYmRhLCBwaGkpIHtcclxuICAgICAgdmFyIHIgPSBzbWFsbFJhZGl1cyA/IHJhZGl1cyA6IHBpJDQgLSByYWRpdXMsXHJcbiAgICAgICAgICBjb2RlID0gMDtcclxuICAgICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcclxuICAgICAgZWxzZSBpZiAobGFtYmRhID4gcikgY29kZSB8PSAyOyAvLyByaWdodFxyXG4gICAgICBpZiAocGhpIDwgLXIpIGNvZGUgfD0gNDsgLy8gYmVsb3dcclxuICAgICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxyXG4gICAgICByZXR1cm4gY29kZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY2xpcCh2aXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHNtYWxsUmFkaXVzID8gWzAsIC1yYWRpdXNdIDogWy1waSQ0LCByYWRpdXMgLSBwaSQ0XSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0cmFuc2Zvcm0kMShwcm90b3R5cGUpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0cmVhbTogdHJhbnNmb3JtJDIocHJvdG90eXBlKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSQyKHByb3RvdHlwZSkge1xyXG4gICAgZnVuY3Rpb24gVCgpIHt9XHJcbiAgICB2YXIgcCA9IFQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUcmFuc2Zvcm0kMS5wcm90b3R5cGUpO1xyXG4gICAgZm9yICh2YXIgayBpbiBwcm90b3R5cGUpIHBba10gPSBwcm90b3R5cGVba107XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XHJcbiAgICAgIHZhciB0ID0gbmV3IFQ7XHJcbiAgICAgIHQuc3RyZWFtID0gc3RyZWFtO1xyXG4gICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBUcmFuc2Zvcm0kMSgpIHt9XHJcblxyXG4gIFRyYW5zZm9ybSQxLnByb3RvdHlwZSA9IHtcclxuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxyXG4gICAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXHJcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lU3RhcnQoKTsgfSxcclxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXHJcbiAgICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcclxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCk7IH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBmaXQocHJvamVjdCwgZXh0ZW50LCBvYmplY3QpIHtcclxuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxyXG4gICAgICAgIGggPSBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0sXHJcbiAgICAgICAgY2xpcCA9IHByb2plY3QuY2xpcEV4dGVudCAmJiBwcm9qZWN0LmNsaXBFeHRlbnQoKTtcclxuXHJcbiAgICBwcm9qZWN0XHJcbiAgICAgICAgLnNjYWxlKDE1MClcclxuICAgICAgICAudHJhbnNsYXRlKFswLCAwXSk7XHJcblxyXG4gICAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdC5jbGlwRXh0ZW50KG51bGwpO1xyXG5cclxuICAgIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Quc3RyZWFtKGJvdW5kc1N0cmVhbSQxKSk7XHJcblxyXG4gICAgdmFyIGIgPSBib3VuZHNTdHJlYW0kMS5yZXN1bHQoKSxcclxuICAgICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcclxuICAgICAgICB4ID0gK2V4dGVudFswXVswXSArICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcclxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcclxuXHJcbiAgICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0LmNsaXBFeHRlbnQoY2xpcCk7XHJcblxyXG4gICAgcmV0dXJuIHByb2plY3RcclxuICAgICAgICAuc2NhbGUoayAqIDE1MClcclxuICAgICAgICAudHJhbnNsYXRlKFt4LCB5XSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmaXRTaXplKHByb2plY3QpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcclxuICAgICAgcmV0dXJuIGZpdChwcm9qZWN0LCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmaXRFeHRlbnQocHJvamVjdCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XHJcbiAgICAgIHJldHVybiBmaXQocHJvamVjdCwgZXh0ZW50LCBvYmplY3QpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciBtYXhEZXB0aCA9IDE2O1xyXG4gIHZhciBjb3NNaW5EaXN0YW5jZSA9IGNvcyQxKDMwICogcmFkaWFucyk7XHJcbiAgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcclxuXHJcbiAgZnVuY3Rpb24gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSB7XHJcbiAgICByZXR1cm4gK2RlbHRhMiA/IHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTm9uZShwcm9qZWN0KSB7XHJcbiAgICByZXR1cm4gdHJhbnNmb3JtJDIoe1xyXG4gICAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2FtcGxlJDEocHJvamVjdCwgZGVsdGEyKSB7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pIHtcclxuICAgICAgdmFyIGR4ID0geDEgLSB4MCxcclxuICAgICAgICAgIGR5ID0geTEgLSB5MCxcclxuICAgICAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHk7XHJcbiAgICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xyXG4gICAgICAgIHZhciBhID0gYTAgKyBhMSxcclxuICAgICAgICAgICAgYiA9IGIwICsgYjEsXHJcbiAgICAgICAgICAgIGMgPSBjMCArIGMxLFxyXG4gICAgICAgICAgICBtID0gc3FydCQxKGEgKiBhICsgYiAqIGIgKyBjICogYyksXHJcbiAgICAgICAgICAgIHBoaTIgPSBhc2luJDEoYyAvPSBtKSxcclxuICAgICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24kNCB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiQ0ID8gKGxhbWJkYTAgKyBsYW1iZGExKSAvIDIgOiBhdGFuMihiLCBhKSxcclxuICAgICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXHJcbiAgICAgICAgICAgIHgyID0gcFswXSxcclxuICAgICAgICAgICAgeTIgPSBwWzFdLFxyXG4gICAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxyXG4gICAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxyXG4gICAgICAgICAgICBkeiA9IGR5ICogZHgyIC0gZHggKiBkeTI7XHJcbiAgICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxyXG4gICAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxyXG4gICAgICAgICAgICB8fCBhMCAqIGExICsgYjAgKiBiMSArIGMwICogYzEgPCBjb3NNaW5EaXN0YW5jZSkgeyAvLyBhbmd1bGFyIGRpc3RhbmNlXHJcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xyXG4gICAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XHJcbiAgICAgICAgICByZXNhbXBsZUxpbmVUbyh4MiwgeTIsIGxhbWJkYTIsIGEsIGIsIGMsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XHJcbiAgICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XHJcbiAgICAgICAgICBsYW1iZGEwLCB4MCwgeTAsIGEwLCBiMCwgYzA7IC8vIHByZXZpb3VzIHBvaW50XHJcblxyXG4gICAgICB2YXIgcmVzYW1wbGVTdHJlYW0gPSB7XHJcbiAgICAgICAgcG9pbnQ6IHBvaW50LFxyXG4gICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxyXG4gICAgICAgIGxpbmVFbmQ6IGxpbmVFbmQsXHJcbiAgICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXHJcbiAgICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgZnVuY3Rpb24gcG9pbnQoeCwgeSkge1xyXG4gICAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xyXG4gICAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZVN0YXJ0KCkge1xyXG4gICAgICAgIHgwID0gTmFOO1xyXG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xyXG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcclxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgwID0gcFswXSwgeTAgPSBwWzFdLCBsYW1iZGEwID0gbGFtYmRhLCBhMCA9IGNbMF0sIGIwID0gY1sxXSwgYzAgPSBjWzJdLCBtYXhEZXB0aCwgc3RyZWFtKTtcclxuICAgICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcclxuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHBvaW50O1xyXG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcclxuICAgICAgICBsaW5lU3RhcnQoKTtcclxuICAgICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcclxuICAgICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gcmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XHJcbiAgICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XHJcbiAgICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJpbmdFbmQoKSB7XHJcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xyXG4gICAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xyXG4gICAgICAgIGxpbmVFbmQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtJDIoe1xyXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgdGhpcy5zdHJlYW0ucG9pbnQoeCAqIHJhZGlhbnMsIHkgKiByYWRpYW5zKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwcm9qZWN0KSB7XHJcbiAgICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XHJcbiAgICB2YXIgcHJvamVjdCxcclxuICAgICAgICBrID0gMTUwLCAvLyBzY2FsZVxyXG4gICAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxyXG4gICAgICAgIGR4LCBkeSwgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXHJcbiAgICAgICAgZGVsdGFMYW1iZGEgPSAwLCBkZWx0YVBoaSA9IDAsIGRlbHRhR2FtbWEgPSAwLCByb3RhdGUsIHByb2plY3RSb3RhdGUsIC8vIHJvdGF0ZVxyXG4gICAgICAgIHRoZXRhID0gbnVsbCwgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sIC8vIGNsaXAgYW5nbGVcclxuICAgICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHkkNywgLy8gY2xpcCBleHRlbnRcclxuICAgICAgICBkZWx0YTIgPSAwLjUsIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiksIC8vIHByZWNpc2lvblxyXG4gICAgICAgIGNhY2hlLFxyXG4gICAgICAgIGNhY2hlU3RyZWFtO1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ocG9pbnQpIHtcclxuICAgICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcclxuICAgICAgcmV0dXJuIFtwb2ludFswXSAqIGsgKyBkeCwgZHkgLSBwb2ludFsxXSAqIGtdO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xyXG4gICAgICBwb2ludCA9IHByb2plY3RSb3RhdGUuaW52ZXJ0KChwb2ludFswXSAtIGR4KSAvIGssIChkeSAtIHBvaW50WzFdKSAvIGspO1xyXG4gICAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcyQxLCBwb2ludFsxXSAqIGRlZ3JlZXMkMV07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvamVjdFRyYW5zZm9ybSh4LCB5KSB7XHJcbiAgICAgIHJldHVybiB4ID0gcHJvamVjdCh4LCB5KSwgW3hbMF0gKiBrICsgZHgsIGR5IC0geFsxXSAqIGtdO1xyXG4gICAgfVxyXG5cclxuICAgIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XHJcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IHRyYW5zZm9ybVJhZGlhbnMocHJlY2xpcChyb3RhdGUsIHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gK18gPyBjbGlwQ2lyY2xlKHRoZXRhID0gXyAqIHJhZGlhbnMsIDYgKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcyQxO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkkNykgOiBjbGlwRXh0ZW50KHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XHJcbiAgICB9O1xyXG5cclxuICAgIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XHJcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGsgPSArXywgcmVjZW50ZXIoKSkgOiBrO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzJDEsIHBoaSAqIGRlZ3JlZXMkMV07XHJcbiAgICB9O1xyXG5cclxuICAgIHByb2plY3Rpb24ucm90YXRlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMkMSwgZGVsdGFQaGkgKiBkZWdyZWVzJDEsIGRlbHRhR2FtbWEgKiBkZWdyZWVzJDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQkMShkZWx0YTIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZpdEV4dGVudChwcm9qZWN0aW9uKTtcclxuXHJcbiAgICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmaXRTaXplKHByb2plY3Rpb24pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xyXG4gICAgICBwcm9qZWN0Um90YXRlID0gY29tcG9zZShyb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSksIHByb2plY3QpO1xyXG4gICAgICB2YXIgY2VudGVyID0gcHJvamVjdChsYW1iZGEsIHBoaSk7XHJcbiAgICAgIGR4ID0geCAtIGNlbnRlclswXSAqIGs7XHJcbiAgICAgIGR5ID0geSArIGNlbnRlclsxXSAqIGs7XHJcbiAgICAgIHJldHVybiByZXNldCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xyXG4gICAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcclxuICAgICAgcmV0dXJuIHByb2plY3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xyXG4gICAgICByZXR1cm4gcmVjZW50ZXIoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25pY1Byb2plY3Rpb24ocHJvamVjdEF0KSB7XHJcbiAgICB2YXIgcGhpMCA9IDAsXHJcbiAgICAgICAgcGhpMSA9IHBpJDQgLyAzLFxyXG4gICAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxyXG4gICAgICAgIHAgPSBtKHBoaTAsIHBoaTEpO1xyXG5cclxuICAgIHAucGFyYWxsZWxzID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IG0ocGhpMCA9IF9bMF0gKiByYWRpYW5zLCBwaGkxID0gX1sxXSAqIHJhZGlhbnMpIDogW3BoaTAgKiBkZWdyZWVzJDEsIHBoaTEgKiBkZWdyZWVzJDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhUmF3KHkwLCB5MSkge1xyXG4gICAgdmFyIHN5MCA9IHNpbiQxKHkwKSxcclxuICAgICAgICBuID0gKHN5MCArIHNpbiQxKHkxKSkgLyAyLFxyXG4gICAgICAgIGMgPSAxICsgc3kwICogKDIgKiBuIC0gc3kwKSxcclxuICAgICAgICByMCA9IHNxcnQkMShjKSAvIG47XHJcblxyXG4gICAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XHJcbiAgICAgIHZhciByID0gc3FydCQxKGMgLSAyICogbiAqIHNpbiQxKHkpKSAvIG47XHJcbiAgICAgIHJldHVybiBbciAqIHNpbiQxKHggKj0gbiksIHIwIC0gciAqIGNvcyQxKHgpXTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgdmFyIHIweSA9IHIwIC0geTtcclxuICAgICAgcmV0dXJuIFthdGFuMih4LCByMHkpIC8gbiwgYXNpbiQxKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHByb2plY3Q7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25pY0VxdWFsQXJlYSgpIHtcclxuICAgIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXHJcbiAgICAgICAgLnNjYWxlKDE1NS40MjQpXHJcbiAgICAgICAgLmNlbnRlcihbMCwgMzMuNjQ0Ml0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYWxiZXJzKCkge1xyXG4gICAgcmV0dXJuIGNvbmljRXF1YWxBcmVhKClcclxuICAgICAgICAucGFyYWxsZWxzKFsyOS41LCA0NS41XSlcclxuICAgICAgICAuc2NhbGUoMTA3MClcclxuICAgICAgICAudHJhbnNsYXRlKFs0ODAsIDI1MF0pXHJcbiAgICAgICAgLnJvdGF0ZShbOTYsIDBdKVxyXG4gICAgICAgIC5jZW50ZXIoWy0wLjYsIDM4LjddKTtcclxuICB9XHJcblxyXG4gIC8vIFRoZSBwcm9qZWN0aW9ucyBtdXN0IGhhdmUgbXV0dWFsbHkgZXhjbHVzaXZlIGNsaXAgcmVnaW9ucyBvbiB0aGUgc3BoZXJlLFxyXG4gIC8vIGFzIHRoaXMgd2lsbCBhdm9pZCBlbWl0dGluZyBpbnRlcmxlYXZpbmcgbGluZXMgYW5kIHBvbHlnb25zLlxyXG4gIGZ1bmN0aW9uIG11bHRpcGxleChzdHJlYW1zKSB7XHJcbiAgICB2YXIgbiA9IHN0cmVhbXMubGVuZ3RoO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9pbnQoeCwgeSk7IH0sXHJcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnNwaGVyZSgpOyB9LFxyXG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lU3RhcnQoKTsgfSxcclxuICAgICAgbGluZUVuZDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLmxpbmVFbmQoKTsgfSxcclxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ucG9seWdvblN0YXJ0KCk7IH0sXHJcbiAgICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7IH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBBIGNvbXBvc2l0ZSBwcm9qZWN0aW9uIGZvciB0aGUgVW5pdGVkIFN0YXRlcywgY29uZmlndXJlZCBieSBkZWZhdWx0IGZvclxyXG4gIC8vIDk2MMOXNTAwLiBUaGUgcHJvamVjdGlvbiBhbHNvIHdvcmtzIHF1aXRlIHdlbGwgYXQgOTYww5c2MDAgaWYgeW91IGNoYW5nZSB0aGVcclxuICAvLyBzY2FsZSB0byAxMjg1IGFuZCBhZGp1c3QgdGhlIHRyYW5zbGF0ZSBhY2NvcmRpbmdseS4gVGhlIHNldCBvZiBzdGFuZGFyZFxyXG4gIC8vIHBhcmFsbGVscyBmb3IgZWFjaCByZWdpb24gY29tZXMgZnJvbSBVU0dTLCB3aGljaCBpcyBwdWJsaXNoZWQgaGVyZTpcclxuICAvLyBodHRwOi8vZWdzYy51c2dzLmdvdi9pc2IvcHVicy9NYXBQcm9qZWN0aW9ucy9wcm9qZWN0aW9ucy5odG1sI2FsYmVyc1xyXG4gIGZ1bmN0aW9uIGFsYmVyc1VzYSgpIHtcclxuICAgIHZhciBjYWNoZSxcclxuICAgICAgICBjYWNoZVN0cmVhbSxcclxuICAgICAgICBsb3dlcjQ4ID0gYWxiZXJzKCksIGxvd2VyNDhQb2ludCxcclxuICAgICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcclxuICAgICAgICBoYXdhaWkgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU3LCAwXSkuY2VudGVyKFstMywgMTkuOV0pLnBhcmFsbGVscyhbOCwgMThdKSwgaGF3YWlpUG9pbnQsIC8vIEVTUkk6MTAyMDA3XHJcbiAgICAgICAgcG9pbnQsIHBvaW50U3RyZWFtID0ge3BvaW50OiBmdW5jdGlvbih4LCB5KSB7IHBvaW50ID0gW3gsIHldOyB9fTtcclxuXHJcbiAgICBmdW5jdGlvbiBhbGJlcnNVc2EoY29vcmRpbmF0ZXMpIHtcclxuICAgICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xyXG4gICAgICByZXR1cm4gcG9pbnQgPSBudWxsLFxyXG4gICAgICAgICAgKGxvd2VyNDhQb2ludC5wb2ludCh4LCB5KSwgcG9pbnQpXHJcbiAgICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxyXG4gICAgICAgICAgfHwgKGhhd2FpaVBvaW50LnBvaW50KHgsIHkpLCBwb2ludCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWxiZXJzVXNhLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XHJcbiAgICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxyXG4gICAgICAgICAgdCA9IGxvd2VyNDgudHJhbnNsYXRlKCksXHJcbiAgICAgICAgICB4ID0gKGNvb3JkaW5hdGVzWzBdIC0gdFswXSkgLyBrLFxyXG4gICAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcclxuICAgICAgcmV0dXJuICh5ID49IDAuMTIwICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjQyNSAmJiB4IDwgLTAuMjE0ID8gYWxhc2thXHJcbiAgICAgICAgICA6IHkgPj0gMC4xNjYgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuMjE0ICYmIHggPCAtMC4xMTUgPyBoYXdhaWlcclxuICAgICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcclxuICAgIH07XHJcblxyXG4gICAgYWxiZXJzVXNhLnN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkge1xyXG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSBtdWx0aXBsZXgoW2xvd2VyNDguc3RyZWFtKGNhY2hlU3RyZWFtID0gc3RyZWFtKSwgYWxhc2thLnN0cmVhbShzdHJlYW0pLCBoYXdhaWkuc3RyZWFtKHN0cmVhbSldKTtcclxuICAgIH07XHJcblxyXG4gICAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5wcmVjaXNpb24oKTtcclxuICAgICAgbG93ZXI0OC5wcmVjaXNpb24oXyksIGFsYXNrYS5wcmVjaXNpb24oXyksIGhhd2FpaS5wcmVjaXNpb24oXyk7XHJcbiAgICAgIHJldHVybiBhbGJlcnNVc2E7XHJcbiAgICB9O1xyXG5cclxuICAgIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC5zY2FsZSgpO1xyXG4gICAgICBsb3dlcjQ4LnNjYWxlKF8pLCBhbGFza2Euc2NhbGUoXyAqIDAuMzUpLCBoYXdhaWkuc2NhbGUoXyk7XHJcbiAgICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBhbGJlcnNVc2EudHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnRyYW5zbGF0ZSgpO1xyXG4gICAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XHJcblxyXG4gICAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XHJcbiAgICAgICAgICAudHJhbnNsYXRlKF8pXHJcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQ1NSAqIGssIHkgLSAwLjIzOCAqIGtdLCBbeCArIDAuNDU1ICogaywgeSArIDAuMjM4ICoga11dKVxyXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XHJcblxyXG4gICAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxyXG4gICAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMzA3ICogaywgeSArIDAuMjAxICoga10pXHJcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjQyNSAqIGsgKyBlcHNpbG9uJDQsIHkgKyAwLjEyMCAqIGsgKyBlcHNpbG9uJDRdLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24kNCwgeSArIDAuMjM0ICogayAtIGVwc2lsb24kNF1dKVxyXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XHJcblxyXG4gICAgICBoYXdhaWlQb2ludCA9IGhhd2FpaVxyXG4gICAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMjA1ICogaywgeSArIDAuMjEyICoga10pXHJcbiAgICAgICAgICAuY2xpcEV4dGVudChbW3ggLSAwLjIxNCAqIGsgKyBlcHNpbG9uJDQsIHkgKyAwLjE2NiAqIGsgKyBlcHNpbG9uJDRdLCBbeCAtIDAuMTE1ICogayAtIGVwc2lsb24kNCwgeSArIDAuMjM0ICogayAtIGVwc2lsb24kNF1dKVxyXG4gICAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XHJcblxyXG4gICAgICByZXR1cm4gYWxiZXJzVXNhO1xyXG4gICAgfTtcclxuXHJcbiAgICBhbGJlcnNVc2EuZml0RXh0ZW50ID0gZml0RXh0ZW50KGFsYmVyc1VzYSk7XHJcblxyXG4gICAgYWxiZXJzVXNhLmZpdFNpemUgPSBmaXRTaXplKGFsYmVyc1VzYSk7XHJcblxyXG4gICAgcmV0dXJuIGFsYmVyc1VzYS5zY2FsZSgxMDcwKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgdmFyIGN4ID0gY29zJDEoeCksXHJcbiAgICAgICAgICBjeSA9IGNvcyQxKHkpLFxyXG4gICAgICAgICAgayA9IHNjYWxlKGN4ICogY3kpO1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIGsgKiBjeSAqIHNpbiQxKHgpLFxyXG4gICAgICAgIGsgKiBzaW4kMSh5KVxyXG4gICAgICBdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgICB2YXIgeiA9IHNxcnQkMSh4ICogeCArIHkgKiB5KSxcclxuICAgICAgICAgIGMgPSBhbmdsZSh6KSxcclxuICAgICAgICAgIHNjID0gc2luJDEoYyksXHJcbiAgICAgICAgICBjYyA9IGNvcyQxKGMpO1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcclxuICAgICAgICBhc2luJDEoeiAmJiB5ICogc2MgLyB6KVxyXG4gICAgICBdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIGF6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbFJhdyhmdW5jdGlvbihjeGN5KSB7XHJcbiAgICByZXR1cm4gc3FydCQxKDIgLyAoMSArIGN4Y3kpKTtcclxuICB9KTtcclxuXHJcbiAgYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XHJcbiAgICByZXR1cm4gMiAqIGFzaW4kMSh6IC8gMik7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGF6aW11dGhhbEVxdWFsQXJlYSgpIHtcclxuICAgIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcclxuICAgICAgICAuc2NhbGUoMTI0Ljc1KVxyXG4gICAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XHJcbiAgfVxyXG5cclxuICB2YXIgYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oYykge1xyXG4gICAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbiQxKGMpO1xyXG4gIH0pO1xyXG5cclxuICBhemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xyXG4gICAgcmV0dXJuIHo7XHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIGF6aW11dGhhbEVxdWlkaXN0YW50KCkge1xyXG4gICAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpXHJcbiAgICAgICAgLnNjYWxlKDc5LjQxODgpXHJcbiAgICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XHJcbiAgICByZXR1cm4gW2xhbWJkYSwgbG9nJDEodGFuKChoYWxmUGkkMyArIHBoaSkgLyAyKSldO1xyXG4gIH1cclxuXHJcbiAgbWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpJDNdO1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1lcmNhdG9yKCkge1xyXG4gICAgcmV0dXJuIG1lcmNhdG9yUHJvamVjdGlvbihtZXJjYXRvclJhdylcclxuICAgICAgICAuc2NhbGUoOTYxIC8gdGF1JDQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVyY2F0b3JQcm9qZWN0aW9uKHByb2plY3QpIHtcclxuICAgIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcclxuICAgICAgICBzY2FsZSA9IG0uc2NhbGUsXHJcbiAgICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXHJcbiAgICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcclxuICAgICAgICBjbGlwQXV0bztcclxuXHJcbiAgICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzY2FsZShfKSwgY2xpcEF1dG8gJiYgbS5jbGlwRXh0ZW50KG51bGwpLCBtKSA6IHNjYWxlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2xhdGUoXyksIGNsaXBBdXRvICYmIG0uY2xpcEV4dGVudChudWxsKSwgbSkgOiB0cmFuc2xhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgbS5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xyXG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjbGlwQXV0byA/IG51bGwgOiBjbGlwRXh0ZW50KCk7XHJcbiAgICAgIGlmIChjbGlwQXV0byA9IF8gPT0gbnVsbCkge1xyXG4gICAgICAgIHZhciBrID0gcGkkNCAqIHNjYWxlKCksXHJcbiAgICAgICAgICAgIHQgPSB0cmFuc2xhdGUoKTtcclxuICAgICAgICBfID0gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV07XHJcbiAgICAgIH1cclxuICAgICAgY2xpcEV4dGVudChfKTtcclxuICAgICAgcmV0dXJuIG07XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBtLmNsaXBFeHRlbnQobnVsbCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0YW55KHkpIHtcclxuICAgIHJldHVybiB0YW4oKGhhbGZQaSQzICsgeSkgLyAyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmljQ29uZm9ybWFsUmF3KHkwLCB5MSkge1xyXG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcclxuICAgICAgICBuID0geTAgPT09IHkxID8gc2luJDEoeTApIDogbG9nJDEoY3kwIC8gY29zJDEoeTEpKSAvIGxvZyQxKHRhbnkoeTEpIC8gdGFueSh5MCkpLFxyXG4gICAgICAgIGYgPSBjeTAgKiBwb3ckMSh0YW55KHkwKSwgbikgLyBuO1xyXG5cclxuICAgIGlmICghbikgcmV0dXJuIG1lcmNhdG9yUmF3O1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xyXG4gICAgICBpZiAoZiA+IDApIHsgaWYgKHkgPCAtaGFsZlBpJDMgKyBlcHNpbG9uJDQpIHkgPSAtaGFsZlBpJDMgKyBlcHNpbG9uJDQ7IH1cclxuICAgICAgZWxzZSB7IGlmICh5ID4gaGFsZlBpJDMgLSBlcHNpbG9uJDQpIHkgPSBoYWxmUGkkMyAtIGVwc2lsb24kNDsgfVxyXG4gICAgICB2YXIgciA9IGYgLyBwb3ckMSh0YW55KHkpLCBuKTtcclxuICAgICAgcmV0dXJuIFtyICogc2luJDEobiAqIHgpLCBmIC0gciAqIGNvcyQxKG4gKiB4KV07XHJcbiAgICB9XHJcblxyXG4gICAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XHJcbiAgICAgIHZhciBmeSA9IGYgLSB5LCByID0gc2lnbiQxKG4pICogc3FydCQxKHggKiB4ICsgZnkgKiBmeSk7XHJcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgZnkpIC8gbiwgMiAqIGF0YW4ocG93JDEoZiAvIHIsIDEgLyBuKSkgLSBoYWxmUGkkM107XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBwcm9qZWN0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29uaWNDb25mb3JtYWwoKSB7XHJcbiAgICByZXR1cm4gY29uaWNQcm9qZWN0aW9uKGNvbmljQ29uZm9ybWFsUmF3KVxyXG4gICAgICAgIC5zY2FsZSgxMDkuNSlcclxuICAgICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xyXG4gICAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XHJcbiAgfVxyXG5cclxuICBlcXVpcmVjdGFuZ3VsYXJSYXcuaW52ZXJ0ID0gZXF1aXJlY3Rhbmd1bGFyUmF3O1xyXG5cclxuICBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXIoKSB7XHJcbiAgICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXHJcbiAgICAgICAgLnNjYWxlKDE1Mi42Myk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50UmF3KHkwLCB5MSkge1xyXG4gICAgdmFyIGN5MCA9IGNvcyQxKHkwKSxcclxuICAgICAgICBuID0geTAgPT09IHkxID8gc2luJDEoeTApIDogKGN5MCAtIGNvcyQxKHkxKSkgLyAoeTEgLSB5MCksXHJcbiAgICAgICAgZyA9IGN5MCAvIG4gKyB5MDtcclxuXHJcbiAgICBpZiAoYWJzKG4pIDwgZXBzaWxvbiQ0KSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xyXG4gICAgICB2YXIgZ3kgPSBnIC0geSwgbnggPSBuICogeDtcclxuICAgICAgcmV0dXJuIFtneSAqIHNpbiQxKG54KSwgZyAtIGd5ICogY29zJDEobngpXTtcclxuICAgIH1cclxuXHJcbiAgICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcclxuICAgICAgdmFyIGd5ID0gZyAtIHk7XHJcbiAgICAgIHJldHVybiBbYXRhbjIoeCwgZ3kpIC8gbiwgZyAtIHNpZ24kMShuKSAqIHNxcnQkMSh4ICogeCArIGd5ICogZ3kpXTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHByb2plY3Q7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjb25pY0VxdWlkaXN0YW50KCkge1xyXG4gICAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWlkaXN0YW50UmF3KVxyXG4gICAgICAgIC5zY2FsZSgxMzEuMTU0KVxyXG4gICAgICAgIC5jZW50ZXIoWzAsIDEzLjkzODldKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcclxuICAgIHZhciBjeSA9IGNvcyQxKHkpLCBrID0gY29zJDEoeCkgKiBjeTtcclxuICAgIHJldHVybiBbY3kgKiBzaW4kMSh4KSAvIGssIHNpbiQxKHkpIC8ga107XHJcbiAgfVxyXG5cclxuICBnbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XHJcblxyXG4gIGZ1bmN0aW9uIGdub21vbmljKCkge1xyXG4gICAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXHJcbiAgICAgICAgLnNjYWxlKDE0NC4wNDkpXHJcbiAgICAgICAgLmNsaXBBbmdsZSg2MCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xyXG4gICAgcmV0dXJuIFtjb3MkMSh5KSAqIHNpbiQxKHgpLCBzaW4kMSh5KV07XHJcbiAgfVxyXG5cclxuICBvcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4kMSk7XHJcblxyXG4gIGZ1bmN0aW9uIG9ydGhvZ3JhcGhpYygpIHtcclxuICAgIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcclxuICAgICAgICAuc2NhbGUoMjQ5LjUpXHJcbiAgICAgICAgLmNsaXBBbmdsZSg5MCArIGVwc2lsb24kNCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdGVyZW9ncmFwaGljUmF3KHgsIHkpIHtcclxuICAgIHZhciBjeSA9IGNvcyQxKHkpLCBrID0gMSArIGNvcyQxKHgpICogY3k7XHJcbiAgICByZXR1cm4gW2N5ICogc2luJDEoeCkgLyBrLCBzaW4kMSh5KSAvIGtdO1xyXG4gIH1cclxuXHJcbiAgc3RlcmVvZ3JhcGhpY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xyXG4gICAgcmV0dXJuIDIgKyBhdGFuKHopO1xyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBzdGVyZW9ncmFwaGljKCkge1xyXG4gICAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcclxuICAgICAgICAuc2NhbGUoMjUwKVxyXG4gICAgICAgIC5jbGlwQW5nbGUoMTQyKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRyYW5zdmVyc2VNZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xyXG4gICAgcmV0dXJuIFtsb2ckMSh0YW4oKGhhbGZQaSQzICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XHJcbiAgfVxyXG5cclxuICB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xyXG4gICAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaSQzXTtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3IoKSB7XHJcbiAgICB2YXIgbSA9IG1lcmNhdG9yUHJvamVjdGlvbih0cmFuc3ZlcnNlTWVyY2F0b3JSYXcpLFxyXG4gICAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxyXG4gICAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xyXG5cclxuICAgIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xyXG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGNlbnRlcihbLV9bMV0sIF9bMF1dKSA6IChfID0gY2VudGVyKCksIFtfWzFdLCAtX1swXV0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcclxuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByb3RhdGUoWzAsIDAsIDkwXSlcclxuICAgICAgICAuc2NhbGUoMTU5LjE1NSk7XHJcbiAgfVxyXG5cclxuICBleHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xyXG4gIGV4cG9ydHMuYmlzZWN0ID0gYmlzZWN0UmlnaHQ7XHJcbiAgZXhwb3J0cy5iaXNlY3RSaWdodCA9IGJpc2VjdFJpZ2h0O1xyXG4gIGV4cG9ydHMuYmlzZWN0TGVmdCA9IGJpc2VjdExlZnQ7XHJcbiAgZXhwb3J0cy5hc2NlbmRpbmcgPSBhc2NlbmRpbmc7XHJcbiAgZXhwb3J0cy5iaXNlY3RvciA9IGJpc2VjdG9yO1xyXG4gIGV4cG9ydHMuZGVzY2VuZGluZyA9IGRlc2NlbmRpbmc7XHJcbiAgZXhwb3J0cy5kZXZpYXRpb24gPSBkZXZpYXRpb247XHJcbiAgZXhwb3J0cy5leHRlbnQgPSBleHRlbnQ7XHJcbiAgZXhwb3J0cy5oaXN0b2dyYW0gPSBoaXN0b2dyYW07XHJcbiAgZXhwb3J0cy50aHJlc2hvbGRGcmVlZG1hbkRpYWNvbmlzID0gZnJlZWRtYW5EaWFjb25pcztcclxuICBleHBvcnRzLnRocmVzaG9sZFNjb3R0ID0gc2NvdHQ7XHJcbiAgZXhwb3J0cy50aHJlc2hvbGRTdHVyZ2VzID0gc3R1cmdlcztcclxuICBleHBvcnRzLm1heCA9IG1heDtcclxuICBleHBvcnRzLm1lYW4gPSBtZWFuO1xyXG4gIGV4cG9ydHMubWVkaWFuID0gbWVkaWFuO1xyXG4gIGV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcclxuICBleHBvcnRzLm1pbiA9IG1pbjtcclxuICBleHBvcnRzLnBhaXJzID0gcGFpcnM7XHJcbiAgZXhwb3J0cy5wZXJtdXRlID0gcGVybXV0ZTtcclxuICBleHBvcnRzLnF1YW50aWxlID0gdGhyZXNob2xkO1xyXG4gIGV4cG9ydHMucmFuZ2UgPSByYW5nZTtcclxuICBleHBvcnRzLnNjYW4gPSBzY2FuO1xyXG4gIGV4cG9ydHMuc2h1ZmZsZSA9IHNodWZmbGU7XHJcbiAgZXhwb3J0cy5zdW0gPSBzdW07XHJcbiAgZXhwb3J0cy50aWNrcyA9IHRpY2tzO1xyXG4gIGV4cG9ydHMudGlja1N0ZXAgPSB0aWNrU3RlcDtcclxuICBleHBvcnRzLnRyYW5zcG9zZSA9IHRyYW5zcG9zZTtcclxuICBleHBvcnRzLnZhcmlhbmNlID0gdmFyaWFuY2U7XHJcbiAgZXhwb3J0cy56aXAgPSB6aXA7XHJcbiAgZXhwb3J0cy5lbnRyaWVzID0gZW50cmllcztcclxuICBleHBvcnRzLmtleXMgPSBrZXlzO1xyXG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xyXG4gIGV4cG9ydHMubWFwID0gbWFwJDE7XHJcbiAgZXhwb3J0cy5zZXQgPSBzZXQ7XHJcbiAgZXhwb3J0cy5uZXN0ID0gbmVzdDtcclxuICBleHBvcnRzLnJhbmRvbVVuaWZvcm0gPSB1bmlmb3JtO1xyXG4gIGV4cG9ydHMucmFuZG9tTm9ybWFsID0gbm9ybWFsO1xyXG4gIGV4cG9ydHMucmFuZG9tTG9nTm9ybWFsID0gbG9nTm9ybWFsO1xyXG4gIGV4cG9ydHMucmFuZG9tQmF0ZXMgPSBiYXRlcztcclxuICBleHBvcnRzLnJhbmRvbUlyd2luSGFsbCA9IGlyd2luSGFsbDtcclxuICBleHBvcnRzLnJhbmRvbUV4cG9uZW50aWFsID0gZXhwb25lbnRpYWw7XHJcbiAgZXhwb3J0cy5lYXNlTGluZWFyID0gbGluZWFyO1xyXG4gIGV4cG9ydHMuZWFzZVF1YWQgPSBxdWFkSW5PdXQ7XHJcbiAgZXhwb3J0cy5lYXNlUXVhZEluID0gcXVhZEluO1xyXG4gIGV4cG9ydHMuZWFzZVF1YWRPdXQgPSBxdWFkT3V0O1xyXG4gIGV4cG9ydHMuZWFzZVF1YWRJbk91dCA9IHF1YWRJbk91dDtcclxuICBleHBvcnRzLmVhc2VDdWJpYyA9IGVhc2VDdWJpY0luT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUN1YmljSW4gPSBjdWJpY0luO1xyXG4gIGV4cG9ydHMuZWFzZUN1YmljT3V0ID0gY3ViaWNPdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQ3ViaWNJbk91dCA9IGVhc2VDdWJpY0luT3V0O1xyXG4gIGV4cG9ydHMuZWFzZVBvbHkgPSBwb2x5SW5PdXQ7XHJcbiAgZXhwb3J0cy5lYXNlUG9seUluID0gcG9seUluO1xyXG4gIGV4cG9ydHMuZWFzZVBvbHlPdXQgPSBwb2x5T3V0O1xyXG4gIGV4cG9ydHMuZWFzZVBvbHlJbk91dCA9IHBvbHlJbk91dDtcclxuICBleHBvcnRzLmVhc2VTaW4gPSBzaW5Jbk91dDtcclxuICBleHBvcnRzLmVhc2VTaW5JbiA9IHNpbkluO1xyXG4gIGV4cG9ydHMuZWFzZVNpbk91dCA9IHNpbk91dDtcclxuICBleHBvcnRzLmVhc2VTaW5Jbk91dCA9IHNpbkluT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUV4cCA9IGV4cEluT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUV4cEluID0gZXhwSW47XHJcbiAgZXhwb3J0cy5lYXNlRXhwT3V0ID0gZXhwT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUV4cEluT3V0ID0gZXhwSW5PdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlID0gY2lyY2xlSW5PdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW4gPSBjaXJjbGVJbjtcclxuICBleHBvcnRzLmVhc2VDaXJjbGVPdXQgPSBjaXJjbGVPdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQ2lyY2xlSW5PdXQgPSBjaXJjbGVJbk91dDtcclxuICBleHBvcnRzLmVhc2VCb3VuY2UgPSBib3VuY2VPdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQm91bmNlSW4gPSBib3VuY2VJbjtcclxuICBleHBvcnRzLmVhc2VCb3VuY2VPdXQgPSBib3VuY2VPdXQ7XHJcbiAgZXhwb3J0cy5lYXNlQm91bmNlSW5PdXQgPSBib3VuY2VJbk91dDtcclxuICBleHBvcnRzLmVhc2VCYWNrID0gYmFja0luT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUJhY2tJbiA9IGJhY2tJbjtcclxuICBleHBvcnRzLmVhc2VCYWNrT3V0ID0gYmFja091dDtcclxuICBleHBvcnRzLmVhc2VCYWNrSW5PdXQgPSBiYWNrSW5PdXQ7XHJcbiAgZXhwb3J0cy5lYXNlRWxhc3RpYyA9IGVsYXN0aWNPdXQ7XHJcbiAgZXhwb3J0cy5lYXNlRWxhc3RpY0luID0gZWxhc3RpY0luO1xyXG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNPdXQgPSBlbGFzdGljT3V0O1xyXG4gIGV4cG9ydHMuZWFzZUVsYXN0aWNJbk91dCA9IGVsYXN0aWNJbk91dDtcclxuICBleHBvcnRzLnBvbHlnb25BcmVhID0gYXJlYTtcclxuICBleHBvcnRzLnBvbHlnb25DZW50cm9pZCA9IGNlbnRyb2lkO1xyXG4gIGV4cG9ydHMucG9seWdvbkh1bGwgPSBodWxsO1xyXG4gIGV4cG9ydHMucG9seWdvbkNvbnRhaW5zID0gY29udGFpbnM7XHJcbiAgZXhwb3J0cy5wb2x5Z29uTGVuZ3RoID0gbGVuZ3RoJDE7XHJcbiAgZXhwb3J0cy5wYXRoID0gcGF0aDtcclxuICBleHBvcnRzLnF1YWR0cmVlID0gcXVhZHRyZWU7XHJcbiAgZXhwb3J0cy5xdWV1ZSA9IHF1ZXVlO1xyXG4gIGV4cG9ydHMuYXJjID0gYXJjO1xyXG4gIGV4cG9ydHMuYXJlYSA9IGFyZWEkMTtcclxuICBleHBvcnRzLmxpbmUgPSBsaW5lO1xyXG4gIGV4cG9ydHMucGllID0gcGllO1xyXG4gIGV4cG9ydHMucmFkaWFsQXJlYSA9IHJhZGlhbEFyZWE7XHJcbiAgZXhwb3J0cy5yYWRpYWxMaW5lID0gcmFkaWFsTGluZSQxO1xyXG4gIGV4cG9ydHMuc3ltYm9sID0gc3ltYm9sO1xyXG4gIGV4cG9ydHMuc3ltYm9scyA9IHN5bWJvbHM7XHJcbiAgZXhwb3J0cy5zeW1ib2xDaXJjbGUgPSBjaXJjbGU7XHJcbiAgZXhwb3J0cy5zeW1ib2xDcm9zcyA9IGNyb3NzJDE7XHJcbiAgZXhwb3J0cy5zeW1ib2xEaWFtb25kID0gZGlhbW9uZDtcclxuICBleHBvcnRzLnN5bWJvbFNxdWFyZSA9IHNxdWFyZTtcclxuICBleHBvcnRzLnN5bWJvbFN0YXIgPSBzdGFyO1xyXG4gIGV4cG9ydHMuc3ltYm9sVHJpYW5nbGUgPSB0cmlhbmdsZTtcclxuICBleHBvcnRzLnN5bWJvbFd5ZSA9IHd5ZTtcclxuICBleHBvcnRzLmN1cnZlQmFzaXNDbG9zZWQgPSBiYXNpc0Nsb3NlZDtcclxuICBleHBvcnRzLmN1cnZlQmFzaXNPcGVuID0gYmFzaXNPcGVuO1xyXG4gIGV4cG9ydHMuY3VydmVCYXNpcyA9IGJhc2lzO1xyXG4gIGV4cG9ydHMuY3VydmVCdW5kbGUgPSBidW5kbGU7XHJcbiAgZXhwb3J0cy5jdXJ2ZUNhcmRpbmFsQ2xvc2VkID0gY2FyZGluYWxDbG9zZWQ7XHJcbiAgZXhwb3J0cy5jdXJ2ZUNhcmRpbmFsT3BlbiA9IGNhcmRpbmFsT3BlbjtcclxuICBleHBvcnRzLmN1cnZlQ2FyZGluYWwgPSBjYXJkaW5hbDtcclxuICBleHBvcnRzLmN1cnZlQ2F0bXVsbFJvbUNsb3NlZCA9IGNhdG11bGxSb21DbG9zZWQ7XHJcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb21PcGVuID0gY2F0bXVsbFJvbU9wZW47XHJcbiAgZXhwb3J0cy5jdXJ2ZUNhdG11bGxSb20gPSBjYXRtdWxsUm9tO1xyXG4gIGV4cG9ydHMuY3VydmVMaW5lYXJDbG9zZWQgPSBsaW5lYXJDbG9zZWQ7XHJcbiAgZXhwb3J0cy5jdXJ2ZUxpbmVhciA9IGN1cnZlTGluZWFyO1xyXG4gIGV4cG9ydHMuY3VydmVNb25vdG9uZVggPSBtb25vdG9uZVg7XHJcbiAgZXhwb3J0cy5jdXJ2ZU1vbm90b25lWSA9IG1vbm90b25lWTtcclxuICBleHBvcnRzLmN1cnZlTmF0dXJhbCA9IG5hdHVyYWw7XHJcbiAgZXhwb3J0cy5jdXJ2ZVN0ZXAgPSBzdGVwO1xyXG4gIGV4cG9ydHMuY3VydmVTdGVwQWZ0ZXIgPSBzdGVwQWZ0ZXI7XHJcbiAgZXhwb3J0cy5jdXJ2ZVN0ZXBCZWZvcmUgPSBzdGVwQmVmb3JlO1xyXG4gIGV4cG9ydHMuc3RhY2sgPSBzdGFjaztcclxuICBleHBvcnRzLnN0YWNrT2Zmc2V0RXhwYW5kID0gZXhwYW5kO1xyXG4gIGV4cG9ydHMuc3RhY2tPZmZzZXROb25lID0gbm9uZTtcclxuICBleHBvcnRzLnN0YWNrT2Zmc2V0U2lsaG91ZXR0ZSA9IHNpbGhvdWV0dGU7XHJcbiAgZXhwb3J0cy5zdGFja09mZnNldFdpZ2dsZSA9IHdpZ2dsZTtcclxuICBleHBvcnRzLnN0YWNrT3JkZXJBc2NlbmRpbmcgPSBhc2NlbmRpbmckMTtcclxuICBleHBvcnRzLnN0YWNrT3JkZXJEZXNjZW5kaW5nID0gZGVzY2VuZGluZyQyO1xyXG4gIGV4cG9ydHMuc3RhY2tPcmRlckluc2lkZU91dCA9IGluc2lkZU91dDtcclxuICBleHBvcnRzLnN0YWNrT3JkZXJOb25lID0gbm9uZSQxO1xyXG4gIGV4cG9ydHMuc3RhY2tPcmRlclJldmVyc2UgPSByZXZlcnNlO1xyXG4gIGV4cG9ydHMuY29sb3IgPSBjb2xvcjtcclxuICBleHBvcnRzLnJnYiA9IGNvbG9yUmdiO1xyXG4gIGV4cG9ydHMuaHNsID0gY29sb3JIc2w7XHJcbiAgZXhwb3J0cy5sYWIgPSBsYWI7XHJcbiAgZXhwb3J0cy5oY2wgPSBjb2xvckhjbDtcclxuICBleHBvcnRzLmN1YmVoZWxpeCA9IGN1YmVoZWxpeDtcclxuICBleHBvcnRzLmludGVycG9sYXRlID0gaW50ZXJwb2xhdGU7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUFycmF5ID0gYXJyYXkkMTtcclxuICBleHBvcnRzLmludGVycG9sYXRlRGF0ZSA9IGRhdGU7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU51bWJlciA9IGludGVycG9sYXRlTnVtYmVyO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVPYmplY3QgPSBvYmplY3Q7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJvdW5kID0gaW50ZXJwb2xhdGVSb3VuZDtcclxuICBleHBvcnRzLmludGVycG9sYXRlU3RyaW5nID0gaW50ZXJwb2xhdGVTdHJpbmc7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtJDE7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtJDI7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVpvb20gPSBpbnRlcnBvbGF0ZVpvb207XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJnYiA9IGludGVycG9sYXRlUmdiO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpcyA9IHJnYkJhc2lzO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVSZ2JCYXNpc0Nsb3NlZCA9IHJnYkJhc2lzQ2xvc2VkO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIc2wgPSBoc2wkMTtcclxuICBleHBvcnRzLmludGVycG9sYXRlSHNsTG9uZyA9IGhzbExvbmc7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUxhYiA9IGxhYiQxO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVIY2wgPSBoY2wkMTtcclxuICBleHBvcnRzLmludGVycG9sYXRlSGNsTG9uZyA9IGhjbExvbmc7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUN1YmVoZWxpeCA9IGN1YmVoZWxpeCQyO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVCYXNpcyA9IGJhc2lzJDI7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUJhc2lzQ2xvc2VkID0gYmFzaXNDbG9zZWQkMTtcclxuICBleHBvcnRzLnF1YW50aXplID0gcXVhbnRpemU7XHJcbiAgZXhwb3J0cy5kaXNwYXRjaCA9IGRpc3BhdGNoO1xyXG4gIGV4cG9ydHMuZHN2Rm9ybWF0ID0gZHN2O1xyXG4gIGV4cG9ydHMuY3N2UGFyc2UgPSBjc3ZQYXJzZTtcclxuICBleHBvcnRzLmNzdlBhcnNlUm93cyA9IGNzdlBhcnNlUm93cztcclxuICBleHBvcnRzLmNzdkZvcm1hdCA9IGNzdkZvcm1hdDtcclxuICBleHBvcnRzLmNzdkZvcm1hdFJvd3MgPSBjc3ZGb3JtYXRSb3dzO1xyXG4gIGV4cG9ydHMudHN2UGFyc2UgPSB0c3ZQYXJzZTtcclxuICBleHBvcnRzLnRzdlBhcnNlUm93cyA9IHRzdlBhcnNlUm93cztcclxuICBleHBvcnRzLnRzdkZvcm1hdCA9IHRzdkZvcm1hdDtcclxuICBleHBvcnRzLnRzdkZvcm1hdFJvd3MgPSB0c3ZGb3JtYXRSb3dzO1xyXG4gIGV4cG9ydHMucmVxdWVzdCA9IHJlcXVlc3Q7XHJcbiAgZXhwb3J0cy5odG1sID0gaHRtbDtcclxuICBleHBvcnRzLmpzb24gPSBqc29uO1xyXG4gIGV4cG9ydHMudGV4dCA9IHRleHQ7XHJcbiAgZXhwb3J0cy54bWwgPSB4bWw7XHJcbiAgZXhwb3J0cy5jc3YgPSBjc3YkMTtcclxuICBleHBvcnRzLnRzdiA9IHRzdiQxO1xyXG4gIGV4cG9ydHMubm93ID0gbm93O1xyXG4gIGV4cG9ydHMudGltZXIgPSB0aW1lcjtcclxuICBleHBvcnRzLnRpbWVyRmx1c2ggPSB0aW1lckZsdXNoO1xyXG4gIGV4cG9ydHMudGltZW91dCA9IHRpbWVvdXQkMTtcclxuICBleHBvcnRzLmludGVydmFsID0gaW50ZXJ2YWwkMTtcclxuICBleHBvcnRzLnRpbWVJbnRlcnZhbCA9IG5ld0ludGVydmFsO1xyXG4gIGV4cG9ydHMudGltZU1pbGxpc2Vjb25kID0gbWlsbGlzZWNvbmQ7XHJcbiAgZXhwb3J0cy50aW1lTWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzO1xyXG4gIGV4cG9ydHMudGltZVNlY29uZCA9IHNlY29uZDtcclxuICBleHBvcnRzLnRpbWVTZWNvbmRzID0gc2Vjb25kcztcclxuICBleHBvcnRzLnRpbWVNaW51dGUgPSBtaW51dGU7XHJcbiAgZXhwb3J0cy50aW1lTWludXRlcyA9IG1pbnV0ZXM7XHJcbiAgZXhwb3J0cy50aW1lSG91ciA9IGhvdXI7XHJcbiAgZXhwb3J0cy50aW1lSG91cnMgPSBob3VycztcclxuICBleHBvcnRzLnRpbWVEYXkgPSBkYXk7XHJcbiAgZXhwb3J0cy50aW1lRGF5cyA9IGRheXM7XHJcbiAgZXhwb3J0cy50aW1lV2VlayA9IHRpbWVXZWVrO1xyXG4gIGV4cG9ydHMudGltZVdlZWtzID0gc3VuZGF5cztcclxuICBleHBvcnRzLnRpbWVTdW5kYXkgPSB0aW1lV2VlaztcclxuICBleHBvcnRzLnRpbWVTdW5kYXlzID0gc3VuZGF5cztcclxuICBleHBvcnRzLnRpbWVNb25kYXkgPSB0aW1lTW9uZGF5O1xyXG4gIGV4cG9ydHMudGltZU1vbmRheXMgPSBtb25kYXlzO1xyXG4gIGV4cG9ydHMudGltZVR1ZXNkYXkgPSB0dWVzZGF5O1xyXG4gIGV4cG9ydHMudGltZVR1ZXNkYXlzID0gdHVlc2RheXM7XHJcbiAgZXhwb3J0cy50aW1lV2VkbmVzZGF5ID0gd2VkbmVzZGF5O1xyXG4gIGV4cG9ydHMudGltZVdlZG5lc2RheXMgPSB3ZWRuZXNkYXlzO1xyXG4gIGV4cG9ydHMudGltZVRodXJzZGF5ID0gdGh1cnNkYXk7XHJcbiAgZXhwb3J0cy50aW1lVGh1cnNkYXlzID0gdGh1cnNkYXlzO1xyXG4gIGV4cG9ydHMudGltZUZyaWRheSA9IGZyaWRheTtcclxuICBleHBvcnRzLnRpbWVGcmlkYXlzID0gZnJpZGF5cztcclxuICBleHBvcnRzLnRpbWVTYXR1cmRheSA9IHNhdHVyZGF5O1xyXG4gIGV4cG9ydHMudGltZVNhdHVyZGF5cyA9IHNhdHVyZGF5cztcclxuICBleHBvcnRzLnRpbWVNb250aCA9IG1vbnRoO1xyXG4gIGV4cG9ydHMudGltZU1vbnRocyA9IG1vbnRocztcclxuICBleHBvcnRzLnRpbWVZZWFyID0geWVhcjtcclxuICBleHBvcnRzLnRpbWVZZWFycyA9IHllYXJzO1xyXG4gIGV4cG9ydHMudXRjTWlsbGlzZWNvbmQgPSBtaWxsaXNlY29uZDtcclxuICBleHBvcnRzLnV0Y01pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcztcclxuICBleHBvcnRzLnV0Y1NlY29uZCA9IHNlY29uZDtcclxuICBleHBvcnRzLnV0Y1NlY29uZHMgPSBzZWNvbmRzO1xyXG4gIGV4cG9ydHMudXRjTWludXRlID0gdXRjTWludXRlO1xyXG4gIGV4cG9ydHMudXRjTWludXRlcyA9IHV0Y01pbnV0ZXM7XHJcbiAgZXhwb3J0cy51dGNIb3VyID0gdXRjSG91cjtcclxuICBleHBvcnRzLnV0Y0hvdXJzID0gdXRjSG91cnM7XHJcbiAgZXhwb3J0cy51dGNEYXkgPSB1dGNEYXk7XHJcbiAgZXhwb3J0cy51dGNEYXlzID0gdXRjRGF5cztcclxuICBleHBvcnRzLnV0Y1dlZWsgPSB1dGNXZWVrO1xyXG4gIGV4cG9ydHMudXRjV2Vla3MgPSB1dGNTdW5kYXlzO1xyXG4gIGV4cG9ydHMudXRjU3VuZGF5ID0gdXRjV2VlaztcclxuICBleHBvcnRzLnV0Y1N1bmRheXMgPSB1dGNTdW5kYXlzO1xyXG4gIGV4cG9ydHMudXRjTW9uZGF5ID0gdXRjTW9uZGF5O1xyXG4gIGV4cG9ydHMudXRjTW9uZGF5cyA9IHV0Y01vbmRheXM7XHJcbiAgZXhwb3J0cy51dGNUdWVzZGF5ID0gdXRjVHVlc2RheTtcclxuICBleHBvcnRzLnV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheXM7XHJcbiAgZXhwb3J0cy51dGNXZWRuZXNkYXkgPSB1dGNXZWRuZXNkYXk7XHJcbiAgZXhwb3J0cy51dGNXZWRuZXNkYXlzID0gdXRjV2VkbmVzZGF5cztcclxuICBleHBvcnRzLnV0Y1RodXJzZGF5ID0gdXRjVGh1cnNkYXk7XHJcbiAgZXhwb3J0cy51dGNUaHVyc2RheXMgPSB1dGNUaHVyc2RheXM7XHJcbiAgZXhwb3J0cy51dGNGcmlkYXkgPSB1dGNGcmlkYXk7XHJcbiAgZXhwb3J0cy51dGNGcmlkYXlzID0gdXRjRnJpZGF5cztcclxuICBleHBvcnRzLnV0Y1NhdHVyZGF5ID0gdXRjU2F0dXJkYXk7XHJcbiAgZXhwb3J0cy51dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheXM7XHJcbiAgZXhwb3J0cy51dGNNb250aCA9IHV0Y01vbnRoO1xyXG4gIGV4cG9ydHMudXRjTW9udGhzID0gdXRjTW9udGhzO1xyXG4gIGV4cG9ydHMudXRjWWVhciA9IHV0Y1llYXI7XHJcbiAgZXhwb3J0cy51dGNZZWFycyA9IHV0Y1llYXJzO1xyXG4gIGV4cG9ydHMuZm9ybWF0TG9jYWxlID0gZm9ybWF0TG9jYWxlO1xyXG4gIGV4cG9ydHMuZm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XHJcbiAgZXhwb3J0cy5mb3JtYXRTcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXI7XHJcbiAgZXhwb3J0cy5wcmVjaXNpb25GaXhlZCA9IHByZWNpc2lvbkZpeGVkO1xyXG4gIGV4cG9ydHMucHJlY2lzaW9uUHJlZml4ID0gcHJlY2lzaW9uUHJlZml4O1xyXG4gIGV4cG9ydHMucHJlY2lzaW9uUm91bmQgPSBwcmVjaXNpb25Sb3VuZDtcclxuICBleHBvcnRzLmlzb0Zvcm1hdCA9IGZvcm1hdElzbztcclxuICBleHBvcnRzLmlzb1BhcnNlID0gcGFyc2VJc287XHJcbiAgZXhwb3J0cy50aW1lRm9ybWF0TG9jYWxlID0gZm9ybWF0TG9jYWxlJDE7XHJcbiAgZXhwb3J0cy50aW1lRm9ybWF0RGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGUkMTtcclxuICBleHBvcnRzLnNjYWxlQmFuZCA9IGJhbmQ7XHJcbiAgZXhwb3J0cy5zY2FsZVBvaW50ID0gcG9pbnQkNDtcclxuICBleHBvcnRzLnNjYWxlSWRlbnRpdHkgPSBpZGVudGl0eSQ0O1xyXG4gIGV4cG9ydHMuc2NhbGVMaW5lYXIgPSBsaW5lYXIkMjtcclxuICBleHBvcnRzLnNjYWxlTG9nID0gbG9nO1xyXG4gIGV4cG9ydHMuc2NhbGVPcmRpbmFsID0gb3JkaW5hbDtcclxuICBleHBvcnRzLnNjYWxlSW1wbGljaXQgPSBpbXBsaWNpdDtcclxuICBleHBvcnRzLnNjYWxlUG93ID0gcG93O1xyXG4gIGV4cG9ydHMuc2NhbGVTcXJ0ID0gc3FydDtcclxuICBleHBvcnRzLnNjYWxlUXVhbnRpbGUgPSBxdWFudGlsZTtcclxuICBleHBvcnRzLnNjYWxlUXVhbnRpemUgPSBxdWFudGl6ZSQxO1xyXG4gIGV4cG9ydHMuc2NhbGVUaHJlc2hvbGQgPSB0aHJlc2hvbGQkMTtcclxuICBleHBvcnRzLnNjYWxlVGltZSA9IHRpbWU7XHJcbiAgZXhwb3J0cy5zY2FsZVV0YyA9IHV0Y1RpbWU7XHJcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTEwID0gY2F0ZWdvcnkxMDtcclxuICBleHBvcnRzLnNjaGVtZUNhdGVnb3J5MjBiID0gY2F0ZWdvcnkyMGI7XHJcbiAgZXhwb3J0cy5zY2hlbWVDYXRlZ29yeTIwYyA9IGNhdGVnb3J5MjBjO1xyXG4gIGV4cG9ydHMuc2NoZW1lQ2F0ZWdvcnkyMCA9IGNhdGVnb3J5MjA7XHJcbiAgZXhwb3J0cy5zY2FsZVNlcXVlbnRpYWwgPSBzZXF1ZW50aWFsO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDdWJlaGVsaXhEZWZhdWx0ID0gY3ViZWhlbGl4JDM7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVJhaW5ib3cgPSByYWluYm93JDE7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZVdhcm0gPSB3YXJtO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVDb29sID0gY29vbDtcclxuICBleHBvcnRzLmludGVycG9sYXRlVmlyaWRpcyA9IHZpcmlkaXM7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZU1hZ21hID0gbWFnbWE7XHJcbiAgZXhwb3J0cy5pbnRlcnBvbGF0ZUluZmVybm8gPSBpbmZlcm5vO1xyXG4gIGV4cG9ydHMuaW50ZXJwb2xhdGVQbGFzbWEgPSBwbGFzbWE7XHJcbiAgZXhwb3J0cy5jcmVhdG9yID0gY3JlYXRvcjtcclxuICBleHBvcnRzLmN1c3RvbUV2ZW50ID0gY3VzdG9tRXZlbnQ7XHJcbiAgZXhwb3J0cy5sb2NhbCA9IGxvY2FsO1xyXG4gIGV4cG9ydHMubWF0Y2hlciA9IG1hdGNoZXIkMTtcclxuICBleHBvcnRzLm1vdXNlID0gbW91c2U7XHJcbiAgZXhwb3J0cy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XHJcbiAgZXhwb3J0cy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcclxuICBleHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcclxuICBleHBvcnRzLnNlbGVjdEFsbCA9IHNlbGVjdEFsbDtcclxuICBleHBvcnRzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcclxuICBleHBvcnRzLnNlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgZXhwb3J0cy5zZWxlY3RvckFsbCA9IHNlbGVjdG9yQWxsO1xyXG4gIGV4cG9ydHMudG91Y2ggPSB0b3VjaDtcclxuICBleHBvcnRzLnRvdWNoZXMgPSB0b3VjaGVzO1xyXG4gIGV4cG9ydHMud2luZG93ID0gd2luZG93O1xyXG4gIGV4cG9ydHMuYWN0aXZlID0gYWN0aXZlO1xyXG4gIGV4cG9ydHMuaW50ZXJydXB0ID0gaW50ZXJydXB0O1xyXG4gIGV4cG9ydHMudHJhbnNpdGlvbiA9IHRyYW5zaXRpb247XHJcbiAgZXhwb3J0cy5heGlzVG9wID0gYXhpc1RvcDtcclxuICBleHBvcnRzLmF4aXNSaWdodCA9IGF4aXNSaWdodDtcclxuICBleHBvcnRzLmF4aXNCb3R0b20gPSBheGlzQm90dG9tO1xyXG4gIGV4cG9ydHMuYXhpc0xlZnQgPSBheGlzTGVmdDtcclxuICBleHBvcnRzLmNsdXN0ZXIgPSBjbHVzdGVyO1xyXG4gIGV4cG9ydHMuaGllcmFyY2h5ID0gaGllcmFyY2h5O1xyXG4gIGV4cG9ydHMucGFjayA9IGluZGV4O1xyXG4gIGV4cG9ydHMucGFja1NpYmxpbmdzID0gc2libGluZ3M7XHJcbiAgZXhwb3J0cy5wYWNrRW5jbG9zZSA9IGVuY2xvc2U7XHJcbiAgZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XHJcbiAgZXhwb3J0cy5zdHJhdGlmeSA9IHN0cmF0aWZ5O1xyXG4gIGV4cG9ydHMudHJlZSA9IHRyZWU7XHJcbiAgZXhwb3J0cy50cmVlbWFwID0gaW5kZXgkMTtcclxuICBleHBvcnRzLnRyZWVtYXBCaW5hcnkgPSBiaW5hcnk7XHJcbiAgZXhwb3J0cy50cmVlbWFwRGljZSA9IHRyZWVtYXBEaWNlO1xyXG4gIGV4cG9ydHMudHJlZW1hcFNsaWNlID0gdHJlZW1hcFNsaWNlO1xyXG4gIGV4cG9ydHMudHJlZW1hcFNsaWNlRGljZSA9IHNsaWNlRGljZTtcclxuICBleHBvcnRzLnRyZWVtYXBTcXVhcmlmeSA9IHNxdWFyaWZ5O1xyXG4gIGV4cG9ydHMudHJlZW1hcFJlc3F1YXJpZnkgPSByZXNxdWFyaWZ5O1xyXG4gIGV4cG9ydHMuZm9yY2VDZW50ZXIgPSBjZW50ZXIkMTtcclxuICBleHBvcnRzLmZvcmNlQ29sbGlkZSA9IGNvbGxpZGU7XHJcbiAgZXhwb3J0cy5mb3JjZUxpbmsgPSBsaW5rO1xyXG4gIGV4cG9ydHMuZm9yY2VNYW55Qm9keSA9IG1hbnlCb2R5O1xyXG4gIGV4cG9ydHMuZm9yY2VTaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcclxuICBleHBvcnRzLmZvcmNlWCA9IHgkMztcclxuICBleHBvcnRzLmZvcmNlWSA9IHkkMztcclxuICBleHBvcnRzLmRyYWcgPSBkcmFnO1xyXG4gIGV4cG9ydHMuZHJhZ0Rpc2FibGUgPSBkcmFnRGlzYWJsZTtcclxuICBleHBvcnRzLmRyYWdFbmFibGUgPSBkcmFnRW5hYmxlO1xyXG4gIGV4cG9ydHMudm9yb25vaSA9IHZvcm9ub2k7XHJcbiAgZXhwb3J0cy56b29tID0gem9vbTtcclxuICBleHBvcnRzLnpvb21JZGVudGl0eSA9IGlkZW50aXR5JDY7XHJcbiAgZXhwb3J0cy56b29tVHJhbnNmb3JtID0gdHJhbnNmb3JtO1xyXG4gIGV4cG9ydHMuYnJ1c2ggPSBicnVzaDtcclxuICBleHBvcnRzLmJydXNoWCA9IGJydXNoWDtcclxuICBleHBvcnRzLmJydXNoWSA9IGJydXNoWTtcclxuICBleHBvcnRzLmJydXNoU2VsZWN0aW9uID0gYnJ1c2hTZWxlY3Rpb247XHJcbiAgZXhwb3J0cy5jaG9yZCA9IGNob3JkO1xyXG4gIGV4cG9ydHMucmliYm9uID0gcmliYm9uO1xyXG4gIGV4cG9ydHMuZ2VvQWxiZXJzID0gYWxiZXJzO1xyXG4gIGV4cG9ydHMuZ2VvQWxiZXJzVXNhID0gYWxiZXJzVXNhO1xyXG4gIGV4cG9ydHMuZ2VvQXJlYSA9IGFyZWEkMjtcclxuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYSA9IGF6aW11dGhhbEVxdWFsQXJlYTtcclxuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWFsQXJlYVJhdyA9IGF6aW11dGhhbEVxdWFsQXJlYVJhdztcclxuICBleHBvcnRzLmdlb0F6aW11dGhhbEVxdWlkaXN0YW50ID0gYXppbXV0aGFsRXF1aWRpc3RhbnQ7XHJcbiAgZXhwb3J0cy5nZW9BemltdXRoYWxFcXVpZGlzdGFudFJhdyA9IGF6aW11dGhhbEVxdWlkaXN0YW50UmF3O1xyXG4gIGV4cG9ydHMuZ2VvQm91bmRzID0gYm91bmRzO1xyXG4gIGV4cG9ydHMuZ2VvQ2VudHJvaWQgPSBjZW50cm9pZCQxO1xyXG4gIGV4cG9ydHMuZ2VvQ2lyY2xlID0gY2lyY2xlJDE7XHJcbiAgZXhwb3J0cy5nZW9DbGlwRXh0ZW50ID0gZXh0ZW50JDE7XHJcbiAgZXhwb3J0cy5nZW9Db25pY0NvbmZvcm1hbCA9IGNvbmljQ29uZm9ybWFsO1xyXG4gIGV4cG9ydHMuZ2VvQ29uaWNDb25mb3JtYWxSYXcgPSBjb25pY0NvbmZvcm1hbFJhdztcclxuICBleHBvcnRzLmdlb0NvbmljRXF1YWxBcmVhID0gY29uaWNFcXVhbEFyZWE7XHJcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWFsQXJlYVJhdyA9IGNvbmljRXF1YWxBcmVhUmF3O1xyXG4gIGV4cG9ydHMuZ2VvQ29uaWNFcXVpZGlzdGFudCA9IGNvbmljRXF1aWRpc3RhbnQ7XHJcbiAgZXhwb3J0cy5nZW9Db25pY0VxdWlkaXN0YW50UmF3ID0gY29uaWNFcXVpZGlzdGFudFJhdztcclxuICBleHBvcnRzLmdlb0Rpc3RhbmNlID0gZGlzdGFuY2U7XHJcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXIgPSBlcXVpcmVjdGFuZ3VsYXI7XHJcbiAgZXhwb3J0cy5nZW9FcXVpcmVjdGFuZ3VsYXJSYXcgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XHJcbiAgZXhwb3J0cy5nZW9Hbm9tb25pYyA9IGdub21vbmljO1xyXG4gIGV4cG9ydHMuZ2VvR25vbW9uaWNSYXcgPSBnbm9tb25pY1JhdztcclxuICBleHBvcnRzLmdlb0dyYXRpY3VsZSA9IGdyYXRpY3VsZTtcclxuICBleHBvcnRzLmdlb0ludGVycG9sYXRlID0gaW50ZXJwb2xhdGUkMjtcclxuICBleHBvcnRzLmdlb0xlbmd0aCA9IGxlbmd0aCQyO1xyXG4gIGV4cG9ydHMuZ2VvTWVyY2F0b3IgPSBtZXJjYXRvcjtcclxuICBleHBvcnRzLmdlb01lcmNhdG9yUmF3ID0gbWVyY2F0b3JSYXc7XHJcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWMgPSBvcnRob2dyYXBoaWM7XHJcbiAgZXhwb3J0cy5nZW9PcnRob2dyYXBoaWNSYXcgPSBvcnRob2dyYXBoaWNSYXc7XHJcbiAgZXhwb3J0cy5nZW9QYXRoID0gaW5kZXgkMztcclxuICBleHBvcnRzLmdlb1Byb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xyXG4gIGV4cG9ydHMuZ2VvUHJvamVjdGlvbk11dGF0b3IgPSBwcm9qZWN0aW9uTXV0YXRvcjtcclxuICBleHBvcnRzLmdlb1JvdGF0aW9uID0gcm90YXRpb247XHJcbiAgZXhwb3J0cy5nZW9TdGVyZW9ncmFwaGljID0gc3RlcmVvZ3JhcGhpYztcclxuICBleHBvcnRzLmdlb1N0ZXJlb2dyYXBoaWNSYXcgPSBzdGVyZW9ncmFwaGljUmF3O1xyXG4gIGV4cG9ydHMuZ2VvU3RyZWFtID0gZ2VvU3RyZWFtO1xyXG4gIGV4cG9ydHMuZ2VvVHJhbnNmb3JtID0gdHJhbnNmb3JtJDE7XHJcbiAgZXhwb3J0cy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3IgPSB0cmFuc3ZlcnNlTWVyY2F0b3I7XHJcbiAgZXhwb3J0cy5nZW9UcmFuc3ZlcnNlTWVyY2F0b3JSYXcgPSB0cmFuc3ZlcnNlTWVyY2F0b3JSYXc7XHJcblxyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XHJcblxyXG59KSk7XHJcbiIsImRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGFpbHlOYXZcIikuaW5uZXJIVE1MID0gYDxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXRvZ2dsZWFibGUtc20gIGZpeGVkLXRvcCBiZy1wcmltYXJ5IGFwcC1uYXZiYXJcIj5cclxuICAgIFxyXG4gXHJcbjxidXR0b24gYXJpYS1jb250cm9scz1cIm5hdmJhclJlc3BvbnNpdmVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5hdmlnYXRpb25cIlxyXG4gICAgY2xhc3M9XCJuYXZiYXItdG9nZ2xlciBuYXZiYXItdG9nZ2xlci1jZW50ZXIgaGlkZGVuLW1kLXVwXCIgZGF0YS10YXJnZXQ9XCIjbmF2YmFyUmVzcG9uc2l2ZVwiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIlxyXG4gICAgdHlwZT1cImJ1dHRvblwiIG9uLWNsaWNrPVwiZmFkZVVwKClcIiBpZD1cInRvZ2dsZXJcIj4gPC9idXR0b24+XHJcblxyXG48ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlICAgbXVsdGlfZHJvcF9tZW51ICAgbWVudVwiIGlkPVwibmF2YmFyUmVzcG9uc2l2ZVwiPlxyXG4gICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdiBtci1hdXRvIFwiPlxyXG4gICAgICAgIDxsaSAgaWQ9XCJiYW5uZXJcIiA+XHJcbiAgICAgICAgPGEgaHJlZj1cIi9cIiBjbGFzcz1cImJhbm5lclwiIGlkPVwibGlua2Jhbm5lclwiIHRpdGxlPVwiT3VyIERhaWx5IFRlY2hcIj48aW1nIHNyYz1cImh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9vdXJkYWlseXRlY2gubmV0L2Rpc3QvaW1nL291cmRhaWx5dGVjaGJhbm5lci5wbmdcIiBhbHQ9XCJvdXIgZGFpbHl0ZWNoIGJhbm5lclwiICAvPjwvYT5cclxuICAgICAgICA8L2xpPlxyXG4gICAgPCEtLSAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbSAgIFwiPlxyXG4gICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIi9cIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgICAgICAgICAgb24tY2xpY2s9XCJmYWRlVXAoKVwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCIgc3ViZGFpbHl0ZWNoXCI+IFRFQ0hcclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5CTE9HIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgIDwvbGk+LS0+XHJcbiAgICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW0gIFwiPlxyXG4gICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgaHJlZj1cIi9hcmNoaXZlc1wiIGRhdGEtdGFyZ2V0PVwiI25hdmJhclJlc3BvbnNpdmVcIiBkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJcclxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBvbi1jbGljaz1cImZhZGVVcCgpXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN1YmRhaWx5dGVjaCBcIj5CTE9HICDinKhcclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5BUkNISVZFUyA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICAgIDxsaSBjbGFzcz1cIm5hdi1pdGVtIGhpZGRlblwiPlxyXG4gICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgbmctaHJlZj1cImh0dHBzOi8vd3d3Lm91cmRhaWx5dGVjaC5uZXQvX0Zvcl9DYXRfRXllc19Pbmx5Xy9pbmRleC5odG1sXCJcclxuICAgICAgICAgICAgICAgIHRpdGxlPVwidG1tIEZJQ1RJT05cIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIHR5cGU9XCJidXR0b25cIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FyZXQgc3ViZGFpbHl0ZWNoXCI+Rk9SX0NBVFxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPkVZRVNfT05MWTwvc3Bhbj5cclxuICAgICAgICAgICAgPC9hPlxyXG5cclxuICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIG5nLWhyZWY9XCIvX0Zvcl9DYXRfRXllc19Pbmx5X1wiIHRpdGxlPVwidG1tIEZJQ1RJT05cIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCJcclxuICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiB0eXBlPVwiYnV0dG9uXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcmV0IHN1YmRhaWx5dGVjaFwiPkZPUl9DQVRcclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5FWUVTX09OTFk8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgPHVsIHN0eWxlPVwiei1pbmRleDowXCIgY2xhc3M9XCJtZW51LWxlZnRcIj5cclxuICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICB0bW0gRklDVElPTlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIHN0eWxlPVwiei1pbmRleDoxOTk7IFwiIG5nLWhyZWY9XCJodHRwczovL3d3dy5vdXJkYWlseXRlY2gubmV0L19Gb3JfQ2F0X0V5ZXNfT25seV8vaW5kZXguaHRtbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwidG1tIEZJQ1RJT05cIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiIHR5cGU9XCJidXR0b25cIj5Gb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2F0IEV5ZXMgT25seTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGk+RWFybHkgTW9udGhzIG9mIFdpbiYjMzk7cyBDYW1wYWlnbjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxOTk7IFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHRtbSBGSUNUSU9OXHJcbiAgICAgICAgICAgICAgICAgICAgPGEgc3R5bGU9XCJ6LWluZGV4OjE5OTsgXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmctaHJlZj1cImh0dHBzOi8vd3d3Lm91cmRhaWx5dGVjaC5uZXQvX0Zvcl9DYXRfRXllc19Pbmx5Xy9pbmRleC5odG1sI2NhcHR1cmluZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwidG1tIEZJQ1RJT05cIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCIgZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIj5GaWN0aW9uIEV4Y2VycHRzIEZyb206XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aT5UaGUgQ2FzcGVyaWFuIEFuY2VzdHJpZXM8L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+Q2FwdHVyaW5nIE9uZSBDYXQmIzM5O3MgUGFzdCBhbmQgUHJlc2VudDwvc21hbGw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIHRtbSBGSUNUSU9OXHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo1XCIgY2xhc3M9XCJuYXYtaXRlbVwiPlxyXG4gICAgICAgICAgICA8YSBjbGFzcz1cIm5hdi1saW5rXCIgZGF0YS10YXJnZXQ9XCIjbmF2YmFyUmVzcG9uc2l2ZVwiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgIG9uLWNsaWNrPVwiZmFkZVVwKClcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiIHN1YmRhaWx5dGVjaFwiPkRBVEFcclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz4gVE9PTFNcclxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPC9hPlxyXG5cclxuXHJcbiAgICAgICAgICAgIDx1bD5cclxuXHJcbiAgICAgICAgICAgICAgICA8IS0tU1RBUlQgVUwgLS0+XHJcblxyXG4gICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxMDA7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCI+IFdlYiAmbmJzcDsmbmJzcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8L2E+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAwO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93ZWJyZWZlcmVuY2UuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPldlYiBSZWZlcmVuY2U8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPk1vemlsbGEgRGV2PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3N1cHBvcnQuZ29vZ2xlLmNvbS93ZWJtYXN0ZXJzLz9obD1lblwiIHRhcmdldD1cIl9ibGFua1wiPkdvb2dsZSBEZXY8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vZGV2ZWxvcGVyLnlhaG9vLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5ZYWhvbyEgRGV2PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3d3dy53M3NjaG9vbHMuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VzMgc2Nob29sczwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93d3cudzMub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPldvcmxkIFdpZGUgV2ViIENvbnNvcnRpdW08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5pY2Fubi5vcmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5JQ0FOTjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6OTguMjtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIj5EYXRhLURyaXZlbiBEb2NzPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bCAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4Ojk4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2QzanMub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+RDNqczwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6OTguNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vY2hhcnRpby5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Y2hhcnRpbzwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OC41XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2NvZGUuc2h1dHRlcnN0b2NrLmNvbS9yaWNrc2hhdy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5yaWNrc2hhdzwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OC41XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3Jhd2dyYXBocy5pby9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5yYXdncmFwaHMuaW8gPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4Ojk4LjVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vZGltcGxlanMub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+ZGltcGxlanM8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6OTguNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly9udmQzLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5udmQzPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4Ojk4LjVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5TVkc8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6OTguNVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmtocm9ub3Mub3JnL3dlYmdsL1wiIHRhcmdldD1cIl9ibGFua1wiPldlYkdMPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4Ojk4LjVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2FudmFzX0FQSVwiIHRhcmdldD1cIl9ibGFua1wiPkNhbnZhczwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OC41XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2FsaWduZWRsZWZ0LmNvbS90dXRvcmlhbHMvZDMvYmluZGluZy1kYXRhXCIgdGFyZ2V0PVwiX2JsYW5rXCI+YmluZGluZy1kYXRhPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OC41XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUElcIiB0YXJnZXQ9XCJfYmxhbmtcIj5DYW52YXM8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6OTg7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCI+SmF2YXNjcmlwdCAmbmJzcDsmbmJzcDsgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vanNiaW4uY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SlMgQmluPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4Ojk4XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SmF2YVNjcmlwdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSXM8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwIDtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIj5EYXRhc2V0cyAmbmJzcDsmbmJzcDs8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwIDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3LmljcHNyLnVtaWNoLmVkdS9pY3BzcndlYi9JQ1BTUi9pbmRleC5qc3BcIiB0YXJnZXQ9XCJfYmxhbmtcIj5JQ1BTUlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGFzZXRzPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwIDtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vZGF0YS5pbWYub3JnLz9zaz03Q0I2NjE5Qy1DRjg3LTQ4REMtOTQ0My0yOTczRTE2MUFCRUJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiPkRhdGFzZXRzIElNRjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5OC41XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vZGF0YWpvdXJuYWxpc21oYW5kYm9vay5vcmcvMS4wL2VuL2dldHRpbmdfZGF0YV8zLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5nZXR0aW5nX2RhdGE8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwMTtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIj5EYXRhIEFuYWx5c2lzICZuYnNwOyZuYnNwOzwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAxO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vc3RhdHMuaWRyZS51Y2xhLmVkdS9vdGhlci9kYWUvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VUNMQSBTdGF0czwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxMDE7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL29wZW5yZWZpbmUub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPk9wZW5SZWZpbmU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly9zdGF0YWN1bWVuLmNvbVwiIHRhcmdldD1cIl9ibGFua1wiPlN0YXQgQWN1bWVuPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwMjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vd3d3Lm1hcGFnZXdlYi51bW9udHJlYWwuY2EvZHVyYW5kYy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5Nb250ciZlYWN1dGU7YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0czwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTI7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlPVwiYnV0dG9uXCI+U1FMICZuYnNwOyZuYnNwOyA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCI+TXlTUUwgJm5ic3A7Jm5ic3A7PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm15c3FsLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5NeVNRTDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxMjE7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2RldmVsb3Blci10b29scy9hcGV4L292ZXJ2aWV3L2luZGV4LTE1NTE4Ni5odG1sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIj5PcmFjbGUgRXhwcmVzczwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxMjE7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2lhY2FkZW15Lm9yYWNsZS5jb21cIiB0YXJnZXQ9XCJfYmxhbmtcIj5BcHBsaWNhdGlvbiBFeHByZXNzPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDoxO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgY2xhc3M9XCJkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiPiBSLVByb2plY3QgJm5ic3A7Jm5ic3A7IDwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5yLXByb2plY3Qub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPlItUHJvamVjdCA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3d3dy5yc3R1ZGlvLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5SU3R1ZGlvPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9zaGlueS5yc3R1ZGlvLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5TaGlueTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly9hbXNhbnRhYy5jby9ibG9nL2VuLzIwMTUvMTAvMzEvcWdpcy1yLmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5PcGVuIEdJUzwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93d3cudGFibGVhdS5jb20vcHJvZHVjdHMvY2xvdWQtYmlcIiB0YXJnZXQ9XCJfYmxhbmtcIj5UYWJsZWF1IDwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWhhc3BvcHVwPVwidHJ1ZVwiIGNsYXNzPVwiZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIj4gUHl0aG9uICZuYnNwOyZuYnNwOyA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjE7XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5QeXRob24ub3JnPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaVwiIHRhcmdldD1cIl9ibGFua1wiPlB5dGhvbiBQYWNrYWdlIEluZGV4PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMi9saWJyYXJ5L2luZGV4Lmh0bWxcIiB0YXJnZXQ9XCJfYmxhbmtcIj5QeXRob24gU3RhbmRhcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaWJyYXJ5PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy9wYW5kYXMtZG9jcy9zdGFibGUvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+UGFuZGFzIERhdGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbmFseXNpcyBUb29sa2l0PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgY2xhc3M9XCJkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiPlZhbGlkYXRvcnMgJm5ic3A7Jm5ic3A7PC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIHN0eWxlPVwiei1pbmRleDo5O1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vc3RhdHMuaWRyZS51Y2xhLmVkdS9vdGhlci9kYWUvXCIgdGFyZ2V0PVwiX2JsYW5rXCI+VmFsaWRhdG9ycyA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwOi8vdmFsaWRhdG9yLnczLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPkhUTUwgdmFsaWRhdG9yPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2ppZ3Nhdy53My5vcmcvY3NzLXZhbGlkYXRvci9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5DU1MgdmFsaWRhdG9yPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2pzb25saW50LmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5KU09OIFZhbGlkYXRvcjwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAxO1wiPlxyXG4gICAgICAgICAgICAgICAgPGEgYXJpYS1leHBhbmRlZD1cImZhbHNlXCIgYXJpYS1oYXNwb3B1cD1cInRydWVcIiBjbGFzcz1cImRyb3Bkb3duLXRvZ2dsZVwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIlxyXG4gICAgICAgICAgICAgICAgICAgIHJvbGU9XCJidXR0b25cIj5TdHlsZXMgJm5ic3A7Jm5ic3A7PC9hPlxyXG4gICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAxO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly9odG1sLWNvbG9yLWNvZGVzLmluZm8vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Q29sb3IgQ29kZXM8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwMTtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9pbmtzY2FwZS5vcmcvZW4vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+SW5rc2NhcGU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwMjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL2NvZGVwZW4uaW8vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+Y29kZXBlbi5pbzwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaSBzdHlsZT1cInotaW5kZXg6MTAyO1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3d3dy5keW5hbWljZHJpdmUuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPkR5bmFtaWMgRHJpdmU8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGkgc3R5bGU9XCJ6LWluZGV4OjEwMjtcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly93d3cudXNlaXQuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPk5pZWxzb24gTm9ybWFuIEdyb3VwPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3d3dy5rYWdnbGUuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+S2FnZ2xlPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cDovL3BsbmtyLmNvL1wiIHRhcmdldD1cIl9ibGFua1wiPlBsdW5rZXI8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPiBcclxuICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImxhc3RcIiBocmVmPVwiaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+U3RhY2sgT3ZlcmZsb3c8L2E+XHJcbiAgICAgICAgICAgICAgICA8L2xpPiBcclxuXHJcblxyXG4gICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICA8IS0tZW5kIFVMLS0+XHJcblxyXG5cclxuICAgICAgICA8L2xpPlxyXG4gICAgPC91bD5cclxuICAgIDx1bCBpZD1cIm1lZGlhXCIgY2xhc3M9XCJuYXYgbmF2YmFyLW5hdiBuYXZiYXItcmlnaHRcIj5cclxuXHJcblxyXG4gICAgICAgIDxsaT5cclxuXHJcbiAgICAgICAgICAgIDxhIHRpdGxlPVwiTWVkaXVtXCIgaHJlZj1cImh0dHBzOi8vbWVkaXVtLmNvbS9AdGhvbWFzbTFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuXHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLW1lZGl1bVwiPjwvaT5cclxuXHJcbiAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgPC9saT5cclxuICAgICAgICA8bGk+XHJcblxyXG4gICAgICAgICAgICA8YSB0aXRsZT1cImdpdGh1YlwiIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vdGhvbWFzbTFcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuXHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWdpdGh1YlwiPjwvaT5cclxuXHJcbiAgICAgICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgPC9saT5cclxuXHJcblxyXG4gICAgICAgIDxsaT5cclxuXHJcbiAgICAgICAgICAgIDxhIHRpdGxlPVwiZmFjZWJvb2tcIiBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Rob21hc20xLm1hZXN0YXNcIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuXHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWZhY2Vib29rXCI+PC9pPlxyXG5cclxuICAgICAgICAgICAgPC9hPlxyXG5cclxuICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICA8bGk+XHJcblxyXG4gICAgICAgICAgICA8YSB0aXRsZT1cImxpbmtlZGluXCIgaHJlZj1cImh0dHA6Ly9saW5rZWRpbi5jb20vaW4vdGhvbWFzbWFlc3Rhc1wiIHRhcmdldD1cIl9ibGFua1wiPlxyXG5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtbGlua2VkaW5cIj48L2k+XHJcblxyXG4gICAgICAgICAgICA8L2E+XHJcblxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPCEtLUVuZCBVTCAtLT5cclxuXHJcbiAgICA8L3VsPlxyXG4gICAgPGFiYnIgdGl0bGU9XCJPdXIgRGFpbHkgVGVjaFwiPlxyXG5cclxuICAgICAgICA8aW1nIGNsYXNzPVwiY2FyZC1wcm9maWxlLWltZyB6b29tXCIgaWQ9XCJkYWlseWxvZ29cIiBhbHQ9XCJpbWFnZSBvZiBMZSBNb250IFJlYWxcIlxyXG4gICAgICAgICAgICBzcmM9XCJkaXN0L2ltZy9ibHVlQ29sb3JUcmlvbXBoZS5wbmdcIiAvPlxyXG5cclxuICAgIDwvYWJicj5cclxuXHJcbjwvZGl2PlxyXG5cclxuPC9uYXY+YCIsIlxyXG5cclxuXHRcdFx0XHQgXHJcblxyXG5cdFx0XHRcdFx0XHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbnZhc1wiKSxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKSxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHR3aWR0aCA9IGNhbnZhcy53aWR0aCxcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRoZWlnaHQgPSBjYW52YXMuaGVpZ2h0OyBcclxuXHJcblx0XHRcdFx0XHRcdFx0ZDMuY3N2KFwiZGF0YS9tYXBzLmNzdlwiLCBmdW5jdGlvbihlcnJvciwgZGF0YSkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7IFxyXG5cdFx0XHRcdFx0XHRcdCAgdmFyIHJvb3QgPSBkMy5zdHJhdGlmeSgpIFxyXG5cdFx0XHRcdFx0XHRcdFx0ICAuaWQoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5wYXRoOyB9KSBcclxuXHRcdFx0XHRcdFx0XHRcdCAgLnBhcmVudElkKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQucGF0aC5zdWJzdHJpbmcoMCwgZC5wYXRoLmxhc3RJbmRleE9mKFwiL1wiKSk7IH0pXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0KGRhdGEpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFx0ICB2YXIgbm9kZXMgPSByb290LmRlc2NlbmRhbnRzKCksXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ICBsaW5rcyA9IHJvb3QubGlua3MoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHJcblxyXG5cdFx0XHRcdFx0XHRcdCAgdmFyIHNpbXVsYXRpb24gPSBkMy5mb3JjZVNpbXVsYXRpb24obm9kZXMpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ICAuZm9yY2UoXCJjaGFyZ2VcIiwgZDMuZm9yY2VNYW55Qm9keSgpKVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCAgLmZvcmNlKFwibGlua1wiLCBkMy5mb3JjZUxpbmsobGlua3MpLnN0cmVuZ3RoKDEpKVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdCAgLmZvcmNlKFwieFwiLCBkMy5mb3JjZVgoKSlcclxuXHJcblx0XHRcdFx0XHRcdFx0XHQgIC5mb3JjZShcInlcIiwgZDMuZm9yY2VZKCkpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ICAub24oXCJ0aWNrXCIsIHRpY2tlZCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGQzLnNlbGVjdChjYW52YXMpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ICAuY2FsbChkMy5kcmFnKClcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgLmNvbnRhaW5lcihjYW52YXMpXHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0XHQgIC5zdWJqZWN0KGRyYWdzdWJqZWN0KVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ICAub24oXCJzdGFydFwiLCBkcmFnc3RhcnRlZClcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdCAgLm9uKFwiZHJhZ1wiLCBkcmFnZ2VkKVxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdFx0ICAub24oXCJlbmRcIiwgZHJhZ2VuZGVkKSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGZ1bmN0aW9uIHRpY2tlZCgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnNhdmUoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGxpbmtzLmZvckVhY2goZHJhd0xpbmspO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcInN0ZWVsYmx1ZVwiO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0bm9kZXMuZm9yRWFjaChkcmF3Tm9kZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmZpbGwoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJzdGVlbGJsdWVcIjtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0ICB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGZ1bmN0aW9uIGRyYWdzdWJqZWN0KCkge1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaW11bGF0aW9uLmZpbmQoZDMuZXZlbnQueCAtIHdpZHRoIC8gMiwgZDMuZXZlbnQueSAtIGhlaWdodCAvIDIpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHQgIH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHJcblxyXG5cdFx0XHRcdFx0XHRcdCAgZnVuY3Rpb24gZHJhZ3N0YXJ0ZWQoKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFkMy5ldmVudC5hY3RpdmUpIHNpbXVsYXRpb24uYWxwaGFUYXJnZXQoMC45KS5yZXN0YXJ0KCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdFx0ZDMuZXZlbnQuc3ViamVjdC5meCA9IGQzLmV2ZW50LnN1YmplY3QueDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRkMy5ldmVudC5zdWJqZWN0LmZ5ID0gZDMuZXZlbnQuc3ViamVjdC55O1xyXG5cclxuXHRcdFx0XHRcdFx0XHQgIH1cclxuXHJcblx0XHRcdFx0XHRcdFx0XHJcblxyXG5cdFx0XHRcdFx0XHRcdCAgZnVuY3Rpb24gZHJhZ2dlZCgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRkMy5ldmVudC5zdWJqZWN0LmZ4ID0gZDMuZXZlbnQueDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRkMy5ldmVudC5zdWJqZWN0LmZ5ID0gZDMuZXZlbnQueTtcclxuXHJcblx0XHRcdFx0XHRcdFx0ICB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGZ1bmN0aW9uIGRyYWdlbmRlZCgpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoIWQzLmV2ZW50LmFjdGl2ZSkgc2ltdWxhdGlvbi5hbHBoYVRhcmdldCgwKTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRkMy5ldmVudC5zdWJqZWN0LmZ4ID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRkMy5ldmVudC5zdWJqZWN0LmZ5ID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRcdFx0ICB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGZ1bmN0aW9uIGRyYXdMaW5rKGQpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhkLnNvdXJjZS54LCBkLnNvdXJjZS55KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhkLnRhcmdldC54LCBkLnRhcmdldC55KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0ICB9XHJcblxyXG5cdFx0XHRcdFx0XHRcdFxyXG5cclxuXHRcdFx0XHRcdFx0XHQgIGZ1bmN0aW9uIGRyYXdOb2RlKGQpIHtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhkLnggKyAzLCBkLnkpO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQuYXJjKGQueCwgZC55LCAzLCAwLCAyICogTWF0aC5QSSk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdCAgfVxyXG5cclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHRcdFx0ICIsImxldCB1cmwgPVxyXG4gIFwiaHR0cHM6Ly9hcGkubmFzYS5nb3YvcGxhbmV0YXJ5L2Fwb2Q/YXBpX2tleT1tRjZEUUVxWTNXdEN1YmdhYjVQMm90UVE2YlAxYjhuWTI0Vm1pSncwXCI7XHJcbmxldCB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxueGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gXHJcbiAgaWYgKHhodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHR0cC5zdGF0dXNUZXh0ID09IFwiT0tcIikgeyAgIFxyXG4gIGNvbnNvbGUubG9nKFwib25yZWFkeXN0YXRlIGNoYW5nZWQtIHhodHRwLnN0YXR1c1RleHQ6IFwiICsgeGh0dHAuc3RhdHVzVGV4dCk7XHJcbiAgICBsZXQgcmVzdWx0ID0gSlNPTi5wYXJzZSh0aGlzLnJlc3BvbnNlVGV4dCk7XHJcbiAgICBjb25zb2xlLmxvZyhcInRoaXMucmVzcG9uc2VUZXh0OiBcIit0aGlzLnJlc3BvbnNlVGV4dCk7XHJcbiAgICBpZiAocmVzdWx0LmNvcHlyaWdodCAhPSBcIlwiKSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29weXJpZ2h0XCIpLmlubmVySFRNTCA9XHJcbiAgICAgICAgXCJJbWFnZSBDcmVkaXRzOiBcIiArIHJlc3VsdC5jb3B5cmlnaHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvcHlyaWdodFwiKS5pbm5lckhUTUwgPVxyXG4gICAgICAgIFwiSW1hZ2UgQ3JlZGl0czogXCIgKyBcIlB1YmxpYyBEb21haW5cIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzdWx0Lm1lZGlhX3R5cGUgPT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBvZF9pbWdfaWRcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwb2RfdmlkX2lkXCIpLnNldEF0dHJpYnV0ZShcInNyY1wiLCByZXN1bHQudXJsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBvZF92aWRfaWRcIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwb2RfaW1nX2lkXCIpLnNldEF0dHJpYnV0ZShcInNyY1wiLCByZXN1bHQudXJsKTtcclxuICAgIH1cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVxT2JqZWN0XCIpLnRleHQgPSB1cmw7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJldHVybk9iamVjdFwiKS5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShcclxuICAgICAgcmVzdWx0LFxyXG4gICAgICBudWxsLFxyXG4gICAgICA0XHJcbiAgICApO1xyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcG9kX2V4cGxhaW5hdGlvblwiKS5pbm5lckhUTUwgPSByZXN1bHQuZXhwbGFuYXRpb247XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwb2RfdGl0bGVcIikuaW5uZXJIVE1MID0gcmVzdWx0LnRpdGxlO1xyXG4gXHJcbiAgfSAvLy8gSUYgMjAwXHJcbn07XHJcbnhodHRwLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxueGh0dHAuc2VuZCgpO1xyXG4iLCJ2YXIgbW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXNpbXBsZU1vZGFsJyk7ICBcclxudmFyIG1vZGFsQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21tb2RhbEJ0bicpOyBcclxudmFyIGNsb3NlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbWNsb3NlQnRuJylbMF07ICBcclxuXHJcbm1vZGFsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3Blbk1vZGFsKTsgXHJcbmNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VNb2RhbCk7IFxyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvdXRzaWRlQ2xpY2spOyBcclxuXHJcbmZ1bmN0aW9uIG9wZW5Nb2RhbCgpe1xyXG4gIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gIG1vZGFsQnRuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbn0gXHJcbmZ1bmN0aW9uIGNsb3NlTW9kYWwoKXtcclxuICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gIG1vZGFsQnRuLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG59IFxyXG5mdW5jdGlvbiBvdXRzaWRlQ2xpY2soZSl7XHJcbiAgaWYoZS50YXJnZXQgPT0gbW9kYWwpe1xyXG4gICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICBtb2RhbEJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICB9XHJcbn07Il19